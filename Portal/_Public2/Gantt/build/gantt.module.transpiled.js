/*

Bryntum Gantt 1.1.5
Copyright(c) 2019 Bryntum AB
https://bryntum.com/contact
https://bryntum.com/license

*/
"use strict";require("core-js/modules/es6.reflect.construct");Object.defineProperty(exports,"__esModule",{value:true});exports.ContextMenu=exports.ColumnResize=exports.ColumnReorder=exports.ColumnPicker=exports.ColumnDragToolbar=exports.CellTooltip=exports.GridRowModel=exports.ColumnStore=exports.ResourceInfoColumn=exports.TimeAxisColumn=exports.WidgetColumn=exports.TimeColumn=exports.TreeColumn=exports.TemplateColumn=exports.RowNumberColumn=exports.RatingColumn=exports.PercentColumn=exports.DateColumn=exports.CheckColumn=exports.Column=exports.Widget=exports.Tooltip=exports.Toast=exports.TimePicker=exports.TimeField=exports.TextAreaField=exports.TextField=exports.TabPanel=exports.Slider=exports.Ripple=exports.Popup=exports.Panel=exports.Toolbar=exports.Tool=exports.NumberField=exports.MenuItem=exports.Menu=exports.Mask=exports.ChipView=exports.List=exports.DurationField=exports.DatePicker=exports.DateField=exports.FlagField=exports.FilePicker=exports.FileField=exports.Field=exports.Container=exports.Combo=exports.Checkbox=exports.CalendarPanel=exports.ButtonGroup=exports.Button=exports.BooleanCombo=exports.Badge=exports.Parser=exports.Collection=exports.CollectionSorter=exports.CollectionFilter=exports.State=exports.Pluggable=exports.Override=exports.InstancePlugin=exports.Events=exports.Delayable=exports.Scroller=exports.Fullscreen=exports.DataGenerator=exports.GlobalEvents=exports.ResizeMonitor=exports.Rectangle=exports.Point=exports.WidgetHelper=exports.VersionHelper=exports.TemplateHelper=exports.StringHelper=exports.ResizeHelper=exports.ObjectHelper=exports.RandomGenerator=exports.IdHelper=exports.FunctionHelper=exports.EventHelper=exports.DragHelper=exports.DomHelper=exports.DomClassList=exports.DateHelper=exports.CSSHelper=exports.BrowserHelper=exports.ArrayHelper=exports.AjaxHelper=exports.Transaction=exports.StateTrackingManager=exports.Store=exports.Model=exports.DomDataStore=exports.AjaxStore=exports.LocaleManager=exports.Localizable=exports.BryntumWidgetAdapterRegister=exports.BryntumWidgetAdapter=void 0;exports.ProgressLine=exports.PercentBar=exports.DependencyEdit=exports.Dependencies=exports.CriticalPaths=exports.CellEdit=exports.Baselines=exports.MinimalProject=exports.AssignmentsManipulationStore=exports.TaskStore=exports.ResourceStore=exports.DependencyStore=exports.AssignmentStore=exports.WBSColumn=exports.TotalSlackColumn=exports.SuccessorColumn=exports.StartDateColumn=exports.ShowInTimelineColumn=exports.SequenceColumn=exports.SchedulingModeColumn=exports.ResourceAssignmentColumn=exports.PredecessorColumn=exports.PercentDoneColumn=exports.NoteColumn=exports.NameColumn=exports.MilestoneColumn=exports.ManuallyScheduledColumn=exports.LateStartDateColumn=exports.LateEndDateColumn=exports.GanttDateColumn=exports.EventModeColumn=exports.EndDateColumn=exports.EffortColumn=exports.EarlyStartDateColumn=exports.EarlyEndDateColumn=exports.DurationColumn=exports.DependencyColumn=exports.ConstraintTypeColumn=exports.ConstraintDateColumn=exports.CalendarColumn=exports.AllColumns=exports.AddNewColumn=exports.Scheduler=exports.HorizontalTimeAxis=exports.TimeAxisViewModel=exports.RectangularPathFinder=exports.ViewPreset=exports.PresetManager=exports.TimeSpan=exports.SchedulerResourceModel=exports.EventModel=exports.SchedulerDependencyModel=exports.DependencyBaseModel=exports.SchedulerCalendarDayModel=exports.Baseline=exports.SchedulerAssignmentModel=exports.ProjectLines=exports.TimeRanges=exports.ResourceTimeRanges=exports.Pan=exports.NonWorkingTime=exports.Labels=exports.HeaderContextMenu=exports.EventTooltip=exports.EventFilter=exports.EventEdit=exports.EventResize=exports.EventDragCreate=exports.EventDrag=exports.EventContextMenu=exports.SchedulerDependencies=exports.ColumnLines=exports.TimeAxis=exports.SchedulerResourceStore=exports.EventStore=exports.SchedulerDependencyStore=exports.CrudManager=exports.SchedulerCalendar=exports.SchedulerAssignmentStore=exports.AbstractCrudManager=exports.AjaxTransport=exports.RowManager=exports.TreeGrid=exports.Grid=exports.SubGrid=exports.Header=exports.Bar=exports.Tree=exports.Summary=exports.Stripe=exports.Sort=exports.Search=exports.RowReorder=exports.RegionResize=exports.QuickFind=exports.GroupSummary=exports.Group=exports.GridFeatureManager=exports.FilterBar=exports.Filter=void 0;exports.GanttTag=exports.TimeUnit=exports.SchedulingMode=exports.ConstraintType=exports.EffectResolutionResult=exports.ProjectGenerator=exports.ResourceAssignmentParser=exports.Timeline=exports.NotesTab=exports.ResourcesTab=exports.SuccessorsTab=exports.PredecessorsTab=exports.DependencyTab=exports.AdvancedTab=exports.GeneralTab=exports.FormTab=exports.EventLoader=exports.EventChangePropagator=exports.TaskEditor=exports.SchedulingModePicker=exports.EffortField=exports.Editor=exports.DependencyField=exports.DependencyTypePicker=exports.ConstraintTypePicker=exports.AssignmentField=exports.AssignmentPicker=exports.AssignmentGrid=exports.AssignmentEditGrid=exports.Gantt=exports.WeekModel=exports.TaskSegmentModel=exports.TaskModel=exports.SubProjectModel=exports.ResourceModel=exports.ProjectModel=exports.DependencyModel=exports.CalendarModel=exports.CalendarDayModel=exports.AssignmentsManipulationModel=exports.AssignmentModel=exports.TaskTooltip=exports.TaskContextMenu=exports.TaskEditStm=exports.TaskEdit=void 0;require("core-js/modules/es6.reflect.has");require("core-js/modules/es7.object.define-getter");require("core-js/modules/es6.regexp.search");require("regenerator-runtime/runtime");require("core-js/modules/es6.set");require("core-js/modules/es6.reflect.own-keys");require("core-js/modules/es6.map");require("core-js/modules/es6.string.repeat");require("core-js/modules/es6.array.find");require("core-js/modules/es6.weak-map");require("core-js/modules/es6.array.from");require("core-js/modules/es6.math.sign");require("core-js/modules/es6.string.ends-with");require("core-js/modules/es7.string.pad-end");require("core-js/modules/es7.string.pad-start");require("core-js/modules/es6.regexp.constructor");require("core-js/modules/es6.object.is-extensible");require("core-js/modules/es6.array.find-index");require("core-js/modules/es6.reflect.set");require("core-js/modules/es6.number.is-nan");require("core-js/modules/es7.object.entries");require("core-js/modules/es6.string.anchor");require("core-js/modules/es6.regexp.match");require("core-js/modules/es7.object.values");require("core-js/modules/es7.array.includes");require("core-js/modules/es6.string.includes");require("core-js/modules/es6.object.keys");require("core-js/modules/es6.object.is-frozen");require("core-js/modules/es6.object.freeze");require("core-js/modules/es6.reflect.define-property");require("core-js/modules/es6.reflect.get-own-property-descriptor");require("core-js/modules/es6.object.assign");require("core-js/modules/es6.string.starts-with");require("core-js/modules/es6.number.constructor");require("core-js/modules/es6.string.iterator");require("core-js/modules/es6.reflect.get");require("core-js/modules/es6.regexp.replace");require("core-js/modules/es6.regexp.split");require("core-js/modules/es6.typed.uint8-array");require("core-js/modules/es6.promise");require("core-js/modules/web.dom.iterable");require("core-js/modules/es6.array.iterator");require("core-js/modules/es6.function.name");require("core-js/modules/es6.regexp.to-string");require("core-js/modules/es6.object.to-string");require("core-js/modules/es7.symbol.async-iterator");require("core-js/modules/es6.symbol");function _templateObject30(){var data=_taggedTemplateLiteral(["\n             <table class=\"b-sch-dependency-tooltip\">\n                <tr>\n                    <td>",": </td>\n                    <td>"," ","</td>\n                    <td><div class=\"b-sch-box b-","\"></div></td>\n                </tr>\n                <tr>\n                    <td>",": </td>\n                    <td>"," ","</td>\n                    <td><div class=\"b-sch-box b-","\"></div></td>\n                </tr>\n            </table>\n        "]);_templateObject30=function _templateObject30(){return data;};return data;}function _templateObject29(){var data=_taggedTemplateLiteral(["<div class=\"b-sch-header-row b-sch-header-row-","\" headerPosition=\"","\">\n                ","\n            </div>"]);_templateObject29=function _templateObject29(){return data;};return data;}function _templateObject28(){var data=_taggedTemplateLiteral(["",""]);_templateObject28=function _templateObject28(){return data;};return data;}function _templateObject27(){var data=_taggedTemplateLiteral(["\n             <table class=\"b-sch-dependency-tooltip\">\n                <tr>\n                    <td>",": </td>\n                    <td>","</td>\n                    <td>\n                        <div class=\"b-sch-box b-","\"></div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>",": </td>\n                    <td>","</td>\n                    <td><div class=\"b-sch-box b-","\"></div></td>\n                </tr>\n            </table>\n        "]);_templateObject27=function _templateObject27(){return data;};return data;}function _templateObject26(){var data=_taggedTemplateLiteral(["\n            <div tabindex=\"-1\">\n                <header reference=\"headerContainer\" class=\"b-grid-header-container ","\"></header>\n                <div reference=\"bodyContainer\" class=\"b-grid-body-container\">\n                    <div reference=\"verticalScroller\" class=\"b-grid-vertical-scroller\"></div>\n                </div>\n                <div reference=\"virtualScrollers\" class=\"b-virtual-scrollers ","\" style=\"","\"></div>\n                <footer reference=\"footerContainer\" class=\"b-grid-footer-container b-hidden\"></footer>\n            </div>\n        "]);_templateObject26=function _templateObject26(){return data;};return data;}function _templateObject25(){var data=_taggedTemplateLiteral(["\n            <div class=\"b-grid-row\">\n                ","\n            </div>\n        "]);_templateObject25=function _templateObject25(){return data;};return data;}function _templateObject24(){var data=_taggedTemplateLiteral(["\n                <div reference=\"splitterElement\" data-region=\"","\" class=\"","\">\n                    <div class=\"b-grid-splitter-inner\"></div>\n                    <i class=\"b-icon b-icon-collapse-gridregion\"></i>\n                    <i class=\"b-icon b-icon-expand-gridregion\"></i>\n                </div>"]);_templateObject24=function _templateObject24(){return data;};return data;}function _templateObject23(){var data=_taggedTemplateLiteral(["\n            <div class=\"b-grid-subgrid b-grid-subgrid-"," b-grid-horizontal-scroller\" data-region=\"","\">\n                <div reference=\"virtualScrollerElement\" class=\"b-virtual-scroller\" data-region=\"","\">\n                    <div reference=\"virtualScrollerWidth\" class=\"b-virtual-width\"></div>\n                </div>\n                ","\n            </div>\n        "]);_templateObject23=function _templateObject23(){return data;};return data;}function _templateObject22(){var data=_taggedTemplateLiteral(["\n                <div class=\"b-grid-header\" data-column=\"","\" data-column-id=\"","\" ",">\n                    <div class=\"b-grid-header-text\">\n                        <div class=\"b-grid-header-text-content\"></div>\n                    </div>\n                    ","\n                    <div class=\"b-grid-header-resize-handle\"></div>\n                </div>\n            "]);_templateObject22=function _templateObject22(){return data;};return data;}function _templateObject21(){var data=_taggedTemplateLiteral(["\n            <div class=\"b-grid-header-scroller b-grid-header-scroller-","\">\n                <div reference=\"headersElement\" class=\"b-grid-headers b-grid-headers-","\" data-region=\"","\" data-max-depth=\"","\" reference=\"headersElement\"></div>\n            </div>\n        "]);_templateObject21=function _templateObject21(){return data;};return data;}function _templateObject20(){var data=_taggedTemplateLiteral(["\n                <div \n                    class=\"b-grid-footer "," ","\" \n                    data-column=\"","\" data-column-id=\"","\" data-all-index=\"","\"\n                    >\n                    ","\n                </div>"]);_templateObject20=function _templateObject20(){return data;};return data;}function _templateObject19(){var data=_taggedTemplateLiteral(["\n            <div class=\"b-grid-footer-scroller b-grid-footer-scroller-","\">\n                <div reference=\"footersElement\" class=\"b-grid-footers b-grid-footers-","\" data-region=\"","\"></div>\n            </div>\n        "]);_templateObject19=function _templateObject19(){return data;};return data;}function _templateObject18(){var data=_taggedTemplateLiteral(["\n                        <div class=\"b-target-button\" data-name=\"","\" data-disabled=\"","\">\n                            <i class=\"","\"></i>\n                            ","\n                        </div>\n                    "]);_templateObject18=function _templateObject18(){return data;};return data;}function _templateObject17(){var data=_taggedTemplateLiteral(["\n                <div class=\"b-group\">\n                    <div class=\"b-buttons\">\n                    ","\n                    </div>\n                    <div class=\"b-title\">","</div>\n                </div>\n            "]);_templateObject17=function _templateObject17(){return data;};return data;}function _templateObject16(){var data=_taggedTemplateLiteral(["\n            <div class=\"b-columndragtoolbar\">     \n            <div class=\"b-title\"></div>          \n            ","\n            </div>"]);_templateObject16=function _templateObject16(){return data;};return data;}function _templateObject15(){var data=_taggedTemplateLiteral(["\n            <input\n             type=\"file\"\n             id=\"","_input\"\n             class=\"","\"\n             ","\n             accept=\"","\"\n            />\n        "]);_templateObject15=function _templateObject15(){return data;};return data;}function _templateObject14(){var data=_taggedTemplateLiteral(["<input type=\"text\"\n                readOnly=\"readonly\"\n                reference=\"displayElement\"\n                placeholder=\"","\"/>"]);_templateObject14=function _templateObject14(){return data;};return data;}function _templateObject13(){var data=_taggedTemplateLiteral(["<textarea\n                reference=\"input\"\n                class=\"","\"\n                placeholder=\"","\"\n                name=\"","\"\n                style=\"resize:","\"\n                id=\"","\"></textarea>"]);_templateObject13=function _templateObject13(){return data;};return data;}function _templateObject12(){var data=_taggedTemplateLiteral(["\n                <div>\n                    <div class=\"b-tabpanel-tabs\" reference=\"tabStrip\">\n                        ","\n                    </div>\n                    <div class=\"b-tabpanel-body\" reference=\"tabPanelBody\" data-activeIndex=\"","\">\n                    </div>\n                </div>\n            "]);_templateObject12=function _templateObject12(){return data;};return data;}function _templateObject11(){var data=_taggedTemplateLiteral(["\n            <div class=\"","\">\n                <input type=\"range\"\n                   reference=\"input\"\n                   id=\"","_input\"\n                   min=\"","\"\n                   max=\"","\"\n                   step=\"","\"\n                   value=\"","\">\n                <label reference=\"label\" for=\"","_input\">","</label>\n            </div>\n        "]);_templateObject11=function _templateObject11(){return data;};return data;}function _templateObject10(){var data=_taggedTemplateLiteral(["\n            <input type=\"number\"\n                reference=\"input\"\n                min=\"","\"\n                max=\"","\"\n                step=\"any\"\n                value=\"","\"\n                autocomplete=\"","\"\n                placeholder=\"","\"\n                name=\"","\"\n                id=\"","_input\"\n                ","/>\n            "]);_templateObject10=function _templateObject10(){return data;};return data;}function _templateObject9(){var data=_taggedTemplateLiteral(["<input type=\"","\"\n            reference=\"input\"\n            class=\"","\"\n            min=\"","\"\n            max=\"","\"\n            placeholder=\"","\"\n            name=\"","\"\n            id=\"","\"/>"]);_templateObject9=function _templateObject9(){return data;};return data;}function _templateObject8(){var data=_taggedTemplateLiteral(["","\n            ","\n            ",""]);_templateObject8=function _templateObject8(){return data;};return data;}function _templateObject7(){var data=_taggedTemplateLiteral(["","",""]);_templateObject7=function _templateObject7(){return data;};return data;}function _templateObject6(){var data=_taggedTemplateLiteral(["<div class=\"","\" data-index=\"","\" data-id=\"","\" ",">\n            ","\n            </div>"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=_taggedTemplateLiteral(["",""]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral(["<input type=\"","\"\n            reference=\"input\"\n            class=\"","\"\n            placeholder=\"","\" \n            autocomplete=\"","\"\n            name=\"","\"\n            id=\"","\"\n            ","/>"]);_templateObject4=function _templateObject4(){return data;};return data;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _templateObject3(){var data=_taggedTemplateLiteral(["\n            <input type=\"checkbox\" id=\"","_input\" reference=\"input\"/>\n            <label class=\"b-checkbox-label\" for=\"","_input\" reference=\"textLabel\">","</label>\n        "]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral(["\n            <button class=\""," ","\" ",">\n                \xA0\n            </button>\n        "],["\n            <button class=\""," ","\" ",">\n                \\xa0\n            </button>\n        "]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral(["\n            <"," "," "," class=\"","\" "," tabIndex=\"-1\">\n                ","\n                <span class=\"b-menu-text\" reference=\"textElement\">","</span>\n                ","\n            </",">"]);_templateObject=function _templateObject(){return data;};return data;}function _taggedTemplateLiteral(strings,raw){if(!raw){raw=strings.slice(0);}return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}));}function set(target,property,value,receiver){if(typeof Reflect!=="undefined"&&Reflect.set){set=Reflect.set;}else{set=function set(target,property,value,receiver){var base=_superPropBase2(target,property);var desc;if(base){desc=Object.getOwnPropertyDescriptor(base,property);if(desc.set){desc.set.call(receiver,value);return true;}else if(!desc.writable){return false;}}desc=Object.getOwnPropertyDescriptor(receiver,property);if(desc){if(!desc.writable){return false;}desc.value=value;Object.defineProperty(receiver,property,desc);}else{_defineProperty(receiver,property,value);}return true;};}return set(target,property,value,receiver);}function _set(target,property,value,receiver,isStrict){var s=set(target,property,value,receiver||target);if(!s&&isStrict){throw new Error('failed to set property');}return value;}function isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _construct(Parent,args,Class){if(isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf2(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _possibleConstructorReturn2(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized2(self);}function _assertThisInitialized2(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _get2(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get2=Reflect.get;}else{_get2=function _get(target,property,receiver){var base=_superPropBase2(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get2(target,property,receiver||target);}function _superPropBase2(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf2(object);if(object===null)break;}return object;}function _getPrototypeOf2(o){_getPrototypeOf2=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf2(o);}function _inherits2(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf2(subClass,superClass);}function _setPrototypeOf2(o,p){_setPrototypeOf2=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf2(o,p);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck2(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass2(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _typeof(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var productName='gantt';var support={searchParams:'URLSearchParams'in self,iterable:'Symbol'in self&&'iterator'in Symbol,blob:'FileReader'in self&&'Blob'in self&&function(){try{new Blob();return true;}catch(e){return false;}}(),formData:'FormData'in self,arrayBuffer:'ArrayBuffer'in self};function isDataView(obj){return obj&&DataView.prototype.isPrototypeOf(obj);}if(support.arrayBuffer){var viewClasses=['[object Int8Array]','[object Uint8Array]','[object Uint8ClampedArray]','[object Int16Array]','[object Uint16Array]','[object Int32Array]','[object Uint32Array]','[object Float32Array]','[object Float64Array]'];var isArrayBufferView=ArrayBuffer.isView||function(obj){return obj&&viewClasses.indexOf(Object.prototype.toString.call(obj))>-1;};}function normalizeName(name){if(typeof name!=='string'){name=String(name);}if(/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)){throw new TypeError('Invalid character in header field name');}return name.toLowerCase();}function normalizeValue(value){if(typeof value!=='string'){value=String(value);}return value;}// Build a destructive iterator for the value list
function iteratorFor(items){var iterator={next:function next(){var value=items.shift();return{done:value===undefined,value:value};}};if(support.iterable){iterator[Symbol.iterator]=function(){return iterator;};}return iterator;}function Headers(headers){this.map={};if(headers instanceof Headers){headers.forEach(function(value,name){this.append(name,value);},this);}else if(Array.isArray(headers)){headers.forEach(function(header){this.append(header[0],header[1]);},this);}else if(headers){Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name]);},this);}}Headers.prototype.append=function(name,value){name=normalizeName(name);value=normalizeValue(value);var oldValue=this.map[name];this.map[name]=oldValue?oldValue+', '+value:value;};Headers.prototype['delete']=function(name){delete this.map[normalizeName(name)];};Headers.prototype.get=function(name){name=normalizeName(name);return this.has(name)?this.map[name]:null;};Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name));};Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=normalizeValue(value);};Headers.prototype.forEach=function(callback,thisArg){for(var name in this.map){if(this.map.hasOwnProperty(name)){callback.call(thisArg,this.map[name],name,this);}}};Headers.prototype.keys=function(){var items=[];this.forEach(function(value,name){items.push(name);});return iteratorFor(items);};Headers.prototype.values=function(){var items=[];this.forEach(function(value){items.push(value);});return iteratorFor(items);};Headers.prototype.entries=function(){var items=[];this.forEach(function(value,name){items.push([name,value]);});return iteratorFor(items);};if(support.iterable){Headers.prototype[Symbol.iterator]=Headers.prototype.entries;}function consumed(body){if(body.bodyUsed){return Promise.reject(new TypeError('Already read'));}body.bodyUsed=true;}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result);};reader.onerror=function(){reject(reader.error);};});}function readBlobAsArrayBuffer(blob){var reader=new FileReader();var promise=fileReaderReady(reader);reader.readAsArrayBuffer(blob);return promise;}function readBlobAsText(blob){var reader=new FileReader();var promise=fileReaderReady(reader);reader.readAsText(blob);return promise;}function readArrayBufferAsText(buf){var view=new Uint8Array(buf);var chars=new Array(view.length);for(var i=0;i<view.length;i++){chars[i]=String.fromCharCode(view[i]);}return chars.join('');}function bufferClone(buf){if(buf.slice){return buf.slice(0);}else{var view=new Uint8Array(buf.byteLength);view.set(new Uint8Array(buf));return view.buffer;}}function Body(){this.bodyUsed=false;this._initBody=function(body){this._bodyInit=body;if(!body){this._bodyText='';}else if(typeof body==='string'){this._bodyText=body;}else if(support.blob&&Blob.prototype.isPrototypeOf(body)){this._bodyBlob=body;}else if(support.formData&&FormData.prototype.isPrototypeOf(body)){this._bodyFormData=body;}else if(support.searchParams&&URLSearchParams.prototype.isPrototypeOf(body)){this._bodyText=body.toString();}else if(support.arrayBuffer&&support.blob&&isDataView(body)){this._bodyArrayBuffer=bufferClone(body.buffer);// IE 10-11 can't handle a DataView body.
this._bodyInit=new Blob([this._bodyArrayBuffer]);}else if(support.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(body)||isArrayBufferView(body))){this._bodyArrayBuffer=bufferClone(body);}else{this._bodyText=body=Object.prototype.toString.call(body);}if(!this.headers.get('content-type')){if(typeof body==='string'){this.headers.set('content-type','text/plain;charset=UTF-8');}else if(this._bodyBlob&&this._bodyBlob.type){this.headers.set('content-type',this._bodyBlob.type);}else if(support.searchParams&&URLSearchParams.prototype.isPrototypeOf(body)){this.headers.set('content-type','application/x-www-form-urlencoded;charset=UTF-8');}}};if(support.blob){this.blob=function(){var rejected=consumed(this);if(rejected){return rejected;}if(this._bodyBlob){return Promise.resolve(this._bodyBlob);}else if(this._bodyArrayBuffer){return Promise.resolve(new Blob([this._bodyArrayBuffer]));}else if(this._bodyFormData){throw new Error('could not read FormData body as blob');}else{return Promise.resolve(new Blob([this._bodyText]));}};this.arrayBuffer=function(){if(this._bodyArrayBuffer){return consumed(this)||Promise.resolve(this._bodyArrayBuffer);}else{return this.blob().then(readBlobAsArrayBuffer);}};}this.text=function(){var rejected=consumed(this);if(rejected){return rejected;}if(this._bodyBlob){return readBlobAsText(this._bodyBlob);}else if(this._bodyArrayBuffer){return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));}else if(this._bodyFormData){throw new Error('could not read FormData body as text');}else{return Promise.resolve(this._bodyText);}};if(support.formData){this.formData=function(){return this.text().then(decode);};}this.json=function(){return this.text().then(JSON.parse);};return this;}// HTTP methods whose capitalization should be normalized
var methods=['DELETE','GET','HEAD','OPTIONS','POST','PUT'];function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method;}function Request(input,options){options=options||{};var body=options.body;if(input instanceof Request){if(input.bodyUsed){throw new TypeError('Already read');}this.url=input.url;this.credentials=input.credentials;if(!options.headers){this.headers=new Headers(input.headers);}this.method=input.method;this.mode=input.mode;this.signal=input.signal;if(!body&&input._bodyInit!=null){body=input._bodyInit;input.bodyUsed=true;}}else{this.url=String(input);}this.credentials=options.credentials||this.credentials||'same-origin';if(options.headers||!this.headers){this.headers=new Headers(options.headers);}this.method=normalizeMethod(options.method||this.method||'GET');this.mode=options.mode||this.mode||null;this.signal=options.signal||this.signal;this.referrer=null;if((this.method==='GET'||this.method==='HEAD')&&body){throw new TypeError('Body not allowed for GET or HEAD requests');}this._initBody(body);}Request.prototype.clone=function(){return new Request(this,{body:this._bodyInit});};function decode(body){var form=new FormData();body.trim().split('&').forEach(function(bytes){if(bytes){var split=bytes.split('=');var name=split.shift().replace(/\+/g,' ');var value=split.join('=').replace(/\+/g,' ');form.append(decodeURIComponent(name),decodeURIComponent(value));}});return form;}function parseHeaders(rawHeaders){var headers=new Headers();// Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
// https://tools.ietf.org/html/rfc7230#section-3.2
var preProcessedHeaders=rawHeaders.replace(/\r?\n[\t ]+/g,' ');preProcessedHeaders.split(/\r?\n/).forEach(function(line){var parts=line.split(':');var key=parts.shift().trim();if(key){var value=parts.join(':').trim();headers.append(key,value);}});return headers;}Body.call(Request.prototype);function Response$1(bodyInit,options){if(!options){options={};}this.type='default';this.status=options.status===undefined?200:options.status;this.ok=this.status>=200&&this.status<300;this.statusText='statusText'in options?options.statusText:'OK';this.headers=new Headers(options.headers);this.url=options.url||'';this._initBody(bodyInit);}Body.call(Response$1.prototype);Response$1.prototype.clone=function(){return new Response$1(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url});};Response$1.error=function(){var response=new Response$1(null,{status:0,statusText:''});response.type='error';return response;};var redirectStatuses=[301,302,303,307,308];Response$1.redirect=function(url,status){if(redirectStatuses.indexOf(status)===-1){throw new RangeError('Invalid status code');}return new Response$1(null,{status:status,headers:{location:url}});};var DOMException$1=self.DOMException;try{new DOMException$1();}catch(err){DOMException$1=function DOMException$1(message,name){this.message=message;this.name=name;var error=Error(message);this.stack=error.stack;};DOMException$1.prototype=Object.create(Error.prototype);DOMException$1.prototype.constructor=DOMException$1;}function fetch$1(input,init){return new Promise(function(resolve,reject){var request=new Request(input,init);if(request.signal&&request.signal.aborted){return reject(new DOMException$1('Aborted','AbortError'));}var xhr=new XMLHttpRequest();function abortXhr(){xhr.abort();}xhr.onload=function(){var options={status:xhr.status,statusText:xhr.statusText,headers:parseHeaders(xhr.getAllResponseHeaders()||'')};options.url='responseURL'in xhr?xhr.responseURL:options.headers.get('X-Request-URL');var body='response'in xhr?xhr.response:xhr.responseText;resolve(new Response$1(body,options));};xhr.onerror=function(){reject(new TypeError('Network request failed'));};xhr.ontimeout=function(){reject(new TypeError('Network request failed'));};xhr.onabort=function(){reject(new DOMException$1('Aborted','AbortError'));};xhr.open(request.method,request.url,true);if(request.credentials==='include'){xhr.withCredentials=true;}else if(request.credentials==='omit'){xhr.withCredentials=false;}if('responseType'in xhr&&support.blob){xhr.responseType='blob';}request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value);});if(request.signal){request.signal.addEventListener('abort',abortXhr);xhr.onreadystatechange=function(){// DONE (success or failure)
if(xhr.readyState===4){request.signal.removeEventListener('abort',abortXhr);}};}xhr.send(typeof request._bodyInit==='undefined'?null:request._bodyInit);});}fetch$1.polyfill=true;if(!self.fetch){self.fetch=fetch$1;self.Headers=Headers;self.Request=Request;self.Response=Response$1;}var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};(function(factory){factory();})(function(){function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _get(target,property,receiver){if(typeof Reflect!=="undefined"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(receiver);}return desc.value;};}return _get(target,property,receiver||target);}var Emitter=/*#__PURE__*/function(){function Emitter(){_classCallCheck(this,Emitter);Object.defineProperty(this,'listeners',{value:{},writable:true,configurable:true});}_createClass(Emitter,[{key:"addEventListener",value:function addEventListener(type,callback){if(!(type in this.listeners)){this.listeners[type]=[];}this.listeners[type].push(callback);}},{key:"removeEventListener",value:function removeEventListener(type,callback){if(!(type in this.listeners)){return;}var stack=this.listeners[type];for(var i=0,l=stack.length;i<l;i++){if(stack[i]===callback){stack.splice(i,1);return;}}}},{key:"dispatchEvent",value:function dispatchEvent(event){var _this=this;if(!(event.type in this.listeners)){return;}var debounce=function debounce(callback){setTimeout(function(){return callback.call(_this,event);});};var stack=this.listeners[event.type];for(var i=0,l=stack.length;i<l;i++){debounce(stack[i]);}return!event.defaultPrevented;}}]);return Emitter;}();var AbortSignal=/*#__PURE__*/function(_Emitter){_inherits(AbortSignal,_Emitter);function AbortSignal(){var _this2;_classCallCheck(this,AbortSignal);_this2=_possibleConstructorReturn(this,_getPrototypeOf(AbortSignal).call(this));// Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
// constructor has failed to run, then "this.listeners" will still be undefined and then we call
// the parent constructor directly instead as a workaround. For general details, see babel bug:
// https://github.com/babel/babel/issues/3041
// This hack was added as a fix for the issue described here:
// https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
if(!_this2.listeners){Emitter.call(_assertThisInitialized(_this2));}// Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
// we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
Object.defineProperty(_assertThisInitialized(_this2),'aborted',{value:false,writable:true,configurable:true});Object.defineProperty(_assertThisInitialized(_this2),'onabort',{value:null,writable:true,configurable:true});return _this2;}_createClass(AbortSignal,[{key:"toString",value:function toString(){return'[object AbortSignal]';}},{key:"dispatchEvent",value:function dispatchEvent(event){if(event.type==='abort'){this.aborted=true;if(typeof this.onabort==='function'){this.onabort.call(this,event);}}_get(_getPrototypeOf(AbortSignal.prototype),"dispatchEvent",this).call(this,event);}}]);return AbortSignal;}(Emitter);var AbortController=/*#__PURE__*/function(){function AbortController(){_classCallCheck(this,AbortController);// Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
// we want Object.keys(new AbortController()) to be [] for compat with the native impl
Object.defineProperty(this,'signal',{value:new AbortSignal(),writable:true,configurable:true});}_createClass(AbortController,[{key:"abort",value:function abort(){var event;try{event=new Event('abort');}catch(e){if(typeof document!=='undefined'){if(!document.createEvent){// For Internet Explorer 8:
event=document.createEventObject();event.type='abort';}else{// For Internet Explorer 11:
event=document.createEvent('Event');event.initEvent('abort',false,false);}}else{// Fallback where document isn't available:
event={type:'abort',bubbles:false,cancelable:false};}}this.signal.dispatchEvent(event);}},{key:"toString",value:function toString(){return'[object AbortController]';}}]);return AbortController;}();if(typeof Symbol!=='undefined'&&Symbol.toStringTag){// These are necessary to make sure that we get correct output for:
// Object.prototype.toString.call(new AbortController())
AbortController.prototype[Symbol.toStringTag]='AbortController';AbortSignal.prototype[Symbol.toStringTag]='AbortSignal';}function polyfillNeeded(self){if(self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL){console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');return true;}// Note that the "unfetch" minimal fetch polyfill defines fetch() without
// defining window.Request, and this polyfill need to work on top of unfetch
// so the below feature detection needs the !self.AbortController part.
// The Request.prototype check is also needed because Safari versions 11.1.2
// up to and including 12.1.x has a window.AbortController present but still
// does NOT correctly implement abortable fetch:
// https://bugs.webkit.org/show_bug.cgi?id=174980#c2
return typeof self.Request==='function'&&!self.Request.prototype.hasOwnProperty('signal')||!self.AbortController;}/**
   * Note: the "fetch.Request" default value is available for fetch imported from
   * the "node-fetch" package and not in browsers. This is OK since browsers
   * will be importing umd-polyfill.js from that path "self" is passed the
   * decorator so the default value will not be used (because browsers that define
   * fetch also has Request). One quirky setup where self.fetch exists but
   * self.Request does not is when the "unfetch" minimal fetch polyfill is used
   * on top of IE11; for this case the browser will try to use the fetch.Request
   * default value which in turn will be undefined but then then "if (Request)"
   * will ensure that you get a patched fetch but still no Request (as expected).
   * @param {fetch, Request = fetch.Request}
   * @returns {fetch: abortableFetch, Request: AbortableRequest}
   */function abortableFetchDecorator(patchTargets){if('function'===typeof patchTargets){patchTargets={fetch:patchTargets};}var _patchTargets=patchTargets,fetch=_patchTargets.fetch,_patchTargets$Request=_patchTargets.Request,NativeRequest=_patchTargets$Request===void 0?fetch.Request:_patchTargets$Request,NativeAbortController=_patchTargets.AbortController,_patchTargets$__FORCE=_patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=_patchTargets$__FORCE===void 0?false:_patchTargets$__FORCE;if(!polyfillNeeded({fetch:fetch,Request:NativeRequest,AbortController:NativeAbortController,__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL:__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL})){return{fetch:fetch,Request:Request};}var Request=NativeRequest;// Note that the "unfetch" minimal fetch polyfill defines fetch() without
// defining window.Request, and this polyfill need to work on top of unfetch
// hence we only patch it if it's available. Also we don't patch it if signal
// is already available on the Request prototype because in this case support
// is present and the patching below can cause a crash since it assigns to
// request.signal which is technically a read-only property. This latter error
// happens when you run the main5.js node-fetch example in the repo
// "abortcontroller-polyfill-examples". The exact error is:
//   request.signal = init.signal;
//   ^
// TypeError: Cannot set property signal of #<Request> which has only a getter
if(Request&&!Request.prototype.hasOwnProperty('signal')||__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL){Request=function Request(input,init){var signal;if(init&&init.signal){signal=init.signal;// Never pass init.signal to the native Request implementation when the polyfill has
// been installed because if we're running on top of a browser with a
// working native AbortController (i.e. the polyfill was installed due to
// __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
// fake AbortSignal to the native fetch will trigger:
// TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.
delete init.signal;}var request=new NativeRequest(input,init);if(signal){Object.defineProperty(request,'signal',{writable:false,enumerable:false,configurable:true,value:signal});}return request;};Request.prototype=NativeRequest.prototype;}var realFetch=fetch;var abortableFetch=function abortableFetch(input,init){var signal=Request&&Request.prototype.isPrototypeOf(input)?input.signal:init?init.signal:undefined;if(signal){var abortError;try{abortError=new DOMException('Aborted','AbortError');}catch(err){// IE 11 does not support calling the DOMException constructor, use a
// regular error object on it instead.
abortError=new Error('Aborted');abortError.name='AbortError';}// Return early if already aborted, thus avoiding making an HTTP request
if(signal.aborted){return Promise.reject(abortError);}// Turn an event into a promise, reject it once `abort` is dispatched
var cancellation=new Promise(function(_,reject){signal.addEventListener('abort',function(){return reject(abortError);},{once:true});});if(init&&init.signal){// Never pass .signal to the native implementation when the polyfill has
// been installed because if we're running on top of a browser with a
// working native AbortController (i.e. the polyfill was installed due to
// __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
// fake AbortSignal to the native fetch will trigger:
// TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
delete init.signal;}// Return the fastest promise (don't need to wait for request to finish)
return Promise.race([cancellation,realFetch(input,init)]);}return realFetch(input,init);};return{fetch:abortableFetch,Request:Request};}(function(self){if(!polyfillNeeded(self)){return;}if(!self.fetch){console.warn('fetch() is not available, cannot install abortcontroller-polyfill');return;}var _abortableFetch=abortableFetchDecorator(self),fetch=_abortableFetch.fetch,Request=_abortableFetch.Request;self.fetch=fetch;self.Request=Request;Object.defineProperty(self,'AbortController',{writable:true,enumerable:false,configurable:true,value:AbortController});Object.defineProperty(self,'AbortSignal',{writable:true,enumerable:false,configurable:true,value:AbortSignal});})(typeof self!=='undefined'?self:commonjsGlobal);});/**
 * Keeps a map of registered widgets. Used by BryntumWidgetAdapter to create widgets using `{ type : 'xx' }`.
 * @private
 */var BryntumWidgetAdapterRegister=/*#__PURE__*/function(){function BryntumWidgetAdapterRegister(){_classCallCheck2(this,BryntumWidgetAdapterRegister);}_createClass2(BryntumWidgetAdapterRegister,null,[{key:"register",value:function register(type,widgetClass){var classEntry=widgetClassRegister[widgetClass];// Create a mapping from the type to the class
widgetRegister[type]=widgetClass;// Create a mapping from the class to its type identifier(s)
if(classEntry){classEntry[type]=1;}else{widgetClassRegister[widgetClass]=_defineProperty({},type,1);}}},{key:"getClass",value:function getClass(type){return widgetRegister[type];}/**
     * Determines whether the passed widget matches the passed type. So a {@link Common.widget.Combo}
     * would match any of its three registered types, `'combobox'`, '`combo'` or `'dropdown'`.
     *
     * Pass the `deep` parameter as `true` to test the class hierarchy also, so if `deep`, a
     * {@link Common.widget.Combo} would also match `'pickerfield'`, `'field'` and `'widget'`.
     *
     * Note that this is *type* matching, not querying, so patterns such as `'*'` will not match.
     * @param {Common.widget.Widget} widget The widget to test.
     * @param {String} type The stype string to test against. 
     * @param {Boolean} [deep] Whether to test the widget's superclass hierarchy. 
     * @returns {Boolean} `true` if the passed widget matches the passed selector.
     */},{key:"isType",value:function isType(widget,type,deep){for(var widgetClass=widget.constructor;widgetClass;widgetClass=deep&&Object.getPrototypeOf(widgetClass)){// Find a registered entry.
// If it's an abstract based class which was not registered (such as PickerField),
// create an entry for it using its lowercased $name
var classEntry=widgetClassRegister[widgetClass]||widgetClass.$name&&(widgetClassRegister[widgetClass]=_defineProperty({},widgetClass.$name.toLowerCase(),1));if(classEntry&&classEntry[type]){return true;}}}},{key:"createWidget",value:function createWidget(type,config){var widgetClass=this.getClass(type);if(widgetClass){return new widgetClass(config);}// eslint-disable-next-line no-unreachable
return null;}}]);return BryntumWidgetAdapterRegister;}();exports.BryntumWidgetAdapterRegister=BryntumWidgetAdapterRegister;var widgetRegister=BryntumWidgetAdapterRegister.widgetRegister={},widgetClassRegister=BryntumWidgetAdapterRegister.widgetClassRegister={};BryntumWidgetAdapterRegister._$name='BryntumWidgetAdapterRegister';/**
 * @module Common/helper/IdHelper
 */function isInstanceOfClass(instance,type){var classHierarchy=instance.classHierarchy();for(var i=0;i<classHierarchy.length;i++){if(classHierarchy[i].$name.toLowerCase()===type){return true;}}return false;}/**
 * IdHelper keeps an internal map of objects and ids, allowing easy retrieval by id. It can generate and assign
 * unique ids (in IdHelper context, not guaranteed to be unique on page), either explicitly or when registering objects
 * in its map.
 *
 * IdHelper also supplies some useful functions for querying Widgets.
 *
 * This class is not intended for application use, it is used internally by the Brytum infrastructure.
 * @internal
 * @private
 */var IdHelper=/*#__PURE__*/function(){function IdHelper(){_classCallCheck2(this,IdHelper);}_createClass2(IdHelper,null,[{key:"generateId",/**
     * Generate a new id, using IdHelpers internal counter and a prefix
     * @param {String} prefix Id prefix
     * @returns {String} Generated id
     */value:function generateId(){var prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'generatedId';return prefix+ ++IdHelper.idCounter;}/**
     * Register an object with IdHelper, assigning it a generated id if it has none. Throws if objects id is already
     * in use.
     * @param {Object} obj Any object
     * @param {String} prefix Prefix for generated id
     */},{key:"register",value:function register(obj){var prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var objId=obj.id;if(objId==null){objId=obj.id=IdHelper.generateId(prefix);obj.hasGeneratedId=true;}// Code editor sets `disableThrow` to not get conflicts when loading the same module again
if(objId in IdHelper.idMap&&!this.disableThrow){throw new Error('Id '+objId+' already in use');}IdHelper.idMap[objId]=obj;}/**
     * Unregister from IdHelper, normally done on destruction
     * @param {Object} obj Object to unregister
     */},{key:"unregister",value:function unregister(obj){// (have to check for existence before deleting to work in Safari)
if(IdHelper.idMap[obj.id])delete IdHelper.idMap[obj.id];}/**
     * Get an object using id
     * @param {String} id Object id
     * @returns {*} Object or undefined if none found
     */},{key:"get",value:function get(id){return IdHelper.idMap[id];}/**
     * Analogous to document.querySelector, finds the first Bryntum widget matching the passed
     * selector. Right now, only class name (lowercased) selector strings, or
     * a filter function which returns `true` for required object are allowed:
     * ```
     * bryntum.query('grid').destroy();
     * ```
     * @param {String|Function} selector A lowercased class name, or a filter function.
     * @param {Boolean} [deep] Specify `true` to search the prototype chain (requires supplying a string `selector`). For
     *   example 'widget' would then find a Grid
     * @return {Common.widget.Widget} The first matched widget if any.
     */},{key:"query",value:function query(selector){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var idMap=IdHelper.idMap;for(var id in idMap){if(widgetMatches(idMap[id],selector,deep)){return idMap[id];}}return null;}/**
     * Analogous to document.querySelectorAll, finds all Bryntum widgets matching the passed
     * selector. Right now, only registered widget `type` strings, or a filter function which
     * returns `true` for required object are allowed:
     * ```
     * let allFields = bryntum.queryAll('field', true);
     * ```
     * @param {String|Function} selector A lowercased class name, or a filter function.
     * @param {Boolean} [deep] Specify `true` to search the prototype chain (requires supplying a string `selector`). For
     *   example 'widget' would then find a Grid
     * @return {Common.widget.Widget[]} The first matched widgets if any - an empty array will be returned
     * if no matches are found.
     */},{key:"queryAll",value:function queryAll(selector){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var idMap=IdHelper.idMap,result=[];for(var id in idMap){if(widgetMatches(idMap[id],selector,deep)){result.push(idMap[id]);}}return result;}/**
     * Returns the Widget which owns the passed element (or event).
     * @param {HTMLElement|Event} element The element or event to start from
     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase
     * class name. Or a filter function which returns `true` for the required Widget.
     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a
     * match of the type parameter, or the element to stop at.
     * @return {Widget} The found Widget or null.
     */},{key:"fromElement",value:function fromElement(element,type,limit){var typeOfType=_typeof(type);// Event passed
if(element&&element instanceof Event){element=element.target;}if(typeOfType==='number'||type&&type.nodeType===1){limit=type;type=null;}var target=element,cache=IdHelper.idMap,depth=0,topmost,cmpId,cmp;if(typeof limit!=='number'){topmost=limit;limit=Number.MAX_VALUE;}if(typeOfType==='string'){type=type.toLowerCase();}while(target&&target.nodeType===1&&depth<limit&&target!==topmost){cmpId=target.dataset&&target.dataset.ownerCmp||target.id;if(cmpId){cmp=cache[cmpId];if(cmp){if(type){if(typeOfType==='function'){if(type(cmp)){return cmp;}}else if(widgetMatches(cmp,type)||isInstanceOfClass(cmp,type)){return cmp;}}else{return cmp;}}// Increment depth on every *Widget* found
depth++;}target=target.parentNode;}return null;}}]);return IdHelper;}();exports.IdHelper=IdHelper;function widgetMatches(candidate,selector,deep){if(selector==='*'){return true;}if(typeof selector==='function'){return selector(candidate);}return BryntumWidgetAdapterRegister.isType(candidate,selector,deep);}IdHelper.idCounter=0;IdHelper.idMap={};// Simplify querying widgets by exposing fns in bryntum ns
(window.bryntum||(window.bryntum={})).get=IdHelper.get;window.bryntum.IdHelper=IdHelper;window.bryntum.query=IdHelper.query;window.bryntum.queryAll=IdHelper.queryAll;window.bryntum.fromElement=IdHelper.fromElement;IdHelper._$name='IdHelper';/**
 * @module Common/helper/WidgetHelper
 */ /**
 * Helper for creating widgets. Needs an adapter to do the actual work, see
 * {@link Common.adapter.widget.BryntumWidgetAdapter} which is used in examples.
 *
 * NOTE: This concept is not yet fully realized.
 */var WidgetHelper=/*#__PURE__*/function(){function WidgetHelper(){_classCallCheck2(this,WidgetHelper);}_createClass2(WidgetHelper,null,[{key:"getById",//endregion
//region Querying
/**
     * Returns the widget with the specified id.
     * @param id Id of widget to find
     * @returns {Common.widget.Widget} The widget if any
     * @category Querying
     */value:function getById(id){return IdHelper.get(id);}/**
     * Returns the Widget which owns the passed element (or event).
     * @param {HTMLElement|Event} element The element or event to start from
     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase
     * class name. Or a filter function which returns `true` for the required Widget.
     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a
     * match of the type parameter, or the element to stop at.
     * @returns {Common.widget.Widget} The found Widget or null.
     * @category Querying
     * @typings any
     */},{key:"fromElement",value:function fromElement(element,type,limit){return IdHelper.fromElement(element,type,limit);}//endregion
//region Widgets
/**
     * Create a widget.
     * @example
     * WidgetHelper.createWidget({
     *   type: 'button',
     *   icon: 'user',
     *   text: 'Edit user'
     * });
     * @param config Widget config
     * @returns {Object} The widget
     * @category Widgets
     */},{key:"createWidget",value:function createWidget(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return this.adapter.createWidget(config);}/**
     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To
     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be
     * applied to all passed widgets.
     *
     * Usage:
     *
     * ```javascript
     * // Will append button as last item to element with id 'container'
     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');
     *
     * // Same as above, but will add two buttons
     * let [button1, button2] = WidgetHelper.append([
     *     { type : 'button' },
     *     { type : 'button' }
     *     ], { appendTo : 'container' });
     *
     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have
     * // additional class 'my-cls'
     * let [button1, button2] = WidgetHelper.append([
     *     { type : 'button' },
     *     { type : 'button' }
     *     ], {
     *         insertBefore : 'someElement',
     *         cls          : 'my-cls'
     *     });
     * ```
     *
     * @param {Object|Object[]} widget Widget config or array of such configs
     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to apply to all passed widgets
     * @returns {Common.widget.Widget[]} Array or widgets
     * @category Widgets
     */},{key:"append",value:function append(widget,config){widget=Array.isArray(widget)&&widget||[widget];if(config instanceof HTMLElement||typeof config==='string'){config={appendTo:config};}// We want to fix position to insert into to keep order of passed widgets
if(config.insertFirst){var target=typeof config.insertFirst==='string'?document.getElementById(config.insertFirst):config.insertFirst;if(target.firstChild){config.insertBefore=target.firstChild;}else{config.appendTo=target;}}return this.adapter.appendWidgets(widget,config);}//endregion
//region Popups
// TODO: Implement openWindow
// /**
//  * Opens a window with specified widgets. Not implemented yet...
//  * @param config
//  * @returns {Object}
//  * @category Popups
//  */
// static openWindow(config) {
//     return this.adapter.openWindow(config);
// }
/**
     * Shows a popup (~tooltip) containing widgets connected to specified element.
     * @example
     * WidgetHelper.openPopup(element, {
     *   position: 'bottom center',
     *   items: [
     *      { widgetConfig }
     *   ]
     * });
     * @param element Element to connect popup to
     * @param config Config object, or string to use as html in popup
     * @returns {*|{close, widgets}}
     * @category Popups
     */},{key:"openPopup",value:function openPopup(element,config){return this.adapter.openPopup(element,config);}/**
     * Shows a context menu connected to the specified element.
     * @example
     * WidgetHelper.showContextMenu(element, {
     *   items: [
     *      { id: 'addItem', icon: 'add', text: 'Add' },
     *      ...
     *   ],
     *   onItem: item => alert('Clicked ' + item.text)
     * });
     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for
     * @param {Object} config Context menu config, see example
     * @returns {*|{close}}
     * @category Popups
     */},{key:"showContextMenu",value:function showContextMenu(element,config){return this.adapter.showContextMenu(element,config);}/**
     * Attached a tooltip to the specified element.
     * @example
     * WidgetHelper.attachTooltip(element, {
     *   text: 'Useful information goes here'
     * });
     * @param element Element to attach tooltip for
     * @param configOrText Tooltip config or tooltip string, see example and source
     * @returns {Object}
     * @category Popups
     */},{key:"attachTooltip",value:function attachTooltip(element,configOrText){return this.adapter.attachTooltip(element,configOrText);}/**
     * Checks if element has tooltip attached
     *
     * @param element Element to check
     * @return {Boolean}
     * @category Popups
     */},{key:"hasTooltipAttached",value:function hasTooltipAttached(element){return this.adapter.hasTooltipAttached(element);}/**
     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners
     * on the element.
     *
     * @param element Element to remove tooltip from
     * @category Popups
     */},{key:"destroyTooltipAttached",value:function destroyTooltipAttached(element){return this.adapter.destroyTooltipAttached(element);}//endregion
//region Mask
/**
     * Masks the specified element, showing a message in the mask.
     * @param element Element to mask
     * @param msg Message to show in the mask
     * @category Mask
     */},{key:"mask",value:function mask(element,msg){return this.adapter.mask(element,msg);}/**
     * Unmask the specified element.
     * @param element
     * @category Mask
     */},{key:"unmask",value:function unmask(element){var close=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.adapter.unmask(element);}//endregion
//region Toast
/**
     * Show a toast
     * @param {String} msg message to show in the toast
     * @category Mask
     */},{key:"toast",value:function toast(msg){this.adapter.toast(msg);}//endregion
//region Style
},{key:"adapter",//region Adapter
/**
     * Gets/sets the adapter used for widgets.
     * @param adapterClass Adapter class
     * @category Adapter
     */set:function set(adapterClass){this._adapter=new adapterClass();},get:function get(){if(!this._adapter)throw new Error('No widget adapter set');return this._adapter;}/**
     * Checks if an adapter is assigned
     * @returns {Boolean}
     * @category Adapter
     * @readonly
     */},{key:"hasAdapter",get:function get(){return!!this._adapter;}},{key:"defaultStyle",set:function set(style){this.adapter.defaultStyle=style;},get:function get(){return this.adapter.defaultStyle;}//endregion
}]);return WidgetHelper;}();exports.WidgetHelper=WidgetHelper;WidgetHelper._$name='WidgetHelper';/**
 * @module Common/helper/StringHelper
 */var camelLettersRe=/([a-z])([A-Z])/g,escapeRegExpRe=/[.*+?^${}()|[\]\\]/g,idRe=/(^[^a-z]+|[^\w]+)/gi,replaceCamelLetters=function replaceCamelLetters(all,g1,g2){return g1+'-'+g2.toLowerCase();},replaceNonIdChar=function replaceNonIdChar(c){if(c){return"_x".concat(c.charCodeAt(0).toString(16));}return'__blank__';},hyphenateCache={};/**
 * Helper for string manipulation.
 */var StringHelper=/*#__PURE__*/function(){function StringHelper(){_classCallCheck2(this,StringHelper);}_createClass2(StringHelper,null,[{key:"capitalizeFirstLetter",/**
     * Capitalizes the first letter of a string, myString -> MyString.
     * Doesn't alter the original string, use return value
     * @param string String to capitalize
     * @returns {String} Capitalized string
     */value:function capitalizeFirstLetter(string){if(!string)return null;return string[0].toUpperCase()+string.substr(1);}/**
     * Makes the first letter of a string lowercase, MyString -> myString.
     * Doesn't alter the original string, use return value
     * @param string String to alter
     * @returns {String} Altered string
     */},{key:"lowercaseFirstLetter",value:function lowercaseFirstLetter(string){if(!string)return null;return string[0].toLowerCase()+string.substr(1);}/**
     * Converts the passed camelCased string to a hyphen-separated string. eg "minWidth" -> "min-width"
     * @param string The string to convert.
     * @return {String} The string with adjoining lower and upper case letters
     * separated by hyphens and converted to lower case.
     */},{key:"hyphenate",value:function hyphenate(string){// Cached since it is used heavily with DomHelper.sync()
var cached=hyphenateCache[string];if(cached){return cached;}return hyphenateCache[string]=string.replace(camelLettersRe,replaceCamelLetters);}/**
     * Parses JSON within a try-catch.
     * @param {String} string String to parse
     * @returns {Object} Resulting object or null if parse failed
     */},{key:"safeJsonParse",value:function safeJsonParse(string){var parsed=null;try{parsed=JSON.parse(string);}catch(e){console.error(e);}return parsed;}/**
     * Stringifies an object within a try-catch.
     * @param {Object} object The object to stringify
     * @returns {Object} Resulting object or null if stringify failed
     */},{key:"safeJsonStringify",value:function safeJsonStringify(obj){var result=null;try{result=JSON.stringify(obj);}catch(e){console.error(e);}return result;}/**
     * Creates an alphanuneric identifier from any passed string. Encodes spaces and non-alpha characters.
     * @param inString The string from which to strip non-identifier characters.
     * @return {String}
     */},{key:"createId",value:function createId(inString){return String(inString).replace(idRe,replaceNonIdChar);}// https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
},{key:"escapeRegExp",value:function escapeRegExp(string){// $& means the whole matched string
return string.replace(escapeRegExpRe,'\\$&');}}]);return StringHelper;}();exports.StringHelper=StringHelper;StringHelper._$name='StringHelper';/**
 * @module Common/Base
 */var defaultConfigSymbol=Symbol('defaultConfig'),propertyInitializersSymbol=Symbol('propertyInitializers'),classHierarchySymbol=Symbol('classHierarchy'),configurationSymbol=Symbol('configuration'),originalConfigSymbol=Symbol('originalConfig'),instancePropertiesSymbol=Symbol('instanceProperties');/**
 * Base class for all configurable classes.
 *
 * Subclasses do not have to implement a constructor with its restriction of having to call super()
 * before there is a `this` reference. Subclasses instead implement a `construct` method which is
 * called by the `Base` constructor. This may call its `super` implementation at any time.
 *
 * The `Base` constructor applies all configs to properties of the new instance. The instance
 * will have been configured after the `super.construct(config)` is called.
 *
 * See the Class System documentation in the guides for more information.
 *
 * @abstract
 */var Base=/*#__PURE__*/function(){// defaultConfig & properties made private to not spam all other classes
/**
     * A getter for the default configuration of this class, which can be overridden by configurations passed at construction time.
     * @member {Object} defaultConfig
     * @static
     * @category Configuration
     * @private
     */ /**
     * A getter for the default values of internal properties for this class
     * @member {Object} properties
     * @static
     * @category Configuration
     * @private
     */ /**
     * Base constructor, passes arguments to {@link #function-construct}.
     * @param args
     * @function constructor
     * @category Lifecycle
     */function Base(){_classCallCheck2(this,Base);// Allow subclasses to have a pseudo constructor with "this" already set;
this.construct.apply(this,arguments);this.afterConstruct();}/**
     * Base implementation applies configuration.
     *
     * Subclasses need only implement this if they have to initialize instance specific
     * properties required by the class. Often a `construct` method is
     * unnecessary. All initialization of incoming configuration properties can be
     * done in a `set propName` implementation.
     * @param {Object} [config] Usually called with a config object, but accepts any params
     * @category Lifecycle
     */_createClass2(Base,[{key:"construct",value:function construct(){// Passing null to base construct means bypass the config system and stack creation (to gain performance)
if((arguments.length<=0?undefined:arguments[0])!==null){this.configure.apply(this,arguments);}this.afterConfigure();}/**
     * Destroys the object.
     * Do not override this in subclasses. To provide class-specific destruction, implement a
     * doDestroy method. It is a lifecycle hook that will be called during destruction.
     * @category Lifecycle
     */},{key:"destroy",value:function destroy(){var me=this;me.isDestroying=true;me.doDestroy();Object.setPrototypeOf(this,null);// Clear all remaining instance properties.
for(var key in me){delete me[key];}delete me[originalConfigSymbol];// Only one property remains to signal why the object is inert.
me.isDestroyed=true;}/**
     * This method is required to help `unused` getters to survive production build process. Some tools, like angular,
     * will remove `unused` code in production build, making our side-effected getters behind, breaking code heavily.
     * @private
     * @param getter Getter to evaluate
     */},{key:"_thisIsAUsedExpression",value:function _thisIsAUsedExpression(getter){}},{key:"startConfigure",/**
     * Base implementation so that all subclasses and mixins may safely call super.startConfigure.
     *
     * This is called by the Base class before setting configuration properties, but after
     * the active initial getters have been set, so all configurations are available.
     *
     * This method allows all classes in the hierarchy to force some configs to be evaluated before others.
     * @internal
     * @category Lifecycle
     * @params {Object} config The configuration object use to set the initial state.
     */value:function startConfigure(config){}/**
     * Base implementation so that all subclasses and mixins may safely call super.finishConfigure.
     *
     * This is called by the Base class before exiting the {@link #function-configure} method.
     *
     * At this point, all configs have been applied, but the `isConfiguring` property is still set.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * into the config phase.
     * @internal
     * @category Lifecycle
     * @params {Object} config The configuration object use to set the initial state.
     */},{key:"finishConfigure",value:function finishConfigure(config){}/**
     * Base implementation so that all subclasses and mixins may safely call `super.afterConfigure`. This is called by the Base class after the {@link #function-configure} method has been
     * called. At this point, all configs have been applied.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * either before or after the super.afterConstruct();
     * @internal
     * @category Lifecycle
     */},{key:"afterConfigure",value:function afterConfigure(){}/**
     * Base implementation so that all subclasses and mixins may safely call super.afterConstruct.
     *
     * This is called by the Base class after the {@link #function-construct} method has been
     * called.
     *
     * At this point, all configs have been applied.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * either before or after the super.afterConstruct();
     * @internal
     * @function afterConstructor
     * @category Lifecycle
     */},{key:"afterConstruct",value:function afterConstruct(){}/**
     * Provides a way of calling callbacks which may have been specified as the _name_ of a function
     * and optionally adds scope resolution.
     *
     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`
     * then the function is resolved in this object. This is useful when configuring listeners
     * at the class level.
     *
     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried
     * using the `owner` property until an object with the named function is present, then the
     * named function is called upon that object.
     * @param {String/Function} handler The function to call, or the name of the function to call.
     * @param {Object} thisObj The `this` object of the function.
     * @param {Object[]} args The argument list to pass.
     */},{key:"callback",value:function callback(fn,thisObject,args){// Maintainer: do not make args ...args. This method may acquire more arguments
if(thisObject==='this'){thisObject=this;}var _this$resolveCallback=this.resolveCallback(fn,thisObject),handler=_this$resolveCallback.handler,thisObj=_this$resolveCallback.thisObj;return args?handler.apply(thisObj,args):handler.call(thisObj);}},{key:"resolveCallback",value:function resolveCallback(handler){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;// It's a string, we find it in its own thisObj
if(handler.substr){if(handler.startsWith('up.')){handler=handler.substr(3);// Empty loop until we find the function owner
for(thisObj=this.owner;thisObj&&!thisObj[handler];thisObj=thisObj.owner){;}}else if(handler.startsWith('this.')){thisObj=this;}handler=thisObj[handler];}return{handler:handler,thisObj:thisObj};}/**
     * Base implementation so that all subclasses and mixins may safely call super.
     * doDestroy is how all subclasses must clean themselves up. It is called by the
     * Base class *before* final destruction of the object.
     * @internal
     * @category Lifecycle
     */},{key:"doDestroy",value:function doDestroy(){}/**
     * Destroys the named properties if they have been initialized, and if they have a `destroy` method.
     * Deletes the property from this object. For example:
     *
     *      this.destroyProperties('store', 'resourceStore', 'eventStore', 'dependencyStore', 'assignmentStore');
     *
     * @param {String} properties The names of the properties to destroy.
     * @internal
     * @category Lifecycle
     */},{key:"destroyProperties",value:function destroyProperties(){var me=this;var key,propertyValue;for(var _len=arguments.length,properties=new Array(_len),_key=0;_key<_len;_key++){properties[_key]=arguments[_key];}for(var _i=0,_properties=properties;_i<_properties.length;_i++){key=_properties[_i];// If the value has *not* been pulled in from the configuration object yet
// we must not try to access it, as that will cause the property to be initialized.
if(key in me&&(!me[configurationSymbol]||!me[configurationSymbol][key])){propertyValue=me[key];if(propertyValue&&propertyValue.destroy){propertyValue.destroy();}delete me[key];}}}/**
     * Called by the Base constructor to apply configs to this instance. The must not be called.
     * @param {Object} config The configuration object from which instance properties are initialized.
     * @private
     * @category Lifecycle
     */},{key:"configure",value:function configure(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;me.initialConfig=config;// Important flag for setters to know whether they are being called during
// configuration when this object is not fully alive, or whether it's being reconfgured.
me.isConfiguring=true;// Assign any instance properties declared by the class.
Object.assign(me,me.getProperties());// Apply configuration to default (Which is safe, because it's a chained object) from class definition.
// Cache me.config for use by get config.
me.setConfig(me[originalConfigSymbol]=Base.assign(me.getDefaultConfiguration(),config),true);me.isConfiguring=false;}/**
     * Sets configuration options this object with all the properties passed in the parameter object.
     * Timing is taken care of. If the setter of one config is called first, and references
     * the value of another config which has not yet been set, that config will be set just
     * in time, and the *new* value will be used.
     * @param {Object} config An object containing configurations to change.
     * @category Configuration
     */},{key:"setConfig",value:function setConfig(config,isConstructing){var me=this,wasConfiguring=me[configurationSymbol],configDone=wasConfiguring?me.configDone:me.configDone={},instanceProperties=me[instancePropertiesSymbol]={};var key,instanceProperty;// Cache me.configuration for use by injected property initializers.
me[configurationSymbol]=wasConfiguring?Object.setPrototypeOf(Object.assign({},config),wasConfiguring):config;// For each incoming non-null configuration, create a temporary getter which will
// pull the value in from the initialConfig so that it doesn't matter in
// which order properties are set. You can access any property at any time.
for(key in config){// Don't default null configs inunless it's a direct property of the
// the passed configuration. When used at construct time, defaultConfigs
// will be prototype-chained onto the config.
if(config[key]!=null||config.hasOwnProperty(key)){// If there is an existing property with a getter/setter, *not* a value
// defined on the object for this config we must call it in our injected getter/setter.
// Maintainer, this is testing the truthiness of the assignment, *not* a botched equality test.
if(!instanceProperties[key]&&(instanceProperty=Reflect.getOwnPropertyDescriptor(me,key))&&!('value'in instanceProperty)){instanceProperties[key]=instanceProperty;}// Set up a temporary instance property which will
// Pull in the value from the initialConfig if the getter
// is called first.
Reflect.defineProperty(me,key,Base.createPropInitializer(key));if(!isConstructing){configDone[key]=false;}}else{configDone[key]=true;}}if(isConstructing){me.startConfigure(config);}// Set all our properties from the config object.
// If one of the properties needs to access a property that has not
// yet been set, the above temporary property will pull it through.
// Can't use Object.assign because that only uses own properties.
// config value blocks are prototype chained subclass->superclass
for(key in config){// Only push the value through if the property initializer is still present.
// If it gets triggered to pull the configuration value in, it deleted itself.
if(!configDone[key]){me[key]=config[key];}}if(wasConfiguring){me[configurationSymbol]=wasConfiguring;}else{delete me[configurationSymbol];}if(isConstructing){me.finishConfigure(config);}}/**
     * Returns a *copy* of the full configuration which was used to configure this object.
     * @returns {Object} All configuration properties which were used to configure this object.
     * @category Misc
     */},{key:"getDefaultConfiguration",/**
     * Gets the full {@link #property-defaultConfig-static} block for this object's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */value:function getDefaultConfiguration(){return this.constructor.getDefaultConfiguration();}/**
     * Gets the full {@link #property-defaultConfig-static} block for the entire inheritance chain for this class
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */},{key:"getProperties",/**
     * Gets the full {@link #property-properties-static} block for this class's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */value:function getProperties(){var hierarchy=this.classHierarchy(),len=hierarchy.length;var result={},i,cls;// TODO: if properties block does not change this could be cached? would speed up loading of big data sets into grid
// Gather the class result in *top-down* order so that a subclass's properties
// overrides properties from superclasses.
//for (cls of this.classHierarchy()) { // replaced for of since it transpiles badly and this is called a lot when creating many instances
for(i=0;i<len;i++){cls=hierarchy[i];// Skip classes which don't have it. We're going to ask its superclass anyway.
if(cls.hasOwnProperty('properties')){Object.assign(result,cls.properties);}}return result;}},{key:"classHierarchy",/**
     * Used by the Widget and GridFeatureManager class internally. Returns the class hierarchy of this object
     * starting from the `topClass` class (which defaults to `Base`).
     *
     * For example `classHierarchy(Widget)` on a Combo would yield `[Widget, Field, TextField, PickerField, Combo]`
     * @param {Function} [topClass] The topmost class constructor to start from.
     * @returns {Function[]} The class hierarchy of this instance.
     * @private
     * @category Configuration
     */value:function classHierarchy(topClass){var cls=this.constructor,fullClassHierarchy=cls.hasOwnProperty(classHierarchySymbol)?cls[classHierarchySymbol]:null,result;// Collect the full class hierarchy only once.
if(!fullClassHierarchy){// Using Object.getPrototypeOf instead of Refect.getPrototypeOf because:
// 1. The are almost the same, according to the MDN difference is handling getPrototypeOf('string')
// 2. It allows to pass security check is salesforce environment
for(fullClassHierarchy=cls[classHierarchySymbol]=[];cls!==Base;cls=Object.getPrototypeOf(cls)){fullClassHierarchy.unshift(cls);}// Don't let anybody mutate this. It's cached.
Object.freeze(fullClassHierarchy);}// Cut down to the requested topClass
if(topClass){for(var i=0;!result&&i<fullClassHierarchy.length;i++){if(fullClassHierarchy[i]===topClass){result=fullClassHierarchy.slice(i);}}}else{result=fullClassHierarchy;}return result;}/**
     * Same as {@link #function-classHierarchy} but returns array of class names obtained via $name property
     *
     * @param {Function} [topClass] The topmost class constructor to start from.
     * @returns {String[]} The class name hierarchy of this instance.
     * @private
     * @category Configuration
     */},{key:"classNameHierarchy",value:function classNameHierarchy(topClass){return this.classHierarchy(topClass).map(function(f){return f.$name;});}/**
     * Checks if an obj is of type using object's $name property and doing string comparision of the property with the type parameter.
     *
     * @param {String} type
     * @return {Boolean}
     */},{key:"$name",get:function get(){return this.constructor.$name;}},{key:"config",get:function get(){var result={},myConfig=this[originalConfigSymbol],key;// The configuration was created as a prototype chain of the class hierarchy's
// defaultConfig values hanging off a copy of the initialConfig object, so
// we must loop and copy since Object.assign only copies own properties.
for(key in myConfig){result[key]=myConfig[key];}return result;}}],[{key:"getDefaultConfiguration",value:function getDefaultConfiguration(){var configDescriptor=this.getConfigDescriptor();return configDescriptor.needsFork?this.fork(configDescriptor.defaultConfig):Object.setPrototypeOf({},configDescriptor.defaultConfig);}/**
     * Gets the full {@link #property-defaultConfig-static} block for this class's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */},{key:"getConfigDescriptor",value:function getConfigDescriptor(shallow){var me=this;var configDescriptor=!shallow&&me.hasOwnProperty(defaultConfigSymbol)?me[defaultConfigSymbol]:null,defaults,key,cls,value,superConfigDescriptor;if(!configDescriptor){configDescriptor={defaultConfig:defaults=me.hasOwnProperty('defaultConfig')?me.defaultConfig:{},// Use 1 instead of true because below we're using |= to or up all the flags from the class hierarchy
needsFork:0};// Only cache top level descriptors.
if(!shallow){me[defaultConfigSymbol]=configDescriptor;}for(key in defaults){value=defaults[key];// If any default properties are *mutable* Objects or Array we need to clone them.
// so that instances do not share configured values.
if(value&&(value.constructor===Object||Array.isArray(value))&&!Object.isFrozen(value)){// Use 1 instead of true because below we're using |= to or up all the flags from the class hierarchy
configDescriptor.needsFork=1;break;}}// Because of mixins being mixed into different parts of the class hiererchy,
// we can't chain to an existing deep descriptor. We have to climb from
// here and assemble the deep descriptor from shallow ones.
// If any along the way need forking (have an Object or Array), so do we.
// We chain them together because that is hundreds of times faster
// than Object.assign: https://jsperf.com/setprototypeof-vs-object-assign/
if(!shallow){for(cls=me.superclass;cls&&cls!==Base;cls=cls.superclass){superConfigDescriptor=cls.getConfigDescriptor(true);if(Object.keys(superConfigDescriptor.defaultConfig).length){configDescriptor.needsFork|=superConfigDescriptor.needsFork;Object.setPrototypeOf(defaults,defaults=superConfigDescriptor.defaultConfig);}}}}return configDescriptor;}},{key:"fork",value:function fork(obj){var ret,key,value;if(obj&&obj.constructor===Object&&!Object.isFrozen(obj)){ret=Object.setPrototypeOf({},obj);for(key in obj){value=obj[key];if(value){if(value.constructor===Object){ret[key]=this.fork(value);}else if(value instanceof Array){ret[key]=value.slice();}}}}else{ret=obj;}return ret;}},{key:"assign",value:function assign(dest){var i=0,ln=arguments.length<=1?0:arguments.length-1,source,key;for(;i<ln;i++){source=i+1<1||arguments.length<=i+1?undefined:arguments[i+1];for(key in source){dest[key]=source[key];}}return dest;}},{key:"createPropInitializer",value:function createPropInitializer(key){// Because initializers for a property name are the same, cache them on the Base
// class so that only one copy is created for each property name globally.
var result=(this[propertyInitializersSymbol]||(this[propertyInitializersSymbol]={}))[key];if(!result){var initializingFlagName='initializing'+StringHelper.capitalizeFirstLetter(key);result=this[propertyInitializersSymbol][key]={configurable:true,get:function get(){var me=this,instanceProperty=me[instancePropertiesSymbol][key];// If we took over from an instance property, replace it
if(instanceProperty){Reflect.defineProperty(me,key,instanceProperty);}// Otherwise just delete the instance property who's getter we are in.
else{delete me[key];}// Set the value from the configuration.
me[initializingFlagName]=true;me[key]=me[configurationSymbol][key];me[initializingFlagName]=false;// The property has been *pulled* from the configuration.
// Prevent the setting loop in configure from setting it again.
me.configDone[key]=true;// Finally, allow the prototype getter to return the value.
return me[key];},set:function set(value){var me=this,instanceProperty=me[instancePropertiesSymbol][key];// If we took over from an instance property, replace it
if(instanceProperty){Reflect.defineProperty(me,key,instanceProperty);}// Otherwise just delete the instance property who's getter we are in.
else{delete me[key];}// The config has been set (some internal code may have called the setter)
// so prevent it from being called again and overwritten with data from initialConfig.
me.configDone[key]=true;// Set the property normally (Any prototype setter will be invoked)
me[key]=value;}};}return result;}},{key:"isOfTypeName",value:function isOfTypeName(type){return this.classNameHierarchy().includes(type);}},{key:"$name",get:function get(){return this.hasOwnProperty('_$name')&&this._$name||this.name;}},{key:"superclass",get:function get(){return Object.getPrototypeOf(this);}}]);return Base;}();Base._$name='Base';/**
 * @module Common/mixin/Delayable
 */ /**
 * Tracks setTimeout, setInterval and requestAnimationFrame calls and clears them on destroy.
 *
 * @example
 * someClass.setTimeout(() => console.log('hi'), 200);
 * someClass.setInterval(() => console.log('annoy'), 100);
 * // can also use named timeouts for easier tracking
 * someClass.setTimeout(() => console.log('named'), 300, 'named');
 * someClass.clearTimeout('named');
 *
 * @private
 * @mixin
 */var Delayable=function Delayable(Target){return(/*#__PURE__*/function(_ref){_inherits2(Delayable,_ref);function Delayable(){_classCallCheck2(this,Delayable);return _possibleConstructorReturn2(this,_getPrototypeOf2(Delayable).apply(this,arguments));}_createClass2(Delayable,[{key:"doDestroy",value:function doDestroy(){var me=this;if(me.timeoutIds){Object.keys(me.timeoutIds).forEach(function(id){if(typeof me.timeoutIds[id]==='function'){me.timeoutIds[id]();}clearTimeout(id);});me.timeoutIds=null;}if(me.timeoutMap){Object.values(me.timeoutMap).forEach(function(id){return clearTimeout(id);});me.timeoutMap=null;}if(me.intervalIds){Object.keys(me.intervalIds).forEach(function(id){return clearInterval(id);});me.intervalIds=null;}if(me.animationFrameIds){Object.keys(me.animationFrameIds).forEach(function(id){return cancelAnimationFrame(id);});me.animationFrameIds=null;}_get2(_getPrototypeOf2(Delayable.prototype),"doDestroy",this).call(this);}/**
     * Check if a named timeout is active
     * @param name
     */},{key:"hasTimeout",value:function hasTimeout(name){return!!(this.timeoutMap&&this.timeoutMap[name]);}/**
     * Same as native setTimeout, but will be cleared automatically on destroy. If a propertyName is supplied it will
     * be used to store the timeout id.
     * @param {Object} timeoutSpec An object containing the details about that function, and the time delay.
     * @param {Function|String} timeoutSpec.fn The function to call, or name of function in this object to call. Used as the `name` parameter if a string.
     * @param {Number} timeoutSpec.delay The milliseconds to delay the call by.
     * @param {String} [timeoutSpec.name] The name under which to register the timer. Defaults to `fn.name`.
     * @param {Boolean} [timeoutSpec.runOnDestroy] Pass `true` if this function should be executed if the Delayable instance is destroyed while function is scheduled.
     * @param {Boolean} [timeoutSpec.cancelOutstanding] Pass `true` to cancel any outstanding invocation of the passed function.
     * @returns {Number}
     */},{key:"setTimeout",value:function(_setTimeout){function setTimeout(_x){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(_ref2){var fn=_ref2.fn,delay=_ref2.delay,name=_ref2.name,runOnDestroy=_ref2.runOnDestroy,cancelOutstanding=_ref2.cancelOutstanding;if(arguments.length>1||typeof arguments[0]==='function'){var _arguments=Array.prototype.slice.call(arguments);fn=_arguments[0];delay=_arguments[1];name=_arguments[2];runOnDestroy=_arguments[3];}if(typeof fn==='string'){name=fn;}else if(!name){name=fn.name;}if(cancelOutstanding){this.clearTimeout(name);}var me=this,timeoutIds=me.timeoutIds||(me.timeoutIds={}),timeoutMap=me.timeoutMap||(me.timeoutMap={}),timeoutId=setTimeout(function(){if(typeof fn==='string'){fn=me[name];}fn.call(me);if(timeoutIds&&timeoutId in timeoutIds)delete timeoutIds[timeoutId];if(timeoutMap&&name in timeoutMap)delete timeoutMap[name];},delay);timeoutIds[timeoutId]=runOnDestroy?fn:true;if(name){timeoutMap[name]=timeoutId;}return timeoutId;})/**
     * clearTimeout wrapper, either call with timeout id as normal clearTimeout or with timeout name (if you specified
     * a name to setTimeout())
     * property to null.
     * @param {Number|String} idOrName timeout id or name
     */},{key:"clearTimeout",value:function(_clearTimeout){function clearTimeout(_x2){return _clearTimeout.apply(this,arguments);}clearTimeout.toString=function(){return _clearTimeout.toString();};return clearTimeout;}(function(idOrName){var id=idOrName;if(typeof id==='string'){if(this.timeoutMap){id=this.timeoutMap[idOrName];delete this.timeoutMap[idOrName];}else{return;}}clearTimeout(id);this.timeoutIds&&delete this.timeoutIds[id];})/**
     * clearInterval wrapper
     * @param {Number} id
     */},{key:"clearInterval",value:function(_clearInterval){function clearInterval(_x3){return _clearInterval.apply(this,arguments);}clearInterval.toString=function(){return _clearInterval.toString();};return clearInterval;}(function(id){clearInterval(id);this.intervalIds&&delete this.intervalIds[id];})/**
     * Same as native setInterval, but will be cleared automatically on destroy
     * @param fn
     * @param delay
     * @returns {Number}
     */},{key:"setInterval",value:function(_setInterval){function setInterval(_x4,_x5){return _setInterval.apply(this,arguments);}setInterval.toString=function(){return _setInterval.toString();};return setInterval;}(function(fn,delay){var me=this,intervalId=setInterval(fn,delay);if(!me.intervalIds)me.intervalIds={};me.intervalIds[intervalId]=true;return intervalId;})/**
     * Relays to native requestAnimationFrame and adds to tracking to have call automatically canceled on destroy.
     * @param {Function} fn
     * @param {Object[]} [args] The argument list to append to those passed to the function.
     * @param {Object} [thisObj] `this` reference for the function.
     * @returns {Number}
     */},{key:"requestAnimationFrame",value:function(_requestAnimationFrame){function requestAnimationFrame(_x6,_x7,_x8){return _requestAnimationFrame.apply(this,arguments);}requestAnimationFrame.toString=function(){return _requestAnimationFrame.toString();};return requestAnimationFrame;}(function(fn,extraArgs,thisObj){var handler=extraArgs||thisObj?function(){return fn.apply(thisObj,extraArgs);}:fn,frameId=requestAnimationFrame(handler);(this.animationFrameIds||(this.animationFrameIds={}))[frameId]=true;return frameId;})/**
     * Creates a function which will execute once, on the next animation frame. However many time it is
     * called in one event run, it will only be scheduled to run once.
     * @param {Function|String} fn The function to call, or name of function in this object to call.
     * @param {Object[]} [args] The argument list to append to those passed to the function.
     * @param {Object} [thisObj] `this` reference for the function.
     * @param {Boolean} [cancelOutstanding] Cancel any outstanding queued invocation upon call.
     */},{key:"createOnFrame",value:function createOnFrame(fn){var _this3=this;var extraArgs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var thisObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;var cancelOutstanding=arguments.length>3?arguments[3]:undefined;var me=this,rafId,result=function result(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}// Cancel if outstanding if requested
if(rafId&&cancelOutstanding){me.cancelAnimationFrame(rafId);rafId=null;}if(!rafId){rafId=_this3.requestAnimationFrame(function(){if(typeof fn==='string'){fn=thisObj[fn];}rafId=null;args.push.apply(args,_toConsumableArray(extraArgs));fn.apply(thisObj,args);});}};result.cancel=function(){return me.cancelAnimationFrame(rafId);};return result;}/**
     * Relays to native cancelAnimationFrame and removes from tracking.
     * @param {Number} handle
     */},{key:"cancelAnimationFrame",value:function(_cancelAnimationFrame){function cancelAnimationFrame(_x9){return _cancelAnimationFrame.apply(this,arguments);}cancelAnimationFrame.toString=function(){return _cancelAnimationFrame.toString();};return cancelAnimationFrame;}(function(handle){cancelAnimationFrame(handle);this.animationFrameIds&&delete this.animationFrameIds[handle];})/**
     * Wraps a function with another function that delays it specified amount of time, repeated calls to the wrapper
     * resets delay.
     * @param {Function|String} fn Function to buffer, or name of function in this object to call.
     * @param {Number} delay Delay in ms
     * @param {Object} [thisObj] `this` reference for the function.
     * @returns {Function} Wrapped function, call this
     */},{key:"buffer",value:function buffer(fn,delay){var _this4=this;var thisObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;var timeoutId=null;if(typeof fn==='string'){fn=thisObj[fn];}var func=function func(){for(var _len3=arguments.length,params=new Array(_len3),_key3=0;_key3<_len3;_key3++){params[_key3]=arguments[_key3];}func.called=false;if(timeoutId!==null){_this4.clearTimeout(timeoutId);}timeoutId=_this4.setTimeout(function(){var _fn;(_fn=fn).call.apply(_fn,[thisObj].concat(params));// this will be instance of class that we are mixed into.
func.called=true;},delay);};return func;}/**
     * Create a "debounced" function which will call on the "leading edge" of a timer period.
     * When first invoked will call immediately, but invocations after that inside its buffer
     * period will be rejected, and *one* invocation will be made after the buffer period has expired.
     *
     * This is useful for responding immediately to a first mousemove, but from then on, only
     * calling the action function on a regular timer while the mouse continues to move.
     *
     * @param {Function} fn The function to call.
     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.
     */},{key:"throttle",value:function throttle(fn,buffer){var me=this,lastCallTime=0,callArgs,timerId,_result;var invoke=function invoke(){timerId=0;lastCallTime=performance.now();fn.apply(me,callArgs);_result.called=true;};_result=function result(){var elapsed=performance.now()-lastCallTime;for(var _len4=arguments.length,args=new Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}callArgs=args;// If it's been more then the buffer period since we invoked, we can call it now
if(elapsed>=buffer){me.clearTimeout(timerId);invoke();}// Otherwise, kick off a timer for the requested period.
else if(!timerId){timerId=me.setTimeout(invoke,buffer-elapsed);_result.called=false;}};_result.cancel=function(){return me.clearTimeout(timerId);};return _result;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return Delayable;}(Target||Base));};/**
 * @module Common/helper/BrowserHelper
 */ /**
 * Static helper class that does browser/feature detection.
 * @internal
 */exports.Delayable=Delayable;var BrowserHelper=/*#__PURE__*/function(){function BrowserHelper(){_classCallCheck2(this,BrowserHelper);}_createClass2(BrowserHelper,null,[{key:"cacheFlags",value:function cacheFlags(){var platform=arguments.length>0&&arguments[0]!==undefined?arguments[0]:navigator.platform;var userAgent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:navigator.userAgent;var me=this;// os
me._isLinux=Boolean(platform.match(/Linux/));me._isMac=Boolean(platform.match(/Mac/));me._isWindows=Boolean(platform.match(/Win32/));// browser
me._isIE11=Boolean(userAgent.match(/rv:11/));me._edgeVersion=me.getVersion(userAgent,/Edge\/(\d+)\./);me._isEdge=me._edgeVersion>0;// Edge user agent contain webkit too
me._isWebkit=Boolean(userAgent.match(/WebKit/))&&!me._isEdge;me._firefoxVersion=me.getVersion(userAgent,/Firefox\/(\d+)\./);me._isFirefox=me._firefoxVersion>0;me._chromeVersion=!me._isEdge?me.getVersion(userAgent,/Chrom(?:e|ium)\/(\d+)\./):0;me._isChrome=me._chromeVersion>0;me._isSafari=Boolean(userAgent.match(/Safari/))&&!me._isChrome&&!me._isEdge;me._isMobileSafari=Boolean(userAgent.match(/Mobile.*Safari/));try{document.querySelector(':scope');// Scoped queries are not supported for custom element polyfill in firefox
// https://app.assembla.com/spaces/bryntum/tickets/6781
me.supportsQueryScope=!me._isFirefox;}catch(e){me.supportsQueryScope=false;}me._supportsPassive=false;try{// If the browser asks the options object to yield its passive
// property, we know it supports the object form options object
// and passive listeners.
document.addEventListener('__notvalid__',null,{get passive(){me._supportsPassive=true;}});}catch(e){}//document.addEventListener("DOMContentLoaded", me.onDocumentReady);
}// NOTE: Not allowed with CSP, moved to Grid#render()
// /**
//  * Feature and browser detection which requires the document to be loaded.
//  * @private
//  */
// static onDocumentReady() {
//     // Firefox includes a part of the Y scroller jutting up which is not needed.
//     // Also need to "mitre" the horizontal scrollbar to leave the gap at the end.
//     if (BrowserHelper.isFirefox) {
//         CSSHelper.insertRule(`.b-virtual-scroller {height: ${DomHelper.scrollBarWidth}px;}`);
//         CSSHelper.insertRule(`.b-virtual-scrollers {padding-right: ${DomHelper.scrollBarWidth}px;}`);
//     }
// }
/**
     * Returns matched version for userAgent
     * @param String versionRe version match regular expression
     * @returns {Number} matched version
     * @readonly
     * @private
     */},{key:"getVersion",value:function getVersion(userAgent,versionRe){var match=userAgent.match(versionRe);return match?parseInt(match[1]):0;}/**
     * Tries to determine if the user is using a touch device
     * @returns {Boolean}
     * @readonly
     */},{key:"setLocalStorageItem",value:function setLocalStorageItem(key,value){this.storageAvailable&&localStorage.setItem(key,value);}},{key:"getLocalStorageItem",value:function getLocalStorageItem(key){return this.storageAvailable&&localStorage.getItem(key);}},{key:"removeLocalStorageItem",value:function removeLocalStorageItem(key){this.storageAvailable&&localStorage.removeItem(key);}},{key:"isTouchDevice",get:function get(){if('_isTouchDevice'in this)return this._isTouchDevice;return'ontouchstart'in window||// edge tends to always have this with a value 2
!this.isEdge&&navigator.maxTouchPoints>0||// but if env is actually touchable, then window has this class present
this.isEdge&&window.TouchEvent||navigator.msMaxTouchPoints>0;}// Since touch screen detection is unreliable we should allow client to configure it, or detect first touch
,set:function set(value){this._isTouchDevice=value;}/**
     * Checks if platform is mac
     * @returns {Boolean}
     * @readonly
     */},{key:"isMac",get:function get(){return this._isMac;}/**
     * Checks if platform is windows
     * @returns {Boolean}
     * @readonly
     */},{key:"isWindows",get:function get(){return this._isWindows;}/**
     * Checks if platform is linux
     * @returns {Boolean}
     * @readonly
     */},{key:"isLinux",get:function get(){return this._isLinux;}/**
     * Checks if browser is IE11
     * @returns {Boolean}
     * @readonly
     */},{key:"isIE11",get:function get(){return this._isIE11;}/**
     * Checks if browser is Edge
     * @returns {Boolean}
     * @readonly
     */},{key:"isEdge",get:function get(){return this._isEdge;}/**
     * Find the major Edge version
     * @returns {Number} Edge version or 0 for other browsers
     * @readonly
     */},{key:"edgeVersion",get:function get(){return this._edgeVersion;}/**
     * Checks if browser is Webkit
     * @returns {Boolean}
     * @readonly
     */},{key:"isWebkit",get:function get(){return this._isWebkit;}/**
     * Checks if browser is Chrome
     * @returns {Boolean}
     * @readonly
     */},{key:"isChrome",get:function get(){return this._isChrome;}/**
     * Find the major Chrome version
     * @returns {Number} Chrome version or 0 for other browsers
     * @readonly
     */},{key:"chromeVersion",get:function get(){return this._chromeVersion;}/**
     * Checks if browser is Firefox
     * @returns {Boolean}
     * @readonly
     */},{key:"isFirefox",get:function get(){return this._isFirefox;}/**
     * Find the major Firefox version.
     * @returns {Number} Firefox version or 0 for other browsers
     * @readonly
     */},{key:"firefoxVersion",get:function get(){return this._firefoxVersion;}/**
     * Checks if browser is Safari
     * @returns {Boolean}
     * @readonly
     */},{key:"isSafari",get:function get(){return this._isSafari;}/**
     * Checks if browser is mobile Safari
     * @returns {Boolean}
     * @readonly
     */},{key:"isMobileSafari",get:function get(){return this._isMobileSafari;}/**
     * Returns `true` if the browser supports passive event listeners.
     */},{key:"supportsPassive",get:function get(){return this._supportsPassive;}// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
},{key:"storageAvailable",get:function get(){var storage,x;try{storage=localStorage;x='__storage_test__';storage.setItem(x,x);storage.removeItem(x);return true;}catch(e){return e instanceof DOMException&&(// everything except Firefox
e.code===22||// Firefox
e.code===1014||// test name field too, because code might not be present
// everything except Firefox
e.name==='QuotaExceededError'||// Firefox
e.name==='NS_ERROR_DOM_QUOTA_REACHED')&&// acknowledge QuotaExceededError only if there's something already stored
storage.length!==0;}}}]);return BrowserHelper;}();exports.BrowserHelper=BrowserHelper;BrowserHelper.cacheFlags();BrowserHelper._$name='BrowserHelper';/**
 * @module Common/helper/util/Rectangle
 */var allBorders=['border-top-width','border-right-width','border-bottom-width','border-left-width'],allPaddings=['padding-top','padding-right','padding-bottom','padding-left'],borderNames={t:'border-top-width',r:'border-right-width',b:'border-bottom-width',l:'border-left-width'},paddingNames={t:'padding-top',r:'padding-right',b:'padding-bottom',l:'padding-left'},zeroBased=Object.freeze({x:0,y:0}),alignSpecRe=/^([trblc])(\d*)-([trblc])(\d*)$/i,alignPointRe=/^([trblc])(\d*)$/i,edgeNames=['top','right','bottom','left'],edgeIndices={t:0,r:1,b:2,l:3},defaultAlignments=['b-t','l-r','t-b','r-l'],zeroOffsets=Object.freeze([0,0]),matchDimensions=['width','height'];// Parse a l0-r0 (That's how Menus align to their owning MenuItem) slign spec.
function parseAlign(alignSpec){var parts=alignSpecRe.exec(alignSpec),myOffset=parseInt(parts[2]||50),targetOffset=parseInt(parts[4]||50);// Comments assume the Menu's alignSpec of l0-r0 is used.
return{myAlignmentPoint:parts[1]+myOffset,// l0
myEdge:parts[1],// l
myOffset:myOffset,// 0
targetAlignmentPoint:parts[3]+targetOffset,// r0
targetEdge:parts[3],// r
targetOffset:targetOffset,// 0
startZone:edgeIndices[parts[3]]// 1 - start trying zone 1 in TRBL order
};}// Takes a result from the above function and flips edges for the axisLock config
function flipAlign(align){return"".concat(edgeNames[(edgeIndices[align.myEdge]+2)%4][0]).concat(align.myOffset,"-").concat(edgeNames[(edgeIndices[align.targetEdge]+2)%4][0]).concat(align.targetOffset);}function createOffsets(offset){if(offset==null){return zeroOffsets;}else if(typeof offset==='number'){return[offset,offset];}return offset;}/**
 * Encapsulates rectangular areas for comparison, intersection etc.
 *
 * Note that the `right` and `bottom` properties are *exclusive*.
 *
 */var Rectangle=/*#__PURE__*/function(){_createClass2(Rectangle,[{key:"$name",get:function get(){return this.constructor.$name;}/**
     * Constructs a Rectangle
     * @param x The X coordinate
     * @param y The Y coordinate
     * @param width The width
     * @param height The height
     */}],[{key:"from",/**
     * Returns the Rectangle in document based coordinates of the passed element.
     *
     * *Note:* If the element passed is the `document` or `window` the `window`'s
     * rectangle is returned which is always at `[0, 0]` and encompasses the
     * browser's entire document viewport.
     * @param {HTMLElement} element The element to calculate the Rectangle for.
     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.
     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.
     * @return {Common.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.
     */value:function from(element,relativeTo){var ignorePageScroll=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(element instanceof Rectangle){return element;}if(relativeTo){// TODO: nige should figure out if there is a better solution
var _relativeTo=relativeTo,scrollLeft=_relativeTo.scrollLeft,scrollTop=_relativeTo.scrollTop;if((BrowserHelper.isEdge||BrowserHelper.isSafari)&&relativeTo===document.body){scrollLeft=scrollTop=0;}relativeTo=Rectangle.from(relativeTo).translate(-scrollLeft,-scrollTop);}else{relativeTo=zeroBased;}// Viewport is denoted by requesting window or document.
// document.body may overflow the viewport, so this must not be evaluated as the viewport.
var isViewport=element===document||element===window,viewRect=isViewport?new Rectangle(0,0,window.innerWidth,window.innerHeight):element.getBoundingClientRect(),scrollOffset=ignorePageScroll||isViewport?[0,0]:[window.pageXOffset,window.pageYOffset];return new Rectangle(viewRect.left+scrollOffset[0]-relativeTo.x,viewRect.top+scrollOffset[1]-relativeTo.y,viewRect.width,viewRect.height);}/**
     * Returns the inner Rectangle (within border) in document based coordinates
     * of the passed element.
     * @param element The element to calculate the Rectangle for.
     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.
     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.
     * @return {Common.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.
     */},{key:"inner",value:function inner(element,relativeTo){var ignorePageScroll=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var result=this.from(element,relativeTo,ignorePageScroll);// Can only ask for the following styles if element is in the document.
if(document.body.contains(element)){var borders=DomHelper.getStyleValue(element,allBorders);result.x+=parseInt(borders[borderNames.l]);result.y+=parseInt(borders[borderNames.t]);result.right-=parseInt(borders[borderNames.r]);result.bottom-=parseInt(borders[borderNames.b]);}return result;}/**
     * Returns the content Rectangle (within border and padding) in document based coordinates
     * of the passed element.
     * @param element The element to calculate the Rectangle for.
     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.
     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.
     * @return {Common.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.
     */},{key:"content",value:function content(element,relativeTo){var ignorePageScroll=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var result=this.from(element,relativeTo,ignorePageScroll);// Can only ask for the following styles if element is in the document.
if(document.body.contains(element)){var borders=DomHelper.getStyleValue(element,allBorders),padding=DomHelper.getStyleValue(element,allPaddings);result.x+=parseInt(borders[borderNames.l])+parseInt(padding[paddingNames.l]);result.y+=parseInt(borders[borderNames.t])+parseInt(padding[paddingNames.t]);result.right-=parseInt(borders[borderNames.r])+parseInt(padding[paddingNames.r]);result.bottom-=parseInt(borders[borderNames.b])+parseInt(padding[paddingNames.b]);}return result;}/**
     * Returns the client Rectangle (within border and padding and scrollbars) in document based coordinates
     * of the passed element.
     * @param element The element to calculate the Rectangle for.
     * @param {HTMLElement} [relativeTo] Optionally, a parent element in whose space to calculate the Rectangle.
     * @param {Boolean} [ignorePageScroll] Use browser viewport based coordinates.
     * @return {Common.helper.util.Rectangle} The Rectangle in document based (or, optionally viewport based) coordinates. Relative to the _relativeTo_ parameter if passed.
     */},{key:"client",value:function client(element,relativeTo){var ignorePageScroll=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var result=this.content(element,relativeTo,ignorePageScroll),scrollbarWidth=DomHelper.scrollBarWidth,padding;if(scrollbarWidth){// Capture width taken by any vertical scrollbar.
// If there is a vertical scrollbar, shrink the box.
// TODO: We may have to shrink from the left in RTL mode.
if(element.scrollHeight>element.clientHeight){padding=parseInt(DomHelper.getStyleValue(element,'padding-right'));result.right+=padding-Math.max(padding,scrollbarWidth);}// Capture height taken by any horizontal scrollbar.
// If there is a horizontal scrollbar, shrink the box.
if(element.scrollWidth>element.clientWidth){padding=parseInt(DomHelper.getStyleValue(element,'padding-bottom'));result.bottom+=padding-Math.max(padding,scrollbarWidth);}}// The client region excluding any scrollbars.
return result;}/**
     * Returns a new rectangle created as the union of all supplied rectangles.
     * @param {Common.helper.util.Rectangle[]} rectangles
     * @return {Common.helper.util.Rectangle}
     */},{key:"union",value:function union(){var _ref3=arguments.length<=0?undefined:arguments[0],x=_ref3.x,y=_ref3.y,right=_ref3.right,bottom=_ref3.bottom,current;if(arguments.length>1){for(var i=1;i<arguments.length;i++){current=i<0||arguments.length<=i?undefined:arguments[i];if(current.x<x){x=current.x;}if(current.y<y){y=current.y;}if(current.right>right){right=current.right;}if(current.bottom>bottom){bottom=current.bottom;}}}return new Rectangle(x,y,right-x,bottom-y);}// This class doesn't extend Base and extending doesn't seem to be
// the way to go. Instead we duplicate smallest piece of logic here
},{key:"$name",get:function get(){return this.hasOwnProperty('_$name')&&this._$name||this.name;}}]);function Rectangle(x,y,width,height){_classCallCheck2(this,Rectangle);var me=this;me._x=x;me._y=y;me._width=width;me._height=height;}/**
     * Creates a copy of this Rectangle.
     */_createClass2(Rectangle,[{key:"clone",value:function clone(){var me=this,result=new Rectangle(me.x,me.y,me.width,me.height);result.minHeight=me.minHeight;result.minWidth=me.minWidth;return result;}/**
     * Returns `true` if this Rectangle wholly contains the passed rectangle.
     *
     * Note that a {@link Common.helper.util.Point} may be passed.
     * @param other The Rectangle to test for containment within this Rectangle
     * @return {Boolean} `true` if the other Rectangle is wholly contained within this Rectangle
     */},{key:"contains",value:function contains(other){var me=this;if(other instanceof Rectangle){return other._x>=me._x&&other._y>=me._y&&other.right<=me.right&&other.bottom<=me.bottom;}else{return false;}}/**
     * Checks if this Rectangle intersects the passed Rectangle
     * @param {Common.helper.util.Rectangle} other The Rectangle to intersect with this.
     * @param {Boolean} useBoolean Specify `true` to return a boolean value instead of constructing a new Rectangle
     * @return {Common.helper.util.Rectangle|Boolean} Returns the intersection Rectangle or `false` if there is no intersection.
     */},{key:"intersect",value:function intersect(other){var useBoolean=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,y=Math.max(me.y,other.y),r=Math.min(me.right,other.right),b=Math.min(me.bottom,other.bottom),x=Math.max(me.x,other.x);if(b>y&&r>x){return useBoolean?true:new Rectangle(x,y,r-x,b-y);}else{return false;}}},{key:"equals",value:function equals(other){var round=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var processor=round?function(x){return Math.round(x);}:function(x){return x;};return other instanceof Rectangle&&processor(other.x)===processor(this.x)&&processor(other.y)===processor(this.y)&&processor(other.width)===processor(this.width)&&processor(other.height)===processor(this.height);}/**
     * Translates this Rectangle by the passed vector. Size is maintained.
     * @param {Number} x The X translation vector.
     * @param {Number} y The Y translation vector.
     * @returns This Rectangle;
     */},{key:"translate",value:function translate(x,y){this._x+=x||0;this._y+=y||0;return this;}/**
     * Moves this Rectangle to the passed `x`, `y` position. Size is maintained.
     * @param {Number} x The new X position.
     * @param {Number} y The new Y position.
     * @returns This Rectangle;
     */},{key:"moveTo",value:function moveTo(x,y){if(x!=null){this._x=x;}if(y!=null){this._y=y;}return this;}/**
     * Returns the vector which would translate this Rectangle (or Point) to the same position as the other Rectangle (or point)
     * @param {Common.helper.util.Rectangle/Common.helper.util.Point} other The Rectangle or Point to calculate the delta to.
     */},{key:"getDelta",value:function getDelta(other){return[other.x-this.x,other.y-this.y];}/**
     * The center point of this rectangle.
     * @property {Common.helper.util.Point}
     */},{key:"adjust",/**
     * Modifies the bounds of this Rectangle by the specified deltas.
     * @param {Number} x How much to *add* to the x position.
     * @param {Number} y  How much to *add* to the y position.
     * @param {Number} width  How much to add to the width.
     * @param {Number} height  How much to add to the height.
     * @returns This Rectangle
     */value:function adjust(x,y,width,height){var me=this;me.x+=x;me.y+=y;me.width+=width;me.height+=height;return me;}/**
     * Modifies the bounds of this rectangle by moving them by the specified amount in all directions.
     * @param {Number} amount How much to inflate
     * @returns {Common.helper.util.Rectangle} This Rectangle
     */},{key:"inflate",value:function inflate(amount){return this.adjust(-amount,-amount,amount,amount);}/**
     * Attempts constrain this Rectangle into the passed Rectangle. If the `strict` parameter is `true`
     * then this method will return `false` if constraint could not be acheived.
     *
     * If this Rectangle has a `minHeight` or `minWidth` property, size will be adjusted while attempting to constrain.
     *
     * Right and bottom are adjusted first leaving the top and bottom sides to "win" in the case that this Rectangle overflows
     * the constrainTo Rectangle.
     * @param {Common.helper.util.Rectangle} constrainTo The Rectangle to constrain this Rectangle into if possible.
     * @param {Boolean} strict Pass `true` to return false, and leave this Rectangle unchanged if constraint
     * could not be achieved.
     * @returns This Rectangle. If `strict` is true, and constraining was not successful, `false`.
     */},{key:"constrainTo",value:function constrainTo(_constrainTo,strict){var me=this,originalHeight=me.height,originalY=me.y,minWidth=me.minWidth||me.width,minHeight=me.minHeight||me.height;if(me.height>=_constrainTo.height){// If we're strict, fail if we could *never* fit into available height.
if(strict&&minHeight>_constrainTo.height){return false;}// If we are >= constrain height, we will have to be at top edge of constrainTo
me._y=_constrainTo.y;me.height=_constrainTo.height;}if(me.width>=_constrainTo.width){// If we're strict, fail if we could *never* fit into available width.
if(strict&&minWidth>_constrainTo.width){// Could not be constrained; undo any previous attempt with height
me.y=originalY;me.height=originalHeight;return false;}// If we are >= constrain width, we will have to be at left edge of constrainTo
me._x=_constrainTo.x;me.width=_constrainTo.width;}var overflow=me.bottom-_constrainTo.bottom;// Overflowing the bottom side, translate upwards.
if(overflow>0){me.translate(0,-overflow);}overflow=me.right-_constrainTo.right;// Overflowing the right side, translate leftwards.
if(overflow>0){me.translate(-overflow);}overflow=_constrainTo.y-me.y;// Now, after possible translation upwards, we overflow the top, translate downwards.
if(overflow>0){me.translate(0,overflow);}overflow=_constrainTo.x-me.x;// Now, after possible translation leftwards, we overflow the left, translate rightwards.
if(overflow>0){me.translate(overflow);}return me;}/**
     * Returns a cloned version of this Rectangle aligned to a target Rectangle, or element or {@link Common.widget.Widget}.
     * @param {Object} spec Alignment specification.
     * @param {HTMLElement|Common.widget.Widget|Common.helper.util.Rectangle} spec.target The Widget or element or Rectangle to align to.
     * @param {Number[]} [spec.anchorSize] The `[width, height]` of the anchor pointer when in `top` position. The
     * width is the baseline length, and the height is the height of the arrow. If passed, the anchor position
     * will be calculated to be at the centre of the overlap of the two aligned edges and returned in the `anchor`
     * property of the resulting Rectangle:
     *
     *     {
     *         edge: 'top',         // or 'right' or 'bottom' or 'left'
     *         x/y: offset          // dimension to translate and value to translate by.
     *     }
     *
     * @param {Object} [spec.anchorPosition] an `{ x: n, y: n }` anchor translation to be used *if the requested alignment
     * succeeds without violating constraints*. If a fallback alignment is used, the anchor will be centered in the
     * overlap of the aligned edges as usual.
     * @param {Boolean} [spec.overlap] True to allow this to overlap the target.
     * @param {String} spec.align The edge alignment specification string, specifying two points to bring together.
     * The form is `[trblc][n]-[trblc][n]. The `n` is a percentage offset
     * along that edge which defines the alignment point. This is not valid for alignment point `c`.
     * For example `t0-b0' would align this Rectangle's top left corner with the bottom left corner of the `target`.
     * @param {HTMLElement|Common.widget.Widget|Common.helper.util.Rectangle} [spec.constrainTo] The Widget or Element or Rectangle to constrain to.
     * If the requested alignment cannot be constrained (it will first shrink the resulting Rectangle according
     * to the `minWidth` and `minHeight` properties of this rectangle), then it will try aligning at other edges
     * (honouring the `axisLock` option), and pick the fallback alignment which results in the shortest translation.
     * @param {Boolean} [spec.axisLock] Specify as a truthy value to fall back to aligning against the opposite
     * edge first if the requested alignment cannot be constrained into the `constrainTo` option. If specified
     * as `'flexible'`, then fallback will continue searching for solutions on the remaining two sides.
     * @param {Number|Number[]} [spec.offset] The 'x' and 'y' offset values to create an extra margin round the target
     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget
     * towards the target - for example producing the effect of the anchor pointer piercing the target.
     * @returns {Common.helper.util.Rectangle} A new Rectangle aligned as requested if possible, but if the requested position violates
     * the `constrainTo` Rectangle, the shortest translation from the requested position which obeys constraints will be used.
     */},{key:"alignTo",value:function alignTo(spec){// The target and constrainTo may be passed as HtmlElements or Widgets.
// If so, extract the Rectangles without mutating the incoming spec.
var result=this.clone(),target=spec.target,constrainTo=spec.constrainTo,calculatedAnchorPosition,zone,resultZone,constrainingToViewport;if(target&&!(target instanceof Rectangle)){target=Rectangle.from(target.element?target.element:target);}if(constrainTo&&!(constrainTo instanceof Rectangle)){// Viewport is denoted by requesting window or document.
// document.body may overflow the viewport, so this must not be evaluated as the viewport.
constrainingToViewport=constrainTo===window||constrainTo===document;constrainTo=Rectangle.from(constrainTo.element?constrainTo.element:constrainTo,null,spec.ignorePageScroll);}var me=this,targetOffsets=createOffsets(spec.offset),align=spec.align,axisLock=spec.axisLock,anchorSize=spec.anchorSize,anchorPosition=spec.anchorPosition,alignSpec=parseAlign(align),position=spec.position||(target&&target.$name==='Point'?target:null),targetConstrainRect=constrainTo&&constrainTo.clone(),constraintZones=[],zoneOrder=[{zone:zone=alignSpec.startZone,align:align}],matchDimension=spec.matchSize&&matchDimensions[alignSpec.startZone&1],originalSize=me[matchDimension];// Match the size of the edge we are aligning against
if(matchDimension&&axisLock){result[matchDimension]=target[matchDimension];}// Ensure we will fit before trying
if(constrainTo){result.constrainTo(constrainTo);}// If we are aligning edge-to-edge, then plan our fallback strategy when we are constrained.
if(constrainTo&&alignSpec.startZone!=null){// Create the list of zone numbers and alignments to try in the preferred order.
//
// In the case of axisLock, go through the zones by each axis.
// So if they asked for t-b, which is zone 2,
// the array will be [2, 0, 3, 1] (t-b, b-t, r-l, l-r)
if(axisLock){// First axis flip has to maintain the offset along that axis.
// so align: l0-r0 has to flip to align: r0-l0. See submenu flipping when
// constrained to the edge. It flips sides but maintains vertical position.
zoneOrder.push({zone:zone=(zone+2)%4,align:flipAlign(alignSpec)});// Only try the other axis is axisLock is 'flexible'
if(axisLock==='flexible'){zoneOrder.push({zone:zone=(alignSpec.startZone+1)%4,align:defaultAlignments[zone]});zoneOrder.push({zone:zone=(zone+2)%4,align:defaultAlignments[zone]});}}// Go through the zones in order from the requested start.
// So if they asked for t-b, which is zone 2,
// the array will be [2, 3, 0, 1] (t-b, r-l, b-t, l-r)
else{for(var i=1;i<4;i++){zoneOrder.push({zone:zone=(zone+1)%4,align:defaultAlignments[zone]});}}}// Allow them to pass anchorPosition: {x: 10} to indicate that after a fully successful,
// unconstrained align, the anchor should be 10px from the start.
if(anchorPosition){var _calculatedAnchorPosi;var pos=alignSpec.startZone&1?'y':'x';calculatedAnchorPosition=(_calculatedAnchorPosi={},_defineProperty(_calculatedAnchorPosi,pos,anchorPosition[pos]),_defineProperty(_calculatedAnchorPosi,"edge",edgeNames[(alignSpec.startZone+2)%4]),_calculatedAnchorPosi);}// Keep the target within reach. If it's way outside, pull it back so that it's only just outside);
if(targetConstrainRect&&target){targetConstrainRect.adjust(-target.width,-target.height,target.width,target.height);target.constrainTo(targetConstrainRect);}// As part of fallback process when fitting within constraints, result may shrink to our minima
result.minWidth=me.minWidth;result.minHeight=me.minHeight;// We're being commanded to try to align at a position
if(position){result.moveTo(position.x,position.y);if(constrainTo){result.constrainTo(constrainTo);}}// We're aligning to a Target Rectangle within a ConstrainTo Rectangle, taking into account
// a possible anchor pointer, or x/y offsets. Here's the situation:
//
//                             <-- ConstrainTo Rectangle -->
//  +-----------------------------------+--------------------+-------------------------+
//  |                                   |                    |                         |
//  |                                   |                    |                         |
//  |                                   |                    |                         |
//  |-----------------------------------+--------------------+-------------------------+
//  |                                   |          ▼         |                         |
//  |                                   | +----------------+ |                         |
//  |                                   | |                | |                         |
//  |                                   | |                | |                         |
//  |                                   |▶|     Target     |◀|                         |
//  |                                   | |                | |                         |
//  |                                   | |                | |                         |
//  |                                   | +----------------+ |                         |
//  |                                   |          ▲         |                         |
//  +-----------------------------------+--------------------+-------------------------|
//  |                                   |                    |                         |
//  |                                   |                    |                         |
//  |                                   |                    |                         |
//  +-----------------------------------+--------------------+-------------------------+
//
// Which results in the four possible constraint zones above, which we index in standard CSS order.
//
// Top    = 0
// Right  = 1
// Bottom = 2
// Left   = 3
//
// If the initially requested alignment is not within the constrainTo rectangle
// then, calculate these four, and then loop through them, beginning at the requested one,
// quitting when we find a position which does not violate constraints. This includes
// shrinking the aligning Rectangle towards its minima to attempt a fit.
//
// The final fallback, if there is no position which does not violate constraints
// is to position in whichever of the four rectangles has the largest area shrinking overflowing
// dimensions down to minima if specified.
//
else{// Offsets: If we are using an anchor to move away from the target, use anchor height in both dimensions.
// It's rotated so that "height" always has the same meaning. It's the height of the arrow.
var offsets=anchorSize?[anchorSize[1]+targetOffsets[0],anchorSize[1]+targetOffsets[1]]:targetOffsets,targetPoint=target.getAlignmentPoint(alignSpec.targetAlignmentPoint,offsets),myPoint=result.getAlignmentPoint(alignSpec.myAlignmentPoint);result.translate(targetPoint[0]-myPoint[0],targetPoint[1]-myPoint[1]);// If an overlapping position was requested, then we are *not* trying out those four zones.
// We just respect constraint, and that's it.
var overlap=result.intersect(target,true);// If we are aligned over our target, we just obey that within any constraint.
// No complex edge alignment attempts to fall back to.
if(overlap){if(constrainTo){result.constrainTo(constrainTo);}resultZone=alignSpec.startZone;}// Aligned to outside of our target, and we need to be constrained
else if(constrainTo&&!constrainTo.contains(result)){var requestedResult=result.clone(),solutions=[],_zone,largestZone;// Any configured anchorPosition becomes invalid now that we're having to move the resulting zone
// to some unpredictable new place where it fits. It will have to be calculated based upon where
// we end up aligning.
calculatedAnchorPosition=null;// Calculate the four constraint zones illustrated above.
// Top
constraintZones[0]=_zone=constrainTo.clone();_zone.bottom=target.y-offsets[1];// Right
constraintZones[1]=_zone=constrainTo.clone();_zone.x=target.right+offsets[0];// Bottom
constraintZones[2]=_zone=constrainTo.clone();_zone.y=target.bottom+offsets[1];// Left
constraintZones[3]=_zone=constrainTo.clone();_zone.right=target.x-offsets[0];// Start from the preferred edge and see if we are able to constrain to within each rectangle
for(var _i2=0;_i2<zoneOrder.length;_i2++){// Revert to incoming dimension for fallback out of axisLock
if(matchDimension&&_i2==2){result[matchDimension]=originalSize;}_zone=constraintZones[resultZone=zoneOrder[_i2].zone];// Perform unconstrained alignment at the calculated alignment for the zone
result=result.alignTo({target:target,offsets:offsets,align:zoneOrder[_i2].align});// If we are able to strictly constrain into this area, then it's one of the possible solutions.
// We choose the solution which result in the shortest translation from the initial position.
if(result.constrainTo(_zone,true)){solutions.push({result:result,zone:resultZone});// If this successful constraint is at the requested alignment, or at a fallback
// alignment which has used min size constraints, then that's the correct solution.
// If there's no size compromising, we have to pick the shortest translation.
if(!largestZone||result.width<me.width||result.height<me.height){result.align=zoneOrder[_i2].align;break;}}// Cache the largest zone we find in case we need the final fallback.
if(!largestZone||_zone.area>largestZone.area){var r=result.clone();// And just move the result clone into the edge zone
switch(resultZone){// Top
case 0:r.moveTo(null,_zone.bottom-r.height);break;// Right
case 1:r.moveTo(_zone.left);break;// Bottom
case 2:r.moveTo(null,_zone.top);break;// Left
case 3:r.moveTo(_zone.right-r.width);break;}largestZone={area:_zone.area,result:r,zone:resultZone};}}// The loop found at least one solution
if(solutions.length){// Multiple fallbacks with no axisLock.
// Use the solution which resulted in the shortest translation distance from the requested alignment.
if(solutions.length>1&&!axisLock){solutions.sort(function(s1,s2){var s1TranslationDistance=Math.sqrt(Math.pow(requestedResult.x-s1.result.x,2)+Math.pow(requestedResult.y-s1.result.y,2)),s2TranslationDistance=Math.sqrt(Math.pow(requestedResult.x-s2.result.x,2)+Math.pow(requestedResult.y-s2.result.y,2));return s1TranslationDistance-s2TranslationDistance;});}// Initial success, or axisLock. Use first successful solution.
result=solutions[0].result;resultZone=solutions[0].zone;}// No solutions found - use the largest rectangle.
else{result=largestZone.result;resultZone=largestZone.zone;// When we are constraining to the viewport, we must still must be constrained,
// even after we've given up making it align *and* constrain.
if(constrainingToViewport){result.constrainTo(constrainTo);}}}else{resultZone=alignSpec.startZone;}result.zone=resultZone;// If they included an anchor, calculate its position along its edge.
// TODO: Handle the edge overlap being less than anchor width.
if(anchorSize){// If we were passed an anchorPosition, and it has remnained valid (meaning the requested
// alignment succeeded with no constraint), then anchorPosition will be set. If not,
// we have to calculate it based upon the aligned edge.
if(!calculatedAnchorPosition){var _calculatedAnchorPosi2;var isLeftOrRight=resultZone&1,start=isLeftOrRight?'y':'x',end=isLeftOrRight?'bottom':'right',startValue=Math.max(target[start],result[start]),endValue=Math.min(target[end],result[end]),anchorStart=startValue+(endValue-startValue)/2-anchorSize[0]/2,anchorEnd=anchorStart+anchorSize[0];if(anchorEnd>result[end]){anchorStart-=anchorEnd-result[end];}if(anchorStart<result[start]){anchorStart+=result[start]-anchorStart;}// Return an anchor property which will have an x or y property and an edge name onto which the
// arrow should be aligned.
calculatedAnchorPosition=(_calculatedAnchorPosi2={},_defineProperty(_calculatedAnchorPosi2,start,anchorStart-result[start]),_defineProperty(_calculatedAnchorPosi2,"edge",edgeNames[(resultZone+2)%4]),_calculatedAnchorPosi2);}result.anchor=calculatedAnchorPosition;}}return result;}/**
     * Returns the `[x, y]` position of the specified anchor point of this Rectangle in <edge><offset> format.
     * for example passing "t50" will return the centre point of the top edge, passing "r0" will return the start
     * position of the right edge (the top right corner).
     *
     * Note that the offset defaults to 50, so "t" means the centre of the top edge.
     * @param {String} alignmentPoint The alignment point to calculate. Must match the RegExp `[trbl]\d*`
     * @param {Number[]} offsets The `[x, y]` offsets to add from the left/right, top/bottom edge.
     */},{key:"getAlignmentPoint",value:function getAlignmentPoint(alignmentPoint){var offsets=arguments.length>1&&arguments[1]!==undefined?arguments[1]:zeroOffsets;var me=this,parts=alignPointRe.exec(alignmentPoint),edge=parts[1].toLowerCase(),offset=Math.min(Math.max(parseInt(parts[2]||50),0),100)/100;switch(edge){case't':return[me.x+me.width*offset,me.y-offsets[1]];case'r':return[me.right+offsets[0],me.y+me.height*offset];case'b':return[me.x+me.width*offset,me.bottom+offsets[1]];case'l':return[me.x-offsets[0],me.y+me.height*offset];case'c':var center=me.center;return[center.x+offsets[0],center.y+offsets[1]];}}/**
     * Highlights this Rectangle using the highlighting effect of {@link Common.helper.DomHelper}
     * on a transient element which encapsulates the region's area.
     */},{key:"highlight",value:function highlight(){var me=this,highlightElement=DomHelper.createElement({parent:document.body,style:"position:absolute;z-index:9999999;pointer-events:none;\n                            left:".concat(me.x,"px;top:").concat(me.y,"px;width:").concat(me.width,"px;height:").concat(me.height,"px")});return DomHelper.highlight(highlightElement).then(function(){return highlightElement.remove();});}},{key:"center",get:function get(){return new Rectangle.Point(this.x+this.width/2,this.y+this.height/2);}/**
     * Get/sets the X coordinate of the Rectangle. Note that this does *not* translate the
     * Rectangle. The requested {@link #property-width} will change.
     * @property {Number}
     */},{key:"x",set:function set(x){var xDelta=x-this._x;this._x=x;this._width-=xDelta;},get:function get(){return this._x;}/**
     * Alias for x. To match DOMRect.
     * @property {Number}
     */},{key:"left",set:function set(x){this.x=x;},get:function get(){return this.x;}/**
     * Alias for y. To match DOMRect.
     * @property {Number}
     */},{key:"top",set:function set(y){this.y=y;},get:function get(){return this.y;}/**
     * Get/sets the Y coordinate of the Rectangle. Note that this does *not* translate the
     * Rectangle. The requested {@link #property-height} will change.
     * @property {Number}
     */},{key:"y",set:function set(y){var yDelta=y-this._y;this._y=y;this._height-=yDelta;},get:function get(){return this._y;}/**
     * Get/sets the width of the Rectangle. Note that the requested {@link #property-right} will change.
     * @property {Number}
     */},{key:"width",set:function set(width){this._width=width;},get:function get(){return this._width;}/**
     * Get/sets the height of the Rectangle. Note that the requested {@link #property-bottom} will change.
     * @property {Number}
     */},{key:"height",set:function set(height){this._height=height;},get:function get(){return this._height;}/**
     * Get/sets the right edge of the Rectangle. Note that the requested {@link #property-width} will change.
     *
     * The right edge value is exclusive of the calculated rectangle width. So x=0 and right=10
     * means a width of 10.
     * @property {Number}
     */},{key:"right",set:function set(right){this._width=right-this._x;},get:function get(){return this._x+this._width;}/**
     * Get/sets the bottom edge of the Rectangle. Note that the requested {@link #property-height} will change.
     *
     * The bottom edge value is exclusive of the calculated rectangle height. So y=0 and bottom=10
     * means a height of 10.
     * @property {Number}
     */},{key:"bottom",set:function set(bottom){this._height=bottom-this._y;},get:function get(){return this._y+this._height;}},{key:"area",get:function get(){return this.width*this.height;}},{key:"minWidth",set:function set(minWidth){var me=this;if(isNaN(minWidth)){me._minWidth=null;}else{me._minWidth=Number(minWidth);me.width=Math.max(me.width,me._minWidth);}},get:function get(){return this._minWidth;}},{key:"minHeight",set:function set(minHeight){var me=this;if(isNaN(minHeight)){me._minHeight=null;}else{me._minHeight=Number(minHeight);me.height=Math.max(me.height,me._minHeight);}},get:function get(){return this._minHeight;}}]);return Rectangle;}();exports.Rectangle=Rectangle;Rectangle._$name='Rectangle';/**
 * @module Common/helper/AjaxHelper
 */ /**
 * Simplifies Ajax requests. Uses fetch & promises.
 *
 * @example
 * AjaxHelper.get('someurl').then(response => {
 *  // process request response here
 * });
 */var AjaxHelper=/*#__PURE__*/function(){function AjaxHelper(){_classCallCheck2(this,AjaxHelper);}_createClass2(AjaxHelper,null,[{key:"get",/**
     * Make a request (using GET) to the specified url.
     * @param {String} url Url
     * @param {Object} [options] The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */value:function get(url,options){return this.fetch(url,options);}/**
     * POST data to the specified URL.
     * @param {String} url The URL
     * @param {String|Object|FormData} payload The data to post. If an object is supplied, it will be stringified
     * @param {Object} options The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */},{key:"post",value:function post(url,payload){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!(payload instanceof FormData)&&!(typeof payload==='string')){payload=JSON.stringify(payload);}return this.fetch(url,Object.assign({method:'POST',body:payload},options));}/**
     * Fetch the specified resource using the `fetch` API.
     * @param {String} url object to fetch
     * @param {Object} options The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.method] The request method, e.g., GET, POST
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */},{key:"fetch",value:function(_fetch){function fetch(_x10){return _fetch.apply(this,arguments);}fetch.toString=function(){return _fetch.toString();};return fetch;}(function(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var controller=new AbortController();options.signal=controller.signal;if(!('credentitals'in options)){options.credentials='include';}if(options.queryParams){var params=Object.entries(options.queryParams);if(params.length){url+='?'+params.map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),param=_ref5[0],value=_ref5[1];return"".concat(param,"=").concat(encodeURIComponent(value));}).join('&');}}// Promise that will be resolved either when network request is finished or when json is parsed
var promise=new Promise(function(resolve,reject){fetch(url,options).then(function(response){if(options.parseJson){response.json().then(function(json){response.parsedJson=json;resolve(response);}).catch(function(error){response.parsedJson=null;response.error=error;reject(response);});}else{resolve(response);}}).catch(function(error){reject(error);});});promise.abort=function(){controller.abort();};return promise;})}]);return AjaxHelper;}();exports.AjaxHelper=AjaxHelper;AjaxHelper._$name='AjaxHelper';/**
 * @module Common/helper/ArrayHelper
 */ /**
 * Helper with useful functions for handling Arrays
 * @internal
 */var ArrayHelper=/*#__PURE__*/function(){function ArrayHelper(){_classCallCheck2(this,ArrayHelper);}_createClass2(ArrayHelper,[{key:"magnitudeCompare",value:function magnitudeCompare(lhs,rhs){return lhs<rhs?-1:lhs>rhs?1:0;}},{key:"lexicalCompare",value:function lexicalCompare(lhs,rhs){lhs=String(lhs);rhs=String(rhs);return lhs<rhs?-1:lhs>rhs?1:0;}/**
     * Similar to Array.prototype.fill(), but constructs a new array with the specified item count and fills it with
     * clones of the supplied item.
     * @param {Number} count Number of entries to create
     * @param {Object|Array} itemOrArray Item or array of items to clone (uses object spread to create shallow clone)
     * @param {Function} [fn] An optional function that is called for each item added, to allow processing
     * @returns {Array} A new populated array
     */}],[{key:"clean",value:function clean(array){return array.reduce(function(res,item){if(item!==null&&item!==undefined&&!(Array.isArray(item)&&item.length===0)&&item!=='')res.push(item);return res;},[]);}/**
     * Remove one or more items from an array
     * @param {Array} array Array to remove from
     * @param {Object} items One or more items to remove
     * @returns {boolean} Returns true if any item was removed
     */},{key:"remove",value:function remove(array){var index,item,removed=false;for(var i=0;i<(arguments.length<=1?0:arguments.length-1);i++){item=i+1<1||arguments.length<=i+1?undefined:arguments[i+1];if((index=array.indexOf(item))!==-1){array.splice(index,1);removed=true;}}return removed;}/*
     * Calculates the insertion index of a passed object into the passed Array according
     * to the passed comparator function. Note that the passed Array *MUST* already be ordered.
     * @param {Object} item The item to calculate the insertion index for.
     * @param {Array} The array into which the item is to be inserted.
     * @param {Function} comparatorFn The comparison function. Must return -1 or 0 or 1.
     * @param {Object} comparatorFn.lhs The left object to compare.
     * @param {Object} comparatorFn.rhs The right object to compare.
     * @param {Number} index The possible correct index to try first before a binary
     * search is instigated.
     */},{key:"findInsertionIndex",value:function findInsertionIndex(item,array){var comparatorFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.lexicalCompare;var index=arguments.length>3?arguments[3]:undefined;var len=array.length;var beforeCheck,afterCheck;if(index<len){beforeCheck=index>0?comparatorFn(array[index-1],item):0;afterCheck=index<len-1?comparatorFn(item,array[index]):0;if(beforeCheck<1&&afterCheck<1){return index;}}return this.binarySearch(array,item,comparatorFn);}/**
     * This method returns the index that a given item would be inserted into the
     * given (sorted) `array`. Note that the given `item` may or may not be in the
     * array. This method will return the index of where the item *should* be.
     *
     * For example:
     *
     *      var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];
     *      var index = ArrayHelper.binarySearch(array, 'E');
     *
     *      console.log('index: ' + index);
     *      // logs "index: 2"
     *
     *      array.splice(index, 0, 'E');
     *
     *      console.log('array : ' + array.join(''));
     *      // logs "array: ADEGKORX"
     *
     * @param {Object[]} array The array to search.
     * @param {Object} item The item that you want to insert into the `array`.
     * @param {Number} [begin=0] The first index in the `array` to consider.
     * @param {Number} [end=array.length] The index that marks the end of the range
     * to consider. The item at this index is *not* considered.
     * @param {Function} [compareFn] The comparison function that matches the sort
     * order of the `array`. The default `compareFn` compares items using less-than
     * and greater-than operators.
     * @return {Number} The index for the given item in the given array based on
     * the passed `compareFn`.
     */},{key:"binarySearch",value:function binarySearch(array,item){var begin=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var end=arguments.length>3&&arguments[3]!==undefined?arguments[3]:array.length;var compareFn=arguments.length>4&&arguments[4]!==undefined?arguments[4]:this.lexicalCompare;var length=array.length;var middle,comparison;if(begin instanceof Function){compareFn=begin;begin=0;}else if(end instanceof Function){compareFn=end;end=length;}--end;while(begin<=end){middle=begin+end>>1;comparison=compareFn(item,array[middle]);if(comparison>=0){begin=middle+1;}else if(comparison<0){end=middle-1;}}return begin;}},{key:"fill",value:function fill(count){var itemOrArray=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var fn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var result=[],items=Array.isArray(itemOrArray)?itemOrArray:[itemOrArray];for(var i=0;i<count;i++){var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=items[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var item=_step.value;// Using object spread here forces us to use more babel plugins and will make
// react_typescript demo very difficult to setup
var processedItem=Object.assign({},item);if(fn){fn(processedItem,i);}result.push(processedItem);}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}return result;}/**
     * Populates an array with the return value from `fn`.
     * @param {Number} count Number of entries to create
     * @param {Function} fn A function that is called `count` times, return value is added to array
     * @param {Number} fn.index Current index in the array
     * @returns {Array} A new populated array
     */},{key:"populate",value:function populate(count,fn){var items=[];for(var i=0;i<count;i++){items.push(fn(i));}return items;}/**
     * Pushes `item` on to the `array` if not already included
     * @param {Array}  array Array to push to
     * @param {Object} item Item to push if not already included
     */},{key:"include",value:function include(array,item){if(!array.includes(item)){array.push(item);}}// Wanted to create an indexer on Stores, based on this. But turns out Proxy cannot be transpiled/polyfill for IE11
// Keeping it for future reference
},{key:"allowNegative",value:function allowNegative(array){// From https://github.com/sindresorhus/negative-array
return new Proxy(array,{get:function get(target,name,receiver){if(typeof name!=='string'){return Reflect.get(target,name,receiver);}var index=Number(name);if(Number.isNaN(index)){return Reflect.get(target,name,receiver);}return target[index<0?target.length+index:index];},set:function set(target,name,value,receiver){if(typeof name!=='string'){return Reflect.set(target,name,value,receiver);}var index=Number(name);if(Number.isNaN(index)){return Reflect.set(target,name,value,receiver);}target[index<0?target.length+index:index]=value;return true;}});}}]);return ArrayHelper;}();exports.ArrayHelper=ArrayHelper;ArrayHelper._$name='ArrayHelper';//TODO: Implement mon
/**
 * @module Common/mixin/Events
 */ // Used to distinguish event names from listener options in addListener object config.
var specialProperties={thisObj:1,detachable:1,once:1,detacher:1,prio:1,args:1,_oldDestructor:1},priorityComparator=function priorityComparator(a,b){return b.prio-a.prio;};/**
 * Mix this into another class to enable event handling.
 *
 * ## Basic usage
 * Listeners can be added either through config:
 *
 * ```javascript
 * let button = new Button({
 *   listeners: {
 *     click: () => {},
 *     press: () => {},
 *     ...
 *   }
 * });
 * ```
 *
 * *NOTE*: Do not reuse listeners config object, use new every time:
 * ```javascript
 * // wrong
 * let config = { click : () => {} }
 * new Button({
 *     listeners : config
 * })
 * new Button({
 *     listeners : config
 * })
 * // right
 * new Button({
 *     listeners : { click : () => {} }
 * })
 * new Button({
 *     listeners : { click : () => {} }
 * })
 * ```
 *
 * Or by calling on()/addListener():
 *
 * ```javascript
 * let button = new Button();
 *
 * button.addListener('press', () => {});
 * // on is an alias for addListener
 * button.on('click', () => {});
 * ```
 *
 * This style also accepts multiple listeners in same way as when using config:
 *
 * ```javascript
 * button.on({
 *   click: () => {},
 *   press: () => {},
 *   ...
 * });
 * ```
 *
 * ## Options
 * ### Once
 * Listeners can be configured to automatically deregister after first trigger by specifing config option `once`:
 *
 * ```javascript
 * button.on({
 *   click: () => {},
 *   once: true
 * });
 * ```
 *
 * ### Priority
 * Specifying priority affects the order in which listeners are called when triggering an event. Higher prios will be
 * called before lower. Default value is 0.
 *
 * ```javascript
 * button.on({
 *   click: this.onClick,
 *   prio: 1
 * });
 * ```
 *
 * ### This reference
 * If desired, you can specify thisObj when configuring listeners. There is no need if you are using arrow functions as
 * listeners, but might be handy in other cases. Of course, you can also use bind to set `this` reference.
 *
 * ```javascript
 * button.on({
 *   click: this.onClick,
 *   thisObj: this
 * });
 *
 * // or
 *
 * button.on({
 *   click: this.onClick.bind(this)
 * });
 * ```
 *
 * ### Detacher
 * A convenient way of unregistering events is to use a detacher, a function returned when adding listeners that you
 * call later to deregister them. As of version 1.0, detachable defaults to true.
 *
 * ```javascript
 * let detacher = button.on({
 *   click: () => {},
 *   press: () => {},
 *   detachable: true
 * });
 *
 * // when you want to detach, for example in destroy()
 * detacher();
 * ```
 *
 * ### Auto detaching
 * When listeners are bound to a class instance using `thisObj`, the `thisObj`'s `doDestroy` method
 * is overridden to remove the listeners before calling the overridden doDestroy.
 *
 * ```javascript
 * class MyClass extends Base {
 *   construct() {
 *     let button = new Button({
 *       listeners: {
 *         click: () => {},
 *         thisObj: this
 *       }
 *     });
 *   }
 *
 *   doDestroy() {
 *     // clean up stuff
 *   }
 * }
 *
 * let myObj = new MyClass();
 * // clean up, also removes listeners
 * myObj.destroy();
 * ```
 *
 * ### On-functions
 * When mixing Events into another class it can be configured to call on-functions when events are triggered.
 * On-functions are functions named 'onEventname', for example 'onClick', 'onPress' declared on the class triggering
 * the event.
 *
 * ```javascript
 * // mix Events in with on-functions activated
 * let button = new Button({
 *   callOnFunctions: true,
 *
 *   onClick: () => {}
 * });
 *
 * // or add a getter in class declaration
 * ```
 *
 * ### Catching all events
 * By specifying a listener for `catchAll` a function can be notified when any event is triggered:
 *
 * ```javascript
 * const button = new Button({
 *    listeners : {
 *        catchAll(event) {
 *            // All events on the button will pass through here
 *        }
 *    }
 * });
 * ```
 *
 * @mixin
 */var Events=function Events(Target){return(/*#__PURE__*/function(_ref6){_inherits2(Events,_ref6);function Events(){_classCallCheck2(this,Events);return _possibleConstructorReturn2(this,_getPrototypeOf2(Events).apply(this,arguments));}_createClass2(Events,[{key:"destroy",//region Events
/**
     * Fires before an object is destroyed.
     * @event beforeDestroy
     * @param {Object} source The Object that is being destroyed.
     */ /**
     * Fires when an object is destroyed.
     * @event destroy
     * @param {Object} source The Object that is being destroyed.
     */ //endregion
//region Config
/**
     * Listeners can be specified in target class config.
     * ```
     * let store = new Store({
     *   listeners: {
     *     load: () => {},
     *     ...
     *   }
     * });
     * ```
     * @config {Object} listeners
     */value:function destroy(){this.trigger('beforeDestroy');_get2(_getPrototypeOf2(Events.prototype),"destroy",this).call(this);}//endregion
//region Init
// TODO: Check, because not sure about using @function constructor here
/**
     * Adds configured listeners
     * @private
     * @function constructor
     */},{key:"construct",value:function construct(){var _get3;for(var _len5=arguments.length,args=new Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}(_get3=_get2(_getPrototypeOf2(Events.prototype),"construct",this)).call.apply(_get3,[this].concat(args));this.processConfiguredListeners();}},{key:"processConfiguredListeners",value:function processConfiguredListeners(){var listeners=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.listeners;var me=this;// make sure main object contains `listeners` property
me.listeners=listeners;// TODO: listeners should be added first, so that any setters which fire or rely on listeners work.
// This may also expose bugs where listeners are fired too early.
if(me.listeners&&!me.defaultListenersInitialized){var ret=me.addListener(me.listeners,me);if(me.listeners.detachable!==false)me.listeners.detacher=ret;me.defaultListenersInitialized=true;}}/**
     * Auto detaches listeners registered from start, if set as detachable
     * @internal
     */},{key:"doDestroy",value:function doDestroy(){var me=this;me.trigger('destroy');if(me.listeners&&me.listeners.detacher){me.listeners.detacher();}me.removeAllListeners();_get2(_getPrototypeOf2(Events.prototype),"doDestroy",this).call(this);}//endregion
//region Listeners
/**
     * Adds an event listener. This method accepts parameters in the following format:
     *
     * ```javascript
     *  {
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      }
     *      prio        : 100           // Higher prio listeners are called before lower
     *  }
     * ```
     *
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     *
     * @param {Object} config An object containing listener definitions.
     * @param {Object} [config.thisObj] The `this` reference for all listeners.
     * (May be overridden if a handler is specified in object form)
     * @param {Boolean} [config.once] Specify as `true` to remove the listener as soon as it is invoked.
     * @param {Object[]} [config.args] An array of arguments to be passed to the handler before the event object.
     * @param {Object} [thisObj] `this` reference for all listeners.
     * @param {Number} [prio] The priority for all listeners; higher priority listeners are caled before lower.
     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners
     */},{key:"addListener",value:function addListener(config,thisObj,arg2){var me=this,events=me.eventListeners||(me.eventListeners={});if(typeof config==='string'){var _me$addListener;// arguments[2] is thisObj if (eventname, handler, thisObj) form called.
// Note that the other side of the if compares to undefined, so this will work.
return me.addListener((_me$addListener={},_defineProperty(_me$addListener,config,thisObj),_defineProperty(_me$addListener,"detachable",thisObj.detachable!==false),_defineProperty(_me$addListener,"thisObj",arg2),_me$addListener));}else{// If the thisObj came from the parameter, ensure the config object has it
// because this is how autoDetaching works.
thisObj=config.thisObj!==undefined?config.thisObj:config.thisObj=thisObj;for(var key in config){if(!specialProperties[key]){var listenerSpec=config[key],listener={fn:_typeof(listenerSpec)==='object'?listenerSpec.fn:listenerSpec,thisObj:listenerSpec.thisObj!==undefined?listenerSpec.thisObj:thisObj,args:listenerSpec.args||config.args,prio:listenerSpec.prio!==undefined?listenerSpec.prio:config.prio!==undefined?config.prio:0,once:listenerSpec.once!==undefined?listenerSpec.once:config.once!==undefined?config.once:false,catchAll:key==='catchAll'},eventName=key.toLowerCase(),_listeners=events[eventName]||(events[eventName]=[]);// Insert listener directly in prio order
_listeners.splice(ArrayHelper.findInsertionIndex(listener,_listeners,priorityComparator,_listeners.length),0,listener);}}if(config.relayAll){me.relayAll(config.relayAll);}// Hook into the thisObj's destruction sequence to remove these listeners.
if(thisObj){me.attachAutoDetacher(config);}if(config.detachable!==false){return function(){return me.removeListener(config);};}}}/**
     * Shorthand for addListener
     * @param config
     * @param [thisObj]
     */},{key:"on",value:function on(){return this.addListener.apply(this,arguments);}/**
     * Shorthand for removeListener
     * @param config
     * @param thisObj
     */},{key:"un",value:function un(){this.removeListener.apply(this,arguments);}/**
     * Removes an event listener. Same API signature as {@link #function-addListener}
     * @param {Object} config Listeners
     * @param {Object} thisObj `this` reference for all listeners
     */},{key:"removeListener",value:function removeListener(config){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:config.thisObj;var me=this;if(typeof config==='string'){me.removeListener(_defineProperty({},config,thisObj),(arguments.length<=2?0:arguments.length-2)>0?arguments.length<=2?undefined:arguments[2]:true);return;}Object.entries(config).forEach(function(_ref7){var _ref8=_slicedToArray(_ref7,2),key=_ref8[0],configListener=_ref8[1];if(specialProperties[key]){return;}var eventName=key.toLowerCase(),listeners=me.eventListeners&&me.eventListeners[eventName];if(listeners){var index=listeners.findIndex(function(listener){return(listener.fn===configListener||listener.fn===configListener.fn)&&(listener.thisObj===thisObj||listener.thisObj===configListener.thisObj||!thisObj);});if(index>=0){listeners.splice(index,1);if(!listeners.length){delete me.eventListeners[eventName];}}}});if(config.thisObj&&!config.thisObj.isDestroyed){me.detachAutoDetacher(config);}}/**
     * Check if any listener is registered for the specified eventName
     * @param {String} eventName
     * @returns {Boolean} `true` if listener is registered, otherwise `false`
     */},{key:"hasListener",value:function hasListener(eventName){return Boolean(this.eventListeners&&this.eventListeners[eventName]);}/**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -> storeAdd
     * ```
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     *
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     * @param {Common.mixin.Events} through Object to relay the events through, needs to mix Events mixin in
     * @param {String} prefix Prefix to add to event name
     * @param {Boolean} [transformCase] Specify false to prevent making first letter of event name uppercase
     */},{key:"relayAll",value:function relayAll(through,prefix){var transformCase=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var me=this;if(!me.relayAllTargets)me.relayAllTargets=[];me.relayAllTargets.push({through:through,prefix:prefix,transformCase:transformCase});}/**
     * Removes all listeners registered to this object
     */},{key:"removeAllListeners",value:function removeAllListeners(){var me=this,listeners=me.eventListeners||(me.eventListeners={});var _loop=function _loop(event){listeners[event].forEach(function(cfg){return me.removeListener(event,cfg);});};for(var event in listeners){_loop(event);}}},{key:"relayEvents",value:function relayEvents(source,eventNames,prefix){var me=this,listenerConfig={detachable:true};function retrigger(eventName){for(var _len6=arguments.length,params=new Array(_len6>1?_len6-1:0),_key6=1;_key6<_len6;_key6++){params[_key6-1]=arguments[_key6];}return me.trigger.apply(me,[(prefix||'')+eventName].concat(params));}eventNames.forEach(function(eventName){listenerConfig[eventName]=function(){for(var _len7=arguments.length,params=new Array(_len7),_key7=0;_key7<_len7;_key7++){params[_key7]=arguments[_key7];}return retrigger.apply(void 0,[eventName].concat(params));};});return source.on(listenerConfig);}/**
     * Internal function used to hook destroy() calls when using thisObj
     * @private
     */},{key:"attachAutoDetacher",value:function attachAutoDetacher(config){var _this5=this;var target=config.thisObj,// If it's a Bryntyum Base subclass, hook doDestroy, otherwise, destroy
destructorName='doDestroy'in target?'doDestroy':'destroy';if(destructorName in target){config._oldDestructor=target[destructorName];target[destructorName]=function(){// Remove listeners first, so that they do not fire during destruction.
// The observable being listened to by the thisObj may already have
// been destroyed in a clean up sequence
if(!_this5.isDestroyed){_this5.removeListener(config);}config._oldDestructor.call(target);};}else{target[destructorName]=function(){_this5.removeListener(config);};}}/**
     * Internal function used restore hooked destroy() calls when using thisObj
     * @private
     */},{key:"detachAutoDetacher",value:function detachAutoDetacher(config){var target=config.thisObj,destructorName='doDestroy'in target?'doDestroy':'destroy';if(config._oldDestructor){target[destructorName]=config._oldDestructor;}}//endregion
//region Promise based workflow
// experimental, used in tests to support async/await workflow
},{key:"await",value:function _await(eventName){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{checkLog:true,resetLog:true};var me=this;return new Promise(function(resolve){var _me$on;// check if previously triggered?
if(options.checkLog&&me._triggered&&me._triggered[eventName]){// resolve immediately, no params though...
resolve();// reset log to be able to await again
if(options.resetLog){me.clearLog(eventName);}}me.on((_me$on={},_defineProperty(_me$on,eventName,function(){// resolve when event is caught
resolve.apply(void 0,arguments);// reset log to be able to await again
if(options.resetLog){me.clearLog(eventName);}}),_defineProperty(_me$on,"prio",-10000),_defineProperty(_me$on,"once",true),_me$on));});}},{key:"clearLog",value:function clearLog(eventName){if(this._triggered){if(eventName){delete this._triggered[eventName];}else{this._triggered={};}}}//endregion
//region Trigger
/**
     * Wraps a function with event triggering. First triggers before[eventName] with the supplied eventObject. If it is
     * not prevented (by returning false) the supplied fn is called with the eventObject as first argument and any
     * optional arguments after that. It then triggers [eventName] with the eventObject (that might have been altered in
     * fn). Finally it returns the return value from the fn.
     * @param {String} eventName Event name, used to trigger 'beforeEventName' and 'eventName'
     * @param {Object} eventObject Passed when triggering events
     * @param {Function} fn Function to call if before is not prevented
     * @param {Array} args Arguments to pass to fn
     * @param {Boolean} quiet Specify true to not trigger events
     * @returns {*} Result returned from calling fn, or false if prevented
     * @internal
     */},{key:"callPreventable",value:function callPreventable(eventName,eventObject,fn){var args=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var quiet=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var me=this;if(!quiet&&me.trigger('before'+StringHelper.capitalizeFirstLetter(eventName),eventObject)===false){return false;}var result=fn.apply(void 0,[eventObject].concat(_toConsumableArray(args)));if(!quiet){me.trigger(eventName,eventObject);}return result;}/**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {String} eventName Event name for which to trigger listeners
     * @param {Object} param Single parameter passed on to listeners, source property will be added to it (this)
     * @param {Boolean} [param.bubbles] Pass as `true` to indicate that the event will bubble up the widget
     * ownership hierarchy. For example up a Menu->parent Menu tree, or a Field->Container tree.
     * @returns {Boolean} Returns false if any listener returned false, otherwise true
     */ // TODO: should returning false from a listener really prevent other listeners from executing?
},{key:"trigger",value:function trigger(eventName,param){var me=this,name=eventName.toLowerCase(),eventsSuspended=me.eventsSuspended,relayAllTargets=me.relayAllTargets,callOnFunctions=me.callOnFunctions;var listeners=me.eventListeners&&me.eventListeners[name],doSlice=true;// log trigger, used by experimental promise support to resolve immediately when needed
if(!me._triggered){me._triggered={};}me._triggered[eventName]=true;if(eventsSuspended){if(eventsSuspended.shouldQueue)eventsSuspended.queue.push(arguments);return true;}// Include catchall listener for all events.
// Do not push the catchAll listeners onto the events own listener array.
if(me.eventListeners&&me.eventListeners.catchall){var _listeners2;(_listeners2=listeners=listeners?listeners.slice():[]).push.apply(_listeners2,_toConsumableArray(me.eventListeners.catchall));// The catchAll listeners must honour their prio settings.
listeners.sort(priorityComparator);doSlice=false;}if(!listeners&&!relayAllTargets&&!callOnFunctions)return true;// default to include source : this in param
if(param){if(!('source'in param)){if(Object.isExtensible(param)){param.source=me;}else{param=Object.setPrototypeOf({source:me},param);}}}else{param={source:me};}// Lowercased event name should be the "type" property in keeping with DOM events.
if(param.type!==name){// Create instance property because "type" is read only
if(param.constructor!==Object){Reflect.defineProperty(param,'type',{get:function get(){return name;}});}else{param.type=name;}}if(callOnFunctions){var fnName='on'+StringHelper.capitalizeFirstLetter(eventName);if(fnName in me){me.callback(me[fnName],me,[param]);// See if the called function was injected into the instance
// masking an implementation in the prototype.
// we must call the class's implementation after the injected one.
// Note: The handler may have resulted in destruction.
if(!me.isDestroyed&&me.hasOwnProperty(fnName)){var myProto=Object.getPrototypeOf(me);if(fnName in myProto){myProto[fnName].call(me,param);// A handler may have resulted in destruction.
if(me.isDestroyed){return;}}}}}if(listeners){var i=0,listener,handler;// Make a flat copy of the listeners to protect against a situation where an event listener
// adds another listener while triggering the event, which we do not want.
// The array may already be a copy if there are catchAll listeners. See above.
if(doSlice){listeners=listeners.slice();}// If any listener resulted in our destruction, abort.
for(i;i<listeners.length&&!me.isDestroyed;i++){listener=listeners[i];var thisObj=listener.thisObj;// Listeners that have thisObj are auto removed when thisObj is destroyed. If thisObj is destroyed from
// a listener we might still end up here, since listeners are sliced and not affected by the removal
if(!thisObj||!thisObj.isDestroyed){if(listener.once){me.removeListener(name,listener);}if(typeof listener.fn==='string'){if(thisObj){handler=thisObj[listener.fn];}// keep looking for the callback in the hierarchy
if(!handler){var result=me.resolveCallback(listener.fn);handler=result.handler;thisObj=result.thisObj;}}else{handler=listener.fn;}// If listener was declared with args, send our param after them
if(listener.args){var _handler;if((_handler=handler).call.apply(_handler,[thisObj||me].concat(_toConsumableArray(listener.args),[param]))===false){return false;}}else{if(handler.call(thisObj||me,param)===false){return false;}}}}}// relay all?
if(relayAllTargets){relayAllTargets.forEach(function(config){var name=eventName;if(config.transformCase)name=StringHelper.capitalizeFirstLetter(name);if(config.prefix)name=config.prefix+name;if(config.through.trigger(name,param)===false)return false;});}// Use DOM standard event property name to indicate that the event
// bubbles up the owner axis.
// False from any handler cancels the bubble.
if(param.bubbles){var owner=me.owner;if(owner){return owner.trigger(eventName,param);}}return true;}/**
     * Prevents events from being triggered until {@link #function-resumeEvents()} is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {Boolean} queue Specify true to queue events triggered while suspended
     */},{key:"suspendEvents",value:function suspendEvents(){var queue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var eventsSuspended=this.eventsSuspended||(this.eventsSuspended={shouldQueue:queue,queue:[],count:0});eventsSuspended.count++;}/**
     * Resume event triggering after a call to {@link #function-suspendEvents()}. If any triggered events were queued they will be triggered.
     * @returns `true` if events have been resumed (multiple calls to suspend require an equal number of resume calls to resume).
     */},{key:"resumeEvents",value:function resumeEvents(){var suspended=this.eventsSuspended;if(suspended){if(--suspended.count===0){this.eventsSuspended=null;if(suspended.shouldQueue){var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=suspended.queue[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var queued=_step2.value;this.trigger.apply(this,_toConsumableArray(queued));}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return!=null){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}}}}return!Boolean(this.eventsSuspended);}//endregion
}]);return Events;}(Target||Base));};/**
 * Singleton that handles switching locale. Locales can be included on page with `<script type="module">` tags or
 * loaded using ajax. When using script tags the first locale loaded is used per default, if another should be used as
 * default specify it on the script tag for the grid (see example below).
 *
 * ```
 * // Using Ecma 6 modules
 * &lt;script type="module" src="./Common/localization/SvSE.js"&gt;
 *
 * // Specify default when using scripts
 * &lt;script src="build/locales/grid-locale-SvSE.js"&gt;
 * &lt;script data-default-locale="En" src="build/grid-all.js"&gt;
 *
 * import LocaleManager from 'Common/localization/LocaleManager.js';
 * LocaleManager.applyLocale('SvSE');
 * ```
 *
 * @demo localization
 */exports.Events=Events;var LocaleManager=/*#__PURE__*/function(_Events){_inherits2(LocaleManager,_Events);function LocaleManager(){_classCallCheck2(this,LocaleManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(LocaleManager).apply(this,arguments));}_createClass2(LocaleManager,[{key:"construct",value:function construct(){var _get4;var me=this;for(var _len8=arguments.length,args=new Array(_len8),_key8=0;_key8<_len8;_key8++){args[_key8]=arguments[_key8];}(_get4=_get2(_getPrototypeOf2(LocaleManager.prototype),"construct",this)).call.apply(_get4,[this].concat(args));// currentScript not working in IE11
// if (document.currentScript && document.currentScript.dataset.defaultLocale) {
//     me.defaultLocaleName = document.currentScript.dataset.defaultLocale;
// }
var scriptTag=document.querySelector('script[data-default-locale]');if(scriptTag){me.defaultLocaleName=scriptTag.dataset.defaultLocale;}if(window.bryntum&&window.bryntum.locales){Object.keys(window.bryntum.locales).forEach(function(localeName){// keeping this check in case some client tries to use an old locale
if(!localeName.startsWith('moment')){var _locale=window.bryntum.locales[localeName];if(_locale.extends){me.extendLocale(_locale.extends,_locale);}else{me.registerLocale(_locale.localeName,{desc:_locale.localeDesc,locale:_locale});}}});if(!me.locale){// English locale is built in, no need to apply it here since it will be applied anyway
if(me.defaultLocaleName!=='En'){// No locale applied, use default or first found
me.applyLocale(me.defaultLocaleName||Object.keys(me.locales)[0]);}}}}},{key:"registerLocale",/**
     * Register a locale to make it available for applying
     * @param name
     * @param config
     */value:function registerLocale(name,config){var me=this,isDefault=me.defaultLocaleName===name,isCurrent=me.locale&&me.locale.localeName===name,isFirst=Object.keys(me.locales).length===0;me.locales[name]=config;// if no default locale specified, use the first one. otherwise apply the default when it is registered
// also reapply if current locale is registered again (first grid, then scheduler etc).
if(isDefault||!me.defaultLocaleName&&(isFirst||isCurrent)){me.internalApplyLocale(config);}}/**
     * Extend an already loaded locale to add additional translations
     * @param name
     * @param config
     */},{key:"extendLocale",value:function extendLocale(name,config){var locale=this.locales[name];if(!locale)return false;Object.keys(config).forEach(function(cls){if(!locale.locale[cls]){locale.locale[cls]=config[cls];}else{Object.assign(locale.locale[cls],config[cls]);}});delete locale.locale.extends;return true;}},{key:"internalApplyLocale",value:function internalApplyLocale(localeConfig){var me=this;me._locale=localeConfig.locale;me.trigger('locale',localeConfig);}/**
     * Apply a locale. Locale must be defined in LocaleManager#locales. If it is not loaded it will be loaded using ajax
     * and then applied.
     * @param {String} name Name of locale to apply (for example En or SvsE)
     * @returns {boolean|Promise}
     */},{key:"applyLocale",value:function applyLocale(name){var forceApply=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var ignoreError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,localeConfig=me.locales[name];if(localeConfig&&localeConfig.locale&&me._locale===localeConfig.locale&&!forceApply){// no need to apply same locale again
return true;}// ignoreError is used in examples where one example might have defined a locale not available in another
if(!localeConfig){if(ignoreError)return true;throw new Error("Locale ".concat(name," not registered"));}function internalApply(){me.internalApplyLocale(localeConfig);}if(!localeConfig.locale){return new Promise(function(resolve,reject){me.loadLocale(localeConfig.path).then(function(response){//const text      = response.substring(response.indexOf('{'), response.lastIndexOf('};') + 1),
//      getLocale = new Function('return ' + text);
response.text().then(function(text){// eslint-disable-next-line no-new-func
var parseLocale=new Function(text);parseLocale();localeConfig.locale=window.bryntum.locales[name];internalApply();resolve(localeConfig);});}).catch(function(response){return reject(response);});});}internalApply();return true;}/**
     * Loads a locale using ajax
     * @private
     * @param {String} path Path to locale file
     * @returns {Promise}
     */},{key:"loadLocale",value:function loadLocale(path){return AjaxHelper.get(path);}},{key:"locales",set:function set(localeConfigs){this._locales=localeConfigs;},get:function get(){return this._locales;}/**
     * Get/set currently used locale. Set a name of a locale to have it applied, or give a locale configuration to
     * have it registered and then applied
     * @property {String|Object}
     */},{key:"locale",set:function set(locale){if(typeof locale==='string'){this.applyLocale(locale);}else{if(!locale.locale){locale={locale:locale,localeName:locale.localeName||'custom'};}this.registerLocale(locale.localeName,locale);this.applyLocale(locale.localeName);}},get:function get(){return this._locale;}}],[{key:"defaultConfig",get:function get(){return{locales:{}};}}]);return LocaleManager;}(Events(Base));var LocaleManagerSingelton=new LocaleManager();/**
 * @module Common/localization/Localizable
 */ /**
 * Mixin that simplifies localization of strings in a class.
 *
 * ```
 * // Get localized string
 * grid.L('sort')
 * ```
 *
 * @mixin
 */exports.LocaleManager=LocaleManagerSingelton;var Localizable=function Localizable(Target){return(/*#__PURE__*/function(_ref9){_inherits2(Localizable,_ref9);function Localizable(){_classCallCheck2(this,Localizable);return _possibleConstructorReturn2(this,_getPrototypeOf2(Localizable).apply(this,arguments));}_createClass2(Localizable,[{key:"construct",value:function construct(){var _get5;var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;// Base class applies configs.
for(var _len9=arguments.length,args=new Array(_len9>1?_len9-1:0),_key9=1;_key9<_len9;_key9++){args[_key9-1]=arguments[_key9];}(_get5=_get2(_getPrototypeOf2(Localizable.prototype),"construct",this)).call.apply(_get5,[this,config].concat(args));LocaleManagerSingelton.on('locale',me.updateLocalization,me);me.updateLocalization();}},{key:"updateLocalization",value:function updateLocalization(){var me=this;me.localizableProperties&&me.localizableProperties.forEach(function(name){// No need to translate properties which are not defined
if(me[name]===undefined)return;me.originalLocales=me.originalLocales||{};// Need to save original values since they will be overridden by localizable equivalents
me.originalLocales[name]=me.originalLocales[name]||me[name];// Doing localization from the original values
if(me.originalLocales[name]){me[name]=Localizable.L.call(me,me.originalLocales[name]);}});}/**
     * Get localized string, returns value of `text` if no localized string found
     * @param {String} text String key
     * @param {Object} [templateData] Data to supply to template if localized string is one
     * @returns {String}
     */},{key:"L",/**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {String} text String key
     * @param {Object} [templateData] Data to supply to template if localized string is one
     * @returns {String}
     * @category Misc
     * @example
     * button.text = grid.L('group');
     */value:function L(text,templateData){return Localizable.L(text,templateData,this.constructor);}/**
     * Get the global LocaleManager
     * @returns {Common.localization.LocaleManager}
     * @category Misc
     */},{key:"localeClass",get:function get(){// Trying to extract localeClass from a parent widget. null by default
return this._localeClass||this.parent&&this.parent.localeClass||null;},set:function set(key){this._localeClass=key;}},{key:"localeManager",get:function get(){return LocaleManagerSingelton;}}],[{key:"parseText",// In case it's wrapped in 'L{text}'
value:function parseText(text){var match=this.inTextLocaleRegExp.exec(text);return match?match[1]:text;}},{key:"L",value:function L(text,templateData){var current=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.localeClass||this;if(LocaleManagerSingelton.locale){// traverse prototypes to find localization
while(current){var name=current.$name||current.name,localeClass=LocaleManagerSingelton.locale[name],localeText=localeClass&&localeClass[Localizable.parseText(text)];if(localeText){return typeof localeText==='function'&&templateData!=null?localeText(templateData):localeText;}current=Object.getPrototypeOf(current);}}return text;}},{key:"defaultConfig",get:function get(){return{localeClass:null,localizableProperties:[]};}},{key:"inTextLocaleRegExp",get:function get(){return /L\{([^}]+)\}/g;}}]);return Localizable;}(Target||Base));};/*
Not ported:
-----------
Week of Year w 1 2 ... 52 53
wo 1st 2nd ... 52nd 53rd
ww 01 02 ... 52 53
Week Year gg 70 71 ... 29 30
gggg 1970 1971 ... 2029 2030
Week Year (ISO) GG 70 71 ... 29 30
GGGG 1970 1971 ... 2029 2030
Time Zone z or zz EST CST ... MST PST
Note: as of 1.6.0, the z/zz format tokens have been deprecated from plain moment objects. Read more about it here. However, they do work if you are using a specific time zone with the moment-timezone addon.
Z -07:00 -06:00 ... +06:00 +07:00
ZZ -0700 -0600 ... +0600 +0700
Unix Timestamp X 1360013296
Unix Millisecond Timestamp x 1360013296123
*/exports.Localizable=Localizable;var enOrdinalSuffix=function enOrdinalSuffix(number){return number+({'1':'st','2':'nd','3':'rd'}[number[number.length-1]]||'th');};// Left-to-right unicode mark
// https://www.codetable.net/decimal/8206
var LTRSymbolRegexp=new RegExp("\u200E");// These vars are set when changing locale
var locale='en-US',ordinalSuffix=enOrdinalSuffix,// Used to cache used formats, to not have to parse format string each time
formatCache={},intlFormatterCache={},parserCache={};function useIntlFormat(name,options,date){var formatter=intlFormatterCache[name]||(intlFormatterCache[name]=new Intl.DateTimeFormat(locale,options));var result=formatter.format(date);// IE11 inserts direction control characters to the start of the string
// This breaks substring(0, 2). Skipping first character in the row for I
// https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results
if(BrowserHelper.isIE11){result=result.replace(LTRSymbolRegexp,'');}return result;}var MS_PER_DAY=864e5,MS_PER_WEEK=MS_PER_DAY*7,defaultFormat='YYYY-MM-DDTHH:mm:ss.SSSZ',formats={// 1, 2, ... 11, 12
'M':function M(date){return date.getMonth()+1;},//date.toLocaleDateString(locale, { month : 'numeric' }),
// 1st, 2nd, 3rd, 4th, ... 11th, 12th
'Mo':function Mo(date){return ordinalSuffix(formats['M'](date).toString());},// 01, 02, ...
'MM':function MM(date){return(date.getMonth()+1).toString().padStart(2,'0');},//date.toLocaleDateString(locale, { month : '2-digit' }),
// Jan, Feb, ...
'MMM':function MMM(date){return useIntlFormat('MMM',{month:'short'},date);},// January, February, ...
'MMMM':function MMMM(date){return useIntlFormat('MMMM',{month:'long'},date);},// 1, 2, ...
'Q':function Q(date){return Math.ceil((date.getMonth()+1)/4);},// 1st, 2nd, ...
'Qo':function Qo(date){return ordinalSuffix(formats['Q'](date).toString());},// 1, 2, ...
'D':function D(date){return date.getDate();},//date.toLocaleDateString(locale, { day : 'numeric' }),
// 1st, 2nd, ...
'Do':function Do(date){return ordinalSuffix(formats['D'](date).toString());},// 01, 02, ...
'DD':function DD(date){return date.getDate().toString().padStart(2,'0');},//date.toLocaleDateString(locale, { day : '2-digit' }),
// 1, 2, ..., 365, 365
'DDD':function DDD(date){return Math.ceil((new Date(date.getFullYear(),date.getMonth(),date.getDate(),12,0,0)-new Date(date.getFullYear(),0,0,12,0,0))/MS_PER_DAY);},// 1st, 2nd, ...
'DDDo':function DDDo(date){return ordinalSuffix(formats['DDD'](date).toString());},// 001, 002, ...
'DDDD':function DDDD(date){return formats['DDD'](date).toString().padStart(3,'0');},// 0, 1, ..., 6
'd':function d(date){return date.getDay();},// 0th, 1st, ...
'do':function _do(date){return ordinalSuffix(date.getDay().toString());},// Su, Mo, ...
'dd':function dd(date){return formats['ddd'](date).substring(0,2);},// Sun, Mon, ...
'ddd':function ddd(date){return useIntlFormat('ddd',{weekday:'short'},date);},// Sunday, Monday, ...
'dddd':function dddd(date){return useIntlFormat('dddd',{weekday:'long'},date);},'e':function e(date){return date.getDay();},'E':function E(date){return date.getDay()+1;},// ISO week, 1, 2, ...
'W':function W(date){// Adapted from https://www.epochconverter.com/weeknumbers
var target=new Date(date.valueOf());target.setDate(target.getDate()-(date.getDay()+6)%7+3);var firstThursday=target.valueOf();target.setMonth(0,1);if(target.getDay()!==4){target.setMonth(0,1+(4-target.getDay()+7)%7);}return 1+Math.ceil((firstThursday-target)/MS_PER_WEEK);},'Wo':function Wo(date){return ordinalSuffix(formats['W'](date).toString());},'WW':function WW(date){return formats['W'](date).toString().padStart(2,'0');},// 1979, 2018
'Y':function Y(date){return date.getFullYear();},//date.toLocaleDateString(locale, { year : 'numeric' }),
// 79, 18
'YY':function YY(date){return date.getFullYear()%100;},//date.toLocaleDateString(locale, { year : '2-digit' }),
// 1979, 2018
'YYYY':function YYYY(date){return date.getFullYear();},//date.toLocaleDateString(locale, { year : 'numeric' }),
// AM, PM
'A':function A(date){return date.getHours()<12?'AM':'PM';},'a':function a(date){return date.getHours()<12?'am':'pm';},// 0, 1, ... 23
'H':function H(date){return date.getHours();},// 00, 01, ...
'HH':function HH(date){return date.getHours().toString().padStart(2,'0');},// 1, 2, ... 12
'h':function h(date){return date.getHours()%12||12;},// 01, 02, ...
'hh':function hh(date){return formats['h'](date).toString().padStart(2,'0');},// 1, 2, ... 24
'k':function k(date){return date.getHours()+1;},// 01, 02, ...
'kk':function kk(date){return formats['k'](date).toString().padStart(2,'0');},// Locale specific (0 -> 24 or 1 AM -> 12 PM)
'K':function K(date){return useIntlFormat('K',{hour:'numeric'},date);},// Locale specific (00 -> 24 or 1 AM -> 12 PM)
'KK':function KK(date){return useIntlFormat('KK',{hour:'2-digit'},date);},// 0, 1, ... 59
'm':function m(date){return date.getMinutes();},//date.toLocaleTimeString(locale, { minute : 'numeric' }),
// 00, 01, ...
'mm':function mm(date){return formats['m'](date).toString().padStart(2,'0');},// 0, 1, ... 59
's':function s(date){return date.getSeconds();},//date.toLocaleTimeString(locale, { second : 'numeric' }),
// 00, 01, ...
'ss':function ss(date){return formats['s'](date).toString().padStart(2,'0');},// 0, 1, ... 9
'S':function S(date){return date.getMilliseconds().toString().substr(0,1);},// 00, 01, ... 99
'SS':function SS(date){return date.getMilliseconds().toString().substr(0,2).padEnd(2,'0');},// 000, 001, ... 999
'SSS':function SSS(date){return date.getMilliseconds().toString().substr(0,3).padEnd(3,'0');},'z':function z(date){return useIntlFormat('z',{timeZoneName:'short'},date);},'zz':function zz(date){return useIntlFormat('zz',{timeZoneName:'long'},date);},'LT':function LT(date){return useIntlFormat('LT',{hour:'2-digit',minute:'2-digit'},date);},'LTS':function LTS(date){return useIntlFormat('LTS',{hour:'2-digit',minute:'2-digit',second:'2-digit'},date);},'L':function L(date){return useIntlFormat('L',{year:'numeric',month:'2-digit',day:'2-digit'},date);},'l':function l(date){return useIntlFormat('l',{year:'numeric',month:'numeric',day:'numeric'},date);},'LL':function LL(date){return useIntlFormat('LL',{year:'numeric',month:'long',day:'numeric'},date);},'ll':function ll(date){return useIntlFormat('ll',{year:'numeric',month:'short',day:'numeric'},date);},'LLL':function LLL(date){return useIntlFormat('LLL',{year:'numeric',month:'long',day:'numeric',hour:'numeric',minute:'2-digit'},date);},'lll':function lll(date){return useIntlFormat('lll',{year:'numeric',month:'short',day:'numeric',hour:'numeric',minute:'2-digit'},date);},'LLLL':function LLLL(date){return useIntlFormat('LLLL',{year:'numeric',month:'long',day:'numeric',hour:'numeric',minute:'2-digit',weekday:'long'},date);},'llll':function llll(date){return useIntlFormat('llll',{year:'numeric',month:'short',day:'numeric',hour:'numeric',minute:'2-digit',weekday:'short'},date);}},// Want longest keys first, to not stop match at L of LTS etc.
formatKeys=Object.keys(formats).sort(function(a,b){return b.length-a.length;}),formatRegexp="^(?:".concat(formatKeys.join('|'),")"),// return empty object, meaning value cannot be processed to a valuable date part
emptyFn=function emptyFn(){return{};},parsers={'YYYY':function YYYY(str){return{year:parseInt(str)};},'Y':function Y(str){return{year:parseInt(str)};},'YY':function YY(str){var year=parseInt(str);return{year:year+(year>1968?1900:2000)};},'MM':function MM(str){return{month:parseInt(str)-1};},'Mo':function Mo(str){return{month:parseInt(str)-1};},'DD':function DD(str){return{date:parseInt(str)};},'M':function M(str){return{month:parseInt(str)-1};},'D':function D(str){return{date:parseInt(str)};},'Do':function Do(str){return{date:parseInt(str)};},'DDD':emptyFn,'MMM':emptyFn,'MMMM':emptyFn,'DDDo':emptyFn,'DDDD':emptyFn,'d':emptyFn,'do':emptyFn,'dd':emptyFn,'ddd':emptyFn,'dddd':emptyFn,'Q':emptyFn,'Qo':emptyFn,'W':emptyFn,'Wo':emptyFn,'WW':emptyFn,'e':emptyFn,'E':emptyFn,'HH':function HH(str){return{hours:parseInt(str)};},'mm':function mm(str){return{minutes:parseInt(str)};},'H':function H(str){return{hours:parseInt(str)};},'m':function m(str){return{minutes:parseInt(str)};},'ss':function ss(str){return{seconds:parseInt(str)};},'s':function s(str){return{seconds:parseInt(str)};},'S':function S(str){return{milliseconds:parseInt(str)};},'SS':function SS(str){return{milliseconds:parseInt(str)};},'SSS':function SSS(str){return{milliseconds:parseInt(str)};},'A':function A(str){return{amPm:str.toLowerCase()};},'a':function a(str){return{amPm:str.toLowerCase()};},'L':'MM/DD/YYYY','LT':'HH:mm A',// Can either be Z (=UTC, 0) or +-HH:MM
'Z':function Z(str){if(!str){return{};}var timeZone=0;// If string being parsed is more "detailed" than the format specified we can have more chars left,
// thus check the last (for example HH:mmZ with input HH:mm:ssZ -> ssZ)
if(!str.endsWith('Z')){var matches=timeZoneRegEx.exec(str);// If timezone regexp matches, sting has time zone offset like '+02:00'
if(matches){var sign=matches[1]==='+'?1:-1,hours=parseInt(matches[2])||0,minutes=parseInt(matches[3])||0;timeZone=sign*(hours*60+minutes);}// otherwise we just return current time zone, because there's a Z key in the input
else{timeZone=-1*new Date().getTimezoneOffset();}}return{timeZone:timeZone};}},parserKeys=Object.keys(parsers).sort(function(a,b){return b.length-a.length;}),parserRegexp=new RegExp("(".concat(parserKeys.join('|'),")")),// Following regexp includes all formats that should be handled by Date class
localeStrRegExp=new RegExp('(l|LL|ll|LLL|lll|LLLL|llll)'),//    ISODateRegExp             = new RegExp('YYYY-MM-DD[T ]HH:mm:ss(.s+)?Z'),
// Some validConversions are negative to show that it's not an exact conversion, just an estimate.
validConversions={// The units below assume:
// 30 days in a month, 91 days for a quarter and 365 for a year
// 52 weeks per year, 4 per month, 13 per quarter
'year':{year:1,quarter:4,month:12,week:52,day:365,hour:24*365,minute:1440*365,second:86400*365,millisecond:86400000*365},'quarter':{year:1/4,quarter:1,month:3,week:4,day:91,hour:24*91,minute:1440*91,second:86400*91,millisecond:86400000*91},'month':{year:1/12,quarter:1/3,month:1,week:4,day:-30,hour:-24*30,minute:-1440*30,second:-86400*30,millisecond:-86400000*30},'week':{year:-1/52,quarter:-1/13,month:-1/4,day:7,hour:168,minute:10080,second:604800,millisecond:604800000},'day':{year:-1/365,quarter:-1/91,month:-1/30,week:1/7,hour:24,minute:1440,second:86400,millisecond:86400000},'hour':{year:-1/(365*24),quarter:-1/(91*24),month:-1/(30*24),week:1/168,day:1/24,minute:60,second:3600,millisecond:3600000},'minute':{year:-1/(365*1440),quarter:-1/(91*1440),month:-1/(30*1440),week:1/10080,day:1/1440,hour:1/60,second:60,millisecond:60000},'second':{year:-1/(365*86400),quarter:-1/(91*86400),month:-1/(30*86400),week:1/604800,day:1/86400,hour:1/3600,minute:1/60,millisecond:1000},'millisecond':{year:-1/(365*86400000),quarter:-1/(91*86400000),month:-1/(30*86400000),week:1/604800000,day:1/86400000,hour:1/3600000,minute:1/60000,second:1/1000}},normalizedUnits={'ms':'millisecond','milliseconds':'millisecond','s':'second','seconds':'second','m':'minute','minutes':'minute','h':'hour','hours':'hour','d':'day','days':'day','w':'week','weeks':'week','M':'month','months':'month','q':'quarter','quarters':'quarter','y':'year','years':'year'},withDecimalsDurationRegex=/^\s*([-+]?\d+(?:[.,]\d*)?|[-+]?(?:[.,]\d+))\s*([^\s]+)?/i,noDecimalsDurationRegex=/^\s*([-+]?\d+)(?![.,])\s*([^\s]+)?/i,canonicalUnitNames=['millisecond','second','minute','hour','day','week','month','quarter','year'],deltaUnits=['year','month','week','day','hour','minute','second','millisecond'],// Used when creating a date from an object, to fill in any blanks
dateProperties=['milliseconds','seconds','minutes','hours','date','month','year'],// TODO: Should we provide special number parsing?
parseNumber=function parseNumber(n){var result=parseFloat(n);return isNaN(result)?null:result;},timeZoneRegEx=/([+-])(\d\d):*(\d\d)*$/,unitMagnitudes={millisecond:0,second:1,minute:2,hour:3,day:4,week:5,month:6,quarter:7,year:8};/**
 * @module Common/helper/DateHelper
 */ /**
 * Helps with date manipulation, comparison, parsing, formatting etc.
 *
 * ## Parsing strings
 * Use DateHelper.parse() to parse strings into dates. It accepts a date string and a format specifier.
 * The format specifier is string built up using the following tokens:
 *
 * | Unit        | Token | Description                |
 * |-------------|-------|----------------------------|
 * | Year        | YYYY  | 2018                       |
 * |             | YY    | < 68 -> 2000, > 68 -> 1900 |
 * | Month       | MM    | 01 - 12                    |
 * | Date        | DD    | 01 - 31                    |
 * | Hour        | HH    | 00 - 23 or 1 - 12          |
 * | Minute      | mm    | 00 - 59                    |
 * | Second      | ss    | 00 - 59                    |
 * | Millisecond | S     | 0 - 9                      |
 * |             | SS    | 00 - 99                    |
 * |             | SSS   | 000 - 999                  |
 * | AM/PM       | A     | AM or PM                   |
 * |             | a     | am or pm                   |
 * | TimeZone    | Z     | Z for UTC or +-HH:mm       |
 * | Predefined  | L     | Long date, MM/DD/YYYY      |
 * |             | LT    | Long time, HH:mm A         |
 *
 * For example:
 * ```
 * DateHelper.parse('2018-11-06', 'YYYY-MM-DD');
 * DateHelper.parse('13:14', 'HH:mm');
 * DateHelper.parse('6/11/18', 'DD/MM/YY');
 * ```
 *
 * ## Formatting dates
 * Use DateHelper.format() to create a string from a date using a format specifier. The format specifier is similar to
 * that used when parsing strings. It can use the following tokens (input used for output below is
 * `new Date(2018,8,9,18,7,8,145)`):
 *
 * | Unit                  | Token | Description & output                  |
 * |-----------------------|-------|---------------------------------------|
 * | Year                  | YYYY  | 2018                                  |
 * |                       | YY    | 18                                    |
 * |                       | Y     | 2018                                  |
 * | Quarter               | Q     | 3                                     |
 * |                       | Qo    | 3rd                                   |
 * | Month                 | MMMM  | September                             |
 * |                       | MMM   | Sep                                   |
 * |                       | MM    | 09                                    |
 * |                       | Mo    | 9th                                   |
 * |                       | M     | 9                                     |
 * | Week (iso)            | WW    | 36 (2 digit)                          |
 * |                       | Wo    | 36th                                  |
 * |                       | W     | 36                                    |
 * | Date                  | DDDD  | Day of year, 3 digits                 |
 * |                       | DDDo  | Day of year, ordinal                  |
 * |                       | DDD   | Day of year                           |
 * |                       | DD    | 09                                    |
 * |                       | Do    | 9th                                   |
 * |                       | D     | 9                                     |
 * | Weekday               | dddd  | Sunday                                |
 * |                       | ddd   | Sun                                   |
 * |                       | dd    | Su                                    |
 * |                       | do    | 0th                                   |
 * |                       | d     | 0                                     |
 * | Hour                  | HH    | 18 (00 - 23)                          |
 * |                       | H     | 18 (0 - 23)                           |
 * |                       | hh    | 06 (00 - 12)                          |
 * |                       | h     | 6 (0 - 12)                            |
 * |                       | KK    | 19 (01 - 24)                          |
 * |                       | K     | 19 (1 - 24)                           |
 * |                       | kk    | 06 or 18, locale determines           |
 * |                       | k     | 6 or 18, locale determines            |
 * | Minute                | mm    | 07                                    |
 * |                       | m     | 7                                     |
 * | Second                | ss    | 08                                    |
 * |                       | s     | 8                                     |
 * | Millisecond           | S     | 1                                     |
 * |                       | SS    | 14                                    |
 * |                       | SSS   | 145                                   |
 * | AM/PM                 | A     | AM or PM                              |
 * |                       | a     | am or pm                              |
 * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |
 * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |
 * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |
 * |                       | l     | Y: n, M : n, D : n                    |
 * |                       | LL    | Y: n, M : long (l), D : n             |
 * |                       | ll    | Y: n, M : short (s), D : n            |
 * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |
 * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |
 * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |
 * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |
 *
 * For example:
 *
 * ```
 * DateHelper.format(new Date(2018,10,6), 'YYYY-MM-DD'); // 2018-11-06
 * DateHelper.format(new Date(2018,10,6), 'M/D/YY'); // 11/6/18
 * ```
 *
 * Arbitrary text can be embedded in the format string by wrapping it with {}:
 *
 * ```
 * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!
 * ```
 *
 * ## Unit names
 * Many DateHelper functions (for example add, as, set) accepts a unit among their params. The following units are
 * available:
 *
 * | Unit        | Aliases                       |
 * |-------------|-------------------------------|
 * | millisecond | millisecond, milliseconds, ms |
 * | second      | second, seconds, s            |
 * | minute      | minute, minutes, m            |
 * | hour        | hour, hours, h                |
 * | day         | day, days, d                  |
 * | week        | week, weeks, w                |
 * | month       | month, months, M              |
 * | quarter     | quarter, quarters, q          |
 * | year        | year, years, y                |
 *
 * For example:
 * ```
 * DateHelper.add(date, 2, 'days');
 * DateHelper.as('hour', 7200, 'seconds');
 * ```
 */var DateHelper=/*#__PURE__*/function(_Localizable){_inherits2(DateHelper,_Localizable);function DateHelper(){_classCallCheck2(this,DateHelper);return _possibleConstructorReturn2(this,_getPrototypeOf2(DateHelper).apply(this,arguments));}_createClass2(DateHelper,[{key:"formatContainsHourInfo",value:function formatContainsHourInfo(format){return format.match(/[Hhk]/);}/**
     * Returns true for 24 hour format.
     * @param {String} format Date format
     * @returns {Boolean}
     * @category Parse & format
     */}],[{key:"buildParser",//region Parse & format
value:function buildParser(format){var _this6=this;// Split input format by regexp, which includes predefined patterns. Normally format would have some
// splitters, like 'YYYY-MM-DD' or 'D/M YYYY' so output will contain matched patterns as well as splitters
// which would serve as anchors. E.g. provided format is 'D/M!YYYY' and input is `11/6!2019` algorithm would work like:
// 1. split format by regexp                // ['', 'D', '/', 'M', '!', 'YYYY', '']
// 2. find splitters                        // ['/', '!']
// 3. split input by seps, step by step     // ['11', ['6', ['2019']]]
//
// Inputs like 'YYYYY' (YYYY + Y) are kinda invalid, need to figure smth when
// we encounter them.
var parts=format.split(parserRegexp),parser=[];// if length of the parts array is 1 - there are no regexps in the input string. thus - no parsers
// do same if there are patterns matching locale strings (l, ll, LLLL etc.)
// returning empty array to use new Date() as parser
if(parts.length===1||localeStrRegExp.test(format)){return[];}else{parts.reduce(function(prev,curr,index,array){// ignore first and last empty string
if(index!==0||curr!==''){// if current element matches parser regexp store it as a parser
if(parserRegexp.test(curr)){var localeParsers=_this6.L('parsers')!=='parsers'&&_this6.L('parsers')||{},fn=localeParsers[curr]||parsers[curr];// Z should be last element in the string that matches regexp. Last array element is always either
// an empty string (if format ends with Z) or splitter (everything that doesn't match regexp after Z)
// If there is a pattern after Z, then Z index will be lower than length - 2
if(curr==='Z'&&index<array.length-2){throw new Error("Invalid format ".concat(format," TimeZone (Z) must be last token"));}// If fn is a string, we found an alias (L, LLL, l etc.).
// Need to build parsers from mapped format and merge with existing
if(typeof fn==='string'){// we are going to merge nested parsers with current, some cleanup required:
// 1. last element is no longer last
// 2. need to pass last parser to the next step
var nestedParsers=DateHelper.buildParser(fn),lastItem=nestedParsers.pop();delete lastItem.last;// elevate nested parsers
parser.push.apply(parser,_toConsumableArray(nestedParsers));prev=lastItem;}else{prev.pattern=curr;prev.fn=parsers[curr];}}// if it doesn't match - we've found a splitter
else{prev.splitter=curr;parser.push(prev);prev={};}}else if(prev.hasOwnProperty('pattern')){parser.push(prev);}return prev;},{});}parser[parser.length-1].last=true;return parser;}/**
     * Returns a date created from the supplied string using the specified format. Will try to create even if format
     * is left out, by first using the default format (YYYY-MM-DDTHH:mm:ssZ) and then using `new Date(dateString)`.
     * Supported tokens:
     *
     * | Unit        | Token | Description                |
     * |-------------|-------|----------------------------|
     * | Year        | YYYY  | 2018                       |
     * |             | YY    | < 68 -> 2000, > 68 -> 1900 |
     * | Month       | MM    | 01 - 12                    |
     * | Date        | DD    | 01 - 31                    |
     * | Hour        | HH    | 00 - 23 or 1 - 12          |
     * | Minute      | mm    | 00 - 59                    |
     * | Second      | ss    | 00 - 59                    |
     * | Millisecond | S     | 0 - 9                      |
     * |             | SS    | 00 - 99                    |
     * |             | SSS   | 000 - 999                  |
     * | AM/PM       | A     | AM or PM                   |
     * |             | a     | am or pm                   |
     * | TimeZone    | Z     | Z for UTC or +-HH:mm       |
     * | Predefined  | L     | Long date, MM/DD/YYYY      |
     * |             | LT    | Long time, HH:mm A         |
     *
     * Predefined formats and functions used to parse tokens can be localized, see for example the swedish locale SvSE.js
     *
     * @param {String} dateString Date string
     * @param {String} format Date format
     * @returns {Date}
     * @category Parse & format
     */},{key:"parse",value:function parse(dateString){var format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultFormat;if(!dateString){return null;}if(dateString instanceof Date){return dateString;}// // For ISO 8601 native is faster, but not very forgiving
// if (format === defaultFormat) {
//     const dt = new Date(dateString);
//     if (!isNaN(dt)) {
//         return dt;
//     }
// }
var config={year:0,month:0,date:0,hours:0,minutes:0,seconds:0,milliseconds:0},parser=parserCache[format],result;if(!parser){parser=parserCache[format]=DateHelper.buildParser(format);}// Each parser knows its pattern and splitter. It looks for splitter in the
// input string, takes first substring and tries to process it. Remaining string
// is passed to the next parser.
parser.reduce(function(dateString,parser){if(parser.last){Object.assign(config,parser.fn(dateString));}else{var splitAt;// ISO 8601 says that T symbol can be replaced with a space
if(parser.splitter==='T'&&dateString.indexOf('T')===-1){splitAt=dateString.indexOf(' ');}else{splitAt=dateString.indexOf(parser.splitter);}var part,rest;// If splitter is not found in the current string we may be dealing with
// 1. partial input - in that case we just feed all string to current parser and move on
// 2. time zone (ssZ - splitter is empty string), see comment below
if(splitAt===-1||parser.splitter===''){// NOTE: parantheses are required here as + and - signs hold valuable information
// with parantheses we get array like ['00','+','01:00'], omitting them we won't get
// regexp match in result, loosing information
var chunks=dateString.split(/([Z\-+])/);// If splitter is not found in the string, we may be dealing with string that contains info about TZ.
// For instance, if format contains Z as last arg which is not separated (normally it is not indeed),
// like `YYYY-MM-DD HH:mm:ssZ`, then second to last parser will have string that it cannot just parse, like
// '2010-01-01 10:00:00'        -> '00'
// '2010-01-01 10:00:00Z'       -> '00Z'
// '2010-01-01 10:00:00-01'     -> '00-01'
// '2010-01-01 10:00:00+01:30'  -> '00+01:30'
// this cannot be processed by date parsers, so we need to process that additionally. So we
// split string by symbols that can be found around timezone info: Z,-,+
if(chunks.length===1){part=dateString;rest='';}else{part=chunks[0];rest="".concat(chunks[1]).concat(chunks[2]);}}else{part=dateString.substring(0,splitAt)||dateString;rest=dateString.substring(splitAt+parser.splitter.length);}parser.fn&&Object.assign(config,parser.fn(part));return rest;}},dateString);var date=this.create(config);if(date){result=date;}else{// Last resort, try if native passing can do it
result=new Date(dateString);}return result;}/**
     * Creates a date from a date definition object. The object can have the following properties:
     * - year
     * - month
     * - date (day in month)
     * - hours
     * - minutes
     * - seconds
     * - milliseconds
     * - amPm : 'am' or 'pm', implies 12 hour clock
     * - timeZone : offset from UTC in minutes
     * @param {Object} definition
     * @returns {Date}
     * @category Parse & format
     */},{key:"create",value:function create(definition){// Shallow clone to not alter input
var def=Object.assign({},definition);// Not much validation yet, only considered invalid if all properties are 0
var invalid=true,useUTC=false;// Fill in blanks and replace any NaN with 0
dateProperties.forEach(function(property){if(!(property in def)||isNaN(def[property])){def[property]=0;}if(def[property]>0)invalid=false;});if(def.amPm==='pm'){def.hours=def.hours%12+12;}if('timeZone'in def){useUTC=true;def.minutes-=def.timeZone;}if(invalid){return null;}var args=[def.year,def.month,def.date,def.hours,def.minutes,def.seconds,def.milliseconds];return useUTC?new Date(Date.UTC.apply(Date,args)):_construct(Date,args);}/**
     * Converts a date to string with the specified format. Formats heavily inspired by https://momentjs.com.
     * Available formats (input used for output below is `new Date(2018,8,9,18,7,8,145)`):
     *
     * | Unit                  | Token | Description & output                  |
     * |-----------------------|-------|---------------------------------------|
     * | Year                  | YYYY  | 2018                                  |
     * |                       | YY    | 18                                    |
     * |                       | Y     | 2018                                  |
     * | Quarter               | Q     | 3                                     |
     * |                       | Qo    | 3rd                                   |
     * | Month                 | MMMM  | September                             |
     * |                       | MMM   | Sep                                   |
     * |                       | MM    | 09                                    |
     * |                       | Mo    | 9th                                   |
     * |                       | M     | 9                                     |
     * | Week (iso)            | WW    | 36 (2 digit)                          |
     * |                       | Wo    | 36th                                  |
     * |                       | W     | 36                                    |
     * | Date                  | DDDD  | Day of year, 3 digits                 |
     * |                       | DDDo  | Day of year, ordinal                  |
     * |                       | DDD   | Day of year                           |
     * |                       | DD    | 09                                    |
     * |                       | Do    | 9th                                   |
     * |                       | D     | 9                                     |
     * | Weekday               | dddd  | Sunday                                |
     * |                       | ddd   | Sun                                   |
     * |                       | dd    | Su                                    |
     * |                       | do    | 0th                                   |
     * |                       | d     | 0                                     |
     * | Hour                  | HH    | 18 (00 - 23)                          |
     * |                       | H     | 18 (0 - 23)                           |
     * |                       | hh    | 06 (00 - 12)                          |
     * |                       | h     | 6 (0 - 12)                            |
     * |                       | KK    | 19 (01 - 24)                          |
     * |                       | K     | 19 (1 - 24)                           |
     * |                       | kk    | 06 or 18, locale determines           |
     * |                       | k     | 6 or 18, locale determines            |
     * | Minute                | mm    | 07                                    |
     * |                       | m     | 7                                     |
     * | Second                | ss    | 08                                    |
     * |                       | s     | 8                                     |
     * | Millisecond           | S     | 1                                     |
     * |                       | SS    | 14                                    |
     * |                       | SSS   | 145                                   |
     * | AM/PM                 | A     | AM or PM                              |
     * |                       | a     | am or pm                              |
     * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |
     * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |
     * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |
     * |                       | l     | Y: n, M : n, D : n                    |
     * |                       | LL    | Y: n, M : long (l), D : n             |
     * |                       | ll    | Y: n, M : short (s), D : n            |
     * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |
     * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |
     * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |
     * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |
     *
     * Some examples:
     *
     * ```
     * DateHelper.format(new Date(2019, 7, 16), 'dddd') -> Friday
     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'HH:mm') --> 14:27
     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'L HH') --> 2019-07-16 14
     * ```
     *
     * Arbitrary text can be embedded in the format string by wrapping it with {}:
     *
     * ```
     * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!
     * ```
     *
     * @param {Date} date Date
     * @param {String} format Desired format
     * @returns {String} Formatted string
     * @category Parse & format
     */},{key:"format",value:function format(date){var _format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultFormat;if(!date){return null;}var formatter=formatCache[_format],output='';if(!formatter){formatter=formatCache[_format]=[];// Build formatter array with the steps needed to format the date
for(var i=0;i<_format.length;i++){// Matches a predefined format?
var formatMatch=_format.substr(i).match(formatRegexp),predefined=formatMatch&&formatMatch[0];if(predefined){var localeFormats=this.L('formats')!=='formats'&&this.L('formats')||{},fn=localeFormats[predefined]||formats[predefined];formatter.push(fn);i+=predefined.length-1;}// Start of text block? Append it
else if(_format[i]==='{'){// Find closing brace
var index=_format.indexOf('}',i+1);// No closing brace, grab rest of string
if(index===-1){formatter.push(_format.substr(i+1));i=_format.length;}// Closing brace found
else{formatter.push(_format.substring(i+1,index));// Carry on after closing brace
i=index;}}// Otherwise append to output (for example - / : etc)
else{formatter.push(_format[i]);}}}formatter.forEach(function(step){if(typeof step==='string'){output+=step;}else{output+=step(date);}});// MS inserts a Left-to-right control char between localized date parts, remove it to have the expected string
// output. Otherwise comparision with typed strings will fail
if(BrowserHelper.isEdge||BrowserHelper.isIE11){output=output.replace(/\u200E/g,'');}return output;}/**
     * Converts the specified amount of desired unit into milliseconds. Can be called by only specifying a unit as the
     * first argument, it then uses amount = 1. For example: asMilliseconds('hour') == asMilliseconds(1, 'hour')
     * @param {Number/String} amount Amount, what of is decided by specifying unit (also takes a unit which implies an amount of 1)
     * @param {String} unit Time unit (s, hour, months etc.)
     * @returns {Number}
     * @category Parse & format
     */},{key:"asMilliseconds",value:function asMilliseconds(amount){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(typeof amount==='string'){unit=amount;amount=1;}return this.as('millisecond',amount,unit);}/**
     * Converts a millisecond time delta to a human readable form. For example `1000 * 60 * 60 * 50`
     * milliseconds would be rendered as "2 days, 2 hours"
     * @param {Number} delta The millisecond delta value.
     * @param {Boolean} [abbrev] Pass `true` to use abbreviated unit names, eg "2d, 2h" for the above example.
     */},{key:"formatDelta",value:function formatDelta(delta){var abbrev=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var result=[],getUnit=abbrev?this.getShortNameOfUnit:this.getLocalizedNameOfUnit,sep=abbrev?'':' ';// Loop downwards through the magnitude of units from year -> ms
for(var _i3=0,_deltaUnits=deltaUnits;_i3<_deltaUnits.length;_i3++){var unitName=_deltaUnits[_i3];var _d2=Math.floor(this.as(unitName,delta));// If there's a non-zero integer quantity of this unit, add it to result
// and subtract from the delta, then go round to next unit down.
if(_d2){result.push("".concat(_d2).concat(sep).concat(getUnit.call(this,unitName,_d2>1)));delta-=this.as('ms',_d2,unitName);}if(!delta){break;}}return result.join(', ');}/**
     * Converts the specified amount of one unit (fromUnit) into an amount of another unit (toUnit)
     * @param toUnit
     * @param amount
     * @param fromUnit
     * @returns {Number}
     * @category Parse & format
     */},{key:"as",value:function as(toUnit,amount){var fromUnit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';if(toUnit===fromUnit)return amount;toUnit=this.normalizeUnit(toUnit);fromUnit=this.normalizeUnit(fromUnit);// validConversions[][] can be negative to signal that conversion is not exact, ignore sign here
if(unitMagnitudes[fromUnit]>unitMagnitudes[toUnit]){return amount*Math.abs(validConversions[fromUnit][toUnit]);}else{return amount/Math.abs(validConversions[toUnit][fromUnit]);}}},{key:"is24HourFormat",value:function is24HourFormat(format){return this.format(new Date(1970,0,0,13,0,0),format).includes('13');}//endregion
//region Manipulate
/**
     * Add days, hours etc. to a date. Always clones the date, original will be left unaffected.
     * @param {Date} date Original date
     * @param {Number} amount Amount of days, hours etc
     * @param {String} unit Unit for amount
     * @returns {Date} New calculated date
     * @category Manipulate
     */},{key:"add",value:function add(date,amount){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';var me=this;var d;if(typeof date==='string'){d=me.parse(date);}else{d=new Date(date.getTime());}if(!unit||amount===0)return d;unit=DateHelper.normalizeUnit(unit);switch(unit){case'millisecond':d=new Date(d.getTime()+amount);break;case'second':d=new Date(d.getTime()+amount*1000);break;case'minute':d=new Date(d.getTime()+amount*60000);break;case'hour':d=new Date(d.getTime()+amount*3600000);break;case'day':// Integer value added, do calendar calculation to correctly handle DST etc.
if(amount%1===0){d.setDate(d.getDate()+amount);}// No browsers support fractional values for dates any longer, do time based calculation
else{d=new Date(d.getTime()+amount*86400000);}if(d.getHours()===23&&d.getHours()===0){d=me.add(d,1,'hour');}break;case'week':d.setDate(d.getDate()+amount*7);break;case'month':var day=d.getDate();if(day>28){day=Math.min(day,me.getLastDateOfMonth(me.add(me.getFirstDateOfMonth(d),amount,'month')).getDate());}d.setDate(day);d.setMonth(d.getMonth()+amount);break;case'quarter':d=me.add(d,amount*3,'month');break;case'year':d.setFullYear(d.getFullYear()+amount);break;}return d;}/**
     * Calculates the difference between two dates, in the specified unit.
     * @param {Date} start First date
     * @param {Date} end Second date
     * @param {String} unit Unit to calculate difference in
     * @param {Boolean} fractional Specify false to round result
     * @returns {Number} Difference in the specified unit
     * @category Manipulate
     */},{key:"diff",value:function diff(start,end){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';var fractional=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;unit=DateHelper.normalizeUnit(unit);if(!start||!end)return 0;var amount;switch(unit){case'year':amount=this.diff(start,end,'month')/12;break;case'quarter':amount=this.diff(start,end,'month')/3;break;case'month':amount=(end.getFullYear()-start.getFullYear())*12+(end.getMonth()-start.getMonth());break;case'week':amount=this.diff(start,end,'day')/7;break;case'day':var dstDiff=start.getTimezoneOffset()-end.getTimezoneOffset();amount=(end-start+dstDiff*60*1000)/86400000;break;case'hour':amount=(end-start)/3600000;break;case'minute':amount=(end-start)/60000;break;case'second':amount=(end-start)/1000;break;case'millisecond':amount=end-start;break;}return fractional?amount:Math.round(amount);}/**
     * Sets the date to the start of the specified unit, by default returning a clone of the date instead of changing it
     * inplace.
     * @param {Date} date Original date
     * @param {String} unit Start of this unit, 'day', 'month' etc.
     * @param {Boolean} clone Manipulate a copy of the date
     * @returns {Date} Manipulated date
     * @category Manipulate
     */},{key:"startOf",value:function startOf(date){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'day';var clone=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!date){return null;}unit=this.normalizeUnit(unit);if(clone)date=this.clone(date);var toSet={},index=canonicalUnitNames.indexOf(unit);for(var i=0;i<index;i++){var currentUnit=canonicalUnitNames[i];// Week and quarter are not part of the date
if(currentUnit!=='quarter'&&currentUnit!=='week'){toSet[currentUnit]=currentUnit==='day'?1:0;// day is 1 based
}}// Special handling of quarter and week
if(unit==='quarter'){toSet.month=(this.get(date,'quarter')-1)*3;}else if(unit==='week'){var delta=date.getDay()-this.weekStartDay;toSet.day=date.getDate()-delta;}return this.set(date,toSet);}/**
     * Creates a clone of the specified date
     * @param {Date} date Original date
     * @returns {Date} Cloned date
     * @category Manipulate
     */},{key:"clone",value:function clone(date){return new Date(date.getTime());}/**
     * Removes time from a date (same as calling #startOf(date, 'day'))
     * @param {Date} date Date to remove time from
     * @param {Boolean} clone Manipulate a copy of the date
     * @returns {Date} Manipulated date
     * @category Manipulate
     */},{key:"clearTime",value:function clearTime(date){var clone=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return DateHelper.startOf(date,'day',clone);}/**
     * Sets a part of a date (in place)
     * @param {Date} date Date to manipulate
     * @param {String|Object} unit Part of date to set, for example 'minute'. Or an object like { second: 1, minute: 1 }
     * @param {Number} amount Value to set
     * @returns {Date} Modified date
     * @category Manipulate
     */},{key:"set",value:function set(date,unit,amount){var _this7=this;if(!unit){return date;}if(typeof unit==='string'){switch(this.normalizeUnit(unit)){case'millisecond':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getMilliseconds()>0){date.setMilliseconds(amount);}break;case'second':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getSeconds()>0){date.setSeconds(amount);}break;case'minute':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getMinutes()>0){date.setMinutes(amount);}break;case'hour':date.setHours(amount);break;case'day':case'date':date.setDate(amount);break;case'week':throw new Error('week not implemented');case'month':date.setMonth(amount);break;case'quarter':// Setting quarter = first day of first month of that quarter
date.setDate(1);date.setMonth((amount-1)*3);break;case'year':date.setFullYear(amount);break;}}else{Object.entries(unit)// Make sure smallest unit goes first, to not change month before changing day
.sort(function(a,b){return canonicalUnitNames.indexOf(a[0])-canonicalUnitNames.indexOf(b[0]);}).forEach(function(_ref10){var _ref11=_slicedToArray(_ref10,2),unit=_ref11[0],amount=_ref11[1];_this7.set(date,unit,amount);});}return date;}/**
     * Constrains the date within a min and a max date
     * @param {Date} date The date to constrain
     * @param {Date} min Min date
     * @param {Date} max Max date
     * @return {Date} The constrained date
     * @category Manipulate
     */},{key:"constrain",value:function constrain(date,min,max){return this.min(this.max(date,min),max);}/**
     * Returns time only (same as calling new Date(1970, 0, 1, hours, minutes, seconds))
     * @param {Number} hours Hours value
     * @param {Number} minutes Minutes value
     * @param {Number} seconds Seconds value
     * @returns {Date} Date value for input hours, minutes, seconds parameters
     * @category Manipulate
     */},{key:"getTime",value:function getTime(hours){var minutes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var seconds=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;return new Date(1970,0,1,hours,minutes,seconds);}//endregion
//region Comparison
},{key:"isDST",value:function isDST(date){// from https://stackoverflow.com/questions/11887934/how-to-check-if-the-dst-daylight-saving-time-is-in-effect-and-if-it-is-whats
var jan=new Date(date.getFullYear(),0,1),jul=new Date(date.getFullYear(),6,1);return date.getTimezoneOffset()<Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());}/**
     * Determines if a date precedes another.
     * @param first First date
     * @param second Second date
     * @returns {Boolean} true if first precedes second, otherwise false
     * @category Comparison
     */},{key:"isBefore",value:function isBefore(first,second){return first<second;}/**
     * Determines if a date succeeds another.
     * @param first First date
     * @param second Second date
     * @returns {Boolean} true if first succeeds second, otherwise false
     * @category Comparison
     */},{key:"isAfter",value:function isAfter(first,second){return first>second;}/**
     * Checks if two dates are equal.
     * @param first First date
     * @param second Second date
     * @param unit If not given, the comparison will be done up to a millisecond
     * @returns {Boolean} true if the dates are equal
     * @category Comparison
     */},{key:"isEqual",value:function isEqual(first,second){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(unit===null)return first-second===0;return this.startOf(first,unit)-this.startOf(second,unit)===0;}/**
     * Compares two dates using the specified precision
     * @param {Date} first
     * @param {Date} second
     * @param {String} unit
     * @returns {Number} 0 = equal, -1 first before second, 1 first after second
     * @category Comparison
     */},{key:"compare",value:function compare(first,second){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var DH=this;// Unit specified, cut the rest out
if(unit){first=DH.startOf(first,unit);second=DH.startOf(second,unit);}// Comparision on ms level
if(DH.isBefore(first,second))return-1;if(DH.isAfter(first,second))return 1;return 0;}/**
     * Checks if date is the start of specified unit
     * @param {Date} date
     * @param {String} unit
     * @returns {Boolean}
     * @category Comparison
     */},{key:"isStartOf",value:function isStartOf(date,unit){return this.isEqual(date,this.startOf(date,unit));}/**
     * Checks if this date is >= start and < end.
     * @param {Date} date The source date
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Boolean} true if this date falls on or between the given start and end dates.
     * @category Comparison
     */},{key:"betweenLesser",value:function betweenLesser(date,start,end){//return start <= date && date < end;
return start.getTime()<=date.getTime()&&date.getTime()<end.getTime();}/**
     * Checks if this date is >= start and <= end.
     * @param {Date} date The source date
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Boolean} true if this date falls on or between the given start and end dates.
     * @category Comparison
     */},{key:"betweenLesserEqual",value:function betweenLesserEqual(date,start,end){return start.getTime()<=date.getTime()&&date.getTime()<=end.getTime();}/**
     * Returns true if dates intersect
     * @param {Date} date1Start
     * @param {Date} date1End
     * @param {Date} date2Start
     * @param {Date} date2End
     * @return {Boolean} Returns true if dates intersect
     * @category Comparison
     */},{key:"intersectSpans",value:function intersectSpans(date1Start,date1End,date2Start,date2End){return this.betweenLesser(date1Start,date2Start,date2End)||this.betweenLesser(date2Start,date1Start,date1End);}/**
     * Returns 1 if first param is a greater unit than second param, -1 if the opposite is true or 0 if they're equal
     * @param {String} unit1 The 1st unit
     * @param {String} unit2 The 2nd unit
     * @category Comparison
     */},{key:"compareUnits",value:function compareUnits(unit1,unit2){var index1=canonicalUnitNames.indexOf(unit1),index2=canonicalUnitNames.indexOf(unit2);return Math.sign(index1-index2);}/**
     * Returns true if the first time span completely 'covers' the second time span.
     * @example
     * DateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 4)) ==> true
     * DateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 6)) ==> false
     * @param {Date} spanStart The start date for initial time span
     * @param {Date} spanEnd The end date for initial time span
     * @param {Date} otherSpanStart The start date for the 2nd time span
     * @param {Date} otherSpanEnd The end date for the 2nd time span
     * @return {Boolean}
     * @category Comparison
     */},{key:"timeSpanContains",value:function timeSpanContains(spanStart,spanEnd,otherSpanStart,otherSpanEnd){return otherSpanStart-spanStart>=0&&spanEnd-otherSpanEnd>=0;}//endregion
//region Query
/**
     * Get the first day of week, 0-6 (Sunday-Saturday). This is determined by the used locale.
     * @readonly
     */},{key:"get",/**
     * Get the specified part of a date
     * @param {Date} date
     * @param {String} unit Part of date, hour, minute etc.
     * @category Query
     */value:function get(date,unit){switch(this.normalizeUnit(unit)){case'millisecond':return date.getMilliseconds();case'second':return date.getSeconds();case'minute':return date.getMinutes();case'hour':return date.getHours();case'date':case'day':// Scheduler has a lot of calculations expecting this to work
return date.getDate();case'week':return formats.W(date);case'month':return date.getMonth();case'quarter':return Math.floor(date.getMonth()/3)+1;case'year':return date.getFullYear();}return null;}/**
     * Get number of days in the current month for the supplied date
     * @param {Date} date Date which month should be checked
     * @returns {Number} Days in month
     * @category Query
     */},{key:"daysInMonth",value:function daysInMonth(date){var d=this.clone(date);d.setDate(1);d.setMonth(date.getMonth()+1);d.setDate(0);return d.getDate();}/**
     * Get the first date of the month for the supplied date
     * @param {Date} date
     * @returns {Date}
     * @category Query
     */},{key:"getFirstDateOfMonth",value:function getFirstDateOfMonth(date){return new Date(date.getFullYear(),date.getMonth(),1);}/**
     * Get the last date of the month for the supplied date
     * @param {Date} date
     * @returns {Date}
     * @category Query
     */},{key:"getLastDateOfMonth",value:function getLastDateOfMonth(date){return new Date(date.getFullYear(),date.getMonth()+1,0);}/**
     * Get the earliest of two dates
     * @param {Date} first
     * @param {Date} second
     * @returns {Date} Earliest date
     * @category Query
     */},{key:"min",value:function min(first,second){return first.getTime()<second.getTime()?first:second;}/**
     * Get the latest of two dates
     * @param {Date} first
     * @param {Date} second
     * @returns {Date} Latest date
     * @category Query
     */},{key:"max",value:function max(first,second){return first.getTime()>second.getTime()?first:second;}/**
     * Get an incremented date. Incrementation based on specified unit and optional amount
     * @param {Date} date
     * @param {String} unit
     * @param {Number} [increment]
     * @param {Number} [weekStartDay] Will default to what is set in locale
     * @returns {Date}
     * @category Query
     */},{key:"getNext",value:function getNext(date,unit){var increment=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var weekStartDay=arguments.length>3&&arguments[3]!==undefined?arguments[3]:this.weekStartDay;var me=this;if(unit==='week'){var dt=me.clone(date),day=dt.getDay();dt=me.startOf(dt,'day');dt=me.add(dt,weekStartDay-day+7*(increment-(weekStartDay<=day?0:1)),'day');// For south american timezones, midnight does not exist on DST transitions, adjust...
if(dt.getDay()!==weekStartDay)me.add(dt,1,'hour');return dt;}return me.startOf(me.add(date,increment,unit),unit);}/**
     * Get the start of the next day
     * @param {Date} date
     * @param {Boolean} clone
     * @param {Boolean} noNeedToClearTime
     * @returns {Date}
     * @category Query
     */},{key:"getStartOfNextDay",value:function getStartOfNextDay(date,clone,noNeedToClearTime){var nextDay=DateHelper.add(noNeedToClearTime?date:DateHelper.clearTime(date,clone),1,'day');// DST case
if(nextDay.getDate()==date.getDate()){var offsetNextDay=DateHelper.add(DateHelper.clearTime(date,clone),'day',2).getTimezoneOffset(),offsetDate=date.getTimezoneOffset();nextDay=DateHelper.add(nextDay,offsetDate-offsetNextDay,'minute');}return nextDay;}/**
     * Get the end of previous day
     * @param {Date} date
     * @param {Boolean} noNeedToClearTime
     * @returns {Date}
     * @category Query
     */},{key:"getEndOfPreviousDay",value:function getEndOfPreviousDay(date,noNeedToClearTime){var dateOnly=noNeedToClearTime?date:DateHelper.clearTime(date,true);// dates are different
if(dateOnly-date){return dateOnly;}else{return this.add(dateOnly,-1,'day');}}//endregion
//region Unit helpers
/**
     * Turns (10, 'day') into '10 days' etc.
     * @param {Number} count Amount of unit
     * @param {String} unit Unit, will be normalizes (days, d -> day etc.)
     * @returns {String}
     * @category Unit helpers
     */},{key:"formatCount",value:function formatCount(count,unit){unit=DateHelper.normalizeUnit(unit);if(count!==1)unit+='s';return count+' '+unit;}/**
     * Get the ratio between two units ( year, month -> 1/12 )
     * @param {String} baseUnit
     * @param {String} unit
     * @param {Boolean} acceptEstimate If true, process negative values of validConversions. Defaults to false.
     * @returns {Number} Ratio
     * @category Unit helpers
     */},{key:"getUnitToBaseUnitRatio",value:function getUnitToBaseUnitRatio(baseUnit,unit){var acceptEstimate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;baseUnit=DateHelper.normalizeUnit(baseUnit);unit=DateHelper.normalizeUnit(unit);if(baseUnit===unit)return 1;// Some validConversions have negative sign to signal that it is not an exact conversion.
// Ignore those here unless acceptEstimate is provided.
if(validConversions[baseUnit]&&validConversions[baseUnit][unit]&&(acceptEstimate||validConversions[baseUnit][unit]>0)){return 1/DateHelper.as(unit,1,baseUnit);}if(validConversions[unit]&&validConversions[unit][baseUnit]&&(acceptEstimate||validConversions[unit][baseUnit]>0)){return DateHelper.as(baseUnit,1,unit);}return-1;}/**
     * Get unit suitable to use in calculations (?)
     * @param unit
     * @returns {*}
     * @category Unit helpers
     */},{key:"getMeasuringUnit",value:function getMeasuringUnit(unit){if(unit==='week')return'day';return unit;}/**
     * Returns a localized abbreviated form of the name of the duration unit.
     * For example in the `EN` locale, for `"qrt"` it will return `"q"`.
     * @param {String} unit Duration unit
     * @return {String}
     * @category Unit helpers
     */},{key:"getShortNameOfUnit",value:function getShortNameOfUnit(unit){var me=this;// Convert abbreviations to the canonical name.
// See locale file and the applyLocale method below.
unit=me.parseTimeUnit(unit);// unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc
return me.unitLookup[unit].abbrev;}/**
     * Returns a localized full name of the duration unit.
     * For for example in the `EN` locale, for `"d"` it will return either
     * `"day"` or `"days"`, depending from the `plural` argument
     * @static
     * @param {String} unit Time unit
     * @param {Boolean} plural Whether to return a plural name or singular
     * @return {String}
     * @category Unit helpers
     */},{key:"getLocalizedNameOfUnit",value:function getLocalizedNameOfUnit(unit,plural){var me=this;// Normalize to not have to have translations for each variation used in code
unit=me.normalizeUnit(unit);// Convert abbreviations to the canonical name.
// See locale file and the applyLocale method below.
unit=me.parseTimeUnit(unit);// unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc
return me.unitLookup[unit][plural?'plural':'single'];}/**
     * Normalizes a unit for easier usage in conditionals. For example year, years, y -> year
     * @param {String} unit
     * @returns {String}
     * @category Unit helpers
     */},{key:"normalizeUnit",value:function normalizeUnit(unit){if(!unit){return null;}if(unit.toLowerCase()==='date'){return unit.toLowerCase();}return canonicalUnitNames.includes(unit.toLowerCase())// Already valid
?unit.toLowerCase()// Trying specified case first, since we have both "M" for month and "m" for minute
:normalizedUnits[unit]||normalizedUnits[unit.toLowerCase()];}},{key:"getUnitByName",value:function getUnitByName(name){// Allow either a canonical name to be passed, or, if that fails, parse it as a localized name or abbreviation.
return DateHelper.normalizeUnit(name)||DateHelper.normalizeUnit(this.parseTimeUnit(name));}/**
     * Returns a duration of the timeframe in the given unit.
     * @param {Date} start The start date of the timeframe
     * @param {Date} end The end date of the timeframe
     * @param {String} unit Duration unit
     * @return {Number} The duration in the units
     * @category Unit helpers
     * @ignore
     */},{key:"getDurationInUnit",value:function getDurationInUnit(start,end,unit,doNotRound){return this.diff(start,end,unit,doNotRound);}/**
     * Checks if two date units align
     * @private
     * @param {String} majorUnit
     * @param {String} minorUnit
     * @returns {Boolean}
     * @category Unit helpers
     */},{key:"doesUnitsAlign",value:function doesUnitsAlign(majorUnit,minorUnit){// TODO: probably needs some fleshing out to be generally useful, otherwise move to TimeAxisViewModel?
// Maybe also use getUnitToBaseUnitRatio() for assertion?
if(majorUnit!==minorUnit&&minorUnit==='week')return false;return true;}},{key:"getSmallerUnit",value:function getSmallerUnit(unit){return canonicalUnitNames[unitMagnitudes[this.normalizeUnit(unit)]-1]||null;}},{key:"getLargerUnit",value:function getLargerUnit(unit){return canonicalUnitNames[unitMagnitudes[this.normalizeUnit(unit)]+1]||null;}//endregion
//region Date picker format
/**
     * Parses a typed duration value according to locale rules.
     *
     * The value is taken to be a string consisting of the numeric magnitude and the units.
     * The units may be a recognised unit abbreviation of this locale or the full local unit name.
     *
     * For example: "2d", "2 d", "2 day", "2 days" will be turned into `{ magnitude : 2, unit : "day" }`
     *
     * **NOTE:** Doesn't work with complex values like "2 days, 2 hours"
     *
     * @param {String} value The value to parse.
     * @param {Boolean} [allowDecimals=true] Decimals are allowed in the magnitude.
     * @param {String} [defaultUnit] Default unit to use if only magnitude passed.
     * @returns {Object} If successfully parsed, the result contains two properties,
     * `magnitude` being a number, and `unit` being the canonical unit name, *NOT*
     * a localized name. If parsing was unsuccessful, `null` is returned.
     * @category Parse & format
     */},{key:"parseDuration",value:function parseDuration(value){var allowDecimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var defaultUnit=arguments.length>2?arguments[2]:undefined;var me=this,durationRegEx=allowDecimals?withDecimalsDurationRegex:noDecimalsDurationRegex,match=durationRegEx.exec(value);if(value==null||!match){return null;}var magnitude=parseNumber(match[1]),unit=me.parseTimeUnit(match[2])||defaultUnit;if(!unit){return null;}return{magnitude:magnitude,unit:unit};}/**
     * Parses a typed unit name, for example `"ms"` or `"hr"` or `"yr"` into the
     * canonical form of the unit name which may be passed to {@link #function-add-static}
     * or {@link #function-diff-static}
     * @param {*} unitName
     * @category Parse & format
     */},{key:"parseTimeUnit",value:function parseTimeUnit(unitName){// NOTE: In case you get a crash here when running tests, it is caused by missing locale. Build locales
// using `scripts/build.js locales` to resolve.
var unitMatch=unitName==null?null:this.durationRegEx.exec(unitName.toLowerCase());if(!unitMatch){return null;}// See which group in the unitAbbrRegEx matched match[2]
for(var unitOrdinal=0;unitOrdinal<canonicalUnitNames.length;unitOrdinal++){if(unitMatch[unitOrdinal+1]){return canonicalUnitNames[unitOrdinal];}}}//endregion
},{key:"applyLocale",value:function applyLocale(){var me=this,unitAbbreviations=me.L('unitAbbreviations'),unitNames=me.unitNames=me.L('unitNames');// This happens when applying an incomplete locale, as done in Localizable.t.js.
// Invalid usecase, but return to prevent a crash in that test.
if(unitNames==='unitNames'){return;}locale=me.L('locale')||'en-US';if(locale==='en-US'){// TODO: Include in En locale instead?
ordinalSuffix=enOrdinalSuffix;}else if(me.L('ordinalSuffix')!=='ordinalSuffix'){ordinalSuffix=me.L('ordinalSuffix');}formatCache={};parserCache={};intlFormatterCache={};var unitAbbrRegEx='';me.unitLookup={};for(var i=0;i<unitAbbreviations.length;i++){var a=unitAbbreviations[i],n=unitNames[i];n.canonicalUnitName=canonicalUnitNames[i];// Create a unitLookup object keyed by unit full names
// both lower and upper case to be able to look up plurals or abbreviations
// also always include english names, since those are used in sources
me.unitLookup[n.single]=me.unitLookup[n.single.toUpperCase()]=me.unitLookup[n.canonicalUnitName]=me.unitLookup[n.canonicalUnitName.toUpperCase()]=n;unitAbbrRegEx+="".concat(i?'|':'',"(");for(var j=0;j<a.length;j++){unitAbbrRegEx+="".concat(a[j],"|");}unitAbbrRegEx+="".concat(n.single,"|").concat(n.plural,"|").concat(n.canonicalUnitName,")");}me.durationRegEx=new RegExp("^(?:".concat(unitAbbrRegEx,")$"));}},{key:"weekStartDay",get:function get(){// Try locale first
var weekStartDay=this.L('weekStartDay');if(weekStartDay!=='weekStartDay'){return weekStartDay;}// Default to 0, should not need to happen in real world scenarios when a locale is always loaded
return 0;}},{key:"locale",set:function set(name){locale=name;},get:function get(){return locale;}}]);return DateHelper;}(Localizable());/*  */exports.DateHelper=DateHelper;DateHelper._$name='DateHelper';// Update when changing locale
LocaleManagerSingelton.on({locale:'applyLocale',thisObj:DateHelper});// Apply default locale
if(LocaleManagerSingelton.locale)DateHelper.applyLocale();DateHelper._$name='DateHelper';/**
 * @module Common/helper/ObjectHelper
 */var whiteSpaceRe=/\s+/,typeOf=function typeOf(value){var baseType=_typeof(value);// If not atomic type, we handle date or null
if(baseType==='object'){if(value===null){return'null';}if(Object.prototype.toString.call(value)==='[object Date]'){return'date';}}return baseType;};// Detect if browser has bad implementation of toFixed()
var toFixedFix=1.005.toFixed(2)==='1.01'?null:function(number,fractionDigits){var split=number.toString().split('.'),newNumber=+(!split[1]?split[0]:split.join('.')+'1');return number.toFixed.call(newNumber,fractionDigits);};/**
 * Helper for Object manipulation.
 */var ObjectHelper=/*#__PURE__*/function(){function ObjectHelper(){_classCallCheck2(this,ObjectHelper);}_createClass2(ObjectHelper,null,[{key:"isEqual",/**
     * Checks if two values are equal. Basically === but special handling of dates.
     * @param a First value
     * @param b Second value
     * @returns {*} true if values are equal, otherwise false
     */value:function isEqual(a,b){var _this8=this;var useIsDeeply=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Eliminate null vs undefined mismatch
if(a===null&&b!==null||a===undefined&&b!==undefined||b===null&&a!==null||b===undefined&&a!==undefined){return false;}// Covers undefined === undefined and null === null, since mismatches are elminiated above
if(a==null&&b==null){return true;}var typeA=_typeof(a),typeB=_typeof(b);if(typeA===typeB){switch(typeA){case'number':case'string':case'boolean':return a===b;}switch(true){case a instanceof Date&&b instanceof Date:// faster than calling DateHelper.isEqual
return a-b===0;case Array.isArray(a)&&Array.isArray(b):return a.length===b.length?a.every(function(v,idx){return _this8.isEqual(v,b[idx],useIsDeeply);}):false;case typeA==='object'&&a.constructor.prototype===b.constructor.prototype:return useIsDeeply?this.isDeeplyEqual(a,b,useIsDeeply):JSON.stringify(a)===JSON.stringify(b);}}return String(a)===String(b);}/**
     * Checks if two objects are deeply equal
     * @param {Object} a
     * @param {Object} b
     * @param {Object} [options] Additional comparison options
     * @param {Object} [options.ignore] Map of property names to ignore when comparing
     * @param {Function} [options.shouldEvaluate] Function used to evaluate if a property should be compared or not.
     * Return false to prevent comparision
     * @param {Function} [options.evaluate] Function used to evaluate equality. Return `true`/`false` as evaluation
     * result or anything else to let `isEqual` handle the comparision
     * @returns {Boolean}
     */},{key:"isDeeplyEqual",value:function isDeeplyEqual(a,b){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};// Same object, equal :)
if(a===b){return true;}// Nothing to compare, not equal
if(!a||!b){return false;}// Property names excluding ignored
var aKeys=this.keys(a,options.ignore),bKeys=this.keys(b,options.ignore);// Property count differs, not equal
if(aKeys.length!==bKeys.length){return false;}for(var i=0;i<aKeys.length;i++){var aKey=aKeys[i];var bKey=bKeys[i];// Property name differs, not equal
if(aKey!==bKey){return false;}var aVal=a[aKey];var bVal=b[bKey];// Allow caller to determine if property values should be evaluated or not
// TODO: Not currently used
if(options.shouldEvaluate){if(options.shouldEvaluate(aKey,{value:aVal,object:a},{value:bVal,object:b})===false){continue;}}// Allow caller to determine equality of properties
if(options.evaluate){var result=options.evaluate(aKey,{value:aVal,object:a},{value:bVal,object:b});// Not equal
if(result===false){return false;}// Equal, skip isEqual call below
if(result===true){continue;}}// Values differ, not equal (also digs deeper)
if(!this.isEqual(aVal,bVal,options)){return false;}}// Found to be equal
return true;}/**
     * Checks if value B is partially equal to value A.
     * @param a First value
     * @param b Second value
     * @returns {Boolean} true if values are partially equal, false otherwise
     */},{key:"isPartial",value:function isPartial(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a.indexOf(b)!=-1;}/**
     * Checks if value a is smaller than value b.
     * @param a First value
     * @param b Second value
     * @returns {Boolean} true if a < b
     */},{key:"isLessThan",value:function isLessThan(a,b){if(a instanceof Date&&b instanceof Date){return DateHelper.isBefore(a,b);}return a<b;}/**
     * Checks if value a is bigger than value b.
     * @param a First value
     * @param b Second value
     * @returns {Boolean} true if a > b
     */},{key:"isMoreThan",value:function isMoreThan(a,b){if(a instanceof Date&&b instanceof Date){return DateHelper.isAfter(a,b);}return a>b;}/**
     * Used by the Base class to make deep copies of defaultConfig blocks
     * @private
     */},{key:"fork",value:function fork(obj){var ret,key,value;if(obj&&obj.constructor===Object){ret=Object.setPrototypeOf({},obj);for(key in obj){value=obj[key];if(value){if(value.constructor===Object){ret[key]=this.fork(value);}else if(value instanceof Array){ret[key]=value.slice();}}}}else{ret=obj;}return ret;}},{key:"assign",value:function assign(dest){var i=0,ln=arguments.length<=1?0:arguments.length-1,source,key;for(;i<ln;i++){source=i+1<1||arguments.length<=i+1?undefined:arguments[i+1];for(key in source){dest[key]=source[key];}}return dest;}},{key:"clone",value:function clone(source){if(source==null){return source;}var type=source.constructor.name,result=source,i,key;// Date
if(type==='Date'){return new Date(source.getTime());}// Array
if(type==='Array'){i=source.length;result=[];while(i--){result[i]=this.clone(source[i]);}}// Object
else if(type==='Object'){result={};for(key in source){result[key]=this.clone(source[key]);}}return result;}},{key:"merge",value:function merge(dest){var i=0,ln=arguments.length<=1?0:arguments.length-1,source,key,value,sourceKey;for(;i<ln;i++){source=i+1<1||arguments.length<=i+1?undefined:arguments[i+1];for(key in source){value=source[key];if(value&&value.constructor===Object){sourceKey=dest[key];if(sourceKey&&sourceKey.constructor.name==='Object'){this.merge(sourceKey,value);}else{dest[key]=this.clone(value);}}else{dest[key]=value;}}}return dest;}/**
     * Copies the named properties from the `source` parameter into the `dest` parameter.
     * @param {Object} dest The destination into which properties are copied.
     * @param {Object} source The source from which properties are copied.
     * @param {String[]} props The list of property names.
     * @returns The `dest` object.
     */},{key:"copyProperties",value:function copyProperties(dest,source,props){var prop,i;for(i=0;i<props.length;i++){prop=props[i];if(prop in source){dest[prop]=source[prop];}}return dest;}/**
     * Copies the named properties from the `source` parameter into the `dest` parameter
     * unless the property already exists in the `dest`.
     * @param {Object} dest The destination into which properties are copied.
     * @param {Object} source The source from which properties are copied.
     * @param {String[]} props The list of property names.
     * @returns The `dest` object.
     */},{key:"copyPropertiesIf",value:function copyPropertiesIf(dest,source,props){var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=props[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var prop=_step3.value;if(!(prop in dest)){dest[prop]=source[prop];}}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return!=null){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return dest;}/**
     * Returns an array containing all enumerable property names from every prototype level for the object.
     * @param {Object} object Object to retrieve property names from
     * @param {Object} [ignore] Optional map of names to ignore
     * @returns {String[]} All keys from every prototype level.
     */},{key:"keys",value:function keys(object){var ignore=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var result=[];for(var p in object){if(!ignore||!ignore[p]){result.push(p);}}return result;}/**
     * Tests whether a passed object has any enumerable properties.
     * @param {Object} object
     * @returns {Boolean} `true` if the passed object has no enumerable properties.
     */},{key:"isEmpty",value:function isEmpty(object){for(var p in object){// eslint-disable-line no-unused-vars
return false;}return true;}/**
     * Gathers the names of properties which have truthy values into an array.
     *
     * This is useful when gathering CSS class names for complex element production.
     * Instead of appending to an array or string which may already contain the
     * name, and instead of contending with space separation and concatenation
     * and conditional execution, just set the properties of an object:
     *
     *     cls = {
     *         [this.selectedCls] : this.isSelected(thing),
     *         [this.dirtyCls] : this.isDirty(thing)
     *     };
     *
     * @param {Object} source Source of keys to gather into an array.
     * @returns {String[]} The keys which had a truthy value.
     */},{key:"getTruthyKeys",value:function getTruthyKeys(source){var keys=Object.keys(source);for(var i=0;i<keys.length;){if(source[keys[i]]){i++;}else{keys.splice(i,1);}}return keys;}/**
     * Gathers the values of properties which are truthy into an array.
     * @param {Object} source Source of values to gather into an array.
     * @returns {String[]} The truthy values from the passed object.
     */},{key:"getTruthyValues",value:function getTruthyValues(source){var keys=Object.keys(source);for(var i=0;i<keys.length;){if(source[keys[i]]){keys[i]=source[keys[i++]];}else{keys.splice(i,1);}}return keys;}/**
     * Converts a list of names, either an a space separated string, or
     * from an array, into a series of properties in an object with truthy
     * values. The Converse of {@link #function-getTruthyKeys-static}
     * @param {String|String[]} The list of names to convert to object form.
     */},{key:"createTruthyKeys",value:function createTruthyKeys(source){if(typeof source==='string'){source=source.split(whiteSpaceRe);}var result={};var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=source[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=true){var key=_step4.value;if(key.length){result[key]=1;}}}catch(err){_didIteratorError4=true;_iteratorError4=err;}finally{try{if(!_iteratorNormalCompletion4&&_iterator4.return!=null){_iterator4.return();}}finally{if(_didIteratorError4){throw _iteratorError4;}}}return result;}/**
     * Returns an array of a given object's properties names including properties in
     * all superclasses, in the same order as we get with a normal loop.
     * @param {Object} source An object which may have properties in a prototype
     * chain, such as a configuration (These are chained because of inheritance).
     * @returns {String[]} The property names.
     */},{key:"allKeys",value:function allKeys(object){var result=[];for(object;object;object=Object.getPrototypeOf(object)){result.push.apply(result,_toConsumableArray(Object.keys(object)));}return result;}/**
     * Checks if a given path exists in an object
     * @param {Object} object Object to check path on
     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'
     * @returns {Boolean} Returns `true` if path exists or `false` if it does not
     */},{key:"pathExists",value:function pathExists(object,path){var properties=path.split('.');return properties.every(function(property){if(!(property in object)){return false;}object=object[property];return true;});}/**
     * Returns value for a given path in the object
     * @param {Object} object Object to check path on
     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'
     * @returns {*} Value associated with passed key
     */},{key:"getPath",value:function getPath(object,path){return path.split('.').reduce(function(result,key){return(result||{})[key];},object);}/**
     * Sets value for a given path in the object
     * @param {Object} object Target object
     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'
     * @param {*} value Value for a given path
     */},{key:"setPath",value:function setPath(object,path,value){path.split('.').reduce(function(result,key,index,array){var isLast=index===array.length-1;if(isLast){return result[key]=value;}else if(!(result[key]instanceof Object)){result[key]={};}return result[key];},object);}},{key:"coerce",value:function coerce(from,to){var fromType=typeOf(from),toType=typeOf(to),isString=typeof from==='string';if(fromType!==toType){switch(toType){case'string':return String(from);case'number':return Number(from);case'boolean':// See http://ecma262-5.com/ELS5_HTML.htm#Section_11.9.3 as to why '0'.
// TL;DR => ('0' == 0), so if given string '0', we must return boolean false.
return isString&&(!from||from==='false'||from==='0')?false:Boolean(from);case'null':return isString&&(!from||from==='null')?null:false;case'undefined':return isString&&(!from||from==='undefined')?undefined:false;case'date':return isString&&isNaN(from)?DateHelper.parse(from):Date(Number(from));}}return from;}},{key:"wrapProperty",value:function wrapProperty(object,propertyName,newGetter,newSetter){var deep=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;var newProperty={};var proto=Object.getPrototypeOf(object),existingProperty=Object.getOwnPropertyDescriptor(proto,propertyName);while(!existingProperty&&proto&&deep){proto=Object.getPrototypeOf(proto);if(proto){existingProperty=Object.getOwnPropertyDescriptor(proto,propertyName);}}if(existingProperty){if(existingProperty.set){newProperty.set=function(v){existingProperty.set.call(object,v);// Must invoke the getter in case "v" has been transformed.
newSetter&&newSetter.call(object,existingProperty.get.call(object));};}else{newProperty.set=newSetter;}if(existingProperty.get){newProperty.get=function(){var result=existingProperty.get.call(object);if(newGetter){result=newGetter.call(object,result);}return result;};}else{newProperty.get=newGetter;}}else{newProperty.set=function(v){object["_".concat(propertyName)]=v;newSetter&&newSetter.call(object,v);};newProperty.get=function(){var result=object["_".concat(propertyName)];if(newGetter){result=newGetter.call(object,result);}return result;};}Object.defineProperty(object,propertyName,newProperty);}/**
     * Finds a property descriptor for the passed object from all inheritance levels.
     * @param {Object} object The Object whos property to find.
     * @param {String} propertyName The name of the property to find.
     * @returns {Object} An ECMA property descriptor is the property was found, otherwise `null`
     */},{key:"getPropertyDescriptor",value:function getPropertyDescriptor(object,propertyName){var result=null;for(var obj=object;!result&&obj!==Base;obj=Object.getPrototypeOf(obj)){result=Object.getOwnPropertyDescriptor(obj,propertyName);}return result;}/**
     * Changes the passed object and removes all null and undefined properties from it
     * @param {Object} object Target object
     * @returns {Object} Passed object
     */},{key:"cleanupProperties",value:function cleanupProperties(obj){Object.entries(obj).forEach(function(_ref12){var _ref13=_slicedToArray(_ref12,2),key=_ref13[0],value=_ref13[1];return value==null&&delete obj[key];});return obj;}/**
     * Checks that the supplied value is of the specified type. Throws if it is not
     * @param {Object} value Value to check type of
     * @param {String} type Expected type
     * @param {String} name Name of the value, used in error message
     */},{key:"assertType",value:function assertType(value,type,name){// eslint-disable-next-line valid-typeof
if(value!=null&&_typeof(value)!==type){throw new Error("Incorrect type \"".concat(_typeof(value),"\" for ").concat(name,", expected \"").concat(type,"\""));}}/**
     * Checks that the supplied value is a number.  Throws if it is not
     * @param {Object} value Value to check type of
     * @param {String} name Name of the value, used in error message
     */},{key:"assertNumber",value:function assertNumber(value,name){this.assertType(value,'number',name);}/**
     * Checks that the supplied value is a boolean.  Throws if it is not
     * @param {Object} value Value to check type of
     * @param {String} name Name of the value, used in error message
     */},{key:"assertBoolean",value:function assertBoolean(value,name){this.assertType(value,'boolean',name);}/**
     * Number.toFixed(), with polyfill for browsers that needs it
     * @param {Number } number
     * @param {Number} digits
     * @returns {*}
     */},{key:"toFixed",value:function toFixed(number,digits){if(toFixedFix){return toFixedFix(number,digits);}return number.toFixed(digits);}}]);return ObjectHelper;}();exports.ObjectHelper=ObjectHelper;ObjectHelper._$name='ObjectHelper';/* eslint-disable standard/no-callback-literal */ // Gives circular dependencies which I could not solve, called from global scope instead
//import GlobalEvents from '../GlobalEvents.js';
// https://app.assembla.com/spaces/bryntum/tickets/7903-rendering-fails
// HACK: this value is required to calculate width if it was configured relative to font size (em) but no element is set
var DEFAULT_FONT_SIZE=14,t0t0={align:'t0-t0'};// We only do the measurement once, if the value is null
var scrollBarWidth=null,idCounter=0,themeInfo=null;var// Transform matrix parse Regex. CSS transform computed style looks like this:
// matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
// or
// matrix3d(scaleX(), skewY(), 0, 0, skewX(), scaleY(), 0, 0, 0, 0, 1, 0, translateX(), translateY())
// This is more reliable than using the style literal which may include
// relative styles such as "translateX(-20em)", or not include the translation at all if it's from a CSS rule.
// Use a const so as to only compile RexExp once
translateMatrixRe=/(?:matrix\((?:-?\d*\.?[0-9]*),\s?(?:-?\d*\.?[0-9]*),\s?(?:-?\d*\.?[0-9]*),\s?(?:-?\d*\.?[0-9]*),\s?(-?\d*\.?[0-9]*),\s?(-?\d*\.?[0-9]*))|(?:matrix3d\((?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(?:-?\d*),\s?(-?\d*),\s?(-?\d*))/,pxTtranslateXRe=/translate(3d|X)?\((-?\d*\.?[0-9]*)px(?:,\s?(-?\d*\.?[0-9]*)px)?/,pxTtranslateYRe=/translate(3d|Y)?\((-?\d*\.?[0-9]*)px(?:,\s?(-?\d*\.?[0-9]*)px)?/,domIdRe=/^[^a-z]+|[^\w:.-]+/gi,whiteSpaceRe$1=/\s+/,// DomHelper#createElement properties which require special processing.
// All other configs such as id and type are applied directly to the element.
elementCreateProperties={tag:1,html:1,children:1,tooltip:1,style:1,dataset:1,parent:1,nextSibling:1,ns:1,reference:1,unmatched:1,// Used by syncId approach
_element:1,// Used by sync to assign used element back to the config, for usage by the caller
onlyChildren:1,// Used by sync to not touch the target element itself,
elementData:1,compareHtml:1// Sync
},// Attributes to ignore on sync
syncIgnoreAttributes={tag:1,html:1,children:1,tooltip:1,parent:1,nextSibling:1,ns:1,reference:1,_element:1,elementData:1,retainElement:1,compareHtml:1},styleIgnoreProperties={length:1,parentRule:1},styleDimensionProperties={width:1,height:1,top:1,left:1,minWidth:1,minHeight:1,maxWidth:1,maxHeight:1,fontSize:1},nativeFocusableTags={BUTTON:1,IFRAME:1,EMBED:1,INPUT:1,OBJECT:1,SELECT:1,TEXTAREA:1,HTML:BrowserHelper.isIE11?1:0,BODY:BrowserHelper.isIE11?0:1},win=window,doc=document,emptyObject={},emptyArray=[],arraySlice=Array.prototype.slice,immediatePromise=new Promise(function(resolve){return resolve();}),devicePixelRatio=window.devicePixelRatio||1,roundPx=devicePixelRatio===1?Math.round:function(px){return Math.round(px*devicePixelRatio)/devicePixelRatio;},fontProps=['font-size','font-size-adjust','font-style','font-weight','font-family','font-kerning','font-stretch','line-height','text-transform','text-decoration','letter-spacing','word-break'],// Used in sync to give ObjectHelper.isDeeplyEqual() some domain knowledge
syncEqualityEvaluator={// Attributes used during creation that should not be compared
ignore:{'_element':1,'parent':1,'elementData':1,'ns':1},// Function to evaluate 'compareHtml' property instead of 'html' for DocumentFragments
evaluate:function evaluate(property,a,b){if(property==='html'&&typeof a.value!=='string'){// DocumentFragment, compare separately supplied html
return a.object.compareHtml===b.object.compareHtml;}}};var templateElement,htmlParser;/**
 * @module Common/helper/DomHelper
 */ /**
 * Helps with dom querying and manipulation.
 * ```
 * DomHelper.createElement({
 *   tag: 'div',
 *   className: 'parent',
 *   style: 'background: red',
 *   children: [
 *      { tag: 'div', className: 'child' },
 *      { tag: 'div', className: 'child' }
 *   ]
 * });
 * ```
 */var DomHelper=/*#__PURE__*/function(){function DomHelper(){_classCallCheck2(this,DomHelper);}_createClass2(DomHelper,null,[{key:"isFocusable",/**
     * Returns `true` if the passed element is focusable either programatically or through pointer gestures.
     * @param {HTMLElement} element The element to test.
     */value:function isFocusable(element){var skipAccessibilityCheck=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!skipAccessibilityCheck){// offsetParent indicates that the element has layout, ie it is deeply visible.
// document.body does not have an offsetParent.
if(element!==document.body&&!element.offsetParent){return false;}}var nodeName=element.nodeName;/*
         * An element is focusable if:
         *   - It is natively focusable, or
         *   - It is an anchor or link with href attribute, or
         *   - It has a tabIndex, or
         *   - It is an editing host (contenteditable="true")
         */return nativeFocusableTags[nodeName]||(nodeName==='A'||nodeName==='LINK')&&!!element.href||element.getAttribute('tabIndex')!=null||element.contentEditable==='true';}/**
     * Returns `true` if the passed element is currently visible in the browser viewport, i.e. user can find it on screen
     * @param {HTMLElement} element The element to test.
     * @param {Boolean} whole Whether to check that whole element is visible, not just part of it.
     */},{key:"isInView",value:function isInView(el){var whole=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var elRect=Rectangle.from(el),inView=true;var fullHeight=elRect.height,fullWidth=elRect.width;while(inView&&el.parentElement){el=el.parentElement;elRect=elRect.intersect(Rectangle.from(el));inView=elRect&&(!whole||elRect.height>=fullHeight&&elRect.width>=fullWidth);}return inView;}},{key:"isCustomElement",/**
     * Returns true if element has opened shadow root
     * @param {HTMLElement} element Element to check
     * @returns {Boolean}
     */value:function isCustomElement(element){return element&&element.shadowRoot;}/**
     * Resolves element from point, checking shadow DOM if requried
     * @param {Number} x
     * @param {Number} y
     * @returns {HTMLElement}
     */},{key:"elementFromPoint",value:function elementFromPoint(x,y){var el=document.elementFromPoint(x,y);// Try to check shadow dom if it exists
if(DomHelper.isCustomElement(el)){el=el.shadowRoot.elementFromPoint(x,y)||el;}return el;}/**
     * Returns active element checking shadow dom too
     * @returns {HTMLElement}
     */},{key:"getId",/**
     * Returns the `id` of the passed element. Generates a unique `id` if the element does not have one.
     * @param {HTMLElement} element The element to return the `id` of.
     */value:function getId(element){return element.id||(element.id='b-element-'+ ++idCounter);}//region Internal
/**
     * Internal convenience fn to allow specifying either an element or a CSS selector to retrieve one
     * @private
     * @param {String|HTMLElement} elementOrSelector element or selector to lookup in DOM
     * @returns {HTMLElement}
     */},{key:"getElement",value:function getElement(elementOrSelector){// also used for SVG elements, so need to use more basic class, that is also returned by querySelector
if(elementOrSelector instanceof Element){return elementOrSelector;}return doc.querySelector(elementOrSelector);}/**
     * Sets attributes passed as object to given element
     * @private
     * @param {String|Element} elementOrSelector
     * @param {Object} attributes
     */},{key:"setAttributes",value:function setAttributes(elementOrSelector,attributes){var element=this.getElement(elementOrSelector);Object.entries(attributes).forEach(function(_ref14){var _ref15=_slicedToArray(_ref14,2),key=_ref15[0],value=_ref15[1];return element.setAttribute(key,value);});}/**
     * Sets a CSS [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length) style value.
     * @param {String|HTMLElement} element The element to set the style in, or, if just the result is required,
     * the style magnitude to return with units added.
     * @param {String} [style] The name of a style property which specifies a [length](https://developer.mozilla.org/en-US/docs/Web/CSS/length)
     * @param {Number|String} [value] The magnitude. If a number is used, the value will be set in `px` units.
     * @returns {String} The style value string.
     */},{key:"setLength",value:function setLength(element,style,value){if(arguments.length===1){return typeof element==='number'?"".concat(element,"px"):element;}else{element=this.getElement(element);return element.style[style]=typeof value==='number'?"".concat(value,"px"):value;}}//endregion
//region Children, going down...
/**
     * Gets the first direct child of `element` that matches `selector.
     * @param {HTMLElement} element Parent element
     * @param {String} selector CSS selector
     * @returns {HTMLElement}
     * @category Query children
     */},{key:"getChild",value:function getChild(element,selector){// TODO: Only IE11 doesn't support :scope
if(BrowserHelper.supportsQueryScope){selector=':scope>'+selector;}else{var elId=element.id||(element.id='b-element-'+ ++idCounter);selector="#".concat(elId," > ").concat(selector);}return element.querySelector(selector);}/**
     * Checks if `element` has any child that matches `selector`.
     * @param {HTMLElement} element Parent element
     * @param {String} selector CSS selector
     * @returns {Boolean} true if any child matches selector
     * @category Query children
     */},{key:"hasChild",value:function hasChild(element,selector){return DomHelper.getChild(element,selector)!=null;}/**
     * Returns all child elements (not necessarily direct children) that matches `selector.
     * @param {HTMLElement} element Parent element
     * @param {String} selector CSS selector
     * @returns {HTMLElement[]} Matched elements, somewhere below `element
     * @category Query children
     */},{key:"children",value:function children(element,selector){return Array.from(element.querySelectorAll(selector));}/**
     * Looks at the specified `element` and all of its children for the one that first matches `selector.
     * @param {HTMLElement} element Parent element
     * @param {String} selector CSS selector
     * @returns {HTMLElement} Matched element, either element or an element below it
     * @category Query children
     */},{key:"down",value:function down(element,selector){if(!element){return null;}if(element.matches&&element.matches(selector)){return element;}if(BrowserHelper.supportsQueryScope){selector=':scope '+selector;}else{var elId=element.id||(element.id='b-element-'+ ++idCounter);selector="#".concat(elId," ").concat(selector);}return element.querySelector(selector);}/**
     * Checks if childElement is a descendant of parentElement (contained in it or a sub element)
     * @param {HTMLElement} parentElement Parent element
     * @param {HTMLElement} childElement Child element, at any level below parent
     * @returns {Boolean}
     * @category Query children
     */},{key:"isDescendant",value:function isDescendant(parentElement,childElement){// In case of IE11 and parentElement is <html>, HTMLDocument#contains is not supported - fallback to body
if(!parentElement.contains){parentElement=parentElement.body;}return parentElement.contains(childElement);}/**
     * Iterates over each result returned from `element.querySelectorAll(selector)`. First turns it into an array to
     * work in IE. Can also be called with only two arguments, in which case the first argument is used as selector and
     * document is used as the element.
     * @param {HTMLElement} element Parent element
     * @param {String} selector CSS selector
     * @param {Function} fn Function called for each found element
     * @category Query children
     */},{key:"forEachSelector",value:function forEachSelector(element,selector,fn){if(typeof element==='string'){fn=selector;selector=element;element=doc;}this.children(element,selector).forEach(fn);}/**
     * Iterates over the direct child elements of the specified element. First turns it into an array to
     * work in IE.
     * @param {HTMLElement} element Parent element
     * @param {Function} fn Function called for each child element
     * @category Query children
     */},{key:"forEachChild",value:function forEachChild(element,fn){Array.from(element.children).forEach(fn);}/**
     * Removes each element returned from `element.querySelectorAll(selector)`.
     * @param {HTMLElement} element
     * @param {String} selector
     * @category Query children
     */},{key:"removeEachSelector",value:function removeEachSelector(element,selector){this.forEachSelector(element,selector,function(child){return child.remove();});}},{key:"removeClsGlobally",value:function removeClsGlobally(element){var _this9=this;for(var _len10=arguments.length,classes=new Array(_len10>1?_len10-1:0),_key10=1;_key10<_len10;_key10++){classes[_key10-1]=arguments[_key10];}classes.forEach(function(cls){return _this9.forEachSelector(element,'.'+cls,function(child){return child.classList.remove(cls);});});}//endregion
//region Parents, going up...
/**
     * Looks at the specified element and all of its parents for the one that first matches selector.
     * @param {HTMLElement} element Element
     * @param {String} selector CSS selector
     * @returns {HTMLElement} Matched element, either the passed in element or an element above it
     * @category Query parents
     */},{key:"up",value:function up(element,selector){/*let parent = element;
        while (parent && !parent.matches(selector)) parent = parent.parentElement;
        return parent;*/return element&&element.closest(selector);}},{key:"getAncestor",value:function getAncestor(element,possibleAncestorParents){var outerElement=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var found=false,ancestor,parent=element;if(!Array.isArray(possibleAncestorParents))possibleAncestorParents=[possibleAncestorParents];while(parent=parent.parentElement){if(possibleAncestorParents.includes(parent)){found=true;break;}if(outerElement&&parent===outerElement)break;ancestor=parent;}if(!found)return null;return ancestor||element;}//endregion
//region Creation
/**
     * Converts the passed id to an id valid for usage as id on a DOM element.
     * @param {String} id
     * @returns {String}
     */},{key:"makeValidId",value:function makeValidId(id){if(id==null)return null;return String(id).replace(domIdRe,'');}/**
     * Creates an Element. Example usage:
     * @example
     * DomHelper.createElement({
     *   tag         : 'table', // defaults to 'div'
     *   cellSpacing : 0,
     *   className   : 'nacho',
     *   html        : 'I am a nacho',
     *   children    : [ { tag: 'tr', ... }, myDomElement ],
     *   parent      : myExistingElement // Or its id
     *   style       : 'font-weight: bold;color: red',
     *   dataset     : { index: 0, size: 10 },
     *   tooltip     : 'Yay!',
     *   ns          : 'http://www.w3.org/1999/xhtml'
     * });
     * @param {Object} config Element config, as in example
     * @param {Boolean} returnAll Specify true to return all elements & child elements created as an array
     * @returns {HTMLElement|HTMLElement[]|Object} Single element or array of elements `returnAll` was set to true.
     * If any elements had a `reference` property, this will be an object containing a reference to
     * all those elements, keyed by the reference name.
     * @category Creation
     */},{key:"createElement",value:function createElement(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var returnAll=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var refs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var syncIdField=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(typeof config.parent==='string'){config.parent=document.getElementById(config.parent);}// nextSibling implies a parent
var parent=config.parent||config.nextSibling&&config.nextSibling.parentNode;var element;if(config.ns){element=doc.createElementNS(config.ns,config.tag||'svg');}else{element=doc.createElement(config.tag||'div');}if(config.html){if(config.html instanceof DocumentFragment){element.appendChild(config.html);}else{element.innerHTML=config.html;}}if(config.tooltip){WidgetHelper.attachTooltip(element,config.tooltip);}if(config.style){this.applyStyle(element,config.style);}if(config.dataset){Object.assign(element.dataset,config.dataset);}if(parent){parent.insertBefore(element,config.nextSibling);}if(config.reference){(refs||(refs={}))[config.reference]=element;element.setAttribute('reference',config.reference);}// Attach custom data to the element, not visible
if(config.elementData){element.elementData=config.elementData;}// Handle things like id, className, type, rel, cellSpacing, href etc which just get assigned.
for(var _i4=0,_Object$keys=Object.keys(config);_i4<_Object$keys.length;_i4++){var prop=_Object$keys[_i4];if(!elementCreateProperties[prop]){if(config.ns){element.setAttribute(prop,config[prop]);//element.setAttributeNS(config.ns, prop, config[prop]);
}else{element[prop]=config[prop];}}}// if returnAll is true, use array
if(returnAll===true){returnAll=[element];}// if it already is an array, add to it (we are probably a child)
else if(Array.isArray(returnAll)){returnAll.push(element);}if(config.children){if(syncIdField){// Map syncId -> child element to avoid querying dom later on
element.syncIdMap={};}config.children.forEach(function(child){// Append string children as text nodes
if(typeof child==='string'){element.appendChild(document.createTextNode(child));}// Just append Elements directly.
else if(isNaN(child.nodeType)){child.parent=element;if(!child.ns){child.ns=config.ns;}var childElement=DomHelper.createElement(child,returnAll,refs,syncIdField),syncId=child.dataset&&child.dataset[syncIdField];// syncId is used with DomHelper.sync to match elements. Populate a map here to make finding them faster
if(syncId!=null){element.syncIdMap[syncId]=childElement;}// Do not want to alter the initial config
delete child.parent;}else{element.appendChild(child);}});}if(syncIdField){// Store used config, to be able to compare on sync to determine if changed without hitting dom
element.lastConfig=config;}// If references were used, return them in an object
// If returnAll was specified, return the array
// By default, return the root element
return refs||returnAll||element;}/**
     * Create element(s) from a template (html string). Note that
     * `textNode`s are discarded unless the `raw` option is passed
     * as `true`.
     *
     * If the template has a single root element, then the single element will be returned
     * unless the `array` option is passed as `true`.
     *
     * If there are multiple elements, then an Array will be returned.
     *
     * @param {String} template The HTML string from which to create DOM content
     * @param {Object} [options] An object containing properties to modify how the DOM is created and returned.
     * @param {Boolean} [options.array] `true` to return an array even if there's only one resulting element.
     * @param {Boolean} [options.raw] Return all child nodes, including text nodes.
     * @param {Boolean} [options.fragment] Return a DocumentFragment.
     * @private
     */},{key:"createElementFromTemplate",value:function createElementFromTemplate(template){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:emptyObject;var array=options.array,raw=options.raw,fragment=options.fragment;var result;// Use template by preference if it exists. It's faster on most supported platforms
// https://jsperf.com/domparser-vs-template/
if(DomHelper.supportsTemplate){(templateElement||(templateElement=doc.createElement('template'))).innerHTML=template;result=templateElement.content;if(fragment){// The template is reused, so therefore is its fragment.
// If we release the fragment to a caller, it must be a clone.
return result.cloneNode(true);}}else{(htmlParser||(htmlParser=new DOMParser())).parseFromString(template,'text/html');result=htmlParser.parseFromString(template,'text/html').body;// We must return a DocumentFragment.
// myElement.append(fragment) inserts the contents of the fragment, not the fragment itself.
if(fragment){// Empty string results in *no document.body* on IE!
var nodes=result?result.childNodes:emptyArray;result=document.createDocumentFragment();while(nodes.length){result.appendChild(nodes[0]);}return result;}// Happens with empty template in IE11
else if(!result){result={children:[],childNodes:[]};}}// Raw means all child nodes are returned
if(raw){result=result.childNodes;}// Otherwise, only element nodes
else{result=result.children;}return result.length===1&&!array?result[0]:arraySlice.call(result);}/**
     * Inserts an `element` at first position in `into`.
     * @param {HTMLElement} into Parent element
     * @param {HTMLElement} element Element to insert, or an element config passed on to createElement()
     * @returns {HTMLElement}
     * @category Creation
     */},{key:"insertFirst",value:function insertFirst(into,element){if(element&&element.nodeType!==Node.ELEMENT_NODE&&element.tag){element=DomHelper.createElement(element);}return into.insertBefore(element,into.firstElementChild);}/**
     * Inserts a `element` before `beforeElement` in `into`.
     * @param {HTMLElement} into Parent element
     * @param {HTMLElement} element Element to insert, or an element config passed on to createElement()
     * @param {HTMLElement} beforeElement Element before which passed element should be inserted
     * @returns {HTMLElement}
     * @category Creation
     */},{key:"insertBefore",value:function insertBefore(into,element,beforeElement){if(element&&element.nodeType!==Node.ELEMENT_NODE&&element.tag){element=DomHelper.createElement(element);}return beforeElement?into.insertBefore(element,beforeElement):DomHelper.insertFirst(into,element);}/**
     * Appends element to parentElement.
     * @param {HTMLElement} parentElement Parent element
     * @param {HTMLElement|Object|String} elementOrConfig Element to insert, or an element config passed on to createElement(), or an html string passed to createElementFromTemplate
     * @returns {HTMLElement}
     * @category Creation
     */},{key:"append",value:function append(parentElement,elementOrConfig){if(elementOrConfig){if(typeof elementOrConfig==='string'){elementOrConfig=DomHelper.createElementFromTemplate(elementOrConfig);}else if(elementOrConfig.nodeType!==Node.ELEMENT_NODE&&elementOrConfig.tag){elementOrConfig=DomHelper.createElement(elementOrConfig);}}if(Array.isArray(elementOrConfig)){return elementOrConfig.map(function(element){return parentElement.appendChild(element);});}else{return parentElement.appendChild(elementOrConfig);}}//endregion
//region Get position
/**
     * Returns the element's `transform translateX` value in pixels.
     * @param {HTMLElement} element
     * @returns {Number} X transform
     * @category Position, get
     */},{key:"getTranslateX",value:function getTranslateX(element){var transformStyle=element.style.transform,matches=pxTtranslateXRe.exec(transformStyle);// Use inline transform style if it contains "translate(npx, npx" or "translate3d(npx, npx" or "translateX(npx"
if(matches){return parseInt(matches[2]);}else{// If the inline style is the matrix() form, then use that, otherwise, use computedStyle
matches=translateMatrixRe.exec(transformStyle)||translateMatrixRe.exec(this.getStyleValue(this.getElement(element),'transform'));return matches?parseInt(matches[1]||matches[3]):0;}}/**
     * Returns the element's `transform translateY` value in pixels.
     * @param {HTMLElement} element
     * @returns {Number} Y coordinate
     * @category Position, get
     */},{key:"getTranslateY",value:function getTranslateY(element){var transformStyle=element.style.transform,matches=pxTtranslateYRe.exec(transformStyle);// Use inline transform style if it contains "translate(npx, npx" or "translate3d(npx, npx" or "translateY(npx"
if(matches){// If it was translateY(npx), use first item in the parens.
var y=parseInt(matches[matches[1]==='Y'?2:3]);// FF will strip `translate(x, 0)` -> `translate(x)`, so need to check for isNaN also
return isNaN(y)?0:y;}else{// If the inline style is the matrix() form, then use that, otherwise, use computedStyle
matches=translateMatrixRe.exec(transformStyle)||translateMatrixRe.exec(this.getStyleValue(this.getElement(element),'transform'));return matches?parseInt(matches[2]||matches[4]):0;}}/**
     * Gets both X and Y coordinates as an array [x, y]
     * @param {HTMLElement} element
     * @returns {Number[]} [x, y]
     * @category Position, get
     */},{key:"getTranslateXY",value:function getTranslateXY(element){return[this.getTranslateX(element),this.getTranslateY(element)];}/**
     * Get elements X offset within a containing element
     * @param {HTMLElement} element
     * @param {HTMLElement} container
     * @returns {Number} X offset
     * @category Position, get
     */},{key:"getOffsetX",value:function getOffsetX(element){var container=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return container?element.getBoundingClientRect().left-container.getBoundingClientRect().left:element.offsetLeft;}/**
     * Get elements Y offset within a containing element
     * @param {HTMLElement} element
     * @param {HTMLElement} container
     * @returns {Number} Y offset
     * @category Position, get
     */},{key:"getOffsetY",value:function getOffsetY(element){var container=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return container?element.getBoundingClientRect().top-container.getBoundingClientRect().top:element.offsetTop;}/**
     * Gets elemnts X and Y offset within containing element as an array [x, y]
     * @param {HTMLElement} element
     * @param {HTMLElement} container
     * @returns {Number[]} [x, y]
     * @category Position, get
     */},{key:"getOffsetXY",value:function getOffsetXY(element){var container=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return[this.getOffsetX(element,container),this.getOffsetY(element,container)];}/**
     * Focus element without scrolling the element into view.
     * @param {HTMLElement} element
     */},{key:"focusWithoutScrolling",value:function focusWithoutScrolling(element){// Check browsers which do support focusOptions
// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
var preventScrollSupported=BrowserHelper.chromeVersion>=64||BrowserHelper.fireFoxVersion>=68;if(preventScrollSupported){element.focus({preventScroll:true});}else{// Examine every parentNode of the target and cache the scrollLeft and scrollTop,
// and restore all values after the focus has taken place
var scrollHierarchy=[];var parent=element.parentNode;while(parent&&parent.scrollLeft!=null){scrollHierarchy.push({element:parent,scrollLeft:parent.scrollLeft,scrollTop:parent.scrollTop});parent=parent.parentNode;}element.focus();scrollHierarchy.forEach(function(_ref16){var element=_ref16.element,scrollLeft=_ref16.scrollLeft,scrollTop=_ref16.scrollTop;// Check first to avoid triggering unnecessary `scroll` events
if(element.scrollLeft!==scrollLeft){element.scrollLeft=scrollLeft;}if(element.scrollTop!==scrollTop){element.scrollTop=scrollTop;}});}}/**
     * Get elements X position on page
     * @param {HTMLElement} element
     * @returns {Number}
     * @category Position, get
     */},{key:"getPageX",value:function getPageX(element){return element.getBoundingClientRect().left+win.pageXOffset;// no window.scrollX in IE11
}/**
     * Get elements Y position on page
     * @param {HTMLElement} element
     * @returns {Number}
     * @category Position, get
     */},{key:"getPageY",value:function getPageY(element){return element.getBoundingClientRect().top+win.pageYOffset;// no window.scrollY in IE11
}/**
     * Returns extremal (min/max) size (height/width) of the element in pixels
     * @param {HTMLElement} element
     * @param {String} style minWidth/minHeight/maxWidth/maxHeight
     * @returns {number}
     * @internal
     */},{key:"getExtremalSizePX",value:function getExtremalSizePX(element,style){var prop=StringHelper.hyphenate(style),measure=prop.split('-')[1],value=this.getStyleValue(element,prop);if(/%/.test(value)){// Element might be detached from DOM
if(element.parentElement){value=parseInt(this.getStyleValue(element.parentElement,measure),10);}else{value=NaN;}}else{value=parseInt(value,10);}return value;}//endregion
//region Set position
/**
     * Set element's `X` translation in pixels.
     * @param {HTMLElement} element
     * @param {Number} x The value by which the element should be translated from its default position.
     * @category Position, set
     */},{key:"setTranslateX",value:function setTranslateX(element,x){var t=DomHelper.getStyleValue(element,'transform').split(/,\s*/);// Avoid blurry text on non-retina displays
x=roundPx(x);if(t.length>1){t[t[0].startsWith('matrix3d')?12:4]=x;element.style.transform=t.join(',');}else{element.style.transform="translateX(".concat(x,"px)");}}/**
     * Set element's `Y` translation in pixels.
     * @param {HTMLElement} element
     * @param {Number} y  The value by which the element should be translated from its default position.
     * @category Position, set
     */},{key:"setTranslateY",value:function setTranslateY(element,y){var t=DomHelper.getStyleValue(element,'transform').split(/,\s*/);// Avoid blurry text on non-retina displays
y=roundPx(y);if(t.length>1){t[t[0].startsWith('matrix3d')?13:5]=y;element.style.transform=t.join(',')+')';}else{element.style.transform="translateY(".concat(y,"px)");}}/**
     * Set element's style `top`.
     * @param {HTMLElement} element
     * @param {Number/String} y The top position. If numeric, `'px'` is used as the unit.
     * @category Position, set
     */},{key:"setTop",value:function setTop(element,y){this.setLength(element,'top',y);}/**
     * Set element's style `left`.
     * @param {HTMLElement} element
     * @param {Number/String} x The top position. If numeric, `'px'` is used as the unit.
     * @category Position, set
     */},{key:"setLeft",value:function setLeft(element,x){this.setLength(element,'left',x);}/**
     * Set elements `X` and `Y` translation in pixels.
     * @param {HTMLElement} element
     * @param {Number} [x] The `X translation.
     * @param {Number} [y] The `Y translation.
     * @category Position, set
     */},{key:"setTranslateXY",value:function setTranslateXY(element,x,y){if(x==null){return this.setTranslateY(element,y);}if(y==null){return this.setTranslateX(element,x);}// Avoid blurry text on non-retina displays
x=roundPx(x);y=roundPx(y);var t=DomHelper.getStyleValue(element,'transform').split(/,\s*/),is3d=t[0].startsWith('matrix3d');if(t.length>1){t[is3d?12:4]=x;t[is3d?13:5]=y;element.style.transform=t.join(',')+')';}else{element.style.transform="translateX(".concat(x,"px) translateY(").concat(y,"px)");}}/**
     * Increase `X` translation
     * @param {HTMLElement} element
     * @param {Number} x The number of pixels by which to increase the element's `X` translation.
     * @category Position, set
     */},{key:"addTranslateX",value:function addTranslateX(element,x){DomHelper.setTranslateX(element,DomHelper.getTranslateX(element)+x);}/**
     * Increase `Y` position
     * @param {HTMLElement} element
     * @param {Number} y The number of pixels by which to increase the element's `Y` translation.
     * @category Position, set
     */},{key:"addTranslateY",value:function addTranslateY(element,y){DomHelper.setTranslateY(element,DomHelper.getTranslateY(element)+y);}/**
     * Increase X position
     * @param {HTMLElement} element
     * @param x
     * @category Position, set
     */},{key:"addLeft",value:function addLeft(element,x){DomHelper.setLeft(element,DomHelper.getOffsetX(element)+x);}/**
     * Increase Y position
     * @param {HTMLElement} element
     * @param y
     * @category Position, set
     */},{key:"addTop",value:function addTop(element,y){DomHelper.setTop(element,DomHelper.getOffsetY(element)+y);}/**
     * Align the passed element with the passed target according to the align spec.
     * @param {HTMLElement} element The element to align.
     * @param {HTMLElement|Common.helper.util.Rectangle} target The target element or rectangle to align to
     * @param {Object} alignSpec See {@link Common.helper.util.Rectangle#function-alignTo} Defaults to `{ align : 't0-t0' }`
     */},{key:"alignTo",value:function alignTo(element,target){var alignSpec=arguments.length>2&&arguments[2]!==undefined?arguments[2]:t0t0;target=target instanceof Rectangle?target:Rectangle.from(target,null,true);var elXY=this.getTranslateXY(element),elRect=Rectangle.from(element,null,true),targetRect=elRect.alignTo(Object.assign(alignSpec,{target:target}));this.setTranslateXY(element,elXY[0]+targetRect.x-elRect.x,elXY[1]+targetRect.y-elRect.y);}//endregion
//region Styles & CSS
/**
     * Returns a style value or values for the passed element.
     * @param {HTMLElement} element The element to read styles from
     * @param {String|String[]} propName The property or properties to read
     * @param {Boolean} [inline=false] Pass as `true` to read the element's inline style.
     * Note that this could return inaccurate results if CSS rules apply to this element.
     * @return {String|Object} The value or an object containing the values keyed by the requested property name.
     * @category CSS
     */},{key:"getStyleValue",value:function getStyleValue(element,propName,inline,pseudo){var styles=inline?element.style:element.ownerDocument.defaultView.getComputedStyle(element,pseudo);if(Array.isArray(propName)){var result={};var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=propName[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=true){var prop=_step5.value;result[prop]=styles.getPropertyValue(StringHelper.hyphenate(prop));}}catch(err){_didIteratorError5=true;_iteratorError5=err;}finally{try{if(!_iteratorNormalCompletion5&&_iterator5.return!=null){_iterator5.return();}}finally{if(_didIteratorError5){throw _iteratorError5;}}}return result;}// Use the elements owning view to get the computed style.
// Ensure the property name asked for is hyphenated.
// getPropertyValue doesn't work with camelCase
return styles.getPropertyValue(StringHelper.hyphenate(propName));}/**
     * Applies specified style to the passed element. Style can be an object or a string.
     * @param {HTMLElement} element Target element
     * @param {String|Object} style Style to apply, 'border: 1px solid black' or { border: '1px solid black' }
     * @param {Boolean} [overwrite] Specify `true` to replace style instead of applying changes
     * @category CSS
     */},{key:"applyStyle",value:function applyStyle(element,style){var overwrite=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(typeof style==='string'){if(overwrite){// Only assign if either end has any styles, do not want to add empty `style` tag on element
if(style.length||element.style.cssText.length){element.style.cssText=style;}}else{// Add style so as not to delete configs in style such as width, height, flex etc.
// If a style is already there, the newest, appended one will take precedence.
element.style.cssText+=style;}}else{if(overwrite){element.style.cssText='';//element.removeAttribute('style');
}// Prototype chained objects may be passed, so use direct loop.
for(var key in style){// Ignore readonly properties of the CSSStyleDeclaration object:
// https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration
if(!styleIgnoreProperties[key]){// Append 'px' for numeric dimensions
if(styleDimensionProperties[key]&&typeof style[key]=='number'){element.style[StringHelper.hyphenate(key)]=style[key]+'px';}else{element.style[StringHelper.hyphenate(key)]=style[key];}}}}}},{key:"getCSSText",value:function getCSSText(style){if(typeof style==='string'){return style;}var cssText='';for(var key in style){// Ignore readonly properties of the CSSStyleDeclaration object:
// https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration
if(!styleIgnoreProperties[key]){cssText+="".concat(StringHelper.hyphenate(key),":").concat(style[key],";");}}return cssText;}// For IE11, it doesn't support adding/removing multiple classes at once
/**
     * Add multiple classes to elements classList. Helper for IE11 which does not support it directly
     * @param {HTMLElement} element
     * @param {String[]} classes
     * @category CSS
     */},{key:"addClasses",value:function addClasses(element,classes){classes.forEach(function(cls){return element.classList.add(cls);});}/**
     * Remove multiple classes to elements classList. Helper for IE11 which does not support it directly
     * @param {HTMLElement} element
     * @param {String[]} classes
     * @category CSS
     */},{key:"removeClasses",value:function removeClasses(element,classes){classes.forEach(function(cls){return element.classList.remove(cls);});}/**
     * Toggle multiple classes in elements classList. Helper for IE11 which does not support toggling with force or for
     * multiple classes at once.
     * @param {HTMLElement} element
     * @param {String[]} classes
     * @param {Boolean} [force] Specify true to add classes, false to remove. Leave blank to toggle
     * @category CSS
     */},{key:"toggleClasses",value:function toggleClasses(element,classes){var force=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!Array.isArray(classes)){classes=[classes];}if(force===true){this.addClasses(element,classes);}else if(force===false){this.removeClasses(element,classes);}else{classes.forEach(function(cls){return element.classList.toggle(cls);});}}/**
     * Adds a CSS class to an element during the specified duration
     * @param {HTMLElement} element Target element
     * @param {String} cls CSS class to add temporarily
     * @param {Number} duration Duration in ms, 0 means cls will not be applied
     * @category CSS
     */},{key:"addTemporaryClass",value:function addTemporaryClass(element,cls,duration){if(duration>0){element.classList.add(cls);setTimeout(function(){element&&element.classList.remove(cls);},duration);}}//endregion
//region Effects
/**
     * Highlights the passed element or Rectangle according to the theme's highlihghting rules.
     * Usually an animated framing effect.
     * @param {HTMLElement/Common.helper.util.Rectangle} element The element or Rectangle to highlight.
     */},{key:"highlight",value:function highlight(element){if(element instanceof Rectangle){return element.highlight();}return new Promise(function(resolve){setTimeout(function(){element.classList.add('b-fx-highlight');setTimeout(function(){element.classList.remove('b-fx-highlight');resolve();},1000);},0);});}//endregion
//region Measuring / Scrollbar
/**
     * Measures the scrollbar width using a hidden div. Caches result
     * @returns {Number}
     * @readonly
     */},{key:"resetScrollBarWidth",/**
     * Resets DomHelper.scrollBarWidth cache, triggering a new measurement next time it is read
     */value:function resetScrollBarWidth(){scrollBarWidth=null;}/**
     * Measures the text width using a hidden div
     * @param {String} text
     * @param {HTMLElement} sourceElement
     * @returns {Number} width
     * @category Measure
     */},{key:"measureText",value:function measureText(text,sourceElement,useHTML,parentElement){var offScreenDiv=this.getMeasureElement(sourceElement,parentElement);offScreenDiv[useHTML?'innerHTML':'innerText']=text;var result=offScreenDiv.clientWidth;offScreenDiv.className='';return result;}/**
     * Measures a relative size, such as a size specified in `em` units for the passed element.
     * @param {String} size The CSS size value to measure.
     * @param {HTMLElement} sourceElement
     * @returns {Number} size The size in pixels of the passed relative measurement.
     * @category Measure
     */},{key:"measureSize",value:function measureSize(size,sourceElement){if(!size){return 0;}if(typeof size==='number'){return size;}if(!size.length){return 0;}if(/^\d+(px)?$/.test(size)){return parseInt(size);}if(sourceElement){var offScreenDiv=this.getMeasureElement(sourceElement);offScreenDiv.innerHTML='';offScreenDiv.style.width=DomHelper.setLength(size);//const result = BrowserHelper.isIE11 ?  offScreenDiv.offsetWidth : offScreenDiv.clientWidth;
var result=offScreenDiv.offsetWidth;offScreenDiv.style.width=offScreenDiv.className='';return result;}if(/^\d+em$/.test(size)){return parseInt(size)*DEFAULT_FONT_SIZE;}return isNaN(size)?0:parseInt(size);}// parentElement allows measurement to happen inside a specific element, allowing scoped css rules to match
},{key:"getMeasureElement",value:function getMeasureElement(sourceElement){var parentElement=arguments.length>1&&arguments[1]!==undefined?arguments[1]:doc.body;var sourceElementStyle=win.getComputedStyle(sourceElement),offScreenDiv=parentElement.offScreenDiv=parentElement.offScreenDiv||DomHelper.createElement({parent:parentElement,style:'position:fixed;top:-10000px;left:-10000px;visibility:hidden;contain:strict',className:'b-measure-element',children:[{style:'white-space:nowrap;display:inline-block;will-change:contents;width:auto;contain:none'}]},true)[1];fontProps.forEach(function(prop){if(offScreenDiv.style[prop]!==sourceElementStyle[prop]){offScreenDiv.style[prop]=sourceElementStyle[prop];}});offScreenDiv.className=sourceElement.className;// In case the measure element was moved/removed, re-add it
if(offScreenDiv.parentElement.parentElement!==parentElement){parentElement.appendChild(offScreenDiv.parentElement);}return offScreenDiv;}//endregion
//region Sync
/**
     * Sync one source element attributes, children etc. to a target element. Source element can be specified as a html
     * string, as a `createElement` config or an actual HTMLElement
     * @param {String|HTMLElement|Object} config Source "element" to copy from or a config object with the following options:
     * @param {HTMLElement} [config.sourceElement] Source element to copy from. Mutually exclusive with `html` and `elementConfig`
     * @param {String} [config.html] HTML string to use instead of source element. Mutually exclusive with `sourceElement` and `elementConfig`
     * @param {Object} [config.elementConfig] A `createElement` config object defining a source element. Mutually exclusive with `sourceElement` and `html`
     * @param {Object} [config.targetElement] Target element to apply to
     * @param {Boolean|String} [config.useSyncId] Specify `true` to use `dataset.syncId` for element re-usage, or a string to match elements on another dataset field. Only valid in combination with `elementConfig`
     * @param {Function} [config.callback] A function that will be called on element reusage, creation and similar
     * @param {HTMLElement} targetElement Target element to apply to, can also be specified as part of the config object
     * @returns {HTMLElement} Returns the updated targetElement (which is also updated in place)
     */},{key:"sync",value:function sync(config,targetElement){var element=config,useSyncId=false;if(!(config instanceof HTMLElement)&&typeof config!=='string'){if(config.sourceElement){element=config.sourceElement;}else if(config.html){element=config.html;}else if(config.elementConfig){element=config.elementConfig;}if(config.targetElement){targetElement=config.targetElement;}var useSyncIdValue=(config.elementConfig?config.elementConfig.useSyncId:null)||config.useSyncId;// true -> syncId, otherwise use specified value
useSyncId=useSyncIdValue===true?'syncId':useSyncIdValue;if(useSyncId&&!config.elementConfig){throw new Error('syncId can only be used in combination with elementConfig');}}if(typeof element==='string'){element=this.createElementFromTemplate(element);}this.performSync(element,targetElement,useSyncId,config.callback);return targetElement;}// Internal helper used for recursive syncing
},{key:"performSync",value:function performSync(sourceElement,targetElement,useSyncId,callback){var isElement=sourceElement instanceof HTMLElement,onlyChildren=!isElement?sourceElement.onlyChildren:false;// Syncing identical elements is a no-op
if(// When syncing elements, compare outerHTML
isElement&&sourceElement.outerHTML!==targetElement.outerHTML||// When syncing a config, compare to config cached on target element
!isElement&&(!useSyncId||!ObjectHelper.isDeeplyEqual(sourceElement,targetElement.lastConfig,syncEqualityEvaluator))){// TODO: Since targetElement holds its previously used config in lastConfig it would be possible to compare to
//   that instead of to the actual element, to gain some speed
// Sync without affecting then containing element?
if(!onlyChildren){this.syncAttributes(sourceElement,targetElement);this.syncContent(sourceElement,targetElement);}this.syncChildren(sourceElement,targetElement,useSyncId,callback);// When using config, cache the config on the target for future comparison
if(!isElement){targetElement.lastConfig=sourceElement;}return true;}else if(!isElement){// Sync took no action, notify the world
callback&&callback({action:'none',config:sourceElement,element:targetElement});}return false;}// Attributes as map { attr : value, ... }, either from an html element or from a config
},{key:"getSyncAttributes",value:function getSyncAttributes(elementOrConfig){var attributes={},// Attribute names, simplifies comparisons and calls to set/removeAttribute
names=[];// Extract from element
if(elementOrConfig instanceof HTMLElement){for(var i=0;i<elementOrConfig.attributes.length;i++){var attr=elementOrConfig.attributes[i];if(attr.specified){var name=attr.name.toLowerCase();attributes[name]=attr.value;names.push(name);}}}// Or from elementConfig
else{Object.keys(elementOrConfig).forEach(function(attr){if(!syncIgnoreAttributes[attr]){var originalAttr=attr;if(attr==='className'){attr='class';}var _name=attr.toLowerCase();attributes[_name]=elementOrConfig[originalAttr];names.push(_name);}});}return{attributes:attributes,names:names};}/**
     * Syncs attributes from sourceElement to targetElement.
     * @private
     * @param {HTMLElement|Object} sourceElement
     * @param {HTMLElement} targetElement
     */},{key:"syncAttributes",value:function syncAttributes(sourceElement,targetElement){var _this$getSyncAttribut=this.getSyncAttributes(sourceElement),sourceAttributes=_this$getSyncAttribut.attributes,sourceNames=_this$getSyncAttribut.names,_this$getSyncAttribut2=this.getSyncAttributes(targetElement),targetAttributes=_this$getSyncAttribut2.attributes,targetNames=_this$getSyncAttribut2.names,hasDataset=sourceNames.includes('dataset'),toAdd=sourceNames.filter(function(attr){return!targetNames.includes(attr);}),toRemove=targetNames.filter(function(attr){return!sourceNames.includes(attr)&&(!hasDataset||!attr.startsWith('data-'));}),toSync=sourceNames.filter(function(attr){return targetNames.includes(attr);});if(toAdd.length>0){for(var i=0;i<toAdd.length;i++){var attr=toAdd[i];// Style requires special handling
if(attr==='style'){this.applyStyle(targetElement,sourceAttributes.style,true);}// So does dataset
else if(attr==='dataset'){Object.assign(targetElement.dataset,sourceAttributes.dataset);}// Other attributes are set using setAttribute (since it calls toString() DomClassList works fine)
else{targetElement.setAttribute(attr,sourceAttributes[attr]);}}}if(toRemove.length>0){for(var _i5=0;_i5<toRemove.length;_i5++){targetElement.removeAttribute(toRemove[_i5]);}}if(toSync.length>0){for(var _i6=0;_i6<toSync.length;_i6++){var _attr=toSync[_i6];// Set all attributes that has changed, with special handling for style
if(_attr==='style'){// TODO: Check for changes?
this.applyStyle(targetElement,sourceAttributes.style,true);}// And dataset
else if(_attr==='dataset'){// TODO: Any cost to assigning same values?
Object.assign(targetElement.dataset,sourceAttributes.dataset);}// And class, which might be a DomClassList
else if(_attr==='class'&&sourceAttributes[_attr].isDomClassList){if(!sourceAttributes.class.isEqual(targetAttributes.class)){targetElement.setAttribute('class',sourceAttributes.class);}}else if(targetAttributes[_attr]!==sourceAttributes[_attr]){targetElement.setAttribute(_attr,sourceAttributes[_attr]);}}}}/**
     * Sync content (innerText) from sourceElement to targetElement
     * @private
     * @param {HTMLElement|Object} sourceElement
     * @param {HTMLElement} targetElement
     */},{key:"syncContent",value:function syncContent(sourceElement,targetElement){var sourceChildCount,html=null;if(sourceElement instanceof HTMLElement){sourceChildCount=sourceElement.childElementCount;}else{sourceChildCount=sourceElement.children?sourceElement.children.length:0;html=sourceElement.html;// elementData holds custom data that we want to attach to the element (not visible in dom)
if(sourceElement.elementData){targetElement.elementData=sourceElement.elementData;}}// No child elements in source, remove any from target
if(sourceChildCount===0&&targetElement.childElementCount>0&&!html){targetElement.innerHTML='';}// Apply html from config
else if(html){// If given a DocumentFragment, replace content with it
if(html instanceof DocumentFragment){// Syncing a textNode to a textNode? Use shortcut
if(targetElement.childNodes.length===1&&targetElement.childElementCount===0&&html.childNodes.length===1&&html.childElementCount===0){this.setInnerText(targetElement,html.firstChild.data);}else{// TODO: Is there a faster way?
targetElement.innerHTML='';targetElement.appendChild(html);}}// Something that might be html, set innerHTML
else if(html.includes('<')){targetElement.innerHTML=html;}// Plain text, prefer setting data on first text node
else{this.setInnerText(targetElement,html);}}}},{key:"setInnerText",value:function setInnerText(targetElement,text){// setting firstChild.data is faster than innerText (and innerHTML),
// but in some cases the inner node is lost and needs to be recreated
var firstChild=targetElement.firstChild;if(firstChild){firstChild.data=text;}else{// textContent is supposed to be faster than innerText, since it does not trigger layout
targetElement.textContent=text;}}// Sync children of one element to another
},{key:"syncChildrenElement",value:function syncChildrenElement(sourceElement,targetElement){var me=this,sourceNodes=arraySlice.call(sourceElement.childNodes),targetNodes=arraySlice.call(targetElement.childNodes);while(sourceNodes.length){var sourceNode=sourceNodes.shift(),targetNode=targetNodes.shift();// only textNodes and elements allowed (no comments)
if(sourceNode&&sourceNode.nodeType!==Node.TEXT_NODE&&sourceNode.nodeType!==Node.ELEMENT_NODE){throw new Error("Source node type ".concat(sourceNode.nodeType," not supported by DomHelper.sync()"));}if(targetNode&&targetNode.nodeType!==Node.TEXT_NODE&&targetNode.nodeType!==Node.ELEMENT_NODE){throw new Error("Target node type ".concat(targetNode.nodeType," not supported by DomHelper.sync()"));}if(!targetNode){// out of target nodes, add to target
targetElement.appendChild(sourceNode);}else{// match node
if(sourceNode.nodeType===targetNode.nodeType){// same type of node, take action depending on which type
if(sourceNode.nodeType===Node.TEXT_NODE){// text
targetNode.data=sourceNode.data;}else{if(sourceNode.tagName===targetNode.tagName){me.performSync(sourceNode,targetNode);}else{// new tag, remove targetNode and insert new element
targetElement.insertBefore(sourceNode,targetNode);targetNode.remove();}}}// Trying to set text node as element, use it as innerText
// (we get this in FF with store mutations and List)
else if(sourceNode.nodeType===Node.TEXT_NODE&&targetNode.nodeType===Node.ELEMENT_NODE){targetElement.innerText=sourceNode.data.trim();}else{throw new Error('Currently no support for transforming nodeType');}}}// Out of source nodes, remove remaining target nodes
targetNodes.forEach(function(targetNode){targetNode.remove();});}// Sync children from a config object to an element, able to reuse elements
},{key:"syncChildrenConfig",value:function syncChildrenConfig(config,targetElement,syncIdField,callback){// Having specified html replaces all inner content, no point in syncing
if(config.html){return;}var me=this,sourceConfigs=arraySlice.call(config.children||[]),targetElements=arraySlice.call(targetElement.children),syncIdMap=targetElement.syncIdMap||{};var syncId;// Always repopulate the map, since elements might get used by other syncId below
if(syncIdField){targetElement.syncIdMap={};}while(sourceConfigs.length){var sourceConfig=sourceConfigs.shift();// If syncIdField was supplied, we should first try to reuse element with matching "id"
if(syncIdField&&sourceConfig.dataset){syncId=sourceConfig.dataset[syncIdField];// We have an id to look for
if(syncId!=null&&!sourceConfig.unmatched){// Find any matching element
var syncTargetElement=syncIdMap[syncId];if(syncTargetElement){if(// Ignore if flagged with `retainElement` (for example during dragging)
!sourceConfig.retainElement&&// Otherwise sync with the matched element
me.performSync(sourceConfig,syncTargetElement,syncIdField,callback)){// Sync took some action, notify the world
callback&&callback({action:'reuseOwnElement',config:sourceConfig,element:syncTargetElement,syncId:syncId});}// Since it wont sync above when flagged to be retained, we need to apply the flag here
if(sourceConfig.retainElement){syncTargetElement.retainElement=true;}// And remove it when no longer needed
else if(syncTargetElement.retainElement){syncTargetElement.retainElement=false;}// Cache the element on the syncId for faster retrieval later
targetElement.syncIdMap[syncId]=syncTargetElement;// Attach to config to be reachable by caller
sourceConfig._element=syncTargetElement;// Remove our target from targetNodes, no other node is allowed to sync with it
ArrayHelper.remove(targetElements,syncTargetElement);syncTargetElement.isReleased=false;}else{// No match, move to end of queue to not steal some one else's element
sourceConfigs.push(sourceConfig);// Also flag as unmatched to know that when we reach this element again
sourceConfig.unmatched=true;}// Node handled, carry on with next one
continue;}}// Avoid polluting the config object when done
if(sourceConfig.unmatched){delete sourceConfig.unmatched;}// Skip over any retained elements
var targetNode=void 0;for(var i=0;i<targetElements.length&&!targetNode;i++){if(!targetElements[i].retainElement){targetNode=targetElements[i];// shift is much faster than splice...
if(i===0){targetElements.shift();}else{targetElements.splice(i,1);}}}// Out of target nodes, add to target
if(!targetNode){// Create a new element, passing along the syncIdField if used, to allow populating the syncIdMap during creation
var newElement=targetElement.appendChild(DomHelper.createElement(sourceConfig,false,null,syncIdField));// TODO: Move to createElement?
if(syncId!=null){targetElement.syncIdMap[syncId]=newElement;}sourceConfig._element=newElement;callback&&callback({action:'newElement',config:sourceConfig,element:newElement,syncId:syncId});}// We have targets left
else{// Matching element tag, sync it
if((sourceConfig.tag||'div').toLowerCase()===targetNode.tagName.toLowerCase()){var oldConfig=targetNode.lastConfig;me.performSync(sourceConfig,targetNode,syncIdField,callback);if(syncId!=null){targetElement.syncIdMap[syncId]=targetNode;targetNode.isReleased=false;}sourceConfig._element=targetNode;callback&&callback({action:'reuseElement',config:sourceConfig,oldConfig:oldConfig,element:targetNode,syncId:syncId});}// Not matching, replace it
else{var _newElement=targetElement.insertBefore(DomHelper.createElement(sourceConfig),targetNode);// TODO: Move to createElement?
if(syncId!=null){targetElement.syncIdMap[syncId]=_newElement;}sourceConfig._element=_newElement;callback&&callback({action:'newElement',config:sourceConfig,element:_newElement,syncId:syncId});targetNode.remove();}}}// Out of source nodes, remove remaining target nodes
targetElements.forEach(function(targetNode){// Element might be retained, hands off (for example while dragging)
if(!targetNode.retainElement){// When using syncId to reuse elements, "release" left over elements instead of removing them
if(syncIdField){// Prevent releasing already released element
if(!targetNode.isReleased){targetNode.className='b-released';targetNode.isReleased=true;callback&&callback({action:'releaseElement',config:targetNode.lastConfig,oldConfig:targetNode.lastConfig,element:targetNode});targetNode.elementData=targetNode.lastConfig=null;}}// In normal sync mode, remove left overs
else{targetNode.remove();}}else if(syncIdField){// Keep retained element in map
targetElement.syncIdMap[targetNode.dataset[syncIdField]]=targetNode;}});}/**
     * Sync traversing children
     * @private
     * @param {HTMLElement|Object} sourceElement Source element
     * @param {HTMLElement} targetElement Target element
     * @param {String} syncIdField Field in dataset to use for element re-usage
     */},{key:"syncChildren",value:function syncChildren(sourceElement,targetElement,syncIdField,callback){if(sourceElement instanceof HTMLElement){this.syncChildrenElement(sourceElement,targetElement,syncIdField,callback);}else{this.syncChildrenConfig(sourceElement,targetElement,syncIdField,callback);}}/**
     * Synchronizes the passed element's `classList` with the class names
     * passed in either Array or String format or Object. Avoiding mutating an element's
     * `classList` or `className` can avoid browser style recalculations.
     * @param {HTMLElement} element The element whose class list to synchronize.
     * @param {String[]|String|Object} newClasses The incoming class names to set on the element.
     * @category CSS
     */},{key:"syncClassList",value:function syncClassList(element,newClasses){var classList=element.classList,isString=typeof newClasses==='string',newClsArray=isString?newClasses.trim().split(whiteSpaceRe$1):Array.isArray(newClasses)?newClasses:ObjectHelper.getTruthyKeys(newClasses),classCount=newClsArray.length;var changed=classList.length!==classCount,i;// If the incoming and existing class lists are the same length
// then check that each contains the same names. As soon as
// we find a non-matching name, we know we have to update the
// className.
for(i=0;!changed&&i<classCount;i++){changed=!classList.contains(newClsArray[i]);}if(changed){element.className=isString?newClasses:newClsArray.join(' ');}}/**
     * Changes the theme to the passed theme name if possible.
     *
     * Theme names are case insensitive. The `href` used is all lower case.
     *
     * To use this method, the `<link rel="stylesheet">` _must_ use the default,
     * Bryntum-supplied CSS files where the `href` end with `<themeName>.css`, so that
     * it can be found in the document, and switched out for a new link with
     * the a modified `href`. The new `href` will use the same path, just
     * with the `themeName` portion subsituted for the new name.
     *
     * If no `<link>` with that name pattern can be found, an error will be thrown.
     *
     * If you use this method, you  must ensure that the theme files are
     * all accessible on your server.
     *
     * Because this is an asynchronous operation, a `Promise` is returned.
     * The theme change event is passed to the success function. If the
     * theme was not changed, because the theme name passed is the current theme,
     * nothing is passed to the success function.
     *
     * The theme change event contains two properties:
     *
     *  - `prev` The previous Theme name.
     *  - `theme` The new Theme name.
     *
     * @param {String} newThemeName
     * @returns {Promise} A promise who's success callback receives the theme change
     * event if the theme in fact changed. If the theme `href` could not be loaded,
     * the failure callback is called, passing the error event caught.
     */},{key:"setTheme",value:function setTheme(newThemeName){newThemeName=newThemeName.toLowerCase();var oldThemeName=this.themeInfo.name.toLowerCase(),oldThemeLink=document.head.querySelector('#bryntum-theme')||document.head.querySelector("[href$=\"".concat(oldThemeName,".css\"]"));// Theme link href ends with <themeName>.css also there could be a query - css?11111...
if(!oldThemeLink||!oldThemeLink.href.includes("".concat(oldThemeName,".css"))){throw new Error("Theme link for ".concat(oldThemeName," not found"));}// Do not reapply same theme
if(oldThemeLink.href.includes(newThemeName)){return immediatePromise;}return new Promise(function(resolve,reject){var newThemeLink=document.createElement('link'),nextSibling=oldThemeLink.nextSibling,oldThemeName=DomHelper.themeInfo.name.toLowerCase(),themeEvent={theme:newThemeName,prev:oldThemeName},onThemeLoad=function onThemeLoad(){themeInfo=null;oldThemeLink.remove();window.bryntum.GlobalEvents.trigger('theme',themeEvent);resolve(themeEvent);},onThemeLoadError=function onThemeLoadError(e){reject(e);};newThemeLink.rel='stylesheet';newThemeLink.id='bryntum-theme';newThemeLink.addEventListener('load',onThemeLoad);newThemeLink.addEventListener('error',onThemeLoadError);newThemeLink.href=oldThemeLink.href.replace(oldThemeName,newThemeName);nextSibling.parentNode.insertBefore(newThemeLink,nextSibling);});}/**
     * A theme information object about the current theme.
     *
     * Currently this has only one property:
     *
     *   - `name` The current theme name.
     * @property {Object}
     * @readonly
     */},{key:"activeElement",get:function get(){var el=document.activeElement;while(el.shadowRoot){el=el.shadowRoot.activeElement;}return el;}},{key:"scrollBarWidth",get:function get(){// Ensure the measurement is only done once, when the value is null and body is available
if(scrollBarWidth===null&&doc.body){var element=DomHelper.createElement({parent:doc.body,style:'position:absolute;top:-999px;width:100px;height:100px;overflow:scroll'});scrollBarWidth=element.offsetWidth-element.clientWidth;element.remove();}return scrollBarWidth;}},{key:"themeInfo",get:function get(){if(!themeInfo){var testDiv=this.createElement({parent:document.body,className:'b-theme-info'}),// Need to be a pseudo element for Edge to report content correctly
themeData=this.getStyleValue(testDiv,'content',false,':before');if(themeData){// themeData could be invalid JSON string in case there is no content rule
try{themeInfo=JSON.parse(themeData.replace(/^["']|["']$|\\/g,''));}catch(e){themeInfo=null;}}testDiv.remove();}return themeInfo;}//endregion
}]);return DomHelper;}();exports.DomHelper=DomHelper;var clearTouchTimer;var clearTouchEvent=function clearTouchEvent(){return DomHelper.isTouchEvent=false;},setTouchEvent=function setTouchEvent(){DomHelper.isTouchEvent=true;// Jump round the click delay
clearTimeout(clearTouchTimer);clearTouchTimer=setTimeout(clearTouchEvent,400);};// Set event type flags so that mousedown and click handlers can know whether a touch gesture was used.
// This is used. This must stay until we have a unified DOM event system which handles both touch and mouse events.
doc.addEventListener('touchstart',setTouchEvent,true);doc.addEventListener('touchend',setTouchEvent,true);DomHelper.supportsTemplate='content'in doc.createElement('template');//region Polyfills
// TODO: include babels polyfills instead of keeping own?
if(!('children'in Node.prototype)){var elementFilter=function elementFilter(node){return node.nodeType===1;};Object.defineProperty(Node.prototype,'children',{get:function get(){return Array.prototype.filter.call(this.childNodes,elementFilter);}});}if(!Element.prototype.matches){Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(s){var matches=(this.document||this.ownerDocument).querySelectorAll(s),i=matches.length;while(--i>=0&&matches.item(i)!==this){}return i>-1;};}if(win.Element&&!Element.prototype.closest){Node.prototype.closest=Element.prototype.closest=function(s){var el=this;if(!doc.documentElement.contains(el))return null;do{if(el.matches(s))return el;el=el.parentElement||el.parentNode;}while(el!==null&&el.nodeType===1);return null;};}else{// It's crazy that closest is not already on the Node interface!
Node.prototype.closest=function(selector){return this.parentNode.closest(selector);};}// from:https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md
(function(arr){arr.forEach(function(item){if(item.hasOwnProperty('remove')){return;}Object.defineProperty(item,'remove',{configurable:true,enumerable:true,writable:true,value:function remove(){this.parentNode&&this.parentNode.removeChild(this);}});});})([Element.prototype,CharacterData.prototype,DocumentType.prototype]);// IE11 polyfill
if(!SVGElement.prototype.contains){SVGElement.prototype.contains=function(node){do{if(this===node){return true;}node=node.parentNode;}while(node);return false;};}// IE11 polyfill for Event constructors
if(typeof win.CustomEvent!=='function'){var evt,_constructor;win.CustomEvent=_constructor=function _constructor(event){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{bubbles:false,cancelable:false,detail:undefined};evt=doc.createEvent('CustomEvent');evt.initCustomEvent(event,params.bubbles,params.cancelable,params.detail);return evt;};_constructor.prototype=win.Event.prototype;win.MouseEvent=_constructor=function _constructor(event){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{bubbles:false,cancelable:false,detail:undefined};evt=doc.createEvent('MouseEvents');evt.initMouseEvent(event,params.bubbles,params.cancelable,doc.defaultView||win,params.detail,params.screenX,params.screenY,params.clientX,params.clientY,false,false,false,false,0,document);return evt;};_constructor.prototype=win.Event.prototype;win.KeyboardEvent=_constructor=function _constructor(event){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{bubbles:false,cancelable:false,detail:undefined};var modifiers="".concat(params.shiftKey?'Shift ':'').concat(params.ctrlKey?'Control':'');evt=doc.createEvent('KeyboardEvent');evt.initKeyboardEvent(event,params.bubbles,params.cancelable,doc.defaultView||win,params.key,params.location,modifiers,false,'');return evt;};_constructor.prototype=win.Event.prototype;}//endregion
// https://gist.github.com/brettz9/4093766
if(BrowserHelper.isEdge){if(!Object.getOwnPropertyDescriptor(SVGElement.prototype,'dataset')||!Object.getOwnPropertyDescriptor(SVGElement.prototype,'dataset').get){var propDescriptor={enumerable:true,get:function get(){var i,that=this,map={},attrVal,attrName,propName,attribute,attributes=this.attributes,attsLength=attributes.length,toUpperCase=function toUpperCase(n0){return n0.charAt(1).toUpperCase();},getter=function getter(){return this;},setter=function setter(attrName,value){return typeof value!=='undefined'?this.setAttribute(attrName,value):this.removeAttribute(attrName);};for(i=0;i<attsLength;i++){attribute=attributes[i];// Fix: This test really should allow any XML Name without
//         colons (and non-uppercase for XHTML)
if(attribute&&attribute.name&&/^data-\w[\w-]*$/.test(attribute.name)){attrVal=attribute.value;attrName=attribute.name;// Change to CamelCase
propName=attrName.substr(5).replace(/-./g,toUpperCase);Object.defineProperty(map,propName,{enumerable:this.enumerable,get:getter.bind(attrVal||''),set:setter.bind(that,attrName)});}}return map;}};// FF enumerates over element's dataset, but not
// SVGElement.prototype.dataset; IE9 iterates over both
Object.defineProperty(SVGElement.prototype,'dataset',propDescriptor);}}// Polyfill to allow an array to be passed to classList.add/remove
var nativeAdd=DOMTokenList.prototype.add,nativeRemove=DOMTokenList.prototype.remove;DOMTokenList.prototype.add=function(cls){if(Array.isArray(cls)){nativeAdd.call.apply(nativeAdd,[this].concat(_toConsumableArray(cls)));}else{nativeAdd.call.apply(nativeAdd,[this].concat(Array.prototype.slice.call(arguments)));}};DOMTokenList.prototype.remove=function(cls){if(Array.isArray(cls)){nativeRemove.call.apply(nativeRemove,[this].concat(_toConsumableArray(cls)));}else{nativeRemove.call.apply(nativeRemove,[this].concat(Array.prototype.slice.call(arguments)));}};DomHelper._$name='DomHelper';//TODO: add loader
/**
 * @module Common/widget/Mask
 */ /**
 * Masks an element (document.body if no element specified). Call static methods for ease of use or make instance for
 * reusability.
 *
 * @example
 * Mask.mask('hello');
 * Mask.unmask();
 *
 * @externalexample widget/Mask.js
 */var Mask=/*#__PURE__*/function(_Delayable){_inherits2(Mask,_Delayable);function Mask(){_classCallCheck2(this,Mask);return _possibleConstructorReturn2(this,_getPrototypeOf2(Mask).apply(this,arguments));}_createClass2(Mask,[{key:"construct",//endregion
//region Init
value:function construct(config){_get2(_getPrototypeOf2(Mask.prototype),"construct",this).call(this,config);if(!this.element){this.element=document.body;}this.show();}},{key:"doDestroy",value:function doDestroy(){var me=this;if(me.maskElement){me.maskElement.remove();me.maskElement=null;if(me.mode.endsWith('blur')){DomHelper.forEachChild(me.element,function(child){child.classList.remove("b-masked-".concat(me.mode));});}me.element.mask=null;}_get2(_getPrototypeOf2(Mask.prototype),"doDestroy",this).call(this);}/**
     * Creates mask element
     * @private
     */},{key:"create",value:function create(){var me=this.element.mask=this;me.maskElement=DomHelper.createElement({parent:me.element,className:"b-mask b-widget b-mask-".concat(me.mode)});me.text=me._text;}//endregion
//region Static
/**
     * Shows a mask with the specified message
     * @param {String|Object} text Message
     * @param {HTMLElement} element Element to mask
     * @returns {Common.widget.Mask}
     */},{key:"show",//endregion
//region Show & hide
/**
     * Show mask
     */value:function show(){var me=this;if(me.hasTimeout('hide')){// TODO: Consider this behaviour, should showing a mask which is not fully hidden resolve?
me.resolve();me.clearTimeout('hide');}if(!me.element.mask){me.create();}var element=me.element,maskElement=me.maskElement;if(!maskElement)return;// already masked by other instance, only allowing one
element.classList.add('b-masked');maskElement.classList.add('b-visible');maskElement.classList.remove('b-hidden');me.shown=true;// blur has to blur child elements
if(me.mode.endsWith('blur')){DomHelper.forEachChild(element,function(child){if(child!==maskElement){child.classList.add("b-masked-".concat(me.mode));}});}}/**
     * Hide mask
     * @returns {Promise} A promise which is resolved when the mask is hidden, or immediately if already hidden
     */},{key:"hide",value:function hide(){var me=this,element=me.element,maskElement=me.maskElement;return new Promise(function(resolve){if(me.shown){me.shown=false;maskElement.classList.remove('b-visible');maskElement.classList.add('b-hidden');element.classList.remove('b-masked');if(me.mode.endsWith('blur')){DomHelper.forEachChild(element,function(child){if(child!==maskElement){child.classList.remove("b-masked-".concat(me.mode));}});}// TODO: use AnimationHelper when available
me.resolve=resolve;me.setTimeout(function(){return resolve();},500,'hide');}else{resolve();}});}/**
     * Close mask (removes it)
     * @returns {Promise} A promise which is resolved when the mask is closed
     */},{key:"close",value:function close(){var _this10=this;return new Promise(function(resolve){_this10.hide().then(function(){_this10.destroy();resolve();});});}//endregion
},{key:"text",//endregion
//region Mask content
/**
     * Gets or sets the text displayed in the mask
     * @property {String}
     */set:function set(txt){var me=this;me._text=txt||'';if(me.maskElement){me.maskElement.innerHTML="<div class=\"b-mask-content\"><i class=\"b-mask-icon ".concat(me.icon,"\"></i>").concat(me._text,"</i>");}},get:function get(){return this._text;}}],[{key:"mask",value:function mask(text){var element=arguments.length>1&&arguments[1]!==undefined?arguments[1]:document.body;return new Mask(typeof text!=='string'?Object.assign({element:element},text):{element:element,text:text});}/**
     * Unmask
     * @param {HTMLElement} element Element to unmask
     * @returns {Promise} A promise which is resolved when the mask is gone
     */},{key:"unmask",value:function unmask(){var element=arguments.length>0&&arguments[0]!==undefined?arguments[0]:document.body;return element.mask&&element.mask.close();}},{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Mode: bright, bright-blur, dark or dark-blur
             * @config {String}
             * @default
             */mode:'dark',/**
             * The icon to show next to the text. Defaults to showing a spinner
             * @config {String}
             * @default
             */icon:'b-icon b-icon-spinner',/**
             * The text (or HTML) to show in mask
             * @config {String}
             */text:null};}}]);return Mask;}(Delayable());exports.Mask=Mask;Mask._$name='Mask';/* globals ResizeObserver: true */var resizeFireTimer=null;var resizedQueue=[],isAbsolutelyPositioned=function isAbsolutelyPositioned(n){return n.nodeType===1&&n.ownerDocument.defaultView.getComputedStyle(n).getPropertyValue('position')==='absolute';};/**
 * @module Common/helper/ResizeMonitor
 */ /**
 * Allows size monitoring of elements.
 *
 * ```
 * ResizeMonitor.addResizeListener(
 *   myElement,
 *   element => {
 *      console.log(element, ' changed size');
 *   }
 * );
 * ```
 *
 * @internal
 */var ResizeMonitor=/*#__PURE__*/function(){function ResizeMonitor(){_classCallCheck2(this,ResizeMonitor);}_createClass2(ResizeMonitor,null,[{key:"addResizeListener",/**
     * Adds a resize listener to the passed element which is called when the element
     * is resized by layout.
     * @param {HTMLElement} element The element to listen for resizing.
     * @param {Function} handler The handling function. Will be passed the element.
     */value:function addResizeListener(element,handler){var me=this;if(element===document||element===window){element=document.body;}if(!element.classList.contains('b-resize-monitored')){element.classList.add('b-resize-monitored');element._bResizemonitor={handlers:[]};}// If we're looking at the document, or body, use a window resize listener.
if(element===document.body){if(!me.hasWindowResizeListener){// Throttle the reaction to window resize to only fire once every 100ms
window.addEventListener('resize',me.onWindowResize);me.hasWindowResizeListener=true;}}// Regular element - use ResizeObserver by preference
else if(window.ResizeObserver){if(!me.resizeObserver){me.resizeObserver=new ResizeObserver(me.onElementResize);}me.resizeObserver.observe(element);}// Polyfill ResizeObesrver
else{var _DomHelper$createElem=DomHelper.createElement({parent:element,className:'b-resize-monitors',children:[{className:'b-resize-monitor-expand'},{className:'b-resize-monitor-shrink'}]},true),_DomHelper$createElem2=_slicedToArray(_DomHelper$createElem,3),monitors=_DomHelper$createElem2[0],expand=_DomHelper$createElem2[1],shrink=_DomHelper$createElem2[2];expand.scrollLeft=expand.scrollTop=shrink.scrollLeft=shrink.scrollTop=1000000;expand.addEventListener('scroll',me.onSizeMonitorScroll,true);shrink.addEventListener('scroll',me.onSizeMonitorScroll,true);// Also need to fake a resize-scroll on DOM mutation
(handler.targetMutationMonitor=new MutationObserver(function(m){var changedNodes=[];var _iteratorNormalCompletion6=true;var _didIteratorError6=false;var _iteratorError6=undefined;try{for(var _iterator6=m[Symbol.iterator](),_step6;!(_iteratorNormalCompletion6=(_step6=_iterator6.next()).done);_iteratorNormalCompletion6=true){var mr=_step6.value;if(mr.type==='childList'){changedNodes.push.apply(changedNodes,mr.removedNodes);changedNodes.push.apply(changedNodes,mr.addedNodes);}}// If the changed nodes were absolutely positioned, then they won't
// cause a resize, so return
}catch(err){_didIteratorError6=true;_iteratorError6=err;}finally{try{if(!_iteratorNormalCompletion6&&_iterator6.return!=null){_iterator6.return();}}finally{if(_didIteratorError6){throw _iteratorError6;}}}if(changedNodes.length>0&&changedNodes.every(isAbsolutelyPositioned)){return;}expand.dispatchEvent(new CustomEvent('scroll',{}));})).observe(element,{childList:true,subtree:true});// store reference for easier cleanup later
handler.monitorElement=monitors;}element._bResizemonitor.handlers.push(handler);}/**
     * Removes a resize listener from the passed element.
     * @param {HTMLElement} element The element to listen for resizing.
     * @param {Function} handler The handling function to remove.
     */},{key:"removeResizeListener",value:function removeResizeListener(element,handler){if(element){if(element===document||element===window){element=document.body;}var resizeMonitor=element._bResizemonitor;var listenerCount=0;if(resizeMonitor&&resizeMonitor.handlers){ArrayHelper.remove(resizeMonitor.handlers,handler);// See if we should unobserve the element
listenerCount=resizeMonitor.handlers.length;}// Down to no listeners.
if(!listenerCount){element.classList.remove('b-resize-monitored');if(this.resizeObserver){this.resizeObserver.unobserve(element);}// Remove the polyfill resize listeners
else{// remove any added elements
if(handler.monitorElement){handler.monitorElement.remove();handler.monitorElement=null;}// remove the DOM mutation observer
if(handler.targetMutationMonitor){handler.targetMutationMonitor.disconnect();}}}}}},{key:"onElementResize",value:function onElementResize(entries){var _iteratorNormalCompletion7=true;var _didIteratorError7=false;var _iteratorError7=undefined;try{for(var _iterator7=entries[Symbol.iterator](),_step7;!(_iteratorNormalCompletion7=(_step7=_iterator7.next()).done);_iteratorNormalCompletion7=true){var resizeObserverEntry=_step7.value;var resizedElement=resizeObserverEntry.target,resizeMonitor=resizedElement._bResizemonitor,newRect=resizeObserverEntry.contentRect||resizedElement.getBoundingClientRect();if(resizedElement.offsetParent){if(!resizeMonitor.rectangle||newRect.width!==resizeMonitor.rectangle.width||newRect.height!==resizeMonitor.rectangle.height){var oldRect=resizeMonitor.rectangle;resizeMonitor.rectangle=newRect;var _iteratorNormalCompletion8=true;var _didIteratorError8=false;var _iteratorError8=undefined;try{for(var _iterator8=resizeMonitor.handlers[Symbol.iterator](),_step8;!(_iteratorNormalCompletion8=(_step8=_iterator8.next()).done);_iteratorNormalCompletion8=true){var resizeHandler=_step8.value;resizeHandler(resizedElement,oldRect,newRect);}}catch(err){_didIteratorError8=true;_iteratorError8=err;}finally{try{if(!_iteratorNormalCompletion8&&_iterator8.return!=null){_iterator8.return();}}finally{if(_didIteratorError8){throw _iteratorError8;}}}}}}}catch(err){_didIteratorError7=true;_iteratorError7=err;}finally{try{if(!_iteratorNormalCompletion7&&_iterator7.return!=null){_iterator7.return();}}finally{if(_didIteratorError7){throw _iteratorError7;}}}}},{key:"onSizeMonitorScroll",value:function onSizeMonitorScroll(e){// If the element has gone, ignore the event; the listener will be removed automatically.
if(document.body.contains(e.target)){e.stopPropagation();var monitorNode=e.target.parentNode,resizedElement=monitorNode.parentNode,resizeMonitor=resizedElement._bResizemonitor,newRect=resizedElement.getBoundingClientRect();if(!resizeMonitor.rectangle||newRect.width!==resizeMonitor.rectangle.width||newRect.height!==resizeMonitor.rectangle.height){resizedQueue.push([resizedElement,resizeMonitor.rectangle,newRect]);resizeMonitor.rectangle=newRect;if(!resizeFireTimer){resizeFireTimer=requestAnimationFrame(ResizeMonitor.fireResizeEvents);}}monitorNode.firstChild.scrollLeft=monitorNode.firstChild.scrollTop=monitorNode.childNodes[1].scrollTop=monitorNode.childNodes[1].scrollLeft=1000000;}}},{key:"onWindowResize",value:function onWindowResize(e){var resizedElement=document.body,resizeMonitor=resizedElement._bResizemonitor,oldRect=resizeMonitor.rectangle;resizeMonitor.rectangle=document.documentElement.getBoundingClientRect();var _iteratorNormalCompletion9=true;var _didIteratorError9=false;var _iteratorError9=undefined;try{for(var _iterator9=resizedElement._bResizemonitor.handlers[Symbol.iterator](),_step9;!(_iteratorNormalCompletion9=(_step9=_iterator9.next()).done);_iteratorNormalCompletion9=true){var resizeHandler=_step9.value;resizeHandler(resizedElement,oldRect,resizeMonitor.rectangle);}}catch(err){_didIteratorError9=true;_iteratorError9=err;}finally{try{if(!_iteratorNormalCompletion9&&_iterator9.return!=null){_iterator9.return();}}finally{if(_didIteratorError9){throw _iteratorError9;}}}}},{key:"fireResizeEvents",value:function fireResizeEvents(){for(var _i7=0,_resizedQueue=resizedQueue;_i7<_resizedQueue.length;_i7++){var resizedEntry=_resizedQueue[_i7];var _iteratorNormalCompletion10=true;var _didIteratorError10=false;var _iteratorError10=undefined;try{for(var _iterator10=resizedEntry[0]._bResizemonitor.handlers[Symbol.iterator](),_step10;!(_iteratorNormalCompletion10=(_step10=_iterator10.next()).done);_iteratorNormalCompletion10=true){var resizeHandler=_step10.value;// Checking offsetParent to avoid resizing of elements which are not visible or exist in DOM
if(resizedEntry[0].offsetParent){resizeHandler.apply(this,resizedEntry);}}}catch(err){_didIteratorError10=true;_iteratorError10=err;}finally{try{if(!_iteratorNormalCompletion10&&_iterator10.return!=null){_iterator10.return();}}finally{if(_didIteratorError10){throw _iteratorError10;}}}}resizeFireTimer=null;resizedQueue.length=0;}}]);return ResizeMonitor;}();exports.ResizeMonitor=ResizeMonitor;ResizeMonitor._$name='ResizeMonitor';/**
 * @module Common/helper/util/Point
 */ /**
 * Encapsulates an X,Y coordinate point.
 * @extends Common/helper/util/Rectangle
 */var Point=/*#__PURE__*/function(_Rectangle){_inherits2(Point,_Rectangle);_createClass2(Point,null,[{key:"from",/**
     * Creates a new Point encapsulting the event's page position.
     * @param {Event} event
     * @typings ignore
     */value:function from(event){var touchPoints=event.changedTouches;return new Point(touchPoints?touchPoints[0].screenX:event.screenX,touchPoints?touchPoints[0].screenY:event.pageY);}/**
     * Constructs a Point
     * @param x The X coordinate
     * @param y The Y coordinate
     */}]);function Point(x,y){_classCallCheck2(this,Point);return _possibleConstructorReturn2(this,_getPrototypeOf2(Point).call(this,x,y,0,0));}/**
     * Coerces this Point to be within the passed Rectangle. Translates it into the bounds.
     * @param {Common.helper.util.Rectangle} into The Rectangle into which to coerce this Point.
     */_createClass2(Point,[{key:"constrain",value:function constrain(into){this.x=Math.min(Math.max(this.x,into.x),into.right-1);this.y=Math.min(Math.max(this.y,into.y),into.bottom-1);return this;}},{key:"toArray",value:function toArray(){return[this.x,this.y];}}]);return Point;}(Rectangle);// The Rectangle class uses the Point class, but cannot import it.
// TODO: find a better way of getting a reference to the Point class in Rectangle.
// #8224 - Gantt angular demo doesn't work in production
// eslint-disable-next-line no-proto
exports.Point=Point;Point.__proto__.Point=Point;Point._$name='Point';/**
 * @module Common/helper/FunctionHelper
 */ /**
 * Provides functionality for working with functions
 * @internal
 */var FunctionHelper=/*#__PURE__*/function(){function FunctionHelper(){_classCallCheck2(this,FunctionHelper);}_createClass2(FunctionHelper,null,[{key:"curry",value:function curry(func){return function curried(){for(var _len11=arguments.length,args=new Array(_len11),_key11=0;_key11<_len11;_key11++){args[_key11]=arguments[_key11];}if(args.length>=func.length){return func.apply(this,args);}else{return function(){for(var _len12=arguments.length,args2=new Array(_len12),_key12=0;_key12<_len12;_key12++){args2[_key12]=arguments[_key12];}return curried.apply(this,args.concat(args2));};}};}},{key:"bindAll",value:function bindAll(obj){for(var key in obj){if(typeof obj[key]==='function'){obj[key]=obj[key].bind(obj);}}}/**
     * Returns a function which calls the passed `interceptor` function first, and the passed `original` after
     * as long as the `interceptor` does not return `false`.
     * @param {Function} original The function to call second.
     * @param {Function} interceptor The function to call first.
     * @param {Object} [thisObj] The `this` reference when the functions are called.
     * @returns The return value from the `original` function **if it was called**, else `false`.
     */},{key:"createInterceptor",value:function createInterceptor(original,interceptor,thisObj){return function(){for(var _len13=arguments.length,args=new Array(_len13),_key13=0;_key13<_len13;_key13++){args[_key13]=arguments[_key13];}if(interceptor.call.apply(interceptor,[thisObj].concat(args))!==false){return original.call.apply(original,[thisObj].concat(args));}return false;};}/**
     * Returns a function which calls the passed `sequence` function after calling
     * the passed `original`.
     * @param {Function} original The function to call first.
     * @param {Function} sequence The function to call second.
     * @param {Object} [thisObj] The `this` reference when the functions are called.
     * @returns The value returned from the sequence if it returned a value, else the return
     * value from the original function.
     */},{key:"createSequence",value:function createSequence(original,sequence,thisObj){return function(){for(var _len14=arguments.length,args=new Array(_len14),_key14=0;_key14<_len14;_key14++){args[_key14]=arguments[_key14];}var origResult=original.call.apply(original,[thisObj].concat(args)),sequenceResult=sequence.call.apply(sequence,[thisObj].concat(args));return sequenceResult===void 0?origResult:sequenceResult;};}/**
     * Create a "debounced" function which will call on the "leading edge" of a timer period.
     * When first invoked will call immediately, but invocations after that inside its buffer
     * period will be rejected, and *one* invocation will be made after the buffer period has expired.
     *
     * This is useful for responding immediately to a first mousemove, but from then on, only
     * calling the action function on a regular timer while the mouse continues to move.
     *
     * @param {Function} fn The function to call.
     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.
     * @param {Object} [thisObj] `this` reference for the function.
     * @param {Array} [extraArgs] The argument list to append to those passed to the function.
     * @param {Function} [alt] A function to call when the invocation is rejected due to buffer time not having expired.
     */},{key:"createThrottled",value:function createThrottled(fn,buffer,thisObj,extraArgs,alt){var lastCallTime=0,callArgs,timerId,result;var invoke=function invoke(){timerId=0;lastCallTime=performance.now();callArgs.push.apply(callArgs,extraArgs);fn.apply(thisObj,callArgs);};result=function result(){var elapsed=performance.now()-lastCallTime;for(var _len15=arguments.length,args=new Array(_len15),_key15=0;_key15<_len15;_key15++){args[_key15]=arguments[_key15];}callArgs=args;// If it's been more then the buffer period since we invoked, we can call it now
if(elapsed>=buffer){clearTimeout(timerId);invoke();}// Otherwise, kick off a timer for the requested period.
else{if(!timerId){timerId=setTimeout(invoke,buffer-elapsed);}if(alt){callArgs.push.apply(callArgs,extraArgs);alt.apply(thisObj,callArgs);}}};result.cancel=function(){return clearTimeout(timerId);};return result;}/**
     * Create a "debounced" function which will call on the "trailing edge" of a timer period.
     * When first invoked will wait until the buffer period has expired to call the function, and
     * more calls within that time will restart the timer.
     *
     * This is useful for responding to keystrokes, but deferring action until the user pauses typing.
     *
     * @param {Function} fn The function to call.
     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.
     * @param {Object} [thisObj] `this` reference for the function.
     * @param {Array} [args] The argument list to append to those passed to the function.
     */},{key:"createBuffered",value:function createBuffered(fn,buffer,thisObj,args){var callArgs,timerId,result;var invoke=function invoke(){timerId=0;callArgs.push.apply(callArgs,args);fn.apply(thisObj,callArgs);};result=function result(){for(var _len16=arguments.length,args=new Array(_len16),_key16=0;_key16<_len16;_key16++){args[_key16]=arguments[_key16];}callArgs=args;// Cancel any impending invocation. It's pushed out for <buffer> ms from each call
if(timerId){clearTimeout(timerId);}timerId=setTimeout(invoke,buffer);};result.cancel=function(){return clearTimeout(timerId);};return result;}},{key:"returnTrue",value:function returnTrue(){return true;}},{key:"animate",value:function animate(duration,fn,scope){var _this11=this;var easing=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'linear';var cancel=false;var result=new Promise(function(resolve){var start=performance.now(),iterate=function iterate(){var progress=Math.min((performance.now()-start)/duration,1);if(!cancel){if(fn.call(scope,_this11.easingFunctions[easing](progress))===false){resolve();}}if(cancel||progress===1){// Push resolution into the next animation frame so that
// this frame completes before the resolution handler runs.
requestAnimationFrame(function(){return resolve();});}else{requestAnimationFrame(iterate);}};iterate();});result.cancel=function(){cancel=true;return false;};return result;}}]);return FunctionHelper;}();/* eslint-disable */exports.FunctionHelper=FunctionHelper;var half=0.5,e1=1.70158,e2=7.5625,e3=1.525,e4=2/2.75,e5=2.25/2.75,e6=1/2.75,e7=1.5/2.75,e8=2.5/2.75,e9=2.625/2.75,e10=0.75,e11=0.9375,e12=0.984375;FunctionHelper.easingFunctions={linear:function linear(t){return t;},easeInQuad:function easeInQuad(t){return Math.pow(t,2);},easeOutQuad:function easeOutQuad(t){return-(Math.pow(t-1,2)-1);},easeInOutQuad:function easeInOutQuad(t){return(t/=half)<1?half*Math.pow(t,2):-half*((t-=2)*t-2);},easeInCubic:function easeInCubic(t){return Math.pow(t,3);},easeOutCubic:function easeOutCubic(t){return Math.pow(t-1,3)+1;},easeInOutCubic:function easeInOutCubic(t){return(t/=half)<1?half*Math.pow(t,3):half*(Math.pow(t-2,3)+2);},easeInQuart:function easeInQuart(t){return Math.pow(t,4);},easeOutQuart:function easeOutQuart(t){return-(Math.pow(t-1,4)-1);},easeInOutQuart:function easeInOutQuart(t){return(t/=half)<1?half*Math.pow(t,4):-half*((t-=2)*Math.pow(t,3)-2);},easeInQuint:function easeInQuint(t){return Math.pow(t,5);},easeOutQuint:function easeOutQuint(t){return Math.pow(t-1,5)+1;},easeInOutQuint:function easeInOutQuint(t){return(t/=half)<1?half*Math.pow(t,5):half*(Math.pow(t-2,5)+2);},easeInSine:function easeInSine(t){return-Math.cos(t*(Math.PI/2))+1;},easeOutSine:function easeOutSine(t){return Math.sin(t*(Math.PI/2));},easeInOutSine:function easeInOutSine(t){return-half*(Math.cos(Math.PI*t)-1);},easeInExpo:function easeInExpo(t){return t===0?0:Math.pow(2,10*(t-1));},easeOutExpo:function easeOutExpo(t){return t===1?1:-Math.pow(2,-10*t)+1;},easeInOutExpo:function easeInOutExpo(t){return t===0?0:t===1?1:(t/=half)<1?half*Math.pow(2,10*(t-1)):half*(-Math.pow(2,-10*--t)+2);},easeInCirc:function easeInCirc(t){return-(Math.sqrt(1-t*t)-1);},easeOutCirc:function easeOutCirc(t){return Math.sqrt(1-Math.pow(t-1,2));},easeInOutCirc:function easeInOutCirc(t){return(t/=half)<1?-half*(Math.sqrt(1-t*t)-1):half*(Math.sqrt(1-(t-=2)*t)+1);},easeOutBounce:function easeOutBounce(t){return t<e6?e2*t*t:t<e4?e2*(t-=e7)*t+e10:t<e8?e2*(t-=e5)*t+e11:e2*(t-=e9)*t+e12;},easeInBack:function easeInBack(t){return t*t*((e1+1)*t-e1);},easeOutBack:function easeOutBack(t){return(t=t-1)*t*((e1+1)*t+e1)+1;},easeInOutBack:function easeInOutBack(t){var s=1.70158;return(t/=half)<1?half*(t*t*(((s*=e3)+1)*t-s)):half*((t-=2)*t*(((s*=e3)+1)*t+s)+2);},elastic:function elastic(t){return-1*Math.pow(4,-8*t)*Math.sin((t*6-1)*(2*Math.PI)/2)+1;},swingFromTo:function swingFromTo(t){var s=1.70158;return(t/=half)<1?half*(t*t*(((s*=e3)+1)*t-s)):half*((t-=2)*t*(((s*=e3)+1)*t+s)+2);},swingFrom:function swingFrom(t){return t*t*((e1+1)*t-e1);},swingTo:function swingTo(t){return(t-=1)*t*((e1+1)*t+e1)+1;},bounce:function bounce(t){return t<e6?e2*t*t:t<e4?e2*(t-=e7)*t+e10:t<e8?e2*(t-=e5)*t+e11:e2*(t-=e9)*t+e12;},bouncePast:function bouncePast(t){return t<e6?e2*t*t:t<e4?2-(e2*(t-=e7)*t+e10):t<e8?2-(e2*(t-=e5)*t+e11):2-(e2*(t-=e9)*t+e12);},easeFromTo:function easeFromTo(t){return(t/=half)<1?half*Math.pow(t,4):-half*((t-=2)*Math.pow(t,3)-2);},easeFrom:function easeFrom(t){return Math.pow(t,4);},easeTo:function easeTo(t){return Math.pow(t,0.25);}};FunctionHelper._$name='FunctionHelper';/**
 * @module Common/helper/EventHelper
 */var touchProperties=['clientX','clientY','pageX','pageY','screenX','screenY'],isOption={element:1,thisObj:1,once:1,delegate:1,delay:1,capture:1,passive:1,throttled:1,autoDetach:1},ctrlKeyProp={get:function get(){return true;}},normalizedKeyNames={Spacebar:'Space',Del:'Delete',Esc:'Escape',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown'},fixEvent=function fixEvent(event){var type=event.type;// Normalize key names
if(type.startsWith('key')){var normalizedKeyName=normalizedKeyNames[event.key];if(normalizedKeyName){Object.defineProperty(event,'key',{get:function get(){return normalizedKeyName;}});}// Polyfill the code property for SPACE because it is not set for synthetic events.
if(event.key===' '&&!event.code){Object.defineProperty(event,'code',{get:function get(){return'Space';}});}}// Sync OSX's meta key with the ctrl key. This will only happen on Mac platform.
// It's read-only, so define a local property to return true for ctrlKey.
if(event.metaKey&&!event.ctrlKey){Object.defineProperty(event,'ctrlKey',ctrlKeyProp);}// When we listen to event on document and get event which bubbled from shadow dom, reading its target would
// return shadow root element. We need actual element which started the event
if(event.target&&event.target.shadowRoot&&event.composedPath&&!BrowserHelper.isIE11&&!BrowserHelper.isEdge){var targetElement=event.composedPath()[0],originalTarget=event.target;// Can there be an event which actually originated from custom element, not its shadow dom?
if(event.target!==targetElement){Object.defineProperty(event,'target',{get:function get(){return targetElement;}});// Save original target just in case
Object.defineProperty(event,'originalTarget',{get:function get(){return originalTarget;}});}}// Firefox has a bug where it can report that the target is the #document when mouse is over a pseudo element
if(event.target&&event.target.nodeType===9&&'clientX'in event){var _targetElement=DomHelper.elementFromPoint(event.clientX,event.clientY);Object.defineProperty(event,'target',{get:function get(){return _targetElement;}});}// Firefox has a bug where it can report a textNode as an event target/relatedTarget.
// We standardize this to report the parentElement.
if(event.target&&event.target.nodeType===3){var _targetElement2=event.target.parentElement;Object.defineProperty(event,'target',{get:function get(){return _targetElement2;}});}if(event.relatedTarget&&event.relatedTarget.nodeType===3){var relatedTargetElement=event.target.parentElement;Object.defineProperty(event,'relatedTarget',{get:function get(){return relatedTargetElement;}});}// If it's a touch event, move the positional details
// of touches[0] up to the event.
if(type.startsWith('touch')&&event.touches.length){EventHelper.normalizeEvent(event);}return event;};/**
 * Utility methods for dealing with Events, normalizing Touch/Pointer/Mouse events.
 */var EventHelper=/*#__PURE__*/function(){function EventHelper(){_classCallCheck2(this,EventHelper);}_createClass2(EventHelper,null,[{key:"normalizeEvent",value:function normalizeEvent(event){return ObjectHelper.copyPropertiesIf(event,event.touches[0]||event.changedTouches[0],touchProperties);}/**
     * Returns the `[x, y]` coordinates of the event in the viewport coordinate system.
     * @param {Event} event The event
     * @return {Number[]} The coordinate.
     */},{key:"getXY",value:function getXY(event){if(event.touches){event=event.touches[0];}return[event.clientX,event.clientY];}/**
     * Returns the pixel distance between two mouse/touch/pointer events.
     * @param {Event} event1 The first event.
     * @param {Event} event2 The second event.
     * @return {Number} The distance in pixels between the two events.
     */},{key:"getDistanceBetween",value:function getDistanceBetween(event1,event2){var xy1=this.getXY(event1),xy2=this.getXY(event2);// No point in moving this to Point. We are dealing only with number values here.
return Math.sqrt(Math.pow(xy1[0]-xy2[0],2)+Math.pow(xy1[1]-xy2[1],2));}/**
     * Returns a {@link Common.helper.util.Point} which encapsulates the `pageX/Y` position of the event.
     * May be used in {@link Common.helper.util.Rectangle} events.
     * @param {Event} event A browser mouse/touch/pointer event.
     * @return {Common.helper.util.Point} The page point.
     */},{key:"getPagePoint",value:function getPagePoint(event){return new Point(event.pageX,event.pageY);}/**
     * Returns a {@link Common.helper.util.Point} which encapsulates the `clientX/Y` position of the event.
     * May be used in {@link Common.helper.util.Rectangle} events.
     * @param {Event} event A browser mouse/touch/pointer event.
     * @return {Common.helper.util.Point} The page point.
     */},{key:"getClientPoint",value:function getClientPoint(event){return new Point(event.clientX,event.clientY);}/**
     * Add a listener or listeners to an element
     * @param {HTMLElement} element The element to add a listener/listeners to.
     * @param {String|Object} eventName Either a string, being the name of the event to listen for,
     * or an options object containing event names and options as keys. See the options parameter
     * for details, or the {@link #function-on-static} method for details.
     * @param {Function} [handler] If the second parameter is a string event name, this is the handler function.
     * @param {Object} [options] If the second parameter is a string event name, this is the options.
     * @param {HTMLElement} options.element The element to add the listener to.
     * @param {Object} options.thisObj The default `this` reference for all handlers added in this call.
     * @param {Boolean} [options.autoDetach=true] The listeners are automatically removed when the `thisObj` is destroyed.
     * @param {String} [options.delegate] A CSS selector string which only fires the handler when the event takes place in a matching element.
     * @param {Boolean} [options.once] Specify as `true` to have the listener(s) removed upon first invocation.
     * @param {Number} [options.delay] The number of millieconds to delay the handler call after the event fires:
     *
     *     {
     *         once       : true,           // Removed upon first firing
     *         delegate   : this.iconCls,   // Only when clicking the icon
     *         thisObj    : this            // The this reference when the handler is called
     *                                      // Listener is removed when thisObj is destroyed
     *     }
     * @returns {Function} A detacher function which removes all the listeners when called.
     */},{key:"addListener",value:function addListener(element,eventName,handler,options){if(element.nodeType){// All separate params, element, eventname and handler
if(typeof eventName==='string'){options=Object.assign(_defineProperty({element:element},eventName,handler),options);}// element, options
else{options=Object.assign({element:element},eventName);}}// Just an options object passed
else{options=element;}return this.on(options);}/**
     * Adds a listener or listeners to an element.
     * all property names other than the options listed below are taken to be event names,
     * and the values as handler specs.
     *
     * A handler spec is usually a function reference or the name of a function in the `thisObj`
     * option.
     *
     * But a handler spec may also be an options object containing a `handler` property which is
     * the function or function name, and local options, including `element` and `thisObj`
     * which override the top level options.
     *
     *  Usage example
     *
     * ```javascript
     * construct(config) {
     *     super.construct(config);
     *
     *     // Add auto detaching event handlers to this Widget's reference elements
     *     EventHelper.on({
     *         element : this.iconElement,
     *         click   : '_handleIconClick',
     *         thisObj : this,
     *         contextmenu : {
     *             element : document,
     *             handler : '_handleDocumentContextMenu'
     *         }
     *     });
     * }
     *```
     *
     * The `click` handler on the `iconElement` calls `this._handleIconClick`.
     *
     * The `contextmenu` handler is added to the `document` element, but the `thisObj`
     * is defaulted in from the top `options` and calls `this._handleDocumentContextMenu`.
     *
     * Note that on touch devices, `dblclick` and `contextmenu` events are synthesized.
     * Synthesized events contain a `browserEvent` property containing the final triggering
     * event of the gesture. For example a synthesized `dblclick` event would contain a
     * `browserEvent` property which is the last `touchend` event. A synthetic `contextmenu`
     * event will contain a `browserEvent` property which the longstanding `touchstart` event.
     *
     * @param {Object} options The full listener specification.
     * @param {HTMLElement} options.element The element to add the listener to.
     * @param {Object} options.thisObj The default `this` reference for all handlers added in this call.
     * @param {Boolean} [options.autoDetach=true] The listeners are automatically removed when the `thisObj` is destroyed.
     * @param {String} [options.delegate] A CSS selector string which only fires the handler when the event takes place in a matching element.
     * @param {Boolean} [options.once] Specify as `true` to have the listener(s) removed upon first invocation.
     * @param {Number} [options.delay] The number of millieconds to delay the handler call after the event fires.
     * @param {Number} [options.throttled] For rapidly repeating events (Such as `wheel` or `scroll` or `mousemove`)
     * this is the number of millieconds to delay subsequent handler calls after first invocation which happens immediately.
     * @returns {Function} A detacher function which removes all the listeners when called.
     *
     */},{key:"on",value:function on(options){var EventHelper=this,element=options.element,thisObj=options.thisObj,handlerDetails=[],keys=ObjectHelper.allKeys(options);var len=keys.length,i,eventName;for(i=0;i<len;i++){eventName=keys[i];// Only treat it as an event name if it's not a supported option
if(!isOption[eventName]){var handlerSpec=options[eventName];if(_typeof(handlerSpec)!=='object'){handlerSpec={handler:handlerSpec};}var targetElement=handlerSpec.element||element;// If we need to convert taphold to an emulated contextmenu, add a wrapping function
// in addition to the contextmenu listener. Platforms may support mouse *and* touch.
if(BrowserHelper.isTouchDevice){if(eventName==='contextmenu'){handlerDetails.push(EventHelper.addElementListener(targetElement,'touchstart',{handler:EventHelper.createContextMenuWrapper(handlerSpec.handler,handlerSpec.thisObj||thisObj)},options));}else if(eventName==='dblclick'){handlerDetails.push(EventHelper.addElementListener(targetElement,'touchend',{handler:EventHelper.createDblClickWrapper(targetElement,handlerSpec.handler,handlerSpec.thisObj||thisObj),delay:10,capture:true},options));}}// Keep track of the real handlers added.
// addElementLister returns [ element, eventName, addedfunction, capture ]
handlerDetails.push(EventHelper.addElementListener(targetElement,eventName,handlerSpec,options));}}var detacher=function detacher(){len=handlerDetails.length;for(i=0;i<len;i++){var _handlerSpec=handlerDetails[i];_handlerSpec[0].removeEventListener(_handlerSpec[1],_handlerSpec[2],_handlerSpec[3]);}handlerDetails.length=0;};// { autoDetach : true, thisObj : scheduler } means remove all listeners when the scheduler dies.
if(thisObj&&options.autoDetach!==false){thisObj.doDestroy=FunctionHelper.createInterceptor(thisObj.doDestroy,detacher,thisObj);}return detacher;}/**
     * Used internally to add a single event handler to an element.
     * @param {HTMLElement} element The element to add the handler to.
     * @param {String} eventName The name of the event to add a handler for.
     * @param {Function|String|Object} handlerSpec Either a function to call, or
     * the name of a function to call in the `thisObj`, or an object containing
     * the handler local options.
     * @param {Function|String} [handlerSpec.handler] Either a function to call, or
     * the name of a function to call in the `thisObj`.
     * @param {HTMLElement} [handlerSpec.element] Optionally a local element for the listener.
     * @param {Object} [handlerSpec.thisObj] A local `this` specification for the handler.
     * @param {Object} defaults The `options` parameter from the {@link #function-addListener-static} call.
     * @private
     */},{key:"addElementListener",value:function addElementListener(element,eventName,handlerSpec,defaults){var handler=this.createHandler(element,eventName,handlerSpec,defaults),handlerHasPassive='passive'in handlerSpec;var options=handlerSpec.capture||defaults.capture;// If we are passed the passive option and the browser supports it, then convert
// The capture option into the object options form.
if((handlerHasPassive||'passive'in defaults)&&BrowserHelper.supportsPassive){options={capture:!!options,passive:handlerHasPassive?handlerSpec.passive:defaults.passive};}element.addEventListener(eventName,handler,options);return[element,eventName,handler,options];}},{key:"createHandler",value:function createHandler(element,eventName,handlerSpec,defaults){var _this12=this;var delay=handlerSpec.delay||defaults.delay,throttled=handlerSpec.throttled||defaults.throttled,once=handlerSpec.once||defaults.once,thisObj=handlerSpec.thisObj||defaults.thisObj,capture=handlerSpec.capture||defaults.capture,delegate=handlerSpec.delegate||defaults.delegate;//Capture initial conditions in case of destruction of thisObj.
// Destruction completely wipes the object.
var wrappedFn=handlerSpec.handler,// Innermost level of wrapping which calls the user's handler.
// Normalize the event cross-browser, and attempt to normalize touch events.
// Resolve named functions in the thisObj.
_handler2=function handler(event){var _wrappedFn;// When playing a demo using DemoBot, only handle synthetic events
if(_this12.playingDemo&&event.isTrusted){return;}// If the thisObj is already destroyed, we cannot call the function.
// If in dev mode, warn the developer with a JS error.
if(thisObj&&thisObj.isDestroyed){// eslint-disable-next-line
return;}// Fix up events to handle various browser inconsistencies
fixEvent(event);// delegate: '.b-field-trigger' only fires when click is in a matching el.
// currentTarget becomes the delegate.
if(delegate){// Maintainer: In Edge event.target can be an empty object for transitionend events
var delegatedTarget=event.target instanceof HTMLElement&&event.target.closest(delegate);if(!delegatedTarget){return;}// Allow this to be redefined as it bubbles through listeners up the parentNode axis
// which might have their own delegate settings.
Object.defineProperty(event,'currentTarget',{get:function get(){return delegatedTarget;},configurable:true});}if(typeof wrappedFn==='string'){wrappedFn=thisObj[wrappedFn];}for(var _len17=arguments.length,args=new Array(_len17>1?_len17-1:0),_key17=1;_key17<_len17;_key17++){args[_key17-1]=arguments[_key17];}(_wrappedFn=wrappedFn).call.apply(_wrappedFn,[thisObj,event].concat(args));};// Go through options, each creates a new handler by wrapping the previous handler to implement the options.
// Right now, we have delay. Note that it may be zero, so test != null
if(delay!=null){var _wrappedFn2=_handler2;_handler2=function handler(){for(var _len18=arguments.length,args=new Array(_len18),_key18=0;_key18<_len18;_key18++){args[_key18]=arguments[_key18];}setTimeout(function(){_wrappedFn2.apply(void 0,args);},delay);};}// If they specified the throttled option, wrap the hander in a createdThrottled
// version. Allow the called to specify an alt function to call when the event
// fires before the buffer time has expired.
if(throttled!=null){var _alt,buffer=throttled;if(throttled.buffer){_alt=function _alt(e){return throttled.alt.call(_this12,fixEvent(e));};buffer=throttled.buffer;}_handler2=FunctionHelper.createThrottled(_handler2,buffer,thisObj,null,_alt);}// This must always be the last option processed so that it is the outermost handler
// which is the one added to the element and is called immediately so that the
// handler is removed immediately.
// TODO: Use the native once option when all browsers support it. Only IE11 doesn't.
if(once){var _wrappedFn3=_handler2;_handler2=function handler(){element.removeEventListener(eventName,_handler2,capture);_wrappedFn3.apply(void 0,arguments);};}// Only autoDetach here if there's a local thisObj is in the handlerSpec for this one listener.
// If it's in the defaults, then the "on" method will handle it.
if(handlerSpec.thisObj&&handlerSpec.autoDetach!==false){thisObj.doDestroy=FunctionHelper.createInterceptor(thisObj.doDestroy,function(){return element.removeEventListener(eventName,_handler2);},thisObj);}return _handler2;}/**
     * Private function to wrap the passed function. The returned wrapper function to be used as
     * a `touchstart` handler which will call the passed function passing a fabricated `contextmenu`
     * event if there's no `touchend` or `touchmove` after a default of 400ms.
     * @param {String|Function} handler The handler to call.
     * @param {Object} thisObj The owner of the function.
     * @private
     */},{key:"createContextMenuWrapper",value:function createContextMenuWrapper(handler,me){var EventHelper=this;return function(event){// Only attempt conversion to contextmenu if it's a single touch start.
if(event.touches.length===1){var tapholdStartTouch=event.touches[0],// Dispatch a synthetic "contextmenu" event from the touchpoint in <longPressTime> milliseconds.
tapholdTimer=setTimeout(function(){// Remove the gesture cancelling listeners
touchMoveRemover();var contextmenuEvent=new MouseEvent('contextmenu',tapholdStartTouch);Object.defineProperty(contextmenuEvent,'target',{get:function get(){return tapholdStartTouch.target;}});if(typeof handler==='string'){handler=me[handler];}contextmenuEvent.browserEvent=event;// Call the wrapped handler passing the fabricated contextmenu event
handler.call(me,contextmenuEvent);EventHelper.contextMenuTouchId=tapholdStartTouch.identifier;},EventHelper.longPressTime),// This is what gets called if the user moves their touchpoint,
// or releases the touch before <longPressTime>ms is up
cancelTapholdTimer=function cancelTapholdTimer(){EventHelper.contextMenuTouchId=null;touchMoveRemover();clearTimeout(tapholdTimer);},// Touchmove or touchend before that timer fires cancels the timer and removes these listeners.
touchMoveRemover=EventHelper.on({element:document,touchmove:cancelTapholdTimer,touchend:cancelTapholdTimer,pointermove:cancelTapholdTimer,pointerup:cancelTapholdTimer,capture:true});}};}/**
     * Private function to wrap the passed function. The returned wrapper function to be used as
     * a `touchend` handler which will call the passed function passing a fabricated `dblclick`
     * event if there is a `click` within 300ms.
     * @param {String|Function} handler The handler to call.
     * @param {Object} thisObj The owner of the function.
     * @private
     */},{key:"createDblClickWrapper",value:function createDblClickWrapper(element,handler,me){var EventHelper=this;var startId,secondListenerDetacher,tapholdTimer;return function(){if(!secondListenerDetacher){secondListenerDetacher=EventHelper.on({element:element,// We only get here if a touchstart arrives within 300ms of a click
touchstart:function touchstart(secondStart){startId=secondStart.changedTouches[0].identifier;// Prevent zoom
secondStart.preventDefault();},touchend:function touchend(secondClick){if(secondClick.changedTouches[0].identifier===startId){secondClick.preventDefault();clearTimeout(tapholdTimer);startId=secondListenerDetacher=null;var targetRect=Rectangle.from(secondClick.changedTouches[0].target,null,true),offsetX=secondClick.changedTouches[0].pageX-targetRect.x,offsetY=secondClick.changedTouches[0].pageY-targetRect.y,dblclickEventConfig=Object.assign({browserEvent:secondClick},secondClick),dblclickEvent=new MouseEvent('dblclick',dblclickEventConfig);Object.defineProperty(dblclickEvent,'target',{get:function get(){return secondClick.target;}});Object.defineProperty(dblclickEvent,'offsetX',{get:function get(){return offsetX;}});Object.defineProperty(dblclickEvent,'offsetY',{get:function get(){return offsetY;}});if(typeof handler==='string'){handler=me[handler];}// Call the wrapped handler passing the fabricated dblclick event
handler.call(me,dblclickEvent);}},once:true});// Cancel the second listener is there's no second click within <dblClickTime> milliseconds.
tapholdTimer=setTimeout(function(){secondListenerDetacher();startId=secondListenerDetacher=null;},EventHelper.dblClickTime);}};}},{key:"lockComposedPath",value:function lockComposedPath(event){if(event.composedPath){event.composedPath=function(path){return function(){return path;};}(event.composedPath());}}}]);return EventHelper;}();/**
 * The time in milliseconds for a `taphold` gesture to trigger a `contextmenu` event.
 * @member {Number} [longPressTime=500]
 * @readonly
 * @static
 */exports.EventHelper=EventHelper;EventHelper.longPressTime=500;/**
 * The time in milliseconds within which a second touch tap event triggers a `dblclick` event.
 * @member {Number} [dblClickTime=300]
 * @readonly
 * @static
 */EventHelper.dblClickTime=300;// Flag body if last user action used keyboard, used for focus styling etc.
EventHelper.on({element:document,mousedown:function mousedown(){if(!DomHelper.isTouchEvent){DomHelper.usingKeyboard=false;document.body.classList.remove('b-using-keyboard');}},touchmove:function touchmove(){DomHelper.usingKeyboard=false;document.body.classList.remove('b-using-keyboard');},keydown:function keydown(){DomHelper.usingKeyboard=true;document.body.classList.add('b-using-keyboard');}});// When dragging on a touch device, we need to prevent scrolling from happening.
// Dragging only starts on a touchmove event, by which time it's too late to preventDefault
// on the touchstart event which started it.
// To do this we need a capturing, non-passive touchmove listener at the document level so we can preventDefault.
// This is in lieu of a functioning touch-action style on iOS Safari. When that's fixed, this will not be needed.
if(BrowserHelper.isTouchDevice){EventHelper.on({element:document,touchmove:function touchmove(event){// If we're touching a b-dragging event, then stop any panning by preventing default.
if(event.target.closest('.b-dragging')){event.preventDefault();}},passive:false,capture:true});}EventHelper._$name='EventHelper';/**
 * @module Common/util/CollectionFilter
 */ /**
 * A class which encapsulates a single filter operation which may be applied to any object to decide whether to
 * include or exclude it from a set.
 *
 * A CollectionFilter generally has at least three main properties:
 *
 * * `property` - The name of a property in candidate objects from which to extract the value to test
 * * `value` - The value which  this filter uses to test against.
 * * `operator` - The comparison operator, eg: `'='` or `'>'` etc.
 *
 * Given these three essential values, further configurations may affect how the filter is applied:
 *
 * * `caseSensitive` - If configured as `false`, string comparisons are case insensitive.
 * * `convert` - A function which, when passed the extracted value from the candidate object, returns the value to test.
 *
 * A filter may also be configured with a single `filterBy` property. This function is just passed the raw
 * candidate object and must return `true` or `false`.
 *
 * A CollectionFilter may be configured to encapsulate a single filtering function by passing that function as the sole
 * parameter to the constructor:
 *
 *     new CollectionFilter(candidate => candidate.title.contains('search string'));
 *
 */var CollectionFilter=/*#__PURE__*/function(_Base){_inherits2(CollectionFilter,_Base);function CollectionFilter(){_classCallCheck2(this,CollectionFilter);return _possibleConstructorReturn2(this,_getPrototypeOf2(CollectionFilter).apply(this,arguments));}_createClass2(CollectionFilter,[{key:"construct",value:function construct(config){if(typeof config==='function'){config={filterBy:config};}_get2(_getPrototypeOf2(CollectionFilter.prototype),"construct",this).call(this,config);}/**
     * When in a Collection (A Collection holds its Filters in a Collection), we need an id.
     * @property {String}
     * @private
     */},{key:"onChange",value:function onChange(propertyChanged){var me=this;// Inform any owner (eg a Store), that it has to reassess its CollectionFilters
if(!me.isConfiguring&&me.owner&&!me.owner.isConfiguring&&me.owner.onFilterChanged){me.owner.onFilterChanged(me,propertyChanged);}}},{key:"defaultFilterBy",value:function defaultFilterBy(candidate){return this[this.operator](this.convert(candidate[this.property]));}/**
     * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.
     * @type {String}
     */},{key:"convert",value:function convert(value){return!this.caseSensitive&&typeof value==='string'?value.toLowerCase():value;}},{key:"filter",value:function filter(candidate){return this.filterBy(candidate);}},{key:"startsWith",value:function startsWith(v){return String(v).startsWith(this.value);}},{key:"endsWith",value:function endsWith(v){return String(v).endsWith(this.value);}},{key:'=',value:function _(v){return ObjectHelper.isEqual(v,this.value);}},{key:'!=',value:function _(v){return!ObjectHelper.isEqual(v,this.value);}},{key:'>',value:function _(v){return ObjectHelper.isMoreThan(v,this.value);}},{key:'>=',value:function _(v){return ObjectHelper.isMoreThan(v,this.value)||ObjectHelper.isEqual(v,this.value);}},{key:'<',value:function _(v){return ObjectHelper.isLessThan(v,this.value);}},{key:'<=',value:function _(v){return ObjectHelper.isLessThan(v,this.value)||ObjectHelper.isEqual(v,this.value);}},{key:'*',value:function _(v){return ObjectHelper.isPartial(v,this.value);}// Accepts an array or a Collection
},{key:"id",get:function get(){return this._id||(this._id=this.property||IdHelper.generateId('b-filter'));},set:function set(id){this._id=id;}},{key:"filterBy",get:function get(){return this._filterBy||this.defaultFilterBy;}/**
     * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which
     * accepts a candidate object and returns `true` or `false`
     * @type {Function}
     */,set:function set(filterBy){this._filterBy=filterBy;}},{key:"property",set:function set(property){this._property=property;// Signal to owner about filter change
this.onChange('property');},get:function get(){return this._property;}/**
     * The value against which to compare the {@link #config-property} of candidate objects.
     * @type {*}
     */},{key:"value",set:function set(value){this._value=!this.caseSensitive&&typeof value==='string'?value.toLowerCase():value;// Signal to owner about filter change
this.onChange('value');},get:function get(){return this._value;}/**
     * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.
     * May be: `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`, `'startsWith'`, `'endsWith'`
     * @type {String}
     */},{key:"operator",set:function set(operator){this._operator=operator;// Signal to owner about filter change
this.onChange('operator');},get:function get(){return this._operator||(typeof this.value==='string'?'*':'=');}}],[{key:"generateFiltersFunction",value:function generateFiltersFunction(filters){if(!filters||!filters.length&&!filters.count){return FunctionHelper.returnTrue;}return function(candidate){var match=true;var _iteratorNormalCompletion11=true;var _didIteratorError11=false;var _iteratorError11=undefined;try{for(var _iterator11=filters[Symbol.iterator](),_step11;!(_iteratorNormalCompletion11=(_step11=_iterator11.next()).done);_iteratorNormalCompletion11=true){var filter=_step11.value;// Skip disabled filters
if(!filter.disabled){match=filter.filter(candidate);}if(!match){break;}}}catch(err){_didIteratorError11=true;_iteratorError11=err;}finally{try{if(!_iteratorNormalCompletion11&&_iterator11.return!=null){_iterator11.return();}}finally{if(_didIteratorError11){throw _iteratorError11;}}}return match;};}},{key:"defaultConfig",get:function get(){return{/**
             * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.
             * @config {String}
             */property:null,/**
             * The value against which to compare the {@link #config-property} of candidate objects.
             * @config {*}
             */value:null,/**
             * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.
             * May be: `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`, `'startsWith'`, `'endsWith'`
             * @config {String}
             */operator:null,/**
             * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which
             * accepts a candidate object and returns `true` or `false`
             * @config {Function}
             */filterBy:null,/**
             * A function which accepts a value extracted from a candidate object using the {@link #config-property} name, and
             * returns the value which the filter should use to compare against its {@link #config-value}.
             * @config {Function}
             */convert:null,/**
             * Configure as `false` to have string comparisons case insensitive.
             * @config {Boolean}
             */caseSensitive:true,/**
             * The `id` of this Filter for when used by a {@link Common.util.Collection} Collection.
             * By default the `id` is the {@link #config-property} value.
             * @config {String}
             */id:null};}}]);return CollectionFilter;}(Base);exports.CollectionFilter=CollectionFilter;CollectionFilter._$name='CollectionFilter';/**
 * @module Common/util/CollectionSorter
 */ /**
 * A class which encapsulates a single sorter operation which may be applied to any object to decide whether to
 * include or exclude it from a set.
 *
 * A CollectionSorter generally has two properties:
 *
 * * `property` - The name of a property in collection objects by which to sort
 * * `direction` - The sort direction, `'ASC'` or `'DESC'`.
 *
 * It may also be configured with just a {@link #config-sortFn} function which returns the desired comparison
 * result when passed two objects to compare. Note that this does *not* require or use the
 * {@link #config-property} config. Two collection items are passed for comparison.
 *
 * Further configurations may affect how the sorter is applied:
 *
 * * `convert` - A function which, when passed the {@link #config-property} value from
 * a collection object, returns the value to sort by.
 *
 * A CollectionSorter may be configured to encapsulate a {@link #config-sortFn} by passing that function as the sole
 * parameter to the constructor:
 *
 *     new CollectionSorter((lhs, rhs) => {
 *         lhs = lhs.customerDetails.companyName.toLowerCase();
 *         rhs = rhs.customerDetails.companyName.toLowerCase();
 *
 *         if (lhs < rhs) {
 *             return -1;
 *         }
 *         else if (lhs > rhs) {
 *             return 1;
 *         }
 *         else {
 *             return 0;
 *         }
 *     });
 *
 */var CollectionSorter=/*#__PURE__*/function(_Base2){_inherits2(CollectionSorter,_Base2);function CollectionSorter(){_classCallCheck2(this,CollectionSorter);return _possibleConstructorReturn2(this,_getPrototypeOf2(CollectionSorter).apply(this,arguments));}_createClass2(CollectionSorter,[{key:"construct",value:function construct(config){if(typeof config==='function'){config={sortFn:config};}_get2(_getPrototypeOf2(CollectionSorter.prototype),"construct",this).call(this,config);}/**
     * When in a Collection (A Collection holds its Sorters in a Collection), we need an id.
     * @property {String}
     * @private
     */},{key:"defaultSortFn",/**
     * Default sortFn used when no sortFn specified. Uses the {@link #config-property},
     * {@link #config-direction}, and {@link #config-convert}.
     * @private
    */value:function defaultSortFn(lhs,rhs){var me=this,convert=me.convert,property=me.property,useLocaleSort=me.useLocaleSort,multiplier=me.direction.toLowerCase()==='desc'?-1:1;lhs=lhs[property];rhs=rhs[property];if(convert){lhs=convert(lhs);rhs=convert(rhs);}if(useLocaleSort&&lhs!=null&&rhs!=null){// Use systems locale
if(useLocaleSort===true){return String(lhs).localeCompare(rhs);}// Use specified locale
if(typeof useLocaleSort==='string'){return String(lhs).localeCompare(rhs,useLocaleSort);}// Use locale config
if(_typeof(useLocaleSort)==='object'){return String(lhs).localeCompare(rhs,useLocaleSort.locale,useLocaleSort);}}return(lhs>rhs?1:lhs<rhs?-1:0)*multiplier;}},{key:"id",get:function get(){return this._id||(this._id=this.property||IdHelper.generateId('b-sorter'));},set:function set(id){this._id=id;}},{key:"sortFn",set:function set(sortFn){this._sortFn=sortFn;},get:function get(){if(this._sortFn){return this._sortFn;}return this.defaultSortFn;}}],[{key:"generateSortFunction",value:function generateSortFunction(sorters,tieBreaker){var items=sorters.isCollection?sorters.values:sorters,n=items.length;return function(lhs,rhs){var comp,i;for(i=0;i<n;++i){comp=items[i].sortFn(lhs,rhs);if(comp){return comp;}}return tieBreaker?tieBreaker(lhs,rhs):0;};}},{key:"defaultConfig",get:function get(){return{/**
             * The name of a property of collection objects which yields the value to sort by.
             * @config {String}
             */property:null,/**
             * The direction to sort in, `'ASC'` or `'DESC'`
             * @config {String}
             * @default
             */direction:'ASC',/**
             * A function which takes the place of using {@link #config-property} and {@link #config-direction}.
             * The function is passed two objects from the collection to compare andmiust return the comparison result.
             * @config {Function}
             */sortFn:null,/**
             * When using {@link #config-property}, this may be specified as a function which takes the raw
             * property value and returns the value to actually sort by.
             * @config {Function}
             */convert:null,/**
             * The `id` of this Sorter for when used by a {@link Common.util.Collection} Collection.
             * By default the `id` is the {@link #config-property} value.
             * @config {String}
             */id:null,/**
             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
             * a locale string or a locale config to enable.
             *
             * Enabling this has big negative impact on sorting
             * performance. For more info on `localeCompare()`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).
             *
             * ```javascript
             * collection.addSorter({ field: 'name', useLocaleSort : 'sv-SE' });
             * ```
             *
             * @config {Boolean|String|Object}
             * @default false
             */useLocaleSort:null};}}]);return CollectionSorter;}(Base);exports.CollectionSorter=CollectionSorter;CollectionSorter._$name='CollectionSorter';/**
 * @module Common/util/Collection
 */var return0=function return0(){return 0;},reverseNumericSortFn=function reverseNumericSortFn(a,b){return b-a;},filteredIndicesProperty=Symbol('filteredIndicesProperty'),emptyArray$1=Object.freeze([]),sortEvent=Object.freeze({action:'sort',added:emptyArray$1,removed:emptyArray$1,replaced:emptyArray$1}),filterEvent=Object.freeze({action:'filter',added:emptyArray$1,removed:emptyArray$1,replaced:emptyArray$1}),keyTypes={string:1,number:1},nonPrimitives=new WeakMap(),safeIndexKey=function safeIndexKey(value){if(value&&_typeof(value)==='object'){var substitute=nonPrimitives.get(value);if(substitute===undefined){substitute=Symbol('bscik');// Bryntum safe collection index key
nonPrimitives.set(value,substitute);}value=substitute;}return value;};/**
 * A class which encapsulates a {@link #function-get keyed},
 * {@link #function-addFilter filterable}, {@link #function-addSorter sortable}
 * collection of objects. Entries may not be atomic data types such as `string` or `number`.
 *
 * The entries are keyed by their `id` which is determined by interrogating the {@link #config-idProperty}.
 *
 * To filter a Collection, add a {@link Common.util.CollectionFilter CollectionFilter}
 * using the {@link #function-addFilter} method. A Filter config object may be specified here
 * which will be promoted to a CollectionFilter instance.
 *
 * To sort a Collection, add a {@link Common.util.CollectionSorter CollectionSorter}
 * using the {@link #function-addSorter} method. A Sorter config object may be specified here
 * which will be promoted to a CollectionSorter instance.
 */var Collection=/*#__PURE__*/function(_Events2){_inherits2(Collection,_Events2);function Collection(){_classCallCheck2(this,Collection);return _possibleConstructorReturn2(this,_getPrototypeOf2(Collection).apply(this,arguments));}_createClass2(Collection,[{key:"construct",value:function construct(config){/**
         * A counter which is incremented whenever the Collection is mutated in a meaningful way.
         *
         * If a {@link #function-splice} call results in no net replacement, removal or addition,
         * then the `generation` will not be incremented.
         * @property {Number}
         * @readonly
         */this.generation=0;this._values=[];_get2(_getPrototypeOf2(Collection.prototype),"construct",this).call(this,config);}},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(Collection.prototype),"doDestroy",this).call(this);this._values.length=0;if(this.isFiltered){this._filteredValues.length=0;this.filters.destroy();}this._sorters&&this._sorters.destroy();}},{key:"clear",/**
     * Clears this collection.
     */value:function clear(){var me=this,removed=this._values.slice();if(me.totalCount){me._values.length=0;if(me._filteredValues){me._filteredValues.length=0;}me._indicesInvalid=true;// Indicate to obervers that data has changed.
me.generation++;me.trigger('change',{action:'clear',removed:removed});}}/**
     * Replaces the internal values array with the passed array. Note that this takes ownership of the array, and the array
     * must not be mutated by outside code.
     *
     * This is an internal utility method, not designed for use by application code.
     * @internal
     * @param {Object[]} values The new values array
     */},{key:"replaceValues",value:function replaceValues(values,silent,ignoreFilters){var me=this;var removed;if(me.isFiltered&&!ignoreFilters){removed=me._filteredValues;me._filteredValues=values;}else{removed=me._values;me._values=values;if(me._filteredValues){me._filteredValues.length=0;}}me._indicesInvalid=true;// Indicate to obervers that data has changed.
me.generation++;if(!silent){me.trigger('change',{action:'replaceValues',removed:removed,values:values,replaced:[]});}}},{key:Symbol.iterator,/**
     * Iterator that allows you to do for (let item of collection)
     */value:function value(){return this.values[Symbol.iterator]();}/**
     * Executes the passed function for each item in this Collection, passing in the item,
     * ths index, and the full item array.
     * @param {Function} fn The function to execute.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to include all items, bypassing filters.
     */},{key:"forEach",value:function forEach(fn){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;(this.isFiltered&&!ignoreFilters?this._filteredValues:this._values).forEach(fn);}/**
     * Extracts ths content of this Collection into an array based upon the passed
     * value extraction function.
     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to process an item even if it is filtered out.
     * @returns {Object[]} An array of values extracted from this Collection.
     */},{key:"map",value:function map(fn){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return(this.isFiltered&&!ignoreFilters?this._filteredValues:this._values).map(fn);}/**
     * Returns the first item in this Collection which elicits a *truthy* return value from the passed funtion.
     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to include filtered out items.
     * @returns {Object} The matched item, or `undefined`.
     */},{key:"find",value:function find(fn){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return(this.isFiltered&&!ignoreFilters?this._filteredValues:this._values).find(fn);}},{key:"add",/**
     * Adds items to this Collection. Multiple new items may be passed.
     *
     * By default, new items are appended to the existing values.
     *
     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.
     *
     * Any {@link #property-filters} {@link #property-filters} present are re-run.
     *
     * *Note that if application functionality requires add and remove, the
     * {@link #function-splice} operation is preferred as it performs both
     * operations in an atomic manner*
     * @param  {...Object} items The item(s) to add.
     */value:function add(){for(var _len19=arguments.length,items=new Array(_len19),_key19=0;_key19<_len19;_key19++){items[_key19]=arguments[_key19];}if(items.length===1){this.splice.apply(this,[this._values.length,null].concat(items));}else{this.splice(this._values.length,null,items);}}/**
     * Removes items from this Collection. Multiple items may be passed.
     *
     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.
     *
     * Any {@link #property-filters} {@link #property-filters} present are re-run.
     *
     * *Note that if application functionality requires add and remove, the
     * {@link #function-splice} operation is preferred as it performs both
     * operations in an atomic manner*
     * @param  {...Object} items The item(s) to remove.
     */},{key:"remove",value:function remove(){for(var _len20=arguments.length,items=new Array(_len20),_key20=0;_key20<_len20;_key20++){items[_key20]=arguments[_key20];}if(items.length===1){this.splice.apply(this,[0].concat(items));}else{this.splice(0,items);}}/**
     * Moves an individual item to another location.
     * @param {Object} item The item to move.
     * @param {Object} [beforeItem] the item to insert the first item before. If omitted, the `item`
     * is moved to the end of the Collection.
     * @returns {Number} The new index of the `item`.
     */},{key:"move",value:function move(item,beforeItem){var me=this,_values=me._values,itemIndex=me.indexOf(item,true);var beforeIndex=beforeItem?me.indexOf(beforeItem,true):_values.length;if(itemIndex===-1||beforeIndex===-1){throw new Error('Collection move parameters must be present in Collection');}if(itemIndex!==beforeIndex&&itemIndex!==beforeIndex-1){if(itemIndex<beforeIndex){beforeIndex--;}_values.splice(itemIndex,1);_values.splice(beforeIndex,0,item);me._indicesInvalid=true;me.trigger('change',{action:'move',item:item,from:itemIndex,to:beforeIndex});}return beforeIndex;}/**
     * The core data set mutation method. Removes and adds at the same time. Analogous
     * to the `Array` `splice` method.
     *
     * Note that if items that are specified for removal are also in the `toAdd` array,
     * then those items are *not* removed then appended. They remain in the same position
     * relative to all remaning items.
     *
     * @param {Number} index Index at which to remove a block of items. Only valid if the
     * second, `toRemove` argument is a number.
     * @param {Object[]|Number} [toRemove] Either the number of items to remove starting
     * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).
     * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.
     */},{key:"splice",value:function splice(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var toRemove=arguments.length>1?arguments[1]:undefined;for(var _len21=arguments.length,toAdd=new Array(_len21>2?_len21-2:0),_key21=2;_key21<_len21;_key21++){toAdd[_key21-2]=arguments[_key21];}var me=this,idProperty=me.idProperty,values=me._values,newIds={},removed=[],replaced=[],oldCount=me.totalCount;var added,mutated;// Create an "newIds" map of the new items so remove ops know if it's really a replace
// {
//     1234 : true
// }
// And an "added" array of the items that need adding (there was not already an entry for the id)
//
if(toAdd){if(toAdd.length===1&&Array.isArray(toAdd[0])){toAdd=toAdd[0];}// Check for replacements if we contain any data
if(oldCount&&toAdd.length){// Only risk rebuilding the indices if we are adding
var idIndex=me.indices[idProperty];added=[];for(var i=0;i<toAdd.length;i++){var newItem=toAdd[i],id=safeIndexKey(newItem[idProperty]),existingIndex=idIndex[id];// Register incoming id so that removal leaves it be
newIds[id]=true;// Incoming id is already present.
// Replace it in place.
if(existingIndex!=null){// If incoming is the same object, it's a no-op
if(values[existingIndex]!==newItem){replaced.push([values[existingIndex],newItem]);values[existingIndex]=newItem;}}else{added.push(newItem);}}}// Empty Collection, we simply add what we're passed
else{added=toAdd;}}if(toRemove){// We're removing a chunk starting at index
if(typeof toRemove==='number'){for(var removeIndex=index;toRemove;--toRemove){var _id=safeIndexKey(values[removeIndex][idProperty]);// If the entry here is being replaced, skip the insertion index past it
if(newIds[_id]){index++;removeIndex++;}// If the id is not among incoming items, remove it
else{removed.push(values[removeIndex]);values.splice(removeIndex,1);me._indicesInvalid=mutated=true;}}}// We are removing an item/items
else{var contiguous=added.length===0,lastIdx;if(!Array.isArray(toRemove)){toRemove=[toRemove];}// Create array of index points to remove.
// They must be in reverse order so that removal leaves following remove indices stable
var removeIndices=toRemove.reduce(function(result,item){var isNumeric=typeof item==='number',idx=isNumeric?item:me.indexOf(item,true);// Drop out of contiguous mode if we find a non-contiguous record, or a remove *index*
if(contiguous&&(lastIdx!=null&&idx!==lastIdx+1||isNumeric)){contiguous=false;}// Do not include indices out of range in our removeIndices
if(idx>=0&&idx<oldCount){result.push(idx);}lastIdx=idx;return result;},[]).sort(reverseNumericSortFn);// If it's a pure remove of contiguous items with no adds, fast track it.
if(contiguous){// If reduced to zero by being asked to remove items we do not contain
// then this is a no-op
if(removeIndices.length){removed.push.apply(removed,toRemove);values.splice(removeIndices[removeIndices.length-1],removeIndices.length);me._indicesInvalid=mutated=true;}}else{// Loop through removeIndices splicing each index out of the values
// unless there's an incoming identical id.
for(var _i8=0;_i8<removeIndices.length;_i8++){var _removeIndex=removeIndices[_i8];if(_removeIndex!==-1){var _id2=safeIndexKey(values[_removeIndex][idProperty]);// If the id is not among incoming items, remove it
if(!newIds[_id2]){removed.unshift(values[_removeIndex]);values.splice(_removeIndex,1);me._indicesInvalid=mutated=true;}}}}}}// If we collected genuinely new entries, insert them at the splice index
if(added.length){values.splice.apply(values,[Math.min(index,values.length),0].concat(_toConsumableArray(added)));me._indicesInvalid=mutated=true;}// Ensure order of values matches the sorters
if(me.isSorted){me.onSortersChanged();}// The sort will also recreate the filteredValues so that it can be in correct sort order
else if(me.isFiltered){if(me.autoFilter){me.onFiltersChanged();}else{var _me$_filteredValues;(_me$_filteredValues=me._filteredValues).push.apply(_me$_filteredValues,_toConsumableArray(added));}}// If we either added or removed items, or we did an in-place replace operation
// then inform all interested parties.
if(mutated||replaced.length){// Indicate to obervers that data has changed.
me.generation++;/**
             * Fired when items are added, replace or removed
             * @event change
             * @param {String} action The underlying operation which caused data change.
             * May be `'splice'` (meaning an atomic add/remove operation, `'sort'` or `'filter'`)
             * @param {Common.util.Collection} source This Collection.
             * @param {Object[]} removed An array of removed items.
             * @param {Object[]} added An array of added items.
             * @param {Object[]} replaced An array of replacements, each entry of which contains `[oldValue, newValue]`.
             * @param {Number} oldCount The number of items in the full, untiltered collection prior to the splice operation.
             */me.trigger('change',{action:'splice',removed:removed,added:added,replaced:replaced,oldCount:oldCount});}else{/**
             * Fired when a {@link #function-splice} operation is requested but the operation
             * is a no-op and has caused no change to this Collection's dataset. The splice
             * method's parameters are passed for reference.
             * @event noChange
             * @param {Number} index Index at which to remove a block of items.
             * @param {Object[]|Number} [toRemove] Either the number of items to remove starting
             * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).
             * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.
             */me.trigger('noChange',{index:index,toRemove:toRemove,toAdd:toAdd});}}/**
     * Change the id of an existing member by mutating its {@link #config-idProperty}.
     * @param {String|Number|Object} item The item or id of the item to change.
     * @param {String|Number} newId The id to set in the existing member.
     */},{key:"changeId",value:function changeId(item,newId){var me=this,idProperty=me.idProperty,oldId=keyTypes[_typeof(item)]?item:item[idProperty],member=me.get(oldId);if(member){var existingMember=me.get(newId);if(existingMember&&member!==existingMember){throw new Error("Attempt to set item ".concat(oldId," to already existing member's id ").concat(newId));}member[idProperty]=newId;// If indices are valid, keep the id index correct
if(!me._indicesInvalid){var idIndex=me.indices.id,memberIndex=idIndex[oldId];delete idIndex[oldId];idIndex[newId]=memberIndex;}}}/**
     * Returns the item with the passed `id`. By default, filtered are honoured, and
     * if the item with the requested `id` is filtered out, nothing will be returned.
     *
     * To return the item even if it has been filtered out, pass the second parameter as `true`.
     * @param {*} id The `id` to find.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.
     * @returns {Object} The found item, or `undefined`.
     */},{key:"get",value:function get(id){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return this.getBy(this.idProperty,id,ignoreFilters);}},{key:"getAt",value:function getAt(index){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(this.isFiltered&&!ignoreFilters){return this._filteredValues[index];}else{return this._values[index];}}/**
     * Returns the item with passed property name equal to the passed value. By default,
     * filtered are honoured, and if the item with the requested `id` is filtered out,
     * nothing will be returned.
     *
     * To return the item even if it has been filtered out, pass the third parameter as `true`.
     * @param {String} propertyName The property to test.
     * @param {*} value The value to find.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.
     * @returns {Object} The found item, or `undefined`.
     */},{key:"getBy",value:function getBy(propertyName,value){var ignoreFilters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this;if(me.isFiltered&&ignoreFilters){var index=me.findIndex(propertyName,value,true);if(index!==-1){return me._values[index];}}else{var _index=me.findIndex(propertyName,value);if(_index!==-1){return me.values[_index];}}}/**
     * The number of items in this collection. Note that this honours filtering.
     * See {@link #property-totalCount};
     * @property {Number}
     * @readonly
     */},{key:"addSorter",/**
     * Adds a Sorter to the Collection of Sorters which are operating on this Collection.
     *
     * A Sorter may be an specified as an instantiated {@link Common.util.CollectionSorter
     * CollectionSorter}, or a config object for a CollectionSorter of the form
     *
     *     {
     *         property  : 'age',
     *         direction : 'desc'
     *     }
     *
     * Note that by default, a Sorter *replaces* a Sorter with the same `property` to make
     * it easy to change existing Sorters. A Sorter's `id` is its `property` by default. You
     * can avoid this and add multiple Sorters for one property by configuring Sorters with `id`s.
     *
     * A Sorter may also be specified as a function which compares two objects eg:
     *
     *     (lhs, rhs) => lhs.customerDetails.age - rhs.customerDetails.age
     *
     * @param {Object} sorter A Sorter of Sorter configuration object to add to the Collection
     * of Sorters operating on this Collection.
     * @returns {Common.util.CollectionSorter} The resulting Sorter to make it easy to remove Sorters.
     */value:function addSorter(sorter){var result=sorter instanceof CollectionSorter?sorter:new CollectionSorter(sorter);this.sorters.add(result);return result;}/**
     * A flag which is `true` if this Collection has active {@link #property-sorters}.
     * @property {Boolean}
     * @readonly
     */},{key:"onSortersChanged",value:function onSortersChanged(){var me=this;delete me._sortFunction;me._values.sort(me.sortFunction);me._indicesInvalid=true;me.trigger('change',sortEvent);}/**
     * A sorter function which encapsulates the {@link Common.util.CollectionSorter Sorters}
     * for this Collection.
     * @property {Function}
     * @readonly
     */},{key:"addFilter",/**
     * Adds a Filter to the Collection of Filters which are operating on this Collection.
     *
     * A Filter may be an specified as an instantiated {@link Common.util.CollectionFilter
     * CollectionFilter}, or a config object for a CollectionFilter of the form
     *
     *     {
     *         property : 'age',
     *         operator : '>=',
     *         value    : 21
     *     }
     *
     * Note that by default, a Filter *replaces* a Filter with the same `property` to make
     * it easy to change existing Filters. A Filter's `id` is its `property` by default. You
     * can avoid this and add multiple Filters for one property by configuring Filters with `id`s.
     *
     * A Filter may also be specified as a function which filters candidate objects eg:
     *
     *     candidate => candidate.customerDetails.age >= 21
     *
     * @param {Object} filter A Filter or Filter configuration object to add to the Collection
     * of Filters operating on this Collection.
     * @returns {Common.util.CollectionFilter} The resulting Filter to make it easy to remove Filters.
     */value:function addFilter(filter){var result=filter instanceof CollectionFilter?filter:new CollectionFilter(filter);this.filters.add(result);return result;}/**
     * A flag which is `true` if this Collection has active {@link #property-filters}.
     * @property {Boolean}
     * @readonly
     */},{key:"onFiltersChanged",value:function onFiltersChanged(){var me=this;me._filterFunction=null;me._filteredValues=me._values.filter(me.filterFunction);me._indicesInvalid=true;me.trigger('change',filterEvent);}/**
     * A filter function which encapsulates the {@link Common.util.CollectionFilter Filters}
     * for this Collection.
     * @property {Function}
     * @readonly
     */},{key:"addIndex",/**
     * Adds a lookup index for the passed property name. The index is built lazily when
     * an index is serched,
     * @internal
     * @param {String} indexProperty The property name to add an index for.
     */value:function addIndex(indexProperty){(this._indices||(this._indices={}))[indexProperty]={};// Indices need a rebuild now.
this._indicesInvalid=true;/**
         * this.indices is keyed by the property name, and contains the keys linked to the index in the _values array.
         * So collection.add({id : foo, name : 'Nige'}, {id : 'bar', name : 'Faye'}) where collection has had an index
         * added for the "name" property would result in:
         *
         * {
         *     id : {
         *         foo : 0,
         *         bar : 1
         *     },
         *     name : {
         *         Nige : 0,
         *         Faye : 1
         *     }
         * }
         */}/**
     * Return the index of the item with the specified key having the specified value.
     * By default, filtering is taken into account and this returns the index in the filtered
     * dataset if present. To bypass this, pass the third parameter as `true`.
     * @param {String} propertyName The name of the property to test.
     * @param {*} value The value to test for.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to return the index in
     * the original data set if the item is filtered out.
     * @returns {Number} The index of the item, or `-1` if not found.
     */},{key:"findIndex",value:function findIndex(propertyName,value){var ignoreFilters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,isFiltered=me.isFiltered,index=isFiltered&&!ignoreFilters?me.indices[filteredIndicesProperty][propertyName]:me.indices[propertyName];if(index){var itemIndex=index[safeIndexKey(value)];if(itemIndex!=null){return itemIndex;}}else{// Search the filtered values if we are filtered and not ignoreing filters
var values=isFiltered&&!ignoreFilters?me._filteredValues:me._values,count=values.length;for(var i=0;i<count;i++){if(values[i][propertyName]==value){return i;}}}// Not found
return-1;}/**
     * Returns the index of the item with the same `id` as the passed item.
     *
     * By default, filtering is honoured, so if the item in question has been added,
     * but is currently filtered out of visibility, `-1` will be returned.
     *
     * To find the index in the master, unfiltered dataset, pass the second parameter as `true`;
     * @param {Object|String|Number} item The item to find, or an `id` to find.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.
     * @returns {Number} The index of the item, or `-1` if not found.
     */},{key:"indexOf",value:function indexOf(item){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return this.findIndex(this.idProperty,keyTypes[_typeof(item)]?item:item[this.idProperty],ignoreFilters);}/**
     * Returns `true` if this Collection includes an item with the same `id` as the passed item.
     *
     * By default, filtering is honoured, so if the item in question has been added,
     * but is currently filtered out of visibility, `false` will be returned.
     *
     * To query inclusion in the master, unfiltered dataset, pass the second parameter as `true`;
     * @param {Object|String|Number} item The item to find, or an `id` to find.
     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.
     * @returns {Boolean} True if the passed item is found.
     */},{key:"includes",value:function includes(item){var ignoreFilters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return this.indexOf(item,ignoreFilters)!==-1;}},{key:"rebuildIndices",/**
     * Called when the Collection is mutated and the indices have been flagged as invalid.
     *
     * Rebuilds the indices object to allow lookup by keys.
     * @internal
     */value:function rebuildIndices(){var me=this,isFiltered=me.isFiltered,indices=me._indices||(me._indices={}),keyProps=Object.keys(indices),indexCount=keyProps.length,values=me._values,count=values.length;var i,j;// First, clear indices.
if(isFiltered){indices[filteredIndicesProperty]={};}for(i=0;i<indexCount;i++){indices[keyProps[i]]={};if(isFiltered){indices[filteredIndicesProperty][keyProps[i]]={};}}/*
         * Rebuild the indices object.
         * Loop through all items adding an entry for each one to each index.
         * So collection.add({id : foo, name : 'Nige'}, {id : 'bar', name : 'Faye'}) where collection has had an index
         * added for the "name" property would result in:
         *
         * {
         *     id : {
         *         foo : 0,
         *         bar : 1
         *     },
         *     name : {
         *         Nige : 0,
         *         Faye : 1
         *     }
         * }
         */for(i=0;i<count;i++){var item=values[i];for(j=0;j<indexCount;j++){var keyProp=keyProps[j];// This does indices.name['Nige'] = 0
indices[keyProp][safeIndexKey(item[keyProp])]=i;}}// Create a parallel lookup structure into the _filteredValues
if(isFiltered){var _values2=me._filteredValues,_count=_values2.length,_indices=me._indices[filteredIndicesProperty];for(i=0;i<_count;i++){var _item=_values2[i];for(j=0;j<indexCount;j++){var _keyProp=keyProps[j];// This does indices[filteredIndicesProperty].name['Nige'] = 0
_indices[_keyProp][safeIndexKey(_item[_keyProp])]=i;}}}me._indicesInvalid=false;}},{key:"isCollection",get:function get(){return true;}},{key:"values",set:function set(values){this.splice(0,this._values.length,values);}/**
     * The set of values of this Collection. If this Collection {@link #property-isFiltered},
     * this yields the filtered data set.
     *
     * Setting this property replaces the data set.
     * @property {Object[]}
     */,get:function get(){return this.isFiltered?this._filteredValues:this._values;}},{key:"first",get:function get(){return this.values[0];}},{key:"last",get:function get(){return this.values[this.count-1];}/**
     * The set of all values of this Collection regardless of filters applied.
     * @readonly
     * @property {Object[]}
     */},{key:"allValues",get:function get(){return this._values;}},{key:"count",get:function get(){return this.values.length;}/**
     * The number of items in this collection regardless of filtering.
     * @property {Number}
     * @readonly
     */},{key:"totalCount",get:function get(){return this._values.length;}},{key:"idProperty",set:function set(idProperty){this._idProperty=idProperty;this.addIndex(idProperty);}/**
     * The property name used to extract item `id`s from added objects.
     * @property {String}
     */,get:function get(){return this._idProperty;}},{key:"extraKeys",set:function set(extraKeys){if(!Array.isArray(extraKeys)){extraKeys=[extraKeys];}for(var i=0;i<extraKeys.length;i++){this.addIndex(extraKeys[i]);}}/**
     * The Collection of {@link Common.util.CollectionSorter Sorters} for this Collection.
     * @property {Common.util.Collection}
     * @readonly
     */},{key:"sorters",get:function get(){if(!this._sorters){this._sorters=new Collection({listeners:{change:'onSortersChanged',thisObj:this}});}return this._sorters;}},{key:"isSorted",get:function get(){return Boolean(this._sorters&&this._sorters.count);}},{key:"sortFunction",get:function get(){if(!this._sortFunction){if(this.isSorted){this._sortFunction=CollectionSorter.generateSortFunction(this.sorters.values);}else{this._sortFunction=return0;}}return this._sortFunction;}/**
     * The Collection of {@link Common.util.CollectionFilter Filters} for this Collection.
     * @property {Common.util.Collection}
     * @readonly
     */},{key:"filters",get:function get(){if(!this._filters){this._filters=new Collection({listeners:{change:'onFiltersChanged',thisObj:this}});}return this._filters;}},{key:"isFiltered",get:function get(){return Boolean(this._filters&&this._filters.count);}},{key:"filterFunction",get:function get(){if(!this._filterFunction){if(this.isFiltered){this._filterFunction=CollectionFilter.generateFiltersFunction(this.filters.values);}else{this._filterFunction=FunctionHelper.returnTrue;}}return this._filterFunction;}},{key:"indices",get:function get(){if(this._indicesInvalid){this.rebuildIndices();}return this._indices;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Specify the name of the property of added objects which provides the lookup key
             * @config {String}
             * @default
             */idProperty:'id',/**
             * Specify the names of properties which are to be indexed for fast lookup.
             * @config {String[]}
             */extraKeys:null,/**
             * Automatically apply filters on item add.
             * @config {String[]}
             * @default
             */autoFilter:true};}}]);return Collection;}(Events(Base));exports.Collection=Collection;Collection._$name='Collection';/**
 * @module Common/helper/util/Scroller
 */var scrollLiterals={true:'auto',false:'hidden','hidden-scroll':'auto'},scrollerCls='b-widget-scroller',defaultScrollOptions={block:'nearest'},immediatePromise$1=new Promise(function(resolve){return resolve();}),xAxis={x:1};/**
 * Encapsulates scroll functionality for a Widget. All requests for scrolling and scrolling information
 * must go through a Widget's {@link Common.widget.Widget#config-scrollable} property.
 * @extends Common/Base
 */var Scroller=/*#__PURE__*/function(_Delayable2){_inherits2(Scroller,_Delayable2);function Scroller(){_classCallCheck2(this,Scroller);return _possibleConstructorReturn2(this,_getPrototypeOf2(Scroller).apply(this,arguments));}_createClass2(Scroller,[{key:"addPartner",/**
     * Fired when scrolling happens on this Scroller's element. The event object is a native `scroll` event
     * with the described extra properties injected.
     * @event scroll
     * @param {Common.widget.Widget} widget The owning Widget which has been scrolled.
     * @param {Common.helper.util.Scroller} source This Scroller
     */ /**
     * Fired when scrolling finished on this Scroller's element. The event object is the last native `scroll` event
     * fires by the element with the described extra properties injected.
     * @event scrollend
     * @param {Common.widget.Widget} widget The owning Widget which has been scrolled.
     * @param {Common.helper.util.Scroller} source This Scroller
     */ /**
     * Partners this Scroller with the passed scroller in order to sync the scrolling position in the passed axes
     * @param {Common.helper.util.Scroller} otherScroller
     * @param {String|Object} [axes='x'] `'x'` or `'y'` or `{x: true/false, y: true/false}` axes to sync
     */value:function addPartner(otherScroller){var axes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:xAxis;if(typeof axes==='string'){axes=_defineProperty({},axes,1);}(this.partners||(this.partners=new Collection())).add({id:otherScroller.id,scroller:otherScroller,axes:axes});// It's a mutual relationship - the other scroller partners with us.
if(!otherScroller.partners||!otherScroller.partners.includes(this.id)){otherScroller.addPartner(this,axes);}}/**
     * Breaks the link between this Scroller and the passed Scroller set up by the
     * {@link #function-addPartner} method.
     * @param {Common.helper.util.Scroller} otherScroller The Scroller to unlink from.
     */},{key:"removePartner",value:function removePartner(otherScroller){if(this.partners&&this.partners.includes(otherScroller)){this.partners.remove(otherScroller);otherScroller.removePartner(this);}}/**
     * Scrolls the passed element or {@link Common.helper.util.Rectangle} into view according to the passed options.
     * @param {HTMLElement|Common.helper.util.Rectangle} element The element or a Rectangle in document space to scroll into view.
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the element when it is in view.
     * @param {Boolean} [options.x] Pass as `false` to disable scrolling in the `X` axis.
     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.
     * @returns {Promise} A promise which is resolved when the element has been scrolled into view.
     */},{key:"scrollIntoView",value:function scrollIntoView(element){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions;var isRectangle=element instanceof Rectangle,originalRect=isRectangle?element:Rectangle.from(element),_this$getDeltaTo=this.getDeltaTo(element,options),xDelta=_this$getDeltaTo.xDelta,yDelta=_this$getDeltaTo.yDelta,result=this.scrollBy(xDelta,yDelta,options);if(options.highlight||options.focus){result.then(function(){if(isRectangle){element=originalRect.translate(-xDelta,-yDelta);}if(options.highlight){DomHelper.highlight(element);}if(options.focus){element.focus();}});}return result;}/**
     * Scrolls by the passed deltas according to the passed options.
     * @param {Number} [xDelta=0] How far to scroll in the X axis.
     * @param {Number} [yDelta=0] How far to scroll in the Y axis.
     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.
     * @param {Boolean} [options.silent] Set to `true` to suspend `scroll` events during scrolling.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @returns {Promise} A promise which is resolved when the scrolling has fnished.
     */},{key:"scrollBy",value:function scrollBy(){var xDelta=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var yDelta=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultScrollOptions;var me=this,animate=_typeof(options)==='object'?options.animate:options,absX=Math.abs(xDelta),absY=Math.abs(yDelta);if(me.scrollAnimation){me.scrollAnimation.cancel();me.scrollAnimation=null;}// Only set the flag if there is going to be scrolling done.
// It is cleared by the scrollEnd handler, so there must be scrolling.
if(xDelta||yDelta){me.silent=options.silent;}var duration=animate&&(typeof animate==='number'?animate:typeof animate.duration==='number'?animate.duration:300);// Only go through animation if there is significant scrolling to do.
if(duration&&(absX>10||absY>10)){var x=me.x,y=me.y;var lastX=x,lastY=y;// For small distances, constrain duration
if(Math.max(absX,absY)<50){duration=Math.min(duration,500);}me.scrollAnimation=FunctionHelper.animate(duration,function(progress){var isEnd=progress===1;if(xDelta){// If the user, or another process has changed the position since last time, abort.
// Unless called with the force option to proceed regardless.
if(me.x!==lastX&&!options.force){return me.scrollAnimation&&me.scrollAnimation.cancel();}lastX=me.x=Math.max(x+(isEnd?xDelta:Math.round(xDelta*progress)),0);}if(yDelta){// If the user, or another process has changed the position since last time, abort.
// Unless called with the force option to proceed regardless.
if(me.y!==lastY&&!options.force){return me.scrollAnimation&&me.scrollAnimation.cancel();}lastY=me.y=Math.max(y+(isEnd?yDelta:Math.round(yDelta*progress)),0);}},null,animate.easing);me.scrollAnimation.then(function(){me.scrollAnimation=null;});return me.scrollAnimation;}else{me.x+=xDelta;me.y+=yDelta;return immediatePromise$1;}}/**
     * Scrolls to the passed position according to the passed options.
     * @param {Number} [toX=0] Where to scroll to in the X axis.
     * @param {Number} [toY=0] Where to scroll to in the Y axis.
     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @returns {Promise} A promise which is resolved when the scrolling has finished.
     */},{key:"scrollTo",value:function scrollTo(toX,toY,options){var x=this.x,y=this.y,xDelta=toX==null?0:toX-x,yDelta=toY==null?0:toY-y;return this.scrollBy(xDelta,yDelta,options);}},{key:"doDestroy",value:function doDestroy(){var me=this;if(me._element){me._element.removeEventListener('scroll',me.scrollHandler);me.wheelListenerRemover&&me.wheelListenerRemover();}if(me.scrollAnimation){me.scrollAnimation.cancel();}me.partners&&me.partners.forEach(function(partner){return partner.scroller.removePartner(me);});_get2(_getPrototypeOf2(Scroller.prototype),"doDestroy",this).call(this);}/**
     * Respond to style changes to monitor scroll *when this Scroller is in `translate: true` mode.*
     * @param {Object[]} mutations The ElementMutation records.
     * @private
     */},{key:"onElMutation",value:function onElMutation(mutations){var me=this,_DomHelper$getTransla=DomHelper.getTranslateXY(me.element),_DomHelper$getTransla2=_slicedToArray(_DomHelper$getTransla,2),x=_DomHelper$getTransla2[0],y=_DomHelper$getTransla2[1];// If the mutation was due to a change in the translateX/Y styles, this is
// a scroll event, so inform observers and partners
if(me._x!==-x||me.y!==-y){var scrollEvent=new CustomEvent('scroll',{bubbles:true});Object.defineProperty(scrollEvent,'target',{get:function get(){return me.element;}});me.onScroll(scrollEvent);}}},{key:"onScroll",value:function onScroll(e){var me=this;if(!me.widget||!me.widget.isDestroyed){// Don't read the value until we have to. The x & y getters will check this flag
me.positionDirty=true;e.widget=me.widget;// If we have the scroll silent flag, do not fire the event.
if(!me.silent){me.trigger('scroll',e);}// Keep partners in sync
if(me.partners){me.partners.forEach(function(_ref17){var axes=_ref17.axes,scroller=_ref17.scroller;// Don't feed back to the one who's just told us to scroll here.
if(scroller!==me.controllingPartner){scroller.sync(me,axes);}});}// If this scroll impulse was from a controlling partner, clear that now
me.controllingPartner=null;// Will fire in 100ms, unless another scroll event comes round.
// In which case execution will be pushed out by another 100ms.
me.scrollEndHandler(e);}}},{key:"onScrollEnd",value:function onScrollEnd(e){if(this.silent){this.silent=false;}this.trigger('scrollEnd',e);}/**
     * Returns the xDelta and yDelta values in an object from the current scroll position to the
     * passed element or Rectangle.
     * @param {HTMLElement|Common.helper.util.Rectangle} element The element or a Rectangle to calculate deltas for.
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] A margin around the element or rectangle to bring into view.
     * @param {Boolean} [options.x] Pass as `false` to disable scrolling in the `X` axis.
     * @param {Boolean} [options.y] Pass as `false` to disable scrolling in the `Y` axis.
     * @returns {Object} `{ xDelta, yDelta }`
     * @internal
     */},{key:"getDeltaTo",value:function getDeltaTo(element,options){if(!(element instanceof Rectangle)){element=Rectangle.from(element);}var me=this,block=options.block||'nearest',scrollerRect=me.viewport,edgeOffset=options.edgeOffset||0,// Only include the offset round the target is the viewport is big enough to accommodate it.
xOffset=scrollerRect.width>=element.width+edgeOffset*2?edgeOffset:0,yOffset=scrollerRect.height>=element.height+edgeOffset*2?edgeOffset:0,elRect=element.clone().adjust(-xOffset,-yOffset,xOffset,yOffset).constrainTo(new Rectangle(scrollerRect.x-me.x,scrollerRect.y-me.y,me.scrollWidth,me.scrollHeight)),targetRect=elRect.clone();var xDelta=0,yDelta=0;if(block==='start'){targetRect.moveTo(scrollerRect.x,scrollerRect.y);xDelta=elRect.x-targetRect.x;yDelta=elRect.y-targetRect.y;}else if(block==='end'){targetRect.translate(scrollerRect.right-targetRect.right,scrollerRect.bottom-targetRect.bottom);xDelta=elRect.x-targetRect.x;yDelta=elRect.y-targetRect.y;}else if(block==='center'){var center=scrollerRect.center;targetRect.moveTo(center.x-targetRect.width/2,center.y-targetRect.height/2);xDelta=elRect.x-targetRect.x;yDelta=elRect.y-targetRect.y;}// Use "nearest"
else{// If it's *possible* to scroll to nearest x, calculate the delta
if(targetRect.width<=scrollerRect.width){if(targetRect.right>scrollerRect.right){xDelta=targetRect.right-scrollerRect.right;}else if(targetRect.x<scrollerRect.x){xDelta=targetRect.x-scrollerRect.x;}}// If it's *possible* to scroll to nearest y, calculate the delta
if(targetRect.height<=scrollerRect.height){if(targetRect.bottom>scrollerRect.bottom){yDelta=targetRect.bottom-scrollerRect.bottom;}else if(targetRect.y<scrollerRect.y){yDelta=targetRect.y-scrollerRect.y;}}}// Do not allow deltas which would produce -ve scrolling or scrolling past the maxX/Y
return{// When calculating how much delta is necessary to scroll the targetRect to the center
// constrain that to what is *possible*. If what you are trying to scroll into the
// center is hard against the right edge of the scroll range, then it cannot scroll
// to the center, and the result must reflect that even though scroll is self limiting.
// This is because highlighting the requested "element", if that element is in fact
// a Rectangle, uses a temporary element placed at the requested region which
// MUST match where the actual scroll has moved the requested region.
xDelta:options.x===false?0:Math.max(Math.min(xDelta,me.maxX-me.x),-me.x),yDelta:options.y===false?0:Math.max(Math.min(yDelta,me.maxY-me.y),-me.y)};}/**
     * A {@link Common.helper.util.Rectangle Rectangle} describing the bounds of the scrolling viewport.
     * @property {Common.helper.util.Rectangle}
     */},{key:"sync",value:function sync(controllingPartner,axes){var x=axes.x,y=axes.y;this.controllingPartner=controllingPartner;if(x!=null){this.x=controllingPartner.x;}if(y!=null){this.y=controllingPartner.y;}}/**
     * The vertical scroll position of the widget.
     * @property {Number}
     */},{key:"updateOverflowX",value:function updateOverflowX(overflowX){var element=this.element,translate=this.translate;// Scroll, but without showing scrollbars.
// For example a grid header. Only works on platforms which
// support suppression of scrollbars through CSS.
if(overflowX==='hidden-scroll'&&!translate){element.classList.add('b-hide-scroll');// Adds a wheel listener if needed - there is scrollbar width
// and we don't already have one.
this.enableWheel();}if(!translate){element.style.overflowX=scrollLiterals[overflowX]||overflowX;}this.positionDirty=true;}/**
     * The `overflow-y` setting for the widget. `true` means `'auto'`.
     * @property {Boolean/String}
     */},{key:"updateOverflowY",value:function updateOverflowY(overflowY){var element=this.element,translate=this.translate;// Scroll, but without showing scrollbars.
// For example a grid header. Only works on platforms which
// support suppression of scrollbars through CSS.
if(overflowY==='hidden-scroll'&&!translate){element.classList.add('b-hide-scroll');// Adds a wheel listener if needed - there is scrollbar width
// and we don't already have one.
this.enableWheel();}if(!translate){element.style.overflowY=scrollLiterals[overflowY]||overflowY;}this.positionDirty=true;}},{key:"enableWheel",value:function enableWheel(){if(!BrowserHelper.isChrome&&!BrowserHelper.isSafari&&!this.wheelListenerRemover){this.wheelListenerRemover=EventHelper.on({element:this.element,wheel:'onWheel',thisObj:this});}}},{key:"onWheel",value:function onWheel(e){if(e.deltaX>e.deltaY&&this.overflowX!==false){this.x+=e.deltaX;}else if(this.overflowY!==false){this.y+=e.deltaY;}}/**
     * The horizontal scroll range of the widget.
     * @property {Number}
     * @readonly
     */},{key:"defaultConfig",get:function get(){return{/**
             * The element which is to scroll.
             * @config {HTMLElement}
             */element:null,/**
             * How to handle overflowing in the `X` axis.
             * May be:
             * * `'auto'`
             * * `'visible'`
             * * `'hidden'`
             * * `'scroll'`
             * * `'hidden-scroll'` Meaning scrollable from the UI but with no scrollbar,
             * for example a grid header. Only on platforms which support this feature.
             * * `true` - meaning `'auto'`
             * * `false` - meaning `'hidden'`
             * @config {String/Boolean}
             */overflowX:null,/**
             * How to handle overflowing in the `Y` axis.
             * May be:
             * * `'auto'`
             * * `'visible'`
             * * `'hidden'`
             * * `'scroll'`
             * * `'hidden-scroll'` Meaning scrollable from the UI but with no scrollbar.
             * Only on platforms which support this feature.
             * * `true` - meaning `'auto'`
             * * `false` - meaning `'hidden'`
             * @config {String/Boolean}
             */overflowY:null,/**
             * If configured as `true`, the {@link #config-element} is not scrolled
             * but is translated using CSS transform when controlled by this class's API.
             * Scroll events are fired when the element is translated.
             * @default
             * @config {Boolean}
             */translate:null};}},{key:"viewport",get:function get(){return Rectangle.from(this.element);}},{key:"element",get:function get(){return this._element;},set:function set(element){var me=this,scrollHandler=me.scrollHandler||(me.scrollHandler=me.onScroll.bind(me));if(!me.scrollEndHandler){me.scrollEndHandler=me.buffer(me.onScrollEnd,100);}if(me._element){if(me.translate){me.mutationObserver&&me.mutationObserver.disconnect(me._element);}else{me._element.removeEventListener('scroll',scrollHandler);me._element.classList.remove(scrollerCls);}}me._element=element;if(me.translate){if(!me.mutationObserver){me.mutationObserver=new MutationObserver(function(mutations){return me.onElMutation(mutations);});}me.mutationObserver.observe(element,{attributes:true});me._x=me._y=0;if(document.contains(element)){var _DomHelper$getTransla3=DomHelper.getTranslateXY(element),_DomHelper$getTransla4=_slicedToArray(_DomHelper$getTransla3,2),x=_DomHelper$getTransla4[0],y=_DomHelper$getTransla4[1];me._x=-x;me._y=-y;}}else{element.addEventListener('scroll',scrollHandler);element.classList.add(scrollerCls);}// Ensure the overflow configs, which are unable to process themselves
// in the absence of the element get applied to the newly arrived element.
me.updateOverflowX(me.overflowX);me.updateOverflowY(me.overflowY);}/**
     * The horizontal scroll position of the widget.
     * @property {Number}
     */},{key:"x",get:function get(){var me=this,element=me.element;if(element&&me.positionDirty){if(me.translate){var _DomHelper$getTransla5=DomHelper.getTranslateXY(element),_DomHelper$getTransla6=_slicedToArray(_DomHelper$getTransla5,2),x=_DomHelper$getTransla6[0],y=_DomHelper$getTransla6[1];me._x=-x;me._y=-y;}else{me._x=element.scrollLeft;me._y=element.scrollTop;}me.positionDirty=false;}return me._x;},set:function set(x){var element=this.element;this._x=x;if(element){if(this.translate){DomHelper.setTranslateX(element,-x);}else{element.scrollLeft=x;}// The scroll position will need to be read before we can return it.
// Do not read it back now, that would cause a forced synchronous layout.
this.positionDirty=true;}}},{key:"y",get:function get(){var me=this,element=me.element;if(element&&me.positionDirty){if(me.translate){var _DomHelper$getTransla7=DomHelper.getTranslateXY(element),_DomHelper$getTransla8=_slicedToArray(_DomHelper$getTransla7,2),x=_DomHelper$getTransla8[0],y=_DomHelper$getTransla8[1];me._x=-x;me._y=-y;}else{me._x=element.scrollLeft;me._y=element.scrollTop;}me.positionDirty=false;}return me._y;},set:function set(y){var element=this.element;this._y=y;if(element){if(this.translate){DomHelper.setTranslateY(element,-y);}else{element.scrollTop=y;}// The scroll position will need to be read before we can return it.
// Do not read it back now, that would cause a forced synchronous layout.
this.positionDirty=true;}}/**
     * The maximum `X` scrollable position of the widget.
     * @property {Number}
     * @readonly
     */},{key:"maxX",get:function get(){return this.scrollWidth-this.clientWidth;}/**
     * The maximum `Y` scrollable position of the widget.
     * @property {Number}
     * @readonly
     */},{key:"maxY",get:function get(){return this.scrollHeight-this.clientHeight;}/**
     * The `overflow-x` setting for the widget. `true` means `'auto'`.
     * @property {Boolean/String}
     */},{key:"overflowX",get:function get(){return this._overflowX;},set:function set(overflowX){this._overflowX=overflowX;if(this.element){this.updateOverflowX(overflowX);}}},{key:"overflowY",get:function get(){return this._overflowY;},set:function set(overflowY){this._overflowY=overflowY;if(this.element){this.updateOverflowY(overflowY);}}},{key:"scrollWidth",get:function get(){return this.element?this.element.scrollWidth:0;},set:function set(scrollWidth){var me=this;var stretcher=me.widthStretcher;// "Unsetting" scrollWidth removes the stretcher
if(stretcher&&scrollWidth==null){stretcher.remove();me.widthStretcher=null;}else if(scrollWidth){if(!stretcher){stretcher=me.widthStretcher=DomHelper.createElement({className:'b-scroller-stretcher'});}stretcher.style.transform="translateX(".concat(scrollWidth-1,"px)");if(me.element&&me.element.lastChild!==stretcher){me.element.appendChild(stretcher);}}}},{key:"scrollHeight",get:function get(){return this.element?this.element.scrollHeight:0;}/**
     * The vertical scroll range of the widget. May be set to larger than the actual data
     * height to enable virtual scrolling. This is how the grid extends its scroll range
     * while only rendering a small subset of the dataset.
     * @property {Number}
     */,set:function set(scrollHeight){var me=this,stretcher=me.stretcher||(me.stretcher=DomHelper.createElement({className:'b-scroller-stretcher'}));stretcher.style.transform="translateY(".concat(scrollHeight-1,"px)");if(me.element&&me.element.lastChild!==stretcher){me.element.appendChild(stretcher);}}/**
     * The client width of the widget.
     * @property {Number}
     * @readonly
     */},{key:"clientWidth",get:function get(){return this.element?this.element.clientWidth:0;}/**
     * The client height of the widget.
     * @property {Number}
     * @readonly
     */},{key:"clientHeight",get:function get(){return this.element?this.element.clientHeight:0;}/**
     * The unique ID of this Scroller
     * @property {String}
     * @readonly
     */},{key:"id",get:function get(){if(!this._id){if(this.widget){this._id="".concat(this.widget.id,"-scroller");}else{this._id=IdHelper.generateId('scroller-');}}return this._id;}}]);return Scroller;}(Delayable(Events(Base)));exports.Scroller=Scroller;Scroller._$name='Scroller';var locale$1={localeName:'En',localeDesc:'English',//region Columns
TemplateColumn:{noTemplate:'TemplateColumn needs a template',noFunction:'TemplateColumn.template must be a function'},ColumnStore:{columnTypeNotFound:function columnTypeNotFound(data){return"Column type '".concat(data.type,"' not registered");}},//endregion
//region Mixins
InstancePlugin:{fnMissing:function fnMissing(data){return"Trying to chain fn ".concat(data.plugIntoName,"#").concat(data.fnName,", but plugin fn ").concat(data.pluginName,"#").concat(data.fnName," does not exist");},overrideFnMissing:function overrideFnMissing(data){return"Trying to override fn ".concat(data.plugIntoName,"#").concat(data.fnName,", but plugin fn ").concat(data.pluginName,"#").concat(data.fnName," does not exist");}},//endregion
//region Features
ColumnPicker:{columnsMenu:'Columns',hideColumn:'Hide column',hideColumnShort:'Hide'},Filter:{applyFilter:'Apply filter',filter:'Filter',editFilter:'Edit filter',on:'On',before:'Before',after:'After',equals:'Equals',lessThan:'Less than',moreThan:'More than',removeFilter:'Remove filter'},FilterBar:{enableFilterBar:'Show filter bar',disableFilterBar:'Hide filter bar'},Group:{groupAscending:'Group ascending',groupDescending:'Group descending',groupAscendingShort:'Ascending',groupDescendingShort:'Descending',stopGrouping:'Stop grouping',stopGroupingShort:'Stop'},Search:{searchForValue:'Search for value'},Sort:{'sortAscending':'Sort ascending','sortDescending':'Sort descending','multiSort':'Multi sort','removeSorter':'Remove sorter','addSortAscending':'Add ascending sorter','addSortDescending':'Add descending sorter','toggleSortAscending':'Change to ascending','toggleSortDescending':'Change to descending','sortAscendingShort':'Ascending','sortDescendingShort':'Descending','removeSorterShort':'Remove','addSortAscendingShort':'+ Ascending','addSortDescendingShort':'+ Descending'},Tree:{noTreeColumn:'To use the tree feature one column must be configured with tree: true'},//endregion
//region Grid
Grid:{featureNotFound:function featureNotFound(data){return"Feature '".concat(data,"' not available, make sure you have imported it");},invalidFeatureNameFormat:function invalidFeatureNameFormat(data){return"Invalid feature name '".concat(data,"', must start with a lowercase letter");},removeRow:'Delete row',removeRows:'Delete rows',loadMask:'Loading...',loadFailedMessage:'Data loading failed.',moveColumnLeft:'Move to left section',moveColumnRight:'Move to right section',noRows:'No rows to display'},//endregion
//region Widgets
Field:{invalidValue:'Invalid field value',minimumValueViolation:'Minimum value violation',maximumValueViolation:'Maximum value violation',fieldRequired:'This field is required',validateFilter:'Value must be selected from the list'},DateField:{invalidDate:'Invalid date input'},TimeField:{invalidTime:'Invalid time input'},//endregion
//region Others
DateHelper:{locale:'en-US',shortWeek:'W',shortQuarter:'q',week:'Week',weekStartDay:0,unitNames:[{single:'millisecond',plural:'ms',abbrev:'ms'},{single:'second',plural:'seconds',abbrev:'s'},{single:'minute',plural:'minutes',abbrev:'min'},{single:'hour',plural:'hours',abbrev:'h'},{single:'day',plural:'days',abbrev:'d'},{single:'week',plural:'weeks',abbrev:'w'},{single:'month',plural:'months',abbrev:'mon'},{single:'quarter',plural:'quarters',abbrev:'q'},{single:'year',plural:'years',abbrev:'yr'}],// Used to build a RegExp for parsing time units.
// The full names from above are added into the generated Regexp.
// So you may type "2 w" or "2 wk" or "2 week" or "2 weeks" into a DurationField.
// When generating its display value though, it uses the full localized names above.
unitAbbreviations:[['mil'],['s','sec'],['m','min'],['h','hr'],['d'],['w','wk'],['mo','mon','mnt'],['q','quar','qrt'],['y','yr']],parsers:{'L':'MM/DD/YYYY','LT':'HH:mm A'},ordinalSuffix:function ordinalSuffix(number){return number+({'1':'st','2':'nd','3':'rd'}[number[number.length-1]]||'th');}},BooleanCombo:{'Yes':'Yes','No':'No'//endregion
}};LocaleManagerSingelton.registerLocale('En',{desc:'English',locale:locale$1});var globaltouchStart,focusEventsSuspended=false,GlobalEvents=(window.bryntum||(window.bryntum={})).GlobalEvents=new(/*#__PURE__*/function(_Events3){_inherits2(_class,_Events3);function _class(){_classCallCheck2(this,_class);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class).apply(this,arguments));}_createClass2(_class,[{key:"suspendFocusEvents",value:function suspendFocusEvents(){focusEventsSuspended=true;}},{key:"resumeFocusEvents",value:function resumeFocusEvents(){focusEventsSuspended=false;}},{key:"lastInteractionType",get:function get(){return lastInteractionType;}}]);return _class;}(Events(Base)))(),lastInteractionType;exports.GlobalEvents=GlobalEvents;function createWidgetEvent(eventName,target,relatedTarget,fromWidget,toWidget,backwards,options){var result=new CustomEvent(eventName,options);Object.defineProperty(result,'target',{get:function get(){return target;}});Object.defineProperty(result,'relatedTarget',{get:function get(){return relatedTarget;}});result.fromWidget=fromWidget;result.toWidget=toWidget;result.backwards=backwards;return result;}function getCommonAncestor(from,to){if(from===to){return from;}var isWidget=from instanceof Widget;while(from&&!(from[isWidget?'owns':'contains'](to)||from===to)){from=from[isWidget?'owner':'parentNode'];}return from;}var listeners={element:document,touchstart:function touchstart(_touchstart){if(!globaltouchStart&&_touchstart.changedTouches.length===1){globaltouchStart=_touchstart.changedTouches[0];}else{globaltouchStart=null;}},// Just this one has to be passive: false so that we are allowed to preventDefault
// if we are part of a contextmenu longpres emulation. Otherwise the gesture will
// proceed to cause a mousedown event.
touchend:{handler:function handler(event){if(globaltouchStart){// If the touchstart was used to synthesize a contextmenu event
// stop the touch gesture processing right now.
// Also prevent the conversion of the touch into  click.
if(globaltouchStart.identifier===EventHelper.contextMenuTouchId){event.stopImmediatePropagation();event.preventDefault();}else if(event.changedTouches.length===1&&event.changedTouches[0].identifier===globaltouchStart.identifier){GlobalEvents.trigger('globaltap',{event:event});}globaltouchStart=null;}},passive:false},mousedown:{handler:function handler(event){lastInteractionType='mouse';if(!globaltouchStart){GlobalEvents.trigger('globaltap',{event:event});}},passive:false},keydown:function keydown(){lastInteractionType='key';},keypress:function keypress(){lastInteractionType='key';},focusin:function focusin(_focusin){// https://app.assembla.com/spaces/bryntum/tickets/5503
// Caused by the browser scrolling a focused element into view. The browser will do *whatever it takes*
// to scroll a focused element so that as much of it is in view as possible. Its first point of scrolling will
// be the float containing element. That must never scroll.
Widget.floatRoot.scrollTop=Widget.floatRoot.scrollLeft=0;if(focusEventsSuspended){return;}var fromElement=_focusin.relatedTarget,toElement=_focusin.target||document.body,fromWidget=IdHelper.fromElement(fromElement),toWidget=IdHelper.fromElement(toElement),commonAncestor=getCommonAncestor(fromWidget,toWidget),// Flag if the fromElement is DOCUMENT_POSITION_FOLLOWING toElement
backwards=!!(fromElement&&toElement.compareDocumentPosition(fromElement)&4);var event=createWidgetEvent('focusout',fromElement,toElement,fromWidget,toWidget,backwards);// Bubble focusout event up the "from" side of the tree
for(var target=fromWidget;target&&target!==commonAncestor;target=target.owner){if(!(target.isDestroyed||target.isDestroying)){target.onFocusOut&&target.onFocusOut(event);}}// Focus is moving upwards to the ancestor widget.
// Its focus method might delegate focus to a focusable descendant.
if(commonAncestor&&_focusin.target===commonAncestor.element){// If one of the handlers above has not moved focus onwards
// and the common ancestor is a container which delegates
// focus inwards to a descendant, then give it the opportunity to do that.
if(document.activeElement===toElement&&commonAncestor.focusElement&&commonAncestor.focusElement!==commonAncestor.element){// Wait until out of the focusin handler to move focus on.
setTimeout(function(){return commonAncestor.focus&&commonAncestor.focus();},0);}}// Focus is moving between two branches of a subtree.
// Bubble focusin event up the "to" side of the tree
else{event=createWidgetEvent('focusin',toElement,fromElement,fromWidget,toWidget,backwards);for(var _target=toWidget;_target&&_target!==commonAncestor;_target=_target.owner){if(!(_target.isDestroyed||_target.isDestroying)){_target.onFocusIn&&_target.onFocusIn(event);}}}// Fire element focusmove event. Grid navigation will use  this when cells are focusable.
var commonAncestorEl=getCommonAncestor(fromElement&&fromElement.nodeType===1?fromElement:null,toElement)||toElement.parentNode;event=createWidgetEvent('focusmove',toElement,fromElement,fromWidget,toWidget,backwards,{bubbles:true});commonAncestorEl.dispatchEvent(event);},focusout:function focusout(_focusout){if(focusEventsSuspended){return;}if(!_focusout.relatedTarget||!IdHelper.fromElement(_focusout.relatedTarget)){listeners.focusin({target:_focusout.relatedTarget,relatedTarget:_focusout.target});}},capture:true,passive:true};function setupFocusListeners(){var element=arguments.length>0&&arguments[0]!==undefined?arguments[0]:document;var config=ObjectHelper.assign({},listeners,{element:element});EventHelper.on(config);}setupFocusListeners();// TODO: Needs more docs
/**
 * @module Common/widget/Widget
 */var isTransparent=/transparent|rgba\(0,\s*0,\s*0,\s*0\)/,textInputTypes={INPUT:1,TEXTAREA:1},widgetTriggerPaint=function widgetTriggerPaint(w){return w.isVisible&&w.trigger('paint');},negationPseudo=/^:not\((.+)\)$/,isRealigningFloater=function isRealigningFloater(w){return w.floating&&w.scrollAction==='realign';},dragGhost=DomHelper.createElement({// Safari won't allow dragging an empty node
html:'\xa0',style:'position:absolute;top:-10000em;left:-10000em'});/**
 * Base class for other widgets. The Widget base class simply encapsulates an element, and may optionally contain some
 * specified {@link #config-html}.
 *
 * Subclasses should at override the {@link #function-template} member function to return an HTML string to create their own encapsulating element
 * and internal structure.
 *
 * @mixes Common/mixin/Events
 * @mixes Common/localization/Localizable
 * @extends Common/Base
 * @classType widget
 */var Widget=/*#__PURE__*/function(_Delayable3){_inherits2(Widget,_Delayable3);function Widget(){_classCallCheck2(this,Widget);return _possibleConstructorReturn2(this,_getPrototypeOf2(Widget).apply(this,arguments));}_createClass2(Widget,[{key:"construct",//endregion
//region Init & destroy
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;// Flag so we know when our dimensions have been constrained during alignment
me.alignConstrained=0;me.afterHideShowAnimate=me.afterHideShowAnimate.bind(me);me.callRealign=me.realign.bind(me);me.doHideOrRealign=me.doHideOrRealign.bind(me);me.initialRender=true;me._isUserAction=false;// Base class applies configs.
for(var _len22=arguments.length,args=new Array(_len22>1?_len22-1:0),_key22=1;_key22<_len22;_key22++){args[_key22-1]=arguments[_key22];}_get2(_getPrototypeOf2(Widget.prototype),"construct",this).call(this,config,args);me.finalizeInit();}},{key:"isType",value:function isType(type,deep){return IdHelper.isType(this,type,deep);}},{key:"startConfigure",value:function startConfigure(config){_get2(_getPrototypeOf2(Widget.prototype),"startConfigure",this).call(this,config);// Force construction of the widget's element before all other configs are evaluated.
this._thisIsAUsedExpression(this.element);}},{key:"finalizeInit",/**
     * Called by the Base constructor after all configs have been applied.
     * @internal
     * @category Lifecycle
     */value:function finalizeInit(){if(this.insertBefore||this.appendTo||this.insertFirst){this.render();}}},{key:"doDestroy",value:function doDestroy(){var me=this,element=me._element;me.scrollable&&me.scrollable.destroy();me._tooltip&&me._tooltip.destroy();me.unmask();if(element){// Remove listeners which are only added during the visible phase.
// In its own method because it's called on hide and destroy.
me.removeTransientListeners();me.revertFocus();ResizeMonitor.removeResizeListener(element.parentElement,me.onParentElementResize);ResizeMonitor.removeResizeListener(element,me.onElementResize);element.remove();me.dragEventDetacher&&me.dragEventDetacher();me.dragOverEventDetacher&&me.dragOverEventDetacher();dragGhost.remove();}IdHelper.unregister(me);_get2(_getPrototypeOf2(Widget.prototype),"doDestroy",this).call(this);}//endregion
//region Render
},{key:"render",value:function render(appendToElement){var triggerPaint=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,element=me.element,contentRange=me.contentRange,contentElement=me.contentElement;ResizeMonitor.removeResizeListener(element.parentElement,me.onParentElementResize);ResizeMonitor.removeResizeListener(element,me.onElementResize);me.emptyCache();if(me.syncElement&&me.currentElement){DomHelper.sync(element,me.currentElement);}else{// Use passed element to insert this widget directly
if(appendToElement){me.appendTo=typeof appendToElement==='string'?document.getElementById(appendToElement):appendToElement;me.appendTo.appendChild(element);}// If nothing was passed directly, try to use configs preferring `insertBefore` first
else if(me.insertBefore){me.insertBefore=typeof me.insertBefore==='string'?document.getElementById(me.insertBefore):me.insertBefore;me.insertBefore.parentElement.insertBefore(element,me.insertBefore);}else if(me.insertFirst){me.insertFirst=typeof me.insertFirst==='string'?document.getElementById(me.insertFirst):me.insertFirst;// Try to insert as a first child
if(me.insertFirst.firstChild){me.insertFirst.insertBefore(element,me.insertFirst.firstChild);}// insertBefore will throw exceptions if firstChild element not exists. Add as only child then.
else{me.insertFirst.appendChild(element);}}else if(me.appendTo){me.appendTo=typeof me.appendTo==='string'?document.getElementById(me.appendTo):me.appendTo;me.appendTo.appendChild(element);}me.currentElement=element;}// If it's a rerender from being removed, restore from cached pointers
if('contentRangeStart'in me){contentRange.setStart(contentElement,me.contentRangeStart);contentRange.setEnd(contentElement,me.contentRangeEnd);}else{contentRange.setStart(me.contentElement,0);contentRange.setEnd(me.contentElement,me.contentElement.childNodes.length);}// Not for public use, only used in docs
if(me.scaleToFitWidth){me.onParentElementResize=me.onParentElementResize.bind(me);ResizeMonitor.addResizeListener(element.parentElement,me.onParentElementResize);if(me.isVisible){me.updateScale();}}// Mutually exclusive with scaleToFitWidth
else if(me.monitorResize){me.onElementResize=me.onElementResize.bind(me);ResizeMonitor.addResizeListener(element,me.onElementResize);// On render, we should announce our size immediately.
// When the real event comes along, onElementResize will reject it because the size will be the same.
ResizeMonitor.onElementResize([{target:element}]);}if(triggerPaint){me.triggerPaint();}}/**
     * A function which, when passed an instance of this Widget, produces a valid HTML string which is compiled
     * to create the encapsulating element for this Widget, and its own internal DOM structure.
     *
     * Note that this just creates the DOM structure that *this* Widget owns. If it contains child widgets
     * (Such as for example a grid), this is not included. The template creates own structure.
     *
     * Certain elements within the generated element can be identified as special elements with a `reference="name"`
     * property. These will be extracted from the element upon creation and injected as the named property into
     * the Widget. For example, a {@link Common.widget.TextField} will have an `input` property which is its
     * `<input>` element.
     * @param {Common.widget.Widget} me The widget for which to produce the initial HTML structure.
     * @internal
     */},{key:"template",value:function template(me){return"<div class=\"".concat(me.html?'b-html':'',"\" ").concat(me.name?"data-name=\"".concat(me.name,"\""):'',">").concat(me.html||'',"</div>");}//endregion
//region floating
/**
     * If this Widget is {@link #config-floating} or {@link #config-positioned}, and visible,
     * aligns the widget according to the passed specification.
     * For details, see the {@link #function-showBy} method.
     * @param {Object} spec Alignment options. May be an object as processed by the {@link #function-showBy} method,
     * or an `HTMLElement` to align to using this Widget's {@link #config-align} configuration.
     * @category Float & align
     */},{key:"alignTo",value:function alignTo(spec){// You can "alignTo" an element or a Widget or a Point, and allow our align config.
// property to specify how.
if(spec.nodeType===1||spec instanceof Widget||spec instanceof Point){spec={target:spec};}// Release size constraints so we can align from scratch each time.
this.releaseSizeConstraints();var me=this,scrollable=me.scrollable,element=me.element,passedTarget=spec.target,target=passedTarget&&(passedTarget instanceof Rectangle?passedTarget:passedTarget.element||passedTarget),myPosition=Rectangle.from(element,me.positioned?element.offsetParent:null,true),aligningToElement=target&&target.nodeType===1;spec=Object.assign({// Constraining is a viewport coordinate based thing. not relevant to positioned
// Widgets which are within their owning Widget and thereby constrained anyway.
constrainTo:me.positioned?null:me.constrainTo,axisLock:me.axisLock,anchor:me.anchor},_typeof(me.align)==='object'?me.align:{align:me.align},spec);// As part of fallback process when fitting within constraints, this may shrink to minima specified
// either on the align spec or the widget itself.
myPosition.minWidth=spec.minWidth||me.minWidth;myPosition.minHeight=spec.minHeight||me.minHeight;// This is used by the realign call which may be called either when a global scroll is detected
// or the constraining element is resized.
me.lastAlignSpec=spec;if(aligningToElement&&target.offsetParent){// Translate the element into a browser viewport based Rectangle. Rectangle
// Doesn't have the knowledge that we do to make this decision. Floating
// alignment all takes place within browser viewport space, not document space.
// Don't destroy the spec which was cached above with the element in it.
spec=Object.setPrototypeOf({},spec);spec.target=Rectangle.from(target,me.positioned?element.offsetParent:null,!me.positioned);// Force the target to have an area so that intersect works.
spec.target.height=Math.max(spec.target.height,1);spec.target.width=Math.max(spec.target.width,1);// Handle the target being clipped by the bounds of various elements.
// For example in a grid, the SubGrid element will clip the left and right
// but the main grid bodyContainer will clip the top and bottom.
var clippedBy=me.clippedBy;if(clippedBy){var clippedTarget=spec.target.intersect(clippedBy);// If there is an intersecting Rectangle with the forElement, align
if(clippedTarget){spec.target=clippedTarget;}// This is the case where the target is scrolled or positioned out of view.
else{var _result2=me.hide();// The hide method clears this flag.
// Only this hide invocation must complete with the
// targetHidden flag as true
me.lastAlignSpec.targetHidden=true;return _result2;}}// This is the element which determines our position.
// This is used in doHideOrRealign to see if a scroll event
// will have affected our position.
me.anchoredTo=target;}else{me.anchoredTo=null;}if(spec.anchor){spec.anchorSize=me.anchorSize;element.appendChild(me.anchorElement);}// Flag to prevent infinite loop when setting html from a beforeAlign listener
me.isAligning=true;// Allow outside world to modify the suggested position
me.trigger('beforeAlign',spec);me.isAligning=false;// Calculate the best position WRT target rectangle, our rectangle, a constrainTo rectangle
// and the rectangle of an anchor pointer.
var _spec=spec,constrainTo=_spec.constrainTo,constrainToWindow=constrainTo===window||constrainTo===document,result=myPosition.alignTo(spec);// May change if constraint changes our shape, and we have to go round again
var align=result.align,anchor=result.anchor,x=result.x,y=result.y,width=result.width,height=result.height,bottom=result.bottom,right=result.right;// Which zone, T=0, R=1, B=2, L=3 the result is in
me.lastAlignSpec.zone=result.zone;// If the alignment specified that we must constrain a dimension in order to
// fit within our constrainTo, then obey that. If we own a Scroller, then
// inform it that we do now need to scroll that dimension.
// These conditions are released upon each alignment call because conditions may change.
if(height!==myPosition.height){if(!('configuredHeight'in me)){me.configuredHeight=element.style.height;}me.height=height;me.alignConstrained=me.alignConstrained|1;if(scrollable){scrollable.overflowY=true;}}if(width!==myPosition.width){if(!('configuredWidth'in me)){me.configuredWidth=element.style.width;}me.width=width;me.alignConstrained=me.alignConstrained|2;if(scrollable){scrollable.overflowX=true;}}// If either dimension has been constrained, we may have changed shape
// due to text wrapping/overflowing, so we have to realign at the
// successful align setting.
if(align&&me.alignConstrained){spec.align=align;var newResult=Rectangle.from(element,me.positioned?element.offsetParent:null,true).alignTo(spec);anchor=newResult.anchor;x=newResult.x;y=newResult.y;width=newResult.width;height=newResult.height;bottom=newResult.bottom;right=newResult.right;}me.setXY(x,y);// If we asked it to also calculate our anchor position, position our anchor
if(anchor){var _document;var _anchor=anchor,edge=_anchor.edge,anchorElement=me.anchorElement,colorMatchPoint=[],stylePointerEvents=element.style.pointerEvents;// Enable pointerEvents to make discoverable by elementFromPoint()
element.style.pointerEvents='all';// Make the anchor color match the color of the closest adjacent element
if(edge==='top'||edge==='bottom'){colorMatchPoint[0]=x+anchor.x;colorMatchPoint[1]=edge==='top'?y+1:bottom-1;}else{colorMatchPoint[0]=edge==='left'?x+1:right-1;colorMatchPoint[1]=y+anchor.y;}var colourSource=(_document=document).elementFromPoint.apply(_document,colorMatchPoint);element.style.pointerEvents=stylePointerEvents||null;// If  it's off the edge of the screen, we won't be able to read it.
// But that's fine, the anchor will be off the edge in that case.
if(colourSource){var fillColour=DomHelper.getStyleValue(colourSource,'background-color');if(fillColour.match(isTransparent)){me.anchorPathElement.setAttribute('fill',me.defaultAnchorBackgroundColor);}else{me.anchorPathElement.setAttribute('fill',fillColour);}}anchorElement.classList.remove('b-hide-display');anchorElement.style.transform='';anchorElement.className="b-anchor b-anchor-".concat(edge);DomHelper.setTranslateXY(anchorElement,anchor.x,anchor.y);}else if(me._anchorElement){me.anchorElement.classList.add('b-hide-display');}// If we are to hide on scroll, we still need to know if the element we are
// aligned to moves. If we have not been *explicitly* aligned to an element,
// Use the element at our display position. For example, when a context menu
// is shown on a grid header, then is the grid header is moved by a scroll
// event, then we must hide.
if(me.scrollAction==='hide'&&!aligningToElement){// Our element is over the X, Y point now,
// elementFromPoint must "see through" it.
element.style.pointerEvents='none';me.anchoredTo=document.elementFromPoint(x,y);element.style.pointerEvents='';}// If we're aligning to an element, then listen for scrolls so that we can remain aligned.
// Scrolls can be instigated with no mousedown, so transient floating Widgets can be put
// out of alignment by scrolls.
if((me.scrollAction==='realign'&&aligningToElement||me.scrollAction==='hide')&&!me.documentScrollListener){// Push binding to the scroll position out until the next animation frame.
// This is in case the calling code is going to cause a scroll.
// for example contextmenu is a focusing gesture which may cause a scroll
// to fire as the target element moves into view.
me.setTimeout(function(){document.addEventListener('scroll',me.doHideOrRealign,true);me.documentScrollListener=true;},0);}if(constrainTo&&(constrainTo.nodeType===1||constrainToWindow)&&!me.constrainListeners){ResizeMonitor.addResizeListener(constrainTo,me.callRealign);// Do not listen for constrainTo mutations if it's the viewport.
// Mutating it won't change its size.
if(!constrainToWindow){me.constrainMutationMonitor||(me.constrainMutationMonitor=new MutationObserver(me.callRealign)).observe(constrainTo,{// eslint-disable-line no-undef
attributes:true,childList:true});}me.constrainListeners=true;}}},{key:"realign",value:function realign(el){var me=this;if(me.isVisible&&(me.floating||me.positioned)&&me.lastAlignSpec){var target=me.lastAlignSpec.target;// If there was a DOM mutation which caused our target to become not layed out, or the target
// is outside of the passed element's rectangle (passed from scroll handler), we must hide
if(target&&target.nodeType===1){var targetRect=Rectangle.from(target);// We can align to an element which has a zero dimension, but the
// intersection check requires that both dimensions are non-zero.
targetRect.minHeight=targetRect.minWidth=1;if(target!==document.body&&!target.offsetParent||el&&el.nodeType===1&&el.contains(target)&&!Rectangle.from(el).intersect(targetRect)){return me.hide();}}me.alignTo(me.lastAlignSpec);}}},{key:"releaseSizeConstraints",value:function releaseSizeConstraints(){var me=this,scroller=me.scrollable;// Release constraints so we can align from scratch each time.
if(me.alignConstrained&1){me.height=me.configuredHeight;if(scroller){scroller.overflowY=scroller.config.overflowY;}}if(me.alignConstrained&2){me.width=me.configuredWidth;if(scroller){scroller.overflowX=scroller.config.overflowX;}}me.alignConstrained=0;}/**
     * Only valid for {@link #config-floating} Widgets. Moves to the front of the visual stacking order.
     * @category Float & align
     */},{key:"toFront",value:function toFront(){if(this.element&&this.element.nextSibling){this.element.parentNode.appendChild(this.element);}}//endregion
//region Getters/setters
},{key:"onThemeChange",value:function onThemeChange(){// If we have a *visible* anchor element, then a theme change may
// invalidate it's size or this.defaultAnchorBackgroundColor, so a
// run through realign (and get anchorSize) will fix that.
if(this.anchorElement&&this.anchorElement.offsetParent){this._anchorSize=null;this.realign();}}/**
     * Returns an `[x, y]` array containing the width and height of the anchor arrow used when
     * aligning this Widget to another Widget or element.
     *
     * The height is the height of the arrow when pointing upwards, the width is the width
     * of the baseline.
     * @property {Number[]}
     * @category Float & align
     */},{key:"onWidgetDragStart",value:function onWidgetDragStart(e){var me=this,actualTarget=document.elementFromPoint(e.clientX,e.clientY),handleSelector=me.draggable.handleSelector;if(handleSelector){var blacklist=negationPseudo.exec(handleSelector)[1];// Extract the content of :not()
// If the selector was :not(), then if we are a descendant of a matching element, it's a no-drag
if(blacklist){if(actualTarget.closest("#".concat(me.element.id," ").concat(blacklist))){e.preventDefault();return;}}// If we are not the descendant of a matching element, it's a no-drag
else if(!actualTarget.closest("#".concat(me.element.id," ").concat(handleSelector))){e.preventDefault();return;}}// Opt out of auto-alignment on scroll or DOM mutation.
me.removeTransientListeners();var dragStartX=e.clientX,dragStartY=e.clientY,scrollingPageElement=document.scrollingElement||document.body,widgetX=me.getXY()[0],widgetY=me.getXY()[1];document.body.appendChild(dragGhost);if(e.dataTransfer.setDragImage){// Firefox requires this to be called before setDragImage
e.dataTransfer.setData('application/node type','');// Override the default HTML5 drag ghost and just drag an empty node
e.dataTransfer.setDragImage(dragGhost,0,0);}// Prevent special cursor from being shown
e.dataTransfer.effectAllowed='none';me.dragOverEventDetacher=EventHelper.addListener({element:document.body,dragover:function dragover(event){return me.setXY(widgetX+event.clientX-dragStartX-scrollingPageElement.scrollLeft,widgetY+event.clientY-dragStartY-scrollingPageElement.scrollTop);}});// Opt out of anchoring
me.anchor=null;}},{key:"onWidgetDragEnd",value:function onWidgetDragEnd(e){dragGhost.remove();this.dragOverEventDetacher();}},{key:"getXY",value:function getXY(){return[DomHelper.getPageX(this.element),DomHelper.getPageY(this.element)];}/**
     * Moves this Widget to the x,y position. Both arguments can be omitted to just set one value.
     *
     * *For {@link #config-floating} Widgets, this is a position in the browser viewport.*
     * *For {@link #config-positioned} Widgets, this is a position in the element it was rendered into.*
     *
     * @param {Number} [x]
     * @param {Number} [y]
     * @category Float & align
     */},{key:"setXY",value:function setXY(x,y){var me=this;if(me.floating||me.positioned){if(x!=null){me._x=x;me.centered=false;}if(y!=null){me._y=y;me.centered=false;}DomHelper.setTranslateXY(me.element,me._x||0,me._y||0);}}/**
     * Moves this Widget to the desired x position. *Only valid for {@link #config-floating} Widgets.
     * @param {Number} x
     * @category Float & align
     */},{key:"fixIEMaxHeightBug",value:function fixIEMaxHeightBug(){var element=this.element,contentElement=this.contentElement;// If this widget is flexed vertically, the maxHeight of the encapsulating element must be
// propapagated onto the contentElement.
if(DomHelper.getStyleValue(element,'flex-direction')==='column'){// Release previous height constraint
contentElement.style.maxHeight='';var availableHeight=Rectangle.client(element).height;var siblings=element.childNodes,len=siblings.length;// In case there are height-consuming siblings of the contentElement.
// For example a header/footer. The heights of these must be subtracted.
for(var i=0;i<len;i++){var sibling=siblings[i];if(sibling!==contentElement&&!sibling.classList.contains('b-resize-monitors')){availableHeight-=sibling.offsetHeight;}}// Apply the adjusted height constraint to the contentElement
this.contentElement.style.maxHeight="".concat(availableHeight,"px");}}/**
     * Get/set element's minHeight. Getter returns min-height from elements style, which is always a string. Setter
     * accepts either a String or a Number (which will have 'px' appended). Note that like {@link #config-height},
     * _reading_ the value will return the numeric value in pixels.
     * @property {String|Number}
     * @category Layout
     */},{key:"disable",/**
     * Disable the widget
     */value:function disable(){this.disabled=true;}/**
     * Enable the widget
     */},{key:"enable",value:function enable(){this.disabled=false;}},{key:"focus",/**
     * Focuses this widget if it has a focusable element.
     */value:function focus(){if(this.isFocusable){DomHelper.focusWithoutScrolling(this.focusElement);}}/**
     * Get this widget's primary focus holding element if this widget is itself focusable, or contains focusable widgets.
     * @property {HTMLElement}
     * @readonly
     * @category DOM
     */},{key:"show",/**
     * Show widget
     * @category Visibility
     * @returns {Promise} A promise which is resolved when the widget is shown
     */value:function show(){var _this13=this;return new Promise(function(resolve){var me=_this13,showAnimation=me.showAnimation,element=me.element,floatRoot=Widget.floatRoot,style=element.style;var styleProp,animProps;/**
             * Triggered before a widget is shown. Return `false` to prevent the action.
             * @event beforeShow
             * @param {Common.widget.Widget} source The widget being shown.
             */if(!me.isVisible&&me.trigger('beforeShow')!==false){// Cancel any current hide/show animation
me.cancelHideShowAnimation();if(showAnimation){// setting transitions initial value before showing, to ensure transition will animate
styleProp=Object.keys(showAnimation)[0];animProps=showAnimation[styleProp];me.currentAnimation={styleProp:styleProp};element.addEventListener('transitionend',me.afterHideShowAnimate);// setting transitions initial value before showing, to ensure transition will animate
style[styleProp]=animProps.from;}if(me.floating){if(!floatRoot.contains(element)){me.render(floatRoot);}if(!document.body.contains(floatRoot)){document.body.appendChild(floatRoot);}}me._hidden=false;element.classList.remove('b-hidden');if(showAnimation){style.transition="".concat(styleProp," ").concat(animProps.duration," ease ").concat(animProps.delay);style[styleProp]=animProps.to;}me.afterShow(resolve);// If we're not being called from showBy, do default aligning
if(!me.inShowBy&&me.floating&&me.forElement){me.alignTo(me.forElement);}}});}/**
     * Show aligned to another target element or {@link Common.widget.Widget} or {@link Common.helper.util.Rectangle}
     * @param {Object/HTMLElement} spec Alignment specification, or the element to align to using the configured
     * {@link #config-align}.
     * @param {HTMLElement|Common.widget.Widget|Common.helper.util.Rectangle} spec.target The Widget or Element or Rectangle to align to.
     * @param {Boolean} [spec.anchor] True to show a pointer arrow connecting to the target. Defaults to false.
     * @param {Boolean} [spec.overlap] True to allow this to overlap the target.
     * @param {String} spec.align The alignment specification string, `[trbl]n-[trbl]n`. Defaults to this instance's
     * {@link #config-align} setting.
     * @param {HTMLElement|Common.widget.Widget|Common.helper.util.Rectangle} [spec.constrainTo] The Widget or Element or Rectangle to constrain to.
     * If the requested alignment cannot be constrained (it will first shrink the resulting Rectangle according
     * to the `minWidth` and `minHeight` properties of this spec, or the Widget), then it will try aligning at other edges
     * (honouring the `axisLock` option), and pick the fallback alignment which results in the shortest translation.
     * @param {Number} [spec.minHeight] The minimum height this widget may be compressed to when constraining within the `constrainTo` option.
     * @param {Number} [spec.minWidth] The minimum width this widget may be compressed to when constraining within the `constrainTo` option.
     * @param {Boolean} [spec.axisLock] Specify as `true` to fall back to aligning against the opposite
     * edge if the requested alignment cannot be constrained into the `constrainTo` option. Specify as
     * `'flexible'` to allow continuation to try the other edges if a solution cannot be found on the origially requested axis.
     * @param {Boolean} [spec.matchSize] *Only honoured when `axisLock` is enabled and alignment succeeds on the requested axis.
     * Specify as `true` to have this widget's size along the aligned edge match the size of the target's edge.
     * For example, a combobox's dropdown should match the width of the combobox.
     * @param {Number|Number[]} [spec.offset] The offset to create an extra margin round the target
     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget
     * towards the target - for example producing the effect of the anchor pointer piercing the target.
     * @category Float & align
     */},{key:"showBy",value:function showBy(spec){var me=this;// Prevent show from rerouting here.
me.inShowBy=true;me.show();me.inShowBy=false;if(me.isVisible){me.alignTo(spec);}}/**
     * Show this widget anchored to a coordinate
     * @param {Number|Number[]} x The x position (or an array with [x,y] values) to show by
     * @param {Number} [y] The y position to show by
     * @param {Object} [options] See {@link #function-showBy} for reference
     * @category Float & align
     */},{key:"showByPoint",value:function showByPoint(x,y,options){var xy=arguments.length===1?x:[x,y];this.showBy(Object.assign({target:new Rectangle(xy[0],xy[1],1,1),align:'t-b'},options));}},{key:"afterShow",value:function afterShow(resolveFn){// This method is injected when maxHeight is set on IE11.
// Flexbox does not handle overflow correctly when a vertically
// flexed item is constrained by the maxHeight of its containing el.
// So we have to propagate the maxHeight from the encapsulating element
// onto the contentElement.
if(this.boundMaxHeightBugHandler){this.boundMaxHeightBugHandler();}this.trigger('show');this.triggerPaint();resolveFn();}},{key:"triggerPaint",value:function triggerPaint(){var me=this;if(me.isVisible){/**
             * Triggered when a widget which had been in a non-visible state for any reason
             * achieves visibility.
             *
             * A non-visible state *might* mean the widget is hidden and has just been shown.
             *
             * But this event will also fire on widgets when a non-visible (unrendered, or hidden)
             * ancestor achieves visibility, for example a {@link Common.widget.Popup Popup} being shown.
             * @event paint
             * @param {Common.widget.Widget} source The widget being painted.
             */me.trigger('paint');if(me.eachWidget){me.eachWidget(widgetTriggerPaint,true);}}}},{key:"cancelHideShowAnimation",value:function cancelHideShowAnimation(){var me=this,element=me.element,style=element.style;if(me.currentAnimation){element.classList.remove('b-hiding');element.removeEventListener('transitionend',me.afterHideShowAnimate);style.transition=style[me.currentAnimation.styleProp]='';me.currentAnimation=null;}}},{key:"afterHideShowAnimate",value:function afterHideShowAnimate(event){// If menu is destroyed too soon in Edge, this method will be invoked for destroyed element
if(this.isDestroyed){return;}var me=this,element=me.element,style=element.style,_me$currentAnimation=me.currentAnimation,styleProp=_me$currentAnimation.styleProp,resolve=_me$currentAnimation.resolve;if(event.target===element&&event.propertyName===styleProp){element.classList.remove('b-hiding');me.currentAnimation=null;element.removeEventListener('transitionend',me.afterHideShowAnimate);style.transition=style[styleProp]='';// Element must be fully hidden after the animation effect finishes
if(me._hidden){me.afterHideAnimation();// We want to fire 'hide' event immediately so since it's already fired we do not want to have 'hide' event fired twice
me.afterHide(resolve,false);}}}/**
     * Hide widget
     * @param {Boolean} animate Pass `true` (default) to animate the hide action
     * @category Visibility
     * @returns {Promise} A promise which is resolved when the widget has been hidden
     */},{key:"hide",value:function hide(){var _this14=this;var animate=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return new Promise(function(resolve){var me=_this14,element=me.element,style=element.style,hideAnimation=animate&&me.hideAnimation;// replaced check for isVisible with _hidden, need to hide a component not yet in view in EventEditor
if(!me._hidden&&me.trigger('beforeHide')!==false){me._hidden=true;if(!element)return;me.revertFocus();// Focus exit causes close if autoClose: true, and if closeAction: 'hide'
// that might destroy us, so exit now if that happens.
if(me.isDestroyed){resolve();return;}// Cancel any current hide/show animation
if(me.currentAnimation){me.cancelHideShowAnimation();}if(hideAnimation){var styleProp=Object.keys(hideAnimation)[0],animProps=hideAnimation[styleProp];me.currentAnimation={styleProp:styleProp,resolve:resolve};// Element must behave as though it were not there during
// the animated hide. This means pointer-events:none
element.classList.add('b-hiding');element.addEventListener('transitionend',me.afterHideShowAnimate);style[styleProp]=animProps.from;style.transition="".concat(styleProp," ").concat(animProps.duration," ease ").concat(animProps.delay);me.requestAnimationFrame(function(){style[styleProp]=animProps.to;});}else{element.classList.add('b-hidden');}// only supply resolve function if not using animation
me.afterHide(!hideAnimation&&resolve);}});}},{key:"doHideOrRealign",value:function doHideOrRealign(event){var me=this,anchoredTo=me.anchoredTo,activeEl=document.activeElement;// If we're scrolling because a focused textual input field which we contain is being shifted into view,
// we must not reposition - we'll just move with the document content.
if(event.target.nodeType===9&&me.element.contains(activeEl)&&textInputTypes[activeEl]&&window.innerHeight<document.body.offsetHeight){return;}// If we either don't know what element we're anchored to (or not anchored to one at all),
// or the element we're anchored to has been affected by the scroll, we must hide.
if(me.scrollAction==='hide'&&(!anchoredTo||DomHelper.isDescendant(event.target,anchoredTo))){me.hide();}// If the scrolling element contains the element we're anchored to, or we are anchored to something which is itself
// inside a realigning floated widget, then we must realign
else if(me.scrollAction==='realign'&&(DomHelper.isDescendant(event.target,anchoredTo)||IdHelper.fromElement(anchoredTo,isRealigningFloater))&&event.target!==(document.scrollingElement||document.body)){me.realign(event.target);}}},{key:"afterHide",value:function afterHide(){var resolveFn=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var fireEvent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,lastAlignSpec=me.lastAlignSpec;// The flag must be cleared on a normal hide.
// It's set after the hide() call in alignTo
// if the target is outside our clippedTo region.
if(lastAlignSpec){lastAlignSpec.targetHidden=null;}// Remove listeners which are only added during the visible phase.
// In its own method because it's called on hide and destroy.
me.removeTransientListeners();// Postprocessing to be done after the hideAnimation finishes.
// If there's no animation, we call it immediately.
// We set the element to be hidden here, after any animation completes.
// We also remove floating Widgets from the DOM when they are hidden.
if(!me.hideAnimation){me.afterHideAnimation();}fireEvent&&me.trigger('hide');resolveFn&&resolveFn();}},{key:"removeTransientListeners",value:function removeTransientListeners(){var me=this;if(me.documentScrollListener){document.removeEventListener('scroll',me.doHideOrRealign,true);me.documentScrollListener=false;}if(me.constrainListeners){ResizeMonitor.removeResizeListener(me.lastAlignSpec.constrainTo,me.callRealign);me.constrainMutationMonitor&&me.constrainMutationMonitor.disconnect();me.constrainListeners=false;}}},{key:"afterHideAnimation",value:function afterHideAnimation(){var me=this,element=me.element,contentRange=me.contentRange;if(me.floating&&Widget.floatRoot.contains(element)){if(contentRange){me.contentRangeStart=contentRange.start;me.contentRangeEnd=contentRange.end;}element.remove();}else{element.classList.add('b-hidden');}}/**
     * Show or hide widget. Deprecated in 2.2.3, please use {@link #property-hidden} instead
     * @type {Boolean}
     * @category Visibility
     * @deprecated 2.2.3
     */},{key:"up",/**
     * Looks up the {@link #property-owner} axis to find an ancestor which matches the passed selector.
     * The selector may be a widget type identifier, such as `'grid'`, or a function which will return
     * `true` when passed the desired ancestore.
     * @param {String|Function} selector A Type identifier or selection function.
     * @param {Boolean} [deep] When using a string identifier, pass `true` if all superclasses should be included, ie if a `Grid` should match `'widget'`.
     * @param {Number|String|Common.widget.Widget} [limit] how many steps to step up before aborting the search, or a selector to stop at or the topmost ancestor to consider.
     */value:function up(selector,deep,limit){var limitType=_typeof(limit),numericLimit=limitType==='number',selectorLimit=limitType==='string';for(var result=this.owner,steps=1;result;result=result.owner,steps++){if(widgetMatches(result,selector,deep)){return result;}if(numericLimit&&steps>=limit){return;}else if(selectorLimit&&widgetMatches(result,limit,deep)){return;}else if(result===limit){return;}}}/**
     * Returns `true` if this Widget owns the passed Element or Widget. This is based on the
     * widget hierarchy, not DOM containment. So an element in a `Combo`'s dropdown list
     * will be owned by the `Combo`.
     * @param {HTMLElement|Common.widget.Widget} target The element or Widget to test for being
     * within the ownership tree of this Widget.
     */},{key:"owns",value:function owns(target){// We were passed an HtmlElement
if(target&&target.nodeType===1){if(this.element.contains(target)){return true;}target=IdHelper.fromElement(target);}while(target){if(target===this){return true;}target=target.owner;}return false;}},{key:"onFocusIn",value:function onFocusIn(e){var me=this,element=me.element;me.containsFocus=true;me.focusInEvent=e;element.classList.add('b-contains-focus');if(element.contains(e.target)&&me.onInternalKeyDown&&!me.keyDownListenerRemover){me.keyDownListenerRemover=EventHelper.on({element:element,keydown:'onInternalKeyDown',thisObj:me});}/**
         * Fired when focus enters this Widget.
         * @event focusin
         * @param {Common.widget.Widget} source - This Widget
         * @param {HTMLElement} fromElement The element which lost focus.
         * @param {HTMLElement} toElement The element which gained focus.
         * @param {Common.widget.Widget} fromWidget The widget which lost focus.
         * @param {Common.widget.Widget} toWidget The widget which gained focus.
         * @param {Boolean} backwards `true` if the `toElement` is before the `fromElement` in document order.
         */me.trigger('focusin',e);}},{key:"onFocusOut",value:function onFocusOut(e){var me=this;if(me.keyDownListenerRemover){me.keyDownListenerRemover();me.keyDownListenerRemover=null;}if(!me.isDestroyed){me.containsFocus=false;me.focusInEvent=null;me.element.classList.remove('b-contains-focus');/**
             * Fired when focus exits this Widget's ownership tree. This is different from a `blur` event.
             * focus moving from within this Widget's ownership tree, even if there are floating widgets
             * will not trigger this event. This is when focus exits this widget completely.
             * @event focusout
             * @param {Common.widget.Widget} source - This Widget
             * @param {HTMLElement} fromElement The element which lost focus.
             * @param {HTMLElement} toElement The element which gained focus.
             * @param {Common.widget.Widget} fromWidget The widget which lost focus.
             * @param {Common.widget.Widget} toWidget The widget which gained focus.
             * @param {Boolean} backwards `true` if the `toElement` is before the `fromElement` in document order.
             */me.trigger('focusout',e);}}/**
     * If this Widget contains focus, focus is reverted to the source from which it entered if possible.
     */},{key:"revertFocus",value:function revertFocus(){// TODO: look for fallback focus targets if the target is no longer focusable (disabled/hidden etc)
if(this.focusInEvent&&this.focusInEvent.relatedTarget&&this.focusInEvent.relatedTarget.nodeType===1&&this.element.contains(document.activeElement)){DomHelper.focusWithoutScrolling(this.focusInEvent.relatedTarget);}}/**
     * Returns `true` if this Widget contains focus.
     */},{key:"isFocused",value:function isFocused(){return this.element.classList.contains('b-contains-focus');}/**
     * Used by the Widget class internally to create CSS classes based on this Widget's
     * inheritance chain to allow styling from each level to apply.
     *
     * For example Combo would yield `"["b-widget", "b-field", "b-textfield", "b-pickerfield", "b-combo"]"`
     *
     * May be implemented in subclasses to add or remove classes from the super.widgetClassList
     * @returns {String[]} The css class list named using the class name.
     * @internal
     * @category DOM
     */},{key:"fromCache",//endregion
//region Cache
/**
     * Gets dom elements in the view. Caches the results for faster future calls.
     * @param {String} query CSS selector
     * @param {Boolean} children true to fetch multiple elements
     * @param {HTMLElement} element Element to use as root for the query, defaults to the views outermost element
     * @returns {HTMLElement|HTMLElement[]|null} A single element or an array of elements (if parameter children is set to true)
     * @internal
     * @category DOM
     */value:function fromCache(query){var children=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var element=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.element;if(!element)return null;var me=this;if(!me.cache[query]){me.cache[query]=children?DomHelper.children(element,query):DomHelper.down(element,query);}return me.cache[query];}/**
     * Clear caches, forces all calls to fromCache to requery dom. Called on render/rerender.
     * @internal
     * @category DOM
     */},{key:"emptyCache",value:function emptyCache(){this.cache={};}//endregion
//region Mask
/**
     * Mask the widget, showing the specified message
     * @param {String|Object} msg Mask message (or a {@link Common.widget.Mask} config object
     * @returns {Common.widget.Mask}
     */},{key:"mask",value:function mask(msg){var me=this;if(me.maskInstance){me.maskInstance.destroy();}if(typeof msg==='string'){return me.maskInstance=WidgetHelper.mask(me.element,msg);}msg.element=me.element;return me.maskInstance=WidgetHelper.mask(msg);}/**
     * Unmask the widget
     */},{key:"unmask",value:function unmask(){if(this.maskInstance){WidgetHelper.unmask(this.element);this.maskInstance=null;}}//endregion
//region Monitor resize
},{key:"onInternalResize",value:function onInternalResize(element,width,height,oldWidth,oldHeight){this._width=element.offsetWidth;this._height=element.offsetHeight;}},{key:"onElementResize",value:function onElementResize(resizedElement){var me=this,element=me.element,oldWidth=me._width,oldHeight=me._height,newWidth=element.offsetWidth,newHeight=element.offsetHeight;if(!me.suspendResizeMonitor&&(oldWidth!==newWidth||oldHeight!==newHeight)){me.onInternalResize(element,newWidth,newHeight,oldWidth,oldHeight);/**
             * Fired when the encapsulating element of a Widget resizes *only when {@link #config-monitorResize} is `true`*.
             * @event resize
             * @param {Common.widget.Widget} source - This Widget
             * @param {Number} width The new width
             * @param {Number} height The new height
             * @param {Number} oldWidth The old width
             * @param {Number} oldHeight The old height
             */me.trigger('resize',{width:newWidth,height:newHeight,oldWidth:oldWidth,oldHeight:oldHeight});}}},{key:"updateScale",value:function updateScale(){var me=this,element=me.element,parentElement=element.parentElement;// this could be placed elsewhere but want to keep it contained to not spam other code,
// since this is a very specific usecase in our docs
if(!me.configuredWidth){me.configuredWidth=me.width;}// TODO: handle autoHeight, but seems it assigns height to late with current setup
if(!me.parentHeight){me.parentHeight=parentElement.offsetHeight;}// We are scaling to fit inside the width, so ensure that we are not the cause of a scrollbar
// in our current, unscaled state by hiding while we measure the parent's offsetWidth which
// we are going to scale to.
element.style.display='none';var scale=parentElement.offsetWidth/me.configuredWidth,adjustedScale=me.allowGrowWidth?Math.min(scale,1):scale;element.style.transform="scale(".concat(adjustedScale,")");element.style.transformOrigin='top left';element.style.display='';parentElement.style.height=me.parentHeight*adjustedScale+'px';if(me.allowGrowWidth&&scale>1){// increase width
me.width=me.configuredWidth*scale;}}},{key:"onParentElementResize",value:function onParentElementResize(event){this.updateScale();}//endregion
/**
     * Returns a `TRBL` array of values parse from the passed specification. This can be used to parse`
     * a value list for `margin` or `padding` or `border-width` etc - any CSS value which takes a `TRBL` value.
     * @param {Number|String|String[]} values The `TRBL` value
     * @param {String} [units=px] The units to add to values which are specified as numeric.
     */},{key:"parseTRBL",value:function parseTRBL(values){var units=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'px';values=values||0;if(typeof values==='number'){return["".concat(values).concat(units),"".concat(values).concat(units),"".concat(values).concat(units),"".concat(values).concat(units)];}var parts=values.split(' '),len=parts.length;if(len===1){parts[1]=parts[2]=parts[3]=parts[0];}else if(len===2){parts[2]=parts[0];parts[3]=parts[1];}else if(len===3){parts[3]=parts[1];}return[isFinite(parts[0])?"".concat(parts[0]).concat(units):parts[0],isFinite(parts[1])?"".concat(parts[1]).concat(units):parts[2],isFinite(parts[2])?"".concat(parts[2]).concat(units):parts[3],isFinite(parts[3])?"".concat(parts[3]).concat(units):parts[4]];}},{key:"title",set:function set(title){this._title=title;if(this.titleElement){this.titleElement.innerHTML=title;}},get:function get(){return this._title;}/**
     * Get this widget's encapsulating HTMLElement, which is created along with the widget but added to DOM at render time
     * @property {HTMLElement}
     * @readonly
     * @category DOM
     */},{key:"element",get:function get(){return this._element;},set:function set(element){var me=this;if(typeof element==='string'){element=DomHelper.createElementFromTemplate(element);}else if(element.constructor.name==='Object'){element=DomHelper.createElement(element);}else if(element.nodeType!==1){element=DomHelper.createElementFromTemplate(me.template(me));}me._element=element;var classList=element.classList;element.id=me.id;// Add the hierarchy, eg ['b-combo b-pickerfield b-textfield b-widget']
// TODO: apply not needed when IE11 not supported, classList.add takes multiple classes
//classList.add(...me.widgetClassList);
element.className+=' '+me.widgetClassList.join(' ');if(me._hidden){classList.add('b-hidden');}// The environmental classes only need to be added to a naked Widget.
// If we have a parent container, that will have them.
if(!me.parent){classList.add('b-outer');if(BrowserHelper.isTouchDevice){classList.add('b-touch-events');}if(!DomHelper.scrollBarWidth){classList.add('b-overlay-scrollbar');}if(BrowserHelper.isChrome){classList.add('b-chrome');}else if(BrowserHelper.isSafari){classList.add('b-safari');}else if(BrowserHelper.isFirefox){classList.add('b-firefox');}else if(BrowserHelper.isIE11){classList.add('b-ie');}else if(BrowserHelper.isEdge){classList.add('b-edge');}}var namedElements=element.querySelectorAll('[reference]');var _iteratorNormalCompletion12=true;var _didIteratorError12=false;var _iteratorError12=undefined;try{for(var _iterator12=namedElements[Symbol.iterator](),_step12;!(_iteratorNormalCompletion12=(_step12=_iterator12.next()).done);_iteratorNormalCompletion12=true){var el=_step12.value;var name=el.getAttribute('reference');el.removeAttribute('reference');// Set a reference directly to significant elements.
// For example the 'input' element of a field.
me[name]=el;// Key elements contain owner pointer if data is supported (Not on IE SVG).
el.dataset&&(el.dataset.ownerCmp=me.id);}// Create Range which encapsulates content set by the content property.
// It will be set to encapsulate initial content upon render.
}catch(err){_didIteratorError12=true;_iteratorError12=err;}finally{try{if(!_iteratorNormalCompletion12&&_iterator12.return!=null){_iterator12.return();}}finally{if(_didIteratorError12){throw _iteratorError12;}}}me.contentRange=BrowserHelper.isIE11?document.createRange():new Range();}},{key:"constrainTo",set:function set(constrainTo){this._constrainTo=constrainTo;},get:function get(){return'_constrainTo'in this?this._constrainTo:window;}},{key:"centered",set:function set(value){this._centered=value;if(value&&!this.floating){throw new Error('`centered` is only relevant when a Widget is `floating`');}if(value){this.element.classList.add('b-centered');}else{this.element.classList.remove('b-centered');}},get:function get(){return this._centered;}/**
     * The child element into which content should be placed. This means where {@link #config-html} should be put,
     * or, for {@link Common.widget.Container Container}s, where child items should be rendered.
     * @property {HTMLElement}
     * @category DOM
     */},{key:"contentElement",get:function get(){return this.element;}/**
     * Get/set widgets id
     * @property {String}
     * @category DOM
     */},{key:"id",get:function get(){return this._id;},set:function set(id){var me=this,oldId=me._id;if(oldId){IdHelper.unregister(me);}if(!id){id=IdHelper.generateId("b-".concat(me.$name.toLowerCase(),"-"));me.hasGeneratedId=true;}me._id=id;IdHelper.register(me);}/**
     * Get/set widgets elements style. The setter accepts a cssText string or a style config object, the getter always
     * returns a CSSStyleDeclaration
     * @property {String|Object|CSSStyleDeclaration}
     * @category DOM
     */},{key:"style",get:function get(){return this.element?this.element.ownerDocument.defaultView.getComputedStyle(this.element):this._style;},set:function set(style){this._style=style;this.element&&DomHelper.applyStyle(this.element,this._style);}/**
     * Get widgets elements dataset or assign to it
     * @property {Object}
     * @category DOM
     */},{key:"dataset",get:function get(){return this.element.dataset;},set:function set(dataset){Object.assign(this.dataset,dataset);}},{key:"ref",set:function set(ref){this._ref=ref;this.element.dataset.ref=ref;},get:function get(){return this._ref;}},{key:"clippedBy",set:function set(clippedBy){this._clippedBy=Array.isArray(clippedBy)?clippedBy:clippedBy?[clippedBy]:null;},get:function get(){var clippedBy=this._clippedBy;if(clippedBy){var result=Rectangle.from(clippedBy[0],null,true),i;for(i=1;i<clippedBy.length;i++){result=result.intersect(Rectangle.from(clippedBy[i],null,true));}return result;}}},{key:"overflowElement",get:function get(){return this.contentElement;}},{key:"maxHeightElement",get:function get(){return this.element;}},{key:"scrollable",set:function set(scrollable){var overflowElement=this.overflowElement;if(typeof scrollable==='boolean'){scrollable={overflowX:scrollable,overflowY:scrollable};}if(overflowElement){scrollable.element=overflowElement;}scrollable.widget=this;this._scrollable=new this.scrollerClass(scrollable);}/**
     * Accessor to the {@link Common.helper.util.Scroller} which can be used
     * to both set and read scroll information.
     * @property {Common.helper.util.Scroller} scrollable
     */,get:function get(){return this._scrollable;}/**
     * Get/set HTML to display. When specifying HTML, this widget's element will also have `b-html` added to its
     * classList, to allow targeted styling.
     * @property {String}
     * @category DOM
     */},{key:"html",get:function get(){// Maintainer, we cannot use a ternary here, we need the this.initializingElement test to shortcut
// to the true case to return the _html property to avoid infinite loops.
if(this.initializingElement||!this.element){return this.content||this._html;}return this.contentElement.innerHTML;},set:function set(html){var me=this,isClearing=html==null,element=me.element,contentElement=me.contentElement;if(me._html!==html){me._html=html;if(element){var anchorEl=contentElement===element&&me._anchorElement;// Flag class that we are an HTML carrying element
element.classList[isClearing?'remove':'add']('b-html');// Setting innerHTML destroys the anchorElement in some browsers
// so we must temporarily remove it to preserve it.
// Only if the contentElement is the main element.
if(anchorEl){me.element.removeChild(anchorEl);}me.contentElement.innerHTML=isClearing?'':html;if(anchorEl){element.appendChild(anchorEl);}if(me.floating||me.positioned){// Must realign because content change might change dimensions
if(!me.isAligning){me.realign();}}}}}/**
     * Set HTML content safely, without disturbing sibling elements which may have been
     * added to the {@link #property-contentElement} by plugins and features.
     * When specifying html, this widget's element will also have `b-html` added to its
     * classList, to allow targeted styling.
     * @property {String}
     * @category DOM
     */},{key:"content",set:function set(html){var me=this,isClearing=html==null,element=me.element;if(me._html!==html){me._html=html;if(element){var contentRange=me.contentRange;// Flag class that we are an HTML carrying element
element.classList[isClearing?'remove':'add']('b-html');// Replace the contents of our content range with the new content
contentRange.deleteContents();if(!isClearing){contentRange.insertNode(DomHelper.createElementFromTemplate(html,{fragment:true}));}// Must realign because content change might change dimensions
if(!me.isAligning||me.positioned){me.realign();}}}}},{key:"anchorSize",get:function get(){var me=this;var result=this._anchorSize;if(!result){// TODO: Move the anchoring scheme to the Panel class when we have it.
// These values will be in the SASS and styled into the SVG through the Panel's theme.
var borderWidth=parseFloat(DomHelper.getStyleValue(me.element,'border-top-width')),borderColour=DomHelper.getStyleValue(me.element,'border-top-color'),anchorElement=me.anchorElement,svgEl=anchorElement.firstElementChild,pathElement=me.anchorPathElement=svgEl.lastElementChild,hidden=me._hidden;var backgroundColour=DomHelper.getStyleValue(me.contentElement,'background-color');// If the background colour comes through from the outer element, use that.
if(backgroundColour.match(isTransparent)){backgroundColour=DomHelper.getStyleValue(me.element,'background-color');}me.defaultAnchorBackgroundColor=backgroundColour;result=anchorElement.getBoundingClientRect();var _result3=result=me._anchorSize=[result.width,result.height],_result4=_slicedToArray(_result3,2),width=_result4[0],height=_result4[1];svgEl.setAttribute('height',height+borderWidth);svgEl.setAttribute('width',width);pathElement.setAttribute('d',"M0,".concat(height,"L").concat(width/2,",0.5L").concat(width,",").concat(height));if(borderWidth){pathElement.setAttribute('stroke-width',borderWidth);pathElement.setAttribute('stroke',borderColour);}result[1]-=borderWidth;if(hidden){me.element.classList.add('b-hidden');}if(!me.themeChangeListener){me.themeChangeListener=GlobalEvents.on({theme:'onThemeChange',thisObj:me});}}// Reset to default in case it has been positioned by a coloured header
me.anchorPathElement.setAttribute('fill',me.defaultAnchorBackgroundColor);return result;}},{key:"anchorElement",get:function get(){var result=this._anchorElement;if(!result){result=this._anchorElement=DomHelper.createElement({parent:this.element,className:'b-anchor b-anchor-top',children:[{tag:'svg',ns:'http://www.w3.org/2000/svg',version:'1.1',class:'b-pointer-el',children:[{tag:'defs',children:[{tag:'filter',id:'shadow-filter',children:[{tag:'feDropShadow',dx:0,dy:-1,stdDeviation:2,'flood-opacity':0.05}]}]},{tag:'path',filter:BrowserHelper.isIE11||BrowserHelper.isEdge?null:'url(#shadow-filter)'}]}]});}return result;}},{key:"anchor",set:function set(anchor){this._anchor=anchor;if(this._anchorElement){this._anchorElement.classList[anchor?'remove':'add']('b-hide-display');}},get:function get(){return this._anchor;}},{key:"draggable",get:function get(){return this._draggable;},set:function set(draggable){var me=this,element=me.element;me._draggable=draggable;element.setAttribute('draggable',Boolean(draggable));if(draggable){me.dragEventDetacher=EventHelper.addListener({element:me.element,dragstart:me.onWidgetDragStart,dragend:me.onWidgetDragEnd,thisObj:me});}else{me.dragEventDetacher&&me.dragEventDetacher();me.dragOverEventDetacher&&me.dragOverEventDetacher();}}},{key:"floating",get:function get(){return this._floating;},set:function set(floating){// Coerce all to boolean so that we have a true/false value
floating=Boolean(floating);if(Boolean(this.floating)!==floating){this._floating=floating;}}},{key:"positioned",get:function get(){return this._positioned;},set:function set(positioned){// Coerce all to boolean so that we have a true/false value
positioned=Boolean(positioned);if(Boolean(this.positioned)!==positioned){this.element.classList[positioned?'add':'remove']('b-positioned');this._positioned=positioned;}}},{key:"x",set:function set(x){this.setXY(x);},get:function get(){return this.getXY()[0];}/**
     * Moves this Widget to the desired y position. *Only valid for {@link #config-floating} Widgets.
     * @param {Number} y
     * @category Float & align
     */},{key:"y",set:function set(y){this.setXY(null,y);},get:function get(){return this.getXY()[1];}/**
     * Get elements offsetWidth or sets its style.width, or specified width if element not created yet.
     * @property {Number|String}
     * @category Layout
     */},{key:"width",get:function get(){var me=this,element=me.element;if(me.monitorResize){// If the width is invalid, read it now.
if(me._width==null){me._width=element.offsetWidth;}// Usually this will be set in onInternalResize
return me._width;}// No monitoring, we have to measure;
return element.offsetWidth;},set:function set(width){DomHelper.setLength(this.element,'width',width);// Invalidate the width, so it will be read from the DOM if a read is requested before the resize event
this._width=null;// Setting width explicitly should reset flex, since it's not flexed anymore
this._flex=null;this.element.style.flex=BrowserHelper.isIE11?'':null;}/**
     * Get/set elements maxWidth. Getter returns max-width from elements style, which is always a string. Setter accepts
     * either a String or a Number (which will have 'px' appended). Note that like {@link #config-width},
     * _reading_ the value will return the numeric value in pixels.
     * @property {String|Number}
     * @category Layout
     */},{key:"maxWidth",get:function get(){return DomHelper.measureSize(this.element.style.maxWidth,this.element);},set:function set(maxWidth){DomHelper.setLength(this.element,'maxWidth',maxWidth);}/**
     * Get/set elements minWidth. Getter returns min-width from elements style, which is always a string. Setter accepts
     * either a String or a Number (which will have 'px' appended). Note that like {@link #config-width},
     * _reading_ the value will return the numeric value in pixels.
     * @property {String|Number}
     * @category Layout
     */},{key:"minWidth",get:function get(){return DomHelper.measureSize(this.element.style.minWidth,this.element);},set:function set(minWidth){DomHelper.setLength(this.element,'minWidth',minWidth);}},{key:"flex",get:function get(){return this._flex;}/**
     * Get element's flex property. This may be configured as a single number or a `<flex-grow> <flex-shrink> <flex-basis>` format string.
     * numeric-only values are interpreted as the `flex-grow` value.
     * @property {Number|String}
     * @category Layout
     */,set:function set(flex){this._flex=flex;// Default grow to the same as flex and basis to 0.
if(typeof flex==='number'||typeof flex==='string'&&flex.split(/\s/).length===1){flex="".concat(flex," ").concat(flex);}this.element.style.flex=flex;this.element.style.width=BrowserHelper.isIE11?'':null;}/**
     * Get/set this widget's `align-self` flexbox setting. This may be set to modify
     * how this widget is aligned within the cross axis of a flexbox layout container.
     * @property {String}
     * @category Layout
     */},{key:"alignSelf",get:function get(){return this._alignSelf;},set:function set(alignSelf){this.element.style.alignSelf=alignSelf;}/**
     * Get element's margin property. This may be configured as a single number or a `TRBL` format string.
     * numeric-only values are interpreted as pixels.
     * @property {Number|String}
     * @category Layout
     */},{key:"margin",get:function get(){return this._margin;},set:function set(margin){// Convert eg 1 to "1px 1px 1px 1px" or "0 8px" to "0px 8px 0px 8px"
this.element.style.margin=this._margin=this.parseTRBL(margin).join(' ');}/**
     * Get element's offsetHeight or sets its style.height, or specified height if element no created yet.
     * @property {Number|String}
     * @category Layout
     */},{key:"height",get:function get(){var me=this,element=me.element;if(me.monitorResize){// If the height is invalid, read it now.
if(me._height==null){me._height=element.offsetHeight;}// Usually this will be set in onInternalResize
return me._height;}// No monitoring, we have to measure;
return element.offsetHeight;},set:function set(height){DomHelper.setLength(this.element,'height',height);// Invalidate the height, so it will be read from the DOM if a read is requested before the resize event
this._height=null;}/**
     * Get/set element's maxHeight. Getter returns max-height from elements style, which is always a string. Setter
     * accepts either a String or a Number (which will have 'px' appended). Note that like {@link #config-height},
     * _reading_ the value will return the numeric value in pixels.
     * @property {String|Number}
     * @category Layout
     */},{key:"maxHeight",get:function get(){return DomHelper.measureSize(this.maxHeightElement.style.maxHeight,this.element);},set:function set(maxHeight){var me=this,element=me.element;DomHelper.setLength(me.maxHeightElement,'maxHeight',maxHeight);// Flexbox does not handle overflow correctly when a vertically
// flexed item is constrained by the maxHeight of its containing el.
// So we have to propagate the maxHeight from the encapsulating element
// onto the contentElement.
if(BrowserHelper.isIE11&&me.contentElement!==element){if(maxHeight==null){ResizeMonitor.removeResizeListener(element,me.boundMaxHeightBugHandler);}else{ResizeMonitor.addResizeListener(element,me.boundMaxHeightBugHandler||(me.boundMaxHeightBugHandler=me.fixIEMaxHeightBug.bind(me)));if(document.body.contains(element)){me.fixIEMaxHeightBug();}}}}},{key:"minHeight",get:function get(){return DomHelper.measureSize(this.element.style.minHeight,this.element);},set:function set(minHeight){DomHelper.setLength(this.element,'minHeight',minHeight);}/**
     * Get/set element's disabled state
     * @property {Boolean}
     * @category Misc
     */},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){var el=this.element,focusEl=this.focusElement;disabled&&this.revertFocus();if(el){el.classList[disabled?'add':'remove']('b-disabled');if(focusEl){focusEl.disabled=disabled;}}this._disabled=disabled;}},{key:"tooltip",get:function get(){return this._tooltip;}//noinspection JSAnnotator
/**
     * Get/set a tooltip on the widget. Accepts a string or tooltip config (specify true (or 'true') to use placeholder
     * as tooltip). When using a string it will configure the tooltip with `textContent: true` which enforces a default
     * max width.
     *
     * @property {String|Object}
     * @category Misc
     */,set:function set(config){var me=this;if(me._tooltip){me._tooltip.destroy();me._tooltip=null;}if(config&&!(me.preventTooltipOnTouch&&BrowserHelper.isTouchDevice)){if(config.constructor.name!=='Object'){config={html:typeof config==='string'?config:me.placeholder,textContent:true};}config.type='tooltip';if(!config.forElement)config.forElement=me.element;if(!('showOnHover'in config))config.showOnHover=true;if(!('autoClose'in config))config.autoClose=true;me._tooltip=WidgetHelper.createWidget(config);}}/**
     * Determines visibility by checking if the Widgets is hidden, if not it checks if its element is available in DOM
     * @property {Boolean}
     * @readonly
     */},{key:"isVisible",get:function get(){var element=this.element;var result=element&&!this._hidden;// TODO: When we have a containment hierarchy, this needs to take the hierarchy into account.
// A descendant of a hidden, or non rendered (in the sense of being inserted into the document)
// ancestor is not visible even if it is not hidden.
if(result){if(!document.body.contains(element)||this.requireSize&&element.offsetWidth===0&&element.offsetHeight===0){// element wasn't found in document, set visibility flag to false
result=false;// No shadowroot support in IE11/Edge
if(window.ShadowRoot){// if element cannot be found in document, it may be in the shadow dom
// walk through parentNodes, checking instances
var current=element;while(current=current.parentNode){if(current instanceof window.ShadowRoot){result=true;}}}}}return result;}},{key:"focusElement",get:function get(){// Override in widgets which are focusable.
}},{key:"isFocusable",get:function get(){var focusElement=this.focusElement;// We are only focusable if the focusEl is deeply visible, that means
// it must have layout - an offsetParent. Body does not have offsetParent.
return focusElement&&this.isVisible&&!this.disabled&&(focusElement===document.body||focusElement.offsetParent);}},{key:"visible",set:function set(show){this.hidden=!show;}/**
     * Hide or show widget
     * @type {Boolean}
     * @category Visibility
     */},{key:"hidden",set:function set(hide){if(this.isConfiguring){this._hidden=hide;this.element.classList[hide?'add':'remove']('b-hidden');}else{if(hide){this.hide();}else{this.show();}}}/**
     * Get id assigned by user (not generated id)
     * @returns {String}
     * @readonly
     * @private
     * @category Misc
     */},{key:"assignedId",get:function get(){return this.hasGeneratedId?null:this.id;}/**
     * Get the owning Widget of this Widget. If this Widget is directly contained, then the containing
     * Widget is returned. If this Widget is floating, the configured `owner` property is returned.
     * If there is a `forElement`, that element's encapsulating Widget is returned.
     * @category Misc
     */},{key:"owner",get:function get(){return this.parent||this._owner||IdHelper.fromElement(this.forElement||this.element.parentNode);},set:function set(owner){this._owner=owner;}},{key:"widgetClassList",get:function get(){var me=this;var myCls=me.cls,result=me.classHierarchy(Widget).reduce(function(target,cls){var widgetClassProperty=Reflect.getOwnPropertyDescriptor(cls.prototype,'widgetClass'),widgetClass;// If the Class has its own get widgetClass, call it upon this instance.
if(widgetClassProperty&&widgetClassProperty.get){widgetClass=widgetClassProperty.get.call(me);}else{widgetClass="b-".concat(cls.$name.toLowerCase());}if(widgetClass){// The result is used as a DOM classList. Must not contain spaces.
target.push.apply(target,_toConsumableArray(widgetClass.split(' ')));}return target;},myCls?myCls.split(' '):[]);if(me.floating){result.push('b-floating');}if(BrowserHelper.isTouchDevice){result.push('b-touch');}return result;}}],[{key:"fromElement",value:function fromElement(element,selector,limit){}},{key:"defaultConfig",//region Config
get:function get(){return{/**
             * A {@link Common.helper.DomHelper#function-createElement-static} config object or HTML string from which to
             * create the Widget's element.
             * @private
             * @config {Object|String}
             * @category DOM
             */element:true,callOnFunctions:true,/**
             * Widget id, if not specified one will be generated. Also used for lookups through WidgetHelper
             * @config {String}
             * @category DOM
             */id:'',/**
             * Html to display initially
             * @config {String}
             * @category DOM
             */html:null,/**
             * true if no id was set, will use generated id instead (widget1, ...). Toggle automatically on creation
             * @default false
             * @type {Boolean}
             * @private
             * @category Misc
             */hasGeneratedId:null,/**
             * Custom CSS class to add to element
             * @config {String}
             * @category CSS
             */cls:null,/**
             * Custom style spec to add to element
             * @config {String}
             * @category CSS
             */style:null,/**
             * Disabled or enabled
             * @default false
             * @config {Boolean}
             * @category Misc
             */disabled:null,/**
             * Element (or element id) to append this widgets element to
             * @config {HTMLElement|String}
             * @default
             * @category DOM
             */appendTo:null,/**
             * Element (or element id) to insert this widget before. If provided, {@link #config-appendTo} config is ignored.
             * @config {HTMLElement|String}
             * @category DOM
             */insertBefore:null,/**
             * Element (or element id) to append this widget element to, as a first child. If provided, {@link #config-appendTo} config is ignored.
             * @config {HTMLElement|String}
             * @category DOM
             */insertFirst:null,/**
             * Object to apply to elements dataset (each key will be used as a data-attribute on the element)
             * @config {Object}
             * @category DOM
             */dataset:null,/**
             * Tooltip for the widget, either as a string or as a Tooltip config object
             * @config {String|Object}
             * @category Misc
             */tooltip:null,/**
             * Prevent tooltip from being displayed on touch devices. Useful for example for buttons that display a
             * menu on click etc, since the tooltip would be displayed at the same time.
             * @config {Boolean}
             * @default false
             * @category Misc
             */preventTooltipOnTouch:null,/**
             * Specify true to have widget monitoring window resize.
             * @config {Boolean}
             * @default false
             * @category Misc
             */monitorResize:null,cache:{},/**
             * Set to `true` to move the widget out of the document flow and position it
             * absolutely in browser viewport space.
             * @config {Boolean}
             * @default
             * @category Float & align
             */floating:null,/**
             * Set to `true` when a widget is rendered into another widget's  {@link #property-contentElement}, but must not
             * participate in the standard layout of that widget, and must be positioned relatively to that
             * widget's {@link #property-contentElement}.
             *
             * {@link Common.widget.Editor Editor}s are positioned widgets.
             * @config {Boolean}
             * @default
             * @category Float & align
             */positioned:null,/**
             * Only valid if this Widget is {@link #config-floating}
             * Set to `true` to be able to drag a widget freely on the page. Or set to an object with a ´handleSelector´ property which controls when a drag
             * should start.
             *
             * ```javascript
             *
             * draggable : {
             *     handleSelector : ':not(button)'
             * }
             *
             * ```
             *
             * @config {Boolean/Object}
             * @default false
             * @category Float & align
             */draggable:null,/**
             * Only valid if this Widget is {@link #config-floating}
             * The edge alignment spec to use by default when {@link #function-showBy} or {@link #function-alignTo} is used.
             * Format is `'[trbl]n-[trbl]n'` and it specifies our edge and the target edge plus optional
             * offsets from 0 to 100 along the edges to align to. See the {@link #function-showBy} function for more details.
             * @default
             * @config {String}
             * @category Float & align
             */align:'t-b',/**
             * Only valid if this Widget is {@link #config-floating}
             * Set to `true` to centre the Widget in browser viewport space.
             * @config {Boolean}
             * @default
             * @category Float & align
             */centered:null,/**
             * Only valid if this Widget is {@link #config-floating} and being shown through {@link #function-showBy}.
             * Element, Widget or Rectangle to which this Widget is constrained.
             * @config {HTMLElement|Common.widget.Widget|Common.helper.util.Rectangle}
             * @default document.body
             * @category Float & align
             */constrainTo:null,/**
             * Only valid if this Widget is {@link #config-floating} and being shown through {@link #function-showBy}.
             * `true` to show a connector arrow pointing to the align target.
             * @config {Boolean}
             * @default false
             * @category Float & align
             */anchor:null,/**
             * Defines what to do if document is scrolled while Widget is visible (only relevant when floating is set to true).
             * Valid values: ´null´: do nothing, ´hide´: hide the widget or ´realign´: realign to the target if possible.
             * @config {String}
             * @default
             * @category Float & align
             */scrollAction:null,/**
             * Only valid if this Widget is {@link #config-floating}. An object which defined which CSS style
             * property should be animated upon hide, and how it should be animated eg:
             *
             * ```javascript
             * {
             *    opacity: {
             *        to : 0,
             *        duration: '10s',
             *        delay: '0s'
             *    }
             * }
             * ```
             *
             * Set to `'false'` to disable animation.
             *
             * @config {Boolean|Object}
             * @default
             * @category Float & align
             */hideAnimation:null,/**
             * Only valid if this Widget is {@link #config-floating}. An object which defined which CSS style
             * property should be animated upon show, and how it should be animated eg:
             *
             * ```javascript
             * {
             *    opacity: {
             *        to : 1,
             *        duration: '10s',
             *        delay: '0s'
             *    }
             * }
             * ```
             *
             * Set to `'false'` to disable animation.
             *
             * @config {Boolean|Object}
             * @category Float & align
             */showAnimation:null,/**
             * Only valid if this Widget is {@link #config-floating}. The x position for the widget.
             *
             * @config {Number}
             * @default
             * @category Float & align
             */x:null,/**
             * Only valid if this Widget is {@link #config-floating}. The y position for the widget.
             *
             * @config {Number}
             * @default
             * @category Float & align
             */y:null,/**
             * Specifies whether (and optionally in which axes) a Widget may scroll. `true` means this widget
             * may scroll in both axes. May be an object containing boolean `overflowX` and `overflowY` properties which are applied
             * to CSS style properties `overflowX` and `overflowY`. If they are boolean, they are translated
             * to CSS overflow properties thus:
             *
             * *`true` -> `'auto'`
             * *`false` -> `'hidden'`
             *
             * After initialization, this property yields a {@link Common.helper.util.Scroller} which may be used
             * to both set and read scroll information.
             *
             * A Widget uses its `get overflowElement` property to select which element is to be scrollable.
             * By default, in the base `Widget` class, this is the Widget's encapsulating element. Subclasses
             * may implement `get overflowElement` to scroll inner elements.
             * @config {Boolean/Object}
             * @default false
             * @category Scrolling
             */scrollable:null,/**
             * The class to instantiate to use as the {@link #config-scrollable}. Defaults to {@link Common.helper.util.Scroller}.
             * @internal
             * @config {Common.helper.util.Scroller}
             * @category Scrolling
             */scrollerClass:Scroller,/**
             * The name of the property to set when a single value is to be applied to this Widget. Such as when used
             * in a grid WidgetColumn, this is the property to which the column's `field` is applied.
             * @config {String}
             * @default 'html'
             * @category Misc
             */defaultBindProperty:'html',/**
             * Event that should be considered the default action of the widget. When that event is triggered the
             * widget is also expected to trigger an `action` event. Purpose is to allow reacting to most widgets in
             * a coherent way.
             * @private
             * @config {String}
             * @category Misc
             */defaultAction:null,/**
             * Widget's width, used to set element style.width. Either specify a valid width string or a number, which
             * will get 'px' appended. We recommend using CSS as the primary way to control width, but in some cases
             * this config is convenient.
             * @config {String|Number}
             * @category Layout
             */width:null,/**
             * Widget's height, used to set element style.height. Either specify a valid height string or a number, which
             * will get 'px' appended. We recommend using CSS as the primary way to control height, but in some cases
             * this config is convenient.
             * @config {String|Number}
             * @category Layout
             */height:null,// not public, only used by us in docs
scaleToFitWidth:null,allowGrowWidth:true,// only used if scaleToFitWidth is true
/**
             * Widget's margin. This may be configured as a single number or a `TRBL` format string.
             * numeric-only values are interpreted as pixels.
             * @config {Number|String}
             * @category Layout
             */margin:null,/**
             * When this widget is a child of a {@link Common.widget.Container},
             * it will by default be participating in a flexbox layout. This config
             * allows you to set this widget's <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex">flex</a> style.
             * This may be configured as a single number or a `<flex-grow> <flex-shrink> <flex-basis>` format string.
             * numeric-only values are interpreted as the `flex-grow` value.
             * @config {Number|String}
             * @category Layout
             */flex:null,/**
             * When this widget is a child of a {@link Common.widget.Container},
             * it will by default be participating in a flexbox layout. This config
             * allows you to set this widget's <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-self">align-self</a> style.
             * @config {String}
             * @category Layout
             */alignSelf:null,/**
             * Configure as `true` to have the component display a translucent ripple when its
             * {@link #property-focusElement}, or {@link #property-element} is tapped *if the
             * current theme supports ripples*. Out of the box, only the Material theme supports ripples.
             *
             * This may also be a config object containing the following properties:
             *
             *  - `delegate  ` Optional. A CSS selector to filter which child elements trigger ripples. By default
             * the ripple is clipped to the triggering element.
             *  - `color     ` Optional, default = `#000`. A CSS color name or specification.
             *  - `radius    ` Optional, default is 100. The ending radius of the ripple.
             * Note that it will be clipped by the target element by default.
             *  - `clip      ` A string which describes how to clip the ripple if it is not to be clipped to the default
             * element. Either the property of the widget to use as the clipping element, or a selector to
             * allow clipping to the closest matching ancestor to the target element.
             *
             * eg:
             *```
             *    columns  : [{}...],
             *    ripple   : {
             *        color : 'red',
             *        clip  : '.b-grid-row'
             *    },
             *    ...
             *```
             * @config {Boolean|Object}
             * @category Misc
             */ripple:null,/**
             * A title to display for the widget. Only in effect when inside a container that uses it (such as TabPanel)
             * @default
             * @config {String}
             */title:null,localizableProperties:['title'],// Set this flag to require element to have a size to be considered visible
requireSize:false,/**
             * An identifier by which this widget will be registered in the {@link Common.widget.Container#property-widgetMap}
             * of all ancestor containers.
             *
             * If omitted, this widget will be registered using its {@link #config-id}. In most cases `ref` is
             * preferable over `id` since `id` is required to be globally unique while `ref` is not.
             *
             * The `ref` value is also added to the elements dataset, to allow targeting it using CSS etc.
             * @default
             * @config {String}
             */ref:null,/**
             * Configure with true to make widget initially hidden
             * @default false
             * @config {Boolean}
             */hidden:null};}},{key:"floatRoot",get:function get(){var me=this;if(!me._floatRoot){// Reuse any existing floatRoot. There might be one if using multiple product bundles
me._floatRoot=document.querySelector('.b-float-root');if(!me._floatRoot){me._floatRoot=DomHelper.createElement({className:'b-float-root',parent:document.body});}}return me._floatRoot;}}]);return Widget;}(Delayable(Events(Localizable(Base))));exports.Widget=Widget;Widget._$name='Widget';BryntumWidgetAdapterRegister.register('widget',Widget);/**
 * @module Common/widget/Tool
 */ /**
 * Base class for tools.
 *
 * May be configured with a `cls` and a `handler` which is a function (or name of a function)
 * in the owning Panel.
 * @extends Common/widget/Widget
 *
 * @classType tool
 */var Tool=/*#__PURE__*/function(_Widget){_inherits2(Tool,_Widget);function Tool(){_classCallCheck2(this,Tool);return _possibleConstructorReturn2(this,_getPrototypeOf2(Tool).apply(this,arguments));}_createClass2(Tool,[{key:"template",value:function template(){return"<div class=\"b-icon\"></div>";}},{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(Tool.prototype),"construct",this).call(this,config);EventHelper.on({element:this.element,click:'onClick',mousedown:'onMousedown',thisObj:this});}},{key:"onClick",value:function onClick(e){var me=this,panel=me.panel,handler=typeof me.handler==='function'?me.handler:panel[me.handler];if(panel.trigger('toolclick',{tool:me})!==false){handler&&me.callback(handler,panel,[e]);}}},{key:"onMousedown",value:function onMousedown(e){var panel=this.panel,focusEl=panel.focusElement;e.preventDefault();if(focusEl&&document.activeElement!==focusEl){panel.focus();}}},{key:"panel",get:function get(){return this.parent;}}]);return Tool;}(Widget);exports.Tool=Tool;Tool._$name='Tool';BryntumWidgetAdapterRegister.register('tool',Tool);/**
 * @module Common/widget/layout/Layout
 */ /**
  * A helper class used by {@link Common.widget.Container Container}s which renders child widgets to their
  * {@link Common.widget.Widget#property-contentElement}. It also adds the Container's
  * {@link Common.widget.Container#config-itemCls} class to child items.
  *
  * Subclasses may modify the way child widgets are rendered, or may offer APIs for manipulating the child widgets.
  *
  * The {@link Common.widget.layout.Card Card} layout class offers slide-in, slide-out animation of multiple
  * child widgets. {@link Common.widget.TabPanel} uses Card layout.
  */var Layout=/*#__PURE__*/function(_Events4){_inherits2(Layout,_Events4);function Layout(){_classCallCheck2(this,Layout);return _possibleConstructorReturn2(this,_getPrototypeOf2(Layout).apply(this,arguments));}_createClass2(Layout,[{key:"renderChildren",value:function renderChildren(){var owner=this.owner,containerCls=this.containerCls,itemCls=this.itemCls,contentElement=owner.contentElement,items=owner.items,ownerItemCls=owner.itemCls,itemCount=items&&items.length;contentElement.classList.add('b-content-element');if(containerCls){contentElement.classList.add(containerCls);}// Need to check that container has widgets, for example TabPanel can have no tabs
if(itemCount){for(var i=0;i<itemCount;i++){var item=items[i],element=item.element;element.dataset.index=i;if(itemCls){element.classList.add(itemCls);}if(ownerItemCls){element.classList.add(ownerItemCls);}// If instantiated by the app developer, external to Container#createWidget
// a widget will have the b-outer class. Remove that if it' contained.
element.classList.remove('b-outer');item.render(contentElement);}}}/**
     * The owning Widget
     * @property {String} owner
     * @readonly
     */}],[{key:"getLayout",value:function getLayout(layout,owner){if(layout instanceof Layout){return layout;}var isString=typeof layout==='string',config={owner:owner};return new(isString?layoutClasses[layout]:layout)(isString?config:Object.assign(config,layout));}},{key:"registerLayout",value:function registerLayout(cls){var name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:cls.$name.toLowerCase();layoutClasses[name]=cls;}},{key:"defaultConfig",get:function get(){return{/**
             * The CSS class which should be added to the owning {@link Common.widget.Container Container}'s
             * {@link Common.widget.Widget#property-contentElement}.
             */containerCls:null,/**
             * The CSS class which should be added to the encapsulating element of child items.
             */itemCls:null};}}]);return Layout;}(Events(Base));var layoutClasses={default:Layout};Layout._$name='Layout';var lastTouchTime=0;var hasRipple=function hasRipple(w){return w.ripple;},Ripple=window.Ripple=new(/*#__PURE__*/function(_Widget2){_inherits2(Ripple,_Widget2);function Ripple(){_classCallCheck2(this,Ripple);return _possibleConstructorReturn2(this,_getPrototypeOf2(Ripple).apply(this,arguments));}_createClass2(Ripple,[{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(Ripple.prototype),"afterConstruct",this).call(this);EventHelper.on({element:document,DOMContentLoaded:'doEnableDisable',thisObj:this});GlobalEvents.on({theme:'doEnableDisable',thisObj:this});}},{key:"doEnableDisable",value:function doEnableDisable(){var me=this;me.show();var rippleAnimation=DomHelper.getStyleValue(me.circleElement,'animationName');me.hide();// If our theme supports ripples, add our listeners
if(rippleAnimation&&rippleAnimation!=='none'){me.listenerDetacher=EventHelper.on({// Trap all mousedowns and see if the encapsulating Component is configured to ripple
mousedown:{element:document,capture:true,handler:'onDocumentMousedown'},touchstart:{element:document,capture:true,handler:'onDocumentTouchStart'},// Hide at the end of the ripple
animationend:{element:me.circleElement,handler:'onAnimationEnd'},thisObj:me});}// If not, remove them.
else{me.listenerDetacher&&me.listenerDetacher();}}},{key:"onDocumentTouchStart",value:function onDocumentTouchStart(event){lastTouchTime=performance.now();this.handleTriggerEvent(event);}},{key:"onDocumentMousedown",value:function onDocumentMousedown(event){// We need to prevent a touchend->mousedown simulated mousedown from triggering a ripple.
// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent
if(performance.now()-lastTouchTime>200){this.handleTriggerEvent(event);}}},{key:"handleTriggerEvent",value:function handleTriggerEvent(event){var targetWidget=IdHelper.fromElement(event.target,hasRipple);if(targetWidget){var rippleCfg=targetWidget.ripple,target=rippleCfg.delegate?event.target.closest(rippleCfg.delegate):targetWidget.focusElement||targetWidget.element;if(target){var ripple=ObjectHelper.assign({event:event,target:target,radius:this.radius},rippleCfg);// The clip option is specified as a string property name or delegate
if(typeof ripple.clip==='string'){ripple.clip=targetWidget[ripple.clip]||event.target.closest(ripple.clip);// Not inside an instance of the clip delegate, then no ripple
if(!ripple.clip){return;}}this.ripple(ripple);}}}},{key:"ripple",value:function ripple(_ref18){var event=_ref18.event,_ref18$point=_ref18.point,point=_ref18$point===void 0?EventHelper.getClientPoint(event):_ref18$point,_ref18$target=_ref18.target,target=_ref18$target===void 0?event.target:_ref18$target,_ref18$clip=_ref18.clip,clip=_ref18$clip===void 0?target:_ref18$clip,_ref18$radius=_ref18.radius,radius=_ref18$radius===void 0?this.radius:_ref18$radius,_ref18$color=_ref18.color,color=_ref18$color===void 0?this.color:_ref18$color;this.clip=clip;clip=Rectangle.from(clip,null,true);var me=this,centreDelta=clip.getDelta(point),rippleStyle=me.rippleElement.style,circleElement=me.circleElement;me.hide();me.alignTo(clip);rippleStyle.transform="translateX(".concat(centreDelta[0],"px) translateY(").concat(centreDelta[1],"px)");rippleStyle.height=rippleStyle.width="".concat(radius,"px");circleElement.setAttribute('r',radius);circleElement.setAttribute('fill',color);me.show();// Push binding to the scroll position out until the next animation frame.
// This is in case the calling code is going to cause a scroll.
// Mousedown is a focusing gesture which may cause a scroll
// to fire as the target element moves into view.
me.requestAnimationFrame(function(){document.addEventListener('scroll',me.callRealign,true);me.documentScrollListener=true;},0);}},{key:"alignTo",value:function alignTo(clip){if(clip.nodeType===1){clip=Rectangle.from(clip,null,true);}var me=this,_clip=clip,x=_clip.x,y=_clip.y,width=_clip.width,height=_clip.height;me.x=x;me.y=y;me.height=height;me.width=width;}// When fully expanded, it's all over.
},{key:"onAnimationEnd",value:function onAnimationEnd(event){if(event.animationName==='b-ripple-expand'){this.hide();}}},{key:"realign",value:function realign(){if(this.isVisible){this.alignTo(this.clip);}}}],[{key:"defaultConfig",get:function get(){return{old_element:{children:[{className:'b-ripple-inner',reference:'rippleElement'}]},element:{children:[{tag:'svg',class:'b-ripple-inner',reference:'rippleElement',ns:'http://www.w3.org/2000/svg',version:'1.1',viewBox:'0 0 100 100',children:[{reference:'circleElement',tag:'circle',cx:'0',cy:'0',r:10}]}]},floating:true,hideAnimation:false,showAnimation:false,scrollAction:'realign',color:'rgba(0,0,0,.3)',startRadius:10,radius:100};}},{key:"$name",get:function get(){return'Ripple';}}]);return Ripple;}(Widget))();/**
 * @module Common/widget/Container
 */exports.Ripple=Ripple;var emptyObject$1=Object.freeze({});/**
 * Widget that can contain other widgets. Layout is flexbox by default, see the {@link #config-layout} config.
 *
 * @extends Common/widget/Widget
 *
 * @example
 * // create a container with two widgets
 * let container = new Container({
 *   widgets : [
 *     { type : 'text', label : 'Name' },
 *     { type : 'number', label : 'Score' }
 *   ]
 * });
 *
 * @classType container
 * @externalexample widget/Container.js
 */var Container=/*#__PURE__*/function(_Widget3){_inherits2(Container,_Widget3);function Container(){_classCallCheck2(this,Container);return _possibleConstructorReturn2(this,_getPrototypeOf2(Container).apply(this,arguments));}_createClass2(Container,[{key:"setConfig",// TODO: Remove when `widgets` is removed.
value:function setConfig(config,isConstructing){// Assign deprecated widgets to items as early as possible to not have to have special handling in getters/setters
if(config.widgets){config.items=config.widgets;}_get2(_getPrototypeOf2(Container.prototype),"setConfig",this).call(this,config,isConstructing);}},{key:"startConfigure",value:function startConfigure(config){// Set a flag so that code can test for presence of items without tickling
// any initial getter.
var items=this.items;this.hasItems=Boolean(items&&items.length);_get2(_getPrototypeOf2(Container.prototype),"startConfigure",this).call(this,config);}},{key:"processItemsArray",value:function processItemsArray(items,result){var len=items.length;var i,item;for(i=0;i<len;i++){item=items[i];if(!(item instanceof Widget)){item=this.createWidget(item);}else{item.parent=this;}// If the widget creation function returns null, nothing to add
if(item){result.push(item);// Add current item to this and every parent widget map
// cannot use prototype chain here for two reasons:
// 1. performance
// 2. prototypes would require new prototype chain for every branch - not optimal
this.registerReference(item,item.ref||item.id);}}}},{key:"processItemsObject",value:function processItemsObject(items){var namedItems=arguments.length>1&&arguments[1]!==undefined?arguments[1]:emptyObject$1;var result=arguments.length>2?arguments[2]:undefined;var item,ref;for(ref in items){item=items[ref];// It might come in as itemRef : false
if(item){// If this class or instance has a "namedItems" object
// named by this ref, then use it as the basis for the item
if(ref in namedItems){item=_typeof(item)==='object'?ObjectHelper.merge(ObjectHelper.clone(namedItems[ref]),item):namedItems[ref];}// Allow namedItems to be overridden with itemKey : false to indicate unavailability of an item
if(item){if(!(item instanceof Widget)){item=this.createWidget(item);}else{item.parent=this;}// If the widget creation function returns null, nothing to add
if(item){result.push(item);// Add current item to this and every parent widget map
// cannot use prototype chain here for two reasons:
// 1. performance
// 2. prototypes would require new prototype chain for every branch - not optimal
this.registerReference(item,ref);}}}}}},{key:"registerReference",value:function registerReference(item,ref){for(var current=this;current;current=current.parent){if(!current.widgetMap[ref]){current.widgetMap[ref]=item;}}}/**
     * An object which contains a map of descendant widgets keyed by their {@link Common.widget.Widget#config-ref ref}.
     * All descendant widgets will be available in the `widgetMap`.
     * @property {Object}
     * @readonly
     * @typings any
     */},{key:"eachWidget",/**
     * Iterate over all widgets in this container and below.
     *
     * *Note*: Due to this method aborting when the function returns
     * `false`, beware of using short form arrow functions. If the expression
     * executed evaluates to `false`, iteration will terminate.
     * @param {Function} fn A function to execute upon all descendant widgets.
     * Iteration terminates if this function returns `false`.
     * @param {Boolean} [deep=true] Pass as `false` to only consider immediate child widgets.
     */value:function eachWidget(fn){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var widgets=this.items,length=widgets?widgets.length:0;for(var i=0;i<length;i++){var widget=widgets[i];if(fn(widget)===false){return;}if(deep&&widget.eachWidget){widget.eachWidget(fn,deep);}}}/**
     * Returns an array of all descendant widgets which the passed
     * filter function returns `true` for.
     * @param {Function} filter A function which, when passed a widget,
     * returns `true` to include the widget in the results.
     * @returns {Common.widget.Widget[]} All matching descendant widgets.
     */},{key:"queryAll",value:function queryAll(filter){var result=[];this.eachWidget(function(w){if(filter(w)){result.push(w);}});return result;}/**
     * Returns the first descendant widgets which the passed
     * filter function returns `true` for.
     * @param {Function} filter A function which, when passed a widget,
     * returns `true` to return the widget as the sole result.
     * @returns {Common.widget.Widget} The first matching descendant widget.
     */},{key:"query",value:function query(filter){var result=null;this.eachWidget(function(w){if(filter(w)){result=w;return false;}});return result;}/**
     * Returns a directly contained widget by id
     * @param {String} id The widget id
     * @returns {Common.widget.Widget}
     */},{key:"getWidgetById",value:function getWidgetById(id){return this.widgetMap[id];}/**
     * This function is called prior to creating widgets, override it in subclasses to allow containers to modify the
     * configuration of each widget. When adding a widget to a container hierarchy each parent containers
     * `processWidgetConfig` will be called. Returning false from the function prevents the widget from being added at
     * all.
     */},{key:"processWidgetConfig",value:function processWidgetConfig(widget){}/**
     * This function converts a Widget config object into a Widget.
     * @param {Object} widget A Widget config object.
     * @internal
     */},{key:"createWidget",value:function createWidget(widget){var me=this;if(!widget.type){widget.type=me.defaultType;}// A contained Widget must know its parent, and knowing it during construction
// is important, but me must not mutate incoming config objects.
widget=Object.setPrototypeOf({parent:me},widget);var ancestor=widget;while(ancestor=ancestor.parent){if(ancestor.processWidgetConfig(widget)===false){return null;}}if(me.trigger('beforeWidgetCreate',{widget:widget})===false){return null;}return WidgetHelper.createWidget(ObjectHelper.assign({},me.defaults,widget),me.defaultType||'widget');}},{key:"render",value:function render(appendToElement){// Outer container has to be in place first.
// Pass triggerPaint as false, as when contained, the outermost
// container calls that at the end of its render
var result=_get2(_getPrototypeOf2(Container.prototype),"render",this).call(this,appendToElement,false);this.layout.renderChildren();// The outermost container must trigger paint after all children have
// been rendered, and this cascades down through all descendants.
if(!this.parent){this.triggerPaint();}return result;}},{key:"doDestroy",value:function doDestroy(){// Only destroy the widgets if they have been instanced.
if(!this._itemsInvalid&&this.items){this.items.forEach(function(widget){return widget.destroy&&widget.destroy();});}_get2(_getPrototypeOf2(Container.prototype),"doDestroy",this).call(this);}},{key:"widgets",set:function set(widgets){console.warn('`widgets` was deprecated in 2.1, please change your code to use `items`');// Does nothing on purpose
},get:function get(){console.warn('`widgets` was deprecated in 2.1, please change your code to use `items`');return this.items;}},{key:"items",set:function set(items){this._items=items;this._itemsInvalid=this.itemsInitialized=true;}/**
     * The array of instantiated child Widgets.
     * @property {Common.widget.Widget[]}
     * @readonly
     */,get:function get(){var me=this,items=me._items;// _widgetMap must exist even if there are no items because of other widget containment
// situations such as docked toolbars.
if(!me._widgetMap){me._widgetMap={};}// Only convert the widget config objects into widgets
// when we first access the widgets. This is more efficient
// if this Container is never rendered.
if(me._itemsInvalid){var instancedItems=me._items=[];if(Array.isArray(items)){me.processItemsArray(items,instancedItems);}else if(items){me.processItemsObject(items,me.namedItems,instancedItems);}// Allow child items to have a weight to establish their order
if(instancedItems.some(function(i){return i.weight;})){instancedItems.sort(function(a,b){return(a.weight||0)-(b.weight||0);});}me._itemsInvalid=false;}return me._items;}},{key:"widgetMap",get:function get(){// Force evaluation of the widgets array by the getter
// so that configs are promoted to widgets and the widgetMap
// is created, and if there are widgets, populated.
if(!this._widgetMap){this._thisIsAUsedExpression(this.items);}return this._widgetMap;}},{key:"record",set:function set(record){var me=this,widgets=me.queryAll(function(w){return w.name;}),len=widgets.length,cl=me.element.classList;// Though we set highlightExternalChange on the widgets we change
// the value of, onChange listeners may update others, so inhibit
// field update highlighting at the CSS level.
cl.add('b-form-updating');for(var i=0;i<len;i++){var widget=widgets[i],name=widget.name,hec=widget.highlightExternalChange;// Don't want a field highlight on mass change
widget.highlightExternalChange=false;// Setting record to null clears values
if(!record&&name){widget.value=null;}else if(record&&name in record){widget.value=record[name];}widget.highlightExternalChange=hec;}me.setTimeout(function(){return cl.remove('b-form-updating');},1500);me._record=record;}/**
     * The {@link Common.data.Model record} to be applied to the fields contained in this Container.
     * Any descendant widgets of this Container with a `name` property will have its value set to the
     * value of that named property of the record. If no record is passed, the widget has its value
     * set to `null`.
     * @property {Common.data.Model}
     */,get:function get(){return this._record;}/**
     * Sets multiple flexbox settings which affect how child widgets are arranged.
     *
     * By default, Containers use flexbox layout, so this property
     * may contain the following properties:
     *
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction">flexDirection</a> default '`row`'
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap">flexWrap</a>
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow">flexFlow</a>
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">justifyContent</a>
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">alignItems</a>
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content">alignContent</a>
     * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-content">placeContent</a>
     * @property {Object}
     * @category Layout
     */},{key:"layoutStyle",set:function set(layoutStyle){DomHelper.applyStyle(this.contentElement,layoutStyle);this._layoutStyle=layoutStyle;},get:function get(){return this._layoutStyle;}},{key:"layout",set:function set(layout){this._layout=Layout.getLayout(layout,this);},get:function get(){return this._layout||(this._layout=new Layout());}},{key:"focusElement",get:function get(){var firstFocusable=this.query(this.defaultFocus||function(w){return w.focusElement;});if(firstFocusable){return firstFocusable.focusElement;}return _get2(_getPrototypeOf2(Container.prototype),"focusElement",this);}}],[{key:"defaultConfig",get:function get(){return{/**
             * An array of Widgets or typed Widget config objects.
             *
             * If configured as an Object, the property names are used as the child component's
             * {@link Common.widget.Widget#config-ref ref} name, and the value is the child component's config object.
             *
             * '''javascript
             *  new Panel({
             *      title    : 'Test Panel',
             *      floating : true,
             *      centered : true,
             *      width    : 600,
             *      height   : 400,
             *      layout   : 'fit',
             *      items    : {
             *          tabs : {
             *              type : 'tabpanel',
             *              items : {
             *                  general : {
             *                      title : 'General',
             *                      html  : 'General content'
             *                  },
             *                  details : {
             *                      title : 'Details',
             *                      html  : 'Details content'
             *                  }
             *              }
             *          }
             *      }
             *  }).show();```
             *
             * @config {Object[]|Common.widget.Widget[]|Object}
             */items:null,/**
             * Synonym for the {@link #config-items} config option.
             * @config {Object[]|Common.widget.Widget[]|Object}
             * @deprecated 2.1
             */widgets:null,/**
             * A config object containing default settings to apply to all child widgets.
             * @config {Object}
             */defaults:null,defaultType:'widget',/**
             * The CSS style properties to apply to the {@link Common.widget.Widget#property-contentElement}.
             *
             * By default, a Container's {@link Common.widget.Widget#property-contentElement} uses flexbox layout, so this config
             * may contain the following properties:
             *
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction">flexDirection</a> default '`row`'
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap">flexWrap</a>
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow">flexFlow</a>
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content">justifyContent</a>
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items">alignItems</a>
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content">alignContent</a>
             * - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/place-content">placeContent</a>
             * @config {Object}
             */layoutStyle:null,/**
             * An optional CSS class to add to child items of this container.
             * @config {String}
             */itemCls:null,/**
             * The short name of a helper class which manages rendering and styling of child items.
             *
             * By default, the only special processing that is applied is that the Container class's
             * {@link #config-itemCls} is added to child items.
             *
             * Containers use CSS flexbox in its default configuration to arrange child items. You may either
             * use the {@link #config-layoutStyle} configuration to tune how child items are layed out,
             * or use one of the built in helper classes which include:
             *
             *  - `card` Child items are displayed one at a time, size to fit the {@link Common.widget.Widget#property-contentElement}
             * and are slid in from the side when activated.
             * @config {String}
             */layout:'default',/**
             * An object containing named config objects which may be referenced by name in any {@link #config-items}
             * object. For example, a specialized {@link Common.widget.Menu Menu} subclass may have a `namedItems`
             * default value defined like this:
             *
             * ```javascript
             *  namedItems : {
             *      removeRow : {
             *          text : 'Remove row',
             *          onItem() {
             *              this.ownerGrid.remove(this.ownerGrid.selectedRecord);
             *          }
             *      }
             *  }
             * ```
             *
             * Then whenever that subclass is instantiated and configured with an {@link #config-items}
             * object, the items may be configured like this:
             *
             * ```javascript
             *  items : {
             *      removeRow : true,   // The referenced namedItem will be applied to this
             *      otherItemRef : {
             *          text : 'Option 2',
             *          onItem() {
             *          }
             *      }
             * }
             * ```
             * @config {Object}
             */namedItems:null};}}]);return Container;}(Widget);exports.Container=Container;Container._$name='Container';BryntumWidgetAdapterRegister.register('container',Container);/**
 * @module Common/widget/Toolbar
 */ /**
 * Widget that is themed to contain Buttons which is docked to the bottom or top of
 * a {@link Common.widget.Panel Panel}.
 *
 * ```javascript
 * // create a toolbar with two buttons
 * let container = new Toolbar({
 *   items : [
 *     { text : 'Add' },
 *     { text : 'Delete' }
 *   ]
 * });
 * ```
 *
 * @extends Common/widget/Container
 * @classType toolbar
 */var Toolbar=/*#__PURE__*/function(_Container){_inherits2(Toolbar,_Container);function Toolbar(){_classCallCheck2(this,Toolbar);return _possibleConstructorReturn2(this,_getPrototypeOf2(Toolbar).apply(this,arguments));}_createClass2(Toolbar,[{key:"createWidget",value:function createWidget(widget){if(widget==='->'){widget={cls:'b-toolbar-fill'};}return _get2(_getPrototypeOf2(Toolbar.prototype),"createWidget",this).call(this,widget);}}],[{key:"defaultConfig",get:function get(){return{defaultType:'button',layout:'default'};}}]);return Toolbar;}(Container);exports.Toolbar=Toolbar;Toolbar._$name='Toolbar';BryntumWidgetAdapterRegister.register('toolbar',Toolbar);/**
 * @module Common/widget/Panel
 */var acceptNode=function acceptNode(e){return!e.classList.contains('b-focus-trap')&&DomHelper.isFocusable(e)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP;},byWeight=function byWeight(l,r){return(l.weight||0)-(r.weight||0);},byWeightReverse=function byWeightReverse(l,r){return(r.weight||0)-(l.weight||0);};// https://github.com/webcomponents/webcomponentsjs/issues/556
// Work around Internet Explorer wanting a function instead of an object.
// IE also *requires* this argument where other browsers don't.
acceptNode.acceptNode=acceptNode;/**
 * Panel widget. A general pupose container which may be used to contain child {@link Common.widget.Container#config-items}
 * or {@link Common.widget.Widget#config-html}.
 *
 * Also may dock a {@link #config-header} and {@link #config-footer} either at top/bottom or left/right
 *
 * @extends Common/widget/Container
 *
 * @example
 * let panel = new Panel({
 *   title   : 'A Test Panel',
 *   widgets : [
 *     { type : 'text', placeholder: 'Text' },
 *   ],
 *   bbar : [{
 *     text : 'Proceed',
 *     onClick : () => {
 *       alert('Proceeding!');
 *     }
 *   }]
 * });
 *
 * @classType panel
 */var Panel=/*#__PURE__*/function(_Container2){_inherits2(Panel,_Container2);function Panel(){_classCallCheck2(this,Panel);return _possibleConstructorReturn2(this,_getPrototypeOf2(Panel).apply(this,arguments));}_createClass2(Panel,[{key:"eachWidget",// Override to iterate docked Toolbars in the correct order around
// contained widgets.
value:function eachWidget(fn){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,widgets=me.items?me.items.slice():[];if(me.tools){widgets.unshift.apply(widgets,_toConsumableArray(Object.values(me.tools)));}if(me.tbar){widgets.unshift(me.tbar);}if(me.bbar){widgets.push(me.bbar);}for(var i=0;i<widgets.length;i++){var widget=widgets[i];if(fn(widget)===false){return;}if(deep&&widget.eachWidget){widget.eachWidget(fn,deep);}}}/**
     * The tool Widgets as specified by the {@link #config-tools} configuration
     * (and the {@link Common.widget.Popup#config-closable} configuration in the Popup subclass).
     * Each is a {@link Common.widget.Widget Widget} instance which may be hidden, shown and observed and styled just like any other widget.
     * @property {Object}
     */},{key:"onFocusTrapped",value:function onFocusTrapped(e){var me=this,treeWalker=me.treeWalker;// The only way of focusing these invisible elements is by TABbing to them.
// If we hit the bottom one, wrap to the top.
if(e.target===me.bottomFocusTrap){treeWalker.currentNode=me.topFocusTrap;treeWalker.nextNode();}// If we hit the top one, wrap to the bottom.
else{treeWalker.currentNode=me.bottomFocusTrap;treeWalker.previousNode();}me.requestAnimationFrame(function(){return treeWalker.currentNode.focus();});}},{key:"doDestroy",//endregion
value:function doDestroy(){// Only destroy the widgets if they have been instanced.
if(this.tbar){this.tbar.destroy();}if(this.bbar){this.bbar.destroy();}_get2(_getPrototypeOf2(Panel.prototype),"doDestroy",this).call(this);}},{key:"element",//endregion
/**
     * A header {@link #config-tools tool} has been clicked.
     * @event toolclick
     * @param {Common.widget.Tool} source - This Panel.
     * @param {Common.widget.Tool} tool - The tool which is being clicked.
     */ //region Init & destroy
set:function set(element){var me=this,headerFromTitle=me.title&&(!me.parent||!me.parent.suppressChildHeaders),// If tools exist, we need to create the header infrastructure
header=me.header||(me.tools||headerFromTitle?{}:null),footer=me.footer,title=header&&(typeof header==='string'?header:me.title||header.title),titleAlign=header&&(header.titleAlign||'start'),headerClass=me.classHierarchy(Panel).map(function(cls){return"b-".concat(cls.$name.toLowerCase(),"-header");}).join(' '),tbar=me.tbar,bbar=me.bbar||me.buttons,children=[{reference:'topFocusTrap',className:'b-focus-trap',tabIndex:0}],startTools=[],endTools=[],result={children:children};if(me.hasItems||me.focusable){result.tabIndex=0;}if(header){var headerChildren=[{reference:'titleElement',className:'b-header-title',style:"text-align:".concat(titleAlign),html:title}];for(var toolRef in me.tools){var tool=me.tools[toolRef];if(tool.align==='start'){startTools.unshift(tool);}else{endTools.push(tool);}}// The tools at each end are sorted "gravitationally".
// Higher weight sorts towards the center which is the title element.
startTools.sort(byWeight);endTools.sort(byWeightReverse);headerChildren.unshift.apply(headerChildren,_toConsumableArray(startTools.map(function(t){return t.element;})));headerChildren.push.apply(headerChildren,_toConsumableArray(endTools.map(function(t){return t.element;})));children.push({tag:'header',reference:'headerElement',className:"".concat(headerClass," b-dock-").concat(header.dock||'top'," ").concat(header.cls||''),children:headerChildren});}if(tbar){tbar.layout.renderChildren();children.push(tbar.element);}children.push(me.bodyConfig);if(bbar){bbar.layout.renderChildren();children.push(bbar.element);}if(footer){children.push({tag:'footer',reference:'footerElement',className:"".concat(headerClass," b-dock-").concat(footer.dock||'bottom'," ").concat(footer.cls||'')});}children.push({reference:'bottomFocusTrap',className:'b-focus-trap',tabIndex:0});_set(_getPrototypeOf2(Panel.prototype),"element",result,this,true);},get:function get(){return _get2(_getPrototypeOf2(Panel.prototype),"element",this);}},{key:"bodyConfig",set:function set(bodyConfig){this._bodyConfig=bodyConfig;},get:function get(){return this._bodyConfig||{reference:'bodyElement',className:this.classHierarchy(Panel).map(function(cls){return"b-".concat(cls.$name.toLowerCase(),"-content");}).join(' '),html:this.html};}},{key:"tbar",set:function set(tbar){if(tbar instanceof Toolbar){tbar.parent=this;}else{if(Array.isArray(tbar)){tbar={items:tbar};}tbar=new Toolbar(Object.assign({parent:this},tbar));}tbar.element.classList.add('b-top-toolbar',"b-dock-".concat(tbar.dock||'top'));this._tbar=tbar;},get:function get(){return this._tbar;}},{key:"bbar",set:function set(bbar){if(bbar instanceof Toolbar){bbar.parent=this;}else{if(Array.isArray(bbar)){bbar={items:bbar};}bbar=new Toolbar(Object.assign({parent:this},bbar));}bbar.element.classList.add('b-bottom-toolbar',"b-dock-".concat(bbar.dock||'bottom'));this._bbar=bbar;},get:function get(){return this._bbar;}},{key:"tools",set:function set(tools){var me=this,myTools=me._tools={};for(var toolRef in tools){var tool=myTools[toolRef]=WidgetHelper.createWidget(ObjectHelper.assign({type:'tool',ref:toolRef,//@nige: Widget defines ref but not reference, typo?
reference:toolRef,parent:me},tools[toolRef]),me.defaultToolType||'tool');me.registerReference(tool,tool.ref);}},get:function get(){return this._tools;}},{key:"trapFocus",set:function set(trapFocus){var me=this;me.element.classList[trapFocus?'add':'remove']('b-focus-trapped');if(trapFocus){me.focusTrapListener=EventHelper.on({element:me.element,focusin:'onFocusTrapped',delegate:'.b-focus-trap',thisObj:me});// Create a TreeWalker which visits focusable elements.
if(!me.treeWalker){me.treeWalker=document.createTreeWalker(me.element,NodeFilter.SHOW_ELEMENT,acceptNode,false);}}else{if(me.focusTrapListener){me.focusTrapListener();me.focusTrapListener=null;}}me._trapFocus=trapFocus;},get:function get(){return this._trapFocus;}},{key:"focusElement",get:function get(){// Either use our Containerness to yield the focus element of
// a descendant or fall back to the encapsulating element.
return this.hasItems&&(_get2(_getPrototypeOf2(Panel.prototype),"focusElement",this)||this.element);}},{key:"contentElement",get:function get(){return this.element&&this.bodyElement;}},{key:"widgetClassList",get:function get(){var me=this,result=_get2(_getPrototypeOf2(Panel.prototype),"widgetClassList",this),header=me.header;if(header||me.title||me.tools){result.push("b-panel-has-header b-header-dock-".concat(header&&header.dock||'top'));}if(me.tbar){result.push("b-panel-has-top-toolbar");}if(me.bbar){result.push("b-panel-has-bottom-toolbar");}return result;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * By default, tabbing within a Panel is not contained, ie you can TAB out of the Panel
             * forwards or backwards.
             * Configure this as `true` to disallow tabbing out of the Panel, and make tabbing circular within this Panel.
             * @config {Boolean}
             * @default false
             */trapFocus:null,/**
             * A title to display in the header. Causes creation and docking of a header
             * to the top if no header is configured.
             *
             * If specified, overrides any title configured within the {@link #config-header} configuration.
             * @default
             * @config {String}
             */title:null,/**
             * Config object of a header. May contain a `title`, `titleAlign`, `dock`
             * and a `cls` property. If passed as a string, the value is used
             * as the title, dock is defaulted to `'top', and titleAlign` is defaulted to `start`.
             *
             * The `dock` property may be `top`, `right`, `bottom` or `left`.
             * The `titleAlign` property may be `start`, `center` or `end`.
             * @default
             * @config {Object|String}
             */header:null,/**
             * Config object of a footer. May contain a `dock`
             * and a `cls` property.
             *
             * The `dock` property may be `top`, `right`, `bottom` or `left`.
             * @default
             * @config {Object|String}
             */footer:null,/**
             * The tools to add either before or after the title in the Panel header.
             * Each property name is the reference by which an instantiated Tool Widget
             * may be retrieved from the live `{@link #property-tools}` property.
             * Each tool may have the following properties:
             * * `cls` The CSS class to apply.
             * * `handler` A method in the field to call upon click
             * * `align` `'start'` or `'end'` which end of the header the tool should go.
             * * `weight` (Optional) Heigher weighted tools gravitate towards the centre.
             * @config {Object}
             */tools:null,/**
             * A Config object representing the configuration of a {@link Common.widget.Toolbar},
             * or array of config objects representing the child items of a Toolbar.
             *
             * This creates a toolbar docked to the top of the panel immediately below the header.
             * @config {Object[]|Object}
             */tbar:null,/**
             * A Config object representing the configuration of a {@link Common.widget.Toolbar},
             * or array of config objects representing the child items of a Toolbar.
             *
             * This creates a toolbar docked to the bottom of the panel immediately above the footer.
             * @config {Object[]|Object}
             */bbar:null};}}]);return Panel;}(Container);exports.Panel=Panel;Panel._$name='Panel';BryntumWidgetAdapterRegister.register('panel',Panel);/**
 * @module Common/widget/Popup
 */ /**
 * Popup widget, used as base class for Menu but can also be used as is to contain widgets or html
 *
 * @extends Common/widget/Panel
 *
 * @example
 * let popup = new Popup({
 *   forElement : document.querySelector('button'),
 *   widgets    : [
 *     { type : 'text', placeholder: 'Text' },
 *     { type: 'button', text: 'Okey', style: 'width: 100%', color: 'orange'}
 *   ]
 * });
 *
 * @classType popup
 * @externalexample widget/Popup.js
 */var Popup=/*#__PURE__*/function(_Panel){_inherits2(Popup,_Panel);function Popup(){_classCallCheck2(this,Popup);return _possibleConstructorReturn2(this,_getPrototypeOf2(Popup).apply(this,arguments));}_createClass2(Popup,[{key:"startConfigure",//endregion
value:function startConfigure(config){// Read the closable config which will force evaluation of tools
// to include close tool.
this._thisIsAUsedExpression(this.closable);_get2(_getPrototypeOf2(Popup.prototype),"startConfigure",this).call(this,config);}//region Init & destroy
},{key:"finalizeInit",value:function finalizeInit(){var me=this;me.anchoredTo=me.forElement;me.initialAnchor=me.anchor;if(me.forElement&&me.showOnClick){// disable autoShow if not enabled by config
if(!me.initialConfig.autoShow){me.autoShow=false;}EventHelper.on({element:me.forElement,click:'onElementUserAction',thisObj:me});}_get2(_getPrototypeOf2(Popup.prototype),"finalizeInit",this).call(this);if(me.autoShow){if(me.autoShow===true){me.show();}else{me.setTimeout(function(){return me.show();},me.autoShow);}}}//endregion
//region Show/hide
/**
     * Performs the configured {@link #config-closeAction} upon this popup.
     * By default, the popup hides. The {@link #config-closeAction} may be
     * configured as `'destroy'`.
     * @fires beforeclose If popup is not hidden
     */},{key:"close",value:function close(){/**
         * Fired when the {@link #function-close} method is called and the popup is not hidden.
         * May be vetoed by returning `false` from a handler.
         * @event beforeClose
         * @param {Common.widget.Popup} source - This Popup
         */if(!this._hidden&&this.trigger('beforeClose')!==false||// we should destroy it even if it's hidden just omit beforeclose event
this._hidden&&this.closeAction=='destroy'){return this[this.closeAction]();}}//endregion
//region Events
},{key:"onElementResize",value:function onElementResize(resizedElement,lastRect,myRect){var me=this,lastAlignSpec=me.lastAlignSpec;// If this Popup changes size while we are aligned and we are aligned to
// a target (not a position), then we might need to realign.
if(me.isVisible&&lastAlignSpec&&lastAlignSpec.target){var heightChange=!lastRect||myRect.height!==lastRect.height,widthChange=!lastRect||myRect.width!==lastRect.width;// Only realign if:
// the height has changed and we are not aligned below, or
// the width has changed and we are not aligned to the right.
if(heightChange&&lastAlignSpec.zone!==2||widthChange&&lastAlignSpec.zone!==1){// Must move to next AF because in Chrome, the resize monitor might fire
// before the element is painted and the anchor color matching
// scheme cannot work in that case.
me.requestAnimationFrame(function(){return me.realign();});}}_get2(_getPrototypeOf2(Popup.prototype),"onElementResize",this).call(this,resizedElement);}},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){// close on escape key
if(event.key==='Escape'){event.stopImmediatePropagation();this.close(true);}}},{key:"onDocumentMouseDown",value:function onDocumentMouseDown(_ref19){var event=_ref19.event;var me=this;if(me.modal&&event.target===Popup.modalMask){event.preventDefault();if(me.modal.closeOnMaskTap){me.close();}else if(!me.containsFocus){me.focus();}}// in case of outside click and if popup is focused, focusout will trigger closing
else if(!me.owns(event.target)&&me.autoClose&&!me.containsFocus){me.close();}}},{key:"onFocusIn",value:function onFocusIn(e){var activeEl=document.activeElement;_get2(_getPrototypeOf2(Popup.prototype),"onFocusIn",this).call(this,e);// No event handler has moved focus, and target is outermost el
// then delegate to the focusElement which for a Container
// is found by finding the first visible, focusable descendant widget.
if(document.activeElement===activeEl&&e.target===this.element){this.focus();}}},{key:"onFocusOut",value:function onFocusOut(e){if(this.autoClose){this.close();}_get2(_getPrototypeOf2(Popup.prototype),"onFocusOut",this).call(this,e);}},{key:"onShow",value:function onShow(){var me=this;if(me.autoClose&&!me.mouseDownRemover){me.mouseDownRemover=GlobalEvents.on({globaltap:'onDocumentMouseDown',thisObj:me});}// TODO: It's the floating "toFront" operation that should handle
// focusing based on config focusOnToFront.
if(me.focusOnToFront){me.focus();}_get2(_getPrototypeOf2(Popup.prototype),"onShow",this)&&_get2(_getPrototypeOf2(Popup.prototype),"onShow",this).call(this);// Insert the modal mask below this Popup
if(me.modal){// If we have not been explicitly positioned, a modal is centered.
if(!me._x&&!me._y){me.centered=true;}var modalMask=Popup.modalMask;modalMask.classList.remove('b-hide-display');modalMask.parentNode.insertBefore(modalMask,me.element);}}},{key:"onHide",value:function onHide(){var me=this;if(me.mouseDownRemover){me.mouseDownRemover();me.mouseDownRemover=null;}_get2(_getPrototypeOf2(Popup.prototype),"onHide",this)&&_get2(_getPrototypeOf2(Popup.prototype),"onHide",this).call(this);// Hide the modal mask.
if(me.modal){Popup.modalMask.classList.add('b-hide-display');}}},{key:"onElementUserAction",value:function onElementUserAction(){this.show();}//endregion
},{key:"closable",set:function set(closable){this._closable=closable;if(!this.tools){this.tools={};}},get:function get(){return this._closable;}},{key:"tools",set:function set(tools){var me=this;if(me.closable){(tools||(tools={})).close={cls:'b-popup-close',handler:'close',weight:-1000};}_set(_getPrototypeOf2(Popup.prototype),"tools",tools,this,true);},get:function get(){return _get2(_getPrototypeOf2(Popup.prototype),"tools",this);}}],[{key:"defaultConfig",//region Config
get:function get(){return{autoShow:true,/**
             * By default a Popup is transient, and will {@link #function-close} when the user clicks or
             * taps outside its owned widgets and when focus moves outside its owned widgets.
             *
             * Configure as `false` to make a Popup non-transient.
             * @config {Boolean}
             * @default
             */autoClose:true,/**
             * Show popup when user clicks the element that it is anchored to. Cannot be combined with showOnHover
             * @config {Boolean}
             * @default
             */showOnClick:false,forElement:null,monitorResize:true,floating:true,hidden:true,axisLock:true,// Flip edges if align violates constrainTo
hideAnimation:BrowserHelper.isIE11?null:{opacity:{from:1,to:0,duration:'.3s',delay:'0s'}},showAnimation:BrowserHelper.isIE11?null:{opacity:{from:0,to:1,duration:'.4s',delay:'0s'}},/**
             * The action to take when calling the {@link #function-close} method.
             * By default, the popup is hidden.
             *
             * This may be set to `'destroy'` to destroy the popup upon close.
             * @config {String}
             * @default
             */closeAction:'hide',/**
             * By default, tabbing within a Popup is circular - that is it does not exit.
             * Configure this as `false` to allow tabbing out of the Popup.
             * @config {Boolean}
             * @default
             */trapFocus:true,/**
             * By default a Popup is focused when it is shown.
             * Configure this as `false` to prevent automatic focus on show.
             * @config {Boolean}
             * @default
             */focusOnToFront:true,/**
             * Show a tool in the header to close this Popup, and allow `ESC` close it.
             * The tool is available in the {@link #property-tools} object
             * under the name `close`. It uses the CSS class `b-popup-close` to apply a
             * default close icon. This may be customized with your own CSS rules.
             * @config {Boolean}
             * @default
             */closable:null,/**
             * Optionally show an opaque mask below this Popup when shown.
             * Configure this as `true` to show the mask.
             *
             * When a Popup is modal, it defaults to being {@link Common.widget.Widget#config-centered centered}
             *
             * May also be an object containing the following properties:
             * * `closeOnMaskTap` Specify as `true` to {@link #function-close} when mask is tapped.
             * The default action is to focus the popup.
             *
             * Usage:
             * ```javascript
             * new Popup({
             *     title  : 'I am modal',
             *     modal  : {
             *         closeOnMaskTap : true
             *     },
             *     height : 100,
             *     width  : 200
             * });
             * ```
             *
             * @config {Boolean}
             * @default
             */modal:null};}},{key:"modalMask",get:function get(){if(!this._modalMask){this._modalMask=DomHelper.createElement({className:'b-modal-mask b-hide-display',parent:this.floatRoot});}return this._modalMask;}}]);return Popup;}(Panel);exports.Popup=Popup;Popup._$name='Popup';BryntumWidgetAdapterRegister.register('popup',Popup);/**
 * @module Common/helper/TemplateHelper
 */var tagSpaceRe=/>[ \t\r\n]+</g,multiSpaceRe=/\s\s+/g;/**
 * Helper for template strings, use as tag function
 * @example
 * TemplateHelper.tpl`...`
 * @internal
 */var TemplateHelper=/*#__PURE__*/function(){function TemplateHelper(){_classCallCheck2(this,TemplateHelper);}_createClass2(TemplateHelper,null,[{key:"tpl",/**
     * Tag function for template literals that does some basic cleanup
     * @private
     */value:function tpl(strings){for(var _len23=arguments.length,values=new Array(_len23>1?_len23-1:0),_key23=1;_key23<_len23;_key23++){values[_key23-1]=arguments[_key23];}var count=0,output=values.map(function(val,i){// TODO: pad output nicely instead of just trimming away
var ret=strings[i];if(Array.isArray(val)){ret+=val.reduce(function(ack,item){return ack+=(typeof item==='string'?item.trim():item)+'\n';},'');}else{if(val===undefined){val='';}ret+=typeof val==='string'?val.trim():val;}count++;return ret;}).join('');if(count<=strings.length){output+=strings[strings.length-1];}// Excise unnecessary *soft* whitespace textNodes. We cannot use \s because that
// matches non-breaking spaces which need to be preserved.
// Also reduce any usage of multiple spaces to single, since they have no value in html
return output.replace(tagSpaceRe,'><').replace(multiSpaceRe,' ').trim();}/**
     * Tag function for template literals that does some basic cleanup. Version for docs that do not remove blank space,
     * to keep code snippets formatting intact.
     * @private
     */},{key:"docsTpl",value:function docsTpl(strings){for(var _len24=arguments.length,values=new Array(_len24>1?_len24-1:0),_key24=1;_key24<_len24;_key24++){values[_key24-1]=arguments[_key24];}var count=0,output=values.map(function(val,i){// TODO: pad output nicely instead of just trimming away
var str=strings[i],ret=str;if(Array.isArray(val)){ret+=val.reduce(function(ack,item){return ack+=(typeof item==='string'?item.trim():item)+'\n';},'');}else{if(val===undefined){val='';}ret+=typeof val==='string'?val.trim():val;}count++;return ret;}).join('');if(count<=strings.length){output+=strings[strings.length-1];}// Excise unnecessary *soft* whitespace textNodes. We cannot use \s because that
// matches non-breaking spaces which need to be preserved.
return output.replace(tagSpaceRe,'><').trim();}},{key:"repeat",value:function repeat(times){return function(){return TemplateHelper.tpl.apply(TemplateHelper,arguments).repeat(times);};}},{key:"loop",value:function loop(times){}}]);return TemplateHelper;}();exports.TemplateHelper=TemplateHelper;TemplateHelper._$name='TemplateHelper';/**
 * @module Common/widget/MenuItem
 */var bIcon=/^b-icon-/,bFa=/^b-fa-/;/**
 * Menu item widget, encapsulates a menu item within a Menu.
 *
 * May be configured with a {@link #config-checked} state which creates
 * a checkbox which may bwe toggled.
 *
 * Fires events when activated which bubble up through the parent hierachy
 * and may be listened for on an ancestor. See {@link Common.widget.Menu Menu}
 * for more details on usage.
 *
 * @extends Common/widget/Widget
 *
 * @classType menuitem
 */var MenuItem=/*#__PURE__*/function(_Widget4){_inherits2(MenuItem,_Widget4);function MenuItem(){_classCallCheck2(this,MenuItem);return _possibleConstructorReturn2(this,_getPrototypeOf2(MenuItem).apply(this,arguments));}_createClass2(MenuItem,[{key:"doAction",/**
     * Actions this item. Fires the {@link #event-item} event, and if this
     * if a {@link #config-checked} item, toggles the checked state, firing
     * the {@link #event-toggle} event.
     */value:function doAction(event){var item=this,menu=this.parent,itemEvent={menu:menu,item:item,element:item.element,bubbles:true};if(typeof item.checked==='boolean'){item.checked=!item.checked;}// Give internal handlers a chance to inject extra information before
// user-supplied "item" handlers see the event.
// Scheduler's ContextMenu feature does this
item.trigger('beforeItem',itemEvent);/**
         * This menu item has been activated.
         *
         * Note that this event bubbles up through parents and can be
         * listened for on a top level {@link Common.widget.Menu Menu} for convenience.
         * @event item
         * @param {Common.widget.MenuItem} item - The menu item which is being actioned.
         * @param {Common.widget.Menu} menu - Menu containing the menu item
         */item.trigger('item',itemEvent);// Collapse the owning menu hierarchy if configured to do so
if(item.closeParent&&menu){menu.rootMenu.close();// Don't prevent links doing their thing
if(event&&!item.href){event.preventDefault();}}}},{key:"doDestroy",value:function doDestroy(){var menu=this._menu;if(menu instanceof Widget){menu.destroy();}_get2(_getPrototypeOf2(MenuItem.prototype),"doDestroy",this).call(this);}},{key:"template",value:function template(me){var icon=me.icon||(typeof me.checked==='boolean'?"b-fw-icon b-icon-".concat(me.checked?'':'un',"checked"):''),iconExtraCls=bIcon.test(icon)?' b-icon':bFa.test(icon)?' b-fa':'',tag=me.href?'a':'div';return TemplateHelper.tpl(_templateObject(),tag,tag==='a'?"href=\"".concat(me.href,"\""):'',tag==='a'&&me.target?"target=\"".concat(me.target,"\""):'',me.hasMenu?'b-has-submenu':'',me.name?"data-name=\"".concat(me.name,"\""):'',icon?"<i class=\"b-menuitem-icon ".concat(icon).concat(iconExtraCls,"\" reference=\"iconElement\"></i>"):'',me.text,me.hasMenu?'<i class="b-fw-icon b-icon-sub-menu" reference="subMenuIcon"></i>':'',tag);}},{key:"onFocusIn",value:function onFocusIn(e){_get2(_getPrototypeOf2(MenuItem.prototype),"onFocusIn",this).call(this,e);if(!this.disabled&&this.menu){this.openMenu();}}},{key:"onFocusOut",value:function onFocusOut(e){_get2(_getPrototypeOf2(MenuItem.prototype),"onFocusOut",this).call(this,e);this.closeMenu();}},{key:"openMenu",value:function openMenu(andFocus){var menu=this.menu;if(!this.disabled&&menu){menu.focusOnToFront=andFocus;menu.show();this.owner.currentSubMenu=menu;}}},{key:"closeMenu",value:function closeMenu(){if(this._menu instanceof Widget){this.menu.close();}}/**
     * Get/sets the checked state of thie `MenuItem` and fires the {@link #event-toggle}
     * event upon change.
     *
     * Note that this must be configured as a `Boolean` to enable the checkbox UI.
     * @property {Boolean}
     */},{key:"focusElement",get:function get(){return this.element;}},{key:"contentElement",get:function get(){return this.textElement;}},{key:"isFocusable",get:function get(){var focusElement=this.focusElement;// We are only focusable if the focusEl is deeply visible, that means
// it must have layout - an offsetParent. Body does not have offsetParent.
// Disabled menu items are focusable but cannot be activated.
// https://www.w3.org/TR/wai-aria-practices/#h-note-17
return focusElement&&this.isVisible&&(focusElement===document.body||focusElement.offsetParent);}},{key:"checked",set:function set(checked){var me=this,isConfiguring=me.isConfiguring;// If we began life as a non-checkitem, then reject attempts to set checked status.
if(!isConfiguring&&!(typeof me._checked==='boolean')){return;}// Ensure we're always dealing with a Boolean
checked=!!checked;// Reject non-changes.
if(checked!==me._checked){me._checked=checked;// During config this is initial state; do not fire change events.
// Initial icon state is set in the template.
if(!isConfiguring){me.iconElement.classList[checked?'add':'remove']('b-icon-checked');me.iconElement.classList[checked?'remove':'add']('b-icon-unchecked');/**
                 * The checked state of this menu item has changed.
                 *
                 * Note that this event bubbles up through parents and can be
                 * listened for on a top level {@link Common.widget.Menu Menu} for convenience.
                 * @event toggle
                 * @param {Common.widget.MenuItem} item - The menu item whose checked state changed.
                 * @param {Common.widget.Menu} menu - Menu containing the menu item
                 * @param {Boolean} checked - The _new_ checked state.
                 */me.trigger('toggle',{menu:me.owner,item:me,checked:me._checked,element:me.element,bubbles:true});}}},get:function get(){return this._checked;}},{key:"menu",set:function set(menu){this._menu=menu;},/**
     * Returns the instantiated menu widget as configured by {@link #config-menu}.
     * @property {Common.widget.Widget}
     * @readonly
     */get:function get(){var me=this;var result=me._menu;if(result&&!(result instanceof Widget)){// This covers both Array and Object which are valid items config formats.
// menu could be { itemRef : { text : 'sub item 1 } }. But if it has
// child items or html property in it, it's the main config
if(_typeof(result)==='object'&&!('items'in result||'widgets'in result||'html'in result)){result={items:result};}result=me.menu=WidgetHelper.createWidget(Object.assign({type:'menu',autoShow:false,autoClose:true,scrollAction:me.owner.scrollAction,constrainTo:me.owner.constrainTo,forElement:me.element,align:'l0-r0',anchor:true,owner:me,cls:'b-sub-menu'// Makes the anchor hoverable to avoid mouseleave
},result));}return result;}},{key:"text",get:function get(){return this.html;},set:function set(text){this.html=text;}},{key:"closeParent",set:function set(closeParent){this._closeParent=closeParent;},get:function get(){var result=typeof this.checked==='boolean'?this._closeParent:this._closeParent!==false;return result&&!this.hasMenu;}},{key:"hasMenu",get:function get(){var menu=this.isConfiguring?this.initialConfig.menu:this._menu;return menu&&(menu instanceof Widget||_typeof(menu)==='object'||menu.length>0);}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * A submenu configuration object, or an array of MenuItem configuration
             * objects from which to create a submenu.
             *
             * Note that this does not have to be a Menu. The `type` config can be used
             * to specify any widget as the submenu.
             * @config {Object|Object[]}
             */menu:null,/**
             * Item icon class.
             *
             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.
             *
             * Otherwise this is a developer-defined CSS class string which results in the desired icon.
             * @config {String}
             */icon:null,/**
             * The text to be displayed in the item
             * @config {String}
             */text:null,/**
             * If configured with a `Boolean` value, a checkbox is displayed
             * as the start icon, and the {@link #event-toggle} event is fired
             * when the checked state changes.
             * @config {Boolean}
             */checked:null,/**
             * By default, upon activate, non-checkbox menu items will collapse
             * the owning menu hierarchy.
             *
             * Configure this as `false` to cause the menu to persist after
             * activating an item
             * @config {Boolean}
             */closeParent:null,localizableProperties:['text']};}}]);return MenuItem;}(Widget);exports.MenuItem=MenuItem;MenuItem._$name='MenuItem';BryntumWidgetAdapterRegister.register('menuitem',MenuItem);var validKeys={ArrowUp:1,ArrowDown:1,ArrowRight:1,ArrowLeft:1,Enter:1,Escape:1};/**
 * @module Common/widget/Menu
 */ /**
 * Menu widget, displays a list of items which the user can select from using mouse or keyboard. Can have submenus.
 *
 * @extends Common/widget/Popup
 *
 * @example
 * let menu = new Menu({
 *     forElement : btn.element,
 *     items      : [{
 *         icon : 'b-icon b-icon-add',
 *         text : 'Add'
 *     }, {
 *         icon : 'b-icon b-icon-trash',
 *         text : 'Remove'
 *     }, {
 *         text : 'Sub menu',
 *         menu : [{
 *             icon : 'b-icon fa-play',
 *             text : 'Play'
 *         }]
 *     }],
 *     // Method is called for all ancestor levels
 *     onItem({ item }) {
 *         Toast.show('You clicked ' + item.text);
 *     }
 * });
 *
 * @classType menu
 * @externalexample widget/Menu.js
 */var Menu=/*#__PURE__*/function(_Popup){_inherits2(Menu,_Popup);function Menu(){_classCallCheck2(this,Menu);return _possibleConstructorReturn2(this,_getPrototypeOf2(Menu).apply(this,arguments));}_createClass2(Menu,[{key:"construct",//endregion
/**
     * A descendant menu item has been activated.
     *
     * Note that this event bubbles up through parents and can be
     * listened for on a top level {@link Common.widget.Menu Menu} for convenience.
     * @event item
     * @param {Common.widget.MenuItem} item - The menu item which is being actioned.
     * @param {Common.widget.Menu} menu - Menu containing the menu item
     */ /**
     * The checked state of a descendant menu item has changed.
     *
     * Note that this event bubbles up through parents and can be
     * listened for on a top level {@link Common.widget.Menu Menu} for convenience.
     * @event toggle
     * @param {Common.widget.MenuItem} item - The menu item whose checked state changed.
     * @param {Common.widget.Menu} menu - Menu containing the menu item
     * @param {Boolean} checked - The _new_ checked state.
     */ //region Init
value:function construct(config){if(Array.isArray(config)){config={items:config};}_get2(_getPrototypeOf2(Menu.prototype),"construct",this).call(this,config);EventHelper.on({element:this.element,click:'onMouseClick',mouseover:'onMouseOver',mouseleave:'onMouseLeave',thisObj:this});}},{key:"afterShow",value:function afterShow(resolveFn){// Don't instantiate all our items' subMenus right now.
// Use our private _menu property which will still be a config item.
var hasSubmenu=this.items.some(function(item){return Boolean(item._menu);});// afterShow is called before alignment, so this is the correct time
// to mutate things which will change this Widget's size.
if(hasSubmenu){this.element.classList.add('b-menu-with-submenu');}// Add CSS class to menu if any item has an icon, to allow aligning icon-less items
var hasIcon=this.items.some(function(item){return item.icon;});if(hasIcon){this.element.classList.add('b-menu-with-icon');}_get2(_getPrototypeOf2(Menu.prototype),"afterShow",this).call(this,resolveFn);}},{key:"createWidget",value:function createWidget(item){if(typeof item==='string'){item={text:item};}return _get2(_getPrototypeOf2(Menu.prototype),"createWidget",this).call(this,item);}},{key:"onDocumentMouseDown",//endregion
value:function onDocumentMouseDown(event){// It's not a click outside if its a click on our owner Menu
if(!this.parentMenu||!this.parentMenu.owns(event.event.target)){_get2(_getPrototypeOf2(Menu.prototype),"onDocumentMouseDown",this).call(this,event);}}//region Show
},{key:"hide",value:function hide(animate){if(this.currentSubMenu){this.currentSubMenu.hide(animate);}_get2(_getPrototypeOf2(Menu.prototype),"hide",this).call(this,animate);if(this.parentMenu){this.parentMenu.currentSubMenu=null;}}//endregion
//region Events
/**
     * Activates a menu item if user clicks on it
     * @private
     */},{key:"onMouseClick",value:function onMouseClick(event){var me=this,menuItem=event.target.closest('.b-menuitem');if(menuItem){me.triggerElement(menuItem,event);// IE / Edge still triggers event listeners that were removed in a listener - prevent this
event.stopImmediatePropagation();}}/**
     * Activates menu items on hover. On real mouse hover, not on a touchstart.
     * @private
     */},{key:"onMouseOver",value:function onMouseOver(event){if(this.focusOnHover!==false){var fromItemElement=DomHelper.up(event.relatedTarget,'.b-widget'),toItemElement=DomHelper.up(event.target,'.b-widget'),overItem=IdHelper.fromElement(toItemElement);if(!DomHelper.isTouchEvent&&toItemElement&&toItemElement!==fromItemElement&&overItem.parent===this){overItem&&overItem.focus();}}}// unselect any menu item if mouse leaves the menu element (unless it enters a child menu)
},{key:"onMouseLeave",value:function onMouseLeave(event){var me=this,relatedTarget=event.relatedTarget,leavingToChild=relatedTarget&&me.owns(relatedTarget);var targetCmp=relatedTarget&&relatedTarget instanceof HTMLElement&&IdHelper.fromElement(relatedTarget),shouldHideMenu=!leavingToChild;if(targetCmp){while(targetCmp.ownerCmp){targetCmp=targetCmp.ownerCmp;}// Or was found and does not belong to current menu DOM tree
// This condition will not allow possibly existing picker to hide
// Covered by Menu.t.js
shouldHideMenu&=!DomHelper.getAncestor(targetCmp.element,[event.target]);}if(!leavingToChild&&shouldHideMenu){me.currentSubMenu&&me.currentSubMenu.hide();me.currentSubMenu=me.selectedElement=null;// Deactivate currently active *menu items* on mouseleave
if(me.element.contains(document.activeElement)&&document.activeElement.matches('.b-menuitem')){me.element.focus();}}}/**
     * Keyboard navigation. Up/down, close with esc, activate with enter
     * @private
     */},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){var sourceWidget=IdHelper.fromElement(event),isFromWidget=sourceWidget&&sourceWidget!==this&&!(sourceWidget instanceof MenuItem);if(event.key==='Escape'){// Only close this menu if the ESC was in a child input Widget
(isFromWidget?this:this.rootMenu).close();return;}_get2(_getPrototypeOf2(Menu.prototype),"onInternalKeyDown",this).call(this,event);// Do not process keys from certain elemens
if(isFromWidget){return;}if(validKeys[event.key]){event.preventDefault();}var active=document.activeElement,el=this.element;this.navigateFrom(active!==el&&el.contains(active)?active:null,event.key,event);}},{key:"navigateFrom",value:function navigateFrom(active,key,event){var me=this,treeWalker=me.treeWalker,item=active&&me.getItemFromElement(active);var toActivate;switch(key){case'ArrowUp':treeWalker.currentNode=active||(active=me.bottomFocusTrap);treeWalker.previousNode();toActivate=treeWalker.currentNode;break;case'ArrowDown':treeWalker.currentNode=active||(active=me.topFocusTrap);treeWalker.nextNode();toActivate=treeWalker.currentNode;break;case' ':if(active&&!active.classList.contains('b-disabled')){if(item&&item.menu){me.openSubMenu(active,item);}else{me.triggerElement(active,event);}}break;case'ArrowRight':if(active&&item&&item.menu&&!active.classList.contains('b-disabled')){// opening with arrow keys highlights first item (as in menus on mac)
var openedMenu=me.openSubMenu(active,item);// If show hs not been vetoed, ask it to focus.
// Container will delegate focus inward if possible.
if(openedMenu){openedMenu.focus();}}else{treeWalker.currentNode=active||(active=me.topFocusTrap);treeWalker.nextNode();toActivate=treeWalker.currentNode;}break;case'ArrowLeft':if(me.isSubMenu){me.hide();}else if(!active){treeWalker.currentNode=active||(active=me.topFocusTrap);treeWalker.nextNode();toActivate=treeWalker.currentNode;}break;case'Enter':if(active&&!active.classList.contains('b-disabled')){me.triggerElement(active,event);}break;}// Move focus to wherever we have calculated
if(toActivate){// Previous moved to encapsulating element; wrap from end
if(toActivate===me.element){me.navigateFrom(me.bottomFocusTrap,'ArrowUp',event);}// Next could not move because we're at the end; wrap from top
else if(toActivate===active){me.navigateFrom(me.topFocusTrap,'ArrowDown',event);}else{toActivate.focus();}}}//endregion
//region Activate menu item
},{key:"getItemFromElement",value:function getItemFromElement(menuItemElement){return IdHelper.fromElement(menuItemElement,'menuitem',this.contentElement);}/**
     * Activate a menu item (from its element)
     * @private
     * @fires item
     * @param menuItemElement
     */},{key:"triggerElement",value:function triggerElement(menuItemElement,event){var menu=this,item=menu.getItemFromElement(menuItemElement);// If the trigger gesture happened on a non-MenuItem
// item will be undefined. Do not action on a non-MenuItem
// or a disabled MenuItem
if(item&&!item.disabled){item.doAction(event);}}/**
     * Returns true if this menu is a sub menu.
     * To find out which menu is the parent, check {@link #property-parentMenu}.
     * @type {boolean}
     * @readonly
     */},{key:"openSubMenu",/**
     * Opens a submenu anchored to a menu item
     * @private
     * @param element
     * @param item
     */value:function openSubMenu(element,item){var me=this,subMenu=item.menu;if(subMenu){if(!subMenu.isVisible){var event={item:item,element:element};if(me.trigger('beforeSubMenu',event)===false){return;}if(item.onBeforeSubMenu&&item.onBeforeSubMenu(event)===false){return;}subMenu.show();}/**
             * Currently open sub menu, if any
             * @member {Common.widget.Menu} currentSubMenu
             * @readonly
             */return me.currentSubMenu=subMenu;}}/**
     * Get/set focused menu item.
     * Shows submenu if newly focused item has a menu and is not disabled.
     * @property {HTMLElement}
     */},{key:"selectFirst",value:function selectFirst(){var treeWalker=this.treeWalker;treeWalker.currentNode=this.topFocusTrap;treeWalker.nextNode();// If we are under keyboard control, this must happen in the next
// animation frame so that the keydown event doesn't fire on the
// newly focused node.
this.requestAnimationFrame(function(){return treeWalker.currentNode.focus();});}//endregion
//region Close
/**
     * Gets the parent Menu if this Menu is a submenu.
     * @returns {Common.widget.Menu} The parent menu if this is a submenu, otherwise, `undefined`.
     */},{key:"focusElement",get:function get(){var fromParentMenu=this.parentMenu&&this.parentMenu.element.contains(document.activeElement),firstWidget=this.items[0];if(fromParentMenu||!(firstWidget instanceof MenuItem)){return _get2(_getPrototypeOf2(Menu.prototype),"focusElement",this);}return this.element;}},{key:"isSubMenu",get:function get(){return this.owner&&this===this.owner.menu;}},{key:"selectedElement",set:function set(element){var me=this,lastSelected=me._selectedElement;if(lastSelected){var lastItem=me.getItemFromElement(lastSelected),lastItemMenu=lastItem&&lastItem.menu;if(lastItemMenu){lastItemMenu.hide();}lastSelected.classList.remove('b-active');}me._selectedElement=element;// might set to null to deselect
if(element){var doFocus=DomHelper.isFocusable(element);element.classList.add('b-active');me.scrollable.scrollIntoView(element,{animate:!doFocus,focus:doFocus});}},get:function get(){return this._selectedElement;}},{key:"parentMenu",get:function get(){var result=this.owner;if(result instanceof MenuItem){result=result.owner;}if(result instanceof Menu){return result;}}/**
     * Gets this menus root menu, the very first menu shown in a sub menu hierarchy
     * @property {Common.widget.Menu}
     * @private
     */},{key:"rootMenu",get:function get(){var menu=this;while(menu.parentMenu&&menu.parentMenu instanceof this.constructor){menu=menu.parentMenu;}return menu;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{align:'t-b',scrollAction:'hide',/**
             * Specify false to prevent the menu from getting focus when hovering items
             * @default
             * @config {Boolean}
             */focusOnHover:null,// We do need a Scroller so that we can use its API to scroll around.
// But the overflow flags default to false.
scrollable:false,defaultType:'menuitem'};}}]);return Menu;}(Popup);exports.Menu=Menu;Menu._$name='Menu';BryntumWidgetAdapterRegister.register('menu',Menu);/**
 * Basic toast. Toasts are stacked on top of each other
 * @example
 * // simplest possible
 * Toast.show('Just toasting');
 *
 * // with config
 * Toast.show({
 *   html: 'Well toasted',
 *   showProgress: false
 * });
 *
 * // as instance (instance is also returned from Toast.show()
 * let toast = new Toast({
 *   html: 'Not going away',
 *   timeout: 0
 * });
 *
 * toast.show();
 *
 * @classType toast
 * @externalexample widget/Toast.js
 */var Toast=/*#__PURE__*/function(_Widget5){_inherits2(Toast,_Widget5);function Toast(){_classCallCheck2(this,Toast);return _possibleConstructorReturn2(this,_getPrototypeOf2(Toast).apply(this,arguments));}_createClass2(Toast,[{key:"doDestroy",value:function doDestroy(){var index=Toast.toasts.indexOf(this);if(index>-1){Toast.toasts.splice(index,1);}_get2(_getPrototypeOf2(Toast.prototype),"doDestroy",this).call(this);}// Toasts must not create their element until show.
},{key:"show",/**
     * Show the toast
     */value:function show(){_get2(_getPrototypeOf2(Toast.prototype),"show",this).call(this);if(this.timeout>0){this.hideTimeout=this.setTimeout('hide',this.timeout);}}/**
     * Hide the toast
     */},{key:"hide",value:function hide(){var me=this;if(!me.destroyTimeout){me.element.classList.add('b-toast-hide');me.element.style.bottom='';me.animationTimeout=me.setTimeout('destroy',200);}}/**
     * Hide all visible toasts
     */},{key:"element",set:function set(element){},get:function get(){// Toasts must not create their element until show.
if(!this._element&&!this.isConfiguring){var me=this,topToast=Toast.toasts.length&&Toast.toasts[0].element,bottom=topToast?topToast._nextBottom:me.bottomMargin,element=_set(_getPrototypeOf2(Toast.prototype),"element",DomHelper.createElement({parent:me.appendTo||Widget.floatRoot,children:me.showProgress?[{className:'b-toast-progress',style:"animation-duration:".concat(me.timeout/1000,"s;")}]:null,html:me._html,className:me.color||'',style:me._style||''}),this,true);EventHelper.on({element:element,click:'hide',thisObj:me});Toast.toasts.unshift(me);element._nextBottom=bottom+element.offsetHeight+me.bottomMargin;// Transitioned style props must be set dynamically
element.style.cssText+=";bottom:".concat(bottom,"px;transform:translateY(0)");}return _get2(_getPrototypeOf2(Toast.prototype),"element",this);}}],[{key:"hideAll",value:function hideAll(){Toast.toasts.reverse().forEach(function(toast){return toast.hide();});}/**
     * Easiest way to show a toast
     * @param {String|Object} msgOrConfig Message or toast config object
     * @returns {Common.widget.Toast}
     * @example
     * Toast.show('Hi');
     * @example
     * Toast.show({
     *   html   : 'Read quickly, please',
     *   timeout: 1000
     * });
     */},{key:"show",value:function show(msgOrConfig){var toast=new Toast(typeof msgOrConfig==='string'?{html:msgOrConfig}:msgOrConfig);toast.show();return toast;}},{key:"defaultConfig",get:function get(){return{floating:true,/**
             * Timeout (in ms) until the toast is automatically dismissed. Set to 0 to never hide.
             * @config {Number}
             * @default
             */timeout:2500,/**
             * Show a progress bar indicating the time remaining until the toast is dismissed.
             * @config {Boolean}
             * @default
             */showProgress:true,/**
             * Toast color (should have match in toast.scss or your custom styling).
             * Valid values in Bryntum themes are:
             * * b-amber
             * * b-blue
             * * b-dark-gray
             * * b-deep-orange
             * * b-gray
             * * b-green
             * * b-indigo
             * * b-lime
             * * b-light-gray
             * * b-light-green
             * * b-orange
             * * b-purple
             * * b-red
             * * b-teal
             * * b-white
             * * b-yellow
             *
             * ```
             * new Toast({
             *    color : 'b-blue'
             * });
             * ```
             *
             * @config {String}
             */color:null,bottomMargin:20};}}]);return Toast;}(Widget);exports.Toast=Toast;Toast.toasts=[];Toast._$name='Toast';BryntumWidgetAdapterRegister.register('toast',Toast);var realignTransitions={left:true,right:true,top:true,bottom:true,transform:true};/**
 * @module Common/widget/Tooltip
 */ /**
 * Tooltip. Easiest way of assigning a tooltip to a widget is by setting {@link Common.widget.Widget#config-tooltip}, see example below.
 *
 * ```javascript
 * button.tooltip = 'Click me and you wont believe what happens next';
 * ```
 *
 * ## Showing async content
 * To create async tooltip and show {@link #config-loadingMsg}, set {@link #property-html} to `false`:
 *
 * ```javascript
 * new Tooltip({
 *     listeners : {
 *         beforeShow : ({ source : tip }) => {
 *             tip.html = false;
 *             AjaxHelper.get('someurl').then(response => tip.html = 'Done!');
 *         }
 *     }
 * });
 * ```
 *
 * @extends Common/widget/Widget
 * @classType tooltip
 * @externalexample widget/Tooltip.js
 */var Tooltip=/*#__PURE__*/function(_Popup2){_inherits2(Tooltip,_Popup2);function Tooltip(){_classCallCheck2(this,Tooltip);return _possibleConstructorReturn2(this,_getPrototypeOf2(Tooltip).apply(this,arguments));}_createClass2(Tooltip,[{key:"afterConstruct",//endregion
//region Events
/**
     * Triggered when a mouseover event is detected on a potential target element.
     * Return false to prevent the action
     * @event pointerOver
     * @param {Common.widget.Tooltip} sourceThe tooltip instance.
     * @param {Event} event The mouseover event.
     */ //endregion
//region Properties
/**
     * The HTML element that triggered this Tooltip to show
     * @member {HTMLElement} activeTarget
     */ //endregion
//region Init & destroy
value:function afterConstruct(){var me=this,forSelector=me.forSelector;if(forSelector){me.showOnHover=true;if(!me.forElement){me.trackMouse=true;me.forElement=document.body;}}_get2(_getPrototypeOf2(Tooltip.prototype),"afterConstruct",this).call(this);// There's a triggering element, and we're showing on hover, add the mouse listeners
if(me.forElement&&me.showOnHover){EventHelper.on({element:me.forElement,mouseover:'internalOnPointerOver',mouseout:'onPointerOut',transitionend:'onTransitionEnd',thisObj:me});}if(me.autoShow){me.show();}if(me.allowOver){EventHelper.on({element:me.element,mouseenter:'onOwnElementMouseEnter',mouseleave:'onPointerOut',thisObj:me});}}},{key:"internalOnPointerOver",//endregion
//region Hovering, show and hide
value:function internalOnPointerOver(event){var me=this,forElement=me.forElement,forSelector=me.forSelector,activeTarget=me.activeTarget;var newTarget;if(me.disabled){return;}// If the mouse moves over this tooltip, it is theoretically a mouseout of its
// forElement, but allowOver lets us tolerate this ane remain visible.
if(me.allowOver&&me.element.contains(event.target)){return;}// There's been a mouseover. If we have a forSelector, we have to check
// if it's an enter of a matching child
if(forSelector){// Moving inside a forSelector matching element
if(activeTarget&&activeTarget.contains(event.target)&&activeTarget.contains(event.relatedTarget)){return;}newTarget=event.target.closest(forSelector);// Mouseovers while within a target do nothing
if(newTarget&&event.relatedTarget&&event.relatedTarget.closest(forSelector)===newTarget){return;}}// There's no forSelector, so check if we moved from outside the target
else if(!forElement.contains(event.relatedTarget)){newTarget=forElement;}// Mouseover caused by moving from child to child inside the target
else{return;}// If pointer entered the target or a forSelector child, then show.
if(newTarget){me.handleForElementOver(event,newTarget);}// If over a non-forSelector child, behave as in forElement out
else if(activeTarget){me.handleForElementOut();}}// Handle a transitioned reposition when the activeTarget moved beneath the pointer.
// When it comes to an end, if the mouseout has not hidden, then realign at the new position
// if the activeTarget is still beneath the pointer.
},{key:"onTransitionEnd",value:function onTransitionEnd(event){var me=this,currOver=Tooltip.currentOverElement;if(realignTransitions[event.propertyName]){// Don't realign if the mouse is over this, and is allowed to be over this
// If user is interacting with this Toolltip, they won't expect it to move.
if(me.allowOver&&me.element.contains(currOver)){return;}// If we are still visible, and mouse is still over the activeTarget, realign
if(me.isVisible&&me.activeTarget.contains(currOver)&&!me.trackMouse){me.realign();}}}},{key:"handleForElementOver",value:function handleForElementOver(event,newTarget){var me=this;// Vetoed, then behave as is a targetout
if(me.trigger('pointerOver',{event:event,target:newTarget})===false){me.onPointerOut(event);}else{me.pointerEvent=event;me.abortDelayedHide();// We are over a new target. If we are still visible, we
// do not want to hide to avoid flickering. But if there is a
// beforeshow listener which may mutate us, we still have to
// consult it. If it returns a veto, then we do in fact hide.
// Under normal circumstances we just alignTo the new target.
// We must handle the post show tasks like starting the dismiss timer etc.
if(me.isVisible&&!me.hideOnDelegateChange){me.updateActiveTarget(newTarget);if(me.trigger('beforeShow')===false){return me.hide();}me.alignTo({target:me.anchorToTarget?newTarget:new Point(me.pointerEvent.pageX-window.pageXOffset+me.mouseOffsetX,me.pointerEvent.pageY-window.pageYOffset+me.mouseOffsetY),overlap:!(me.anchorToTarget&&me.anchor)});me.trigger('show');me.afterShowByTarget();}else{if(me.hideOnDelegateChange){me.hide();}me.updateActiveTarget(newTarget);me.delayShow(newTarget);}}}},{key:"delayShow",value:function delayShow(target){var me=this;// Caught in an animation - cancel it
if(me.currentAnimation){me.cancelHideShowAnimation();me._hidden=true;}if(!me.isVisible&&!me.hasTimeout('show')){// Allow hoverDelay:0 or rapid movement from delegate to delegate to show immediately
if(!me.hoverDelay||me.forSelector&&Date.now()-me.lastHidden<me.quickShowInterval){me.showByTarget(target);}else{// If we're not going to anchor to the hovered element, then we need to keep track
// of mousemoves until the show happens so we can show where the mouse currently is.
if(!me.listeningForMouseMove&&!me.anchorToTarget){me.mouseMoveRemover=EventHelper.on({element:document,mousemove:'onMouseMove',thisObj:me});}// If a tap event triggered, do not wait. Show immediately.
me.setTimeout(function(){return me.showByTarget(target);},!me.pointerEvent||me.pointerEvent.type==='mouseover'?me.hoverDelay:0,'show');}}else if(me.isVisible){me.showByTarget(target);}}},{key:"showByTarget",value:function showByTarget(target){var me=this;if(me.mouseMoveRemover){me.mouseMoveRemover();me.mouseMoveRemover=null;}// Show by the correct thing.
// If we are not anchored to the target, then it's the current pointer event.
// Otherwise it's the activeTarget.
me.showBy({target:me.anchorToTarget?target:new Point(me.pointerEvent.pageX-window.pageXOffset+me.mouseOffsetX,me.pointerEvent.pageY-window.pageYOffset+me.mouseOffsetY),overlap:!(me.anchorToTarget&&me.anchor)});}},{key:"afterShowByTarget",value:function afterShowByTarget(){var me=this,dismissDelay=me.dismissDelay;me.abortDelayedShow();if(dismissDelay){me.setTimeout('hide',dismissDelay);}me.toFront();}},{key:"updateActiveTarget",value:function updateActiveTarget(newTarget){var me=this,lastTarget=me.activeTarget;me.activeTarget=newTarget;if(!me.isConfiguring){me.trigger('overtarget',{newTarget:newTarget,lastTarget:lastTarget});}}},{key:"onPointerOut",value:function onPointerOut(event){var me=this,toElement=event.relatedTarget;// Edge case: If there is no space to fit the tooltip, and as a result of showing the tooltip - the mouse is over the tooltip
// Make sure we don't end up in an infinite hide/show loop
if(me.allowOver&&me.element.contains(toElement)){return;}// If we were in an allowOver situation and exited
// into the activeTarget, do nothing; in this situation
// the tip is treated as if it were part of the target.
if(me.element.contains(event.target)&&me.activeTarget&&me.activeTarget.contains(toElement)){return;}// We have exited the active target
if(me.activeTarget&&!me.activeTarget.contains(event.relatedTarget)){me.handleForElementOut();}}},{key:"handleForElementOut",value:function handleForElementOut(){// Separated from onTargetOut so that subclasses can handle target out in any way.
var me=this,hideDelay=me.hideDelay;me.abortDelayedShow();// Even if there is a hide timer, it's a *dismiss* timer which hides the tip
// after a hover time. We begin a new delay on target out.
if(me.isVisible&&hideDelay!==false){me.abortDelayedHide();if(hideDelay>0){me.setTimeout('hide',hideDelay);}else{// Hide immediately when configured with `hideDelay: 0`. Used by async cell tooltips that always should
// retrigger `hoverDelay`, to not spam the backend
me.hide();}}}},{key:"show",value:function show(){var me=this;// If we know what element to show it by, and we are anchoring to it
// and there's no ambiguity with a selector for sub elements,
// then show it by our forElement (Unless we're being called from showBy)
if(me.forElement&&me.anchorToTarget&&!me.forSelector&&!me.inShowBy){me.showByTarget(me.forElement);}// All we can do is the basic Widget show.
else{if(me.inShowBy){me.y=-10000;}_get2(_getPrototypeOf2(Tooltip.prototype),"show",this).call(this);}me.afterShowByTarget();// If we've shown, and are tracking the mouse and not anchored to (aligned to) the target, track the mouse
if(!me.mouseMoveRemover&&!me._hidden&&me.trackMouse){me.mouseMoveRemover=EventHelper.on({element:document,mousemove:'onMouseMove',thisObj:me});}}},{key:"hide",value:function hide(){var me=this;if(me.isVisible){var _get6;me.abortDelayedShow();me.abortDelayedHide();for(var _len25=arguments.length,args=new Array(_len25),_key25=0;_key25<_len25;_key25++){args[_key25]=arguments[_key25];}(_get6=_get2(_getPrototypeOf2(Tooltip.prototype),"hide",this)).call.apply(_get6,[this].concat(args));me.lastHidden=Date.now();me.activeTarget=null;if(me.mouseMoveRemover){me.mouseMoveRemover();me.mouseMoveRemover=null;}me.listeningForMouseMove=false;}}},{key:"abortDelayedShow",value:function abortDelayedShow(){var me=this;if(me.hasTimeout('show')){me.clearTimeout('show');if(me.mouseMoveRemover){me.mouseMoveRemover();me.mouseMoveRemover=null;}}}/**
     * Stops both timers which may hide this tooltip, the one which counts down from mouseout
     * and the one which counts down from mouseover show for dismissDelay ms
     * @private
     */},{key:"abortDelayedHide",value:function abortDelayedHide(){this.clearTimeout('hide');}},{key:"realign",value:function realign(el){var me=this,spec=me.lastAlignSpec,clippedBy=me.clippedBy;// If we are hidden because our align target scrolled, or otherwise
// moved out of its clipping boundaries, then check if it's moved back in.
// For example EventDrag might move the element outside of the scheduler
// SubGrid, which will cause the tip to hide, but then moving it back in
// must reshow it.
if(!me.isConfiguring&&clippedBy&&!me.isVisible&&spec.targetHidden){var target=Rectangle.from(spec.target,me.positioned?me.element.offsetParent:null,!me.positioned),clippedTarget=target.intersect(clippedBy);// If there is an intersecting Rectangle with the forElement, align
if(clippedTarget){me.show();spec.targetHidden=false;}}_get2(_getPrototypeOf2(Tooltip.prototype),"realign",this).call(this,el);}},{key:"alignTo",value:function alignTo(spec){var me=this;if(!me.isVisible)return;// getHtml implies update on align.
// Must update HTML before calculating position
if(me.getHtml){// If mouse pointer is over this, do not attempt
// to call the getHtml method.
if(!(me.pointerEvent&&me.element.contains(me.pointerEvent.target))){if(spec.nodeType===1){spec={target:spec};}var xy=spec instanceof Point?spec:spec.position||(spec.target.nodeType===1?Rectangle.from(spec.target):spec.target);// setHtml attempts to realign to previous alignment unless this flag is set
me.isAligning=true;me.html=me.getHtml({tip:me,element:me.element,forElement:me.activeTarget,x:xy.x,y:xy.y,event:me.pointerEvent});me.isAligning=false;}}if(me.isVisible){_get2(_getPrototypeOf2(Tooltip.prototype),"alignTo",this).call(this,spec);}}//endregion
//region Tooltip contents
},{key:"onMouseMove",//endregion
//region Events
/**
     * Mouse move event listener which updates tooltip
     * @private
     */value:function onMouseMove(event){var me=this,x=event.pageX-window.pageXOffset+me.mouseOffsetX,y=event.pageY-window.pageYOffset+me.mouseOffsetY,// If we are trackMouse: true
// we must keep out of the way of the mouse by continuing
// to track if we are on the way out due to a hide timer.
isHiding=me.hasTimeout('hide'),target=event.target;// MouseMove is listened for during the hover show timer wait phase if anchorToTarget is false
// so that when the timer fires, it can show near the most recent pointer position.
// It's also listened for after show when we are not anchored to the target and so tracking the mouse.
me.pointerEvent=event;// Check that we are still valid to be visible, and if so, track the mouse.
if(!me._hidden){// Check whether the element we are over is still a valid delegate matching the forSelector,
// or it's the tip element, and we're allowOver. If not, we have to hide.
// nodeType check is for FF on Linux, event.target is sometimes a text node
if(me.forSelector&&!isHiding&&target.nodeType===1&&!target.matches(me.forSelector)&&!(me.allowOver&&me.element.contains(target))){me.handleForElementOut();}// If we are not hiding due to moving mouse outside our forElement, tooltip stays visible and optionally realigns based on trackMouse setting.
else if(!isHiding||me.forElement.contains(target)){// Mousemoves restart the dismiss timer.
if(me.dismissDelay&&!isHiding){me.setTimeout('hide',me.dismissDelay);}// If we're not anchoring to the target, track the mouse
if(me.trackMouse){me.alignTo({position:new Point(x,y),ignorePageScroll:true});}}}}},{key:"onOwnElementMouseEnter",value:function onOwnElementMouseEnter(event){this.abortDelayedHide();}//endregion
},{key:"focusElement",get:function get(){var result=_get2(_getPrototypeOf2(Tooltip.prototype),"focusElement",this);if(result!==this.element){return result;}}},{key:"anchorToTarget",get:function get(){return this._anchorToTarget;},set:function set(anchorToTarget){this._anchorToTarget=anchorToTarget;if(!anchorToTarget)this.anchor=false;}},{key:"trackMouse",set:function set(trackMouse){this._trackMouse=trackMouse;},get:function get(){// We do not track the mouse if we are anchored to (aligned to) the target
return this._trackMouse&&!this.anchorToTarget;}},{key:"textContent",set:function set(value){this._textContent=value;this.element.classList[value?'add':'remove']('b-tooltip-text-content');},get:function get(){return this._textContent;}},{key:"html",set:function set(html){var me=this;// setting to false signals async tooltip, show loading message.
// TODO: Load masking should be a general Widget ability.
if(html===false){html="<div class=\"b-tooltip-loading\"><div class=\"b-icon b-icon-spinner\"></div>".concat(me.L(me.loadingMsg),"</div>");}else if(html!=null){html=String(html);// in case a number was passed in
}// we have something to show...
if(html){// When setting the html, we must inhibit any configured html getter
var getHtml=me.getHtml;me.getHtml=null;_set(_getPrototypeOf2(Tooltip.prototype),"html",html,this,true);// Must realign before restoring getHtml, to not get stuck in infinite html setting loop
if(!me.isAligning){me.realign();}me.getHtml=getHtml;me.trigger('innerHtmlUpdate');}else{// do not show empty tooltips
me.hide();}}/**
     * Get/set HTML to display. When specifying HTML, this widget's element will also have `b-html` added to its
     * classList, to allow targeted styling. To create async tooltip and show {@link #config-loadingMsg}, set it to `false`.
     * For example:
     *
     * ```javascript
     * new Tooltip({
     *     listeners : {
     *         beforeShow : ({ source : tip }) => {
     *             tip.html = false;
     *             AjaxHelper.get('someurl').then(response => tip.html = 'Done!');
     *         }
     *     }
     * });
     * ```
     *
     * @property {String}
     * @category DOM
     */,get:function get(){return _get2(_getPrototypeOf2(Tooltip.prototype),"html",this);}}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * Horizontal offset from mouse when {@link #config-anchorToTarget} is `false`
             * @config {Number}
             * @default
             */mouseOffsetX:15,/**
             * Vertical offset from mouse when {@link #config-anchorToTarget} is `false`
             * @config {Number}
             * @default
             */mouseOffsetY:15,floating:true,/**
             * Set to a function that returns a string to update tooltips contents. Called on each mouse move event.
             * @config {Function}
             */getHtml:null,/**
             * DOM element to attach tooltip to. By default, the mouse entering this element will kick off a timer
             * (see {@link #config-hoverDelay}) to show itself.
             *
             * If the {@link #config-forSelector} is specified, then mouse entering matching elements within the `forElement`
             * will trigger the show timer to start.
             *
             * Note that when moving from matching element to matching element within the `forElement`, the tooltip
             * will remain visible for {@link #config-hideDelay} milliseconds after exiting one element, so that rapidly
             * entering another matching element will not cause hide+show flicker. To prevent this behaviour configure
             * with `hideDelay: 0`.
             * @config {HTMLElement}
             */forElement:null,trackMouse:null,/**
             * Shows tooltip for all elements that match this selector within the {@link #config-forElement}.
             * @config {String}
             */forSelector:null,/**
             * By default, when moving rapidly from target to target, if, when mouseing over
             * a new target, the tip is still visible, the tooltip does not hide, it remains
             * visible, but updates its content however it is configured to do so.
             *
             * Configure `hideOnDelegateChange : true` to have the tip hide, and then trigger
             * a new show delay upon entry of a new target while still visible.
             * @config {Boolean}
             * @default false
             */hideOnDelegateChange:null,/**
             * Set to true to anchor tooltip to the triggering target. If set to `false`, the tooltip
             * will align to the mouse position. When set to `false`, it will also set `anchor: false`
             * to hide anchor arrow.
             * @config {Boolean}
             * @default true
             */anchorToTarget:true,/**
             * Show on hover
             * @config {Boolean}
             * @default
             */showOnHover:false,/**
             * The amount of time to hover before showing
             * @config {Number}
             * @default
             */hoverDelay:500,/**
             * Show immediately when created
             * @config {Boolean}
             * @default
             */autoShow:false,/**
             * The time (in milliseconds) that the Tooltip should stay visible for when it shows over its
             * target. If the tooltip is anchored to its target, then moving the mouse during this time
             * resets the timer so that the tooltip will remain visible.
             *
             * Defaults to `0` which means the Tooltip will persist until the mouse leaves the target.
             * @config {Number}
             * @default
             */dismissDelay:0,/**
             * The time (in milliseconds) for which the Tooltip remains visible when the mouse leaves the target.
             *
             * May be configured as `false` to persist visible after the mouse exits the target element. Configure it
             * as 0 to always retrigger `hoverDelay` even when moving mouse inside `fromElement`
             * @config {Number}
             * @default
             */hideDelay:500,/**
             * Loading message for async tooltips.
             * @config {String}
             * @default
             */loadingMsg:'Loading...',/**
             * Keep the tooltip open if user hovers it
             * @config {Boolean}
             * @default
             */allowOver:false,/**
             * Specify `true` for a tooltip used to show unformatted text. It will apply the `b-tooltip-text-content`
             * class which specifies a default max width that makes long text more readable.
             */textContent:false,anchor:true,align:'b-t',axisLock:true,showAnimation:null,hideAnimation:null};}}]);return Tooltip;}(Popup);exports.Tooltip=Tooltip;EventHelper.on({element:document,mouseenter:function mouseenter(event){return Tooltip.currentOverElement=event.target;},capture:true});/**
 * Updated dynamically with the current element that the mouse is over. For use when showing a Tooltip
 * from code which is not triggered by a pointer event so that a tooltip can be positioned.
 * @member {HTMLElement} currentOverElement
 * @readonly
 * @static
 */Tooltip._$name='Tooltip';BryntumWidgetAdapterRegister.register('tooltip',Tooltip);/**
 * @module Common/widget/mixin/Badge
 */ /**
 * Mixin that allows a widget to display a badge (mostly done as css)
 *
 * @example
 * // show badge
 * button.badge = 5;
 *
 * // hide badge
 * button.badge = null;
 *
 * @externalexample widget/Badge.js
 *
 * @mixin
 */var Badge=function Badge(Target){return(/*#__PURE__*/function(_ref20){_inherits2(Badge,_ref20);function Badge(){_classCallCheck2(this,Badge);return _possibleConstructorReturn2(this,_getPrototypeOf2(Badge).apply(this,arguments));}_createClass2(Badge,[{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(Badge.prototype),"construct",this).call(this,config);// set after we have element to display badge from start
if(this._badge)this.badge=this._badge;}/**
     * Initial text to show in badge
     * @config {String} badge
     */ /**
     * Get/sets and display badge, set to null or empty string to hide
     * @property {String}
     */},{key:"badge",set:function set(badge){var element=this.element;this._badge=badge;if(element){if(badge!=null&&badge!==''){element.dataset.badge=badge;element.classList.add('b-badge');}else{if(element.dataset.badge)delete element.dataset.badge;element.classList.remove('b-badge');}}},get:function get(){return this._badge;}// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){// If we don't have a badge, our classList doesn't include "b-badge"
if(this.badge){return'b-badge';}}}]);return Badge;}(Target||Base));};//TODO: should togglebutton be own class implemented as input type=checkbox?
//TODO: A toggling widget's focusElement should be an opacity:0 input type=checkbox which covers the clickable area.
/**
 * @module Common/widget/Button
 */exports.Badge=Badge;var bIcon$1=/^b-icon-/,bFa$1=/^b-fa-/;/**
 * Button widget, wraps and styles a regular <code>&lt;button&gt;</code> element. Can display text and icon and allows specifying button color.
 *
 * @extends Common/widget/Widget
 * @mixes Common/widget/mixin/Badge
 *
 * @example
 * // button with text and icon
 * let button = new Button({
 *   icon: 'b-fa-plus-circle',
 *   text: 'Add',
 *   color: 'green',
 *   onClick: () => {}
 * });
 *
 * @classType button
 * @externalexample widget/Button.js
 */var Button=/*#__PURE__*/function(_Badge){_inherits2(Button,_Badge);function Button(){_classCallCheck2(this,Button);return _possibleConstructorReturn2(this,_getPrototypeOf2(Button).apply(this,arguments));}_createClass2(Button,[{key:"template",value:function template(){var me=this;return TemplateHelper.tpl(_templateObject2(),me.color||'',me.toggleable&&me.pressed?'b-pressed':'',me.toggleGroup?"data-group=\"".concat(me.toggleGroup,"\""):'');}//endregion
//region Construct/Destroy
},{key:"construct",value:function construct(){var _get7;var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(config.toggleGroup){config.toggleable=true;}for(var _len26=arguments.length,args=new Array(_len26>1?_len26-1:0),_key26=1;_key26<_len26;_key26++){args[_key26-1]=arguments[_key26];}(_get7=_get2(_getPrototypeOf2(Button.prototype),"construct",this)).call.apply(_get7,[this,config].concat(args));EventHelper.on({element:this.element,click:'onInternalClick',thisObj:this});}},{key:"doDestroy",value:function doDestroy(){this.destroyProperties('menu');_get2(_getPrototypeOf2(Button.prototype),"doDestroy",this).call(this);}//endregion
//region Getters/Setters
},{key:"onInternalClick",//endregion
//region Events
/**
     * Triggers events when user clicks button
     * @fires click
     * @fires action
     * @private
     */value:function onInternalClick(event){var me=this,bEvent={event:event};if(me.toggleable){// Clicking the pressed button in a toggle group should do nothing
if(me.toggleGroup&&me.pressed){return;}me.toggle(!me.pressed);}/**
         * User clicked button
         * @event click
         * @property {Common.widget.Button} button - Clicked button
         * @property {Event} event - DOM event
         */me.trigger('click',bEvent);/**
         * User performed the default action (clicked the button)
         * @event action
         * @property {Common.widget.Button} button - Clicked button
         * @property {Event} event - DOM event
         */ // A handler may have resulted in destruction.
if(!me.isDestroyed){me.trigger('action',bEvent);}// since Widget has Events mixed in configured with 'callOnFunctions' this will also call onClick and onAction
// stop the event since it has been handled
event.preventDefault();event.stopPropagation();}//endregion
//region Toggle
/**
     * Toggle button state (only use with toggleable = true)
     * @param {Boolean} pressed Specify to force a certain toggle state
     * @fires toggle
     */},{key:"toggle",value:function toggle(){var pressed=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var me=this,menu=me.menu;if(!me.toggleable){return;}if(pressed===null){pressed=!me.pressed;}me.pressed=pressed;// For handlers from the code below to detect and avoid recursion
me.toggling=true;if(menu){menu.minWidth=me.width;menu[pressed?'show':'hide']();}me.syncIconCls();/**
         * Button state was toggled
         * @event toggle
         * @property {Common.widget.Button} button - Button
         * @property {Boolean} pressed - New pressed state
         */me.trigger('toggle',{pressed:pressed});me.toggling=false;}//endregion
//region Other
},{key:"syncIconCls",value:function syncIconCls(){var me=this;var iconEl=me._iconEl;if(me.icon){if(!iconEl){iconEl=me._iconEl=DomHelper.createElement({tag:'i',nextSibling:me.element.firstChild});}var iconCls=me.pressed&&me.pressedIcon?me.pressedIcon:me.icon;me._iconEl.className=iconCls;// if it's a supplied icon class b-fa-xxx or b-icon-xxx, add extra class
// so user doesn't have to; they can just specify the icon
if(bIcon$1.test(iconCls)){iconEl.classList.add('b-icon');}else if(bFa$1.test(iconCls)){iconEl.classList.add('b-fa');}}else{iconEl&&iconEl.remove();}}//endregion
},{key:"focusElement",get:function get(){return this.element;}/**
     * Get/set text displayed on the button.
     * @property {String}
     */},{key:"text",get:function get(){return this._text;},set:function set(text){var element=this.element;if(text===null||text===undefined)text='';element.lastChild.data=this._text=text;element.classList[text?'add':'remove']('b-text');}/**
     * Returns the instantiated menu widget as configured by {@link #config-menu}.
     * @property {Common.widget.Widget}
     * @readonly
     */},{key:"menu",get:function get(){var me=this;var result=me._menu;if(result&&!(result instanceof Widget)){// This covers both Array and Object which are valid items config formats.
// menu could be { itemRef : { text : 'sub item 1 } }. But if it has
// child items or html property in it, it's the main config
if(_typeof(result)==='object'&&!('items'in result||'widgets'in result||'html'in result)){result={items:result};}result=me.menu=WidgetHelper.createWidget(Object.assign({type:'menu',autoShow:false,autoClose:true,scrollAction:'realign',constrainTo:document.body,forElement:me.element,align:'t0-b0',owner:me,onHide:function onHide(){// In case the reason for the hide is a mousedown
// on this button, wait until after any impending
// click handler to sync our state with the visibility.
me.setTimeout(function(){return me.toggle(false);},300);}},result));}return result;},set:function set(menu){this._menu=menu;// We are toggleable if there's a menu.
// Pressed means menu visible, not pressed means menu hidden.
this.toggleable=Boolean(menu);}/**
     * Get/set button pressed state
     * @property {Boolean}
     */},{key:"pressed",set:function set(pressed){var me=this;if(pressed&&me.toggleGroup){DomHelper.forEachSelector("button[data-group=".concat(me.toggleGroup,"]"),function(btnEl){if(btnEl!==me.element){WidgetHelper.getById(btnEl.id).toggle(false);}});}me._pressed=pressed;if(me.element)me.element.classList[pressed?'add':'remove']('b-pressed');},get:function get(){return this._pressed;}/**
     * Get/set the Button icon
     * @property {String}
     */},{key:"icon",set:function set(icon){this._icon=icon;this.syncIconCls();},get:function get(){return this._icon;}/**
     * Get/set the Button pressed icon
     * @property {String}
     */},{key:"pressedIcon",set:function set(icon){this._pressedIcon=icon;this.syncIconCls();},get:function get(){return this._pressedIcon;}/**
     * Get/Set the Button icon alignment.
     * May be `'start'` or `'end'`. Defaults to `'start'`
     * @property {String}
     */},{key:"iconAlign",set:function set(iconAlign){var me=this,oldAlign=me._iconAlign;if(iconAlign!==oldAlign){if(oldAlign){me.element.classList.remove("b-icon-align-".concat(oldAlign));}me.element.classList.add("b-icon-align-".concat(iconAlign));me._iconAlign=iconAlign;}},get:function get(){return this._iconAlign;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Button icon class.
             *
             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.
             *
             * Otherwise this is a developer-defined CSS class string which results in the desired icon.
             * @config {String}
             */icon:null,/**
             * Icon class for the buttons pressed state. Only applies to toggle buttons
             *
             * All [Font Awesome](https://fontawesome.com/cheatsheet) icons may also be specified as `'b-fa-' + iconName`.
             *
             * Otherwise this is a developer-defined CSS class string which results in the desired icon.
             *
             * ```
             * new Button({
             *    // Icon for unpressed button
             *    icon        : 'b-fa-wine-glass',
             *
             *    // Icon for pressed button
             *    pressedIcon : 'b-fa-wine-glass-alt',
             *
             *    // Only applies to toggle buttons
             *    toggleable  : true
             * });
             * ```
             *
             * @config {String}
             */pressedIcon:null,/**
             * Button icon alignment. May be `'start'` or `'end'`. Defaults to `'start'`
             * @config {String}
             */iconAlign:'start',/**
             * Button text
             * @config {String}
             */text:'',/**
             * Button color (should have match in button.scss or your custom styling). Valid values in Bryntum themes
             * are:
             * * b-amber
             * * b-blue
             * * b-dark-gray
             * * b-deep-orange
             * * b-gray
             * * b-green
             * * b-indigo
             * * b-lime
             * * b-light-gray
             * * b-light-green
             * * b-orange
             * * b-purple
             * * b-red
             * * b-teal
             * * b-white
             * * b-yellow
             * Combine with specifying `b-raised` for raised/filled style (theme dependent).
             *
             * ```
             * new Button({
             *    color : 'b-teal b-raised'
             * });
             * ```
             *
             * @config {String}
             */color:null,/**
             * Enabled toggling of the button (stays pressed when pressed).
             * @config {Boolean}
             * @default
             */toggleable:false,/**
             * Initially pressed or not. Only applies with `toggleable = true`.
             * ```
             * const toggleButton = new Button({
             *    toggleable : true,
             *    text : 'Enable cool action'
             * });
             * ```
             * @config {Boolean}
             * @default
             */pressed:false,/**
             * Indicate that this button is part of a group where only one button can be pressed. Assigning a value
             * also sets `toggleable` to `true`.
             * ```
             * const yesButton = new Button({
             *    toggleGroup : 'yesno',
             *    text        : 'Yes'
             * });
             *
             * const noButton = new Button({
             *    toggleGroup : 'yesno',
             *    text        : 'No'
             * });
             * ```
             * @config {String}
             */toggleGroup:null,ripple:{radius:75},defaultBindProperty:'text',localizableProperties:['text'],/**
             * A submenu configuration object, or an array of MenuItem configuration
             * objects from which to create a submenu which is shown when this button is pressed.
             *
             * Note that this does not have to be a Menu. The `type` config can be used
             * to specify any widget as the submenu.
             * @config {Object|Object[]}
             */menu:null};}}]);return Button;}(Badge(Widget));exports.Button=Button;Button._$name='Button';BryntumWidgetAdapterRegister.register('button',Button);/**
 * @module Common/widget/ButtonGroup
 */ /**
 * A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them
 * stick together.
 *
 * Trying to add other widgets than buttons will throw an exception.
 *
 * ```javascript
 * new ButtonGroup({
 *   items : [
 *       { icon : 'b-fa b-fa-kiwi-bird' },
 *       { icon : 'b-fa b-fa-kiwi-otter' },
 *       { icon : 'b-fa b-fa-kiwi-rabbit' },
 *       ...
 *   ]
 * });
 * ```
 *
 * @externalexample widget/ButtonGroup.js
 * @classType buttonGroup
 * @extends Common/widget/Container
 */var ButtonGroup=/*#__PURE__*/function(_Container3){_inherits2(ButtonGroup,_Container3);function ButtonGroup(){_classCallCheck2(this,ButtonGroup);return _possibleConstructorReturn2(this,_getPrototypeOf2(ButtonGroup).apply(this,arguments));}_createClass2(ButtonGroup,[{key:"createWidget",value:function createWidget(widget){var me=this;if(me.color&&!widget.color){widget.color=me.color;}if(me.toggleGroup&&!widget.toggleGroup){if(typeof me.toggleGroup==='boolean'){me.toggleGroup=IdHelper.generateId('toggleGroup');}widget.toggleGroup=me.toggleGroup;}var button=_get2(_getPrototypeOf2(ButtonGroup.prototype),"createWidget",this).call(this,widget);if(!(button instanceof Button)){throw new Error('A ButtonGroup can only contain buttons');}return button;}}],[{key:"defaultConfig",get:function get(){return{defaultType:'button',/**
             * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group
             * will look nicer if you also set that cls on the group.
             *
             * ```
             * new ButtonGroup({
             *   cls : 'b-raised,
             *   items : [
             *       { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },
             *       ...
             *   ]
             * });
             * ```
             *
             * @config {String}
             * @category CSS
             */cls:null,/**
             * An array of Buttons or typed Button config objects.
             * @config {Object[]|Common.widget.Button[]}
             */items:null,/**
             * Default color to apply to all contained buttons, see {@link Common.widget.Button#config-color Button#color}.
             * Individual buttons can override the default.
             * @config {String}
             */color:null,/**
             * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained
             * buttons {@link Common.widget.Button#config-toggleGroup toggleGroup config}. Individual buttons can
             * override the default.
             */toggleGroup:null};}}]);return ButtonGroup;}(Container);exports.ButtonGroup=ButtonGroup;ButtonGroup._$name='ButtonGroup';BryntumWidgetAdapterRegister.register('buttonGroup',ButtonGroup);/**
 * @module Common/util/ClickRepeater
 */ /**
 * A helper class, which, when applied to an {@link #config-element} means that a mousedown
 * and hold on that element will, after a configured {@link #config-delay}, begin
 * autorepeating `click` events on that element, starting at a rate of
 * {@link #config-startRate} clicks per second, and over {@link #config-accelerateDuration}
 * milliseconds, accelerate to firing clicks at {@link #config-endRate} times per second.
 *
 * An example of this is used by the {@link Common.widget.NumberField NumberField}'s
 * spinner triggers.
 */var ClickRepeater=/*#__PURE__*/function(_Delayable4){_inherits2(ClickRepeater,_Delayable4);function ClickRepeater(){_classCallCheck2(this,ClickRepeater);return _possibleConstructorReturn2(this,_getPrototypeOf2(ClickRepeater).apply(this,arguments));}_createClass2(ClickRepeater,[{key:"doDestroy",value:function doDestroy(){this.mousedownRemover&&this.mousedownRemover();_get2(_getPrototypeOf2(ClickRepeater.prototype),"doDestroy",this).call(this);}},{key:"onMouseDown",value:function onMouseDown(e){var me=this,target=me.delegate?e.target.closest(me.delegate):me.element;if(target){me.triggerEvent=e;EventHelper.lockComposedPath(me.triggerEvent);me.activeListenerRemover=EventHelper.on({mouseup:{element:document,handler:'onMouseUp'},mousemove:{element:target,handler:'onTargetMouseMove'},mouseleave:{element:target,handler:'onTargetMouseLeave'},mouseenter:{element:target,handler:'onTargetMouseEnter'},thisObj:me});me.setTimeout('startAutoRepeat',me.delay);}}},{key:"onMouseUp",value:function onMouseUp(e){var me=this;me.acceleration&&me.acceleration.cancel();me.activeListenerRemover&&me.activeListenerRemover();me.clearTimeout('startAutoRepeat');me.clearInterval(me.repeatTimer);}},{key:"onTargetMouseLeave",value:function onTargetMouseLeave(){this.clearInterval(this.repeatTimer);}},{key:"onTargetMouseEnter",value:function onTargetMouseEnter(e){this.triggerEvent=e;this.fireClick();}},{key:"onTargetMouseMove",value:function onTargetMouseMove(e){this.triggerEvent=e;}},{key:"startAutoRepeat",value:function startAutoRepeat(){var me=this;me.interval=me.startInterval=1000/me.startRate;me.accelerationDelta=me.startInterval-1000/me.endRate;// Begin animating the interval from 1000/me.startRate to 1000/me.endRate
me.fireClick();me.acceleration=FunctionHelper.animate(me.accelerateDuration,me.nextTick,me,'easeOutQuad');}},{key:"nextTick",value:function nextTick(progress){this.interval=this.startInterval-this.accelerationDelta*progress;}},{key:"fireClick",value:function fireClick(){var me=this,clickEvent=new MouseEvent('click',me.triggerEvent);me.triggerEvent.target.dispatchEvent(clickEvent);me.repeatTimer=me.setTimeout(me.fireClick,me.interval);}},{key:"element",set:function set(element){this._element=element;this.mousedownRemover=EventHelper.on({element:element,mousedown:'onMouseDown',thisObj:this});},get:function get(){return this._element;}}],[{key:"defaultConfig",get:function get(){return{/**
             * The element on which to fire autorepeating `click` events when the mouse is held down.
             * @config {HTMLElement}
             */element:null,/**
             * A query selector which specifies subtargets of this ClickRepeater's {@link #config-element}
             * which act as the click auto repeat event targets.
             * @config {String}
             * @default
             */delegate:null,/**
             * How long in milliSeconds to pause before starting the click repeats.
             * @config {Number}
             * @default
             */delay:500,/**
             * Clicks per second to start firing after the initial {@link #config-delay}
             * @config {Number}
             * @default
             */startRate:2,/**
             * Clicks per second to fire at top speed, after accelerating over the {@link #config-accelerateDuration}
             * @config {Number}
             * @default
             */endRate:20,/**
             * How long in millieconds to accelerate from the
             * {@link #config-startRate} to the {@link #config-startRate}.
             * @config {Number}
             * @default
             */accelerateDuration:4000};}}]);return ClickRepeater;}(Delayable(Base));ClickRepeater._$name='ClickRepeater';/**
 * @module Common/widget/Field
 */var byWeight$1=function byWeight$1(l,r){return(l.weight||0)-(r.weight||0);},byWeightReverse$1=function byWeightReverse$1(l,r){return(r.weight||0)-(l.weight||0);},arrayOption={array:true};/**
 * Base class for TextField and NumberField. Not to be used directly.
 * @extends Common/widget/Widget
 * @mixes Common/widget/mixin/Badge
 * @abstract
 */var Field=/*#__PURE__*/function(_Badge2){_inherits2(Field,_Badge2);function Field(){_classCallCheck2(this,Field);return _possibleConstructorReturn2(this,_getPrototypeOf2(Field).apply(this,arguments));}_createClass2(Field,[{key:"doDestroy",value:function doDestroy(){var errorTip=Field._errorTip;_get2(_getPrototypeOf2(Field.prototype),"doDestroy",this).call(this);// The errorTip references this field, hide it when we die.
if(errorTip&&errorTip.field===this){errorTip.hide();}}/**
     * A singleton error tooltip which activates on hover of invalid fields.
     * before show, it gets a reference to the field and interrogates its
     * active error list to display as the tip content.
     * @member {Common.widget.Tooltip}
     * @readonly
     */},{key:"construct",//endregion
//region Event
/**
     * User typed into the field
     * @event input
     * @param {Common.widget.Field} source - The field
     * @param {String} value - Value
     */ /**
     * Fired when the field value changes
     * @event change
     * @param {String} value - Value
     * @param {String} oldValue - Previous value
     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)
     * @param {Common.widget.Field} source - Field
     */ /**
     * User performed default action (typed into the field)
     * @event click
     * @param {Common.widget.Field} field - Field
     * @param {String} value - Value
     */ /**
     * User clicked fields clear icon
     * @event clear
     * @param {Common.widget.Field} field - Field
     */ /*
     * User clicked on one of the field's {@link #property-triggers}
     * @event trigger
     * @param {Common.widget.Field.Trigger} trigger The trigger activated by click or touch tap.
     * @param {Common.widget.Field} trigger.field The trigger's owning Field.
     */ //endregion
//region Init
value:function construct(config){var me=this;me.highlightChanged=me.createOnFrame('addUpdatedCls');_get2(_getPrototypeOf2(Field.prototype),"construct",this).call(this,config);if(me.keyStrokeChangeDelay){me.changeOnKeyStroke=me.buffer(me.internalOnChange,me.keyStrokeChangeDelay);}}},{key:"onFocusOut",value:function onFocusOut(e){_get2(_getPrototypeOf2(Field.prototype),"onFocusOut",this).call(this,e);// Check field consistency on blur
this.onEditComplete();}/**
     * Template function which may be implemented by subclasses to synchronize
     * input state and validity state upon completion of the edit.
     * @internal
     */},{key:"onEditComplete",value:function onEditComplete(){}},{key:"select",/**
     * Selects the field contents. Optionally may be passed a start and end.
     * NOTE: This method is async for IE11
     * @param {Number} [start] The start index from which to select the input.
     * @param {Number} [end] The index at which to end the selection of the input.
     */value:function select(start,end){// Use focusElement which is the input field in this class
// but allows subclasses to use other elements.
// See, for example, TextAreaField
var input=this.focusElement;if(input.value.length){if(arguments.length===0){this.selectAll();return;}// Only allowed to select range in certain element / input types
if(!this.supportsTextSelection){return;// throw new Error('Trying to select text on an invalid element type');
}if(BrowserHelper.isIE11){// this.clearTimeout(this.selectTimeout);
// HACK: IE focus processing is async and we can't select text until field is focused
// Getting flaky exception in IE, something timing related. Found no way to detect it so using this
// workaround for now
input.focus();input.setSelectionRange(start,end);//
// this.selectTimeout = this.setTimeout(() => {
//     input && input.setSelectionRange(start, end);
// }, 10);
}else{input.setSelectionRange(start,end);}}}},{key:"moveCaretToEnd",value:function moveCaretToEnd(){var input=this.input;if(input.createTextRange){var range=input.createTextRange();range.collapse(false);range.select();}else if(this.supportsTextSelection){// Move caret to the end if possible
this.select(input.value.length,input.value.length);}}},{key:"selectAll",value:function selectAll(){this.focusElement.select();}// called on value changes to update styling of empty vs non-empty field
},{key:"updateEmpty",value:function updateEmpty(){var isEmptyInput=this.isEmptyInput,isEmpty=this.isEmpty,element=this.element,clearIcon=this.clearIcon,empty=isEmptyInput&&isEmpty;if(element){if(clearIcon){// IE11...
clearIcon.classList[empty?'add':'remove']('b-icon-hidden');}// IE11...
element.classList[empty?'add':'remove']('b-empty');}}},{key:"updateInvalid",value:function updateInvalid(){var isValid=this.isValid,element=this.element,errorTip=this.errorTip,inputWrap=this.inputWrap;if(element){element.classList[isValid?'remove':'add']('b-invalid');// We achieved validity, so ensure the error tip is hidden
if(isValid){if(errorTip.isVisible&&errorTip.field===this){errorTip.hide();}}// If the mouse is over, the tip should spring into view
else if(inputWrap.contains(Tooltip.currentOverElement)){// Already shown by this field's inputWrap, just update content.
if(errorTip.activeTarget===inputWrap&&errorTip.isVisible){errorTip.onBeforeShow();}else{errorTip.activeTarget=inputWrap;errorTip.showBy(inputWrap);}}}}//endregion
//region Getters/setters
},{key:"hasChanged",/**
     * Compare's this field's value with its previous value. May be overridden in subclasses
     * which have more complex value types. See, for example, {@link Common.widget.DurationField}.
     * @param {*} oldValue
     * @param {*} newValue
     * @private
     */value:function hasChanged(oldValue,newValue){return newValue!==oldValue;}/**
     * Called by the base Field class's `set value` to sync the state of the UI with the field's value.
     *
     * Relies upon the class implementation of `get inputValue` to return a string representation of
     * the value for user consumption and editing.
     * @private
     */},{key:"syncInputFieldValue",value:function syncInputFieldValue(){var me=this,input=me.input;// If we are updating from internalOnInput, we must not update the input field
if(input&&!me.inputting){// Subclasses may implement their own read only inputValue property.
me.input.value=me.inputValue;// If it's being manipulated from the outside, highlight it
if(!me.isConfiguring&&!me.containsFocus&&me.highlightExternalChange){input.classList.remove('b-field-updated');me.clearTimeout('removeUpdatedCls');me.highlightChanged();}}me.updateEmpty();me.updateInvalid();}},{key:"addUpdatedCls",value:function addUpdatedCls(){this.input.classList.add('b-field-updated');this.setTimeout('removeUpdatedCls',1500);}},{key:"removeUpdatedCls",value:function removeUpdatedCls(){this.input.classList.remove('b-field-updated');}/**
     * A String representation of the value of this field for {@link #function-syncInputFieldValue} to use
     * as the input element's value.
     *
     * Subclasses may override this to create string representations.
     *
     * For example, {@link Common.widget.DateField}'s implementation will format the field date
     * value according to its configured {@link Common.widget.DateField#config-format}. And {@link Common.widget.Combo}'s
     * implementation will return the {@link Common.widget.Combo#config-displayField} of the selected record.
     * @internal
     * @readOnly
     */},{key:"internalOnInputFocus",//endregion
//region Events
value:function internalOnInputFocus(){var length=this.input.value.length;// Help IE to set caret at the end like the other browsers
if(BrowserHelper.isIE11&&length&&!this.autoSelect){this.select(length,length);}}/**
     * Trigger event when fields input changes
     * @fires change
     * @private
     */},{key:"internalOnChange",value:function internalOnChange(event){var me=this,value=me.value,oldValue=me._lastValue;// Don't trigger change if we enter invalid value or if value has not changed (for IE when pressing ENTER)
if(me.isValid&&value!==oldValue){me._lastValue=value;// trigger change event, signaling that origin is from user
me.trigger('change',{value:value,oldValue:oldValue,event:event,userAction:true});// per default Field triggers action event on change, but might be reconfigured in subclasses (such as Combo)
if(me.defaultAction==='change'){me.trigger('action',{value:value,oldValue:oldValue,event:event});}}// since Widget has Events mixed in configured with 'callOnFunctions' this will also call onClick and onAction
}/**
     * Trigger event when user inputs into field
     * @fires input
     * @param event
     * @private
     */},{key:"internalOnInput",value:function internalOnInput(event){var me=this;// Keep the value synced with the inputValue at all times.
me.inputting=true;me.value=me.input.value;me.inputting=false;me.trigger('input',{value:me.value,event:event});me.changeOnKeyStroke&&me.changeOnKeyStroke(event);// since Widget has Events mixed in configured with 'callOnFunctions' this will also call onInput
}},{key:"internalOnKeyPress",value:function internalOnKeyPress(event){var me=this;if(event.type==='keydown'){if(event.key==='Escape'&&!me.readOnly&&me.clearable){me.clear();// don't allow further processing of this event if it had destructive consequences
if(me.isDestroyed){event.stopImmediatePropagation();return;}}// #5730 - IE11 doesn't trigger "change" event by Enter click
else if(event.key==='Enter'&&BrowserHelper.isIE11){this.internalOnChange(event);}}me.trigger(event.type,{event:event});}},{key:"clear",value:function clear(){this.value=null;this.trigger('clear');}//endregion
//region Error
/**
     * Adds an error message to the list of errors on this field.
     * By default the field's valid/invalid state is updated; pass
     * `false` as the second parameter to disable that if multiple
     * changes are being made to the error state.
     * @param {String} error A locale string, or message to use as an error message.
     * @param {Boolean} [silent=false] Pass as `true` to skip updating the field's valid/invalid state.
     */},{key:"setError",value:function setError(error,silent){(this.errors||(this.errors={}))[error]=this.L(error);if(!silent){this.updateInvalid();}}/**
     * Removes an error message from the list of errors on this field.
     * By default the field's valid/invalid state is updated; pass
     * `false` as the second parameter to disable that if multiple
     * changes are being made to the error state.
     * @param {String} error A locale string, or message to remove.
     * @param {Boolean} [silent=false] Pass as `true` to skip updating the field's valid/invalid state.
     */},{key:"clearError",value:function clearError(error,silent){if(this.errors){delete this.errors[error];}if(!silent){this.updateInvalid();}}/**
     * Returns an array of error messages as set by {@link #function-setError}, or
     * `undefined` if there are currently no errors.
     * @return {String[]} The errors for this field, or `undefined` if there are no errors.
     */},{key:"getErrors",value:function getErrors(){if(!this.isValid){var errors=this.errors?ObjectHelper.getTruthyValues(this.errors):[this.input.validationMessage||this.L('invalidValue')];if(errors&&errors.length){return errors;}}}//endregion
},{key:"errorTip",get:function get(){return this.constructor.errorTip;}/**
     * A singleton error tooltip which activates on hover of invalid fields.
     * before show, it gets a reference to the field and interrogates its
     * active error list to display as the tip content.
     * @member {Common.widget.Tooltip}
     * @readonly
     * @static
     */},{key:"element",set:function set(element){var me=this,value=me.initialConfig.value,innerElements=DomHelper.createElementFromTemplate(me.inputTemplate(me),arrayOption),children=[{className:'b-field-inner',reference:'inputWrap',children:innerElements}],startTriggers=[],endTriggers=[];if(me.label){children.unshift({tag:'label',reference:'labelElement',htmlFor:"".concat(me.id,"_input"),html:me.label});}// Read the clearable config which will force evaluation of triggers
// to include clearable trigger.
me._thisIsAUsedExpression(me.clearable);for(var triggerRef in me.triggers){var trigger=me.triggers[triggerRef];if(trigger.align==='start'){startTriggers.unshift(trigger);}else{endTriggers.push(trigger);}}// The triggers at each end are sorted "gavitationally".
// Higher weight sorts towards the center which is the input element.
startTriggers.sort(byWeight$1);endTriggers.sort(byWeightReverse$1);innerElements.unshift.apply(innerElements,_toConsumableArray(startTriggers.map(function(t){return t.element;})));innerElements.push.apply(innerElements,_toConsumableArray(endTriggers.map(function(t){return t.element;})));_set(_getPrototypeOf2(Field.prototype),"element",{className:me.label?'b-has-label':'',children:children},this,true);// Value must be injected into the input element after it has been constructed, not in the
// initial template, otherwise the caret position will not be as expected.
if(value!=null){me.value=value;}me.updateEmpty();me.updateInvalid();},get:function get(){return _get2(_getPrototypeOf2(Field.prototype),"element",this);}//endregion
//region Focus & select
},{key:"focusElement",get:function get(){return this.input;}},{key:"editable",get:function get(){return this._editable&&!this.readOnly;},set:function set(editable){var me=this,input=me.input;me._editable=editable;if(input){if(!me.readOnly){input.readOnly=editable===false?'readOnly':null;}if(editable!==false){me.inputListenerRemover=EventHelper.on({element:input,thisObj:me,focus:'internalOnInputFocus',change:'internalOnChange',input:'internalOnInput',keydown:'internalOnKeyPress',keypress:'internalOnKeyPress',keyup:'internalOnKeyPress'});}else{me.inputListenerRemover&&me.inputListenerRemover();}}}},{key:"clearable",set:function set(clearable){this._clearable=clearable;if(clearable&&!this.triggers){this.triggers={};}},get:function get(){return this._clearable;}/**
     * The trigger Widgets as specified by the {@link #config-triggers} configuration and the {@link #config-clearable} configuration.
     * Each is a {@link Common.widget.Widget Widget} instance which may be hidden, shown and observed and styled just like any other widget.
     * @property {Object}
     */},{key:"triggers",set:function set(triggers){var me=this,myTriggers=me._triggers={};if(me.clearable){(triggers||(triggers={})).clear={cls:'b-icon-remove',handler:function handler(){me._isUserAction=true;me.clear();me._isUserAction=false;},weight:1000};}for(var triggerRef in triggers){myTriggers[triggerRef]=WidgetHelper.createWidget(ObjectHelper.assign({type:'trigger',reference:triggerRef,parent:me},triggers[triggerRef]),me.defaultTriggerType||'trigger');}},get:function get(){return this._triggers;}},{key:"labelWidth",set:function set(labelWidth){if(this.labelElement){this.labelElement.style.flex="0 0 ".concat(DomHelper.setLength(labelWidth));// If there's a label width, the input must conform with it, and not try to expand to 100%
this.inputWrap.style.flexBasis=labelWidth==null?'':0;}}/**
     * Get/set fields label. Please note that the Field needs to have a label specified from start for this to work,
     * otherwise no element is created.
     * @property {String}
     */},{key:"label",get:function get(){return this._label;},set:function set(label){if(label===null||label===undefined)label='';this._label=label;// since value is used in template it is not certain that element is available
// TODO: move the code from template here instead
if(this.labelElement){// using innerHTML since we sometimes use icons as label
this.labelElement.innerHTML=label;}}/**
     * Get/set read only
     * @property {Boolean}
     */},{key:"readOnly",get:function get(){// Fields which are disabled cannot be updated.
// This ensures ESC and clear click won't be able to clear disabled fields.
return this._readOnly||this.disabled;},set:function set(readOnly){this._readOnly=readOnly;this.element.classList[readOnly?'add':'remove']('b-readonly');if(readOnly){this.input.setAttribute('readonly','');}else{this.input.removeAttribute('readonly');}}/**
     * Returns true if the field value is valid
     * @type {Boolean}
     * @readonly
     */},{key:"isValid",get:function get(){if(this.errors&&ObjectHelper.getTruthyValues(this.errors).length){return false;}if(this.input&&this.input.validity){return this.input.validity.valid;}return true;}/**
     * Returns true if the field value is empty
     * @type {boolean}
     * @readonly
     */},{key:"isEmpty",get:function get(){return this.value==null||this.value==='';}/**
     * Returns true if the field's input is empty
     * @type {boolean}
     * @readonly
     */},{key:"isEmptyInput",get:function get(){return!this.input||this.input.value==null||this.input.value==='';}/**
     * Gets or sets the value. The returned type will depend upon the Field subclass.
     *
     * `TextField` returns a `String`.
     *
     * `NumberField` returns a `Number`.
     *
     * `DateField` and `TimeField` return a `Date` object, and `null` if the field is empty.
     *
     * `Combo` will return a `String` if configured with `items` as a simple string array.
     * Otherwise it will return the {@link Common.widget.Combo#config-valueField} value from the
     * selected record, or `null` if no selection has been made.
     * @property {*}
     */},{key:"value",get:function get(){return this._value;},set:function set(value){var me=this,oldValue=me._value;if(me.hasChanged(oldValue,value)){// lastValue is used for IE to check if a change event should be triggered when pressing ENTER
if(!me.inputting){me._lastValue=value;}me._value=value;if(me.required&&(value==''||value==null)){me.setError('fieldRequired',true);}else{me.clearError('fieldRequired',true);}// Do not trigger change event during configuration phase
// or during keyboard input
if(!me.isConfiguring&&!me.inputting){// trigger change event, signaling that origin is from set operation,
// makes it easier to ignore such events in applications that set value on load etc
me.trigger('change',{value:me.value,oldValue:oldValue,userAction:Boolean(me._isUserAction),valid:me.isValid});}me.syncInputFieldValue();}}},{key:"inputValue",get:function get(){// Do not use the _value property. If called during configuration, this
// will import the configured value from the config object.
return this.value==null?'':this.value;}},{key:"supportsTextSelection",get:function get(){var input=this.focusElement;// Text selection using setSelectionRange is allowed in Chrome for certain elements. Edge supports it even for input[type=number]
return input&&(input.tagName.toLowerCase()==='textarea'||input.type&&(/text|search|password|tel|url/.test(input.type)||BrowserHelper.isEdge));}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Text to display in empty field.
             * @config {String}
             */placeholder:'',/**
             * Default value
             * @config {String}
             */value:'',/**
             * Label, prepended to field
             * @config {String}
             */label:null,/**
             * Configure as `true` to indicate that a `null` field value is to be marked as invalid.
             * @config {Boolean}
             * @default false
             */required:null,/**
             * Show a trigger to clear field, and allow `ESC` key to clear field if this field is
             * not {@link #config-readOnly}. The trigger is available in the {@link #property-triggers} object
             * under the name `clear`.
             * @config {Boolean}
             * @default false
             */clearable:null,/**
             * The width to apply to the `<label>` element. If a number is specified, `px` will be used.
             * @config {String|Number}
             */labelWidth:null,/**
             * The width to apply to the `<input>` element. If a number is specified, `px` will be used.
             * @config {String|Number}
             */inputWidth:null,/**
             * The delay in milliseconds to wait after the last keystroke before triggering a change event.
             * Set to 0 to not trigger change events from keystrokes (listen for input event instead to have
             * immediate feedback, change will still be triggered on blur)
             * @config {Number}
             * @default
             */keyStrokeChangeDelay:0,/**
             * Makes the field unmodifiable by user action. The input area is not editable.
             * @config {Boolean}
             */readOnly:null,/**
             * Set to false to prevent user from editing the field. For TextFields it is basically the same as setting
             * {@link #config-readOnly}, but for PickerFields there is a distinction where it allows you to pick a value but not to type
             * one in the field.
             * @config {Boolean}
             * @default true
             */editable:true,defaultAction:'change',/**
             * The triggers to add either before or after the input field. Each property name is the reference by which an
             * instantiated Trigger Widget may be retrieved from the live `{@link #property-triggers}` property.
             * Each trigger may have the following properties:
             * * `cls` The CSS class to apply.
             * * `handler` A method in the field to call upon click
             * * `align` `'start'` or `'end'` which end of the field the trigger should go.
             * * `weight` (Optional) Heigher weighted triggers gravitate towards the input field.
             * @config {Object}
             */triggers:null,/**
             * Specify `false` to prevent field from being highlighted when on external value changes
             * @config {Boolean}
             */highlightExternalChange:true,localizableProperties:['label','title'],autoSelect:false,/**
             * Sets the native `autocomplete` property of the underlying input element. For more information, please refer to
             * [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
             * @config {String}
             * @default
             */autoComplete:'off'};}},{key:"errorTip",get:function get(){return Field._errorTip||(Field._errorTip=new Tooltip({cls:'b-field-error-tip',forSelector:'.b-field.b-invalid .b-field-inner',align:'l-r',scrollAction:'realign',onBeforeShow:function onBeforeShow(){var tip=this,field=IdHelper.fromElement(tip.activeTarget);if(field){var errors=field.getErrors();if(errors){tip.html=errors.join('<br>');tip.field=field;return true;}}// Veto show
return false;}}));}}]);return Field;}(Badge(Widget));/**
 * Base class for field triggers May be configured with a `cls` and a `handler` which is a function (or name of a function)
 * in the owning Field.
 * @extends Common/widget/Widget
 */exports.Field=Field;Field.Trigger=/*#__PURE__*/function(_Widget6){_inherits2(FieldTrigger,_Widget6);function FieldTrigger(){_classCallCheck2(this,FieldTrigger);return _possibleConstructorReturn2(this,_getPrototypeOf2(FieldTrigger).apply(this,arguments));}_createClass2(FieldTrigger,[{key:"template",value:function template(){return"<div class=\"b-icon b-align-".concat(this.align||'end',"\"></div>");}},{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(FieldTrigger.prototype),"construct",this).call(this,config);EventHelper.on({element:this.element,click:{handler:'onClick',thisObj:this},mousedown:{handler:'onMousedown',thisObj:this}});}},{key:"onClick",value:function onClick(e){var me=this,field=me.field,handler=typeof me.handler==='function'?me.handler:field[me.handler];if(field.disabled||field.readOnly){return;}if(handler&&field.trigger('trigger',{trigger:me})!==false){handler.call(field,e);}}},{key:"onMousedown",value:function onMousedown(e){var field=this.field,isKeyEvent='key'in e;// If it's a touch tap on the trigger of an editable, then
// avoid the keyboard by setting the field to not be editable
// before focusing the field. Reset to be editable after focusing
// has happened. Keyboard will not appear.
if(!isKeyEvent&&DomHelper.isTouchEvent){if(field.editable){field.editable=false;field.setTimeout(function(){return field.editable=true;},500);}}e.preventDefault();if(document.activeElement!==field.input){field.focus();}}},{key:"field",get:function get(){return this.parent;}}],[{key:"defaultConfig",get:function get(){return{align:null};}}]);return FieldTrigger;}(Widget);Field.SpinTrigger=/*#__PURE__*/function(_Field$Trigger){_inherits2(SpinTrigger,_Field$Trigger);function SpinTrigger(){_classCallCheck2(this,SpinTrigger);return _possibleConstructorReturn2(this,_getPrototypeOf2(SpinTrigger).apply(this,arguments));}_createClass2(SpinTrigger,[{key:"template",value:function template(){return"<div class=\"b-icon b-align-".concat(this.align||'end',"\">\n                    <div reference=\"upButton\" class=\"b-icon b-spin-up\"></div>\n                    <div reference=\"downButton\" class=\"b-icon b-spin-down\"></div>\n                </div>");}},{key:"onClick",value:function onClick(e){var me=this,field=me.field;if(field.disabled){return;}if(e.target===me.upButton){field.doSpinUp();}else if(e.target===me.downButton){field.doSpinDown();}}},{key:"repeat",set:function set(repeat){var me=this;if(repeat){me.clickRepeater=new ClickRepeater(Object.assign({element:me.element},repeat));}else if(me.clickrepeater){me.clickRepeater.destroy();me.clickrepeater=null;}}}],[{key:"defaultConfig",get:function get(){return{repeat:true};}}]);return SpinTrigger;}(Field.Trigger);// Those two classes are defined in a very unusual manner, have to specify names directly
Field.Trigger._$name='FieldTrigger';Field.SpinTrigger._$name='SpinTrigger';Field._$name='Field';BryntumWidgetAdapterRegister.register('trigger',Field.Trigger);BryntumWidgetAdapterRegister.register('spintrigger',Field.SpinTrigger);/**
 * @module Common/widget/Checkbox
 */ /**
 * Checkbox field, wraps <code>&lt;input type="checkbox"&gt;</code>.
 * Color can be specified and you can optionally configure {@link #config-text}
 * to display in a label to the right of the checkbox in addition to a standard
 * field {@link #config-label}.
 *
 * @extends Common/widget/Field
 *
 * @example
 * // checkbox with a label and a handler
 * let checkbox = new Checkbox({
 *   text: 'Check me, please',
 *   onAction: () => {}
 * });
 *
 * @classType checkbox
 * @externalexample widget/Checkbox.js
 */var Checkbox=/*#__PURE__*/function(_Field){_inherits2(Checkbox,_Field);function Checkbox(){_classCallCheck2(this,Checkbox);return _possibleConstructorReturn2(this,_getPrototypeOf2(Checkbox).apply(this,arguments));}_createClass2(Checkbox,[{key:"construct",//endregion
//region Init
value:function construct(config){_get2(_getPrototypeOf2(Checkbox.prototype),"construct",this).call(this,config);var me=this;if(me.initialConfig.readOnly)me.readOnly=true;}},{key:"inputTemplate",value:function inputTemplate(){var me=this;return TemplateHelper.tpl(_templateObject3(),me.id,me.id,me.text||'');}},{key:"check",/**
     * Check the box
     */value:function check(){this.checked=true;}/**
     * Uncheck the box
     */},{key:"uncheck",value:function uncheck(){this.checked=false;}/**
     * Toggle checked state. If you want to force a certain state, assign to {@link #property-checked} instead.
     */},{key:"toggle",value:function toggle(){this.checked=!this.checked;}//endregion
//region Events
/**
     * Triggers events when user toggles the checkbox
     * @fires beforeChange
     * @fires change
     * @fires action
     * @private
     */},{key:"internalOnChange",value:function internalOnChange(event){/**
         * Fired before checkbox is toggled. Returning false from a listener prevents the checkbox from being toggled.
         * @event beforeChange
         * @preventable
         * @param {Common.widget.Checkbox} source Checkbox
         * @param {Boolean} checked Checked or not
         */ /**
         * Fired when checkbox is toggled
         * @event change
         * @param {Common.widget.Checkbox} source Checkbox
         * @param {Boolean} checked Checked or not
         */this.triggerChange(true);}/**
     * Triggers events when checked state is changed
     * @fires beforeChange
     * @fires change
     * @fires action
     * @private
     */},{key:"triggerChange",value:function triggerChange(userAction){var me=this;// Since Widget has Events mixed in configured with 'callOnFunctions' this will also call onBeforeChange, onChange and onAction
var prevented=!me.callPreventable('change',{checked:me.input.checked,userAction:userAction},function(eventObject){/**
                * User performed the default action (toggled the checkbox)
                * @event action
                * @param {Common.widget.Checkbox} source Checkbox
                * @param {Boolean} checked Checked or not
                */me.trigger('action',eventObject);return true;});// If prevented need to rollback the checkbox input
if(prevented){// Input change is not preventable, so need to revert the changes
// The change event does not fire on programmatic change of input, so no need to suspend
me.input.checked=!me.input.checked;}}//endregion
},{key:"element",set:function set(element){var me=this;_set(_getPrototypeOf2(Checkbox.prototype),"element",element,this,true);if(me.color){me.element.classList.add(me.color);}if(me.text){me.element.classList.add('b-text');}},get:function get(){return _get2(_getPrototypeOf2(Checkbox.prototype),"element",this);}//endregion
//region Toggle
/**
     * Get/set label
     * @property {String}
     */},{key:"text",get:function get(){return this._text;},set:function set(value){this._text=value;if(this.textLabel){this.textLabel.innerHTML=value;}}/**
     * Get/set value
     * @property {String}
     */},{key:"value",get:function get(){return this.input.value;},set:function set(value){this.input.value=value;}/**
     * Get/set checked state
     * @property {Boolean}
     */},{key:"checked",get:function get(){return this.input.checked;},set:function set(checked){checked=Boolean(checked);// Only do action if change needed.
if(this.input.checked!==checked){this.input.checked=checked;// The change event does not fire on programmatic change of input.
if(!this.isConfiguring){this.triggerChange(false);}}}/**
     * Get/set readonly state (disabled underlying input)
     * @property {Boolean}
     */},{key:"readOnly",get:function get(){return this._readOnly;},set:function set(readOnly){this._readOnly=readOnly;this.element.classList[readOnly?'add':'remove']('b-readonly');this.input.disabled=readOnly;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Text to display on checkbox label
             * @config {String}
             */text:'',/**
             * Checkbox color, must have match in css
             * @config {String}
             */color:null,/**
             * Sets input fields value attribute
             * @config {String}
             */value:'',defaultBindProperty:'value'};}}]);return Checkbox;}(Field);exports.Checkbox=Checkbox;Checkbox._$name='Checkbox';BryntumWidgetAdapterRegister.register('checkbox',Checkbox);BryntumWidgetAdapterRegister.register('check',Checkbox);/**
 * @module Common/mixin/InstancePlugin
 */ /**
 * Base class for plugins. Published functions will be available from the other class. `this` in published functions is
 * referenced to the plugin, access the other class using `this.pluggedInto`.
 *
 * Observe that plugin doesn't apply itself on class level but instead on instance level. Plugin is its own instance
 * that can have own functions and data that is not exposed to target class.
 *
 * Functions can be published in four ways:
 *
 * * `assign` (when function is not already available on target)
 * * `before` (when function is already available on target, will be called before original function)
 * * `after` (when function is already available on target, will be called after original function)
 * * `override` (replaces function on target, but old function can be reached)
 *
 * To configure which functions get published and in what way, specify `pluginConfig` getter on plugin:
 *
 * ```
 * class Sort extends InstancePlugin {
 *   static get pluginConfig {
 *      return {
 *          before   : ['init'],
 *          after    : ['destroy', 'onElementClick'],
 *          override : ['render']
 *      };
 *   }
 * }
 * ```
 *
 * @mixes Common/localization/Localizable
 * @mixes Common/mixin/Events
 */var InstancePlugin=/*#__PURE__*/function(_Localizable2){_inherits2(InstancePlugin,_Localizable2);function InstancePlugin(){_classCallCheck2(this,InstancePlugin);return _possibleConstructorReturn2(this,_getPrototypeOf2(InstancePlugin).apply(this,arguments));}_createClass2(InstancePlugin,[{key:"construct",/**
     * Initializes the plugin.
     * @internal
     * @param plugInto Target instance to plug into
     * @function constructor
     */value:function construct(plugInto,config){/**
         * The Widget which was passed into the constructor,
         * which is the Widget we are providing extra services for.
         * @property {Common.widget.Widget}
         * @readonly
         */this.client=plugInto;_get2(_getPrototypeOf2(InstancePlugin.prototype),"construct",this).call(this,config);this.applyPluginConfig(plugInto);}/**
     * Applies config as found in plugInto.pluginConfig, or published all if no config found.
     * @private
     * @param plugInto Target instance to plug into
     */},{key:"applyPluginConfig",value:function applyPluginConfig(plugInto){var me=this,config=me.pluginConfig||me.constructor.pluginConfig,assign=config&&config.assign,chain=config&&(config.chain||config.after),before=config&&config.before,override=config&&config.override;me.pluggedInto=plugInto;// fill unpublished[] with all fnNames not in chain or override
// apply chains and overrides.
if(assign)me.applyAssign(plugInto,assign);if(chain)me.applyChain(plugInto,chain);if(before)me.applyChain(plugInto,before,false);if(override)me.applyOverride(plugInto,override);}/**
     * Applies assigning for specified functions.
     * @private
     * @param plugInto
     * @param fnNames
     */},{key:"applyAssign",value:function applyAssign(plugInto,fnNames){var _this15=this;fnNames.forEach(function(fnName){return _this15.assign(plugInto,fnName);});}/**
     * Applys chaining for specified functions.
     * @private
     * @param plugInto
     * @param fnNames
     * @param after
     */},{key:"applyChain",value:function applyChain(plugInto,fnNames){var after=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var me=this;fnNames.forEach(function(fnName){if(plugInto[fnName]){me.chain(plugInto,fnName,after);}else{me.assign(plugInto,fnName);}});}/**
     * Applies override for specified functions.
     * @private
     * @param plugInto
     * @param fnNames
     */},{key:"applyOverride",value:function applyOverride(plugInto,fnNames){var _this16=this;var me=this;if(!me.overridden)me.overridden={};fnNames.forEach(function(fnName){if(!me[fnName]){throw new Error(_this16.L('overrideFnMissing',{plugIntoName:plugInto.$name,pluginName:me.$name,fnName:fnName}));}// override
if(typeof plugInto[fnName]==='function')me.overridden[fnName]=plugInto[fnName].bind(plugInto);plugInto[fnName]=me[fnName].bind(me);});}/**
     * Assigns specified functions.
     * @private
     * @param plugInto
     * @param fnName
     */},{key:"assign",value:function assign(plugInto,fnName){var me=this,property=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(me),fnName);if(property&&(property.get||property.set)){// getter/setter, define corresponding property on target
Object.defineProperty(plugInto,fnName,{configurable:true,enumerable:true,get:property.get&&property.get.bind(me),set:property.set&&property.set.bind(me)});}else{plugInto[fnName]=me[fnName].bind(me);}}//endregion
//region Chaining
/**
     * Chains functions. When the function is called on the target class all functions in the chain will be called in
     * the order they where added.
     * @private
     * @param plugInto
     * @param key
     */},{key:"chain",value:function chain(plugInto,key){var after=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var me=this,chain=plugInto.pluginFunctionChain||(plugInto.pluginFunctionChain={});// duplicate function, make chain and use function to run all functions in it upon call...
if(!chain[key]){chain[key]=[plugInto[key].bind(plugInto)];}if(!me[key]){throw new Error(this.L('fnMissing',{plugIntoName:plugInto.$name,pluginName:me.$name,fnName:key}));//throw new Error(`Trying to plug function ${plugInto.$name}#${key}, but InstancePlugin ${me.$name}#${key} does not exist`);
}if(after){chain[key].push(me[key].bind(me));}else{chain[key].unshift(me[key].bind(me));}// use function to run all functions in chain on call
plugInto[key]=function(){for(var _len27=arguments.length,params=new Array(_len27),_key27=0;_key27<_len27;_key27++){params[_key27]=arguments[_key27];}return me.functionChainRunner.apply(me,[key].concat(params));};}/**
     * Used to run multiple plugged in functions with the same name, see chain above. Returning false from a
     * function will abort chain.
     * @private
     * @param fnName
     * @param params
     * @returns value returned from last function in chain (or false if any returns false)
     */},{key:"functionChainRunner",value:function functionChainRunner(fnName){var chain=this.pluggedInto.pluginFunctionChain[fnName];var returnValue;// changed from for..of to try and fix Edge problems
for(var _len28=arguments.length,params=new Array(_len28>1?_len28-1:0),_key28=1;_key28<_len28;_key28++){params[_key28-1]=arguments[_key28];}for(var i=0;i<chain.length;i++){returnValue=chain[i].apply(chain,params);if(returnValue===false)return false;}return returnValue;}//endregion
/**
     * Get/set the plugin disabled state
     * @property {Boolean}
     */},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;}}],[{key:"initPlugins",//endregion
//region Init
/**
     * Call from another instance to add plugins to it.
     * @example
     * InstancePlugin.initPlugins(this, Search, Stripe);
     * @param plugInto Instance to mix into (usually this)
     * @param plugins Classes to plug in
     * @internal
     */value:function initPlugins(plugInto){var property=plugInto.plugins||(plugInto.plugins={});for(var _len29=arguments.length,plugins=new Array(_len29>1?_len29-1:0),_key29=1;_key29<_len29;_key29++){plugins[_key29-1]=arguments[_key29];}for(var _i9=0,_plugins=plugins;_i9<_plugins.length;_i9++){var PluginClass=_plugins[_i9];property[PluginClass.$name]=new PluginClass(plugInto);}}},{key:"defaultConfig",//region Config
get:function get(){return{/**
             * The plugin disabled state
             * @config {Boolean}
             * @default
             */disabled:false};}}]);return InstancePlugin;}(Localizable(Events(Base)));exports.InstancePlugin=InstancePlugin;InstancePlugin._$name='InstancePlugin';/**
 * @module Common/mixin/Pluggable
 */ /**
 * Enables using plugins for a class by specifing property plugins as an array of plugin classes. If only a single plugin
 * is used, just give the plugin class instead of an array. This class isn't required for using plugins, just makes it
 * easier. Without mixin you can otherwise use `InstancePlugin.initPlugins(this, PluginClass)`.
 *
 * @example
 * new Store({
 *   plugins: [PluginClass, ...]
 * });
 *
 * @mixin
 */var Pluggable=function Pluggable(Target){return(/*#__PURE__*/function(_ref21){_inherits2(Pluggable,_ref21);function Pluggable(){_classCallCheck2(this,Pluggable);return _possibleConstructorReturn2(this,_getPrototypeOf2(Pluggable).apply(this,arguments));}_createClass2(Pluggable,[{key:"initPlugins",/**
     * Template method which may be implemented in subclasses to initialize any plugins.
     * This method is empty in the `Pluggable` base class.
     * @internal
     */value:function initPlugins(){}/**
     * Adds plugins to an instance.
     * @param plugins Plugins to add
     */},{key:"addPlugins",value:function addPlugins(){for(var _len30=arguments.length,plugins=new Array(_len30),_key30=0;_key30<_len30;_key30++){plugins[_key30]=arguments[_key30];}InstancePlugin.initPlugins.apply(InstancePlugin,[this].concat(plugins));}/**
     * Checks if instance has plugin.
     * @param pluginClassOrName Plugin or name to check for
     * @returns {Boolean}
     */},{key:"hasPlugin",value:function hasPlugin(pluginClassOrName){return this.getPlugin(pluginClassOrName)!=null;}/**
     * Get a plugin instance.
     * @param pluginClassOrName
     * @returns {Object}
     */},{key:"getPlugin",value:function getPlugin(pluginClassOrName){if(typeof pluginClassOrName==='function')pluginClassOrName=pluginClassOrName.$name;return this.plugins&&this.plugins[pluginClassOrName];}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"plugins",/**
     * Specify plugins (an array of classes) in config
     * @config {Function[]} plugins
     * @category Misc
     */ /**
     * Map of applied plugins
     * @property {Object}
     * @readonly
     * @category Misc
     */get:function get(){if(!this._plugins){this._plugins={};}return this._plugins;},set:function set(plugins){if(plugins){if(!Array.isArray(plugins))plugins=[plugins];InstancePlugin.initPlugins.apply(InstancePlugin,[this].concat(_toConsumableArray(plugins)));}this.initPlugins();}},{key:"widgetClass",get:function get(){}}]);return Pluggable;}(Target||Base));};/**
 * @module Common/mixin/State
 */ /**
 * Mixin that simplifies handling state for an ui component. Classes that uses this mixin must implement `getState()` and
 * `applyState(state)`.
 *
 * ```
 * class MyUIComponent extends State() {
 *   getState() {
 *     return {
 *       this.text,
 *       this.size
 *     }
 *   }
 *
 *   applyState(state) {
 *      this.text = state.text;
 *      this.size = state.size;
 *   }
 * }
 * ```
 *
 * @demo state
 *
 * @mixin
 */exports.Pluggable=Pluggable;var State=function State(Target){return(/*#__PURE__*/function(_ref22){_inherits2(State,_ref22);function State(){_classCallCheck2(this,State);return _possibleConstructorReturn2(this,_getPrototypeOf2(State).apply(this,arguments));}_createClass2(State,[{key:"state",//getState() {}
//applyState(State) {}
/**
     * Gets or sets a component´s state
     * @property {Object}
     */get:function get(){this._state=this.getState();return this._state;},set:function set(state){this._state=state;this.applyState(state);}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return State;}(Target||Base));};/**
 * @module Common/data/stm/mixin/ModelStm
 */exports.State=State;var STM_PROP=Symbol('STM_PROP');/**
 * Mixin making a model compatible with {@link Common/data/stm/StateTrackingManager}
 *
 * @mixin
 */var ModelStm=function ModelStm(Target){return(/*#__PURE__*/function(_ref23){_inherits2(ModelStm,_ref23);function ModelStm(){_classCallCheck2(this,ModelStm);return _possibleConstructorReturn2(this,_getPrototypeOf2(ModelStm).apply(this,arguments));}_createClass2(ModelStm,[{key:"joinStore",value:function joinStore(store){_get2(_getPrototypeOf2(ModelStm.prototype),"joinStore",this)&&_get2(_getPrototypeOf2(ModelStm.prototype),"joinStore",this).call(this,store);if(!this.stm){this.stm=store.stm;}}},{key:"unJoinStore",value:function unJoinStore(store){if(this.stm===store.stm){this.stm=null;}_get2(_getPrototypeOf2(ModelStm.prototype),"unJoinStore",this)&&_get2(_getPrototypeOf2(ModelStm.prototype),"unJoinStore",this).call(this,store);}},{key:"beforeSet",/**
     * Overridden to collect initial data for the fields about to be changed.
     * The method is called from within {@link Common/data/Model#function-set} method.
     *
     * @private
     */value:function beforeSet(field,value,silent,fromRelationUpdate){var _this17=this;var preResult=_get2(_getPrototypeOf2(ModelStm.prototype),"beforeSet",this)?_get2(_getPrototypeOf2(ModelStm.prototype),"beforeSet",this).call(this,field,value,silent,fromRelationUpdate):[];var stm=this.stm;if(stm&&!stm.disabled){var newDataCandidate,oldDataCandidate;if(_typeof(field)=='object'){var _Object$keys$reduce=Object.keys(field).reduce(function(data,fName){data[0][fName]=field[fName];data[1][fName]=_this17.get(fName);return data;},[{},{}]);var _Object$keys$reduce2=_slicedToArray(_Object$keys$reduce,2);newDataCandidate=_Object$keys$reduce2[0];oldDataCandidate=_Object$keys$reduce2[1];}else{newDataCandidate=_defineProperty({},field,value);oldDataCandidate=_defineProperty({},field,this.get(field));}preResult.push([newDataCandidate,oldDataCandidate]);}return preResult;}/**
     * Overridden to store initial data of the changed fields and to notify STM
     * manager about the change action if anything has been changed in result.
     *
     * The method is called from within {@link Common/data/Model#function-set} method.
     *
     * @private
     */},{key:"afterSet",value:function afterSet(field,value,silent,fromRelationUpdate,beforeResult,wasSet){var stm=this.stm;if(stm&&!stm.disabled){var preResult=beforeResult.pop();if(wasSet){var _preResult=_slicedToArray(preResult,2),newDataCandidate=_preResult[0],oldDataCandidate=_preResult[1];var _Object$keys$reduce3=Object.keys(wasSet).reduce(function(data,fName){data[0][fName]=newDataCandidate[fName];data[1][fName]=oldDataCandidate[fName];return data;},[{},{}]),_Object$keys$reduce4=_slicedToArray(_Object$keys$reduce3,2),newData=_Object$keys$reduce4[0],oldData=_Object$keys$reduce4[1];stm.onModelUpdate(this,newData,oldData);}}_get2(_getPrototypeOf2(ModelStm.prototype),"afterSet",this)&&_get2(_getPrototypeOf2(ModelStm.prototype),"afterSet",this).call(this,field,value,silent,fromRelationUpdate,beforeResult,wasSet);}/**
     * Called from {@link Common/data/mixin/TreeNode#function-insertChild} to obtain inserted
     * records initial parents and parent index, to be able to restore the state back upon undo.
     *
     * @param {Common.data.Model[]} childRecords
     * @return {Array} Array of results from this call and any of super calls if any.
     *               This result is consumed by {@link #function-afterInsertChild} which pops
     *               from the result array to take only results of this method call and leave
     *               results from super calls untouched.
     *
     * @private
     */},{key:"beforeInsertChild",value:function beforeInsertChild(childRecords){var _this18=this;var preResult=_get2(_getPrototypeOf2(ModelStm.prototype),"beforeInsertChild",this)?_get2(_getPrototypeOf2(ModelStm.prototype),"beforeInsertChild",this).call(this,childRecords):[];var stm=this.stm;if(stm&&!stm.disabled){preResult.push(childRecords.reduce(function(result,childRecord){// We are interested only in records from the same root node.
// Removing (which is done before insertion) of the records
// from another root (and store) should
// be handled by that store STM instance.
if(childRecord.root===_this18.root){result.set(childRecord,{parent:childRecord.parent,index:childRecord.parent?childRecord.parentIndex:undefined});}return result;},new Map()));}return preResult;}/**
     * Called from {@link Common/data/mixin/TreeNode#function-insertChild} to notify {@link Common/data/stm/StateTrackingManager}
     * about children insertion. Provides it with all necessary context information collected
     * in {@link #function-beforeInsertChild} required to undo/redo the action.
     *
     * @private
     */},{key:"afterInsertChild",value:function afterInsertChild(index,childRecords,beforeResult,inserted){var stm=this.stm;if(stm&&!stm.disabled){var context=beforeResult.pop();if(inserted){stm.onModelInsertChild(this,index,inserted,context);}}_get2(_getPrototypeOf2(ModelStm.prototype),"afterInsertChild",this)&&_get2(_getPrototypeOf2(ModelStm.prototype),"afterInsertChild",this).call(this,index,childRecords,beforeResult,inserted);}/**
     * Called from {@link Common/data/mixin/TreeNode#function-removeChild} to obtain removed
     * records initial parent index, to be able to restore the state back upon undo.
     *
     * @param {Common.data.Model[]} childRecords
     * @param {Boolean} isMove
     * @return {Array} Array of results from this call and any of super calls if any.
     *               This result is consumed by {@link #function-afterRemoveChild} which pops
     *               from the result array to take only results of this method call and leave
     *               results from super calls untouched.
     *
     * @private
     */},{key:"beforeRemoveChild",value:function beforeRemoveChild(childRecords,isMove){var preResult=_get2(_getPrototypeOf2(ModelStm.prototype),"beforeRemoveChild",this)?_get2(_getPrototypeOf2(ModelStm.prototype),"beforeRemoveChild",this).call(this,childRecords,isMove):[];var stm=this.stm;// If it's move then InsertChildAction will handle this case
if(stm&&!stm.disabled&&!isMove){// Child records we receive are guaranteed to be direct children
// of this node, see Common/data/mixin/TreeNode#removeChild method
// Here we interested in the original index for each child removed,
// we collect it and store for future use in RemoveChildAction
preResult.push(childRecords.reduce(function(result,childRecord){result.set(childRecord,childRecord.parentIndex);return result;},new Map()));}return preResult;}/**
     * Called from {@link Common/data/mixin/TreeNode#function-removeChild} to notify {@link Common/data/stm/StateTrackingManager}
     * about children removing. Provides it with all necessary context information collected
     * in {@link #function-beforeRemoveChild} required to undo/redo the action.
     *
     * @private
     */},{key:"afterRemoveChild",value:function afterRemoveChild(childRecords,beforeResult,isMove){var stm=this.stm;// If it's move then InsertChildAction will handle this case
if(stm&&!stm.disabled&&!isMove){var context=beforeResult.pop();if(childRecords&&childRecords.length){stm.onModelRemoveChild(this,childRecords,context);}}_get2(_getPrototypeOf2(ModelStm.prototype),"afterRemoveChild",this)&&_get2(_getPrototypeOf2(ModelStm.prototype),"afterRemoveChild",this).call(this,childRecords,beforeResult,isMove);}},{key:"stm",get:function get(){return this[STM_PROP];},set:function set(stm){this[STM_PROP]=stm;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to STM manager
             * @config {Common.data.stm.StateTrackingManager}
             * @default
             * @category Misc
             */stm:null};}}]);return ModelStm;}(Target||Base));};/**
 * @module Common/data/mixin/TreeNode
 */ /**
 * Mixin for Model with tree node related functionality. This class is mixed into the {@link Common/data/Model} class.
 *
 * ## Adding and removing child nodes
 * ```
 * const parent = store.getById(1),
 *
 * firstBorn = parent.insertChild({
 *      name : 'Child node'
 *  }, parent.children[0]); // Insert a child at a specific place in the children array
 *
 * parent.removeChild(parent.children[0]); // Removes a child node
 * parent.appendChild({ name : 'New child node' }); // Appends a child node
 * ```
 *
 * @mixin
 */var TreeNode=function TreeNode(Target){return(/*#__PURE__*/function(_ref24){_inherits2(TreeNode,_ref24);function TreeNode(){_classCallCheck2(this,TreeNode);return _possibleConstructorReturn2(this,_getPrototypeOf2(TreeNode).apply(this,arguments));}_createClass2(TreeNode,[{key:"ingestChildren",/**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     * @readonly
     * @field {String|Number} parentId
     */value:function ingestChildren(childRecord){var stores=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.stores;var store=stores[0],MyClass=this.constructor,inProcessChildren=this.inProcessChildren;if(childRecord===true){if(inProcessChildren){return true;}return[];}if(childRecord){if(!Array.isArray(childRecord)){childRecord=[childRecord];}var i=0,len=childRecord.length,result=[],child;for(;i<len;i++){child=childRecord[i];child=child instanceof Model?child:store?store.createRecord(child):new MyClass(child,null,null,true);result.push(child);}return result;}}/**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data.
     * @member {Common.data.Model[]} children
     * @category Parent & children
     */ /**
     * Called during creation to also turn any children into Models joined to the same stores as this model
     * @internal
     * @category Parent & children
     */},{key:"processChildren",value:function processChildren(){var stores=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.stores;var me=this;me.inProcessChildren=true;var children=me.ingestChildren(me.data[me.constructor.childrenField],stores);if(children){if(children.length){// We are processing a remote load
if(me.children===true){me.children=[];}me.appendChild(children);}// Flagged for load on demand
else if(children===true){me.children=true;}}me.inProcessChildren=false;}/**
     * This property is `true` if this record has all expanded ancestors and is therefore
     * eligible for inclusion in a UI.
     * @property {Boolean}
     * @readonly
     * @category Parent & children
     */},{key:"ancestorsExpanded",value:function ancestorsExpanded(store){var parent=this.parent;return!parent||parent.isExpanded(store)&&parent.ancestorsExpanded(store);}/**
     * Used by stores to assess the record's collapsed/expanded state in that store.
     * @param {Common.data.Store} store
     * @category Parent & children
     */},{key:"isExpanded",value:function isExpanded(store){var mapMeta=this.instanceMeta(store.id);// Default initial expanded/collapsed state when in the store
// to the record's original expanded property.
if(!mapMeta.hasOwnProperty('collapsed')){mapMeta.collapsed=!this.expanded;}return!mapMeta.collapsed;}// A read-only property. It provides the initial state upon load
// The UI's expanded/collapsed state is in the store's meta map.
},{key:"getDescendantCount",/**
     * Count visible (expanded)/all children for this node, optionally specifying for which store.
     * @param {Boolean} [onlyVisible] Specify `true` to only count visible (expanded) children.
     * @param {Common.data.Store} [store] A Store to which this node belongs
     * @returns {Number}
     * @category Parent & children
     */value:function getDescendantCount(){var onlyVisible=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var store=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.firstStore;var children=this.children;if(!children||!Array.isArray(children)||onlyVisible&&!this.isExpanded(store)){return 0;}return children.reduce(function(count,child){return count+child.getDescendantCount(onlyVisible);},children.length);}/**
     * Retrieve all children (by traversing sub nodes)
     * @returns {Common.data.Model[]}
     * @category Parent & children
     */},{key:"traverse",/**
     * Traverses all child nodes recursively calling the passed function
     * on a target node **before** iterating the child nodes.
     * @param fn
     * @category Parent & children
     */value:function traverse(fn){var skipSelf=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var children=this.children;if(!skipSelf){fn.call(this,this);}// Simply testing whether there is non-zero children length
// is 10x faster than using this.isLoaded
for(var i=0,l=children&&children.length;i<l;i++){children[i].traverse(fn);}}/**
     * Traverses all child nodes recursively calling the passed function
     * on child nodes of a target **before** calling it it on the node.
     * @param fn
     * @category Parent & children
     */},{key:"traverseBefore",value:function traverseBefore(fn){var skipSelf=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var children=this.children;// Simply testing whether there is non-zero children length
// is 10x faster than using this.isLoaded
for(var i=0,l=children&&children.length;i<l;i++){children[i].traverse(fn);}if(!skipSelf){fn.call(this,this);}}/**
     * Traverses child nodes recursively while fn returns true
     * @param {Function} fn
     * @category Parent & children
     * @returns {Boolean}
     */},{key:"traverseWhile",value:function traverseWhile(fn){var skipSelf=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this;var goOn=true;if(!skipSelf){goOn=fn.call(me,me)!==false;}if(goOn&&me.isLoaded){goOn=me.children.every(function(child){return child.traverseWhile(fn);});}return goOn;}/**
     * Bubbles up from this node, calling the specified function with each node.
     *
     * @param {Function} fn
     * @category Parent & children
     */},{key:"bubble",value:function bubble(fn){var skipSelf=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this;if(!skipSelf){fn.call(me,me);}while(me.parent){me=me.parent;fn.call(me,me);}}/**
     * Bubbles up from this node, calling the specified function with each node,
     * while the function returns true.
     *
     * @param {Function} fn
     * @category Parent & children
     * @return {Boolean}
     */},{key:"bubbleWhile",value:function bubbleWhile(fn){var skipSelf=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,goOn=true;if(!skipSelf){goOn=fn.call(me,me);}while(goOn&&me.parent){me=me.parent;goOn=fn.call(me,me);}return goOn;}/**
     * Checks if this model contain another model as one of it's descendants
     *
     * @param {Common.data.Model|String|Number} childOrId child node or id
     * @category Parent & children
     * @returns {Boolean}
     */},{key:"contains",value:function contains(childOrId){if(childOrId&&_typeof(childOrId)==='object'){childOrId=childOrId.id;}return!this.traverseWhile(function(node){return node.id!=childOrId;});}},{key:"getTopParent",value:function getTopParent(all){var result;if(all){result=[];this.bubbleWhile(function(t){result.push(t);return t.parent&&!t.parent.isRoot;});}else{result=null;this.bubbleWhile(function(t){if(!t.parent){result=t;}return t.parent&&!t.parent.isRoot;});}return result;}/**
     * Append a child record(s) to any current children.
     * @param {Common.data.Model|Common.data.Model[]} childRecord
     * @param {Boolean} [silent] Specify true to suppress events
     * @returns {Common.data.Model|Common.data.Model[]}
     * @category Parent & children
     */},{key:"appendChild",value:function appendChild(childRecord){var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return this.insertChild(childRecord,null,silent);}/**
     * Insert a child record(s) before an existing child record.
     * @param {Common.data.Model|Common.data.Model[]} childRecord
     * @param {Common.data.Model} [beforeRecord] insert child before this record
     * @param {Boolean} [silent] Specify true to suppress events
     * @returns {Common.data.Model|Common.data.Model[]}
     * @category Parent & children
     */},{key:"insertChild",value:function insertChild(childRecord,beforeRecord){var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// Handle deprecated signature
if(typeof childRecord==='number'){var _index2=childRecord;childRecord=beforeRecord;beforeRecord=this.children[_index2];}var me=this,wasLeaf=me.isLeaf,returnArray=Array.isArray(childRecord);if(!silent){if(!me.stores.every(function(s){return s.trigger('beforeAdd',{records:childRecord,parent:me})!==false;})){return null;}}// This call makes child record an array containing Models
childRecord=me.ingestChildren(childRecord);// NOTE: see comment in Model::set() about before/in/after calls approach.
var index=beforeRecord?beforeRecord.parentIndex:me.children?me.children.length:0,preResult=me.beforeInsertChild?me.beforeInsertChild(childRecord):undefined,inserted=me.internalAppendInsert(childRecord,beforeRecord,silent);// If we've transitioned to being a branch node, signal a change event
// so that the UI updates.
// Not if it's due to root node loading. StoreTree#onNodeAddChild
// for the rootNode will fire a store refresh.
if(me.isLeaf!==wasLeaf&&!me.root.isLoading&&!silent){me.stores.forEach(function(s){var changes={isLeaf:false};s.trigger('update',{record:me,changes:changes});s.trigger('change',{action:'update',record:me,changes:changes});});}me.afterInsertChild&&me.afterInsertChild(index,childRecord,preResult,inserted);return returnArray||!inserted?inserted:inserted[0];}},{key:"internalAppendInsert",value:function internalAppendInsert(newRecords,beforeRecord,silent){var me=this,stores=me.stores,root=me.root,rootStore=root.firstStore,isMove={};var isNoop,start,i,newRecordsCloned;// The reference node must be one of our children. If not, fall back to an append.
if(beforeRecord&&beforeRecord.parent!==me){beforeRecord=null;}// If the records starting at insertAt or (insertAt - 1), are the same sequence
// that we are being asked to add, this is a no-op.
if(me.children){var children=me.children,insertAt=beforeRecord?beforeRecord.parentIndex:children.length;if(children[start=insertAt]===newRecords[0]||children[start=insertAt-1]===newRecords[0]){for(isNoop=true,i=0;isNoop&&i<newRecords.length;i++){if(newRecords[i]!==children[start+i]){isNoop=false;}}}}// Fulfill the contract of appendChild/insertChild even if we did not have to do anything.
// Callers must be able to correctly postprocess the returned value as an array.
if(isNoop){return newRecords;}// Remove incoming child nodes from any current parent.
for(i=0;i<newRecords.length;i++){var newRecord=newRecords[i],oldParent=newRecord.parent;// Store added should not be modified for adds
// caused by moving.
isMove[newRecord.id]=newRecord.root===root;// Check if any descendants of the added node are moves.
rootStore&&newRecord.traverse(function(r){if(r.root===root){isMove[r.id]=true;}});// If the new record has a parent, remove from that parent.
// This operation may be vetoed by listeners.
// If it is vetoed, then remove from the newRecords and do not
// set the parent property
if(oldParent&&oldParent.removeChild(newRecord,isMove[newRecord.id])===false){if(!newRecordsCloned){newRecords=newRecords.slice();newRecordsCloned=true;}newRecords.splice(i--,1);}else{var parentIdField=newRecord.constructor.parentIdField,parentId=me.isAutoRoot?null:me.id;newRecord.parent=me;newRecord.data[parentIdField]=parentId;// If we are in the recursive inclusion of children at construction
// time, or in a store load, that must not be a data modification.
// Otherwise, we have to signal a change
if(!(me.inProcessChildren||me.isLoading)){var toSet={parentId:parentId},modified=newRecord.meta.modified,oldParentId=oldParent?oldParent.id:null,wasSet=_defineProperty({},parentIdField,{value:me.id,oldValue:oldParentId});// Changing back to its original value
if(modified[parentIdField]===me.id){delete modified[parentIdField];}// Cache its original value
else if(!('parentId'in modified)){modified[parentIdField]=oldParentId;}newRecord.afterChange(toSet,wasSet);}}}// Still records to insert after beforeRemove listeners may have vetoed some
if(newRecords.length){var _insertAt=me.addToChildren(me.children||(me.children=[]),beforeRecord,newRecords);me.addToChildren(me.unfilteredChildren,beforeRecord,newRecords,true);stores.forEach(function(store){if(!store.chained){newRecords.forEach(function(newRecord){newRecord.instanceMeta(store.id).collapsed=!newRecord.expanded;newRecord.joinStore(store);});// Add to store (will also add any child records and trigger events)
store.onNodeAddChild(me,newRecords,_insertAt,isMove,silent);}});}return newRecords;}/**
     * Remove a child record. Only direct children of this node can be removed, others are ignored.
     * @param {Common.data.Model|Common.data.Model[]} childRecords The record(s) to remove
     * @param {Boolean} [isMove] Pass `true` if the record is being moved within the same store.
     * @category Parent & children
     */},{key:"removeChild",value:function removeChild(childRecords){var isMove=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,wasLeaf=me.isLeaf,children=me.children,stores=me.stores;if(!Array.isArray(childRecords)){childRecords=[childRecords];}childRecords=childRecords.filter(function(r){return r.parent===me;});// Allow store listeners to veto the beforeRemove event
var _iteratorNormalCompletion13=true;var _didIteratorError13=false;var _iteratorError13=undefined;try{for(var _iterator13=stores[Symbol.iterator](),_step13;!(_iteratorNormalCompletion13=(_step13=_iterator13.next()).done);_iteratorNormalCompletion13=true){var store=_step13.value;if(!store.chained){if(store.trigger('beforeRemove',{parent:me,records:childRecords,isMove:isMove})===false){return false;}}}}catch(err){_didIteratorError13=true;_iteratorError13=err;}finally{try{if(!_iteratorNormalCompletion13&&_iterator13.return!=null){_iterator13.return();}}finally{if(_didIteratorError13){throw _iteratorError13;}}}var preResult=me.beforeRemoveChild?me.beforeRemoveChild(childRecords,isMove):undefined;var _iteratorNormalCompletion14=true;var _didIteratorError14=false;var _iteratorError14=undefined;try{var _loop2=function _loop2(){var childRecord=_step14.value;var index=me.removeFromChildren(children,childRecord);me.removeFromChildren(me.unfilteredChildren,childRecord,true);stores.forEach(function(store){if(!store.chained){store.onNodeRemoveChild(me,[childRecord],index,isMove);}});childRecord.parent=childRecord.parentIndex=childRecord.unfilteredIndex=childRecord.nextSibling=childRecord.previousSibling=null;};for(var _iterator14=childRecords[Symbol.iterator](),_step14;!(_iteratorNormalCompletion14=(_step14=_iterator14.next()).done);_iteratorNormalCompletion14=true){_loop2();}// If we've transitioned to being a leaf node, signal a change event
// so that the UI updates
}catch(err){_didIteratorError14=true;_iteratorError14=err;}finally{try{if(!_iteratorNormalCompletion14&&_iterator14.return!=null){_iterator14.return();}}finally{if(_didIteratorError14){throw _iteratorError14;}}}if(me.isLeaf!==wasLeaf){me.stores.forEach(function(s){var changes={isLeaf:true};s.trigger('update',{record:me,changes:changes});s.trigger('change',{action:'update',record:me,changes:changes});});}me.afterRemoveChild&&me.afterRemoveChild(childRecords,preResult,isMove);}},{key:"clearChildren",value:function clearChildren(){var me=this,children=me.children,stores=me.stores;if(children){me.children=[];if(me.unfilteredChildren){me.unfilteredChildren=[];}stores.forEach(function(store){if(!store.chained){store.onNodeRemoveChild(me,children,0);}});}}/**
     * Removes all records from the rootNode
     * @private
     */},{key:"clear",value:function clear(){var me=this,stores=me.stores,children=me.children.slice();// only allow on root node, because we will be clearing everything
if(!me.isRoot)return;var _iteratorNormalCompletion15=true;var _didIteratorError15=false;var _iteratorError15=undefined;try{for(var _iterator15=stores[Symbol.iterator](),_step15;!(_iteratorNormalCompletion15=(_step15=_iterator15.next()).done);_iteratorNormalCompletion15=true){var store=_step15.value;if(!store.chained){if(store.trigger('beforeRemove',{parent:me,records:children,isMove:false,removingAll:true})===false){return false;}}}}catch(err){_didIteratorError15=true;_iteratorError15=err;}finally{try{if(!_iteratorNormalCompletion15&&_iterator15.return!=null){_iterator15.return();}}finally{if(_didIteratorError15){throw _iteratorError15;}}}me.children.length=0;stores.forEach(function(store){children.forEach(function(child){if(child.stores.includes(store)){// this will drill down the child, unregistering whole branch
child.unJoinStore(store);}child.parent=child.parentIndex=child.nextSibling=child.previousSibling=null;});store.storage.suspendEvents();store.storage.clear();store.storage.resumeEvents();store.added.clear();store.modified.clear();store.trigger('removeAll');store.trigger('change',{action:'removeall'});});}},{key:"updateChildrenIndex",value:function updateChildrenIndex(children){var unfiltered=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var indexName=unfiltered?'unfilteredIndex':'parentIndex';var previousSibling=null;for(var i=0;i<children.length;i++){var child=children[i];child[indexName]=i;if(!unfiltered){child.previousSibling=previousSibling;if(previousSibling){previousSibling.nextSibling=child;}// Last child never has a nextSibling
if(i===children.length-1){child.nextSibling=null;}previousSibling=child;}}}},{key:"addToChildren",value:function addToChildren(children,beforeRecord,newRecords){var unfiltered=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;if(children){var indexName=unfiltered?'unfilteredIndex':'parentIndex',index=beforeRecord?beforeRecord[indexName]:children.length;children.splice.apply(children,[index,0].concat(_toConsumableArray(newRecords)));this.updateChildrenIndex(children,unfiltered);return index;}}},{key:"removeFromChildren",value:function removeFromChildren(children,childRecord){var unfiltered=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(children){var indexName=unfiltered?'unfilteredIndex':'parentIndex',index=childRecord[indexName];if(index>-1){children.splice(index,1);this.updateChildrenIndex(children,unfiltered);}return index;}}},{key:"expanded",get:function get(){return this.data.expanded;}/**
     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at
     * level 1 and so on.
     * @property {Number}
     * @readonly
     * @category Parent & children
     */},{key:"childLevel",get:function get(){return this.parent?this.parent.childLevel+1:this.isRoot?-1:0;}/**
     * Is a leaf node in a tree structure?
     * @property {Boolean}
     * @readonly
     * @category Parent & children
     */},{key:"isLeaf",get:function get(){return Boolean(!this.children||this.constructor.convertEmptyParentToLeaf&&!this.children.length&&!this.isRoot);}/**
     * Is a parent node in a tree structure?
     * @property {Boolean}
     * @readonly
     * @category Parent & children
     */},{key:"isParent",get:function get(){return!this.isLeaf;}/**
     * Returns true for parent nodes with children loaded (there might still be no children)
     * @property {Boolean}
     * @readonly
     * @category Parent & children
     */},{key:"isLoaded",get:function get(){return this.isParent&&Array.isArray(this.children);}/**
     * Count all children (including sub-children) for a node (in its `firstStore´)
     * @member {Number}
     * @category Parent & children
     */},{key:"descendantCount",get:function get(){return this.getDescendantCount();}/**
     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)
     * @member {Number}
     * @category Parent & children
     */},{key:"visibleDescendantCount",get:function get(){return this.getDescendantCount(true);}},{key:"allChildren",get:function get(){var children=this.children;if(!children)return[];return children.reduce(function(all,child){all.push(child);// push.apply is faster than push with array spread:
// https://jsperf.com/push-apply-vs-push-with-array-spread/1
all.push.apply(all,child.allChildren);return all;},[]);}/**
     * Get the first child of this node
     * @returns {Common.data.Model}
     * @category Parent & children
     */},{key:"firstChild",get:function get(){var children=this.children;return children&&children.length&&children[0]||null;}/**
     * Get the last child of this node
     * @returns {Common.data.Model}
     * @category Parent & children
     */},{key:"lastChild",get:function get(){var children=this.children;return children&&children.length&&children[children.length-1]||null;}/**
     * Returns count of all preceding sibling nodes (including their children).
     * @property {Number}
     * @category Parent & children
     */},{key:"previousSiblingsTotalCount",get:function get(){var task=this.previousSibling,count=this.parentIndex;while(task){count+=task.descendantCount;task=task.previousSibling;}return count;}},{key:"root",get:function get(){return this.parent&&this.parent.root||this;}/**
     * Reading this property returns the id of the parent node, if this record is a child of a node.
     *
     * Setting this property appends this record to the record with the passed
     * id **in the same store that this record is already in**.
     *
     * Note that setting this property is **only valid if this record is already
     * part of a tree store**.
     *
     * This is not intended for general use. This is for when a server responds to a record
     * mutation and the server decides to move a record to a new parent. If a `parentId` property
     * is passed in the response data for a record, that record will be moved.
     * @property {Number|String}
     * @category Parent & children
     */},{key:"parentId",get:function get(){return this.parent&&!this.parent.isRoot?this.parent.id:null;},set:function set(parentId){var me=this,parent=me.parent,newParent=parentId&&me.firstStore.getById(parentId);// Handle exact equality of parent.
// Also handle one being null and the other being undefined meaning no change.
if(!(newParent===parent||!parent&&!newParent)){// If we are batching, we do not trigger a change immediately.
// endBatch will set the field which will set the property again.
if(me.isBatchUpdating){me.meta.batchChanges.parentId=parentId;}else{if(newParent){newParent.appendChild(me);}else{me.parent.removeChild(me);}}}}}],[{key:"parentIdField",set:function set(parentIdField){// Maintainer: the "this" references in here reference two different contexts.
// Outside of the property definition, it's the Model Class.
// In the getter and setter, it's the record instance.
this._parentIdField=parentIdField;Object.defineProperty(this.prototype,parentIdField,{set:function set(parentId){// no arrow functions here, need `this` to change to instance
// noinspection JSPotentiallyInvalidUsageOfClassThis
this.parentId=parentId;},get:function get(){// no arrow functions here, need `this` to change to instance
// noinspection JSPotentiallyInvalidUsageOfClassThis
return this.parentId;}});},get:function get(){return this._parentIdField||'parentId';}}]);return TreeNode;}(Target||Base));};var internalProps={children:1,data:1,meta:1},emptyObject$2={},convertDate=function convertDate(date){if(!(date instanceof Date)){date=DateHelper.parse(date,this.format||this.dateFormat);}// if parsing has failed, we would like to return `undefined` to indicate the "absence" of data
// instead of `null` (presence of "empty" data)
return date||undefined;},isEqual=function isEqual(field,oldValue,value){// using fn to keep field scope
return field&&field.isEqual?field.isEqual(oldValue,value):ObjectHelper.isEqual(oldValue,value);},nullFn=function nullFn(){};/**
 * @module Common/data/Model
 */ /**
 * A Model is a definition for a record in a store. It defines which fields the data contains and exposes an interface
 * to access and manipulate that data. Models are created from json objects, the raw json is stored in `Model#data`.
 *
 * ## Defining fields
 * A Model can either define its fields explicitly or have them created from its data. This snippet shows a model with
 * two fields:
 *
 * ```
 * class Person extends Model {
 *   static get fields() {
 *     return [
 *       'name',
 *       { name : 'birthday', type : 'date', dateFormat : 'YYYY-MM-DD' },
 *       { name : 'shoeSize', type : 'number', defaultValue : 11 },
 *       { name : 'age', readOnly : true }
 *     ];
 * }
 * ```
 *
 * The first field (name) has an unspecified type, which is fine in most cases since this is JavaScript. The second
 * field (birthday) is defined to be a date, which will make the model parse any supplied value into an actual date.
 * Currently date is the only specified type available.
 *
 * You can also set a defaultValue that will be used if the data doesn't contain a value for the field.
 *
 * ```
 *       { name : 'shoeSize', type : 'number', defaultValue : 11 }
 * ```
 *
 * To create a record from a Model, supply data to its constructor:
 *
 * ```
 * let guy = new Person({
 *   id       : 1,
 *   name     : 'Dude',
 *   birthday : '2014-09-01'
 * });
 * ```
 *
 * If no id is specified, a temporary id will be generated.
 *
 * ## Persisting fields
 * By default all fields are persisted. If you don't want particular field to get saved to the server, configure it with
 * `persist: false`. In this case field will not be among changes which are sent by
 * {@link Common/data/AjaxStore#function-commit store.commit()}, otherwise its behavior doesn't change.
 *
 * ```
 * class Person extends Model {
 *     static get fields() {
 *         return [
 *             'name',
 *             { name : 'age', persist : false }
 *         ];
 *     }
 * }
 * ```
 *
 * ## Id field
 * By default Model expects its id to be stored in a field named "id". The name of the field can be customized by
 * setting {@link #property-idField-static}:
 *
 * ```
 * // Id drawn from 'id' property by default; use custom field here
 * Person.idField = 'personId';
 *
 * let girl = new Person({
 *    personId : 2,
 *    name     : 'Lady',
 *    birthday : '2011-11-05'
 * });
 * ```
 *
 * ## Getting and setting values
 * Fields are used to generate getters and setters on the records. Use them to access or modify values (they are
 * reactive):
 *
 * ```
 * console.log(guy.name);
 * girl.birthday = new Date(2011,10,6);
 * ```
 *
 * NOTE: In an application with multiple different models you should subclass Model, since the prototype is decorated
 * with getters and setters. Otherwise you might got unforeseen collisions.
 *
 * ## Field data mapping
 * By default fields are mapped to data using their name. If you for example have a "name" field it expects data to be
 * `{ name: 'Some name' }`. If you need to map it to some other property, specify `dataSource` in your field definition:
 *
 * ```
 * class Person extends Model {
 *   static get fields {
 *     return [
 *       { name : 'name', dataSource : 'TheName' }
 *     ];
 * }
 *
 * // This is now OK:
 * let dude = new Person({ TheName : 'Manfred' });
 * console.log(dude.name); // --> Manfred
 * ```
 *
 * ## Tree API
 * This class mixes in the {@link Common/data/mixin/TreeNode TreeNode} mixin which provides an API for tree related functionality (only relevant if your
 * store is configured to be a {@link Common/data/Store#config-tree tree}).
 *
 * @mixes Common/data/mixin/TreeNode
 * @mixes Common/data/stm/mixin/ModelStm
 */var Model=/*#__PURE__*/function(_TreeNode){_inherits2(Model,_TreeNode);function Model(){_classCallCheck2(this,Model);return _possibleConstructorReturn2(this,_getPrototypeOf2(Model).apply(this,arguments));}_createClass2(Model,[{key:"construct",/**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * @member {String|Number} id
     * @category Identification
     */ //region Init
/**
     * Constructs a new record from the supplied data.
     * @param {Object} [data] Raw data
     * @param {Common.data.Store} [store] Data store
     * @param {Object} [meta] Meta data
     * @function constructor
     * @category Misc
     */value:function construct(){var data=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var store=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var meta=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var skipExpose=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,constructor=me.constructor,fieldMap=constructor.fieldMap,stores=store?Array.isArray(store)?store:[store]:[];store=stores[0];me.meta=Object.assign({modified:{}},constructor.metaConfig,meta);// null passed to Base construct inhibits config processing.
_get2(_getPrototypeOf2(Model.prototype),"construct",this).call(this,null);// make getters/setters for fields, needs to be done before processing data to make sure defaults are available
if(skipExpose){if(!constructor.hasOwnProperty('fieldMap')){constructor.exposeProperties();}}else{constructor.exposeProperties(data);}// It's only valid to do this once, on construction of the first instance
if(!constructor.hasOwnProperty('idFieldProcessed')){// idField can be overridden from meta, or from the store if we have not had an idField set programmatically
// and if we have not had an id field defined above the base Model class level.
var overriddenIdField=me.meta.idField;if(!overriddenIdField){// Might have been set to Model after construction but before load
if(constructor._assignedIdField){overriddenIdField=constructor.idField;}// idField on store was deprecated, but should still work to not break code
// TODO: Remove in 3.0? Or reintroduce it...
else if(store){overriddenIdField=store.idField;}}// If it's overridden to something different than we already have, replace the 'id' field in the fieldMap
if(overriddenIdField&&overriddenIdField!==fieldMap.id.dataSource){constructor.createFieldDefinition({name:'id',dataSource:overriddenIdField});}constructor.idFieldProcessed=true;}// assign internalId, unique among all records
me._internalId=Model._internalIdCounter++;// relation code expects store to be available for relation lookup, but actual join done below
me.stores=[];// Superclass constructors may set this in their own way before this is called.
if(!me.originalData){me.originalData=data;}// Store configured with useRawData guarantees that data does not need processing (no default values will be
// applied, no type conversion will take place)
if(store&&store.useRawData){me.data=data;}else{me.data=constructor.processData(data);}if(me.id===undefined){// Assign a generated id silently, record should not be considered modified
me.setData('id',me.generateId());}if(me.data[constructor.childrenField]){me.processChildren(stores);}me.generation=0;}/**
     * Processes raw data, converting values and setting defaults.
     * @private
     * @param {Object} data Raw data
     * @param {Boolean} [ignoreDefaults] Ignore setting default values, used when updating
     * @returns {Object} Processed data
     * @category Fields
     */},{key:"getFieldDefinition",/**
     * Convenience function to get the definition for a field from class.
     * @param {String} fieldName Field name
     * @returns {Object}
     * @category Fields
     */value:function getFieldDefinition(fieldName){return this.constructor.getFieldDefinition(fieldName);}/**
     * Get the names of all fields in data.
     * @returns {String[]} Field names
     * @readonly
     * @category Fields
     */},{key:"getDataSource",/**
     * Get the data source used by specified field. Returns the fieldName if no data source specified.
     * @param {String} fieldName Field name
     * @returns {String}
     * @category Fields
     */value:function getDataSource(fieldName){var def=this.constructor.getFieldDefinition(fieldName);if(def)return def.dataSource||def.name;}/**
     * Processes input to a field, converting to expected type.
     * @param {String} fieldName Field dataSource
     * @param {*} value Value to process
     * @returns {*} Converted value
     * @category Fields
     */},{key:"initRelations",//endregion
//region Relations
/**
     * Initializes model relations. Called from store when adding a record.
     * @private
     * @category Relations
     */value:function initRelations(){var me=this,relations=me.constructor.relations;if(!relations)return;// TODO: feels strange to have to look at the store for relation config but didn't figure out anything better.
// TODO: because other option would be to store it on each model instance, not better...
me.stores.forEach(function(store){if(!store.modelRelations)store.initRelations();// TODO: not at all tested for multiple stores, can't imagine it works as is
var relatedRecords=[];store.modelRelations&&store.modelRelations.forEach(function(config){relatedRecords.push({related:me.initRelation(config),config:config});});store.updateRecordRelationCache(me,relatedRecords);});}/**
     * Initializes/updates a single relation.
     * @param config Relation config
     * @returns {Common.data.Model} Related record
     * @private
     * @category Relations
     */},{key:"initRelation",value:function initRelation(config){var me=this,keyValue=me.get(config.fieldName),foreign=keyValue!==undefined&&typeof config.store!=='string'&&config.store.getById(keyValue),placeHolder={id:keyValue,placeHolder:true};if(!me.meta.relationCache)me.meta.relationCache={};// apparently scheduler tests expect cache to work without matched related record, thus the placeholder
me.meta.relationCache[config.relationName]=foreign||(keyValue!=null?placeHolder:null);return foreign;}},{key:"removeRelation",value:function removeRelation(config){// (have to check for existence before deleting to work in Safari)
if(this.meta.relationCache[config.relationName]){delete this.meta.relationCache[config.relationName];if(config.nullFieldOnRemove){// Setting to null silently, to not trigger additional relation behaviour
this.setData(config.fieldName,null);}}}},{key:"getForeign",value:function getForeign(name){return this.meta.relationCache&&this.meta.relationCache[name];}},{key:"setForeign",value:function setForeign(name,value,config){var id=Model.asId(value);return this.set(config.fieldName,id);}//endregion
//region Get/set values, data handling
/**
     * Get value for specified field name. You can also use the generated getters if loading through a Store.
     * If model is currently in batch operation this will return updated batch values which are not applied to Model
     * until endBatch() is called.
     * @param {String} fieldName Field name to get value from
     * @returns {*} Fields value
     * @category Fields
     */},{key:"get",value:function get(fieldName){var me=this,recData=me.meta.batchChanges?Object.assign({},me.data,me.meta.batchChanges):me.data,field=me.constructor.fieldMap[fieldName],dataSource=field?field.dataSource:fieldName;if(dataSource){if(field&&field.complexMapping){return ObjectHelper.getPath(recData,dataSource);}return dataSource in recData?recData[dataSource]:recData[fieldName];}}/**
     * Internal function used to update a records underlying data block (record.data) while still respecting field
     * mappings. Needed in cases where a field needs setting without triggering any associated behaviour and it has a
     * dataSource with a different name.
     *
     * For example:
     * ```javascript
     * // startDate mapped to data.beginDate
     * { name : 'startDate', dataSource : 'beginDate' }
     *
     * // Some parts of our code needs to update the data block without triggering any of the behaviour associated with
     * // calling set. This would then not update "beginDate":
     * record.data.startDate = xx;
     *
     * // But this would
     * record.setData('startDate', xx);
     * ```
     * @internal
     * @category Editing
     */},{key:"setData",value:function setData(fieldName,value){var field=this.constructor.fieldMap[fieldName],dataSource=field?field.dataSource:fieldName;if(dataSource){ObjectHelper.setPath(this.data,dataSource,value);}}/**
     * Silently updates record's id with no flagging the property as modified.
     * Triggers onModelChange event for changed id.
     * @param {String|Number} value id value
     * @private
     */},{key:"syncId",value:function syncId(value){var oldValue=this.id;if(oldValue!==value){this.setData('id',value);var data={id:{value:value,oldValue:oldValue}};this.triggerChanges(data,data);}}/**
     * Set value for the specified field. You can also use the generated setters if loading through a Store.
     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call
     * @param {*} value Value to set
     * @param {Boolean} [silent] Set to true to not trigger events
     * @fires Store#idChange
     * @fires Store#update
     * @fires Store#change
     * @example
     * person.set('name', 'Donald');
     * @category Editing
     */},{key:"set",value:function set(field,value){var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var fromRelationUpdate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this;// We use beforeSet/inSet/afterSet approach here because mixin interested in overriding set() method
// like STM, for example, might be mixed before Model class or after. In general I have no control over this.
// STM mixed before, so the only option to wrap set() method body is actually to call
// beforeSet()/afterSet().
if(me.isBatchUpdating){me.inBatchSet(field,value);return null;}else{var preResult=me.beforeSet?me.beforeSet(field,value,silent,fromRelationUpdate):undefined,wasSet=me.inSet(field,value,silent,fromRelationUpdate);me.afterSet&&me.afterSet(field,value,silent,fromRelationUpdate,preResult,wasSet);return wasSet;}}},{key:"fieldToKeys",value:function fieldToKeys(field,value){var result;if(typeof field!=='string'){result={};// will get in trouble when setting same field on multiple models without this
Reflect.ownKeys(field).forEach(function(key){return result[key]=field[key];});}else{result=_defineProperty({},field,value);}return result;}},{key:"inBatchSet",value:function inBatchSet(field,value){var _this19=this;var toSet=this.fieldToKeys(field,value);Object.keys(toSet).forEach(function(key){// Store batch changes
_this19.meta.batchChanges[key]=_this19.constructor.processField(key,toSet[key]);});}},{key:"inSet",value:function inSet(field,value,silent,fromRelationUpdate){var me=this,fieldMap=me.constructor.fieldMap,myProto=me.constructor.prototype,data=me.data,wasSet={},toSet=me.fieldToKeys(field,value);var changed=false;// Give a chance to cancel action before records updated.
if(!silent&&!me.triggerBeforeUpdate(toSet)){return null;}Object.keys(toSet).forEach(function(key){var field=fieldMap[key],readOnly=field&&field.readOnly,mapping=field?field.dataSource:key,useProp=!field&&key in myProto,oldValue=useProp?me[mapping]:ObjectHelper.getPath(data,mapping),value=me.constructor.processField(key,toSet[key]),val=toSet[key]={value:value},relation=me.getRelationConfig(key);if(!readOnly&&!isEqual(field,oldValue,value)){// Indicate to observers that data has changed.
me.generation++;val.oldValue=oldValue;changed=true;// changing back to old value? remove from modified
// `modified` should contain mapped field name, it is used in sync
if(isEqual(field,me.meta.modified[key],value)){delete me.meta.modified[key];}else{// store info on modification
me.meta.modified[key]=oldValue;if(val.oldValue===undefined&&'oldValue'in val){delete val.oldValue;}}// The wasSet object keys must be the field *name*, not its dataSource.
wasSet[key]=val;// If we don't have a field, but we have a property defined
// eg, the fullDuration property defined in TaskModel, then
// use the property
if(useProp){me[key]=value;}// Otherwise, push the value through into the data.
else{ObjectHelper.setPath(data,mapping,value);}// changing foreign key
if(relation&&!fromRelationUpdate){me.initRelation(relation);me.stores.forEach(function(store){return store.cacheRelatedRecord(me,value,relation.relationName,val.oldValue);});}}else{delete toSet[key];}});if(changed){me.afterChange(toSet,wasSet,silent);}return changed?wasSet:null;}},{key:"afterChange",value:function afterChange(toSet,wasSet,silent){var me=this;// TODO: these lines of logic should move to store
me.stores.forEach(function(store){// add or removed from modified
if(me.isModified){if(!store.modified.includes(me)&&!store.added.includes(me)){store.modified.add(me);if(store.autoCommit){store.commit();}}}else{store.modified.remove(me);}});if(!silent){me.triggerChanges(toSet,wasSet);}}/**
     * True if this model has any uncommitted changes.
     * @property {Boolean}
     * @readonly
     * @category Editing
     */},{key:"isFieldModified",/**
     * Returns true if this model has uncommitted changes for the provided field.
     * @param {String} fieldName Field name
     * @returns {Boolean} True if the field is changed
     */value:function isFieldModified(fieldName){return this.isModified&&this.meta.modified[fieldName];}/**
     * Returns field value that should be persisted, or `undefined` if field is configured with `persist: false`.
     * @param {String} name Name of the field to get value
     * @private
     * @category Fields
     */},{key:"getFieldPersistentValue",value:function getFieldPersistentValue(name){var field=this.getFieldDefinition(name);var result;if(!field||field.persist){result=this[name];// if serialize function is provided we use it to prepare the persistent value
if(field&&field.serialize){result=field.serialize.call(this,result,this);}}return result;}/**
     * Get modifications in form of an object.
     * @property {Object}
     * @readonly
     * @category Editing
     */},{key:"clearChanges",/**
     * Clear stored changes, used on commit. Does not revert changes.
     * @param {Boolean} [removeFromStoreChanges] Update related stores modified collection or not
     * @param {Boolean} [includeDescendants] Set true to clear store descendants
     * @category Editing
     * @private
     */value:function clearChanges(){var removeFromStoreChanges=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var includeDescendants=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,meta=me.meta;meta.modified={};meta.committing=false;if(removeFromStoreChanges){me.stores.forEach(function(store){store.modified.remove(me);store.added.remove(me);if(includeDescendants){var descendants=store.collectDescendants(me).all;store.added.remove(descendants);store.modified.remove(descendants);}});}}//endregion
//region Id
/**
     * Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.
     * @property {Number}
     * @category Identification
     */},{key:"generateId",/**
     * Generates id for new record which starts with _generated.
     * @category Identification
     */value:function generateId(){if(!this.constructor.generatedIdIndex)this.constructor.generatedIdIndex=0;return'_generated'+this.$name+ ++this.constructor.generatedIdIndex;}/**
     * Gets the id of specified model or the value if passed string/Number.
     * @param {Common.data.Model|String|Number} model
     * @returns {String|Number} id
     * @category Identification
     */},{key:"toJSON",/**
     * Used by JSON.stringify to correctly convert this record to json. No point in calling it directly.
     * @private
     * @category Misc
     */value:function toJSON(){return this.data;}//endregion
//region Batch
/**
     * True if this Model is currently batching its changes.
     * @property {Boolean}
     * @readonly
     * @category Editing
     */},{key:"beginBatch",/**
     * Begin a batch, which stores changes and commits them when the batch ends.
     * Prevents events from being fired during batch.
     * ```
     * record.beginBatch();
     * record.name = 'Mr Smith';
     * record.team = 'Golden Knights';
     * record.endBatch();
     * ```
     * Please note that you can also set multiple fields in a single call using {@link #function-set}, which in many
     * cases can replace using a batch:
     * ```
     * record.set({
     *   name : 'Mr Smith',
     *   team : 'Golden Knights'
     * });
     * ```
     * @category Editing
     */value:function beginBatch(){var me=this;if(!me.batching){me.batching=0;me.meta.batchChanges={};}me.batching++;}/**
     * End a batch, triggering events if data has changed.
     * @param {Boolean} [silent] Specify `true` to not trigger events
     * @category Editing
    */},{key:"endBatch",value:function endBatch(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,parentIdField=me.constructor.parentIdField;if(!me.batching){return;}me.batching--;if(me.batching>0){return;}// Set pending batch changes
if(!ObjectHelper.isEmpty(me.meta.batchChanges)){var batchChanges=Object.assign({},me.meta.batchChanges);me.meta.batchChanges=null;// Move to its new parent before applying the other changes.
if(batchChanges[parentIdField]){me.parentId=batchChanges[parentIdField];delete batchChanges[parentIdField];}me.set(batchChanges,undefined,silent);me.cancelBatch();}}/**
     * Cancels current batch operation. Any changes during the batch are discarded.
     * @category Editing
     */},{key:"cancelBatch",value:function cancelBatch(){this.batching=null;this.meta.batchChanges=null;}//endregion
//region Events
/**
     * Triggers beforeUpdate event for each store and checks if changes can be made from event return value.
     * @param {Object} changes Data changes
     * @returns {Boolean} returns true if data changes are accepted
     * @private
     */},{key:"triggerBeforeUpdate",value:function triggerBeforeUpdate(changes){var _this20=this;return!this.stores.some(function(s){if(s.trigger('beforeUpdate',{record:_this20,changes:changes})===false){return true;}});}/**
     * Triggers idChange, update and change events for each store.
     * @param {Object} toSet Data to be changed
     * @param {Object} wasSet Actually changed data
     * @private
     */},{key:"triggerChanges",value:function triggerChanges(toSet,wasSet){var _this21=this;this.stores.forEach(function(store){return store.onModelChange(_this21,toSet,wasSet);});}//endregion
//region Additional functionality
/**
     * Makes a copy of this model, assigning the specified id or a generated id.
     * @param {Number|String|Object} [newId] Id to set (or config object), leave out to use generated id or specify false to also copy id
     * @param {Number|String} [newId.id] Id to set, leave out to use generated id or specify false to also copy id
     * @param {Boolean} [newId.deep] True to also clone children
     * @returns {Common.data.Model} Copy of this model
     * @category Editing
     */},{key:"copy",value:function copy(){var newId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var data=Object.assign({},this.data),returnInstance=true,idField=this.constructor.idField,deep,id,copy;if(newId&&_typeof(newId)==='object'){deep=newId.deep;id=newId.id;// Only use id once to avoid collisions
delete newId.id;}else{id=newId;}// Iterate over instance children, because data may not reflect actual children state
if(deep&&this.children){returnInstance=false;data.children=this.children.map(function(child){return child.copy(newId);});}else{delete data.children;delete data.expanded;}if(id){data[idField]=id;}else if(id==null){data[idField]=this.generateId();}if(returnInstance){copy=new this.constructor(data);}else{copy=data;}// Store original record internal id to lookup from copy later
copy.originalInternalId=this.internalId;return copy;}/**
     * Removes this record from all stores (and in a tree structure, also from its parent if it has one).
     * @param {Boolean} [silent] Specify `true` to not trigger events
     * @category Editing
     */},{key:"remove",value:function remove(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,parent=this.parent;// Remove from parent if we're in a tree structure.
// This informs the owning store(s)
if(parent){parent.removeChild(me);}// Store handles remove
else if(me.stores.length){// Not sure what should happen if you try to remove a special row (group row for example), bailing out
if(!me.meta.specialRow){me.stores.forEach(function(s){return s.remove(me,silent,false,true);});}}}/**
     * Get the first store that this model is assigned to.
     * @returns {Common.data.Store}
     * @category Misc
     */},{key:"getRelationConfig",/**
     * Get a relation config by name, from the first store.
     * @param {String} name
     * @returns {Object}
     * @private
     * @category Relations
     */value:function getRelationConfig(name){// using first store for relations, might have to revise later..
return this.firstStore&&this.firstStore.modelRelations&&this.firstStore.modelRelations.find(function(r){return r.fieldName===name;});}//endregion
//region Validation
/**
     * Check if record has valid data. Default implementation returns true, override in your model to do actual validation.
     * @returns {Boolean}
     * @category Editing
     */},{key:"joinStore",//endregion
//region Store
/**
     * Joins this record and any children to specified store, if not already joined.
     * @internal
     * @param {Common.data.Store} store Store to join
     * @category Misc
     */value:function joinStore(store){var me=this,stores=me.stores;if(!stores.includes(store)){_get2(_getPrototypeOf2(Model.prototype),"joinStore",this)&&_get2(_getPrototypeOf2(Model.prototype),"joinStore",this).call(this,store);store.register(me);stores.push(store);me.isLoaded&&me.children.forEach(function(child){return child.joinStore(store);});me.initRelations();}}/**
     * Unjoins this record and any children from specified store, if already joined.
     * @internal
     * @param {Common.data.Store} store Store to join
     * @category Misc
     */},{key:"unJoinStore",value:function unJoinStore(store){var me=this,stores=me.stores;if(stores.includes(store)){store.unregister(me);me.children&&me.children.forEach(function(child){return child.unJoinStore(store);});stores.splice(stores.indexOf(store),1);_get2(_getPrototypeOf2(Model.prototype),"unJoinStore",this)&&_get2(_getPrototypeOf2(Model.prototype),"unJoinStore",this).call(this,store);// remove from relation cache
store.uncacheRelatedRecord(me);}if(!stores.length){me.meta.removed=true;}}/**
     * Returns true if this record is contained in the specified store, or in any store if store param is omitted.
     * @internal
     * @param {Common.data.Store} store Store to join
     * @returns {Boolean}
     * @category Misc
     */},{key:"isPartOfStore",value:function isPartOfStore(store){if(store){return store.indexOf(this)>=0;}return this.stores.length>0;}//endregion
//region Per instance meta
/**
     * Used to set per external instance meta data. For example useful when using a record in multiple grids to store some state
     * per grid.
     * @param {String|Object} instanceOrId External instance id or the instance itself, if it has id property
     * @private
     * @category Misc
     */},{key:"instanceMeta",value:function instanceMeta(instanceOrId){var meta=this.meta,id=instanceOrId.id||instanceOrId;if(!meta.map)meta.map={};return meta.map[id]||(meta.map[id]={});}//endregion
},{key:"indexPath",/**
     * Returns index path to this node. This is the index of each node in the node path
     * starting from the topmost parent. (only relevant when its part of a tree store).
     * @returns {Number[]} The index of each node in the path from the topmost parent to this node.
     * @category Parent & children
     * @private
     */get:function get(){var indices=[];for(var task=this;task&&!task.isRoot;task=task.parent){indices.unshift(task.parentIndex+1);}return indices;}},{key:"fields",/**
     * Convenience getter to get field definitions from class.
     * @returns {Array}
     * @category Fields
     */get:function get(){return this.constructor.internalFields||this.constructor.fields;}},{key:"fieldNames",get:function get(){return Object.keys(this.data);}/**
     * Get the definition for a field by name. Caches results.
     * @param {String} fieldName Field name
     * @returns {Object} Field definition or null if none found
     * @category Fields
     */},{key:"isModified",get:function get(){return Boolean(this.meta.modified&&Object.keys(this.meta.modified).length>0);}},{key:"modifications",get:function get(){var me=this;if(!me.isModified){return null;}var data={};Object.keys(me.meta.modified).forEach(function(key){// TODO: isModified will report record as modified even if a modification wont be persisted here. Should it?
var value=me.getFieldPersistentValue(key);if(value!==undefined){data[key]=value;}});data[me.constructor.idField]=me.id;return data;}/**
     * Get persistable data in form of an object.
     * @property {Object}
     * @internal
     * @readonly
     * @category Editing
     */},{key:"persistableData",get:function get(){var me=this,data={};Object.keys(me.data).forEach(function(key){var value=me.getFieldPersistentValue(key);if(value!==undefined){data[key]=value;}});return data;}/**
     * True if this models changes are currently being committed.
     * @property {boolean}
     * @category Editing
     */},{key:"isCommitting",get:function get(){return Boolean(this.meta.committing);}},{key:"internalId",get:function get(){return this._internalId;}/**
     * Returns true if the record is new and has not been persisted (and received a proper id).
     * @property {Boolean}
     * @readonly
     * @category Identification
     */},{key:"isPhantom",get:function get(){return this.id===''||this.id==null||this.hasGeneratedId;}/**
     * Checks if record has a generated id. New records are assigned a generated id (starting with _generated), which should be
     * replaced on commit.
     * @property {Boolean}
     * @category Identification
     */},{key:"hasGeneratedId",get:function get(){return this.id&&typeof this.id==='string'&&this.id.startsWith('_generated');}},{key:"json",//endregion
//region JSON
/**
     * Get the records data as a json string.
     * @member {String}
     * @category Misc
     */get:function get(){return JSON.stringify(this.data);}},{key:"isBatchUpdating",get:function get(){return Boolean(this.batching);}},{key:"firstStore",get:function get(){return this.stores.length>0&&this.stores[0];}},{key:"isValid",get:function get(){return true;}}],[{key:"processData",value:function processData(data){var ignoreDefaults=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var fieldMap=this.fieldMap,defaultValues=this.defaultValues;var processed=Object.assign({},data),fieldName;if(!ignoreDefaults){for(fieldName in defaultValues){if(processed[fieldName]===undefined)processed[fieldName]=defaultValues[fieldName];}}// Convert field types which need converting
for(fieldName in fieldMap){var fieldDefinition=fieldMap[fieldName],name=fieldDefinition.name,dataSource=fieldDefinition.dataSource,useNameForValue=dataSource!==name&&!ObjectHelper.pathExists(data,dataSource)&&name in data;// Only action field definitions which have a convert function or remap data
if(useNameForValue||fieldDefinition.convert){var value=useNameForValue?data[name]:data[dataSource];// When ignoringDefaults, do not convert unspecified values
if(!ignoreDefaults||useNameForValue&&name in data||!useNameForValue&&dataSource in data){ObjectHelper.setPath(processed,dataSource,fieldDefinition.convert?fieldDefinition.convert(value):value);// Remove [startDate] from internal data holder, only keeping [myStartDate]
if(useNameForValue){delete processed[name];}}}}return processed;}/**
     * Makes getters and setters for fields (from definitions and data). Called once when class is defined and once when
     * data is loaded first time.
     * @internal
     * @param {Object} data Raw data
     * @category Fields
     */},{key:"exposeProperties",value:function exposeProperties(data){var me=this,superclass=me.superclass,rawFields=me.hasOwnProperty('fields')&&me.fields;// Ensure that the class hierarchy processes its fields on first construction.
if(superclass.exposeProperties&&!superclass.hasOwnProperty('fieldMap')){superclass.exposeProperties();}// Don't expose field properties if already done
if(!me.hasOwnProperty('propertiesExposed')){// Clone the superclass's defaults, and override that with our own defaults.
// As we find fields with a defaultValue, more defaults may be added
me.defaultValues=Object.assign({},superclass.defaultValues,me.hasOwnProperty('defaults')?me.defaults:null);// Hook up our field maps with the class hierarchy's fieldMaps.
// We need to be able to look up field definitions by the name, or by the dataSource property name
/**
             * An object containing all the _defined_ fields for this Model class. This will include all superclass's
             * defined fields through its prototype chain. So be aware that `Object.keys` and `Object.entries` will only
             * access this class's defined fields.
             * @member {Object} fieldMap
             * @static
             * @readonly
             * @category Fields
             */me.fieldMap=Object.setPrototypeOf({},superclass.fieldMap||emptyObject$2);me.fieldDataSourceMap=Object.setPrototypeOf({},superclass.fieldDataSourceMap||emptyObject$2);// Hook up our propertiesExposed with the superclass's version
me.propertiesExposed=Object.setPrototypeOf({},superclass.propertiesExposed||emptyObject$2);// If the idField is overridden at this level, create a new field
if(me.hasOwnProperty('idField')){me.createFieldDefinition({name:'id',dataSource:me.idField});me.propertiesExposed[me.idField]=true;}// Process fields defined in the class definition
if(rawFields&&rawFields.length){rawFields.map(me.createFieldDefinition,me);}}// Process the raw data properties and expose them as fields unless the property name
// has already been used by the "dataSource" of a defined field.
if(me.autoExposeFields&&data&&!me.hasOwnProperty('propertiesExposedForData')){for(var dataProperty in data){if(!me.propertiesExposed[dataProperty]){// Create a field definition in our fieldMap with the flag that it's from data
me.createFieldDefinition({name:dataProperty,dataSource:dataProperty,fromData:true});}}me.propertiesExposedForData=true;}me.exposeRelations();}},{key:"createFieldDefinition",value:function createFieldDefinition(fieldDef){if(fieldDef==null){return;}if(typeof fieldDef==='string'){fieldDef={name:fieldDef};}var me=this,propertiesExposed=me.propertiesExposed,defaultValues=me.defaultValues,_fieldDef=fieldDef,name=_fieldDef.name,dataSource=fieldDef.dataSource||(fieldDef.dataSource=name);if(!fieldDef.hasOwnProperty('persist')){fieldDef.persist=true;}if(fieldDef.type==='date'){fieldDef.convert=convertDate;}me.fieldMap[name]=fieldDef;if(!me.fieldDataSourceMap[dataSource]){me.fieldDataSourceMap[dataSource]=fieldDef;}// When iterating through the raw data, if autoExposeFields is set
// We do not need to create properties for raw property names we've processed here
if(dataSource.indexOf('.')===-1){propertiesExposed[dataSource]=true;}// With complex mapping avoid exposing object as model field
else{fieldDef.complexMapping=true;propertiesExposed[dataSource.split('.')[0]]=true;}// Maintain an object of defaultValues for fields.
if('defaultValue'in fieldDef){defaultValues[dataSource]=fieldDef.defaultValue;}// Create a property on this Model's prototype, named for the defined field name
// which reads the correct property out of the raw data object.
me.createFieldProperty(name,dataSource,fieldDef);return fieldDef;}/**
     * Create getter and setter functions for the specified field name under the specified key.
     *
     * @param {String} fieldName The defined field name (or property name if this is created by exposing a raw property)
     * @param {String} propertyName The property name to read off the data property
     * @param {Object} fieldDef The full field definition.
     * @private
     * @category Fields
     */},{key:"createFieldProperty",value:function createFieldProperty(fieldName,propertyName,fieldDef){var me=this;// checking (fieldName in me.prototype) instead of hasOwnProperty to catch cases where getters/setters are
// manually created on some parent
if(!internalProps[propertyName]){if(!(fieldName in me.prototype)){Object.defineProperty(me.prototype,fieldName,{enumerable:true,get:function get(){// no arrow functions here, need `this` to change to instance
// noinspection JSPotentiallyInvalidUsageOfClassThis
return this.get(fieldName);},// Only create a real setter if the field is read/write.
// privately, we will use setData to set a field's value
set:fieldDef&&fieldDef.readOnly?nullFn:function(value){// no arrow functions here, need `this` to change to instance
// noinspection JSPotentiallyInvalidUsageOfClassThis
this.set(fieldName,value);}});}}}/**
     * Makes getters and setters for related records. Populates a Model#relation array with the relations, to allow it
     * to be modified later when assigning stores.
     * @internal
     * @category Relations
     */},{key:"exposeRelations",value:function exposeRelations(){var me=this;if(me.hasOwnProperty('relationsExposed'))return;if(me.relationConfig){me.relationsExposed=true;me.relations=[];me.relationConfig.forEach(function(relation){me.relations.push(relation);var name=relation.relationName;// getter and setter for related object
if(!Reflect.ownKeys(me.prototype).includes(name)){Object.defineProperty(me.prototype,name,{enumerable:true,get:function get(){// noinspection JSPotentiallyInvalidUsageOfClassThis
return this.getForeign(name);},set:function set(value){// noinspection JSPotentiallyInvalidUsageOfClassThis
this.setForeign(name,value,relation);}});}});}}//endregion
//region Fields
/**
     * Flag checked from Store when loading data that determines if fields found in first records should be exposed in
     * same way as predefined fields.
     * @returns {Boolean}
     * @category Fields
     */},{key:"getFieldDefinition",value:function getFieldDefinition(fieldName){return this.fieldMap[fieldName];}},{key:"processField",value:function processField(fieldName,value){var field=this.fieldMap[fieldName];if(field&&field.convert){return field.convert(value);}return value;}},{key:"asId",value:function asId(model){return model instanceof Model?model.id:model;}},{key:"convertEmptyParentToLeaf",/**
     * Specify `true` to consider an empty parent to be a leaf.
     * @property {Boolean}
     * @category Parent & children
     */set:function set(value){this._convertEmptyParentToLeaf=value;},get:function get(){return this._convertEmptyParentToLeaf;}/**
     * The name of the data field which provides the ID of instances of this Model.
     * @property {String}
     * @category Fields
     */},{key:"idField",set:function set(idField){this._assignedIdField=true;this._idField=idField;},get:function get(){return this._idField;}/**
     * The name of the data field which holds children of this Model when used in a tree structure
     * ```javascript
     * MyModel.childrenField = 'kids';
     * const parent = new MyModel({
     *   name : 'Dad',
     *   kids : [
     *     { name : 'Daughter' },
     *     { name : 'Son' }
     *   ]
     * });
     * ```
     * @property {String}
     * @category Fields
     */},{key:"childrenField",set:function set(childrenField){this._childrenField=childrenField;},get:function get(){return this._childrenField||'children';}},{key:"autoExposeFields",get:function get(){return true;}/**
     * Predefined fields, none per default, override in subclasses to add fields.
     * @returns {Object[]}
     * @readonly
     * @category Fields
     */},{key:"fields",get:function get(){return[];}},{key:"internalFields",get:function get(){var fieldMap=this.fieldMap;var result=this._internalFields;// Produce the array lazily - it probably will never be used.
// Only available when we have exposed our properties.
if(this.hasOwnProperty('fieldMap')&&!result){result=this._internalFields=[];for(var fieldName in fieldMap){result.push(fieldMap[fieldName]);}}return result;}}]);return Model;}(TreeNode(ModelStm()));exports.Model=Model;Model._idField='id';Model._internalIdCounter=1;Model._assignedIdField=false;Model.exposeProperties();Model._$name='Model';//inspired by http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/
var base=function base(baseClass){return{mixes:function mixes(){for(var _len31=arguments.length,mixins=new Array(_len31),_key31=0;_key31<_len31;_key31++){mixins[_key31]=arguments[_key31];}return mixins.reduce(function(result,mixin){return mixin(result);},baseClass||Base);}};};/**
 * @module Common/util/Bag
 */ /**
 * A simple collection class to contain unique, keyed items.
 */var Bag=/*#__PURE__*/function(){function Bag(config){_classCallCheck2(this,Bag);var me=this;me.generation=0;me.items=new Set();me.idMap={};me.idProperty='id';if(config){if(config.idProperty){me.idProperty=config.idProperty;}if(config.values){me.values=config.values;}}me.idProperty=config&&config.idProperty||'id';}/**
     * Returns the item with the passed `id`.
     *
     * @param {*} id The `id` to find.
     * @returns {Object} The found item, or `undefined`.
     */_createClass2(Bag,[{key:"get",value:function get(key){return this.idMap[safeIndexKey(key)];}/**
     * The number of items in this Bag.
     * @property {Number}
     * @readonly
     */},{key:"add",/**
     * Adds the passed item(s) to this Bag. Existing items with the same ID
     * will be replaced.
     * @param {Object|Object[]} toAdd Item(s) to add.
     */value:function add(toAdd){if(!Array.isArray(toAdd)){toAdd=[toAdd];}var me=this,items=me.items,idMap=me.idMap,idProperty=me.idProperty,len=toAdd.length;for(var i=0;i<len;i++){var item=toAdd[i],key=safeIndexKey(item[idProperty]),existingItem=idMap[key];// Not already present
if(existingItem==null){idMap[key]=item;items.add(item);me.generation++;}// Already present, replace it if different. No generational change.
// IDs rule.
else if(existingItem!==item){idMap[key]=item;items.delete(existingItem);items.add(item);}}}/**
     * Removes the passed item(s) from this Bag.
     * @param {Object|Object[]} toAdd Item(s) to remove.
     */},{key:"remove",value:function remove(toRemove){if(!Array.isArray(toRemove)){toRemove=[toRemove];}var items=this.items,idMap=this.idMap,idProperty=this.idProperty,len=toRemove.length;for(var i=0;i<len;i++){var item=toRemove[i],key=safeIndexKey(item[idProperty]),existingItem=idMap[key];// Found natch, so delete it
if(existingItem!=null){items.delete(existingItem);delete idMap[key];this.generation++;}}}},{key:"clear",value:function clear(){this.items.clear();this.idMap={};this.generation++;}/**
     * Change the id of an existing member by mutating its idProperty.
     * @param {String|Number|Object} item The item or id of the item to change.
     * @param {String|Number} newId The id to set in the existing member.
     */},{key:"changeId",value:function changeId(item,newId){var me=this,idMap=me.idMap,idProperty=me.idProperty,oldId=keyTypes[_typeof(item)]?item:safeIndexKey(item[idProperty]),member=me.get(oldId);if(member){var existingMember=me.get(newId);if(existingMember&&member!==existingMember){throw new Error("Attempt to set item ".concat(oldId," to already existing member's id ").concat(newId));}member[idProperty]=newId;delete idMap[oldId];idMap[newId]=member;}}/**
     * Returns `true` if this Collection includes an item with the same `id` as the passed item.
     *
     * @param {Object|String|Number} item The item to find, or an `id` to find.
     * @returns {Boolean} True if the passed item is found.
     */},{key:"includes",value:function includes(item){var key=keyTypes[_typeof(item)]?item:safeIndexKey(item[this.idProperty]);return Boolean(this.idMap[key]);}/**
     * Extracts the content of this Bag into an array based upon the passed
     * value extraction function.
     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.
     * @param {Object} [thisObj] The `this` reference when the function is called.
     * @returns {Object[]} An array of values extracted from this Bag.
     */},{key:"map",value:function map(fn,thisObj){var items=this.items,result=new Array(items.size);// Set has no map
var i=0;items.forEach(function(item){return result[i]=fn.call(thisObj,item,i,items);});return result;}/**
     * Executes the passed function for each item in this Bag, passing in the item.
     * @param {Function} fn The function to execute.
     * @param {Object} [thisObj] The `this` reference when the function is called.
     */},{key:"forEach",value:function forEach(fn,thisObj){return this.items.forEach(fn,thisObj);}/**
     * Returns the first item in this Bag which elicits a *truthy* return value from the passed funtion.
     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.
     * @returns {Object} The matched item, or `undefined`.
     */},{key:"find",value:function find(fn){var _iteratorNormalCompletion16=true;var _didIteratorError16=false;var _iteratorError16=undefined;try{for(var _iterator16=this.items[Symbol.iterator](),_step16;!(_iteratorNormalCompletion16=(_step16=_iterator16.next()).done);_iteratorNormalCompletion16=true){var div=_step16.value;if(fn(div)){return div;}}}catch(err){_didIteratorError16=true;_iteratorError16=err;}finally{try{if(!_iteratorNormalCompletion16&&_iterator16.return!=null){_iterator16.return();}}finally{if(_didIteratorError16){throw _iteratorError16;}}}return undefined;}/**
     * Iterator that allows you to do for (let item of bag)
     */},{key:Symbol.iterator,value:function value(){return this.items[Symbol.iterator]();}/**
     * The set of values of this Bag.
     *
     * Setting this property replaces the data set.
     * @property {Object[]}
     */},{key:"count",get:function get(){return this.items.size;}},{key:"values",get:function get(){return _toConsumableArray(this.items);},set:function set(values){var generation=this.generation;this.clear();this.add(values);this.generation=generation+1;}}]);return Bag;}();Bag._$name='Bag';/**
 * @module Common/data/mixin/StoreCRUD
 */ /**
 * Mixin for Store that handles modifying records (add, remove etc).
 *
 * @example
 * // add new record to store
 * store.add({ id: 1, team: 'FC Krasnodar' });
 *
 * // remove a record from store, using id
 * store.remove(1);
 *
 * @mixin
 */var StoreCRUD=function StoreCRUD(Target){return(/*#__PURE__*/function(_ref25){_inherits2(StoreCRUD,_ref25);function StoreCRUD(){_classCallCheck2(this,StoreCRUD);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreCRUD).apply(this,arguments));}_createClass2(StoreCRUD,[{key:"remove",//endregion
//region Events
/**
     * Fired after removing all records
     * @event removeAll
     * @param {Common.data.Store} source This Store
     */ /**
     * Fired before committing changes. Return false from handler to abort commit
     * @event beforeCommit
     * @param {Common.data.Store} source This Store
     * @param {Object} changes Modification data
     */ /**
     * Fired after committing changes
     * @event commit
     * @param {Common.data.Store} source This Store
     * @param {Object} changes Modification data
     */ /**
     * Fired before records are removed from this store by the {@link #function-remove} or {@link #function-removeAll}.
     * Also fired when removing a child record in a tree store using {@link Common.data.mixin.TreeNode#function-removeChild}.
     * The remove may be vetoed by returning `false` from a handler.
     * @event beforeRemove
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model[]} records The records which are to be removed.
     * @param {Common.data.Model} parent The record from which children are being removed when using a tree store
     * @param {Boolean} isMove Set to `true` if the child node is being removed by
     * {@link Common.data.mixin.TreeNode#function-appendChild appendChild} to be moved
     * _within the same tree_.
     * @param {Boolean} removingAll Set to `true` if the operation is removing the store's entire data set.
     */ /**
     * Fired before records are added to this store by the {@link #function-add} or {@link #function-insert}. In a tree
     * store, also fired by {@link Common.data.mixin.TreeNode#function-appendChild} and
     * {@link Common.data.mixin.TreeNode#function-insertChild}. The add or insert may be vetoed by returning `false`
     * from a handler.
     * @event beforeAdd
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model[]} records The records which are to be added
     * @param {Common.data.Model} parent The parent node when using a tree store
     * @preventable
     */ /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     * @event add
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model[]} records Added records. In case of tree store, if branch is added, only branch root
     * is returned
     * @param {Common.data.Model[]} [allRecords] Flat list of all added records. In case of tree store, if branch is
     * added, all new records are returned, not only branch root
     * @param {Common.data.Model} [parent] If due to a {@link Common.data.mixin.TreeNode#function-appendChild appendChild}
     * call, this is the parent node added to.
     * @param {Number} [index] Set if record was inserted as opposed to appended/added
     * @param {Number} [oldIndex] Set if inserted record was moved within the store
     * @param {Boolean} [isChild] Flag which is set to true if the record is added to a parent record
     * @param {Boolean} [isExpand] Flag which is set to true if records are added to the store by expanding parent
     * @param {Common.data.Model} [oldParent] Previous parent if this record was moved within a tree structure
     * @param {Boolean} [isMove] Passed as `true` if the add was part of a move operation within this Store.
     */ /**
     * Fired when a record has been removed
     * @event remove
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model[]} records Removed records. In case of tree store, if branch is removed, only branch root
     * is returned
     * @param {Common.data.Model[]} [allRecords] Flat list of all removed records. In case of tree store, if branch is
     * removed, all removed records are returned, not only branch root
     * @param {Common.data.Model} [parent] If due to a {@link Common.data.mixin.TreeNode#function-removeChild removeChild}
     * call, this is the parent node removed from.
     * @param {Number} [index] Visible index at which record was removed. In case record is removed from the collapsed
     * branch -1 is returned.
     * @param {Boolean} [isChild] Flag which is set to true if the record is added to a parent record
     * @param {Boolean} [isCollapse] Flag which is set to true if records are removed from the store by collapsing parent
     * @param {Boolean} [isMove] Passed as `true` if the remove was part of a move operation within this Store.
     */ //endregion
//region Add, insert & remove
/**
     * Removes a record from this store.
     * @param {String|String[]|Number|Number[]|Common.data.Model|Common.data.Model[]} records Record/array of records (or record ids) to remove
     * @param {Boolean} silent Specify true to suppress events/autoCommit
     * @returns {Common.data.Model[]} Removed records
     * @fires beforeRemove
     * @fires remove
     * @fires change
     * @category CRUD
     */value:function remove(records){var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var fromRemoveChild=arguments.length>2?arguments[2]:undefined;var me=this,storage=me.storage;// Ensure we have an array of records in case we are passed IDs
records=(Array.isArray(records)?records:[records]).reduce(function(result,r){r=me.getById(r);if(r){result.push(r);}return result;},[]);if(records.length){if(me.tree){// In case it's a set of records from different parents, group them by parent
var removeChildArgs=records.reduce(function(result,child){var parent=child.parent;if(parent){if(!result[parent.id]){result[parent.id]=[parent,[]];}result[parent.id][1].push(child);}return result;},{});// Remove the records each from their correct parent
for(var _i10=0,_Object$values=Object.values(removeChildArgs);_i10<_Object$values.length;_i10++){var argBlock=_Object$values[_i10];argBlock[0].removeChild(argBlock[1],false,fromRemoveChild);}return records;}// Ensure that records in collapsed groups are removed and events fired.
else if(me.isGrouped){var oldCount=storage.count,recordsInCollapsedGroups=[],changedGroupParents=new Set();// Collect any records which are in collapsed groups which will not be in the storage
// Collection, and so will not cause a store change.
// If we find some, we must fire the event which the store will react to and update itself.
var _iteratorNormalCompletion17=true;var _didIteratorError17=false;var _iteratorError17=undefined;try{for(var _iterator17=records[Symbol.iterator](),_step17;!(_iteratorNormalCompletion17=(_step17=_iterator17.next()).done);_iteratorNormalCompletion17=true){var rec=_step17.value;var _rec$instanceMeta=rec.instanceMeta(me),groupParent=_rec$instanceMeta.groupParent;if(groupParent&&groupParent.meta.collapsed){recordsInCollapsedGroups.push(rec);}// Collect group header records which change so they can announce this to cause UI updates.
ArrayHelper.remove(groupParent.groupChildren,rec);groupParent.meta.childCount--;changedGroupParents.add(groupParent);}// The changed group parents must announce their changes, otherwise the group headers
// in a UI will not refresh to reflect the change.
}catch(err){_didIteratorError17=true;_iteratorError17=err;}finally{try{if(!_iteratorNormalCompletion17&&_iterator17.return!=null){_iterator17.return();}}finally{if(_didIteratorError17){throw _iteratorError17;}}}var _iteratorNormalCompletion18=true;var _didIteratorError18=false;var _iteratorError18=undefined;try{for(var _iterator18=changedGroupParents[Symbol.iterator](),_step18;!(_iteratorNormalCompletion18=(_step18=_iterator18.next()).done);_iteratorNormalCompletion18=true){var groupParent=_step18.value;me.onModelChange(groupParent,{},{});}// The store must react as if these records in collapsed groups have been removed from storage
}catch(err){_didIteratorError18=true;_iteratorError18=err;}finally{try{if(!_iteratorNormalCompletion18&&_iterator18.return!=null){_iterator18.return();}}finally{if(_didIteratorError18){throw _iteratorError18;}}}if(recordsInCollapsedGroups.length){storage.trigger('change',{action:'splice',removed:recordsInCollapsedGroups,added:[],replaced:[],oldCount:oldCount});}}// Give chance to veto or take action before records disappear.
if(!records.length||!silent&&me.trigger('beforeRemove',{records:records})===false){return null;}if(silent){me.suspendEvents();}storage.remove(records);if(silent){me.resumeEvents();}if(me.autoCommit){me.commit();}}return records;}/**
     * Clears store data. Used by removeAll, separate function for using with chained stores.
     * @private
     * @category CRUD
     */},{key:"clear",value:function clear(){var removing=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var me=this,storage=me.storage;if(me.storage.totalCount){// Give chance to veto or take action before records disappear.
if(removing&&me.trigger('beforeRemove',{records:storage.allValues,removingAll:true})===false){return null;}if(!removing){// If !removing, we suspend events, and Store#onDataChange won't get to
// do all this stuff.
var allRecords=me.registeredRecords;for(var i=allRecords.length-1,rec;i>=0;i--){rec=allRecords[i];if(rec&&!rec.isDestroyed){rec.unJoinStore(me);}}me.removed.clear();}if(!removing)storage.suspendEvents();// Clearing the storage will trigger 'removeAll' and 'change' if `removing`
storage.clear();if(!removing)storage.resumeEvents();me.added.clear();me.modified.clear();}}/**
     * Removes all records from the store.
     * @param silent
     * @fires removeAll
     * @fires change
     * @category CRUD
     */},{key:"removeAll",value:function removeAll(silent){var me=this,storage=me.storage;// No reaction to the storage Collection's change event.
if(silent){storage.suspendEvents();// If silent, the storage Collection won't fire the event we react to
// to unjoin, and we allow the removing flag in remove() to be true,
// so *it* will not do the unJoin, so if silent, so do it here.
var allRecords=me.registeredRecords;for(var i=allRecords.length-1,rec;i>=0;i--){rec=allRecords[i];if(rec&&!rec.isDestroyed){rec.unJoinStore(me);}}}if(me.tree){me.rootNode.clear();}else{me.clear();}if(silent){storage.resumeEvents();}}/**
     * Add records to store.
     * @param {Common.data.Model|Common.data.Model[]|Object|Object[]} records Array of records/data or a single record/data to add to store
     * @param {Boolean} [silent] Specify true to suppress events
     * @returns {Common.data.Model[]} Added records
     * @fires add
     * @fires change
     * @category CRUD
     */},{key:"add",value:function add(records){var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,storage=me.storage,added=[];if(!Array.isArray(records)){records=[records];}else if(!records.length){// Adding zero records, bail out
return;}me.tree=me.tree||Boolean(me.autoTree&&records[0].children);if(me.tree){return me.rootNode.appendChild(records,silent);}// Give chance to cancel action before records added.
if(!silent){if(me.trigger('beforeAdd',{records:records})===false){return null;}}records.forEach(function(data){added.push(data instanceof Model?data:me.createRecord(data));});if(silent){me.suspendEvents();}storage.add(added);if(silent){me.resumeEvents();}if(me.autoCommit){me.commit();}return added;}/**
     * Insert records to store.
     * @param index Index to insert at
     * @param records Record(s) or data to insert
     * @returns {Common.data.Model[]} Inserted records
     * @fires add
     * @fires change
     * @category CRUD
     */},{key:"insert",value:function insert(index,records){var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,storage=me.storage,added=[],insertBefore=me.getAt(index),_records=storage.values,removeIndices=[];if(!Array.isArray(records))records=[records];// Give chance to cancel action before records added.
if(me.trigger('beforeAdd',{records:records})===false){return null;}var isNoop,start,i;// If the records starting at index or (index - 1), are the same sequence
// that we are being asked to add, this is a no-op.
if(_records[start=index]===records[0]||_records[start=index-1]===records[0]){for(isNoop=true,i=0;isNoop&&i<records.length;i++){if(records[i]!==_records[start+i]){isNoop=false;}}}if(isNoop){return;}records.forEach(function(data){var record=data instanceof Model?data:me.createRecord(data),removedAtIndex=storage.indexOf(record);if(record.children&&record.children.length&&me.autoTree){me.tree=true;}added.push(record);// already in store, do some cleanup
if(removedAtIndex>-1){if(removedAtIndex<index&&insertBefore)index--;removeIndices.push(removedAtIndex);}// Store previous index to be able to determine that it is a move, since Collection does not handle that
record.meta.previousIndex=removedAtIndex;});if(me.tree){var root=me.rootNode;return root.insertChild(records,root.children&&root.children[index]);}// Silently remove them, so that they will be inserted into place.
// Collection is stable by default, and inserting an existing item
// is a no-op.
me.suspendEvents();me.storage.remove(removeIndices);me.resumeEvents();if(silent){me.suspendEvents();}storage.splice.apply(storage,[index,0].concat(added));if(silent){me.resumeEvents();}if(me.autoCommit){me.commit();}return added;}/**
     * Moves an individual item to another location.
     * @param {Object} item The item to move.
     * @param {Object} beforeItem the item to insert the first item before.
     */},{key:"move",value:function move(item,beforeItem){this.storage.move(item,beforeItem);}//endregion
//region Update multiple
},{key:"setMultiple",value:function setMultiple(filterFn,field,value){var me=this,records=[],changes=[];me.forEach(function(r){if(filterFn(r)){changes.push(r.set(field,value,true));records.push(r);}});// TODO: should consolidate with update, make it take an array instead? to only have to listen for one event outside of store?
me.trigger('updateMultiple',{records:records,all:me.records.length===records.length});me.trigger('change',{action:'updatemultiple',records:records,all:me.records.length===records.length});if(me.reapplyFilterOnUpdate&&me.isFiltered)me.filter();}},{key:"setAll",value:function setAll(field,value){var me=this,changes=[];me.forEach(function(r){changes.push(r.set(field,value,true));});me.trigger('updateMultiple',{records:me.records,all:true});me.trigger('change',{action:'updatemultiple',records:me.records,all:true});if(me.reapplyFilterOnUpdate&&me.isFiltered)me.filter();}//endregion
//region Commit
/**
     * Commits changes, per default only returns changes and resets tracking.
     * @returns {Object} Changes, see Store#changes
     * @fires beforeCommit
     * @fires commit
     * @category CRUD
     */},{key:"commit",value:function commit(){// resets stores tracking of changed records, doesn't store changes, only returns them
var me=this,changes=me.changes;return me.callPreventable('commit',{changes:changes},function(){me.modified.forEach(function(r){return r.clearChanges(false);});me.added.clear();me.modified.clear();me.removed.clear();return changes;});}/**
     * Discards changes in the store.
     * @fires change
     * @category CRUD
     * @private
     */ // TODO: Need to think of its name. `reject` is a candidate.
},{key:"clearChanges",value:function clearChanges(){var me=this;me.remove(me.added.values,true);me.modified.forEach(function(r){return r.clearChanges(false);});// TODO: removed records should be restored
me.added.clear();me.modified.clear();me.removed.clear();me.trigger('change',{action:'clearchanges'});}/**
     * Get uncommitted changes as an object of added/modified/removed arrays of records.
     *
     * ```
     * // Format:
     * {
     *      added: [], // array of Common.data.Model
     *      modified: [], // array of Common.data.Model
     *      removed: [] // array of Common.data.Model
     * }
     * ```
     *
     * @property {Object} changes
     * @property {Array} changes.added Records that have been added
     * @property {Array} changes.modified Records that have been updated
     * @property {Array} changes.removed Records that have been removed
     * @readonly
     * @category Records
     */},{key:"applyChangesFromStore",//endregion
//region Changes from other store
/**
     * Applies changes from another store to this store. Usefull if cloning records in one store to display in a
     * grid in a popup etc. to reflect back changes.
     * @param {Common.data.Store} otherStore
     * @category CRUD
     */value:function applyChangesFromStore(otherStore){var me=this,changes=otherStore.changes;if(!changes)return;if(changes.added){me.add(changes.added);}if(changes.removed){// Remove using id, otherwise indexOf in remove fn won't yield correct result
me.remove(changes.removed.map(function(r){return r.id;}));}if(changes.modified){changes.modified.forEach(function(record){var localRecord=me.getById(record.id);localRecord.set(record.modifications);});}}//endregion
},{key:"changes",get:function get(){var me=this;return me.added.count||me.modified.count||me.removed.count?{// Slicing to have changes intact when triggering commit
added:me.added.values.slice(),modified:me.modified.values.slice(),removed:me.removed.values.slice()}:null;}/**
     * Setting autoCommit to true automatically commits changes to records.
     * @property {Boolean}
     * @category Records
     */},{key:"autoCommit",get:function get(){return this._autoCommit;},set:function set(auto){this._autoCommit=auto;if(auto&&this.changes)this.commit();}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Commit changes automatically
             * @config {Boolean}
             * @default
             * @category Common
             */autoCommit:false};}}]);return StoreCRUD;}(Target||Base));};/**
 * @module Common/data/mixin/StoreFilter
 */ /**
 * Mixin for Store that handles filtering.
 * Filters are instances of {@link Common.util.CollectionFilter CollectionFilter} class.
 *
 * - Adding a filter for the same property will replace the current one (unless a unique {@link Common.util.CollectionFilter#config-id Id} is specified),
 * but will not clear any other filters.
 * - Adding a filter through the {@link #function-filterBy} function is ultimate.
 * It will clear all the property based filters and replace the current filterBy function if present.
 * - Removing records from the store does not remove filters!
 * The filters will be reapplied if {@link #config-reapplyFilterOnAdd}/{@link #config-reapplyFilterOnUpdate} are true and you add new records or update current.
 *
 * ```
 * // Add a filter
 * store.filter({
 *   property : 'score',
 *   value    : 10,
 *   operator : '>'
 * });
 *
 * // Reapply filters
 * store.filter();
 * ```
 *
 * @mixin
 */var StoreFilter=function StoreFilter(Target){return(/*#__PURE__*/function(_ref26){_inherits2(StoreFilter,_ref26);function StoreFilter(){_classCallCheck2(this,StoreFilter);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreFilter).apply(this,arguments));}_createClass2(StoreFilter,[{key:"traverseFilter",//endregion
value:function traverseFilter(record){var me=this,hitsCurrent=!record.isRoot&&me.filtersFunction(record),hitsChild=false,children=record.unfilteredChildren||record.children;// leaf, bail out
if(!children||!children.length){return hitsCurrent;}if(!record.unfilteredChildren){record.unfilteredChildren=record.children.slice();}record.children=record.unfilteredChildren.filter(function(r){return me.traverseFilter(r);});if(record.children.length)hitsChild=true;return hitsCurrent||hitsChild;}},{key:"traverseClearFilter",value:function traverseClearFilter(record){var me=this;if(record.children){record.children=record.unfilteredChildren||record.children;record.children.forEach(function(r){return me.traverseClearFilter(r);});}}// TODO: Get rid of this.
// The Filter feature of a Grid pokes around in the Store to ask this question.
},{key:"processFieldFilter",value:function processFieldFilter(filter,value){if(typeof filter==='string'){filter={property:filter,value:value};}filter=filter instanceof CollectionFilter?filter:new CollectionFilter(filter);// We want notification upon change of field, value or operator
filter.owner=this;// Collection will replace any already existing filter on the field, unless it has id specified
this.filters.add(filter);}/**
     * Filters the store by *adding* the specified filter or filters to the existing filters applied to this Store. Call without arguments to reapply filters.
     * ```
     * // Add a filter
     * store.filter({
     *   property : 'age',
     *   operator : '>',
     *   value    : 90
     * });
     *
     * // Reapply filters
     * store.filter();
     * ```
     * @param {String|Object|Object[]|function} field Field name or a filter config or a function to use for filtering
     * @param value Value, used if field is a field name and not a config
     * @fires filter
     * @fires change
     * @category Sort, group & filter
     */},{key:"filter",value:function filter(field,value){var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,storage=me.storage,filters=me.filters,rootNode=me.rootNode,oldCount=me.count;if(field){var fieldType=_typeof(field);// We will not be informed about Filter mutations while configuring.
me.isConfiguring=true;// If we provide array of objects looking like :
//  {
//      field : 'fieldName',
//      value : 'someValue',
//      [operator : '>']
//  }
//  or ...
//  {
//      field : 'fieldName',
//      filterBy : function (value, record) {
//          return value > 50;
//      }
//  }
if(Array.isArray(field)){// we omit "value" argument in this case
silent=value;field.forEach(me.processFieldFilter,me);}else if(fieldType==='function'){me.filters=field;}else{me.processFieldFilter(field,value);}// Open up to recieving Filter mutation notifications again
me.isConfiguring=false;// We added a disabled filter to either no filters, or all disabled filters, so no change.
if(!me.isFiltered){return;}}// Invalidate the filtersFunction so that it has to be recalculated upon next access
me.filtersFunction=null;if(me.tree){if(me.isFiltered){me.traverseFilter(rootNode);}else{me.traverseClearFilter(rootNode);}storage.replaceValues(me.collectDescendants(rootNode).visible,true);}else{if(me.isFiltered){storage.addFilter({id:'primary-filter',filterBy:me.filtersFunction});}else{storage.filters.clear();}}me.resetRelationCache();if(!silent){me.triggerFilterEvent({action:'filter',filters:filters,oldCount:oldCount,records:me.storage.values});}}},{key:"triggerFilterEvent",// Used from filter() and StoreCRUD when reapplying filters
value:function triggerFilterEvent(event){this.trigger('filter',event);this.trigger('refresh',event);this.trigger('change',event);}/**
     * Filter store using a function to test each record. Return true from the function to include record in filtered set
     * @param {Function} fn Function used to test records
     * @example
     * store.filterBy(record => record.age > 25 && record.name.startsWith('A'));
     * @category Sort, group & filter
     */},{key:"filterBy",value:function filterBy(fn){this.filter(fn);}/**
     * Removes filtering from the specified field.
     * @param {String} field Field to not filter the store on any longer
     * @private
     * @deprecated
     * Only used by the Grid Filtering plugin which assumes one Filter per field.
     * @category Sort, group & filter
     */},{key:"removeFieldFilter",value:function removeFieldFilter(field,silent){var me=this,filter=me.filters.getBy('property',field);// If we have such a filter, remove it.
if(filter){me.filters.remove(filter);// Invalidate the filtersFunction so that it has to be recalculated upon next access
me._filtersFunction=null;if(!silent){me.filter();}}}/**
     * Removes all filters from the store.
     * @category Sort, group & filter
     */},{key:"clearFilters",value:function clearFilters(silent){this.filters.clear();this.filter(undefined,undefined,silent);}},{key:"convertFilterToString",value:function convertFilterToString(field){var filter=this.filters.getBy('property',field),result='';if(filter&&!filter.filterBy){result=String(filter);}return result;}},{key:"filters",//endregion
//region Events
/**
     * Fired after applying filters to the store
     * @event filter
     * @param {Common.data.Store} source This Store
     * @param {Common.util.Collection} filters Filters used by this Store
     * @param {Common.data.Model[]} records Filtered records
     */ //endregion
//region Properties
/**
     * Currently applied filters. A collection of {@link Common.util.CollectionFilter} instances.
     * @type {Common.util.Collection}
     * @readonly
     * @category Sort, group & filter
     */set:function set(filters){var me=this,collection=me.filters;collection.clear();// Invalidate the filtersFunction so that it has to be recalculated upon next access
me._filtersFunction=null;// If we are being asked to filter, parse the filters.
if(filters){if(filters.constructor.name==='Object'){for(var _i11=0,_Object$entries=Object.entries(filters);_i11<_Object$entries.length;_i11++){var f=_Object$entries[_i11];// Entry keys are either a field name with its value being the filter value
// or, there may be one filterBy property which specifies a filering function.
if(f[0]==='filterBy'&&typeof f[1]==='function'){collection.add(new CollectionFilter({filterBy:f[1]}));}else{collection.add(new CollectionFilter(f[1].constructor.name==='Object'?Object.assign({property:f[0]},f[1]):{property:f[0],value:f[1]}));}}}else if(Array.isArray(filters)){// Make sure we are adding CollectionFilters
collection.add.apply(collection,_toConsumableArray(filters.map(function(filterConfig){if(filterConfig instanceof CollectionFilter){return filterConfig;}return new CollectionFilter(filterConfig);})));}else if(filters.isCollection){// Use supplied collection? Opting to use items from it currently
collection.add.apply(collection,_toConsumableArray(filters.values));}else{collection.add(new CollectionFilter({filterBy:filters}));}collection.forEach(function(item){return item.owner=me;});}},get:function get(){return this._filters||(this._filters=new Collection({extraKeys:['property']}));}},{key:"filtersFunction",set:function set(filtersFunction){this._filtersFunction=filtersFunction;},get:function get(){var me=this,filters=me.filters,isGrouped=me.isGrouped;if(!me._filtersFunction){if(filters.count){var generatedFilterFunction=CollectionFilter.generateFiltersFunction(filters);me._filtersFunction=function(candidate){// A group record is filtered in if it has passing groupChildren.
if(isGrouped&&candidate.meta.specialRow){return candidate.groupChildren.some(generatedFilterFunction);}else{return generatedFilterFunction(candidate);}};}else{me._filtersFunction=FunctionHelper.returnTrue;}}return me._filtersFunction;}/**
     * Check if store is filtered
     * @returns {Boolean}
     * @readonly
     * @category Sort, group & filter
     */},{key:"isFiltered",get:function get(){return this.filters.values.some(function(filter){return!filter.disabled;});}},{key:"latestFilterField",get:function get(){return this.filters.last?this.filters.last.property:null;}},{key:"filtered",get:function get(){return this.storage.isFiltered;}},{key:"filterState",get:function get(){return this.filters.values.map(function(filter){return ObjectHelper.cleanupProperties(filter.config);});}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Specify a filter config to use initial filtering
             * @config {Object}
             * @category Filtering
             */filters:null,/**
             * Specify true to reapply filters when a record is added to the store.
             * @config {Boolean}
             * @default
             * @category Filtering
             */reapplyFilterOnAdd:false,/**
             * Specify true to reapply filters when a record is updated in the store.
             * @config {Boolean}
             * @default
             * @category Filtering
             */reapplyFilterOnUpdate:false};}}]);return StoreFilter;}(Target||Base));};/**
 * @module Common/data/mixin/StoreGroup
 */var resortActions={add:1,replace:1};/**
 * Mixin for Store that handles grouping.
 *
 * @example
 * store.group('city');
 *
 * @mixin
 */var StoreGroup=function StoreGroup(Target){return(/*#__PURE__*/function(_ref27){_inherits2(StoreGroup,_ref27);function StoreGroup(){_classCallCheck2(this,StoreGroup);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreGroup).apply(this,arguments));}_createClass2(StoreGroup,[{key:"construct",//endregion
//region Events
/**
     * Fired when grouping is stopped
     * @event groupingOff
     * @param {Common.data.Store} source This Store
     */ //endregion
//region Init
value:function construct(config){_get2(_getPrototypeOf2(StoreGroup.prototype),"construct",this).call(this,config);// For handling record mutation, *not* add/remove of records.
// Sorts dataset if necessary.
this.on('change',this.onDataChanged);}},{key:"storeCollapsedGroups",value:function storeCollapsedGroups(){var me=this;me.collapsedGroupsHash={};// Remember which groups are collapsed
if(me.groupRecords&&me.groupRecords.length){me.groupRecords.forEach(function(rec){if(me.expand(rec)){me.collapsedGroupsHash[rec.id]=true;}});return true;}return false;}},{key:"restoreCollapsedGroups",value:function restoreCollapsedGroups(){var me=this;Object.keys(me.collapsedGroupsHash).forEach(function(id){return me.collapse(me.getById(id));});}},{key:"onDataChange",value:function onDataChange(_ref28){var storage=_ref28.source,action=_ref28.action,removed=_ref28.removed;var me=this;var records=storage.values;// When records are added or removed, re-evaluate the group records
// so that when the events are fired by the super call, the group
// records are in place.
if(me.isGrouped){if(action==='splice'&&removed&&removed.length){// Remember which groups are collapsed
if(me.storeCollapsedGroups()){me.storage.replaceValues(me.removeHeadersAndFooters(me.storage.values),true);}me.storage.replaceValues(me.prepareGroupRecords(me.storage.values),true);// Re-collapse the groups
me.restoreCollapsedGroups();}}// Remove all group headers and footers
else{storage.replaceValues(me.removeHeadersAndFooters(records),true);}_get2(_getPrototypeOf2(StoreGroup.prototype),"onDataChange",this)&&_get2(_getPrototypeOf2(StoreGroup.prototype),"onDataChange",this).apply(this,arguments);}// private function that collapses on the data level
// TODO: make public and trigger events for grid to react to?
},{key:"collapse",value:function collapse(groupRecord){if(groupRecord&&!groupRecord.meta.collapsed){this.excludeGroupRecords(groupRecord);groupRecord.meta.collapsed=true;return true;}return false;}// private function that expands on the data level
// TODO: make public and trigger events for grid to react to?
},{key:"expand",value:function expand(groupRecord){if(groupRecord&&groupRecord.meta.collapsed){this.includeGroupRecords(groupRecord);groupRecord.meta.collapsed=false;return true;}return false;}},{key:"removeHeadersAndFooters",value:function removeHeadersAndFooters(records){var me=this;return records.filter(function(r){if(r.meta.specialRow){me.unregister(r);return false;}else{return true;}},true);}},{key:"prepareGroupRecords",value:function prepareGroupRecords(){var records=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.registeredRecords;var me=this;records=me.removeHeadersAndFooters(records);if(!me.isGrouped){return records;}var groupedRecords=[],field=me.groupers[0].field,groupRecords=[];var curGroup=null,curGroupRecord=null,childCount=0;function addFooter(){var val=curGroupRecord.meta.groupRowFor,id="group-footer-".concat(typeof val==='number'?val:StringHelper.createId(val)),footer=me.getById(id)||new me.modelClass({id:id},me,{specialRow:true,groupFooterFor:val,groupRecord:curGroupRecord});me.register(footer);footer.groupChildren=curGroupRecord.groupChildren;groupRecords.push(footer);groupedRecords.push(footer);me.allRecords.push(footer);curGroupRecord.groupChildren.push(footer);childCount++;return footer;}records.forEach(function(record){var val=record[field],id="group-header-".concat(typeof val==='number'?val:StringHelper.createId(val));// A group header or footer record of an empty group.
// Remove from the data
if(record.groupChildren&&!record.groupChildren.length){me.unregister(record);return;}if(!ObjectHelper.isEqual(val,curGroup)){if(curGroupRecord){// also add group footer? used by GroupSummary feature
if(me.useGroupFooters){addFooter(curGroupRecord);}curGroupRecord.meta.childCount=childCount;}curGroupRecord=me.getById(id)||new me.modelClass({id:id},me,{specialRow:true,groupRowFor:val,groupField:field});me.register(curGroupRecord);curGroupRecord.groupChildren=[];groupedRecords.push(curGroupRecord);me.allRecords.push(curGroupRecord);groupRecords.push(curGroupRecord);curGroup=val;childCount=0;}record.instanceMeta(me.id).groupParent=curGroupRecord;groupedRecords.push(record);curGroupRecord.groupChildren.push(record);childCount++;});// misses for last group without this
if(curGroupRecord){curGroupRecord.meta.childCount=childCount;// footer for last group
if(me.useGroupFooters){addFooter();}}me.groupRecords=groupRecords;return groupedRecords;}//endregion
//region Group and ungroup
/**
     * Is store currently grouped?
     * @property {Boolean}
     * @readonly
     * @category Sort, group & filter
     */},{key:"group",/**
     * Currently used groupers
     * @readonly
     * @member {Object[]} groupers
     * @category Sort, group & filter
     */ /**
     * Group records.
     * @param {String} field Field to group by
     * @param {Boolean} ascending Group direction
     * @param {Boolean} add Add grouper (true) or use only this grouper (false)
     * @param {Boolean} performSort Trigger sort directly, which does the actual grouping
     * @param {Boolean} silent True to not fire events
     * @fires group
     * @fires refresh
     * @category Sort, group & filter
     */value:function group(field,ascending){var add=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var performSort=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var silent=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var me=this;var newGrouper;if(add){me.groupers.push(newGrouper={field:field,ascending:ascending,complexMapping:field.includes('.')});}else if(field){if(ascending==undefined){ascending=me.groupInfo&&me.groupInfo.field===field?!me.groupInfo.ascending:true;}me.groupInfo=newGrouper={field:field,ascending:ascending,complexMapping:field.includes('.')};me.groupers=[me.groupInfo];}if(newGrouper){var prototype=me.modelClass.prototype;// Create a getter for complex field names like "get resource.city"
if(newGrouper.complexMapping&&!prototype.hasOwnProperty(field)){Object.defineProperty(prototype,field,{get:function get(){return ObjectHelper.getPath(this,field);}});}}// as far as the store is concerned, grouping is just more sorting. so trigger sort
if(performSort!==false){me.sort(null,null,false,true);}if(!silent){/**
             * Fired when grouping changes
             * @event group
             * @param {Common.data.Store} source This Store
             * @param {Object[]} groupers Applied groupers
             * @param {Common.data.Model[]} records Grouped records
             */me.trigger('group',{isGrouped:me.isGrouped,groupers:me.groupers,records:me.storage.values});me.trigger('refresh',{action:'group',isGrouped:me.isGrouped,groupers:me.groupers,records:me.storage.values});}}// Internal since UI does not support multi grouping yet
/**
     * Add a grouping level (a grouper).
     * @param {String} field Field to group by
     * @param {Boolean} ascending Group direction
     * @category Sort, group & filter
     * @internal
     */},{key:"addGrouper",value:function addGrouper(field){var ascending=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.group(field,ascending,true);}// Internal since UI does not support multi grouping yet
/**
     * Removes a grouping level (a grouper)
     * @param {String} field Grouper to remove
     * @category Sort, group & filter
     * @internal
     */},{key:"removeGrouper",value:function removeGrouper(field){var me=this,index=me.groupers.findIndex(function(grouper){return grouper.field===field;});if(index>-1){me.groupers.splice(index,1);me.group();}}/**
     * Removes all groupers, turning store grouping off.
     * @fires groupingOff
     * @category Sort, group & filter
     */},{key:"clearGroupers",value:function clearGroupers(){var me=this,groupers=me.groupers;if(groupers.length){groupers.length=0;me.groupRecords.forEach(function(r){if(r.meta.collapsed){me.includeGroupRecords(r);}});me.storage.replaceValues(me.removeHeadersAndFooters(me.registeredRecords),true);me.group(null,null,null,false);if('groupRecords'in me){delete me.groupRecords;}}}//endregion
//region Get and check
/**
     * Check if a record belongs to a certain group (only for the first grouping level)
     * @param {Common.data.Model} record Record
     * @param groupValue Groups value
     * @returns {Boolean} True if the record belongs to the group, otherwise false
     * @category Sort, group & filter
     */},{key:"isRecordInGroup",value:function isRecordInGroup(record,groupValue){if(!this.isGrouped)return null;var me=this,groupField=me.groupers[0]&&me.groupers[0].field;return record[groupField]===groupValue&&!record.meta.specialRow;}},{key:"isInCollapsedGroup",value:function isInCollapsedGroup(record){var parentGroupRec=record.instanceMeta(this).groupParent;return parentGroupRec&&parentGroupRec.meta.collapsed;}/**
     * Returns all records in the group with specified groupValue.
     * @param groupValue
     * @returns {Common.data.Model[]} Records in specified group or null if store not grouped
     * @category Sort, group & filter
     */},{key:"getGroupRecords",value:function getGroupRecords(groupValue){var me=this;if(!me.isGrouped)return null;return me.storage.values.filter(function(record){return me.isRecordInGroup(record,groupValue);});}/**
     * Get all group titles.
     * @returns {String[]} Group titles
     * @category Sort, group & filter
     */},{key:"getGroupTitles",value:function getGroupTitles(){var me=this;if(!me.isGrouped)return null;return me.getDistinctValues(me.groupers[0]&&me.groupers[0].field);}//endregion
},{key:"onDataChanged",value:function onDataChanged(event){if(this.isGrouped&&(// If an action flagged as requiring resort is performed...
!event.changes&&resortActions[event.action]||// ...or if the group field has changes...
event.changes&&this.groupers.some(function(grouper){return grouper.field in event.changes;}))){// ...then resort
this.sort();}}/**
     * Adds or removes records in a group from storage. Used when expanding/collapsing groups.
     * @private
     * @param {Common.data.Model} groupRecord Group which records should be added or removed
     * @param {Boolean} include Include (true) or exclude (false) records
     * @category Grouping
     */},{key:"internalIncludeExcludeGroupRecords",value:function internalIncludeExcludeGroupRecords(groupRecord,include){var me=this,index=me.indexOf(groupRecord),mapId=me.id;// prevent removing from already collapsed and vice versa
if(groupRecord.meta.collapsed&&!include)return;if(!groupRecord.meta.collapsed&&include)return;groupRecord.groupChildren.forEach(function(child){return child.instanceMeta(mapId).hiddenByCollapse=!include;});if(include){var _me$storage$values;(_me$storage$values=me.storage.values).splice.apply(_me$storage$values,[index+1,0].concat(_toConsumableArray(groupRecord.groupChildren)));}else{me.storage.values.splice(index+1,groupRecord.groupChildren.length);}me.storage._indicesInvalid=true;me._idMap=null;}/**
     * Removes records in a group from storage. Used when collapsing a group.
     * @private
     * @param groupRecord Group which records should be removed
     * @category Grouping
     */},{key:"excludeGroupRecords",value:function excludeGroupRecords(groupRecord){this.internalIncludeExcludeGroupRecords(groupRecord,false);}/**
     * Adds records in a group to storage. Used when expanding a group.
     * @private
     * @param groupRecord Group which records should be added
     * @category Grouping
     */},{key:"includeGroupRecords",value:function includeGroupRecords(groupRecord){this.internalIncludeExcludeGroupRecords(groupRecord,true);}/**
     * Collects all group headers + children, whether expanded or not
     * @private
     * @returns {Common.data.Model[]}
     */},{key:"collectGroupRecords",value:function collectGroupRecords(){return this.records.reduce(function(records,record){if(record.meta.specialRow){records.push(record);if('groupRowFor'in record.meta){records.push.apply(records,record.groupChildren);}}return records;},[]);}},{key:"isGrouped",get:function get(){return Boolean(this.groupers.length);}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Initial groupers, specify to have store grouped automatically after initially setting data
             * @config {Object[]}
             * @category Common
             */groupers:[]};}}]);return StoreGroup;}(Target||Base));};/**
 * @module Common/data/mixin/StoreRelation
 */ /**
 * Mixin for Store that handles relations with other stores (actually defined on model).
 *
 * @private
 *
 * @mixin
 */var StoreRelation=function StoreRelation(Target){return(/*#__PURE__*/function(_ref29){_inherits2(StoreRelation,_ref29);function StoreRelation(){_classCallCheck2(this,StoreRelation);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreRelation).apply(this,arguments));}_createClass2(StoreRelation,[{key:"initRelations",//region Init
/**
     * Initialized relations, called from constructor
     * @private
     */value:function initRelations(reset){var me=this,relations=me.modelClass.relations;if(reset&&me.modelRelations){// reset will reinit all relations, stop listening for store events on existing ones
me.modelRelations.forEach(function(relation){if(relation.storeDetacher)relation.storeDetacher();});}if((!me.modelRelations||me.modelRelations.length===0||reset)&&relations){me.modelRelations=[];// foreignKeys is filled when model exposes its properties
relations&&relations.forEach(function(modelRelationConfig){var config=Object.assign({},modelRelationConfig),relatedStore=typeof config.store==='string'?me[config.store]:config.store;config.dependentStore=me;me.modelRelations.push(config);if(relatedStore){config.storeProperty=config.store;config.store=relatedStore;// repeated from initRelationStores, needed if stored is assigned late
var dependentStoreConfigs=relatedStore.dependentStoreConfigs;// Add link to dependent store
if(dependentStoreConfigs.has(me)){dependentStoreConfigs.get(me).push(config);}else{dependentStoreConfigs.set(me,[config]);}// if foreign key specifies collectionName the related store should also be configured
if(config.collectionName){relatedStore.initRelationCollection(config,me);}if(relatedStore.count>0){relatedStore.updateDependentStores('dataset',relatedStore.records);}}});}}/**
     * Called from other end of an relation when this store should hold a collection of related records.
     * @private
     * @param config
     * @param collectionStore
     */},{key:"initRelationCollection",value:function initRelationCollection(config,collectionStore){// TODO: parts of this should move to model?
var me=this,name=config.collectionName;if(!me.collectionStores){me.collectionStores={};}me.collectionStores[name]={store:collectionStore,config:config};if(!me[name+'Store']){me[name+'Store']=collectionStore;}if(me.count>0){me.initModelRelationCollection(name,me.records);}}},{key:"initModelRelationCollection",value:function initModelRelationCollection(name,records){var me=this;// add collection getter to each model
records.forEach(function(record){// Needs to work in trees also, if not a tree traverse just calls fn on self
record.traverse(function(node){!(name in node)&&Object.defineProperty(node,name,{enumerable:true,get:function get(){return me.getCollection(this,name);},set:function set(value){return me.setCollection(this,name,value);}});});});}//TODO: Do diff update, this is called on filtering and will be heavy with lots of records
/**
     * Updates relationCache for all records.
     * @private
     */},{key:"resetRelationCache",value:function resetRelationCache(){this.relationCache={};this.forEach(function(record){return record.initRelations();});}/**
     * Caches related records from related store on the local store.
     * @private
     * @param record Local record
     * @param relations Relations to related store
     */},{key:"updateRecordRelationCache",value:function updateRecordRelationCache(record,relations){var me=this;relations&&relations.forEach(function(relation){// use related records id, or if called before "binding" is complete use foreign key
var foreignId=relation.related?relation.related.id:record.get(relation.config.fieldName);// cache on that id, removing previously cached value if any
foreignId!==undefined&&me.cacheRelatedRecord(record,foreignId,relation.config.relationName,foreignId);});}//endregion
//region Getters
/**
     * Returns records from a collection of related records. Not to be called directly, called from Model getter.
     * TODO: Move to Model?
     * @private
     * @param model
     * @param name
     * @returns {*}
     */},{key:"getCollection",value:function getCollection(model,name){var _this$collectionStore=this.collectionStores[name],config=_this$collectionStore.config,store=_this$collectionStore.store;return store.relationCache[config.relationName]&&store.relationCache[config.relationName][model.id]||[];}/**
     * Sets a collection of related records. Will updated the related store and trigger events from it. Not to be called
     * directly, called from Model setter.
     * @private
     */},{key:"setCollection",value:function setCollection(model,name,records){var _this$collectionStore2=this.collectionStores[name],config=_this$collectionStore2.config,store=_this$collectionStore2.store;if(!store.relationCache[config.relationName])store.relationCache[config.relationName]={};var old=(store.relationCache[config.relationName][model.id]||[]).slice(),added=[],removed=[];store.suspendEvents();// Remove any related records not in the new collection
old.forEach(function(record){if(!records.includes(record)){record[config.fieldName]=null;store.remove(record);removed.push(record);}});// Add records from the new collection not already in store
records.forEach(function(record){if(record instanceof Model){if(!record.stores.includes(store)){store.add(record);added.push(record);}}else{var _store$add=store.add(record);var _store$add2=_slicedToArray(_store$add,1);record=_store$add2[0];added.push(record);}// Init relation
record[config.fieldName]=model.id;});store.resumeEvents();if(removed.length){store.trigger('remove',{records:removed});store.trigger('change',{action:'remove',records:removed});}if(added.length){store.trigger('add',{records:added});store.trigger('change',{action:'add',records:added});}}//endregion
//region Caching
/**
     * Adds a record to relation cache, optionally removing it if already there.
     * @private
     * @param record
     * @param id
     * @param name
     * @param uncacheId
     */},{key:"cacheRelatedRecord",value:function cacheRelatedRecord(record,id,name){var uncacheId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var me=this,cache=me.relationCache[name]||(me.relationCache[name]={});if(uncacheId!==null){me.uncacheRelatedRecord(record,name,uncacheId);}if(id){// Only include of not already in relation cache, which might happen when removing and re-adding the same instance
ArrayHelper.include(cache[id]||(cache[id]=[]),record);}}/**
     * Removes a record from relation cache, for a specific relation (specifiy relation name and id) or for all relations
     * @private
     * @param record Record to remove from cache
     * @param name Optional, relation name
     * @param id Optional, id
     */},{key:"uncacheRelatedRecord",value:function uncacheRelatedRecord(record){var name=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var id=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this;function remove(relationName,relatedId){var cache=me.relationCache[relationName],oldCache=cache&&cache[relatedId];// When unjoining a record from a filtered store the relationCache will also be filtered
// and might give us nothing, in which case we have nothing to clean up and bail out
if(oldCache){var uncacheIndex=oldCache.indexOf(record);uncacheIndex>=0&&oldCache.splice(uncacheIndex,1);if(oldCache.length===0){delete cache[relatedId];}}}if(id!==null){remove(name,id);}else{if(record.meta.relationCache){Object.entries(record.meta.relationCache).forEach(function(_ref30){var _ref31=_slicedToArray(_ref30,2),relationName=_ref31[0],relatedRecord=_ref31[1];var relatedId=relatedRecord&&relatedRecord.id;remove(relationName,relatedId);});}}}/**
     * Updates related stores when store is cleared, a record is removed or added.
     * @private
     * @param {String} action
     * @param {Common.data.Model[]} records
     */},{key:"updateDependentStores",value:function updateDependentStores(action,records){var _this22=this;this.dependentStoreConfigs.forEach(function(configs){configs.forEach(function(config){var dependentStore=config.dependentStore,cache=dependentStore.relationCache[config.relationName];if(action==='dataset'){config.collectionName&&_this22.initModelRelationCollection(config.collectionName,records);dependentStore.forEach(function(record){var foreign=record.initRelation(config);foreign&&dependentStore.cacheRelatedRecord(record,foreign.id,config.relationName,foreign.id);});return;}if(action==='removeall'){dependentStore.forEach(function(record){record.removeRelation(config);});delete dependentStore.relationCache[config.relationName];return;}if(action==='add'){config.collectionName&&_this22.initModelRelationCollection(config.collectionName,records);}if(action==='add'||action==='remove'){records.forEach(function(record){var dependentRecords=cache&&cache[record.id];switch(action){case'remove':// removing related record removes from cache on model and store
if(dependentRecords){dependentRecords.forEach(function(dependentRecord){return dependentRecord.removeRelation(config);});// Altered to not delete on self, simplifies taking actions on related records after remove if relation still lives
//delete cache[relatedRecord.id];
}// TODO: Should removing related set foreign key to null? (removing Team sets Player.teamId to null)
break;case'add':// adding a new record in related store checks if any foreign keys match the new id,
// and if so it sets up the relation
dependentStore.forEach(function(dependentRecord){if(dependentRecord.get(config.fieldName)==record.id){dependentRecord.initRelation(config);dependentStore.cacheRelatedRecord(dependentRecord,record.id,config.relationName);}});break;}});}});});}/**
     * Updates relation cache and foreign key value when a related objects id is changed.
     * @private
     */},{key:"updateDependentRecordIds",value:function updateDependentRecordIds(oldValue,value){this.dependentStoreConfigs&&this.dependentStoreConfigs.forEach(function(configs){configs.forEach(function(config){var dependentStore=config.dependentStore,cache=dependentStore.relationCache[config.relationName],localRecords=cache&&cache[oldValue]&&cache[oldValue].slice();localRecords&&localRecords.forEach(function(localRecord){localRecord.set(config.fieldName,value,false,true);dependentStore.cacheRelatedRecord(localRecord,value,config.relationName,oldValue);});});});}//endregion
}]);return StoreRelation;}(Target||Base));};/**
 * @module Common/data/mixin/StoreSum
 */ /**
 * Mixin for Store that handles summaries.
 *
 * @mixin
 */var StoreSum=function StoreSum(Target){return(/*#__PURE__*/function(_ref32){_inherits2(StoreSum,_ref32);function StoreSum(){_classCallCheck2(this,StoreSum);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreSum).apply(this,arguments));}_createClass2(StoreSum,[{key:"sum",/**
     * Returns sum calculated by adding value of specified field for specified records. Defaults to using all records
     * in store
     * @param {String} field Field to summarize by
     * @param {Common.data.Model[]} records Records to summarize, uses all records if unspecified.
     * @returns {Number}
     */value:function sum(field){var records=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.storage.values;if(!records)return 0;return records.reduce(function(sum,record){if(record.meta.specialRow)return sum;var v=Number(record[field]);return isNaN(v)?sum:sum+v;},0);}/**
     * Returns min value for the specified field. Defaults to look through all records in store
     * @param {String} field Field to find min value for
     * @param {Common.data.Model[]} records Records to process, uses all records if unspecified
     * @returns {Number}
     */},{key:"min",value:function min(field){var records=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.storage.values;if(!records||!records.length)return 0;return records.reduce(function(min,record){if(record[field]<min)min=record[field];return min;},records[0][field]);}/**
     * Returns max value for the specified field. Defaults to look through all records in store
     * @param {String} field Field to find max value for
     * @param {Common.data.Model[]} records Records to process, uses all records if unspecified
     * @returns {Number}
     */},{key:"max",value:function max(field){var records=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.storage.values;if(!records||!records.length)return 0;return records.reduce(function(max,record){if(record[field]>max)max=record[field];return max;},records[0][field]);}/**
     * Returns the average value for the specified field. Defaults to look through all records in store
     * @param {String} field Field to calculate average value for
     * @param {Common.data.Model[]} records Records to process, uses all records if unspecified
     * @returns {Number}
     */},{key:"average",value:function average(field){var records=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.storage.values;if(!records||!records.length)return 0;var count=0,sum=records.reduce(function(sum,record){if(record.meta.specialRow)return sum;var v=parseFloat(record[field]);if(!isNaN(v)){count++;return sum+v;}else{return sum;}},0);return sum/count;}/**
     * Returns sum by adding value of specified field for records in the group with the specified groupValue.
     * @param groupValue Group to summarize
     * @param {String} field Field to summarize by
     * @returns {Number} Sum or null if store not grouped
     */},{key:"groupSum",value:function groupSum(groupValue,field){return this.sum(field,this.getGroupRecords(groupValue));}}]);return StoreSum;}(Target||Base));};/**
 * @module Common/data/mixin/StoreSearch
 */var stringFound=function stringFound(value,find){return String(value).toLowerCase().indexOf(find)!==-1;},comparisons={string:stringFound,number:stringFound,boolean:stringFound,date:function date(value,find){if(value instanceof Date&&find instanceof Date){return String(value)===String(find);}return String(value.getMonth()+1).indexOf(find)!==-1||String(value.getDate()).indexOf(find)!==-1||String(value.getFullYear()).indexOf(find)!==-1;}};/**
 * Mixin for Store that handles searching (multiple records) and finding (single record).
 *
 * @example
 * // find all records that has a field containing the string john
 * let hits = store.search('john');
 *
 * @mixin
 */var StoreSearch=function StoreSearch(Target){return(/*#__PURE__*/function(_ref33){_inherits2(StoreSearch,_ref33);function StoreSearch(){_classCallCheck2(this,StoreSearch);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreSearch).apply(this,arguments));}_createClass2(StoreSearch,[{key:"search",//region Search (multiple hits)
/**
     * Find all hits.
     * @param find Value to search for
     * @param {Object[]} fields Fields to search value in
     * @returns {*} Array of hits, in the format { index: x, data: record }
     */value:function search(find){var fields=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var records=this.storage.values,len=records.length,found=[];if(find==null){return null;}if(typeof find==='string'){find=String(find).toLowerCase();}var i,record,value,valueType,comparison;for(i=0;i<len;i++){record=records[i];var _iteratorNormalCompletion19=true;var _didIteratorError19=false;var _iteratorError19=undefined;try{for(var _iterator19=(fields||record.fieldNames)[Symbol.iterator](),_step19;!(_iteratorNormalCompletion19=(_step19=_iterator19.next()).done);_iteratorNormalCompletion19=true){var key=_step19.value;value=record[key];valueType=value instanceof Date?'date':_typeof(value);comparison=comparisons[valueType];if(value&&comparison&&comparison(value,find)){found.push({index:i,data:record,field:key,id:record.id});}}}catch(err){_didIteratorError19=true;_iteratorError19=err;}finally{try{if(!_iteratorNormalCompletion19&&_iterator19.return!=null){_iterator19.return();}}finally{if(_didIteratorError19){throw _iteratorError19;}}}}return found;}/**
     * Find all hits in a column
     * @param field The store field to search in
     * @param value Value to search for
     * @returns {*} Array of hits, in the format { index: x, data: record }
     */},{key:"findByField",value:function findByField(field,value){var records=this.storage.values,i,len=records.length,record,found=[],fieldValue;if(value!==null&&value!==undefined){value=String(value).toLowerCase();}for(i=0;i<len;i++){record=records[i];fieldValue=record[field];var type=fieldValue instanceof Date?'date':_typeof(fieldValue);var comparison={'date':function date(){return Boolean(fieldValue)&&fieldValue.toLocaleString().includes(value);},'string':function string(){return Boolean(fieldValue)&&fieldValue.toLowerCase().includes(value);},'number':function number(){return typeof fieldValue==='number'&&fieldValue.toString().includes(value);},'object':function object(){return fieldValue===value;},// typeof null === object
'undefined':function undefined(){return fieldValue===value;}};if((value===null||value===undefined)&&fieldValue===value||value&&comparison[type]()){found.push({id:record.id,index:i,data:record});}}return found;}//endregion
//region Find (single hit)
/**
     * Finds the first record for which the specified function returns true
     * @param {Function} fn Comparison function, called with record as parameter
     * @returns {Common.data.Model} Record or null if none found
     *
     * @example
     * store.find(record => record.color === 'blue');
     */},{key:"find",value:function find(fn){return this.storage.values.find(fn);}/**
     * Finds the first record for which the specified field has the specified value
     * @param {String} fieldName Field name
     * @param {*} value Value to find
     * @returns {Common.data.Model} Record or null if none found
     */},{key:"findRecord",value:function findRecord(fieldName,value){var searchAllRecords=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var matchFn=function matchFn(r){return ObjectHelper.isEqual(r[fieldName],value);};if(this.tree){return this.query(matchFn)[0];}return(searchAllRecords?this.storage.allValues:this.storage.values).find(matchFn);}/**
     * Searches the Store records using the passed function.
     * @param fn A function that is called for each record. Return true to indicate a match
     * @returns {Common.data.Model[]} An array of the matching Records
     */},{key:"query",value:function query(fn){if(this.isTree){var matches=[];this.traverse(function(node){if(fn(node)){matches.push(node);}});return matches;}return this.storage.values.filter(fn);}//endregion
//region Others
/**
     * Returns true if the supplied function returns true for any record in the store
     * @param fn
     * @returns {Boolean}
     *
     * @example
     * store.some(record => record.age > 95); // true if any record has age > 95
     */},{key:"some",value:function some(fn){return this.storage.values.some(fn);}//endregion
}]);return StoreSearch;}(Target||Base));};/**
 * @module Common/data/mixin/StoreSort
 */ /**
 * Mixin for Store that handles simple sorting as well as multi-level sorting.
 *
 * ```javascript
 * // single sorter
 * store.sort('age');
 *
 * // single sorter as object, descending order
 * store.sort({ field : 'age', ascending : false });
 *
 * // multiple sorters
 * store.sort(['age', 'name']);
 *
 * // using locale specific sort (slow)
 * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });
 * ```
 *
 * @mixin
 */var StoreSort=function StoreSort(Target){return(/*#__PURE__*/function(_ref34){_inherits2(StoreSort,_ref34);function StoreSort(){_classCallCheck2(this,StoreSort);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreSort).apply(this,arguments));}_createClass2(StoreSort,[{key:"sort",//endregion
//region Add & remove sorters
/**
     * Sort records, either by replacing current sorters or by adding to them. A sorter can specify a custom sorter
     * function which will be called with arguments (ascending, recordA, recordB). Works in the same way as a standard
     * array sorter, except that returning null triggers the stores normal sorting routine.
     * ```
     * store.sort('age');
     * store.sort(['age', 'name']);
     * store.sort({ field: 'age', fn: (a, b, dir) => sorting logic... }
     * store.sort({ field : 'name', useLocaleSort : 'sv-se' });
     * ```
     * @param {String|Object} field Field to sort by (can also be an array of sorters or a config containing a custom sort fn)
     * @param {Boolean} [ascending] Sort order (used only if field specified as string)
     * @param {Boolean} [add] Add a sorter or use only this sorter (used only if field specified as string)
     * @param {Boolean} [silent] Set as true to not fire events
     * @category Sort, group & filter
     * @fires beforeSort
     * @fires sort
     * @fires refresh
     */value:function sort(field,ascending){var add=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var silent=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,records=me.allRecords,currentSorters=me.sorters.slice();var currentDir=null,curSort;if(field){if(Array.isArray(field)){me.sorters=field.map(function(sorter){if(typeof sorter==='string')return{field:sorter};return sorter;});}else{// extract field name if sorting by config object
var fieldName=_typeof(field)==='object'?field.field:field;// check if currently sorted by this field
curSort=me.sorters.find(function(sorter){return sorter.field===fieldName;});// sort in opposite direction if not specified and already sorted, default to sorting ascending
if(ascending===undefined||ascending===null){var sameField=curSort&&(typeof field==='string'&&curSort.field===field||_typeof(field)==='object'&&curSort.field===field.field);ascending=sameField?!curSort.ascending:true;}var sorter={field:fieldName,ascending:ascending};if(_typeof(field)==='object'){sorter.fn=field.fn;sorter.useLocaleSort=field.useLocaleSort;}if(add){// Field already among sorters? change sort direction instead of adding new sorter
if(curSort){currentDir=curSort.ascending;curSort.ascending=ascending;}else{me.sorters.push(sorter);}}else{me.sorters=[sorter];}}}if(!silent&&me.trigger('beforeSort',{sorters:me.sorters,records:records,currentSorters:currentSorters})===false){// Restore sorters
me.sorters=currentSorters;// Restore sorting direction if toggled
if(currentDir!==null){curSort.ascending=currentDir;}return;}me.performSort(silent);if(!silent){me.trigger('sort',{sorters:me.sorters,records:records});me.trigger('refresh',{action:'sort',sorters:me.sorters,records:records});}}/**
     * Add a sorting level (a sorter).
     * @param {String|Object} field Field to sort by (can also be an array of sorters or a config containing a custom sort fn)
     * @param {Boolean} ascending Sort order (used only if field specified as string)
     * @category Sort, group & filter
     */},{key:"addSorter",value:function addSorter(field){var ascending=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.sort(field,ascending,true);}/**
     * Remove a sorting level (a sorter)
     * @param field Stop sorting by this field
     * @category Sort, group & filter
     */},{key:"removeSorter",value:function removeSorter(field){var me=this,sorterIndex=me.sorters.findIndex(function(sorter){return sorter.field==field;});if(sorterIndex>-1){me.sorters.splice(sorterIndex,1);me.sort();}}/**
     * Removes all sorters, turning store sorting off.
     * @category Sort, group & filter
     */},{key:"clearSorters",value:function clearSorters(){var me=this;me.sorters.length=0;me.sort();}//region
//region Sorting logic
/**
     * Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.
     * @param sorters
     * @returns {Function}
     * @category Sort, group & filter
     */},{key:"createSorterFn",value:function createSorterFn(sorters){var storeLocaleSort=this.useLocaleSort;return function(lhs,rhs){var _iteratorNormalCompletion20=true;var _didIteratorError20=false;var _iteratorError20=undefined;try{for(var _iterator20=sorters[Symbol.iterator](),_step20;!(_iteratorNormalCompletion20=(_step20=_iterator20.next()).done);_iteratorNormalCompletion20=true){var _step20$value=_step20.value,_field=_step20$value.field,_step20$value$ascendi=_step20$value.ascending,ascending=_step20$value$ascendi===void 0?true:_step20$value$ascendi,_step20$value$fn=_step20$value.fn,fn=_step20$value$fn===void 0?null:_step20$value$fn,_step20$value$useLoca=_step20$value.useLocaleSort,useLocaleSort=_step20$value$useLoca===void 0?storeLocaleSort:_step20$value$useLoca;var direction=ascending?1:-1;if(fn){var val=fn(lhs,rhs);if(val!==null)return val*direction;}var lhsValue=lhs[_field],rhsValue=rhs[_field];if(lhsValue==null)return-direction;if(rhsValue==null)return direction;if(useLocaleSort){// Use systems locale
if(useLocaleSort===true){return String(lhsValue).localeCompare(rhsValue)*direction;}// Use specified locale
if(typeof useLocaleSort==='string'){return String(lhsValue).localeCompare(rhsValue,useLocaleSort)*direction;}// Use locale config
if(_typeof(useLocaleSort)==='object'){return String(lhsValue).localeCompare(rhsValue,useLocaleSort.locale,useLocaleSort)*direction;}}if(lhsValue>rhsValue)return direction;if(lhsValue<rhsValue)return-direction;}}catch(err){_didIteratorError20=true;_iteratorError20=err;}finally{try{if(!_iteratorNormalCompletion20&&_iterator20.return!=null){_iterator20.return();}}finally{if(_didIteratorError20){throw _iteratorError20;}}}return 0;};}/**
     * Internal function that performs the sort
     * @private
     * @category Sort, group & filter
     */},{key:"performSort",value:function performSort(){var me=this,rootNode=me.rootNode,storage=me.storage,sorters=me.sorters,sorter=me.createSorterFn(me.isGrouped?me.groupers.concat(sorters):sorters);// Temporarily remove group headers, will be re-added after sort
if(me.isGrouped){// Remember which groups are collapsed
if(me.storeCollapsedGroups()){storage.replaceValues(me.removeHeadersAndFooters(storage.values),true);}}if(me.tree){rootNode.traverse(function(node){if(node.isLoaded&&node.isParent){node.children=node.children.sort(sorter);// Since child nodes change order their parentIndex needs to be updated
node.updateChildrenIndex(node.children);}});storage.replaceValues(me.collectDescendants(rootNode).visible,true);}else{storage.replaceValues(storage.values.sort(sorter),true);}me._idMap=null;// Apply grouping
if(me.isGrouped){storage.replaceValues(me.prepareGroupRecords(storage.values),true);// Re-collapse the groups
me.restoreCollapsedGroups();}}//endregion
},{key:"isSorted",//endregion
//region Events
/**
     * Fired before sorting
     * @event beforeSort
     * @param {Common.data.Store} source This Store
     * @param {Object[]} sorters Sorter configs
     * @param {Common.data.Model[]} records Records to sort
     */ /**
     * Fired after sorting
     * @event sort
     * @param {Common.data.Store} source This Store
     * @param {Object[]} sorters Sorter configs
     * @param {Common.data.Model[]} records Sorted records
     */ //endregion
//region Properties
/**
     * Currently applied sorters
     * @member {Object[]} sorters
     * @readonly
     * @category Sort, group & filter
     */ /**
     * Is store sorted?
     * true
     * @property {Boolean}
     * @readonly
     */get:function get(){return Boolean(this.sorters.length)||this.isGrouped;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Default sorters, format is [{ field: '', ascending: false }, ...]
             * @config {Object[]|string[]}
             * @category Common
             */sorters:[],/**
             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
             * a locale string or a locale config to enable.
             *
             * Enabling this has big negative impact on sorting
             * performance. For more info on `localeCompare()`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).
             *
             * Examples:
             *
             * ```javascript
             * const store = new Store({
             *     // Swedish sorting
             *     useLocaleSort : 'sv-SE'
             * });
             *
             * const store = new Store({
             *     // Swedish sorting with custom casing order
             *     useLocaleSort : {
             *         locale    : 'sv-SE',
             *         caseFirst : 'upper'
             *     }
             * });
             * ```
             *
             * Can also be configured on a per sorter basis:
             *
             * ```javascript
             * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
             * ```
             *
             * @config {Boolean|String|Object}
             * @default false
             */useLocaleSort:null};}}]);return StoreSort;}(Target||Base));};// TODO: turn into plugin instead?
/**
 * @module Common/data/mixin/StoreChained
 */ /**
 * A chained Store contains a subset of records from a master store. Which records to include is determined by a
 * filtering function, {@link #config-chainedFilterFn}.
 *
 * @example
 * masterStore.makeChained(record => record.percent < 10);
 *
 * // or
 *
 * new Store({
 *   chained         : true,
 *   masterStore     : masterStore,
 *   chainedFilterFn : record => record.percent < 10
 * });
 *
 * @mixin
 */var StoreChained=function StoreChained(Target){return(/*#__PURE__*/function(_ref35){_inherits2(StoreChained,_ref35);function StoreChained(){_classCallCheck2(this,StoreChained);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreChained).apply(this,arguments));}_createClass2(StoreChained,[{key:"construct",//endregion
value:function construct(config){var me=this;_get2(_getPrototypeOf2(StoreChained.prototype),"construct",this).call(this,config);// TODO: No need for two configs which both mean the same thing. masterStore configured means it's changed.
if(me.chained){if(!me.masterStore){throw new Error('masterStore required on a chained store');}me.methodNamesToRelay.forEach(function(fnName){return me[fnName]=function(){for(var _len32=arguments.length,params=new Array(_len32),_key32=0;_key32<_len32;_key32++){params[_key32]=arguments[_key32];}return me.relayToMaster(fnName,params);};});// TODO: prevent other functions?
me.masterStore.on({change:me.onMasterDataChanged,prio:1,thisObj:me});if(!me.masterStore.chainedStores){me.masterStore.chainedStores=[];}me.masterStore.chainedStores.push(me);me.fillFromMaster();}}//region Properties
/**
     * Is this a chained store?
     * @property {Boolean}
     * @readonly
     * @category Store
     */},{key:"updateChainedStores",//endregion
//region Internal
value:function updateChainedStores(){if(this.chainedStores){this.chainedStores.forEach(function(store){return store.fillFromMaster();});}}/**
     * Updates records available in a chained store by filtering the master store records using
     * {@link #config-chainedFilterFn}
     * @internal
     */},{key:"fillFromMaster",value:function fillFromMaster(){var me=this;if(!me.chained){throw new Error('fillFromMaster only allowed on chained store');}if(me.keepUncommittedChanges){me.data=[].concat(me.added.values.filter(function(r){return!me.removed.includes(r);}),me.masterStore.allRecords.filter(function(r){return!me.removed.includes(r)&&!me.added.includes(r)&&me.chainedFilterFn(r);}));}else{me.data=me.masterStore.allRecords.filter(me.chainedFilterFn);}}/**
     * Commits changes back to master.
     * - the records deleted from chained store and present in master will be deleted from master
     * - the records added to chained store and missing in master will added to master
     * Internally calls {Store#function-commit commit()}.
     * @returns {Object} Changes, see Store#changes
     * @internal
     */},{key:"commitToMaster",value:function commitToMaster(){var me=this,master=me.masterStore;if(!me.chained){throw new Error('commitToMaster only allowed on chained store');}master.beginBatch();master.remove(me.removed.values);master.add(me.added.values);master.endBatch();return me.commit();}/**
     * Relays some function calls to the master store
     * @private
     */},{key:"relayToMaster",value:function relayToMaster(fnName,params){var _this$masterStore;if(fnName==='remove'&&params.length===4&&params[3]===true)return;return(_this$masterStore=this.masterStore)[fnName].apply(_this$masterStore,_toConsumableArray(params));}/**
     * Handles changes in master stores data. Updates the chained store accordingly
     * @private
     */},{key:"onMasterDataChanged",value:function onMasterDataChanged(_ref36){var action=_ref36.action,changes=_ref36.changes;var me=this;if(action==='update'){// if a field not defined in chainedFields is changed, ignore the change.
// there is no need to refilter the store in such cases, the change will be available anyhow since data is
// shared
var refilter=me.chainedFields&&me.chainedFields.some(function(field){return field in changes;});if(!refilter)return;}me.fillFromMaster();}//endregion
},{key:"isChained",get:function get(){return this.chained;}},{key:"chainedFilterFn",set:function set(chainedFilterFn){this._chainedFilterFn=this.thisObj?chainedFilterFn.bind(this.thisObj):chainedFilterFn;},get:function get(){return this._chainedFilterFn;}},{key:"methodNamesToRelay",get:function get(){var _this23=this;var doIsArray=Array.isArray(this.doRelayToMaster),dontIsArray=Array.isArray(this.dontRelayToMaster);return doIsArray&&this.doRelayToMaster.filter(function(name){return!dontIsArray||!_this23.dontRelayToMaster.includes(name);})||[];}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Create a chained store, must also specify masterStore and chainedFilterFn
             * @config {Boolean}
             * @default
             * @category Chained store
             */chained:false,/**
             * Function used to filter records in the masterStore into a chained store
             * @config {Function}
             * @category Chained store
             */chainedFilterFn:null,/**
             * Array of fields that should trigger filtering of chained store when the fields are updated.
             * @config {String[]}
             * @category Chained store
             */chainedFields:null,/**
             * Master store that a chained store gets its records from.
             * @config {Store}
             * @category Chained store
             */masterStore:null,/**
             * Method names calls to which should be relayed to master store.
             * @config {String[]}
             * @category Chained store
             */doRelayToMaster:['add','remove','insert','removeAll'],/**
             * Method names calls to which shouldn't be relayed to master store.
             * @config {String}
             * @category Chained store
             */dontRelayToMaster:[],/**
             * Flag showing whether to keep added/removed uncommitted records when filling the store from master.
             * @config {Boolean}
             * @category Chained store
             */keepUncommittedChanges:false};}}]);return StoreChained;}(Target||Base));};/**
 * @module Common/data/mixin/StoreState
 */ /**
 * Mixin for Store that handles store states.
 *  * sorters
 *  * groupers
 *  * filters
 * @private
 * @mixin
 */var StoreState=function StoreState(Target){return(/*#__PURE__*/function(_ref37){_inherits2(StoreState,_ref37);function StoreState(){_classCallCheck2(this,StoreState);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreState).apply(this,arguments));}_createClass2(StoreState,[{key:"getState",/**
     * Get store state. Used by State-plugin to serialize state
     * @private
     * @returns {{ sorters, groupers }}
     */value:function getState(){var me=this,state={};if(me.sorters&&me.sorters.length)state.sorters=me.sorters.slice();if(me.groupers&&me.groupers.length)state.groupers=me.groupers.slice();if(me.filters&&me.filters.values.length)state.filters=me.filterState;return state;}/**
     * Apply store state. Used by State-plugin to restore a previously serialized state
     * @private
     * @param {{ sorters, groupers }} state
     */},{key:"applyState",value:function applyState(state){var me=this;if('sorters'in state)me.sorters=state.sorters.slice();if('groupers'in state)me.groupers=state.groupers.slice();if('sorters'in state||'groupers'in state)me.sort();if('filters'in state){me.filters=state.filters.slice();me.filter();}}}]);return StoreState;}(Target||Base));};/**
 * @module Common/data/mixin/StoreTree
 */ /**
 * Mixin for store with tree related functionality. To learn more about working tree nodes please see the {@link Common/data/mixin/TreeNode} class and [this guide](#guides/data/treedata.md).
 * @mixin
 */var StoreTree=function StoreTree(Target){return(/*#__PURE__*/function(_ref38){_inherits2(StoreTree,_ref38);function StoreTree(){_classCallCheck2(this,StoreTree);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreTree).apply(this,arguments));}_createClass2(StoreTree,[{key:"loadChildren",//endregion
//region Children
/**
     * Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,
     * either use AjaxStore which implements it, create your own subclass with an implementation or listen for
     * `toggleNode` and insert records when you have them available.
     * @param {Common.data.Model} parentRecord
     */value:function(){var _loadChildren=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(parentRecord){return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:case"end":return _context.stop();}}},_callee);}));function loadChildren(_x11){return _loadChildren.apply(this,arguments);}return loadChildren;}()/**
     * Called from Model when adding children. Not to be called directly, use Model#appendChild() instead.
     * @internal
     * @param {Common.data.mixin.TreeNode} parent
     * @param {Common.data.mixin.TreeNode[]} children
     * @param {Number} index
     * @param {Object} isMove
     * @param {Boolean} [silent]
     * @fires add
     * @fires change
     */},{key:"onNodeAddChild",value:function onNodeAddChild(parent,children,index,isMove,silent){var me=this,isRootLoad=parent===me.rootNode&&parent.isLoading,storage=me.storage,toAddToUI=[],toAdd=[],previousSibling=children[0].previousSibling;var storeInsertionPoint;me.collectDescendants(children,toAddToUI,toAdd,!(parent.isExpanded(me)&&parent.ancestorsExpanded(me)));// Keep CRUD caches up to date unless it's a root load
if(!isRootLoad&&toAdd.length){for(var _i12=0,_toAdd=toAdd;_i12<_toAdd.length;_i12++){var record=_toAdd[_i12];// Only considered an add if not modified or moved
if(!me.modified.includes(record)&&!isMove[record.id]){me.added.add(record);me.removed.remove(record);}}}// Root node inserted first
if(isRootLoad&&me.rootVisible){toAddToUI.unshift(parent);toAdd.unshift(parent);}if(toAddToUI.length){// Calculate the insertion point into the flat store.
// If the new node is the first, then it goes after the parent node.
if(index===0||!previousSibling){storeInsertionPoint=storage.indexOf(parent);}// Otherwise it has to go after the previous visible node which has
// to be calculated. See indexOfPreviousVisibleNode for explanation.
else{storeInsertionPoint=storage.indexOf(previousSibling)+previousSibling.getDescendantCount(true,me);}// Insert added child nodes at correct location in storage.
// We must not react to change - we fire the events here.
storage.suspendEvents();me.storage.splice(++storeInsertionPoint,0,toAddToUI);storage.resumeEvents();}// Since we do not pass through Store#onDataChange we have to handle relations manually here. And since they are
// not tied to flat part of store, use all children
me.updateDependentStores('add',children);// If it's a root level set data op, then signal 'dataset'
if(isRootLoad&&toAddToUI.length){// If we have initial sorters, perform a silent sort before triggering `dataset`
// NOTE: Records in toAddToUI will be in the original order, not affected by the sort
if(me.sorters.length){me.sort(null,null,false,true);}if(!silent){var event={action:'dataset',data:me._data,records:toAddToUI};me.trigger('refresh',event);me.trigger('change',event);}}// Else, continue as before to signal a bizarre "isChild" add.
else if(!silent){var _event={action:'add',parent:parent,isChild:true,isMove:isMove,records:children,allRecords:toAdd,index:storeInsertionPoint};me.trigger('add',_event);me.trigger('change',_event);}}},{key:"onNodeRemoveChild",value:function onNodeRemoveChild(parent,children,index,isMove){var me=this,storage=me.storage,toRemoveFromUI=[],toRemove=[];me.collectDescendants(children,toRemoveFromUI,toRemove,!(parent.isExpanded(me)&&parent.ancestorsExpanded(me)));if(!isMove){// Unjoin is recursive, use flat children array
var _iteratorNormalCompletion21=true;var _didIteratorError21=false;var _iteratorError21=undefined;try{for(var _iterator21=children[Symbol.iterator](),_step21;!(_iteratorNormalCompletion21=(_step21=_iterator21.next()).done);_iteratorNormalCompletion21=true){var _record=_step21.value;_record.unJoinStore(me);}// Keep CRUD caches up to date
}catch(err){_didIteratorError21=true;_iteratorError21=err;}finally{try{if(!_iteratorNormalCompletion21&&_iterator21.return!=null){_iterator21.return();}}finally{if(_didIteratorError21){throw _iteratorError21;}}}if(toRemove.length){for(var _i13=0,_toRemove=toRemove;_i13<_toRemove.length;_i13++){var record=_toRemove[_i13];if(record.stores.includes(me)){record.unJoinStore(me);}// If was newly added, remove from added list
if(me.added.includes(record)){me.added.remove(record);}// Else add to removed list
else{me.removed.add(record);}}me.modified.remove(toRemove);}}// Remove removed child nodes at correct location in storage
if(toRemoveFromUI.length){index=storage.indexOf(toRemoveFromUI[0]);// We must not react to change - we fire the events here.
if(index>-1){storage.suspendEvents();storage.splice(index,toRemoveFromUI.length);storage.resumeEvents();}}else{// If nothing is removed from UI (storage) return -1, showing that removed node was in the collapsed branch
index=-1;}var event={action:'remove',parent:parent,isChild:true,isMove:isMove,records:children,allRecords:toRemove,index:index};me.trigger('remove',event);me.trigger('change',event);}},{key:"collectDescendants",value:function collectDescendants(node){var visible=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var all=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var inCollapsedBranch=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,children=Array.isArray(node)?node:node.children;if(children){for(var i=0,len=children.length,child;i<len;i++){child=children[i];if(!inCollapsedBranch){visible.push(child);}all.push(child);me.collectDescendants(child,visible,all,inCollapsedBranch||!child.isExpanded(me));}}return{visible:visible,all:all};}/**
     * Includes or excludes all records beneath parentRecord in storage. Used when expanding or collapsing
     * nodes.
     * @private
     * @param parentRecord Parent record
     * @param include Include (true) or exclude (false)
     * @category Tree
     */},{key:"internalToggleTreeSubRecords",value:function internalToggleTreeSubRecords(parentRecord,include){var me=this,storage=me.storage,index=storage.indexOf(parentRecord),children=[];var excludeCount=0,parentCollapsed=-1;parentRecord.traverse(function(child){var isExpanded=child.isExpanded(me),mapMeta=child.instanceMeta(me.id);// at new subparent at the same (or lower) level as previous, reset collapsed check
if(parentCollapsed&&child.childLevel<=parentCollapsed)parentCollapsed=-1;// records under already collapsed parent wont be processed
if(parentCollapsed===-1){// at a parent and it is collapsed, store its level for collapsed check
if(!child.isLeaf&&!isExpanded)parentCollapsed=child.childLevel;if(include){// if including subrecords, add those who are not hidden by a collapsed sub parent
children.push(child);}else if(!mapMeta.hidden){children.push(child);// excluding, only need to count how many visible we have
excludeCount++;}}mapMeta.hidden=!include;},true);// If we expanded a node which is yet to load children, the collected children
// array will be empty, so do not broadcast any change event.
// If we are collapsing a record which isn't visible (because parent is collapsed) we won't get an index,
// which is fine since it is already removed from processedRecords
if(children.length&&index!==false){// We must not react to change - we fire the events here with a flag
// to tell responders that it's due to an expoand or collapse.
storage.suspendEvents();if(include){storage.splice.apply(storage,[index+1,0].concat(children));var event={action:'add',isExpand:true,records:children,index:index+1};me.trigger('add',event);me.trigger('change',event);}else{storage.splice(index+1,excludeCount);var _event2={action:'remove',isCollapse:true,records:children,index:index+1};me.trigger('remove',_event2);me.trigger('change',_event2);}storage.resumeEvents();}}/**
     * Remove all records beneath parentRecord from storage.
     * @private
     * @param parentRecord Parent record
     * @category Tree
     */},{key:"onNodeCollapse",value:function onNodeCollapse(parentRecord){return this.internalToggleTreeSubRecords(parentRecord,false);}/**
     * Add all records beneath parentRecord from storage.
     * @private
     * @param parentRecord Parent record
     * @category Tree
     */},{key:"onNodeExpand",value:function onNodeExpand(parentRecord){return this.internalToggleTreeSubRecords(parentRecord,true);}//endregion
},{key:"isTree",//region Getters
/**
     * True if this Store is configured to handle tree data (with `tree : true`).
     * @property {Boolean}
     * @readonly
     * @category Tree
     */get:function get(){return this.tree;}/**
     * Get all leaves in store with tree data
     * @returns {Common.data.Model[]}
     * @category Tree
     */},{key:"leaves",get:function get(){var me=this,result=[];if(me.tree){me.traverse(function(record){if(record.isLeaf){result.push(record);}});return result;}else{me.allRecords.forEach(function(r){if(r.isLeaf){result.push(r);}r.traverse(function(record){if(record.isLeaf){result.push(record);}},true);});}return result;}}]);return StoreTree;}(Target||Base));};/**
 * @module Common/data/stm/mixin/StoreStm
 */var STM_PROP$1=Symbol('STM_PROP');/**
 * Store mixin to make it compatible with {@link Common.data.stm.StateTrackingManager}.
 * @mixin
 */var StoreStm=function StoreStm(Target){return(/*#__PURE__*/function(_ref39){_inherits2(StoreStm,_ref39);function StoreStm(){_classCallCheck2(this,StoreStm);return _possibleConstructorReturn2(this,_getPrototypeOf2(StoreStm).apply(this,arguments));}_createClass2(StoreStm,[{key:"add",/**
     * Overridden to notify STM about flat add action
     *
     * @private
     */value:function add(records){var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var result;var stm=this.stm;// Tree adding is routed via rootNode.appendChild() it has it's own
// STM override thus if the store is tree we ignore the action
if(!this.tree&&stm&&!stm.disabled){// Flat adding here only, the only data needed to undo/redo the action
// is the list of records added.
result=_get2(_getPrototypeOf2(StoreStm.prototype),"add",this).call(this,records,silent);// If adding wasn't vetoed and something has been added then
// notifying the STM about the fact.
if(result&&result.length){stm.onStoreModelAdd(this,result,silent);}}else{result=_get2(_getPrototypeOf2(StoreStm.prototype),"add",this).call(this,records,silent);}return result;}/**
     * Overridden to notify STM about flat insert action
     *
     * @private
     */},{key:"insert",value:function insert(index,records){var _this24=this;var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var result;var stm=this.stm;// Tree inserting is routed via rootNode.insertChild() it has it's own
// STM override thus if the store is tree we ignore the action
if(!this.tree&&stm&&!stm.disabled){// Flat inserting here only, the only data needed to undo/redo the action is:
// - the list of record inserted
// - index they are inserted at
// - index they have been at if they are part of this store already and are moved
// Here we are getting indexes of records which are in this store already
// not all records might be from this store, some might be new or from another store
var context=(Array.isArray(records)?records:[records]).reduce(function(context,r){var index=r instanceof Model?_this24.indexOf(r):undefined;if(index!==undefined&&index!==-1){context.set(r,index);}return context;},new Map());// Result here is the array of Models inserted or undefined,
// and it might be different from `records` we received as argument.
result=_get2(_getPrototypeOf2(StoreStm.prototype),"insert",this).call(this,index,records);// Here we check if anything has been actually inserted.
// The insertion action might be vetoed by event handler or something
if(result&&result.length){// We can't rely on `index` we've got as argument since `result` might
// differ from records.
index=this.indexOf(result[0]);// Notifying STM manager about the insertion action providing all
// the required data to undo/redo.
stm.onStoreModelInsert(this,index,result,context,silent);}}else{result=_get2(_getPrototypeOf2(StoreStm.prototype),"insert",this).call(this,index,records,silent);}return result;}/**
     * Overridden to notify STM about flat removing action
     *
     * @private
     */},{key:"remove",value:function remove(recordsOrIds){var _this25=this;var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var fromRemoveChild=arguments.length>2?arguments[2]:undefined;var result;var stm=this.stm;// Tree removing is routed via rootNode.removeChild() it has it's own
// STM override thus if the store is tree we ignore the action
if(!this.tree&&stm&&!stm.disabled){// Flat removing here only, the only date needed to undo/redo the actions is:
// - the list of records removed
// - their original index to re-insert them back correctly
var recordsOrIdsNormalized=(Array.isArray(recordsOrIds)?recordsOrIds:[recordsOrIds]).map(function(r){return _this25.getById(r);}).filter(function(r){return!!r;});var context=recordsOrIdsNormalized.reduce(function(context,r){var index=_this25.indexOf(r);if(index!==undefined&&index!=-1){context.set(r,index);}return context;},new Map());// Calling original store method
result=_get2(_getPrototypeOf2(StoreStm.prototype),"remove",this).call(this,recordsOrIds,silent,fromRemoveChild);// Here we check if anything has been actually removed.
// The removing action might be vetoed by event handler or something
if(result&&result.length){stm.onStoreModelRemove(this,result,context,silent);}}else{result=_get2(_getPrototypeOf2(StoreStm.prototype),"remove",this).call(this,recordsOrIds,silent,fromRemoveChild);}return result;}/**
     * Overridden to notify STM about flat clear action
     *
     * @private
     */},{key:"removeAll",value:function removeAll(silent){var stm=this.stm;if(stm&&!stm.disabled){// Here we are to detect if anything has been removed
// the only way is to check if store has anything before removing all
// and has nothing after.
var tree=this.tree,rootNode=this.rootNode,allRecords=this.allRecords,wasNotEmpty=allRecords.length,records=tree?rootNode.children.slice():allRecords.slice();_get2(_getPrototypeOf2(StoreStm.prototype),"removeAll",this).call(this,silent);// The trick here is to distinguish tree and flat case
// For the flat case it's simple we just store all records
// For the tree we are to store root node children only
// Upon restoring store.add() will do the right thing for the flat case and tree case regardless.
if(wasNotEmpty&&this.count===0){stm.onStoreRemoveAll(this,records,silent);}}else{_get2(_getPrototypeOf2(StoreStm.prototype),"removeAll",this).call(this,silent);}}},{key:"stm",get:function get(){return this[STM_PROP$1];},set:function set(stm){var me=this;if(me.stm!=stm){if(me.stm&&me.stm.hasStore(me)){me.stm.removeStore(me);}me[STM_PROP$1]=stm;if(me.stm&&!me.stm.hasStore(me)){me.stm.addStore(me);}}}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to STM manager
             *
             * @config {Common.data.stm.StateTrackingManager}
             * @default
             */stm:null};}}]);return StoreStm;}(Target||Base));};/**
 * @module Common/data/Store
 */ /**
 * The Store represents a data container which holds flat data or tree structures. An item in the Store is often called a ´record´ and it is simply an instance of the
 * {@link Common.data.Model} (or any subclass thereof). Typically you load data into a store to display it in a Grid or a ComboBox. The Store is the backing data component for any component that is showing data in a list style UI.
 *
 * * {@link Grid.view.Grid}
 * * {@link Grid.view.TreeGrid}
 * * {@link Common.widget.List}
 * * {@link Common.widget.Combo}
 *
 * <h3>Data format</h3>
 * Data is store in a JSON array the Store offers an API to edit, filter, group and sort the records.
 *
 * <h3>Store with flat data</h3>
 * To create a flat store simply provide an array of objects that describe your records
 *
 * ```javascript
 * let store = new Store({
 *   data : [
 *     { id : 1, name : 'ABBA', country : 'Sweden' },
 *     { id : 2, name : 'Beatles', country : 'UK' }
 *   ]
 * });
 *
 * // retrieve record by id
 * let beatles = store.getById(2);
 * ```
 *
 * <h3>Store with tree data</h3>
 * To create a tree store use `children` property for descendant records
 *
 * ```javascript
 * let store = new Store({
 *   tree: true,
 *   data : [
 *     { id : 1, name : 'ABBA', country : 'Sweden', children: [
 *       { id: 2, name: 'Agnetha' },
 *       { id: 3, name: 'Bjorn' },
 *       { id: 4, name: 'Benny' },
 *       { id: 5, name: 'Anni-Frid' }
 *     ]},
 *   ]
 * });
 *
 * // retrieve record by id
 * let benny = store.getById(4);
 * ```
 *
 * <h3>Sharing stores</h3>
 * You cannot directly share a Store between widgets, but the data in a Store can be shared. There are two different
 * approaches depending on your needs, sharing data and chaining stores:
 *
 * <h4>Shared data</h4>
 * To create 2 widgets that share data, you can create 2 separate stores and pass records of the first store as the
 * dataset of the second store.
 *
 * ```javascript
 * let combo1 = new Combo({
 *     appendTo : document.body,
 *     store    : new Store({
 *         data : [
 *             { id : 1, name : 'ABBA', country : 'Sweden' },
 *             { id : 2, name : 'Beatles', country : 'UK' }
 *         ]
 *     }),
 *     valueField   : 'id',
 *     displayField : 'name'
 * });
 *
 * let combo2 = new Combo({
 *     appendTo : document.body,
 *     store    : new Store({
 *         data : combo1.store.records
 *     }),
 *     valueField   : 'id',
 *     displayField : 'name'
 * });
 *
 * combo1.store.first.name = 'foo';
 * combo2.store.first.name; // "foo"
 * ```
 *
 * <h4>Chained stores</h4>
 * Another more powerful option to share data between widgets is to create {@link Common.data.mixin.StoreChained chained stores}.
 * The easiest way to create a chained store is to call {@link #function-chain} function.
 *
 * ```javascript
 * let combo1 = new Combo({
 *     appendTo : document.body,
 *     store    : new Store({
 *         data : [
 *             { id : 1, name : 'ABBA', country : 'Sweden' },
 *             { id : 2, name : 'Beatles', country : 'UK' }
 *         ]
 *     }),
 *     valueField   : 'id',
 *     displayField : 'name'
 * });
 *
 * let combo2 = new Combo({
 *     appendTo : document.body,
 *     store    : combo1.store.chain(),
 *     valueField   : 'id',
 *     displayField : 'name'
 * });
 *
 * combo1.store.first.name = 'foo';
 * combo2.store.first.name; // "foo"
 * ```
 *
 * A chained store can optionally be created with a filtering function, to only contain a subset of the records from
 * the main store. In addition, the chained store will reflect record removals/additions to the master store, something
 * the shared data approach will not.
 *
 * @mixes Common/data/mixin/StoreChained
 * @mixes Common/data/mixin/StoreCRUD
 * @mixes Common/data/mixin/StoreFilter
 * @mixes Common/data/mixin/StoreGroup
 * @mixes Common/data/mixin/StoreRelation
 * @mixes Common/data/mixin/StoreSearch
 * @mixes Common/data/mixin/StoreSort
 * @mixes Common/data/mixin/StoreState
 * @mixes Common/data/mixin/StoreSum
 * @mixes Common/data/mixin/StoreTree
 * @mixes Common/mixin/Events
 * @mixes Common/data/stm/mixin/StoreStm
 *
 * @extends Common/Base
 */var Store=/*#__PURE__*/function(_base$mixes){_inherits2(Store,_base$mixes);function Store(){_classCallCheck2(this,Store);return _possibleConstructorReturn2(this,_getPrototypeOf2(Store).apply(this,arguments));}_createClass2(Store,[{key:"construct",//endregion
//region Events
/**
     * Fired when the id of a record has changed
     * @event idChange
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model} record Modified record
     * @param {String|Number} oldValue Old id
     * @param {String|Number} value New id
     */ /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     * @event beforeUpdate
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model} record Modified record
     * @param {Object} toSet Modification data
     */ /**
     * Fired when a record is modified
     * @event update
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model} record Modified record
     * @param {Object} toSet Modification data
     */ /**
     * Fired when the root node is set
     * @event rootChange
     * @param {Common.data.Store} source This Store
     * @param {Common.data.Model} oldRoot The old root node.
     * @param {Common.data.Model} rootNode The new root node.
     */ /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     *
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the {@link #property-data} property, sorting, filtering,
     * and calling {@link Common.data.mixin.StoreCRUD#function-removeAll}.
     *
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the {@link #event-update}, {@link Common.data.mixin.StoreCRUD#event-add}, {@link Common.data.mixin.StoreCRUD#event-remove}, {@link #event-refresh}
     * and {@link Common.data.mixin.StoreCRUD#event-removeAll} events.
     *
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the `action` property.
     * @event change
     * @param {Common.data.Store} source This Store.
     * @param {String} action Name of action which triggered the change. May be one of:
     * * `'remove'`
     * * `'removeAll'`
     * * `'add'`
     * * `'updatemultiple'`
     * * `'clearchanges'`
     * * `'filter'`
     * * `'sort'`
     * * `'update'`
     * * `'dataset'`
     * * `'replace'`
     */ /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     * @event refresh
     * @param {Common.data.Store} source This Store.
     * @param {Boolean} batch Flag set to `true` when the refresh is triggered by ending a batch
     * @param {String} action Name of action which triggered the change. May be one of:
     * * `'dataset'`
     * * `'sort'`
     * * `'filter'`
     * * `'create'`
     * * `'update'`
     * * `'delete'`
     * * `'group'`.
     */ //endregion
//region Init
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;me.added=new Bag();me.removed=new Bag();me.modified=new Bag();me.idRegister={};me.internalIdRegister={};_get2(_getPrototypeOf2(Store.prototype),"construct",this).call(this,config);me.on({idChange:me.onRecordIdChange,update:me.onUpdateRecord,thisObj:me});me.initRelations();}},{key:"doDestroy",value:function doDestroy(){var me=this,allRecords=me.registeredRecords;for(var i=allRecords.length-1,rec;i>=0;i--){rec=allRecords[i];if(rec&&!rec.isDestroyed){rec.unJoinStore(me);}}me.storage.destroy();delete Store.storeMap[me.id];// Events superclass fires destroy event.
_get2(_getPrototypeOf2(Store.prototype),"doDestroy",this).call(this);//TODO abort any ongoing loads
}/**
     * Stops this store from firing events until {@link #function-endBatch} is called. Multiple calls to `beginBatch`
     * stack up, and will require an equal number of `endBatch` calls to resume events.
     *
     * Upon call of {@link #function-endBatch}, a {@link #event-refresh} event is triggered to allow UIs to
     * update themselves based upon the new state of the store.
     *
     * This is extremely useful when making a large number of changes to a store. It is important not to trigger
     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this
     * store are only updated once at the end of the updates.
     */},{key:"beginBatch",value:function beginBatch(){this.suspendEvents();}/**
     * Ends event suspension started by {@link #function-beginBatch}. Multiple calls to {@link #function-beginBatch}
     * stack up, and will require an equal number of `endBatch` calls to resume events.
     *
     * Upon call of `endBatch`, a {@link #event-refresh} event with `action: batch` is triggered to allow UIs to update
     * themselves based upon the new state of the store.
     *
     * This is extremely useful when making a large number of changes to a store. It is important not to trigger
     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this
     * store are only updated once at the end of the updates.
     */},{key:"endBatch",value:function endBatch(){if(this.resumeEvents()){this.trigger('refresh',{action:'batch',data:this.storage.values,records:this.storage.values});}}},{key:"onDataChange",/**
     * Responds to mutations of the underlying storage Collection
     * @param {Object} event
     * @private
     */value:function onDataChange(_ref40){var storage=_ref40.source,action=_ref40.action,added=_ref40.added,removed=_ref40.removed,replaced=_ref40.replaced,oldCount=_ref40.oldCount,item=_ref40.item,from=_ref40.from,to=_ref40.to;var me=this,addedCount=added&&added.length,removedCount=removed&&removed.length;var record,filtersWereReapplied;me._idMap=null;if(addedCount){added.forEach(function(added){added.joinStore(me);});}replaced&&replaced.forEach(function(_ref41){var _ref42=_slicedToArray(_ref41,2),oldRecord=_ref42[0],newRecord=_ref42[1];oldRecord.unJoinStore(me);newRecord.joinStore(me);});// Allow mixins to mutate the storage before firing events.
// StoreGroup does this to introduce group records into the mix.
_get2(_getPrototypeOf2(Store.prototype),"onDataChange",this).apply(this,arguments);// Join/unjoin incoming/outgoing records unless its as a result of TreeNode operations.
// If we are a tree, joining is done when nodes are added/removed
// as child nodes of a joined parent.
if(!me.tree){if(addedCount){var _iteratorNormalCompletion22=true;var _didIteratorError22=false;var _iteratorError22=undefined;try{for(var _iterator22=added[Symbol.iterator](),_step22;!(_iteratorNormalCompletion22=(_step22=_iterator22.next()).done);_iteratorNormalCompletion22=true){record=_step22.value;record.joinStore(me);}}catch(err){_didIteratorError22=true;_iteratorError22=err;}finally{try{if(!_iteratorNormalCompletion22&&_iterator22.return!=null){_iterator22.return();}}finally{if(_didIteratorError22){throw _iteratorError22;}}}me.added.add(added);me.removed.remove(added);// Re-evaluate the current filter set silently so that the information we
// are broadcasting below is up to date.
filtersWereReapplied=me.filtered&&me.reapplyFilterOnAdd;if(filtersWereReapplied){me.filter(null,null,true);}}if(removedCount){var _iteratorNormalCompletion23=true;var _didIteratorError23=false;var _iteratorError23=undefined;try{for(var _iterator23=removed[Symbol.iterator](),_step23;!(_iteratorNormalCompletion23=(_step23=_iterator23.next()).done);_iteratorNormalCompletion23=true){record=_step23.value;record.unJoinStore(me);// If was newly added, remove from added list
if(me.added.includes(record)){me.added.remove(record);}// Else add to removed list
else{me.removed.add(record);}}}catch(err){_didIteratorError23=true;_iteratorError23=err;}finally{try{if(!_iteratorNormalCompletion23&&_iterator23.return!=null){_iterator23.return();}}finally{if(_didIteratorError23){throw _iteratorError23;}}}me.modified.remove(removed);filtersWereReapplied=me.filtered;if(filtersWereReapplied){me.filter(null,null,true);}}}switch(action){case'clear':// Clear our own relationCache, since we will be empty
me.relationCache={};// Signal to stores that depend on us
me.updateDependentStores('removeall');me.trigger('removeAll');me.trigger('change',{action:'removeall'});break;case'splice':if(addedCount){me.updateDependentStores('add',added);var// Collection does not handle moves, figure out if and where a record was moved from by checking
// previous index value stored in meta
oldIndex=added.reduce(function(lowest,record){var previousIndex=record.meta.previousIndex;if(previousIndex>-1&&previousIndex<lowest)lowest=previousIndex;return lowest;},added[0].meta.previousIndex),index=storage.indexOf(added[0]),params={records:added,index:index};// Only include param oldIndex when used
if(oldIndex>-1){params.oldIndex=oldIndex;}me.trigger('add',params);me.trigger('change',Object.assign({action:'add'},params));if(filtersWereReapplied){me.triggerFilterEvent({action:'filter',filters:me.filters,oldCount:oldCount,records:me.storage.allValues});}}if(removed.length){me.updateDependentStores('remove',removed);me.trigger('remove',{records:removed});me.trigger('change',{action:'remove',records:removed});}if(replaced.length){// TODO: Remove in 2.2 if no problems til then
// me.trigger('updateMultiple', {
//     records : removed,
//     all     : me.records.length === replaced.length
// });
me.trigger('replace',{records:replaced,all:me.records.length===replaced.length});me.trigger('change',{action:'replace',replaced:replaced,all:me.records.length===replaced.length});}break;case'filter':// Reapply grouping/sorting to make sure unfiltered records get sorted correctly
if(me.isGrouped){me.group();}else if(me.isSorted){me.performSort();}break;case'move':// update parentIndex of records affected
for(var allRecords=me.storage.allValues,i=Math.min(from,to);i<=Math.max(from,to);i++){allRecords[i].parentIndex=i;}/**
                 * Fired when a record has been moved within this Store
                 * @event move
                 * @param {Common.data.Store} source This Store
                 * @param {Common.data.Model} record The record moved.
                 * @param {Number} from The index from which the record was removed.
                 * @param {Number} to The index at which the record was inserted.
                 */me.trigger('move',{record:item,from:from,to:to});me.trigger('change',{action:action,record:item,from:from,to:to});}}},{key:"onModelChange",value:function onModelChange(record,toSet,wasSet){var me=this,idField=record.constructor.idField;if(idField in toSet){var _toSet$idField=toSet[idField],oldValue=_toSet$idField.oldValue,value=_toSet$idField.value;me.updateDependentRecordIds(oldValue,value);me.trigger('idChange',{store:me,record:record,oldValue:oldValue,value:value});}var event={record:record,changes:wasSet};if(record.batching!=null){event.batch=true;}me.trigger('update',event);me.trigger('change',Object.assign({action:'update'},event));}},{key:"buildRootNode",// a hook to build a customized root node
value:function buildRootNode(){return{};}/**
     * Get a store from the store map by id.
     * @param {String|Number|Object[]} id The id of the store to retrieve, or an array of objects
     * from which to create the contents of a new Store.
     * @returns {Common.data.Store} The store with the specified id
     */},{key:"loadData",value:function loadData(data){var me=this,storage=me.storage;if(me.allCount){// clear without marking as removed
me.clear(false);}me._idMap=null;if(data){// Having any of groups collapsed at the time of data reloading using the same dataset
// makes new data look differ comparing to the data which is already in the store.
// So here we expand all groups and save the state to collapse them later.
// This might be expensive, but it helps to prevent Id collision failure for now.
me.storeCollapsedGroups();var isRaw=!(data[0]instanceof Model);if(isRaw){me.modelClass.exposeProperties(data[0]);var count=data.length,records=new Array(count);for(var i=0;i<count;i++){records[i]=me.createRecord(data[i],true);records[i].parentIndex=i;}storage.replaceValues(records,true,true);}else{storage.replaceValues(data.slice(),true,true);}me.storage.allValues.forEach(function(r){r.joinStore(me);});// Need to update group records info (headers and footers)
me.prepareGroupRecords();// Restore collapsed state
me.restoreCollapsedGroups();// The three operations below, filter, store and sort, all are passed
// the "silent" parameter meaning they do not fire their own events.
// The 'refresh' and 'change' events after are used to update UIs.
if(me.isFiltered){me.filter(null,null,true);}// TODO: groupers must just be promoted to be the primary sorters.
if(me.groupers.length>0&&me.isGrouped){me.group(null,null,false,!me.sorters.length,true);}if(me.sorters.length){me.sort(null,null,false,true);}// Check for duplicate ids, unless user guarantees data validity
if(!me.useRawData){var idMap=me.idMap;if(Object.keys(idMap).length<me.storage.values.length){// idMap has fewer entries than expected, a duplicate id was used. pick idMap apart to find out which
var collisions=[];me.storage.values.forEach(function(r){return idMap[r.id]?delete idMap[r.id]:collisions.push(r);});throw new Error("Id collision on ".concat(collisions.map(function(r){return r.id;})));}}var event={action:'dataset',data:data,records:me.storage.values};me.updateDependentStores(event.action,event.records);me.trigger('refresh',event);me.trigger('change',event);}else{me._data=null;}}},{key:"getRange",/**
     * Creates an array of records from this store from the `start` to the `end' - 1
     * @param {Number} [start] The index of the first record to return
     * @param {Number} [end] The index *after* the last record to return `(start + length)`
     * @return {Common.data.Model[]} The requested records.
     * @category Records
     */value:function getRange(start,end){var all=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return(all?this.storage.allValues:this.storage.values).slice(start,end);}/**
     * Creates a model instance, used internally when data is set/added. Override this in a subclass to do your own custom
     * conversion from data to record.
     * @param data Json data
     * @param skipExpose Supply true when batch setting to not expose properties multiple times
     * @category Records
     */},{key:"createRecord",value:function createRecord(data){var skipExpose=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return new this.modelClass(data,this,null,skipExpose);}},{key:"refreshData",value:function refreshData(){this.filter();this.sort();}},{key:"onRecordIdChange",value:function onRecordIdChange(_ref43){var record=_ref43.record,oldValue=_ref43.oldValue,value=_ref43.value;var me=this,idMap=me._idMap,idRegister=me.idRegister;me.storage._indicesInvalid=true;if(idMap){delete idMap[oldValue];idMap[value]=record;}me.added.changeId(oldValue,value);me.removed.changeId(oldValue,value);me.modified.changeId(oldValue,value);delete idRegister[oldValue];idRegister[value]=record;record.index=me.storage.indexOf(record);}},{key:"onUpdateRecord",value:function onUpdateRecord(_ref44){var record=_ref44.record,changes=_ref44.changes;var internalId=changes.internalId,internalIdRegister=this.internalIdRegister;if(internalId){this.storage._indicesInvalid=true;delete internalIdRegister[internalId.oldValue];internalIdRegister[internalId.value]=record;}// Reapply filters when records change?
if(this.reapplyFilterOnUpdate&&this.isFiltered){this.filter();}}//endregion
//region Count
/**
     * Number of records in the store
     * @param countProcessed Count processed (true) or real records (false)
     * @returns {Number} Record count
     * @category Records
     */},{key:"getCount",value:function getCount(){var countProcessed=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return countProcessed?this.count:this.originalCount;}/**
     * Record count, for data records. Not including records added for group headers etc.
     * @property {Number}
     * @readonly
     * @category Records
     */},{key:"getAt",/**
     * Get the record at the specified index
     * @param {Number} index Index for the record
     * @returns {Common.data.Model} Record at the specified index
     * @category Records
     */value:function getAt(index){var all=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// all means include filtered out records
return this.storage.getAt(index,all);}// These are called by Model#join and Model#unjoin
// register a record as a findable member keyed by id and internalId
},{key:"register",value:function register(record){var me=this,// Test for duplicate IDs on register only when a tree store.
// loadData does it in the case of a non-tree
existingRec=me.tree&&me.idRegister[record.id];if(existingRec&&existingRec!==record){throw new Error("Id collision on ".concat(record.id));}me.idRegister[record.id]=record;me.internalIdRegister[record.internalId]=record;}},{key:"unregister",value:function unregister(record){delete this.idRegister[record.id];delete this.internalIdRegister[record.internalId];}},{key:"getById",/**
     * Get a record by id. Find the record even if filtered out, part of collapsed group or collapsed node
     * @param {Common.data.Model|String|Number} id Id of record to return.
     * @returns {Common.data.Model} A record with the specified id
     * @category Records
     */value:function getById(id){// In case `id` is a record, we use its ID to try to find the record in the store,
// because if the record is removed from the store it shouldn't be found.
// if (id instanceof Model) {
//     id = id.id;
// }
if(id instanceof Model){return id;}//return this.tree ? this.idRegister[id] : this.storage.get(id);
return this.idRegister[id];}/**
     * Checks if a record is visible, in the sense that it is not filtered out,
     * hidden in a collapsed group or in a collapsed node.
     * Deprecated in 2.2.3, please use {@link #function-isAvailable} instead
     * @param {Common.data.Model|String|Number} recordOrId Record to check
     * @returns {Boolean}
     * @deprecated 2.2.3
     */},{key:"isVisible",value:function isVisible(recordOrId){return this.storage.includes(this.getById(recordOrId));}/**
     * Checks if a record is available, in the sense that it is not filtered out,
     * hidden in a collapsed group or in a collapsed node.
     * @param {Common.data.Model|String|Number} recordOrId Record to check
     * @returns {Boolean}
     */},{key:"isAvailable",value:function isAvailable(recordOrId){return this.storage.includes(this.getById(recordOrId));}/**
     * Get a record by internalId.
     * @param {Number} internalId The internalId of the record to return
     * @returns {Common.data.Model} A record with the specified internalId
     * @category Records
     */},{key:"getByInternalId",value:function getByInternalId(internalId){return this.internalIdRegister[internalId];}/**
     * Checks if the specified record is contained in the store
     * @param {Common.data.Model|String|Number} recordOrId Record, or `id` of record
     * @returns {Boolean}
     * @category Records
     */},{key:"includes",value:function includes(recordOrId){if(this.tree){return this.idRegister[Model.asId(recordOrId)]!=null;}return this.indexOf(recordOrId)>-1;}//endregion
//region Get index
/**
     * Returns the index of the specified record/id, or `-1` if not found.
     * @param {Common.data.Model|String|Number} recordOrId Record, or `id` of record to return the index of.
     * @param {Boolean} [visibleRecords] Pass `true` to find the visible index.
     * as opposed to the dataset index. This omits group header records.
     * @returns {Number} Index for the record/id, or `-1` if not found.
     * @category Records
     */},{key:"indexOf",value:function indexOf(recordOrId){var visibleRecords=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var id=Model.asId(recordOrId);if(!id){return-1;}// When a tree, indexOf is always in the visible records - filtering is different in trees.
if(this.tree){return this.storage.indexOf(id);}var found=this.idMap[id];return found?found[visibleRecords?'visibleIndex':'index']:-1;}},{key:"allIndexOf",value:function allIndexOf(recordOrId){var _this26=this;if(this.tree){var record=this.getById(recordOrId);var result=-1;// Use the tree structure to get the index in tree walk order
if(record){record.bubble(function(n){if(n.parent){result+=n.parentIndex+1;}else if(n===_this26.rootNode&&_this26.rootVisible){result+=1;}});}return result;}else{return this.storage.indexOf(recordOrId,true);}}//endregion
//region Get values
/**
     * Gets distinct values for the specified field.
     * @param field Field to extract values for
     * @returns {Array} Array of values
     * @category Values
     */},{key:"getDistinctValues",value:function getDistinctValues(field){var me=this,values=[],keys={};var value;me.forEach(function(r){if(!r.meta.specialRow&&!r.isRoot){value=r.get(field);if(!keys[value]){values.push(value);keys[value]=1;}}});return values;}/**
     * Counts how many times specified value appears in the store
     * @param field Field to look in
     * @param value Value to look for
     * @returns {Number} Found count
     * @category Values
     */},{key:"getValueCount",value:function getValueCount(field,value){var me=this,count=0;me.forEach(function(r){if(ObjectHelper.isEqual(r.get(field),value))count++;});return count;}//endregion
//region JSON & console
},{key:"toJSON",value:function toJSON(){// extract entire structure.
// If we're a tree, then that consists of the payload of the rootNode.
return(this.tree?this.rootNode.children:this).map(function(record){return record.toJSON();});}//endregion
//region Iteration & traversing
/**
     * Iterates over all normal records in store. Omits group header and footer records
     * if this store is grouped.
     * @param {Function} fn A function that is called for each record. Returning false from that function cancels iteration
     * @param {Object} thisObj `this` reference for the function
     * @category Iteration
     */},{key:"forEach",value:function forEach(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;var callback=function callback(r,i){if(!r.isRoot&&!r.meta.specialRow){return fn.call(thisObj,r,i);}};if(this.tree){this.rootNode.traverseWhile(callback);}else{// native forEach cannot be aborted by returning false, have to loop "manually"
var records=this.storage.values;for(var i=0;i<records.length;i++){if(callback(records[i],i)===false){return;}}}}/**
     * Equivalent to Array.map(). Creates a new array with the results of calling a provided function on every record
     * @param {Function} fn
     * @returns {Array}
     * @category Iteration
     */},{key:"map",value:function map(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;return this.storage.values.map(fn,thisObj);}/**
     * Equivalent to Array.reduce(). Applies a function against an accumulator and each record (from left to right) to
     * reduce it to a single value.
     * @param {Function} fn
     * @param initialValue
     * @returns {*}
     * @category Iteration
     */},{key:"reduce",value:function reduce(fn){var initialValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var thisObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;if(thisObj!==this){fn=fn.bind(thisObj);}return this.storage.values.reduce(fn,initialValue,thisObj);}/**
     * Iterator that allows you to do for (let record of store)
     * @category Iteration
     */},{key:Symbol.iterator,value:function value(){return this.storage.values[Symbol.iterator]();}/**
     * Traverse all tree nodes
     * @param {Function} fn
     * @category Traverse
     */},{key:"traverse",value:function traverse(fn){if(this.tree){this.rootNode.traverse(fn,true);}else{var _iteratorNormalCompletion24=true;var _didIteratorError24=false;var _iteratorError24=undefined;try{for(var _iterator24=this.storage[Symbol.iterator](),_step24;!(_iteratorNormalCompletion24=(_step24=_iterator24.next()).done);_iteratorNormalCompletion24=true){var record=_step24.value;record.traverse(fn);}}catch(err){_didIteratorError24=true;_iteratorError24=err;}finally{try{if(!_iteratorNormalCompletion24&&_iterator24.return!=null){_iterator24.return();}}finally{if(_didIteratorError24){throw _iteratorError24;}}}}}/**
     * Finds the next record.
     * @param recordOrId Current record or its id
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @returns {Common.data.Model} Next record or null if current is the last one
     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers
     * @category Traverse
     */},{key:"getNext",value:function getNext(recordOrId){var wrap=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var skipSpecialRows=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,records=me.storage.values,idx=me.indexOf(recordOrId);if(idx>=records.length-1){if(wrap){idx=-1;}else{return null;}}var record=records[idx+1];// Skip the result if it's a specialRow and we are told to skip them
if(skipSpecialRows&&record&&record.meta.specialRow){return me.getNext(records[idx+1],wrap,true);}return record;}/**
     * Finds the previous record.
     * @param recordOrId Current record or id
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @returns {Common.data.Model} Previous record or null if current is the last one
     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers
     * @category Traverse
     */},{key:"getPrev",value:function getPrev(recordOrId){var wrap=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var skipSpecialRows=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,records=me.storage.values,idx=me.indexOf(recordOrId);if(idx===0){if(wrap){idx=records.length;}else{return null;}}var record=records[idx-1];// Skip the result if it's a specialRow and we are told to skip them
if(skipSpecialRows&&record&&record.meta.specialRow){return me.getNext(records[idx+1],wrap,true);}return record;}/**
     * Gets the next or the previous record. Optionally wraps from first -> last and vice versa
     * @param {String|Model} recordOrId Record or records id
     * @param {Boolean} next Next (true) or previous (false)
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers
     * @returns {Common.data.Model}
     * @category Traverse
     * @internal
     */},{key:"getAdjacent",value:function getAdjacent(recordOrId){var next=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var wrap=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var skipSpecialRows=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return next?this.getNext(recordOrId,wrap,skipSpecialRows):this.getPrev(recordOrId,wrap,skipSpecialRows);}/**
     * Finds the next record among leaves (in a tree structure)
     * @param recordOrId Current record or its id
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @returns {Common.data.Model} Next record or null if current is the last one
     * @category Traverse
     * @internal
     */},{key:"getNextLeaf",value:function getNextLeaf(recordOrId){var wrap=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,records=me.leaves,record=me.getById(recordOrId),idx=records.indexOf(record);if(idx>=records.length-1){if(wrap){idx=-1;}else{return null;}}return records[idx+1];}/**
     * Finds the previous record among leaves (in a tree structure)
     * @param recordOrId Current record or id
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @returns {Common.data.Model} Previous record or null if current is the last one
     * @category Traverse
     * @internal
     */},{key:"getPrevLeaf",value:function getPrevLeaf(recordOrId){var wrap=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,records=me.leaves,record=me.getById(recordOrId),idx=records.indexOf(record);if(idx===0){if(wrap){idx=records.length;}else{return null;}}return records[idx-1];}/**
     * Gets the next or the previous record among leaves (in a tree structure). Optionally wraps from first -> last and
     * vice versa
     * @param {String/Model} recordOrId Record or records id
     * @param {Boolean} next Next (true) or previous (false)
     * @param {Boolean} wrap Wrap at start/end or stop there
     * @returns {Common.data.Model}
     * @category Traverse
     * @internal
     */},{key:"getAdjacentLeaf",value:function getAdjacentLeaf(recordOrId){var next=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var wrap=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return next?this.getNextLeaf(recordOrId,wrap):this.getPrevLeaf(recordOrId,wrap);}//endregion
//region Chained store
/**
     * Creates a chained store, a new Store instance that contains a subset of the records from current store.
     * Which records is determined by a filtering function, which is reapplied when data in the base store changes.
     * @param {Function} chainedFilterFn Function called for each records that determines if it should be included
     * (return true) or not (return false). Defaults to including all records (fn always returning true)
     * @param {String[]} chainedFields Array of fields that trigger filtering when they are updated
     * @param {Object} config Additional chained store configuration
     * @returns {Common.data.Store}
     * @example
     * let oldies = store.makeChained(record => record.age > 40);
     */},{key:"makeChained",value:function makeChained(){var chainedFilterFn=arguments.length>0&&arguments[0]!==undefined?arguments[0]:function(){return true;};var chainedFields=arguments.length>1?arguments[1]:undefined;var config=arguments.length>2?arguments[2]:undefined;return new this.constructor(Object.assign(config||{},{chained:true,tree:false,autoTree:false,masterStore:this,chainedFilterFn:chainedFilterFn,chainedFields:chainedFields}));}/**
     * Alias for {@link #function-makeChained}
     * @param {Function} chainedFilterFn Function called for each records that determines if it should be included
     * (return true) or not (return false). Defaults to including all records (fn always returning true)
     * @param {String[]} chainedFields Array of fields that trigger filtering when they are updated
     * @param {Object} config Additional chained store configuration
     * @returns {Common.data.Store}
     */},{key:"chain",value:function chain(){return this.makeChained.apply(this,arguments);}//endregion
},{key:"storage",set:function set(storage){var me=this;if(storage&&storage.isCollection){me._storage=storage;}else{me._storage=new Collection(storage);}me._storage.autoFilter=me.reapplyFilterOnAdd;// Join all the constituent records to this Store
var _iteratorNormalCompletion25=true;var _didIteratorError25=false;var _iteratorError25=undefined;try{for(var _iterator25=me._storage[Symbol.iterator](),_step25;!(_iteratorNormalCompletion25=(_step25=_iterator25.next()).done);_iteratorNormalCompletion25=true){var r=_step25.value;r.joinStore(me);}}catch(err){_didIteratorError25=true;_iteratorError25=err;}finally{try{if(!_iteratorNormalCompletion25&&_iterator25.return!=null){_iterator25.return();}}finally{if(_didIteratorError25){throw _iteratorError25;}}}me._storage.on({change:'onDataChange',thisObj:me});},get:function get(){if(!this._storage){this.storage={};}return this._storage;}},{key:"allRecords",get:function get(){var me=this;if(me.tree){var result=me.collectDescendants(me.rootNode).all;if(me.rootVisible){result.unshift(me.rootNode);}return result;}else{return me.isGrouped?me.collectGroupRecords():me.storage.allValues;}}},{key:"idMap",get:function get(){var me=this,processedRecords=me.storage.values,needsRebuild=!me._idMap,idMap=me._idMap||(me._idMap={});if(needsRebuild){for(var record,index=0,visibleIndex=0;index<processedRecords.length;index++){record=processedRecords[index];idMap[record.id]={index:index,visibleIndex:visibleIndex,record:record};if(!record.meta.specialRow){visibleIndex++;}}}return idMap;}/**
     * Class used to represent records. Defaults to class Model.
     * @property {Common.data.Model}
     * @category Records
     * @typings { new(data: object): Model }
     */},{key:"modelClass",get:function get(){return this._modelClass;},set:function set(ClassDef){var fields=this.fields;// noinspection JSRedeclarationOfBlockScope
var ClassDefEx=null;// Ensure our modelClass is exchanged for an extended of modelClass decorated with any configured fields.
if(fields&&fields.length){ClassDefEx=/*#__PURE__*/function(_ClassDef){_inherits2(ClassDefEx,_ClassDef);function ClassDefEx(){_classCallCheck2(this,ClassDefEx);return _possibleConstructorReturn2(this,_getPrototypeOf2(ClassDefEx).apply(this,arguments));}_createClass2(ClassDefEx,null,[{key:"fields",get:function get(){return fields;}}]);return ClassDefEx;}(ClassDef);}// If we expose properties on Model we will pollute all other models, use internal subclass instead
else{ClassDefEx=/*#__PURE__*/function(_ClassDef2){_inherits2(ClassDefEx,_ClassDef2);function ClassDefEx(){_classCallCheck2(this,ClassDefEx);return _possibleConstructorReturn2(this,_getPrototypeOf2(ClassDefEx).apply(this,arguments));}return ClassDefEx;}(ClassDef);}// Need to properly expose relations on this new subclass
ClassDefEx.exposeRelations();this._modelClass=ClassDefEx;}//endregion
//region Store id & map
// Deprecated.
// TODO: Remove in 2.0 when all references have been removed from Scheduler and Gantt
},{key:"storeId",set:function set(storeId){this.id=storeId;},get:function get(){return this.id;}/**
     * Get/set id, an unique identifier for the store.
     * Used to build a store map, use Store#getStore() to retrieve a store from the map.
     * @property {String|Number}
     * @category Store
     */},{key:"id",set:function set(id){var me=this;if(me._id){delete Store.storeMap[me._id];}me._id=id===true?IdHelper.generateId('store-'):id;if(id){Store.storeMap[id]=me;}},get:function get(){return this._id;}},{key:"tree",get:function get(){return this._tree;},set:function set(tree){this._tree=tree;if(tree&&!this.rootNode){this.rootNode=this.buildRootNode();}}},{key:"rootNode",//endregion
//region Data
/**
     * The invisible root node of this tree.
     * @property {Common.data.Model}
     * @readonly
     */get:function get(){return this._rootNode;},set:function set(rootNode){var me=this,oldRoot=me._rootNode;// No change
if(rootNode===oldRoot){return;}if(oldRoot){me.clear(false);}if(rootNode instanceof Model){// We insist that the rootNode is expanded otherwise no children will be added
rootNode.instanceMeta(me).collapsed=false;me._rootNode=rootNode;}else{me._rootNode=rootNode=new me.modelClass(Object.assign(_defineProperty({expanded:true},me.modelClass.idField,"".concat(me.id,"-rootNode")),rootNode),me,null,true);rootNode.isAutoRoot=true;}me._tree=true;rootNode.isRoot=true;rootNode.joinStore(me);// If there are nodes to be inserted into the flat storage
// then onNodeAddChild knows how to do that and what events
// to fire based upon rootNode.isLoading.
if(rootNode.children&&rootNode.children.length||me.rootVisible){rootNode.isLoading=true;me.onNodeAddChild(rootNode,rootNode.children||[],0);rootNode.isLoading=false;}me.trigger('rootChange',{oldRoot:oldRoot,rootNode:rootNode});}/**
     * Sets data in the store, called on initialization if data is in config otherwise call it yourself after
     * ajax call etc. Can also be used to get the raw original data.
     * @property {Object[]}
     * @fires refresh
     * @fires change
     * @category Records
     */},{key:"data",set:function set(data){var me=this;// Make sure that if the plugins have not been processed yet, we call
// the temporary property getter which configuration injects to
// process plugins at this point. Some plugins are required to
// operate on incoming data.
me._thisIsAUsedExpression(me.plugins);// In case someone is listening for load
me.processConfiguredListeners();me._data=data;// Convert to being a tree store if any of the new rows have a children property
me.tree=!me.chained&&(me.tree||Boolean(me.autoTree&&data&&data.some(function(r){return r[me.modelClass.childrenField];})));// This means load the root node
if(me.tree){var root=me.rootNode;// Should signal stores to clear which clears UIs
root.clearChildren();root.isLoading=true;// Append child will detect that this is a dataset operation and trigger sort + events needed
root.appendChild(data);me.updateDependentStores('dataset',[root]);root.isLoading=false;}else{me.loadData(data);}// loading the store discards all tracked changes
me.added.clear();me.removed.clear();me.modified.clear();},get:function get(){return this._data;}},{key:"originalCount",get:function get(){return this.storage.totalCount;}/**
     * Record count, including records added for group headers etc.
     * @property {Number}
     * @readonly
     * @category Records
     */},{key:"count",get:function get(){return this.storage.count;}},{key:"allCount",get:function get(){return this.tree?this.rootNode.descendantCount:this.storage.totalCount;}//endregion
//region Get record(s)
/**
     * Returns all "visible" records
     * @property {Common.data.Model[]}
     * @readonly
     * @category Records
     */},{key:"records",get:function get(){return this.storage.values;}/**
     * Get the first record in the store.
     * @property {Common.data.Model}
     * @readonly
     * @category Records
     */},{key:"first",get:function get(){return this.storage.values[0];}/**
     * Get the last record in the store.
     * @property {Common.data.Model}
     * @readonly
     * @category Records
     */},{key:"last",get:function get(){return this.storage.values[this.storage.values.length-1];}},{key:"registeredRecords",get:function get(){return Object.values(this.idRegister);}},{key:"json",get:function get(){return JSON.stringify(this,null,4);}}],[{key:"getStore",value:function getStore(id,storeClass){if(id instanceof Store){return id;}if(this.storeMap[id]){return this.storeMap[id];}if(Array.isArray(id)){var storeModel;var storeData=id.map(function(item){if(item instanceof Model){storeModel=item.constructor;}else if(typeof item==='string'){item={text:item};}return item;});id={autoCreated:true,data:storeData,modelClass:storeModel||/*#__PURE__*/function(_Model){_inherits2(_class2,_Model);function _class2(){_classCallCheck2(this,_class2);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class2).apply(this,arguments));}return _class2;}(Model)};if(!storeClass){storeClass=Store;}}if(storeClass){return new storeClass(id);}}/**
     * Get all registered stores
     * @returns {Common.data.Store[]}
     */},{key:"properties",//region Config & properties
get:function get(){return{relationCache:{},dependentStoreConfigs:new Map()};}},{key:"defaultConfig",get:function get(){return{/**
             * Deprecated in favour of {@link #config-id}
             * @config {String|Number}
             * @deprecated 2.0.0
             */storeId:null,/**
             * Store's unique identifier. When set the store is added to a store map accessible through Store#getStore(id)
             * @config {String|Number}
             * @category Common
             */id:true,/**
             * An array of field definitions used to create a Model (modelClass) subclass. Optional. If the Model
             * already has fields defined, these fields will extend those.
             * @config {Object[]}
             * @category Common
             */fields:null,/**
             * Automatically detect from set data if used as tree store or flat store
             * @config {Boolean}
             * @default
             * @category Tree
             */autoTree:true,/**
             * Class used to represent records
             * @config {Common.data.Model}
             * @default
             * @category Common
             * @typings { new(data: object): Model }
             */modelClass:Model,/**
             * Raw data to load initially
             * @config {Object[]}
             * @category Common
             */data:null,/**
             * `true` to act as a tree store.
             * @config {Boolean}
             * @category Tree
             */tree:false,callOnFunctions:true,/**
             * A {@link Common.util.Collection Collection}, or Collection config object
             * to use to contain this Store's constituent records.
             * @config {Common.util.Collection/Object}
             */storage:null,/**
             * Specify `true` to use the raw data when loading the store. This improves load performance, but comes
             * with some caveats:
             * * Data must not contain duplicate ids, duplication check is bypassed.
             * * Default values will not be applied to fields.
             * * No type conversions will be performed.
             */useRawData:null};}},{key:"stores",get:function get(){return Object.values(this.storeMap);}}]);return Store;}(base(Base).mixes(Events,Pluggable,State,StoreFilter,StoreCRUD,StoreRelation,StoreSum,StoreSearch,StoreSort,StoreGroup,StoreChained,StoreState,StoreTree,StoreStm));exports.Store=Store;Store.storeMap={};Store._$name='Store';//TODO: label should be own element
/**
 * @module Common/widget/TextField
 */ /**
 * Textfield widget. Wraps native &lt;input type="text"&gt;
 *
 * @extends Common/widget/Field
 *
 * @example
 * let textField = new TextField({
 *   placeholder: 'Enter some text'
 * });
 *
 * @classType textfield
 * @externalexample widget/TextField.js
 */var TextField=/*#__PURE__*/function(_Field2){_inherits2(TextField,_Field2);function TextField(){_classCallCheck2(this,TextField);return _possibleConstructorReturn2(this,_getPrototypeOf2(TextField).apply(this,arguments));}_createClass2(TextField,[{key:"inputTemplate",value:function inputTemplate(){var me=this,style='inputWidth'in me?"style=\"width:".concat(DomHelper.setLength(me.inputWidth),"\""):'';return TemplateHelper.tpl(_templateObject4(),me.inputType||'text',me.inputCls||'',me.placeholder,me.autoComplete,me.name||me.id,me.id+'_input',style);}},{key:"value",set:function set(value){_set(_getPrototypeOf2(TextField.prototype),"value",this.$name==='TextField'&&value==null?'':value,this,true);},get:function get(){return _get2(_getPrototypeOf2(TextField.prototype),"value",this);}}]);return TextField;}(Field);exports.TextField=TextField;TextField._$name='TextField';BryntumWidgetAdapterRegister.register('textfield',TextField);BryntumWidgetAdapterRegister.register('text',TextField);/**
 * @module Common/widget/PickerField
 */ /**
 * Base class used for {@link Common.widget.Combo Combo}, {@link Common.widget.DateField DateField}, and {@link Common.widget.TimeField TimeField}.
 * Displays a picker ({@link Common.widget.List List}, {@link Common.widget.DatePicker DatePicker}) anchored to the field.
 * Not intended to be used directly
 *
 * When focused by means of *touch* tapping on the trigger element (eg, the down arrow on a Combo)
 * on a tablet, the keyboard will not be shown by default to allow for interaction with the dropdown.
 *
 * A second tap on the input area will then show the keyboard is required.
 *
 * @extends Common/widget/TextField
 * @abstract
 */var PickerField=/*#__PURE__*/function(_TextField){_inherits2(PickerField,_TextField);function PickerField(){_classCallCheck2(this,PickerField);return _possibleConstructorReturn2(this,_getPrototypeOf2(PickerField).apply(this,arguments));}_createClass2(PickerField,[{key:"doDestroy",//endregion
//region Init & destroy
value:function doDestroy(){var me=this;// Remove touch keyboard showing listener if we added it
me.globalTapListener&&me.globalTapListener();if(me._picker){me.hidePicker();me._picker.destroy();me.pickerVisible=false;}_get2(_getPrototypeOf2(PickerField.prototype),"doDestroy",this).call(this);}},{key:"finalizeInit",value:function finalizeInit(){_get2(_getPrototypeOf2(PickerField.prototype),"finalizeInit",this).call(this);var me=this,element=me.element;if(me.editable===false){element.classList.add('b-not-editable');EventHelper.on({element:me.input,click:'onTriggerClick',thisObj:me});}else{// In case the field was temporarily set to readOnly="true" to prevent
// the intrusive keyboard (This happens when tapping the trigger
// and when focused by the container in response to a touch tap),
// allow a subsequent touch tap to show the keyboard.
me.globalTapListener=GlobalEvents.on({globaltap:'showKeyboard',thisObj:me});}}//endregion
//region Events
/**
     * Check if field value is valid
     * @internal
     */},{key:"onEditComplete",value:function onEditComplete(){_get2(_getPrototypeOf2(PickerField.prototype),"onEditComplete",this).call(this);this.autoClosePicker();}},{key:"onElementResize",value:function onElementResize(resizedElement){var me=this;// If the field changes size while the picker is visible, the picker
// must be kept in alignment. For example a multiSelect: true
// ComboBox with a wrapped ChipView.
if(me.pickerVisible){// Push realignment out to the next AF, because this picker itself may move in
// response to the element resize, and the picker must realign *after* that happens.
// For example a multiSelect: true ComboBox with a wrapped ChipView inside
// a Popup that is aligned *above* an element. When the ChipView gains or
// loses height, the Popup must realign first, and then the List must align to the
// new position of the ComboBox.
me.picker.requestAnimationFrame(me.picker.realign,null,me.picker);}_get2(_getPrototypeOf2(PickerField.prototype),"onElementResize",this).call(this,resizedElement);}/**
     * Allows using arrow keys to open/close list. Relays other keypresses to list if open.
     * @private
     */},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){var me=this;if(me.disabled)return;if(me.pickerVisible){var picker=me.picker;if(event.key==='Escape'){event.stopPropagation();me.hidePicker();}else if(picker.onInternalKeyDown){// if picker is visible, give it a shot at the event
picker.onInternalKeyDown(event);}else if(event.key==='ArrowDown'){if(picker.focusable){picker.focus();}}}else if(event.key==='ArrowDown'){me.onTriggerClick(event);}}},{key:"onFocusIn",value:function onFocusIn(e){_get2(_getPrototypeOf2(PickerField.prototype),"onFocusIn",this).call(this,e);if(this.autoExpand){this.onTriggerClick(e);}}},{key:"onFocusOut",value:function onFocusOut(e){this.autoClosePicker();_get2(_getPrototypeOf2(PickerField.prototype),"onFocusOut",this).call(this,e);}/**
     * User clicked trigger icon, toggle list.
     * @private
     */},{key:"onTriggerClick",value:function onTriggerClick(event){if(!this.disabled){// Pass focus flag as true if invoked by a key event
this.togglePicker('key'in event);}}/**
     * User clicked on an editable input field. If it's a touch event
     * ensure that the keyboard is shown.
     * @private
     */},{key:"showKeyboard",value:function showKeyboard(_ref45){var event=_ref45.event;var input=this.input;if(DomHelper.isTouchEvent&&document.activeElement===input&&event.target===input){GlobalEvents.suspendFocusEvents();input.blur();input.focus();GlobalEvents.resumeFocusEvents();}}//endregion
//region Toggle picker
/**
     * Toggle picker display
     */},{key:"togglePicker",value:function togglePicker(focusPicker){if(this.pickerVisible){this.hidePicker();}else{this.showPicker(focusPicker);}}/**
     * Show picker
     */},{key:"showPicker",value:function showPicker(focusPicker){var me=this,picker=me.picker;if(!me.pickerHideShowListenersAdded){picker.on({show:'onPickerShow',hide:'onPickerHide',thisObj:me});me.pickerHideShowListenersAdded=true;}picker.autoClose=me.autoClose;picker.show();// Not been vetoed
if(picker.isVisible){if(focusPicker){me.focusPicker();}}}},{key:"onPickerShow",value:function onPickerShow(){var me=this;me.pickerVisible=true;me.element.classList.add('b-open');me.trigger('togglePicker',{show:true});me.pickerTapOutRemover=GlobalEvents.on({globaltap:'onPickerTapOut',thisObj:me});me.pickerKeyDownRemover=EventHelper.on({element:me.picker.element,keydown:'onPickerKeyDown',thisObj:me});}},{key:"onPickerHide",value:function onPickerHide(){var me=this;me.pickerVisible=false;me.element.classList.remove('b-open');me.trigger('togglePicker',{show:false});me.pickerTapOutRemover&&me.pickerTapOutRemover();me.pickerKeyDownRemover&&me.pickerKeyDownRemover();}},{key:"onPickerTapOut",value:function onPickerTapOut(_ref46){var event=_ref46.event;if(!this.owns(event.target)){this.autoClosePicker();}}},{key:"onPickerKeyDown",value:function onPickerKeyDown(event){if(event.key==='Tab'){var activeEl=document.activeElement;// Offer our own element a shot at the TAB event.
// Some widgets or plugins may actively navigate.
this.input.dispatchEvent(new KeyboardEvent('keydown',event));// No listener intervened, point the TAB event at the input,
// and user agent default navigation will proceed.
if(document.activeElement===activeEl){this.input.focus();}// Some listener *did* navigate, prevent user agent default.
else{event.preventDefault();}// If listeners have not destroyed us, close our picker.
if(!this.isDestroyed){this.hidePicker();}}}//endregion
//region Visibility
},{key:"autoClosePicker",value:function autoClosePicker(){if(this.autoClose){this.hidePicker();}}/**
     * Hide picker
     */},{key:"hidePicker",value:function hidePicker(){if(this.pickerVisible){this.picker.hide();}}},{key:"focusPicker",value:function focusPicker(){}},{key:"focus",value:function focus(){var input=this.input;// If we are focusing an editable PickerField from a touch event, temporarily
// set it to readOnly to prevent the showing of the intrusive keyboard.
// It's more likely that a user on a touch device will interact with the picker
// rather than the input field.
// A second touch tap on an already focused input will show the keyboard;
// see the showKeyboard method.
if(DomHelper.isTouchEvent&&this.editable){input.readOnly=true;setTimeout(function(){return input.readOnly=false;},500);}_get2(_getPrototypeOf2(PickerField.prototype),"focus",this).call(this);}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * User can edit text in text field (otherwise only pick from attached picker)
             * @config {Boolean}
             * @default
             */editable:true,/**
             * The name of the element property to which the picker should size and align itself.
             * @config {String}
             * @default element
             */pickerAlignElement:'inputWrap',// Does not get set, but prevents PickerFields inheriting value:'' from Field.
value:null,triggers:{expand:{cls:'bars'}},/**
             * By default PickerFiled's picker is transient, and will {@link #function-hidePicker} when the user clicks or
             * taps outside or when focus moves outside picker.
             *
             * Configure as `false` to make picker non-transient.
             * @config {Boolean}
             * @default
             */autoClose:true,/**
             * Configure as `true` to have the picker expand upon focus enter.
             * @config {Boolean}
             */autoExpand:null,/**
             * A config object which is merged into the generated picker configuration to allow specific use cases
             * to override behaviour. For example:
             *
             *     picker: {
             *         align: {
             *             anchor: true
             *         }
             *     }
             *
             * @config {Object}
             * @default
             */picker:null,inputType:'text',// We need to realign the picker if we resize (eg a multiSelect Combo's ChipView wrapping)
monitorResize:true};}}]);return PickerField;}(TextField);PickerField._$name='PickerField';/**
 * @module Common/helper/util/Navigator
 */ /**
 * A helper class which allows keyboard navigation within the {@link #config-target} element.
 * @private
 */var Navigator=/*#__PURE__*/function(_Events5){_inherits2(Navigator,_Events5);function Navigator(){_classCallCheck2(this,Navigator);return _possibleConstructorReturn2(this,_getPrototypeOf2(Navigator).apply(this,arguments));}_createClass2(Navigator,[{key:"onKeyDown",value:function onKeyDown(keyEvent){var me=this,ownerCmp=me.ownerCmp,activeItem=me.activeItem,firstItem=me.target.querySelector(me.itemSelector),keyName=keyEvent.key.trim()||keyEvent.code,composedKeyName="".concat(keyEvent.ctrlKey?'CTRL+':'').concat(keyEvent.shiftKey?'SHIFT+':'').concat(keyEvent.altKey?'ALT+':'').concat(keyName);if(firstItem&&me.target.offsetParent){// Detect whether the navigable items flow inline or downwards.
if(me.inlineFlow==null){var itemContainer=firstItem.parentNode,itemPositionStyle=DomHelper.getStyleValue(firstItem,'position'),itemDisplayStyle=DomHelper.getStyleValue(firstItem,'display'),itemFloatStyle=DomHelper.getStyleValue(firstItem,'float');// This is how we know that RIGHT and LEFT arrow should be used for next and previous.
// If inlineFlow is false, we use UP and DOWN. Consider tabs in a tab bar.
me.inlineFlow=itemPositionStyle==='absolute'||itemDisplayStyle==='inline'||itemDisplayStyle==='inline-block'||itemFloatStyle==='left'||itemFloatStyle==='right'||DomHelper.getStyleValue(itemContainer,'display')==='flex'&&DomHelper.getStyleValue(itemContainer,'flex-direction')==='row';if(me.inlineFlow){me.prevKey='ArrowLeft';me.nextKey='ArrowRight';}else{me.prevKey='ArrowUp';me.nextKey='ArrowDown';}}// Feed the key event through our configured processor, process the event that returns if any.
if(me.processEvent){keyEvent=me.processEvent.call(ownerCmp,keyEvent);if(!keyEvent){return;}}if(activeItem){switch(keyName){case me.prevKey:if(me.disabled||keyEvent.ctrlKey&&!me.allowCtrlKey){return;}if(keyEvent.shiftKey&&!me.allowShiftKey){return;}keyEvent.preventDefault();me.navigatePrevious(keyEvent);break;case me.nextKey:if(me.disabled||keyEvent.ctrlKey&&!me.allowCtrlKey){return;}if(keyEvent.shiftKey&&!me.allowShiftKey){return;}keyEvent.preventDefault();me.navigateNext(keyEvent);break;default:var keyHandler=me.keys&&me.keys[composedKeyName];if(keyHandler&&!me.disabled){me.callback(keyHandler,me.thisObj||ownerCmp,[keyEvent]);}// Note that even if this.disabled, the ownerCmp will expect
// to have its key down hander invoked.
else if(ownerCmp.onInternalKeyDown){ownerCmp.onInternalKeyDown(keyEvent);}}}else{me.activeItem=me.previousActiveItem||me.getDefaultNavigationItem(keyEvent);}if(me.activeItem!==activeItem){/**
                 * Fired when a user gesture causes the active item to change _or become `null`_.
                 * @event navigate
                 * @param {Event} event The browser event which instigated navigation. May be a click or key or focus move event.
                 * @param {HTMLElement} item The newly active item, or `null` if focus moved out.
                 */me.trigger('navigate',{event:keyEvent,item:me.activeItem});}}}},{key:"getDefaultNavigationItem",value:function getDefaultNavigationItem(keyEvent){var target=this.target,itemSelector=this.itemSelector,prevKey=this.prevKey,nextKey=this.nextKey;// Navigating backwards from after the component, we default to last item
if(target.compareDocumentPosition(keyEvent.target)&4&&keyEvent.key===prevKey){return target.querySelector("".concat(itemSelector,":last-of-type"));}// Navigating forwards from before the component we default to the first item
if(target.compareDocumentPosition(keyEvent.target)&2&&keyEvent.key===nextKey){return target.querySelector("".concat(itemSelector));}}},{key:"navigatePrevious",value:function navigatePrevious(keyEvent){var me=this,previous=me.previous;keyEvent.preventDefault();if(previous){me.ownerCmp.scrollable.scrollIntoView(previous,{animate:50}).then(function(){me.activeItem=previous;me.trigger('navigate',{event:keyEvent,item:me.activeItem});});}}},{key:"navigateNext",value:function navigateNext(keyEvent){var me=this,next=me.next;keyEvent.preventDefault();if(next){me.ownerCmp.scrollable.scrollIntoView(next,{animate:50}).then(function(){me.activeItem=next;me.trigger('navigate',{event:keyEvent,item:me.activeItem});});}}},{key:"onTargetFocusIn",value:function onTargetFocusIn(focusInEvent){if(focusInEvent.target.matches(this.itemSelector)){this.activeItem=focusInEvent.target;}}},{key:"onTargetFocusOut",value:function onTargetFocusOut(focusOutEvent){if(!focusOutEvent.relatedTarget||!this.target.contains(focusOutEvent.relatedTarget)){this.activeItem=null;}}},{key:"onTargetMouseDown",value:function onTargetMouseDown(mousedownEvent){// Mousedown is the focus gesture.
// This holds true even on touch platforms
// where the mousedown event is synthesized -
// preventing default prevents focus on the upcoming touchend.
this.onFocusGesture(mousedownEvent);}},{key:"onTargetClick",value:function onTargetClick(clickEvent){var me=this;if(me.disabled){return;}// ownerCmp's preprocessing of any navigate event.
if(me.processEvent){clickEvent=me.processEvent.call(me.ownerCmp,clickEvent);}if(clickEvent){me.activeItem=clickEvent.target.closest(me.itemSelector);me.trigger('navigate',{event:clickEvent,item:me.activeItem});}}// We have to prevent focus moving from eg, an input field when we mousedown
// or touchtap a non focusable item when ownerCmp has itemsFocusable: false.
// If the event was not on an item, we must allow it through to allow Lists
// to contain other widgets.
},{key:"onFocusGesture",value:function onFocusGesture(event){if(event.target===this.ownerCmp.contentElement||event.target.closest(this.itemSelector)&&this.ownerCmp.itemsFocusable===false){event.preventDefault();}}},{key:"acceptNode",value:function acceptNode(node){return node.offsetParent&&node.matches&&node.matches(this.itemSelector)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP;}},{key:"onTargetChildListChange",value:function onTargetChildListChange(){var activeItem=this.activeItem;// On DOM mutation, if the activeItem got changed, pull the one with the same ID out again.
if(activeItem&&!this.target.contains(activeItem)){this.activeItem=this.target.querySelector("".concat(this.itemSelector,"[data-id=\"").concat(activeItem.dataset.id,"\"]"));}}},{key:"itemSelector",set:function set(itemSelector){this._itemSelector=itemSelector;},get:function get(){// Defaults to the itemCls of the owning Component (Most likely a List which must have itemCls)
return this._itemSelector||".".concat(this.ownerCmp.itemCls);}},{key:"owner",get:function get(){return this.ownerCmp;}},{key:"previous",get:function get(){var treeWalker=this.treeWalker;treeWalker.currentNode=this.activeItem;treeWalker.previousNode();if(treeWalker.currentNode!==this.activeItem){return treeWalker.currentNode;}}},{key:"next",get:function get(){var treeWalker=this.treeWalker;treeWalker.currentNode=this.activeItem;treeWalker.nextNode();if(treeWalker.currentNode!==this.activeItem){return treeWalker.currentNode;}}},{key:"activeItem",get:function get(){return this._activeItem;},set:function set(activeItem){var me=this,scroller=me.ownerCmp.scrollable;// Allow index to be passed
if(typeof activeItem==='number'){activeItem=me.target.querySelectorAll(me.itemSelector)[activeItem];}// This may be set to null on focusout of the target element.
if(activeItem){// If we are being called in response to focus movement, it will already be the document.activeElement
// so in that case, behave is if we were in non-focusing mode, and just add the focused class.
if(DomHelper.isFocusable(activeItem)&&activeItem!==document.activeElement){scroller.scrollIntoView(activeItem,{block:'nearest',focus:true,silent:me.scrollSilently});}else{if(me.activeItem){me.previousActiveItem=me.activeItem;me.activeItem.classList.remove(me.focusCls);}scroller.scrollIntoView(activeItem,{block:'nearest',silent:me.scrollSilently});activeItem.classList.add(me.focusCls);me._activeItem=activeItem;}}else{// We are being called programatically
if(activeItem===document.activeElement){me.ownerCmp.revertFocus();}// In response to focus movement
else if(me.activeItem){me.activeItem.classList.remove(me.focusCls);}me.previousActiveItem=me.target.contains(me.activeItem)?me.activeItem:null;me._activeItem=null;}}},{key:"target",get:function get(){return this._target;},set:function set(target){var me=this,listeners={element:target,thisObj:me,focusin:'onTargetFocusIn',focusout:'onTargetFocusOut',click:'onTargetClick'};me._target=target;if(!me.hasOwnProperty('acceptNode')){me.acceptNode=me.acceptNode.bind(me);// https://github.com/webcomponents/webcomponentsjs/issues/556
// Work around Internet Explorer wanting a function instead of an object.
// IE also *requires* this argument where other browsers don't.
me.acceptNode.acceptNode=me.acceptNode;}if(me.ownerCmp.itemsFocusable===false){listeners.mousedown='onTargetMouseDown';}EventHelper.on(listeners);// This Navigator object acts as the filter for the TreeWalker. We must implement acceptNode(node)
me.treeWalker=document.createTreeWalker(target,NodeFilter.SHOW_ELEMENT,me.acceptNode,false);// If we were not configured with an outside key event provider (think the input field providing UP/DOWN keys for the dropdown)
// then use the target element as the source.
if(!me.keyEventTarget){me.keyEventTarget=target;}// If the activeItem gets removed, we must know, and deactivate.
(me.targetMutationMonitor=new MutationObserver(me.onTargetChildListChange.bind(me))).observe(target,{childList:true});}},{key:"keyEventTarget",get:function get(){return this._keyEventTarget;},set:function set(keyEventTarget){this._keyEventTarget=keyEventTarget;EventHelper.on({element:keyEventTarget,keydown:'onKeyDown',thisObj:this});}}],[{key:"defaultConfig",get:function get(){return{/**
             * The owning Widget which is using this Navigator.
             * @config {Common.widget.Widget}
             */ownerCmp:null,/**
             * The encapsulating element in which navigation takes place.
             * @config {HTMLElement}
             */target:null,/**
             * The element which provides key events for navigation. Optional. Defaults to the {@link #config-target} element.
             * @config {HTMLElement}
             */keyEventTarget:null,/**
             * An optional key event processor which may preprocess the key event. Returning `null` prevents processing of the event.
             * @config {Function}
             */processEvent:null,/**
             * A query selector which identifies descendant elements within the {@link #config-target} which are navigable.
             * @config {String}
             */itemSelector:null,/**
             * A CSS class name to add to focused elements.
             * @config {String}
             * @default
             */focusCls:'b-active',/**
             * An object containing key definitions keys by the key name eg:
             *
             * ```javascript
             *  keys : {
             *      "CTRL+SPACE" : 'onCtrlSpace',
             *      ENTER        : 'onEnterKey'
             *  }```
             *
             * The {@link #config-ownerCmp} is used as the `this` reference and to resolve string method names.
             *
             * Modified key names must be created prepending one or more `'CTRL+'`, `'SHIFT+'`, `'ALT+'`
             * in that order, for example `"CTRL+SHIFT+ENTER" : 'showMenu'`
             * @config {Object}
             * @default
             */keys:null,/**
             * Configure as `true` to also navigate when the `CTRL` modifier key is used along with
             * navigation keys.
             * @config {Boolean}
             * @default false
             */allowCtrlKey:null,/**
             * Configure as `true` to also navigate when the `SHIFT` modifier key is used along with
             * navigation keys.
             * @config {Boolean}
             * @default false
             */allowShiftKey:null};}}]);return Navigator;}(Events(Base));Navigator._$name='Navigator';/**
 * @module Common/widget/List
 */var itemRange=document.createRange();/**
 * Displays a list of items which the user can navigate using the keyboard and select using either pointer gestures or the keyboard.
 * @extends Common/widget/Widget
 *
 * @classType list
 * @externalexample widget/List.js
 */var List=/*#__PURE__*/function(_Widget7){_inherits2(List,_Widget7);function List(){_classCallCheck2(this,List);return _possibleConstructorReturn2(this,_getPrototypeOf2(List).apply(this,arguments));}_createClass2(List,[{key:"construct",//endregion
//region Events
/**
     * User activated an item in the list either by pointer or keyboard.
     * The active record, list item index, and the triggering event are passed.
     * @event item
     * @property {Object} record - Activated record
     * @property {Number} index - List item index
     * @property {Event} event - Triggering event
     */ //endregion
value:function construct(config){var _get8;var me=this;// We can be created from a raw array. It becomes our items which we translate to a Store.
if(Array.isArray(config)){config={items:config};}for(var _len33=arguments.length,args=new Array(_len33>1?_len33-1:0),_key33=1;_key33<_len33;_key33++){args[_key33-1]=arguments[_key33];}(_get8=_get2(_getPrototypeOf2(List.prototype),"construct",this)).call.apply(_get8,[this,config].concat(args));var element=me.element,classList=element.classList;if(me.multiSelect){classList.add('b-multiselect');}if(me.store.count){me.refresh();}else{classList.add('b-empty');}EventHelper.on({element:element,delegate:me.itemSelector,mouseover:'onMouseOver',click:'onClick',thisObj:me});me.storeDetacher=me.store.on({change:'onStoreChange',refresh:'onStoreRefresh',thisObj:me});}},{key:"doDestroy",value:function doDestroy(){if(this.storeDetacher){this.storeDetacher();}_get2(_getPrototypeOf2(List.prototype),"doDestroy",this).call(this);}},{key:"contentTpl",value:function contentTpl(){var _this27=this;return TemplateHelper.tpl(_templateObject5(),this.store.records.map(function(record,i){return _this27.itemWrapperTpl(record,i);}));}},{key:"itemWrapperTpl",value:function itemWrapperTpl(record,i){return TemplateHelper.tpl(_templateObject6(),this.getItemClasses(record,i),i,record.id,this.itemsFocusable?'tabindex="-1"':'',this.itemContentTpl(record,i));}},{key:"itemContentTpl",value:function itemContentTpl(record,i){return TemplateHelper.tpl(_templateObject7(),this.multiSelect?'<div class="b-selected-icon b-icon b-icon-check"></div>':'',this.itemTpl(record,i));}},{key:"getItemClasses",value:function getItemClasses(record){var me=this,activeItem=me._navigator&&me._navigator.activeItem,isActive=activeItem&&activeItem.dataset.id==record.id,isSelected=me.selected.includes(record);return"".concat(me.itemCls," ").concat(record.cls||''," ").concat(isSelected?me.selectedCls:''," ").concat(isActive?me.navigator.focusCls:'');}},{key:"onStoreChange",value:function onStoreChange(_ref47){var store=_ref47.source,action=_ref47.action,records=_ref47.records,record=_ref47.record;switch(action){case'remove':this.selected.remove(records);break;case'clear':this.selected.clear();break;case'update':this.refreshItem(record);return;}this.refresh();}},{key:"onStoreRefresh",value:function onStoreRefresh(){this.refresh();}},{key:"refresh",value:function refresh(){var me=this;if(me.isVisible){me.clearItems().insertNode(DomHelper.createElementFromTemplate(me.contentTpl(),{fragment:true}));me.element.classList[me.store.count>0?'remove':'add']('b-empty');}else{me.on({paint:function paint(){return me.refresh();},once:true});}}},{key:"clearItems",value:function clearItems(){var me=this,firstItem=me.contentElement.querySelector(me.itemSelector),lastChild=me.contentElement.lastChild;if(firstItem){itemRange.setStartBefore(firstItem);itemRange.setEndAfter(me.contentElement.querySelector("".concat(me.itemSelector,":last-of-type")));itemRange.deleteContents();}else{// Allow a static set of elements to be at the top of the list
if(lastChild){itemRange.setStartAfter(lastChild);itemRange.setEndAfter(lastChild);}else{itemRange.setStart(me.contentElement,0);itemRange.setEnd(me.contentElement,0);}}return itemRange;}},{key:"refreshItem",value:function refreshItem(){for(var _len34=arguments.length,records=new Array(_len34),_key34=0;_key34<_len34;_key34++){records[_key34]=arguments[_key34];}for(var _i14=0,_records2=records;_i14<_records2.length;_i14++){var record=_records2[_i14];var item=this.getItem(record);// Maybe a record which is filtered out announces a change.
// There will be no item.
if(item){var index=this.store.indexOf(record),newItem=DomHelper.createElementFromTemplate(this.itemWrapperTpl(record,index));DomHelper.sync(newItem,item);}}}},{key:"getItem",value:function getItem(recordOrId){if(typeof recordOrId==='number'){return this.contentElement.querySelector("[data-index=\"".concat(recordOrId,"\"]"));}if(recordOrId.id!=null){recordOrId=recordOrId.id;}return this.contentElement.querySelector("[data-id=\"".concat(recordOrId,"\"]"));}},{key:"getRecord",value:function getRecord(dom){if(dom.target){dom=dom.target;}dom=dom.closest(this.itemSelector);return this.store.getAt(parseInt(dom.dataset.index));}//region getters/setters
/**
     * May be *set* as an array of Objects which are converted into records and used to create this
     * List's {@link #config-store}
     * @property {Object[]}
     */},{key:"alignTo",//endregion
//region Hide/Show
value:function alignTo(){var _get9;// When aligning, if the items total height is less than minHeight, use that.
_set(_getPrototypeOf2(List.prototype),"minHeight",this.minAlignHeight,this,true);for(var _len35=arguments.length,args=new Array(_len35),_key35=0;_key35<_len35;_key35++){args[_key35]=arguments[_key35];}(_get9=_get2(_getPrototypeOf2(List.prototype),"alignTo",this)).call.apply(_get9,[this].concat(args));}},{key:"hide",value:function hide(){var _get10;this.navigator.activeItem=null;for(var _len36=arguments.length,args=new Array(_len36),_key36=0;_key36<_len36;_key36++){args[_key36]=arguments[_key36];}(_get10=_get2(_getPrototypeOf2(List.prototype),"hide",this)).call.apply(_get10,[this].concat(args));}},{key:"show",value:function show(){// Restore the configured minHeight
_set(_getPrototypeOf2(List.prototype),"minHeight",this._minHeight,this,true);var activeItem=this.navigator.previousActiveItem;_get2(_getPrototypeOf2(List.prototype),"show",this).call(this);if(activeItem){if(!this.element.contains(activeItem)){activeItem=this.element.querySelector("[data-id=\"".concat(activeItem.dataset.id,"\"]"));}this.navigator.activeItem=activeItem;}}//endregion
//region Events
/**
     * Focuses list items on hover.
     * @private
     */},{key:"onMouseOver",value:function onMouseOver(event){var me=this,itemElement=event.target.closest(me.itemSelector);if(itemElement&&me.navigator&&me.activateOnMouseover){me.navigator.activeItem=itemElement;}}/**
     * Selects list items on click.
     * @private
     */},{key:"onClick",value:function onClick(event){var itemElement=event.target.closest(this.itemSelector);if(itemElement){this.onItemClick(itemElement,event);}}/**
     * Key events which are not navigation are delegated up to here by the Navigator
     * @private
     */},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){var me=this,active=me.navigator.activeItem;switch(event.key){case' ':if(!event.target.readOnly){break;// eslint-disable-line
}case'Enter':// eslint-disable-line
if(active){this.onItemClick(active,event);// Stop the keydown from bubbling.
// And stop it from creating a keypress event.
// No further action should be taken after item selection.
event.stopImmediatePropagation();event.preventDefault();}}}//endregion
},{key:"onItemClick",value:function onItemClick(item,event){var me=this,index=parseInt(item.dataset.index),record=me.store.getAt(index),selected=me.selected,isSelected=selected.includes(record);me.trigger('item',{item:item,record:record,index:index,event:event});// Clicking on any element with the data-noselect attribute means no selection
if(!item.contains(event.target.closest('[data-noselect]'))){if(me.multiSelect){selected[isSelected?'remove':'add'](record);}else{selected.splice(0,selected.count,record);}}me.lastClicked=record;}/**
     * Handles items being added or removed from the selected Collection
     * @param {Object} changeEvent
     * @private
     */},{key:"onSelectionChange",value:function onSelectionChange(_ref48){var action=_ref48.action,removed=_ref48.removed,added=_ref48.added,replaced=_ref48.replaced;var me=this,selectedCls=me.selectedCls;var record,item;if(action==='clear'){var _iteratorNormalCompletion26=true;var _didIteratorError26=false;var _iteratorError26=undefined;try{for(var _iterator26=me.element.querySelectorAll(".".concat(selectedCls))[Symbol.iterator](),_step26;!(_iteratorNormalCompletion26=(_step26=_iterator26.next()).done);_iteratorNormalCompletion26=true){item=_step26.value;item.classList.remove(selectedCls);}}catch(err){_didIteratorError26=true;_iteratorError26=err;}finally{try{if(!_iteratorNormalCompletion26&&_iterator26.return!=null){_iterator26.return();}}finally{if(_didIteratorError26){throw _iteratorError26;}}}}else{var _iteratorNormalCompletion27=true;var _didIteratorError27=false;var _iteratorError27=undefined;try{for(var _iterator27=removed[Symbol.iterator](),_step27;!(_iteratorNormalCompletion27=(_step27=_iterator27.next()).done);_iteratorNormalCompletion27=true){record=_step27.value;item=me.getItem(record);item&&item.classList.remove(selectedCls);}}catch(err){_didIteratorError27=true;_iteratorError27=err;}finally{try{if(!_iteratorNormalCompletion27&&_iterator27.return!=null){_iterator27.return();}}finally{if(_didIteratorError27){throw _iteratorError27;}}}var _iteratorNormalCompletion28=true;var _didIteratorError28=false;var _iteratorError28=undefined;try{for(var _iterator28=added[Symbol.iterator](),_step28;!(_iteratorNormalCompletion28=(_step28=_iterator28.next()).done);_iteratorNormalCompletion28=true){record=_step28.value;item=me.getItem(record);item&&item.classList.add(selectedCls);}}catch(err){_didIteratorError28=true;_iteratorError28=err;}finally{try{if(!_iteratorNormalCompletion28&&_iterator28.return!=null){_iterator28.return();}}finally{if(_didIteratorError28){throw _iteratorError28;}}}}}},{key:"items",set:function set(items){var me=this;if(me.store&&me.store.autoCreated){me.store.destroy();}me.store=Store.getStore(items);}},{key:"selected",set:function set(selected){if(!(selected&&selected instanceof Collection)){selected=new Collection(selected);}this._selected=selected;selected.on({change:'onSelectionChange',thisObj:this});},get:function get(){return this._selected;}/**
     * Get the backing store, a {@link Common.data.Store} holding the records used to generate list items
     * @property {Common.data.Store}
     * @readonly
     */},{key:"itemSelector",get:function get(){return".".concat(this.itemCls);}},{key:"store",get:function get(){// Ensure any configured items is processed into a store before we try to return it.
this._thisIsAUsedExpression(this.items);return this._store;},set:function set(store){if(!(store instanceof Store)){store=new Store(store);}this._store=store;}},{key:"navigator",get:function get(){return this._navigator;},set:function set(navigator){var me=this,element=me.element;if(element){me._navigator=new(navigator.class||Navigator)(Object.assign({ownerCmp:me,target:element,keyEventTarget:element},navigator));}else{me._navigator=navigator;}}},{key:"minHeight",get:function get(){return _get2(_getPrototypeOf2(List.prototype),"minHeight",this);},set:function set(minHeight){_set(_getPrototypeOf2(List.prototype),"minHeight",this._minHeight=minHeight,this,true);}},{key:"minAlignHeight",get:function get(){var lastItem=this.element.lastElementChild,minHeight=this.minHeight;// No minHeight specified, always defer to the items height
if(minHeight!=null){return this.store.count?Math.min(lastItem.offsetTop+lastItem.offsetHeight,minHeight):0;}}}],[{key:"defaultConfig",//region Config
get:function get(){return{itemCls:'b-list-item',selectedCls:'b-selected',/**
             * An array of Objects which are converted into records and used to create this
             * List's {@link #config-store}
             * @config {Object[]}
             */items:null,/**
             * A {@link Common.data.Store} which provides the records which map to List items. Each record is passed through the
             * {@link #config-itemTpl} to produce the DOM structure of the List. May be generated from an array of {@link #config-items}.
             * @config {Object/Common.data.Store}
             */store:null,navigator:true,scrollable:{x:false,y:true},itemsFocusable:true,multiSelect:false,/**
             * Template function which, when passed a record, returns the textual HTML for that item. Defaults to a
             * function returning the value of records `text` field
             * @config {Function} itemTpl
             */itemTpl:function itemTpl(record){return record.text;},/**
             * A {@link Common.util.Collection Collection}, or Collection config object
             * to use to contain this List's selected records.
             * @config {Common.util.Collection/Object}
             */selected:{},/**
             * Configure as `true` to activate items on mouseover. This is used by the Combo
             * field whenm using a List as its dropdown.
             * @config {Boolean}
             */activateOnMouseover:null};}}]);return List;}(Widget);exports.List=List;List.prototype.navigatorClass=Navigator;List._$name='List';BryntumWidgetAdapterRegister.register('list',List);/**
 * @module Common/widget/ChipView
 */ /**
 * Displays an inline series of Chips which may be navigated to, selected and deleted.
 * @extends Common/widget/List
 *
 * @classType chipview
 */var ChipView=/*#__PURE__*/function(_List){_inherits2(ChipView,_List);function ChipView(){_classCallCheck2(this,ChipView);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChipView).apply(this,arguments));}_createClass2(ChipView,[{key:"itemContentTpl",value:function itemContentTpl(record,i){var me=this;return TemplateHelper.tpl(_templateObject8(),me.iconTpl?this.iconTpl(record):'',me.itemTpl(record,i),me.closable?'<div class="b-icon b-close-icon b-icon-clear" data-noselect></div>':'');}},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){if(event.key==='Delete'||event.key==='Backspace'&&this.selected.count){this.callback(this.closeHandler,this.owner,[this.selected.values,{isKeyEvent:true}]);}else{_get2(_getPrototypeOf2(ChipView.prototype),"onInternalKeyDown",this).call(this,event);}}},{key:"onClick",value:function onClick(event){var me=this,item=event.target.closest(".".concat(me.itemCls));if(me.closable&&event.target.classList.contains('b-close-icon')){var record=me.store.getAt(parseInt(item.dataset.index));me.callback(me.closeHandler,me.owner,[[record]]);}else{_get2(_getPrototypeOf2(ChipView.prototype),"onClick",this).call(this,event);}}}],[{key:"defaultConfig",//region Config
get:function get(){return{itemCls:'b-chip',/**
             * Configure as `true` to display a clickable close icon after the {@link Common.widget.List#config-itemTpl}.
             * When tapped, the configured {@link #config-closeHandler} is called passing the
             * associated record.
             *
             * Chips may also be selected using the `LEFT` and `RIGHT` arrows (And the `Shift` key to
             * do multiple, contiguous election). Pressing the `DELETE` or `BACKSPACE` key passes the
             * selected records to the {@link #config-closeHandler}
             * @config {Boolean}
             * @default
             */closable:true,/**
             * A template function, which, when passed a record, returns the markup which
             * encapsulates a chip's icon to be placed before the {@link Common.widget.List#config-itemTpl}.
             * @config {Function}
             */iconTpl:null,/**
             * If {@link #config-closable} is `true`, this is the name of a callback function
             * to handle what the "close" action means.
             * @config {String|Function}
             */closeHandler:null};}}]);return ChipView;}(List);exports.ChipView=ChipView;ChipView._$name='ChipView';BryntumWidgetAdapterRegister.register('chipview',ChipView);var comboQueryAll=Symbol('Combo.queryAll'),comboQueryLast=Symbol('Combo.queryLast'),fieldRequiredErrorName='fieldRequired',fieldvalidateFilterErrorName='validateFilter';/**
 * @module Common/widget/Combo
 */ /**
 * Combo (dropdown) widget. Consists of a text field with a trigger icon, which displays a List. Can be
 * populated from a Store.
 *
 * @extends Common/widget/PickerField
 *
 * @example
 * // items as strings
 * let combo = new Combo({
 *   items: ['Small', 'Smaller', 'Really small', 'Tiny', 'Super tiny', '?'],
 *   placeholder: 'Pick size of diamond for ring'
 * });
 *
 * @example
 * // items as configs
 * let combo = new Combo({
 *   items: [{ value: 'a', text: 'First' }, { value: 'z', text: 'Last' }]
 * });
 *
 * @example
 * // items from store
 * let combo = new Combo({
 *   store: memberStore,
 *   valueField: 'id',
 *   displayField: 'name'
 * });
 *
 * @classType combo
 * @externalexample widget/Combo.js
 */var Combo=/*#__PURE__*/function(_PickerField){_inherits2(Combo,_PickerField);function Combo(){_classCallCheck2(this,Combo);return _possibleConstructorReturn2(this,_getPrototypeOf2(Combo).apply(this,arguments));}_createClass2(Combo,[{key:"afterConfigure",//endregion
value:function afterConfigure(){_get2(_getPrototypeOf2(Combo.prototype),"afterConfigure",this).call(this);if(!('_value'in this)){this._value=this.valueField===this.displayField?'':null;}}},{key:"eachWidget",value:function eachWidget(fn){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;for(var _i15=0,_arr2=[this.chipView,this._picker];_i15<_arr2.length;_i15++){var widget=_arr2[_i15];if(widget){if(fn(widget)===false){return;}if(deep&&widget.eachWidget){widget.eachWidget(fn,deep);}}}}},{key:"onChipViewMousedown",value:function onChipViewMousedown(mousedownEvent){mousedownEvent.preventDefault();if(!this.containsFocus){this.focus();}}},{key:"onChipClose",value:function onChipClose(records){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Do not clean value collection if input field is not empty - probably text is selected
// and user just wants to remove it, not the picked values
if(options.isKeyEvent&&this.input.value===''||!options.isKeyEvent){this.valueCollection.remove(records);}}},{key:"syncInputFieldValue",value:function syncInputFieldValue(){// We only sync the input's value if we are not multiselecting.
// If we are multiselecting, our value is represented by a ChipView.
// The ChipView automatically syncs itself with our valueCollection.
if(!this.multiSelect){_get2(_getPrototypeOf2(Combo.prototype),"syncInputFieldValue",this).call(this);}}},{key:"onEditComplete",//endregion
//region Value handling
/**
     * Check if field value is valid
     * @internal
     */value:function onEditComplete(){var me=this,selectionCount=me.valueCollection.count;_get2(_getPrototypeOf2(Combo.prototype),"onEditComplete",this).call(this);// Ensure the input area matches the selected value
if(selectionCount){me.clearError(fieldvalidateFilterErrorName);me.syncInputFieldValue();}if(me.required&&!selectionCount){me.setError(fieldRequiredErrorName);}}//endregion
//region Events
/**
     * User clicked trigger icon, toggle list.
     * @private
     */},{key:"onTriggerClick",value:function onTriggerClick(){var me=this;if(me.pickerVisible){me.hidePicker();}else{if(!me.readOnly&&!me.disabled){switch(me.triggerAction){case comboQueryAll:me.doFilter(null);break;case comboQueryLast:me.doFilter(me.lastQuery);break;default:me.doFilter(me.input.value);}}}}/**
     * User types into input field in editable combo, show list and filter it.
     * @private
     */},{key:"internalOnInput",value:function internalOnInput(event){var me=this,inputLen=me.input.value.length;// IE11 triggers input event on focus for some reason, ignoring it if not editable
if(!me.editable)return;me.updateEmpty();if(inputLen>=me.minChars){me.filterList(me.input.value);}else{if(me.validateFilter){me[inputLen?'setError':'clearError'](fieldvalidateFilterErrorName);}me.hidePicker();}/**
         * User typed into the field. Please note that the value attached to this event is the raw input field value and
         * not the combos value
         * @event input
         * @param {Common.widget.Combo} source - The combo
         * @param {String} value - Raw input value
         */me.trigger('input',{value:me.input.value,event:event});}// This is potentially a buffered function to respond to keystrokes in a buffered manner.
// This only becomes useful as a saving when using remote querying where each filter is an Ajax request.
},{key:"filterList",value:function filterList(queryString){this.doFilter(queryString);}},{key:"doFilter",value:function doFilter(queryString){var me=this,store=me.store,disableFilter=queryString==null||queryString=='';me.lastQuery=queryString;me.primaryFilter.setConfig({value:queryString,disabled:disableFilter});store.filter();me.showPicker();if(store.count){// If we are filtering, activate the first match
if(!disableFilter){me.picker.navigator.activeItem=0;}}// If we were actively filtering on a string but there were no matches
// and we are validateFilter: true, then mark as invalid even though we
// may have an underlying valid selected value.
else if(!disableFilter&&me.validateFilter){me.setError(fieldvalidateFilterErrorName);}}/**
     * This reacts to our {@link #property-valueCollection} being mutated in any way.
     * The `change`, `select` and `action` events are fired here.
     *
     * This could happen in four ways:
     *
     *  - User selected or deselected an item in the dropdown list.
     *  - `set value` changes the content.
     *  - The {@link #config-multiSelect} Chip view (which uses this in its store) deletes a record.
     *  - The application programmatically mutates the {@link #property-valueCollection}.
     *
     * @private
     */},{key:"onValueCollectionChange",value:function onValueCollectionChange(_ref49){var valueCollection=_ref49.source;var me=this,multiSelect=me.multiSelect,hidePicker='hidePickerOnSelect'in me?me.hidePickerOnSelect:!multiSelect,record=multiSelect?valueCollection.values.slice():valueCollection.first,records=valueCollection.values.slice(),isUserAction=me._isUserAction||hidePicker&&me.pickerVisible||false,oldValue=me._value;if(hidePicker){me.hidePicker();}if(!valueCollection.count&&me.required){me.setError(fieldRequiredErrorName);}else{me.clearError(fieldRequiredErrorName);me.clearError(fieldvalidateFilterErrorName);}if(me.validateFilter&&record){me.clearError(fieldvalidateFilterErrorName);}// Re-evaluate the filtering so that selected items are filtered out of the dropdown
if(me.filterSelected){me.store.filter();}// Clear the cached value so that there's no fallback when we read back the value below
me._value=null;// Cache the value for use by our change handler next time, and also so that
// if we just cleared the valueCollection, the fallback to ._value will be correct
var value=me._value=me.value;me.syncInputFieldValue();me.updateEmpty();if(!me.isConfiguring){me.trigger('change',{value:value,oldValue:oldValue,userAction:isUserAction,valid:me.isValid});/**
             * User selected an item in the list
             * @event select
             * @property {Combo} combo - Combo
             * @property {Common.data.Model} record - Selected record
             * @property {Common.data.Model} records - Selected records as an array if {@link #config-multiSelect} is `true`
             * @property {Boolean} userAction - `true` if the value change is due to user interaction.
             */me.trigger('select',{record:record,records:records,userAction:me.containsFocus});/**
             * User performed the default action in the list (selected an item)
             * @event action
             * @property {Combo} combo - Combo
             * @property {Mixed} value - The {@link #valueField} of the selected record
             * @property {Common.data.Model} record - Selected record
             * @property {Common.data.Model} records - Selected records as an array if {@link #config-multiSelect} is `true`
             */if(me.defaultAction==='select'){me.trigger('action',{value:value,record:record,records:records});}}}/**
     * This listens for when a record from the list is selected, but is already part of
     * the selection and so the {@link #property-valueCollection} rejects that as a no-op.
     * At this point, the user will still expect the picker to hide.
     * @param {Object} event The noChange event containing the splice parameters
     * @private
     */},{key:"onValueCollectionNoChange",value:function onValueCollectionNoChange(_ref50){var toAdd=_ref50.toAdd;if(!this.multiSelect&&toAdd.length&&this.pickerVisible){this.picker.hide();}}//endregion
//region Picker
},{key:"showPicker",value:function showPicker(){var me=this,picker=me.picker;_get2(_getPrototypeOf2(Combo.prototype),"showPicker",this).call(this);// Once we have access to the anchor size, overlay the anchor pointer over the target if configured to do so.
if(me.overlayAnchor&&!picker.align.offset){picker.align.offset=-picker.anchorSize[1];picker.realign();}if(me.selected){picker.navigator.activeItem=me.store.indexOf(me.selected);}me.input.focus();}/**
     * Creates default picker widget
     *
     * @internal
     */},{key:"createPicker",value:function createPicker(pickerConfig){var me=this,multiSelect=me.multiSelect,pickerWidth=me.pickerWidth,picker=new List(ObjectHelper.merge({owner:me,floating:true,scrollAction:'realign',itemsFocusable:false,activateOnMouseover:true,store:me.store,selected:me.valueCollection,multiSelect:multiSelect,cls:me.listCls,itemTpl:me.listItemTpl||function(item){return item[me.displayField];},forElement:me[me.pickerAlignElement],align:{align:'t-b',axisLock:true,matchSize:pickerWidth==null,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]},width:pickerWidth,navigator:{keyEventTarget:me.input},maxHeight:324,scrollable:{overflowY:true},autoShow:false,focusOnHover:false},pickerConfig));picker.element.dataset.emptyText=me.emptyText||me.L('No results');return picker;}},{key:"onPickerHide",value:function onPickerHide(){var me=this;_get2(_getPrototypeOf2(Combo.prototype),"onPickerHide",this).call(this);// https://app.assembla.com/spaces/bryntum/tickets/7736
if(me.multiSelect&&me.clearTextOnPickerHide){me.input.value='';}}//endregion
},{key:"element",set:function set(element){var me=this;_set(_getPrototypeOf2(Combo.prototype),"element",element,this,true);// If we are multiSelect, create a ChipView who's store is backed
// by our valueCollection - the collection of selected records.
if(me.multiSelect){me.element.classList.add('b-multiselect');me.chipView=new MultiSelectChipView(ObjectHelper.assign({parent:me,insertBefore:me.input,store:me.chipStore=new Store({storage:me.valueCollection}),navigator:{class:MultiSelectChipNavigator,keyEventTarget:me.input}},me.chipView));// Insert the input field
me.chipView.element.appendChild(me.input);// Focus must flow into this field from the ChipView
EventHelper.on({element:me.chipView.element,mousedown:'onChipViewMousedown',thisObj:me});}},get:function get(){return _get2(_getPrototypeOf2(Combo.prototype),"element",this);}//region Getters/setters
},{key:"keyStrokeFilterDelay",set:function set(delay){var me=this;if(delay){me.filterList=me.buffer(me.doFilter,delay);}me._keyStrokeFilterDelay=delay;},get:function get(){return this._keyStrokeFilterDelay;}/**
     * Prepares items to work in attached menu (converts strings to items)
     * @private
     */},{key:"items",set:function set(items){if(items==null){items=[];}if(items instanceof Store){return this.store=items;}var itemModel,valueField=this.valueField,storeData;var me=this,displayField=me.displayField;if(Array.isArray(items)){storeData=items.map(function(item){var result=item;if(item instanceof Model){itemModel=item.constructor;if(!valueField){me.valueField=valueField=itemModel.idField;}}else{if(typeof item==='string'){var _result6;if(!valueField){me.valueField=valueField=me.displayField;}result=(_result6={},_defineProperty(_result6,valueField,item),_defineProperty(_result6,displayField,item),_result6);}else{if(!valueField){me.valueField=valueField='value';}if(Array.isArray(item)){var _result7;result=(_result7={},_defineProperty(_result7,valueField,item[0]),_defineProperty(_result7,displayField,item[1]),_result7);}}}if(result.selected){me.value=result;}return result;});}// Must be a value -> text map
else{if(!valueField){me.valueField=valueField='value';}storeData=[];Object.entries(items).forEach(function(_ref51){var _storeData$push;var _ref52=_slicedToArray(_ref51,2),key=_ref52[0],value=_ref52[1];storeData.push((_storeData$push={},_defineProperty(_storeData$push,valueField,key),_defineProperty(_storeData$push,displayField,value),_storeData$push));});}// Allow reconfiguring with a new set of items
if(me.store){me.store.data=storeData;}else{var valueFieldDefinition=valueField===displayField?{name:'value',dataSource:displayField}:valueField;me.store=new Store({data:storeData,idField:valueField,modelClass:itemModel||/*#__PURE__*/function(_Model2){_inherits2(_class3,_Model2);function _class3(){_classCallCheck2(this,_class3);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class3).apply(this,arguments));}_createClass2(_class3,null,[{key:"idField",get:function get(){return valueField;},set:function set(idField){_set(_getPrototypeOf2(_class3),"idField",idField,this,true);}},{key:"fields",get:function get(){return[valueFieldDefinition,displayField];}}]);return _class3;}(Model)});}},get:function get(){return this.store.allRecords;}/**
     * Get/sets combo value, selects corresponding item in the list
     * Setting null clears the field.
     *
     * If {@link #config-multiSelect} is `true`, then multiple values may be passed as an array.
     * If the values are records, these become the selected record set held by {@link #property-valueCollection},
     * and the `value` yielded by this field is an array of all the {@link #config-valueField}s from the records.
     * @fires select
     * @fires action
     * @property {Object}
     */},{key:"value",set:function set(value){var me=this;if(value===me.value){// prevent highlighting animation on clear
var old=me.highlightExternalChange;me.highlightExternalChange=false;me.syncInputFieldValue();me.highlightExternalChange=old;return;}if(!me.multiSelect&&Array.isArray(value)&&value.length>1){throw new Error('Multiple values cannot be set to a non-multiselect Combo');}// This forces promotion of the items config into a Store if it has not already been injected
me._thisIsAUsedExpression(me.items);var valueField=me.valueField,displayField=me.displayField,store=me.store,valueCollection=me.valueCollection;// Unfilter the store so we can do the value lookup.
if(store.filtered){me.primaryFilter.disabled=true;store.filter();}var record;if(value!=null){var values=Array.isArray(value)?value:[value];for(var i=0,len=values.length;i<len;i++){var _value2=values[i];if(_value2 instanceof Model){// The required record value may not yet be in the store. Add it if not.
if(!store.storage.includes(_value2)){store.add(_value2);}}else{var isObject=_value2 instanceof Object;// If they passed a data object, match the valueField
if(isObject){_value2=_value2[valueField];}// Use the Store Collection's extra indices to quickly find a match
record=store.storage.getBy(displayField,_value2)||store.storage.getBy(valueField,_value2);if(record){// If the incoming value was a matched object, use it to update the record
if(isObject){record.set(values[i]);}values[i]=record;}else{values.splice(i,1);len--;i--;}}}// Remove all old values, add new values in one shot.
var vcGen=valueCollection.generation;valueCollection.splice(0,valueCollection.count,values);// If no change has fed through to onValueCollectionChange, just ensure the input matches
if(valueCollection.generation===vcGen){me.syncInputFieldValue();}// If we got no matches, onValueCollectionChange will set the _value to null.
// Tests specify that the _value should be set to the incoming unmatched value
if(!values.length){me._value=value;}}else{if(valueCollection.count){valueCollection.clear();}else{var oldValue=me._value;// Cache the value for use by our change handler next time, and also so that
// when get value yields null, the fallback to ._value will be correct
me._value=null;me.syncInputFieldValue();me.updateEmpty();if(!me.isConfiguring){me.trigger('change',{value:value,oldValue:oldValue,userAction:me._isUserAction,valid:me.isValid});}}}},get:function get(){var me=this;return me.multiSelect?me.valueCollection.map(function(r){return r[me.valueField];}):me.valueCollection.count?me.valueCollection.first[me.valueField]:me._value;}},{key:"isEmpty",get:function get(){return this.valueCollection.count===0;}},{key:"isValid",get:function get(){if(this.required&&!this.valueCollection.count){this.setError(fieldRequiredErrorName,true);}return _get2(_getPrototypeOf2(Combo.prototype),"isValid",this);}},{key:"inputValue",get:function get(){// This must be evaluated first, and NOT moved to be directly used as the
// second expression in the ternary. If called during configuration, this
// will import the configured value from the config object and ensure the
// value is matched against the store, and that the "selected" property is set.
var me=this,result=me.value;result=me.selected?me.selected[me.displayField]:result;if(me.displayValueRenderer){result=this.displayValueRenderer(me.selected);}return result==null?'':result;}},{key:"displayValueRenderer",set:function set(value){this._displayValueRenderer=value;},get:function get(){return this._displayValueRenderer;}/**
     * A {@link Common.util.Collection Collection} which holds the currently seleted records
     * from the store which dictates this field's value.
     *
     * Usually, this will contain one record, the record selected.
     *
     * When {@link #config-multiSelect} is `true`, there may be several records selected.
     */},{key:"valueCollection",get:function get(){if(!this._valueCollection){this._valueCollection=new Collection({listeners:{noChange:'onValueCollectionNoChange',change:'onValueCollectionChange',prio:-1000,// The ChipView must react to changes first.
thisObj:this}});}return this._valueCollection;}/**
     * Get/set store to display items from. Also accepts a Store config object
     * @property {Common.data.Store|Object}
     */},{key:"store",set:function set(store){var me=this,storeFilters=[];if(Array.isArray(store)){me.initialConfig.store=null;return me.items=store;}// Config object supplied, create a store
if(store&&!(store instanceof Store)){store=new Store(store);}if(!me.valueField){me.valueField=store.modelClass.idField;}// This is the filter that performs filtering on typing.
if(!me.primaryFilter){// Need an id to replace any existing combo filter on the store. Precommit hook wont allow it to be set
// directly...
var id='primary';me.primaryFilter=new CollectionFilter({id:id,property:me.displayField,operator:me.filterOperator,disabled:true,caseSensitive:me.caseSensitive});}storeFilters.push(me.primaryFilter);if(me.filterSelected){me.selectedItemsFilter=function(r){return!me.valueCollection.includes(r);};storeFilters.push(me.selectedItemsFilter);}store.filter(storeFilters);me._store=store;// Allow fast lookup by value or displayed value
store.storage.addIndex(me.displayField);store.storage.addIndex(me.valueField);if(me.displayValueRenderer){store.on({change:function change(){return me.syncInputFieldValue();}});me.syncInputFieldValue();}},get:function get(){return this._store;}/**
     * Get selected record.
     * @property {Common.data.Model[]}
     * @readonly
     */},{key:"record",get:function get(){return this.selected;}/**
     * Get the selected record(s).
     * @property {Common.data.Model[]}
     * @readonly
     */},{key:"records",get:function get(){return this.valueCollection.values.slice();}},{key:"selected",get:function get(){return this.valueCollection.first;}},{key:"picker",get:function get(){if(!this._picker){this.picker=true;}return this._picker;},set:function set(picker){var me=this;if(me._picker){me._picker.destroy();}if(picker instanceof Widget){me._picker=picker;}else{me._picker=me.createPicker(picker);}}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Rows to display in the dropdown (list items).
             *
             * If an object, the property names provide the {@link #config-value} for the Combo, and
             * the property values provide the displayed test in the list and input area eg:
             *
             *     items : {
             *         small  : 'Small',
             *         medium : 'Medium',
             *         large  : 'Large'
             *     }
             *
             * If an array, each entry may be
             *  - an object containing properties which must include
             * the {@link #config-valueField} and {@link #config-displayField} which populates the dropdown
             * with text and provides the corresponding field value.
             *  - An array whos first value provides the {@link #config-value} for the Combo and whos
             * second value provides the displayed test in the list and input area.
             *  - An array of values where the {@link #config-valueField} and {@link #config-displayField} are the same.
             *
             * eg:
             *
             *     items : [
             *         {value : 'small',  text : 'Small'},
             *         {value : 'medium', text : 'Medium'},
             *         {value : 'large',  text : 'Large'},
             *     ]
             *
             * or
             *
             *     items : [
             *         ['small',  'Small'],
             *         ['medium', 'Medium'],
             *         ['large',  'Large'],
             *     ]
             *
             * or
             *
             *     items : [ 'Small', 'Medium', 'Large' ]
             *
             * @config {Object[]|String[]|Object}
             */items:null,/**
             * A store used to populate items
             * @config {Common.data.Store}
             */store:null,/**
             * Field used for item value when populating from store
             * @config {String}
             */valueField:null,/**
             * Field used for item text when populating from store
             * @config {String}
             */displayField:'text',/**
             * Width of picker, defaults to this combo's {@link #config-pickerAlignElement} width
             * @config {Number}
             */pickerWidth:null,/**
             * The minimum string length to trigger the filtering, only relevant when {@link #config-editable} is true
             * @config {Number}
             * @default
             */minChars:1,selected:null,/**
             * Template for rendering list items contents
             * @config {Function}
             */listItemTpl:null,/**
             * Template function that can be used to customize the displayed value
             * @config {Function}
             */displayValueRenderer:null,/**
             * CSS class to add to picker
             * @config {String}
             */listCls:null,triggers:{expand:{cls:'b-icon-picker',handler:'onTriggerClick'}},/**
             * This implies that the picker will display an anchor pointer, but also means that the picker will align closer
             * to the input field so that the pointer pierces the {@link #config-pickerAlignElement}
             * @config {Boolean}
             * @default false
             */overlayAnchor:null,/**
             * The delay in milliseconds to wait after the last keystroke before filtering the list.
             * @config {Number}
             * @default
             */keyStrokeFilterDelay:null,defaultAction:'select',/**
             * How to query the store upon click of the expand trigger. There are two constants provided:
             *
             * * `Combo.queryAll` - Clear the filter and display the whole dataset in the dropdown.
             * * `Combo.queryLast` - Filter the dataset using the last filter value.
             * * `null`/any other - Use the value in the input field to filter the dataset.
             *
             * @config {Object}
             * @default Combo.QueryAll
             */triggerAction:comboQueryAll,/**
             * The name of an operator type as implemented in {@link Common.util.CollectionFilter#config-operator}
             * to use when filtering the dropdown list based upon the typed value.
             *
             * This defaults to `'startsWith'`, but the `'*'` operator may be used to match all
             * values which _contain_ the typed value.
             *
             * @config {String}
             */filterOperator:'startsWith',/**
             * Configure as `true` to force case matching when filtering the dropdown list based upon the typed value.
             *
             * @config {Boolean}
             * @default false
             */caseSensitive:false,/**
             * Configure as `true` to allow selection of multiple values from the dropdown list.
             *
             * Each value is displayed as a "Chip" to the left of the input area. Chips may be
             * selected using the `LEFT` and `RIGHT` arrow keys and deleted using the `DELETE` key
             * to remove values from the field. There is also a clickable close icon in each chip.
             *
             * @config {Boolean}
             * @default false
             */multiSelect:null,/**
             * By default, the picker is hidden on selection in single select mode, and
             * remains to allow more selections when {@link #config-multiSelect} is `true`.
             * Setting this to a `Boolean` value can override that default.
             */hidePickerOnSelect:null,/**
             * A config object to configure the {@link Common.widget.ChipView} to display the
             * selected value set when {@link #config-multiSelect} is `true.
             *
             * For example the {@link Common.widget.List#config-itemTpl} or
             * {@link Common.widget.ChipView#config-iconTpl} might be configured to display
             * richer chips for selected items.
             * @config {Boolean}
             */chipView:null,/**
             * When {@link #config-multiSelect} is `true`, you may configure `filterSelected` as
             * `true` to hide items in the dropdown when they are added to the selection.
             * It will appear as if the requested item has "moved" into the field's
             * {@link #config-chipView ChipView}.
             *
             * @config {Boolean}
             * @default false
             */filterSelected:null,/**
             * Text to display in the drop down when there are no items in the underlying store
             * @config {String}
             * @default
             */emptyText:null,/**
             * The initial value of this Combo box. In single select mode (default) it's a simple string value, for {@link #config-multiSelect} mode, it should be an array of record ids.
             * @config {String|Number[]|String[]}
             * @default
             */value:null,/**
             * `true` to cause the field to be in an invalid state while the typed filter string does not match a record in the store.
             * @config {Boolean}
             * @default
             */validateFilter:true,/**
             * `true` to clear value typed to a multiselect combo when picker is collapsed
             * @config {Boolean}
             * @default
             */clearTextOnPickerHide:true};}}]);return Combo;}(PickerField);// Constants for how to query on clicking the trigger.
// queryAll means disable the primaryFilter
// queryLast means query using the last query string
// Any other value means use the input field's content
/**
 * A constant value for the {@link #config-triggerAction} config to indicate that clicking the trigger should
 * clear the filter and display the whole dataset in the dropdown.
 * @member {Symbol} queryAll
 * @readonly
 * @static
 */exports.Combo=Combo;Combo.queryAll=comboQueryAll;/**
 * A constant value for the {@link #config-triggerAction} config to indicate that clicking the trigger should
 * filter the dataset usiong the last filter query string, *not* the input field value.
 * @member {Symbol} queryLast
 * @readonly
 * @static
 */Combo.queryLast=comboQueryLast;var MultiSelectChipView=/*#__PURE__*/function(_ChipView){_inherits2(MultiSelectChipView,_ChipView);function MultiSelectChipView(){_classCallCheck2(this,MultiSelectChipView);return _possibleConstructorReturn2(this,_getPrototypeOf2(MultiSelectChipView).apply(this,arguments));}_createClass2(MultiSelectChipView,null,[{key:"defaultConfig",get:function get(){return{cls:'b-combo-chip-list',itemsFocusable:false,multiSelect:true,closeHandler:'up.onChipClose',itemTpl:function itemTpl(record){return record[this.owner.displayField];}};}}]);return MultiSelectChipView;}(ChipView);var MultiSelectChipNavigator=/*#__PURE__*/function(_Navigator){_inherits2(MultiSelectChipNavigator,_Navigator);function MultiSelectChipNavigator(){_classCallCheck2(this,MultiSelectChipNavigator);return _possibleConstructorReturn2(this,_getPrototypeOf2(MultiSelectChipNavigator).apply(this,arguments));}_createClass2(MultiSelectChipNavigator,[{key:"onTargetClick",value:function onTargetClick(clickEvent){var item=clickEvent.target.closest(this.itemSelector);if(item&&!clickEvent.shiftKey&&!item.contains(clickEvent.target.closest('[data-noselect]'))){this.ownerCmp.selected.clear();}// Our own set activeItem also selects because on superclass *key* navigation
// (which is async on scroll end), it sets activeItem, and we select at that time.
// So on click we skip this class and go straight to the superclass because the
// List's onItemClick must run, and that does selection.
_set(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"activeItem",item,this,true);}},{key:"onKeyDown",value:function onKeyDown(keyEvent){// ENTER does not toggle selectedness in a ChipView.
// ChipView's selection is bound to navigation.
if(keyEvent.key!=='Enter'){_get2(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"onKeyDown",this).call(this,keyEvent);}}},{key:"navigatePrevious",value:function navigatePrevious(keyEvent){var chipView=this.ownerCmp;if(chipView.navigator.activeItem&&!keyEvent.shiftKey){chipView.selected.clear();}if(this.previous){_get2(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"navigatePrevious",this).call(this,keyEvent);}else{this.activeItem=null;}}},{key:"navigateNext",value:function navigateNext(keyEvent){var chipView=this.ownerCmp;// SHIFT+navigate preserves selection
if(chipView.navigator.activeItem&&!keyEvent.shiftKey){chipView.selected.clear();}if(this.next){_get2(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"navigateNext",this).call(this,keyEvent);}else{this.activeItem=null;}}},{key:"activeItem",set:function set(activeItem){var chipView=this.ownerCmp;_set(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"activeItem",activeItem,this,true);// Selection simply follows navigation in a ChipView
if(activeItem){chipView.selected.add(chipView.getRecord(activeItem));}},get:function get(){return _get2(_getPrototypeOf2(MultiSelectChipNavigator.prototype),"activeItem",this);}}],[{key:"defaultConfig",get:function get(){return{allowShiftKey:true};}}]);return MultiSelectChipNavigator;}(Navigator);Combo._$name='Combo';BryntumWidgetAdapterRegister.register('combo',Combo);BryntumWidgetAdapterRegister.register('combobox',Combo);BryntumWidgetAdapterRegister.register('dropdown',Combo);/**
 * @module Common/util/Month
 */ /**
 * A class which encapsulates a calendar view of a month, and offers information about 
 * the weeks and days within that calendar view.
 * ```
 *   const m = new Month({
 *       date         : '2018-12-01',
 *       weekStartDay : 1
 *   }) // December 2018 using Monday as week start
 *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))
 * ```
 */var Month=/*#__PURE__*/function(){/**
     * Constructs a Month from a config object which *must* contain a `date` property.
     * @param {Object} config An object containing initialization properties.
     * @param {Date|String|Number} config.date The date which the month should encapsulate. May be
     * a `Date` object, or a value, which, when passed to the `Date` constructor yields a
     * valid `Date` object. Mutating a passed `Date` after initializing a `Month` object
     * has no effect on the `Month` object.
     * @param {Number} [config.weekStartDay] Optional. Week start day override. Defaults to the
     * locale's {@link Common.helper.DateHelper#property-weekStartDay-static}.
     * @param {Boolean} [config.sixWeeks] Optional. Pass `true` to always have the month encapsulate six weeks.
     * This is ueful for UIs which must be a fixed height.
     * @function constructor
     */function Month(config){_classCallCheck2(this,Month);var date=config.date,weekStartDay=config.weekStartDay,sixWeeks=config.sixWeeks;this.constructor.updateDayNumbers(weekStartDay);this.sixWeeks=sixWeeks;this.date=date;}_createClass2(Month,[{key:"eachDay",/**
     * Iterates through all calendar cells in this month, calling the passed function
     * for each date.
     * @param {Function} fn The function to call.
     * <h4>Parameters</h4>
     *  - date [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The date for the cell.
     */value:function eachDay(fn){var me=this;for(var dayOfMonth=me.startDayOfMonth;dayOfMonth<=me.endDayOfMonth;dayOfMonth++){fn(new Date(me.year,me.month,dayOfMonth));}}/**
     * Iterates through all weeks in this month, calling the passed function
     * for each week. The function is passed the following parameters:
     * @param {Function} fn The function to call.
     * <h4>Parameters</h4>
     *  - week [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) An array containing `[year, weekNumber]`.
     *  - date [Date[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The dates for the week.
     */},{key:"eachWeek",value:function eachWeek(fn){var me=this,weekCount=me.weekCount;for(var dayOfMonth=me.startDayOfMonth,week=0;week<weekCount;week++){var weekDates=[],weekOfYear=me.getWeekNumber(new Date(me.year,me.month,Math.max(dayOfMonth,1)));for(var day=0;day<7;day++,dayOfMonth++){weekDates.push(new Date(me.year,me.month,dayOfMonth));}fn(weekOfYear,weekDates);}}},{key:"getWeekNumber",value:function getWeekNumber(date){var me=this,weekStartDay=me.weekStartDay;date=DateHelper.clearTime(date);// If it's a date that our known year does not contain
// create a new Month to find the answer.
if(date<me.startDate||date>me.endDate){return new Month({date:date,weekStartDay:weekStartDay}).getWeekNumber(date);}var weekNo=Math.floor((date-me.weekBase)/86400000/7),year=date.getFullYear();// No week 0. It's the last week of last year
if(!weekNo){var lastDec31=new Date(me.year,0,0);// Week is the week of last year's 31st Dec
return new Month({date:lastDec31,weekStartDay:weekStartDay}).getWeekNumber(lastDec31);}// Only week 53 if year ends before our week's 5th day
else if(weekNo===53&&!me.has53weeks){weekNo=1;year++;}// Return array of year and week number
return[year,weekNo];}},{key:"date",set:function set(date){if(!(date instanceof Date)){date=new Date(date);if(isNaN(date)){throw new Error('Month constructor must be passed a Date, or a valid argument to the Date constructor');}// Edge parses YYYY-MM-DD as UTC, not local, so in other locales, the value
// may end up not being 00:00:00 in the date, so remove any time zone offset.
var tzo=date.getTimezoneOffset();if(tzo){date=DateHelper.add(date,tzo,'minute');}}var me=this,monthStart=DateHelper.getFirstDateOfMonth(date),monthEnd=DateHelper.getLastDateOfMonth(monthStart),startWeekDay=me.dayNumbers[monthStart.getDay()],endWeekDay=me.dayNumbers[monthEnd.getDay()];me._date=date;// These comments assume ISO standard of Monday as week start day.
//
// This is the date of month that is the beginning of the first week row.
// So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first
// cell on the calendar which is the -4th of December. Note that the 0th
// of December was 31st of November, so needs -4 to get back to the 26th.
me.startDayOfMonth=1-startWeekDay;// This is the date of month that is the end of the last week row.
// So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last
// cell on the calendar which is the 37th of December.
me.endDayOfMonth=monthEnd.getDate()+(6-endWeekDay);if(me.sixWeeks){while(me.weekCount<6){me.endDayOfMonth+=7;}}me.year=date.getFullYear();me.month=date.getMonth();var jan1=new Date(me.year,0,1),dec31=new Date(me.year,1,31),january=me.month?new Month({date:jan1,weekStartDay:me.weekStartDay}):me;// First 7 days are in last week of previous year if the year
// starts after our 4th day of week.
if(me.dayNumbers[jan1.getDay()]>3){// Week base is calculated from the year start
me.weekBase=january.startDate;}// First 7 days are in week 1 of this year
else{// Week base is the start of week before
me.weekBase=new Date(me.year,0,january.startDayOfMonth-7);}// Our year only has a 53rd week if the year ends before our week's 5th day
me.has53weeks=dec31.getDay()<4;},get:function get(){return this._date;}/**
     * The number of days in the calendar for this month. This will always be
     * a multiple of 7, because this represents the number of calendar cells
     * occupied by this month.
     * @property {Number}
     * @readonly
     */},{key:"dayCount",get:function get(){// So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018
// to Sun 6th Jan (37th Dec) 2019
return this.endDayOfMonth+1-this.startDayOfMonth;}/**
     * The number of weeks in the calendar for this month.
     * @property {Number}
     * @readonly
     */},{key:"weekCount",get:function get(){return this.dayCount/7;}/**
     * The date of the first cell in the calendar view of this month.
     * @property {Date}
     * @readonly
     */},{key:"startDate",get:function get(){return new Date(this.year,this.month,this.startDayOfMonth);}/**
     * The date of the last cell in the calendar view of this month.
     * @property {Date}
     * @readonly
     */},{key:"endDate",get:function get(){return new Date(this.year,this.month,this.endDayOfMonth);}}],[{key:"applyLocale",value:function applyLocale(){this.updateDayNumbers();}},{key:"updateDayNumbers",value:function updateDayNumbers(){var weekStartDay=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DateHelper.weekStartDay;var me=this.prototype,dayNumbers=me.dayNumbers=[],canonicalDayNumbers=me.canonicalDayNumbers=[];me.weekStartDay=weekStartDay;// So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will
// have mapping of internal day number to canonical day number (as used by Date class)
// and to abbreviated day name like this:
// canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number
// dayNumbers          = [6, 0, 1, 2, 3, 4, 5] // Use for translation from Date object's day number to ours
for(var i=0;i<7;i++){var canonicalDay=(weekStartDay+i)%7;canonicalDayNumbers[i]=canonicalDay;dayNumbers[canonicalDay]=i;}}}]);return Month;}();// Update when changing locale
LocaleManagerSingelton.on({locale:'applyLocale',thisObj:Month});Month._$name='Month';/**
 * @module Common/widget/CalendarPanel
 */ /**
 * A Panel which can display a month of date cells.
 *
 * This is a base class for UI widgets which need to make use of a calendar layout
 * and should not be used directly.
 */var CalendarPanel=/*#__PURE__*/function(_Panel2){_inherits2(CalendarPanel,_Panel2);function CalendarPanel(){_classCallCheck2(this,CalendarPanel);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarPanel).apply(this,arguments));}_createClass2(CalendarPanel,[{key:"construct",value:function construct(config){LocaleManagerSingelton.on({locale:calculateDayNames});calculateDayNames();_get2(_getPrototypeOf2(CalendarPanel.prototype),"construct",this).call(this,config);this.refresh();}},{key:"ingestDate",value:function ingestDate(date){if(!(date instanceof Date)){date=new Date(date);if(isNaN(date)){throw new Error('CalendarPanel date ingestion must be passed a Date, or a valid argument to the Date constructor');}// Edge parses YYYY-MM-DD as UTC, not local, so in other locales, the value
// may end up not being 00:00:00 in the date, so remove any time zone offset.
var tzo=date.getTimezoneOffset();if(tzo){date=DateHelper.add(date,tzo,'minute');}}return DateHelper.clearTime(date);}},{key:"refresh",value:function refresh(){var me=this,today=DateHelper.clearTime(new Date()),cellElements=me.cellElements,weekElements=me.weekElements,date=me.date,month=me.month,cellCls=me.cellCls,disabledCls=me.disabledCls,otherMonthCls=me.otherMonthCls,weekendCls=me.weekendCls,todayCls=me.todayCls;// If we have not been initialized with a current date, use today
if(!date){return me.date=today;}// Clear all content and CSS
for(var i=0,len=cellElements.length;i<len;i++){cellElements[i].className=cellElements[i].innerHTML='';}for(var _i16=0;_i16<7;_i16++){var cell=me.weekdayCells[_i16];cell.className=cell.innerHTML='';if(me.headerRenderer){me.headerRenderer(cell,_i16);}else{cell.innerHTML=shortDayNames[me.canonicalDayNumbers[_i16]];}cell.classList.add('b-calendar-day-header');}// Create cell content
var weekIndex=0,cellIndex=0;month.eachWeek(function(week,dates){var weekElement=weekElements[weekIndex],weekCells=weekElement.children;weekCells[0].className='b-week-number-cell';if(me.weekRenderer){me.weekRenderer(weekCells[0],week);}else{weekCells[0].innerHTML=week[1];}for(var _i17=0;_i17<7;_i17++){var cellDate=dates[_i17],cellDay=cellDate.getDay(),_cell=weekCells[_i17+1],cellClassList=_cell.classList;cellClassList.add(cellCls);if(me.isDisabledDate(cellDate)){cellClassList.add(disabledCls);}if(cellDate.getMonth()!==month.month){cellClassList.add(otherMonthCls);}if(cellDay===0||cellDay===6){cellClassList.add(weekendCls);}if(cellDate.getTime()===today.getTime()){cellClassList.add(todayCls);}_cell.dataset.date=DateHelper.format(cellDate,'YYYY-MM-DD');_cell.dataset.cellIndex=cellIndex;if(me.cellRenderer){me.cellRenderer(_cell,cellDate);}else{_cell.innerHTML=cellDate.getDate();}cellIndex++;}weekIndex++;});if(me.floating){// Must realign because content change might change dimensions
if(!me.isAligning){me.realign();}}}},{key:"isDisabledDate",value:function isDisabledDate(date){var day=date.getDay(),disabledDates=this.disabledDates;if(this.disableWeekends&&(day===0||day===6)){return true;}if(disabledDates){if(typeof disabledDates==='function'){return disabledDates(date);}if(Array.isArray(disabledDates)){return disabledDates.some(function(d){return DateHelper.clearDate(d,true).getTime()===DateHelper.clearDate(date,true).getTime();});}}}},{key:"onTipOverCell",value:function onTipOverCell(_ref53){var tip=_ref53.source,target=_ref53.target;tip.date=DateHelper.parse(target.dataset.date,'YYYY-MM-DD');}},{key:"tip",set:function set(tip){this._tip=new Tooltip(Object.assign({forElement:this.element,forSelector:'.b-calendar-cell'},tip));this._tip.on({pointerOver:'onTipOverCell',thisObj:this});},get:function get(){return this._tip;}},{key:"element",get:function get(){return _get2(_getPrototypeOf2(CalendarPanel.prototype),"element",this);},set:function set(element){var me=this;_set(_getPrototypeOf2(CalendarPanel.prototype),"element",element,this,true);me.weekElements=Array.from(me.element.querySelectorAll('.b-calendar-week'));me.cellElements=Array.from(me.element.querySelectorAll('.b-calendar-week > div'));}/**
     * The date which this CalendarPanel encapsulates. Setting this causes the
     * content to be refreshed.
     * @property {Date}
     */},{key:"date",set:function set(date){var me=this;date=me._date=me.ingestDate(date);if(!me.month||me.month.month!==date.getMonth()){me.month=new Month({date:date,weekStartDay:me.weekStartDay,sixWeeks:me.sixWeeks});}me.refresh();},get:function get(){return this._date;}},{key:"showWeekNumber",set:function set(showWeekNumber){var me=this;me.element.classList[showWeekNumber?'add':'remove']('b-show-week-number');if(me.floating){// Must realign because content change might change dimensions
if(!me.isAligning){me.realign();}}}},{key:"bodyConfig",get:function get(){var result=_get2(_getPrototypeOf2(CalendarPanel.prototype),"bodyConfig",this),weeksContainerChildren=[];result.children=[{tag:'div',className:'b-calendar-row b-calendar-weekdays',children:this.dayNameCells},{className:'b-weeks-container',children:weeksContainerChildren}];for(var i=0;i<6;i++){var weekRow={className:'b-calendar-row b-calendar-week',children:[]};// Generate cells for week number plus seven day cells
for(var j=0;j<8;j++){weekRow.children.push({});}weeksContainerChildren.push(weekRow);}return result;}/**
     * Set to 0 for Sunday (the default), 1 for Monday etc.
     */},{key:"weekStartDay",set:function set(weekStartDay){var me=this;me.dayNames=[];me.dayNumbers=[];me.canonicalDayNumbers=[];me._weekStartDay=weekStartDay!=null?weekStartDay:DateHelper.weekStartDay;// So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will
// have mapping of internal day number to canonical day number (as used by Date class)
// and to abbreviated day name like this:
// canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number
// dayNumbers          = [6, 0, 1, 2, 3, 4, 5] // Use for translation from Date object's day number to ours
// dayNames            = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
for(var i=0;i<7;i++){var canonicalDay=(me._weekStartDay+i)%7;me.canonicalDayNumbers[i]=canonicalDay;me.dayNumbers[canonicalDay]=i;me.dayNames[i]=shortDayNames[canonicalDay];}},get:function get(){if(!this.hasOwnProperty('_weekStartDay')){this.weekStartDay=undefined;}return this._weekStartDay;}},{key:"dayNameCells",get:function get(){var me=this,weekNumberHeader=document.createElement('div'),result=[weekNumberHeader],weekdayCells=me.weekdayCells=[];weekNumberHeader.className='b-week-number-cell';// Ensure our week is initialized by set weekStartDay
me._thisIsAUsedExpression(me.weekStartDay);for(var i=0;i<7;i++){var cell=document.createElement('div');result.push(cell);weekdayCells.push(cell);}return result;}}],[{key:"defaultConfig",get:function get(){return{/**
             * The week start day, 0 meaning Sunday, 6 meaning Saturday.
             * Defaults to the locale's week start day.
             * @config {Number}
             */weekStartDay:null,/**
             * Configure as `true` to always show a six week calendar.
             * @config {Boolean}
             * @default
             */sixWeeks:true,/**
             * Configure as `true` to show a week number column at the start of the calendar block.
             * @config {Boolean}
             */showWeekNumber:false,/**
             * Either an array of `Date` objects which are to be disabled, or
             * a function, which, when passed a `Date` returns `true` if the
             * date is disabled.
             * @config {Function|Date[]}
             */disabledDates:null,/**
             * A function which creates content in, and may mutate a day header element.
             * The following parameters are passed:
             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.
             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range 0 to 6.
             * @config {Function}
             */headerRenderer:null,/**
             * A function which creates content in, and may mutate the week cell element at the start of a week row.
             * The following parameters are passed:
             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.
             *  - week [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) An array containing `[year, weekNumber]`.
             * @config {Function}
             */weekRenderer:null,/**
             * A function which creates content in, and may mutate a day cell element.
             * The following parameters are passed:
             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.
             *  - date [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The date for the cell.
             * @config {Function}
             */cellRenderer:null,/**
             * Configure as `true` to render weekends as {@link #config-disabledDates}.
             * @config {Boolean}
             */disableWeekends:null,/**
             * A config object to create a tooltip which will show on hover of a date cell
             * including disabled, weekend, and "other month" cells.
             *
             * It is the developer's responsibility to hook the `beforeshow` event
             * to either veto the show by returning `false` or provide contextual
             * content for the date.
             *
             * The tip instance will be primed with a `currentDate` property.
             * @config {Object}
             */tip:null,/**
             * The class name to add to calendar cells.
             * @config {String}
             * @private
             */cellCls:'b-calendar-cell',/**
             * The class name to add to disabled calendar cells.
             * @config {String}
             * @private
             */disabledCls:'b-disabled-date',/**
             * The class name to add to calendar cells which are in the previous or next month.
             * @config {String}
             * @private
             */otherMonthCls:'b-other-month',/**
             * The class name to add to calendar cells which are weekend dates.
             * @config {String}
             * @private
             */weekendCls:'b-weekend',/**
             * The class name to add to the calendar cell which contains today's date.
             * @config {String}
             * @private
             */todayCls:'b-today'};}}]);return CalendarPanel;}(Panel);exports.CalendarPanel=CalendarPanel;function calculateDayNames(){shortDayNames.length=0;for(var date=2;date<9;date++){d.setDate(date);shortDayNames.push(DateHelper.format(d,'ddd'));}}// In the Date class, 0=Sunday, 6=Saturday. 2nd Jan 2000 is Sunday.
// Collect local shortDayNames in default order.
var d=new Date('2000-01-01T00:00:00'),shortDayNames=[];CalendarPanel._$name='CalendarPanel';BryntumWidgetAdapterRegister.register('calendarpanel',CalendarPanel);/**
 * @module Common/widget/DatePicker
 */ /**
 * A Panel which can display a month of date cells, which navigates between the cells,
 * fires events upon user selection actions, optionally navigates to other months
 * in response to UI gestures, and optionally displays information about each date cell.
 *
 * This class is not intended for use in applications. It is used internally by the
 * {@link Common.widget.DateField} class.
 *
 * @classtype datepicker
 */var DatePicker=/*#__PURE__*/function(_CalendarPanel){_inherits2(DatePicker,_CalendarPanel);function DatePicker(){_classCallCheck2(this,DatePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(DatePicker).apply(this,arguments));}_createClass2(DatePicker,[{key:"construct",/**
     * Fires when a date is selected. If {@link #config-multiSelect} is specified, this
     * will fire upon deselection and selection of dates.
     * @event selectionChange
     * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified
     * this may be a two element array specifying start and end dates.
     */value:function construct(config){var me=this;me.selection=[];me.refresh=me.createOnFrame(me.refresh);_get2(_getPrototypeOf2(DatePicker.prototype),"construct",this).call(this,config);me.element.setAttribute('aria-activedescendant',"".concat(me.id,"-active-day"));EventHelper.on({element:me.element,mousedown:'onPickerMousedown',click:{delegate:".".concat(me.cellCls,":not(.").concat(me.disabledCls,"):not(.").concat(me.outOfRangeCls,")"),handler:'onCellClick'},keydown:'onPickerKeyDown',thisObj:me});}},{key:"refresh",value:function refresh(){_get2(_getPrototypeOf2(DatePicker.prototype),"refresh",this).call(this);this.title=DateHelper.format(this.month.date,'MMMM YYYY');}},{key:"cellRenderer",value:function cellRenderer(cell,cellDate){var me=this,activeCls=me.activeCls,selectedCls=me.selectedCls,cellClassList=cell.classList;cell.innerHTML=cellDate.getDate();cell.setAttribute('aria-label',DateHelper.format(cellDate,'MMMM D, YYYY'));if(me.isActiveDate(cellDate)){cellClassList.add(activeCls);cell.id="".concat(me.id,"-active-day");}if(me.isSelectedDate(cellDate)){cellClassList.add(selectedCls);}if(me.minDate&&cellDate<me.minDate){cellClassList.add(me.outOfRangeCls);}else if(me.maxDate&&cellDate>me.maxDate){cellClassList.add(me.outOfRangeCls);}}},{key:"onPickerMousedown",value:function onPickerMousedown(event){event.preventDefault();}},{key:"onCellClick",value:function onCellClick(event){this.onDateActivate(DateHelper.parse(event.target.dataset.date,'YYYY-MM-DD'),event);}},{key:"onDateActivate",value:function onDateActivate(date,event){var me=this,lastClickedDate=me.lastClickedDate,selection=me.selection;me.activeDate=date;me.lastClickedDate=date;// Handle multi selecting.
// * single contiguous date range, eg: an event start and end
// * multiple discontiguous ranges
if(me.multiSelect){if(me.multiRange);else if(!lastClickedDate||date.getTime()!==lastClickedDate.getTime()){if(lastClickedDate&&event.shiftKey){selection[1]=date;selection.sort();}else{selection.length=0;selection[0]=date;}me.trigger('selectionChange',{selection:selection});}}else{if(!me.value||me.value.getTime()!==date.getTime()){me.value=date;}else{me.hide();}}}},{key:"onPickerKeyDown",value:function onPickerKeyDown(keyEvent){var me=this,keyName=keyEvent.key.trim()||keyEvent.code,activeDate=me.activeDate;var newDate=new Date(activeDate);if(activeDate){do{switch(keyName){case'Escape':me.hide();break;case'ArrowLeft':if(keyEvent.ctrlKey){// Disable browser use of this key
keyEvent.preventDefault();newDate.setMonth(newDate.getMonth()-1);}else{newDate.setDate(newDate.getDate()-1);}break;case'ArrowUp':newDate.setDate(newDate.getDate()-7);break;case'ArrowRight':if(keyEvent.ctrlKey){// Disable browser use of this key
keyEvent.preventDefault();newDate.setMonth(newDate.getMonth()+1);}else{newDate.setDate(newDate.getDate()+1);}break;case'ArrowDown':newDate.setDate(newDate.getDate()+7);break;case'Enter':me.onDateActivate(activeDate,keyEvent);break;}}while(me.isDisabledDate(newDate)&&!me.focusDisabledDates);// Don't allow navigation to outside of date bounds.
if(me.minDate&&newDate<me.minDate){return;}if(me.maxDate&&newDate>me.maxDate){return;}me.activeDate=newDate;}}},{key:"gotoPrevMonth",value:function gotoPrevMonth(){var date=this.date;date.setMonth(date.getMonth()-1);this.date=date;}},{key:"gotoNextMonth",value:function gotoNextMonth(){var date=this.date;date.setMonth(date.getMonth()+1);this.date=date;}},{key:"isActiveDate",value:function isActiveDate(date){return this.activeDate&&this.ingestDate(date).getTime()===this.activeDate.getTime();}},{key:"isSelectedDate",value:function isSelectedDate(date){return this.selection.some(function(d){return d.getTime()===date.getTime();});}},{key:"focusElement",get:function get(){return this.element;}},{key:"minDate",set:function set(minDate){this._minDate=minDate?this.ingestDate(minDate):null;this.refresh();},get:function get(){return this._minDate;}},{key:"maxDate",set:function set(maxDate){this._maxDate=maxDate?this.ingestDate(maxDate):null;this.refresh();},get:function get(){return this._maxDate;}},{key:"activeDate",set:function set(activeDate){var me=this;if(activeDate){me._activeDate=me.ingestDate(activeDate);}else{me._activeDate=DateHelper.clearTime(new Date());}// New active date is in another month
if(me.month.month!==me._activeDate.getMonth()){me.month.date=me._activeDate;}me.refresh();},get:function get(){return this._activeDate;}},{key:"value",set:function set(date){var me=this,selection=me.selection;var changed;if(date){date=me.ingestDate(date);if(!me.value||date.getTime()!==me.value.getTime()){selection.length=0;selection[0]=date;me.date=date;changed=true;}}else{changed=selection.length;selection.length=0;// Clearing the value - go to today's calendar
me.date=new Date();}if(changed){me.trigger('selectionChange',{selection:selection});}},get:function get(){return this.selection[this.selection.length-1];}}],[{key:"defaultConfig",get:function get(){return{focusable:true,tools:{prevMonth:{align:'start',cls:'b-icon b-icon-angle-left',handler:'gotoPrevMonth'},nextMonth:{align:'end',cls:'b-icon b-icon-angle-right',handler:'gotoNextMonth'}},header:{title:'\xa0',titleAlign:'center'},/**
             * The minimum selectable date. Selection of and navigtion to dates prior
             * to this date will not be possible.
             * @config {Date}
             */minDate:null,/**
             * The maximum selectable date. Selection of and navigtion to dates after
             * this date will not be possible.
             * @config {Date}
             */maxDate:null,/**
             * The class name to add to the calendar cell whose date which is outside of the
             * {@link #config-minDate}/{@link #config-maxDate} range.
             * @config {String}
             * @private
             */outOfRangeCls:'b-out-of-range',/**
             * The class name to add to the currently focused calendar cell.
             * @config {String}
             * @private
             */activeCls:'b-active-date',/**
             * The class name to add to selected calendar cells.
             * @config {String}
             * @private
             */selectedCls:'b-selected-date',/**
             * By default, disabled dates cannot be navigated to, and they are skipped over
             * during keyboard navigation. Configure this as `true` to enable navigation to
             * disabled dates.
             * @config {Boolean}
             * @default
             */focusDisabledDates:null,/**
             * Configure as `true` to enable selecting a single date range by selecting a
             * start and end date.
             * @config {Boolean}
             * @default
             */multiSelect:false};}}]);return DatePicker;}(CalendarPanel);exports.DatePicker=DatePicker;DatePicker._$name='DatePicker';BryntumWidgetAdapterRegister.register('datepicker',DatePicker);//TODO: picker icon (calendar) should show day number
/**
 * @module Common/widget/DateField
 */ /**
 * Date field widget (text field + date picker).
 *
 * @extends Common/widget/PickerField
 *
 * @example
 * // minimal DateField config with date format specified
 * let dateField = new DateField({
 *   format: 'YYMMDD'
 * });
 *
 * @classType datefield
 * @externalexample widget/DateField.js
 */var DateField=/*#__PURE__*/function(_PickerField2){_inherits2(DateField,_PickerField2);function DateField(){_classCallCheck2(this,DateField);return _possibleConstructorReturn2(this,_getPrototypeOf2(DateField).apply(this,arguments));}_createClass2(DateField,[{key:"inputTemplate",//endregion
//region Init & destroy
value:function inputTemplate(){var me=this;return TemplateHelper.tpl(_templateObject9(),me.inputType||'text',me.inputCls||'',me.min,me.max,me.placeholder,me.name||me.id,me.id+'_input');}},{key:"onBackClick",//region Click listeners
value:function onBackClick(){var me=this,min=me.min;if(!me.readOnly&&me.value){var newValue=DateHelper.add(me.value,-1*me._step.magnitude,me._step.unit);if(!min||min.getTime()<=newValue){me.value=newValue;}}}},{key:"onForwardClick",value:function onForwardClick(){var me=this,max=me.max;if(!me.readOnly&&me.value){var newValue=DateHelper.add(me.value,me._step.magnitude,me._step.unit);if(!max||max.getTime()>=newValue){me.value=newValue;}}}//endregion
//region Toggle picker
},{key:"showPicker",value:function showPicker(focusPicker){this.picker.value=this.picker.activeDate=this.value;_get2(_getPrototypeOf2(DateField.prototype),"showPicker",this).call(this,focusPicker);}},{key:"focusPicker",value:function focusPicker(){this.picker.focus();}//endregion
// region Validation
},{key:"transformDateValue",//endregion
//region Getters/setters
value:function transformDateValue(value){if(value!=null){if(!(value.constructor.name==='Date')){if(typeof value==='string'){// If date cannot be parsed with set format, try fallback - the more general one
value=DateHelper.parse(value,this.format)||DateHelper.parse(value,this.fallbackFormat);}else{value=new Date(value);}}// We insist on a *valid* Date as the value.
// An invalid Date object returns NaN as its valueof().
if(value&&value.constructor.name==='Date'&&!isNaN(value.valueOf())){return DateHelper.clearTime(value);}}return null;}/**
     * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"hasChanged",value:function hasChanged(oldValue,newValue){if(oldValue&&oldValue.getTime&&newValue&&newValue.getTime){return oldValue.getTime()!==newValue.getTime();}return _get2(_getPrototypeOf2(DateField.prototype),"hasChanged",this).call(this,oldValue,newValue);}},{key:"updateLocalization",//endregion
//region Localization
value:function updateLocalization(){_get2(_getPrototypeOf2(DateField.prototype),"updateLocalization",this).call(this);this.syncInputFieldValue();}//endregion
//region Other
},{key:"internalOnKeyPress",value:function internalOnKeyPress(event){_get2(_getPrototypeOf2(DateField.prototype),"internalOnKeyPress",this).call(this,event);if(event.key==='Enter'&&this.isValid){this.picker.hide();}}//endregion
},{key:"picker",get:function get(){if(!this._picker){this.picker=true;}return this._picker;},set:function set(picker){var me=this;if(me._picker){me._picker.destroy();}me._picker=picker=new DatePicker(Object.assign({owner:me,forElement:me[me.pickerAlignElement],floating:true,scrollAction:'realign',align:{align:'t0-b0',axisLock:true,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]},value:me.value,minDate:me.min,maxDate:me.max,onSelectionChange:function onSelectionChange(_ref54){var selection=_ref54.selection;// We only care about what DatePicker does if it has been opened
if(picker.isVisible){me._isUserAction=true;me.value=selection[0];me._isUserAction=false;picker.hide();}}},picker));if(me.calendarContainerCls){picker.element.classList.add(me.calendarContainerCls);}}//endregion
},{key:"triggers",set:function set(triggers){_set(_getPrototypeOf2(DateField.prototype),"triggers",ObjectHelper.assign(triggers,this.stepTriggers),this,true);},get:function get(){return _get2(_getPrototypeOf2(DateField.prototype),"triggers",this);}},{key:"isValid",get:function get(){var me=this,min=me.min,max=me.max;me.clearError('minimumValueViolation',true);me.clearError('maximumValueViolation',true);var value=me.value;if(value){value=value.getTime();if(min&&min.getTime()>value){me.setError('minimumValueViolation',true);return false;}if(max&&max.getTime()<value){me.setError('maximumValueViolation',true);return false;}}return _get2(_getPrototypeOf2(DateField.prototype),"isValid",this);}},{key:"min",set:function set(value){var me=this;me._min=me.transformDateValue(value);me.input&&(me.input.min=me._min);if(me._picker){me._picker.minDate=me._min;}me.updateInvalid();},get:function get(){return this._min;}/**
     * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"max",set:function set(value){var me=this;me._max=me.transformDateValue(value);me.input&&(me.input.max=me._max);if(me._picker){me._picker.maxDate=me._max;}me.updateInvalid();},get:function get(){return this._max;}},{key:"value",set:function set(value){var me=this,oldValue=me.value,picker=me._picker,newValue=me.transformDateValue(value);// A value we could not parse
if(value&&!newValue){// setError uses localization
me.setError('invalidDate');return;}me.clearError('invalidDate');// Reject non-change
if(!me.hasChanged(oldValue,newValue)){return;}if(picker&&!me.inputting){picker.value=newValue;}_set(_getPrototypeOf2(DateField.prototype),"value",newValue,this,true);},get:function get(){return _get2(_getPrototypeOf2(DateField.prototype),"value",this);}/**
     *  The `step` property may be set in Object form specifying two properties,
     * `magnitude`, a Number, and `unit`, a String.
     *
     * If a Number is passed, the steps's current unit is used (or `day` if no current step set)
     * and just the magnitude is changed.
     *
     * If a String is passed, it is parsed in accordance with (see {@link Common.helper.DateHelper#function-format-static}.
     * The string is taken to be the numeric magnitude then an abbreviation, or name of the unit.
     *
     * Upon read, the value is always returned in object form containing `magnitude` and `unit`.
     * @property {String|Number|Object}
     * */},{key:"step",set:function set(value){var me=this;// If a step is configured, show the steppers
me.element.classList[value?'add':'remove']('b-show-steppers');if(typeof value==='number'){value={magnitude:value,unit:me._step?me._step.unit:'day'};}else if(_typeof(value)!=='object'){value=DateHelper.parseDuration(value);}if(value&&value.magnitude&&value.unit){value.magnitude=Math.abs(value.magnitude);me._step=value;me.updateInvalid();}},get:function get(){return this._step;}},{key:"inputValue",get:function get(){// Do not use the _value property. If called during configuration, this
// will import the configured value from the config object.
var date=this.value;return date?DateHelper.format(date,this.format):'';}/**
     * Get/Set format for date displayed in field (see {@link Common.helper.DateHelper#function-format-static} for formatting options)
     * @property {String}
     */},{key:"format",set:function set(value){var me=this;me._format=value;me.syncInputFieldValue();},get:function get(){return this._format;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)
             * @config {String}
             * @default
             */format:'L',fallbackFormat:'YYYY-MM-DD',// same for all languages
/**
             * Format for date in picker. Uses localized format per default
             * @config {String}
             */pickerFormat:null,triggers:{expand:{cls:'b-icon-calendar',handler:'onTriggerClick',weight:200}},stepTriggers:{back:{cls:'b-icon-angle-left b-step-trigger',handler:'onBackClick',align:'start',weight:100},forward:{cls:'b-icon-angle-right b-step-trigger',handler:'onForwardClick',align:'end',weight:100}},// An optional extra CSS class to add to the picker container element
calendarContainerCls:'',/**
             * Min value
             * @config {String|Date}
             */min:null,/**
             * Max value
             * @config {String|Date}
             */max:null,/**
             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.
             * The value is taken to be a string consisting of the numeric magnitude and the units.
             * The units may be a recognised unit abbreviation of this locale or the full local unit name.
             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing
             * two properties: `magnitude`, a Number, and `unit`, a String
             * @config {String|Number|Object}
             */step:null,/**
             * A config object used to configure the {@link Common.widget.DatePicker datePicker}.
             * ```javascript
             * dateField = new DateField({
             *      picker    : {
             *          multiSelect : true
             *      }
             *  });
             * ```
             * @config {Object}
             */picker:null};}}]);return DateField;}(PickerField);exports.DateField=DateField;DateField._$name='DateField';BryntumWidgetAdapterRegister.register('datefield',DateField);BryntumWidgetAdapterRegister.register('date',DateField);/**
 * @module Common/widget/NumberField
 */ /**
 * Number field widget. Wraps native `<input type="number">`
 *
 * @extends Common/widget/Field
 *
 * @example
 * let number = new NumberField({
 *   min: 1,
 *   max: 5,
 *   value: 3
 * });
 *
 * @classType numberfield
 * @externalexample widget/NumberField.js
 */var NumberField=/*#__PURE__*/function(_Field3){_inherits2(NumberField,_Field3);function NumberField(){_classCallCheck2(this,NumberField);return _possibleConstructorReturn2(this,_getPrototypeOf2(NumberField).apply(this,arguments));}_createClass2(NumberField,[{key:"internalOnKeyPress",value:function internalOnKeyPress(e){if(BrowserHelper.isEdge&&e.type==='keydown'){if(e.key==='ArrowUp'){this.doSpinUp();e.preventDefault();}else if(e.key==='ArrowDown'){this.doSpinDown();e.preventDefault();}}_get2(_getPrototypeOf2(NumberField.prototype),"internalOnKeyPress",this).call(this,e);}//endregion
},{key:"inputTemplate",value:function inputTemplate(){var me=this,style='inputWidth'in me?"style=\"width:".concat(me.inputWidth).concat(typeof me.inputWidth==='number'?'px':'',"\""):'';return TemplateHelper.tpl(_templateObject10(),me.min,me.max,me._value,me.autoComplete,me.placeholder,me.name||me.id,me.id,style);}},{key:"doSpinUp",value:function doSpinUp(){var newValue=(this.value||0)+this.step,min=this.min,max=this.max;if(!isNaN(min)&&newValue<min){newValue=min;}if(isNaN(max)||newValue<=max){this._isUserAction=true;this.value=newValue;this._isUserAction=false;}}},{key:"doSpinDown",value:function doSpinDown(){var newValue=(this.value||0)-this.step,min=this.min,max=this.max;if(!isNaN(max)&&newValue>max){newValue=max;}if(isNaN(min)||newValue>=min){this._isUserAction=true;this.value=newValue;this._isUserAction=false;}}},{key:"step",set:function set(step){this.element.classList[step?'remove':'add']('b-hide-spinner');this._step=step;},get:function get(){return this._step;}/**
     * Min value
     * @property {Number}
     */},{key:"min",set:function set(min){this._min=min;if(this.input){this.input.min=min;}},get:function get(){return this._min;}/**
     * Max value
     * @property {Number}
     */},{key:"max",set:function set(max){this._max=max;if(this.input){this.input.max=max;}},get:function get(){return this._max;}},{key:"value",get:function get(){return _get2(_getPrototypeOf2(NumberField.prototype),"value",this);},set:function set(value){if(value||value===0){// We insist on a number as the value
if(typeof value!=='number'){value=typeof value==='string'?parseFloat(value):Number(value);if(isNaN(value)){value='';}}}else{value=this.clearable?undefined:0;}// Reject non-changes & not interested in non-number values
if(this.value!==value){_set(_getPrototypeOf2(NumberField.prototype),"value",value,this,true);}}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Min value
             * @config {Number}
             */min:null,/**
             * Max value
             * @config {Number}
             */max:null,/**
             * Step size. Use a decimal value to allow decimal input
             * @config {Number}
             */step:1,/**
             * Initial value
             * @config {Number}
             */value:0,triggers:{spin:{type:'spintrigger'}}};}}]);return NumberField;}(Field);exports.NumberField=NumberField;NumberField._$name='NumberField';BryntumWidgetAdapterRegister.register('numberfield',NumberField);BryntumWidgetAdapterRegister.register('number',NumberField);/**
 * @module Common/widget/Slider
 */ /**
 * Wraps native &lt;input type="range"&gt;
 *
 * @extends Common/widget/Widget
 *
 * @example
 * let slider = new Slider({
 *   text: 'Choose value'
 * });
 *
 * @classType slider
 * @externalexample widget/Slider.js
 */var Slider=/*#__PURE__*/function(_Widget8){_inherits2(Slider,_Widget8);function Slider(){_classCallCheck2(this,Slider);return _possibleConstructorReturn2(this,_getPrototypeOf2(Slider).apply(this,arguments));}_createClass2(Slider,[{key:"construct",//endregion
//region Init
value:function construct(config){var me=this;_get2(_getPrototypeOf2(Slider.prototype),"construct",this).call(this,config);me.updateLabel();if(me.showTooltip){me.tip=new Tooltip({forElement:me.input,anchor:false,// No anchor displayed since thumbSize is different for different themes
align:'b-t',axisLock:true});}me.input.addEventListener('input',me.onInternalInput.bind(me));me.input.addEventListener('change',me.onInternalChange.bind(me));me.input.addEventListener('mouseover',me.onInternalMouseOver.bind(me));me.input.addEventListener('mouseout',me.onInternalMouseOut.bind(me));}},{key:"template",value:function template(widget){return TemplateHelper.tpl(_templateObject11(),widget.text?'b-text b-has-label':'',widget.id,widget.min,widget.max,widget.step,widget.value,widget.id,widget.text);}},{key:"onInternalInput",//endregion
//region Events
value:function onInternalInput(event){var me=this;me._value=parseInt(me.input.value);me.updateUI();me.trigger('input',{value:me.value});}},{key:"onInternalChange",value:function onInternalChange(event){var me=this;me.updateUI();me.triggerChange(true);me.trigger('action',{value:me.value});}},{key:"onInternalMouseOver",value:function onInternalMouseOver(event){var me=this;me.updateLabel();if(me.tip){me.tip.showBy({target:me.calcThumbPosition(),offset:5});}}},{key:"onInternalMouseOut",value:function onInternalMouseOut(event){if(this.tip){this.tip.hide();}}},{key:"triggerChange",value:function triggerChange(userAction){this.trigger('change',{value:this.value,userAction:userAction});}//endregion
//region Getters/setters
/**
     * Get/Set text. Appends value if Slider.showValue is true
     * @property {String}
     */},{key:"updateLabel",//endregion
//region Util
/**
     * Refresh label text
     * @private
     */value:function updateLabel(){this.text=this._text;}/**
     * Refresh tooltip position
     * @private
     */},{key:"updateTooltipPosition",value:function updateTooltipPosition(){if(this.tip){this.tip.alignTo({target:this.calcThumbPosition(),offset:5});}}/**
     * Refresh slider UI
     * @private
     */},{key:"updateUI",value:function updateUI(){this.updateLabel();this.updateTooltipPosition();}},{key:"calcThumbPosition",value:function calcThumbPosition(){var me=this,inputRect=Rectangle.from(me.input),offset=(inputRect.width-me.thumbSize)*me.calcPercentProgress()/100;return new Rectangle(inputRect.x+offset,inputRect.y+inputRect.height/2-me.thumbSize/2,me.thumbSize,me.thumbSize);}},{key:"calcPercentProgress",value:function calcPercentProgress(){return(this.value-this.min)/(this.max-this.min)*100;}//endregion
},{key:"focusElement",get:function get(){return this.input;}},{key:"text",get:function get(){return this._text;},set:function set(text){var me=this;me._text=text;if(me.label){if(me.showValue){text=text?"".concat(text," (").concat(me.value,")"):me.value;}me.label.innerHTML=text;}if(me.tip){me.tip.html=me.value;}}/**
     * Get/set value
     * @property {Number}
     */},{key:"value",get:function get(){return this.input?parseInt(this.input.value):this._value;},set:function set(value){var me=this;if(me._value!==value){if(me.input){me.input.value=value;me.updateUI();me.triggerChange(false);}me._value=value;}}/**
     * Get/set min value
     * @property {Number}
     */},{key:"min",get:function get(){return this.input?this.input.min:this._min;},set:function set(min){var me=this;if(me.input){me.input.min=min;if(me._value<min){me.value=min;me.trigger('input',{value:me.value});}}me._min=min;}/**
     * Get/set max value
     * @property {Number}
     */},{key:"max",get:function get(){return this.input?this.input.max:this._max;},set:function set(max){var me=this;if(me.input){me.input.max=max;if(me._value>max){me.value=max;me.trigger('input',{value:me.value});}}me._max=max;}/**
     * Get/set step size
     * @property {Number}
     */},{key:"step",get:function get(){return this.input?this.input.step:this._step;},set:function set(step){if(this.input)this.input.step=step;this._step=step;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Slider label text
             * @config {String}
             */text:'',/**
             * Show value in label (appends in () if text is set)
             * @config {Boolean}
             * @default
             */showValue:true,/**
             * Show value in tooltip
             * @config {Boolean}
             * @default
             */showTooltip:false,/**
             * Minimum value
             * @config {Number}
             * @default
             */min:0,/**
             * Maximum value
             * @config {Number}
             * @default
             */max:100,/**
             * Step size
             * @config {Number}
             * @default
             */step:1,/**
             * Initial value
             * @config {Number}
             */value:null,// The value is set in the Light theme. The Material theme will have different value.
thumbSize:20,localizableProperties:['text']};}}]);return Slider;}(Widget);exports.Slider=Slider;Slider._$name='Slider';BryntumWidgetAdapterRegister.register('slider',Slider);/**
 * @module Common/widget/layout/Card
 */var animationClasses=['b-slide-out-left','b-slide-out-right','b-slide-in-left','b-slide-in-right'];/**
 * A helper class for containers which must manage multiple child widgets, of which only one may be visible at once such
 * as a {@link Common.widget.TabPanel}. This class offers an active widget switching API, and optional slide-in,
 * slide-out animations from child to child.
 */var Card=/*#__PURE__*/function(_Layout){_inherits2(Card,_Layout);function Card(){_classCallCheck2(this,Card);return _possibleConstructorReturn2(this,_getPrototypeOf2(Card).apply(this,arguments));}_createClass2(Card,[{key:"setActiveItem",/**
     * Get/set active item, using index or the Widget to activate
     * @param {Common.widget.Widget|Number} activeItem
     * @returns {Object} An object describing the card change containing the following properties:
     *
     *  - `prevActiveIndex` The previously active index.
     *  - `prevActiveItem ` The previously active child item.
     *  - `activeIndex    ` The newly active index.
     *  - `activeItem     ` The newly active child item.
     *  - `promise        ` A promise which completes when the slide-in animation finishes and the child item contains
     * focus if it is focusable.
     */value:function setActiveItem(activeIndex){var me=this,owner=me.owner,contentElement=owner.contentElement,items=owner.items,widgetPassed=activeIndex instanceof Widget,prevActiveIndex=parseInt(contentElement.dataset.activeIndex),prevActiveItem=items[prevActiveIndex],newActiveItem=owner.items[activeIndex=widgetPassed?activeIndex=items.indexOf(activeIndex):parseInt(activeIndex)],event={prevActiveIndex:prevActiveIndex,prevActiveItem:prevActiveItem};// There's a child widget at that index to activate
if(newActiveItem&&newActiveItem!==prevActiveItem){var prevItemElement=prevActiveItem.element,newActiveElement=newActiveItem&&newActiveItem.element;event.activeIndex=activeIndex;event.activeItem=newActiveItem;// A previous card change is in progress, abort it and clean the items it was operating upon
if(me.animateDetacher){var _abortedEvent$activeI;var abortedEvent=me.animateDetacher.event;me.animateDetacher();abortedEvent.prevActiveItem.element.classList.remove(animationClasses);(_abortedEvent$activeI=abortedEvent.activeItem.element.classList).remove.apply(_abortedEvent$activeI,['b-active'].concat(animationClasses));me.animateDetacher=null;}event.promise=new Promise(function(resolve,reject){// If there's something to slide out, slide it out, and slide the new item in
if(prevItemElement&&me.animateCardChange){prevItemElement.classList.add(activeIndex>prevActiveIndex?'b-slide-out-left':'b-slide-out-right');newActiveElement.classList.add('b-active',activeIndex<prevActiveIndex?'b-slide-in-left':'b-slide-in-right');// Paint early, to have contents in place when sliding in
newActiveItem.triggerPaint();// When the new widget is in place, clean up
me.animateDetacher=EventHelper.on({element:newActiveElement,animationend:function animationend(){var _newActiveElement$cla;me.animateDetacher=null;// Clean incoming widget's animation classes
(_newActiveElement$cla=newActiveElement.classList).remove.apply(_newActiveElement$cla,animationClasses);// If there's an outgoing item, clean its animation classes and hide it
if(prevItemElement){var _prevItemElement$clas;(_prevItemElement$clas=prevItemElement.classList).remove.apply(_prevItemElement$clas,['b-active'].concat(animationClasses));}contentElement.dataset.activeIndex=activeIndex;// Note that we have to call focus *after* the element is in its new position
// because focus({preventScroll:true}) is not supported everywhere
// and crazy browser scrolling behaviour on focus breaks the animation.
newActiveItem.focus();resolve(event);},once:true});me.animateDetacher.reject=reject;me.animateDetacher.event=event;}// Nothing to slide out or we are not animating.
else{if(prevItemElement){prevItemElement.classList.remove('b-active');}newActiveElement.classList.add('b-active');contentElement.dataset.activeIndex=activeIndex;newActiveItem.focus();newActiveItem.triggerPaint();resolve(event);}});}return event;}},{key:"renderChildren",value:function renderChildren(){var owner=this.owner,activeIndex=owner.activeIndex;// The usual; not working on IE11
if(BrowserHelper.isIE11){this.animateCardChange=false;}// Ensure activeIndex of the owning Container at render time is honoured.
if(owner.items&&activeIndex!=null&&owner.items[activeIndex]){owner.contentElement.dataset.activeIndex=activeIndex;owner.items[activeIndex].element.classList.add('b-active');}_get2(_getPrototypeOf2(Card.prototype),"renderChildren",this).call(this);}/**
     * The active child index. Setting must be done through {@link #function-setActiveItem}
     * @property {Number}
     * @readonly
     */},{key:"activeIndex",get:function get(){return parseInt(this.owner.contentElement.dataset.activeIndex);}/**
     * The active child item. Setting must be done through {@link #function-setActiveItem}
     * @property {Common.widget.Widget}
     * @readonly
     */},{key:"activeItem",get:function get(){return this.owner.items[parseInt(this.owner.contentElement.dataset.activeIndex)];}}],[{key:"defaultConfig",get:function get(){return{containerCls:'b-card-container',itemCls:'b-card-item',/**
             * Specifies whether to slide tabs in and out of visibility.
             * @config {Boolean}
             * @default
             */animateCardChange:true};}}]);return Card;}(Layout);// Layouts must register themselves so that the static layout instantiation
// in Layout knows what to do with layout type names
Card._$name='Card';Layout.registerLayout(Card);/**
 * @module Common/widget/TabPanel
 */ /**
 * Tab panel widget, displays a collection of tabs which each can contain other widgets. Layout is handled using css
 *
 * @extends Common/widget/Widget
 * @example
 * let tabPanel = new TabPanel({
 *  items: [
 *      {
 *          title: 'First',
 *          items: [
 *              { type: 'textfield', label: 'Name' },
 *              ...
 *          ]
 *      }, {
 *          title: 'Last',
 *          items: [
 *              ...
 *          ]
 *      }
 *  ]
 * });
 *
 * @classType tabpanel
 * @externalexample widget/TabPanel.js
 */var TabPanel=/*#__PURE__*/function(_Container4){_inherits2(TabPanel,_Container4);function TabPanel(){_classCallCheck2(this,TabPanel);return _possibleConstructorReturn2(this,_getPrototypeOf2(TabPanel).apply(this,arguments));}_createClass2(TabPanel,[{key:"construct",//endregion
//region Init
value:function construct(config){var me=this;_get2(_getPrototypeOf2(TabPanel.prototype),"construct",this).call(this,config);// assign elements to titleElement, so they can get updated automatically when title is changed
me.items.forEach(function(tab,i){tab.titleElement=me.element.querySelector("div.b-tabpanel-tab[data-index=\"".concat(i,"\"] span"));});EventHelper.on({element:me.tabStrip,delegate:'.b-tabpanel-tab',click:'onTabElementClick',thisObj:me});}//endregion
},{key:"onTabElementClick",//endregion
//region Events
value:function onTabElementClick(event){this.activeTab=event.currentTarget.dataset.index;}//endregion
},{key:"tabMinWidth",set:function set(width){this._tabMinWidth=width;this.element&&DomHelper.forEachSelector(this.element,'.b-tabpanel-tab',function(tab){DomHelper.setLength(tab,'minWidth',width||null);});},get:function get(){return this._tabMinWidth;}},{key:"tabMaxWidth",set:function set(width){this._tabMaxWidth=width;this.element&&DomHelper.forEachSelector(this.element,'.b-tabpanel-tab',function(tab){DomHelper.setLength(tab,'maxWidth',width||null);});},get:function get(){return this._tabMaxWidth;}},{key:"layout",set:function set(layout){_set(_getPrototypeOf2(TabPanel.prototype),"layout",layout,this,true);this.layout.animateCardChange=this.animateTabChange;},get:function get(){return _get2(_getPrototypeOf2(TabPanel.prototype),"layout",this);}//region Tabs
},{key:"contentElement",get:function get(){return this.tabPanelBody;}},{key:"focusElement",get:function get(){var activeTab=this.items[this.activeTab||0],tabFocusElement=activeTab&&activeTab.focusElement;return tabFocusElement||this.tabStrip.children[this.activeTab];}/**
     * Get/set active tab, using index or the Widget to activate.
     * @property {Common.widget.Widget|Number}
     */},{key:"activeTab",set:function set(index){var me=this;if(me.isConfiguring){me._activeTab=index;}else{var tabchangeEvent=me.layout.setActiveItem(index),promise=tabchangeEvent.promise,activeIndex=tabchangeEvent.activeIndex,activeItem=tabchangeEvent.activeItem;// If the layout successfully activated a new item...
if(activeItem){var tabStrip=me.tabStrip,prevTabElement=tabStrip.children[me._activeTab];// Our UI changes immediately, our state must be accurate
me._activeTab=activeIndex;// Deactivate previous active tab
if(prevTabElement){prevTabElement.classList.remove('b-active');}// Activate the new tab
tabStrip.children[activeIndex].classList.add('b-active');promise.then(function(){/**
                     * The active tab has changed.
                     * @event tabchange
                     * @param {Common.widget.Widget} prevActiveItem - The previous active child widget.
                     * @param {Number} prevActiveIndex - The previous active index.
                     * @param {Common.widget.Widget} activeItem - The new active child widget.
                     * @param {Number} activeIndex - The new active index.
                     */me.trigger('tabchange',tabchangeEvent);});}}}/**
     * The active tab index. Setting must be done through {@link #property-activeTab}
     * @property {Number}
     * @readonly
     */,get:function get(){return this._activeTab;}/**
     * The active child widget. Setting must be done through {@link #property-activeTab}
     * @property {Common.widget.Widget}
     * @readonly
     */},{key:"activeIndex",get:function get(){return this.activeTab;}},{key:"activeItem",get:function get(){return this.layout.activeItem;}}],[{key:"defaultConfig",//region Config
get:function get(){return{template:function template(me){return TemplateHelper.tpl(_templateObject12(),me.items.map(function(tab,i){return"\n                        <div tabindex=\"-1\" data-index=\"".concat(i,"\" class=\"b-tabpanel-tab ").concat(i===me.activeIndex?'b-active':''," ").concat(tab.cls||'',"\" style=\"").concat(me.tabMinWidth?'min-width:'+DomHelper.setLength(me.tabMinWidth)+';':''," ").concat(me.tabMaxWidth?'max-width:'+DomHelper.setLength(me.tabMaxWidth)+';':'',"\" >\n                            <span class=\"b-tabpanel-tab-title\">").concat(tab.title,"</span>\n                        </div>\n                        ");}),me.activeIndex);},itemCls:'b-tabpanel-item',defaultType:'container',/**
             * The index of the initially active tab.
             * @config {Number}
             * @default
             */activeTab:0,/**
             * Min width of a tab title. 0 means no minimum width. This is default.
             * @config {Number}
             * @default
             */tabMinWidth:null,/**
             * Max width of a tab title. 0 means no maximum width. This is default.
             * @config {Number}
             * @default
             */tabMaxWidth:null,/**
             * Specifies whether to slide tabs in and out of visibility.
             * @config {Boolean}
             * @default
             */animateTabChange:true,layout:'card',// Prevent child panels from displaying a header unless explicitly configured with one
suppressChildHeaders:true};}}]);return TabPanel;}(Container);exports.TabPanel=TabPanel;TabPanel._$name='TabPanel';BryntumWidgetAdapterRegister.register('tabpanel',TabPanel);BryntumWidgetAdapterRegister.register('tabs',TabPanel);/**
 * @module Common/widget/TextAreaField
 */ /**
 * TextAreaField widget. Wraps native &lt;input type="text"&gt;
 *
 * @extends Common/widget/Field
 *
 * @example
 * let textAreaField = new TextAreaField({
 *   placeholder: 'Enter some text'
 * });
 *
 * @classType textareafield
 */var TextAreaField=/*#__PURE__*/function(_PickerField3){_inherits2(TextAreaField,_PickerField3);function TextAreaField(){_classCallCheck2(this,TextAreaField);return _possibleConstructorReturn2(this,_getPrototypeOf2(TextAreaField).apply(this,arguments));}_createClass2(TextAreaField,[{key:"startConfigure",value:function startConfigure(config){// Read the inline config which will force evaluation of triggers.
this._thisIsAUsedExpression(this.inline);_get2(_getPrototypeOf2(TextAreaField.prototype),"startConfigure",this).call(this,config);}},{key:"inputTemplate",value:function inputTemplate(){var me=this;if(me.inline){return TemplateHelper.tpl(_templateObject13(),me.inputCls||'',me.placeholder,me.name||me.id,me.resize,me.id+'_input');}else{return TemplateHelper.tpl(_templateObject14(),me.placeholder);}}},{key:"showPicker",value:function showPicker(){var me=this,picker=me.picker;picker.width=me.pickerWidth||me[me.pickerAlignElement].offsetWidth;// Always focus the picker.
_get2(_getPrototypeOf2(TextAreaField.prototype),"showPicker",this).call(this,true);}},{key:"focusPicker",value:function focusPicker(){this.input.focus();}},{key:"onPickerKeyDown",value:function onPickerKeyDown(keyEvent){var me=this,realInput=me.input;switch(keyEvent.key.trim()||keyEvent.code){case'Escape':// TODO: revert value?
me.picker.hide();return;case'Enter':if(keyEvent.ctrlKey){me.syncInputFieldValue();me.picker.hide();}break;}// Super's onPickerKeyDown fires through this.input, so avoid infinite recursion
// by redirecting it through the displayElement.
me.input=me.displayElement;var result=_get2(_getPrototypeOf2(TextAreaField.prototype),"onPickerKeyDown",this).call(this,keyEvent);me.input=realInput;return result;}},{key:"syncInputFieldValue",value:function syncInputFieldValue(){if(this.displayElement){this.displayElement.value=this.inputValue;}_get2(_getPrototypeOf2(TextAreaField.prototype),"syncInputFieldValue",this).call(this);}},{key:"focusElement",get:function get(){return this.inline||this._picker&&this._picker.isVisible?this.input:this.displayElement;}},{key:"value",set:function set(value){_set(_getPrototypeOf2(TextAreaField.prototype),"value",value==null?'':value,this,true);},get:function get(){return _get2(_getPrototypeOf2(TextAreaField.prototype),"value",this);}},{key:"inline",set:function set(inline){this._inline=inline;if(!inline&&!this.triggers){this.triggers={};}},get:function get(){return this._inline;}},{key:"triggers",set:function set(triggers){if(!this.inline){(triggers||(triggers={})).expand={cls:'b-icon-picker',handler:'onTriggerClick'};}_set(_getPrototypeOf2(TextAreaField.prototype),"triggers",triggers,this,true);},get:function get(){return _get2(_getPrototypeOf2(TextAreaField.prototype),"triggers",this);}},{key:"picker",get:function get(){if(!this._picker){this.picker=true;}return this._picker;},set:function set(picker){var me=this;if(me._picker){me._picker.destroy();}// Allow configuring pickerWidth in one go. Setting `picker = { width : 300 }` will otherwise be overridden by
// pickerWidth or fields width.
if(picker.width){me.pickerWidth=picker.width;}me._picker=new Widget(ObjectHelper.merge({cls:'b-textareafield-picker',owner:me,floating:true,scrollAction:'realign',forElement:me[me.pickerAlignElement],align:{align:'t-b',axisLock:true,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]},html:"<textarea id=\"".concat(me.id+'_input',"\" style=\"resize:").concat(me.resize,"\">").concat(me.value,"</textarea>"),autoShow:false},picker));var input=me.input=me.picker.element.querySelector("#".concat(me.id,"_input"));me.inputListenerRemover=EventHelper.on({element:input,thisObj:me,focus:'internalOnInputFocus',change:'internalOnChange',input:'internalOnInput',keydown:'internalOnKeyPress',keypress:'internalOnKeyPress',keyup:'internalOnKeyPress'});}}],[{key:"defaultConfig",get:function get(){return{triggers:null,// Override PickerField. We don't have a trigger by default
/**
             * Configure as `false` to have the field render as a non-editable picker field which
             * shows a `<textarea>` input when expanded.
             * @config {Boolean}
             * @default
             */inline:true,/**
             * The resize style to apply to the `<textarea>` element.
             * @config {String}
             * @default
             */resize:'none'};}}]);return TextAreaField;}(PickerField);exports.TextAreaField=TextAreaField;TextAreaField._$name='TextAreaField';BryntumWidgetAdapterRegister.register('textareafield',TextAreaField);BryntumWidgetAdapterRegister.register('textarea',TextAreaField);/**
 * @module Common/widget/TimePicker
 */ /**
 * A Popup which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.
 * Fires timeChange event upon user changes time.
 *
 * This class is not intended for use in applications. It is used internally by the
 * {@link Common.widget.TimeField} class.
 *
 * @classType timepicker
 * @private
 */var TimePicker=/*#__PURE__*/function(_Popup3){_inherits2(TimePicker,_Popup3);function TimePicker(){_classCallCheck2(this,TimePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimePicker).apply(this,arguments));}_createClass2(TimePicker,[{key:"construct",//endregion
//region Init
/**
     * Fires when a time is changed.
     * @event timeChange
     * @param {Date} time The selected time.
     */value:function construct(config){var me=this;_get2(_getPrototypeOf2(TimePicker.prototype),"construct",this).call(this,config);me._pm=false;me.fieldHours.on('change',me.onFieldChange,me);me.fieldMinutes.on('change',me.onFieldChange,me);me.buttonAM.on('click',me.onButtonAMClick,me);me.buttonPM.on('click',me.onButtonPMClick,me);EventHelper.on({element:me.element,keydown:'onPickerKeyDown',thisObj:me});EventHelper.on({element:me.fieldHours.element,keydown:'onPickerKeyDown',thisObj:me});EventHelper.on({element:me.fieldMinutes.element,keydown:'onPickerKeyDown',thisObj:me});me.refresh();}//endregion
//region Event listeners
},{key:"onFieldChange",value:function onFieldChange(){var me=this;if(me._time){me.value=me.pickerToTime();}}},{key:"onButtonAMClick",value:function onButtonAMClick(){var me=this;me._pm=false;if(me._time){me.value=me.pickerToTime();}}},{key:"onButtonPMClick",value:function onButtonPMClick(){var me=this;me._pm=true;if(me._time){me.value=me.pickerToTime();}}},{key:"onPickerKeyDown",value:function onPickerKeyDown(keyEvent){var me=this,keyName=keyEvent.key&&keyEvent.key.trim()||keyEvent.code;switch(keyName){case'Escape':// Support for undefined initial time
me.triggerTimeChange(me._initialValue);me.hide();keyEvent.preventDefault();break;case'Enter':me.value=me.pickerToTime();me.hide();keyEvent.preventDefault();break;}}//endregion
//region Internal functions
},{key:"pickerToTime",value:function pickerToTime(){var me=this,pm=me._pm;var hours=me.fieldHours.value,newValue=new Date(me._time);if(!me._is24Hour){if(pm&&hours<12)hours=hours+12;if(!pm&&hours===12)hours=0;}newValue.setHours(hours);newValue.setMinutes(me.fieldMinutes.value);if(me._min){newValue=DateHelper.max(me._min,newValue);}if(me._max){newValue=DateHelper.min(me._max,newValue);}return newValue;}},{key:"triggerTimeChange",value:function triggerTimeChange(time){this.trigger('timeChange',{time:time});}//endregion
//region Getters / Setters
/**
     * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"refresh",//endregion
//region Display
value:function refresh(){var me=this;if(!me.isConfiguring){var time=me._time,is24=me._is24Hour,hours=time.getHours(),pm=me._pm=hours>=12,fieldHours=me.fieldHours;me.element.classList[is24?'add':'remove']('b-24h');fieldHours.min=is24?0:1;fieldHours.max=is24?23:12;fieldHours.value=is24?hours:hours%12||12;me.fieldMinutes.value=time.getMinutes();me.buttonAM.pressed=!pm;me.buttonPM.pressed=pm;me.buttonAM.hidden=me.buttonPM.hidden=is24;}}//endregion
},{key:"value",set:function set(newTime){var me=this;var changed=false;if(!newTime||!me._time){me._time=TimePicker.defaultConfig.value;changed=true;}else if(newTime.getTime()!==me._time.getTime()){me._time=newTime;changed=true;}if(changed){if(me.isVisible){me.triggerTimeChange(me.value);}me.refresh();}},get:function get(){return this._time;}/**
     * Get/Set format for time displayed in field (see Common.helper.DateHelper#format for formatting options)
     * @property {String}
     */},{key:"format",set:function set(value){var me=this;me._format=value;me._is24Hour=DateHelper.is24HourFormat(me._format);me.refresh();},get:function get(){return this._format;}/**
     * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"min",set:function set(value){this._min=value;},get:function get(){return this._min;}/**
     * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"max",set:function set(value){this._max=value;},get:function get(){return this._max;}/**
     * Get/set initial value and value, which can be a Date or a string. If a string is specified,
     * it will be converted using the specified {@link #config-format}. Initial value is restored on Escape click
     * @property {Date|String}
     */},{key:"initialValue",set:function set(value){this.value=value;this._initialValue=value;},get:function get(){return this._initialValue;}//endregion
//region Internal widgets getters
},{key:"buttonAM",get:function get(){return this.widgetMap.buttonAM;}},{key:"buttonPM",get:function get(){return this.widgetMap.buttonPM;}},{key:"fieldHours",get:function get(){return this.widgetMap.fieldHours;}},{key:"fieldMinutes",get:function get(){return this.widgetMap.fieldMinutes;}}],[{key:"defaultConfig",//region Config
get:function get(){return{items:[{type:'number',ref:'fieldHours',min:0,max:23},{html:'<label>:</label>'},{type:'number',ref:'fieldMinutes',min:0,max:59},{type:'button',text:'AM',toggleGroup:'am-pm',ref:'buttonAM',cls:'b-blue'},{type:'button',text:'PM',toggleGroup:'am-pm',ref:'buttonPM',cls:'b-blue'}],float:'1',autoShow:false,trapFocus:true,/**
             * Default time value
             * @config {Date}
             */value:DateHelper.getTime(0),/**
             * Time format. Used to set appropriate 12/24 hour format to display.
             * See Common.helper.DateHelper#format for formatting options.
             * @config {String}
             */format:null};}}]);return TimePicker;}(Popup);exports.TimePicker=TimePicker;TimePicker._$name='TimePicker';BryntumWidgetAdapterRegister.register('timepicker',TimePicker);//TODO: picker icon (clock) should be clock that shows actual time
/**
 * @module Common/widget/TimeField
 */ /**
 * Time field widget (text field + time picker).
 *
 * @extends Common/widget/PickerField
 *
 * @example
 * let field = new TimeField({
 *   format: 'HH'
 * });
 *
 * @classType timefield
 * @externalexample widget/TimeField.js
 */var TimeField=/*#__PURE__*/function(_PickerField4){_inherits2(TimeField,_PickerField4);function TimeField(){_classCallCheck2(this,TimeField);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeField).apply(this,arguments));}_createClass2(TimeField,[{key:"onBackClick",//endregion
//region Click listeners
value:function onBackClick(){var me=this,min=me.min;if(!me.readOnly&&me.value){var newValue=DateHelper.add(me.value,-1*me._step.magnitude,me._step.unit);if(!min||min.getTime()<=newValue){me._isUserAction=true;me.value=newValue;me._isUserAction=false;}}}},{key:"onForwardClick",value:function onForwardClick(){var me=this,max=me.max;if(!me.readOnly&&me.value){var newValue=DateHelper.add(me.value,me._step.magnitude,me._step.unit);if(!max||max.getTime()>=newValue){me._isUserAction=true;me.value=newValue;me._isUserAction=false;}}}//endregion
// region Validation
},{key:"hasChanged",value:function hasChanged(oldValue,newValue){if(oldValue&&oldValue.getTime&&newValue&&newValue.getTime){return oldValue.getTime()!==newValue.getTime();}return _get2(_getPrototypeOf2(TimeField.prototype),"hasChanged",this).call(this,oldValue,newValue);}//endregion
//region Toggle picker
/**
     * Show picker
     */},{key:"showPicker",value:function showPicker(focusPicker){var me=this,picker=me.picker;picker.initialValue=me.value;picker.format=me.format;picker.maxTime=me.max;picker.minTime=me.min;// Show valid time from picker while editor has undefined value
me.value=picker.value;_get2(_getPrototypeOf2(TimeField.prototype),"showPicker",this).call(this,focusPicker);}},{key:"onPickerShow",value:function onPickerShow(){var me=this;_get2(_getPrototypeOf2(TimeField.prototype),"onPickerShow",this).call(this);// Remove PickerField key listener
me.pickerKeyDownRemover&&me.pickerKeyDownRemover();}/**
     * Focus time picker
     */},{key:"focusPicker",value:function focusPicker(){this.picker.focus();}//endregion
//region Getters/setters
},{key:"transformTimeValue",value:function transformTimeValue(value){if(value!=null){if(!(value.constructor.name==='Date')){if(typeof value==='string'){value=DateHelper.parse(value,this.format);}else{value=new Date(value);}}// We insist on a *valid* Time as the value.
// An invalid Date object returns NaN as its valueof().
if(value&&value.constructor.name==='Date'&&!isNaN(value.valueOf())){// Clear date part back to zero so that all we have is the time part of the epoch.
value=DateHelper.clone(value);value.setFullYear(1970,0,1);return value;}}return null;}/**
     * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"updateLocalization",//endregion
//region Localization
value:function updateLocalization(){_get2(_getPrototypeOf2(TimeField.prototype),"updateLocalization",this).call(this);this.syncInputFieldValue();}//endregion
},{key:"picker",//endregion
//region Init & destroy
get:function get(){if(!this._picker){this.picker=true;}return this._picker;},set:function set(picker){var me=this;if(me._picker){me._picker.destroy();}me._picker=new TimePicker(Object.assign({owner:me,floating:true,forElement:me[me.pickerAlignElement],align:{align:'t0-b0',axisLock:true,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]},value:me.value,format:me.format,onTimeChange:function onTimeChange(_ref55){var time=_ref55.time;me._isUserAction=true;me.value=time;me._isUserAction=false;}},picker));}},{key:"isValid",get:function get(){var me=this;me.clearError('minimumValueViolation',true);me.clearError('maximumValueViolation',true);var value=me.value;if(value){value=value.getTime();if(me._min&&me._min.getTime()>value){me.setError('minimumValueViolation',true);return false;}if(me._max&&me._max.getTime()<value){me.setError('maximumValueViolation',true);return false;}}return _get2(_getPrototypeOf2(TimeField.prototype),"isValid",this);}},{key:"min",set:function set(value){var me=this;me._min=me.transformTimeValue(value);me.input&&(me.input.min=me._min);me.updateInvalid();},get:function get(){return this._min;}/**
     * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"max",set:function set(value){var me=this;me._max=me.transformTimeValue(value);me.input&&(me.input.max=me._max);me.updateInvalid();},get:function get(){return this._max;}/**
     * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the
     * specified {@link #config-format}
     * @property {Date|String}
     */},{key:"value",set:function set(value){var me=this,oldValue=me.value,newValue=me.transformTimeValue(value);// A value we could not parse
if(value&&!newValue){// setError uses localization
me.setError('invalidTime');return;}me.clearError('invalidTime');// Reject non-change
if(!me.hasChanged(oldValue,newValue)){return;}// This makes to clock icon show correct time
if(me.triggers.expand&&newValue){me.triggers.expand.element.firstElementChild.style.animationDelay=-((newValue.getHours()*60+newValue.getMinutes())/10)+'s';}_set(_getPrototypeOf2(TimeField.prototype),"value",newValue,this,true);},get:function get(){return _get2(_getPrototypeOf2(TimeField.prototype),"value",this);}/**
     *  The `step` property may be set in Object form specifying two properties,
     * `magnitude`, a Number, and `unit`, a String.
     *
     * If a Number is passed, the steps's current unit is used and just the magnitude is changed.
     *
     * If a String is passed, it is parsed in accordance with (see {@link Common.helper.DateHelper#function-format-static}.
     * The string is taken to be the numeric magnitude then an abbreviation, or name of the unit.
     *
     * Upon read, the value is always returned in object form containing `magnitude` and `unit`.
     * @property {String|Number|Object}
     * */},{key:"step",set:function set(value){var me=this;if(typeof value==='number'){value={magnitude:value,unit:me._step.unit};}else if(_typeof(value)!=='object'){value=DateHelper.parseDuration(value);}if(value&&value.magnitude&&value.unit){value.magnitude=Math.abs(value.magnitude);me._step=value;me.updateInvalid();}},get:function get(){return this._step;}/**
     * Get/Set format for time displayed in field (see {@link Common.helper.DateHelper#function-format-static} for formatting options)
     * @property {String}
     */},{key:"format",set:function set(value){var me=this;me._format=value;me.syncInputFieldValue();},get:function get(){return this._format;}},{key:"inputValue",get:function get(){return DateHelper.format(this.value,this.format);}}],[{key:"defaultConfig",//region Config
get:function get(){var _this28=this;return{/**
             * Format for date displayed in field (see Common.helper.DateHelper#function-format-static for formatting options)
             * @config {String}
             * @default
             */format:'LT',triggers:{back:{cls:'b-icon b-icon-angle-left',handler:'onBackClick',align:'start'},expand:{template:function template(){return"<div class=\"b-align-".concat(_this28.align||'end',"\"><div class=\"b-icon-clock-live\"></div></div>");},handler:'onTriggerClick',align:'end'},forward:{cls:'b-icon b-icon-angle-right',handler:'onForwardClick',align:'end'}},/**
             * Min time value
             * @config {String|Date}
             */min:null,/**
             * Max time value
             * @config {String|Date}
             */max:null,/**
             * Time increment duration value. Defaults to 5 minutes.
             * The value is taken to be a string consisting of the numeric magnitude and the units.
             * The units may be a recognised unit abbreviation of this locale or the full local unit name.
             * For example `"10m"` or `"5min"` or `"2 hours"`

             * @config {String}
             */step:'5m'};}}]);return TimeField;}(PickerField);exports.TimeField=TimeField;TimeField._$name='TimeField';BryntumWidgetAdapterRegister.register('timefield',TimeField);BryntumWidgetAdapterRegister.register('time',TimeField);/**
 * @module Common/adapter/widget/BryntumWidgetAdapter
 */ /**
 * Adapter that allows {@link Common.helper.WidgetHelper} to use Bryntums widgets.
 * Not to be called directly.
 * @example
 * WidgetHelper.adapter = BryntumWidgetAdapter;
 */var BryntumWidgetAdapter=/*#__PURE__*/function(){function BryntumWidgetAdapter(){_classCallCheck2(this,BryntumWidgetAdapter);}_createClass2(BryntumWidgetAdapter,[{key:"createWidget",// region Create, insert, append
value:function createWidget(config){return BryntumWidgetAdapterRegister.createWidget(config.type,config);}},{key:"getClass",value:function getClass(type){return BryntumWidgetAdapterRegister.getClass(type);}},{key:"appendWidget",value:function appendWidget(config){return this.createWidget(config);}},{key:"appendWidgets",value:function appendWidgets(configArray,config){var _this29=this;// Prototype chained objects may be passed, so use ObjectHelper.
return configArray.map(function(item){return _this29.appendWidget(ObjectHelper.assign({},config||{},item));});}//endregion
//region Window & popup
},{key:"openPopup",value:function openPopup(element,config){// Prototype chained objects may be passed, so use ObjectHelper.
return new Popup(ObjectHelper.assign({forElement:element},typeof config==='string'?{html:config}:config));}//endregion
//region Menu
},{key:"showContextMenu",value:function showContextMenu(element,config){var me=this;if(me.currentContextMenu){me.currentContextMenu.destroy();}if(element instanceof HTMLElement){config.forElement=element;}else if(Array.isArray(element)){config.forElement={target:_construct(Point,_toConsumableArray(element))};}else if(element instanceof Point){config.forElement={target:element};}me.currentContextMenu=new Menu(config);me.currentContextMenu.on('destroy',function(){me.currentContextMenu=null;});return me.currentContextMenu;}//endregion
//region Tooltip
},{key:"attachTooltip",value:function attachTooltip(element,configOrText){if(typeof configOrText==='string')configOrText={html:configOrText};// TODO: refactor this
// eslint-disable-next-line no-new
new Tooltip(Object.assign({forElement:element},configOrText));return element;}},{key:"hasTooltipAttached",value:function hasTooltipAttached(element){return Tooltip.hasTooltipAttached(element);}},{key:"destroyTooltipAttached",value:function destroyTooltipAttached(element){return Tooltip.destroyTooltipAttached(element);}//endregion
//region Mask
},{key:"mask",value:function mask(config){var text=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Loading';if(config){// Config object normalization
if(config instanceof HTMLElement){config={element:config,text:text};}return Mask.mask(config,config.element);}}},{key:"unmask",value:function unmask(element){var close=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(element.mask){if(close){element.mask.close();}else{element.mask.hide();}}}//endregion
//region Toast
},{key:"toast",value:function toast(msg){return Toast.show(msg);}//endregion
//region Style
// moved from WidgetHelper to avoid circular reference
},{key:"defaultStyle",set:function set(style){this._defaultStyle=style;},get:function get(){return this._defaultStyle;}//endregion
}]);return BryntumWidgetAdapter;}();exports.BryntumWidgetAdapter=BryntumWidgetAdapter;if(!WidgetHelper._adapter)WidgetHelper.adapter=BryntumWidgetAdapter;BryntumWidgetAdapter._$name='BryntumWidgetAdapter';/**
 * @module Common/data/AjaxStore
 */var processParamEntry=function processParamEntry(paramArray,entry){if(Array.isArray(entry[1])){entry[1].forEach(function(value){return paramArray.push(entry[0]+'='+value);});}else{paramArray.push(entry[0]+'='+entry[1]);}return paramArray;},immediatePromise$2=new Promise(function(resolve){return resolve();});/**
 * Store that does CRUD using Ajax.
 *
 * <h3>Create</h3>
 * Posts array of JSON data for newly added records to {@link #config-createUrl}, expects response containing an array of JSON objects
 * in same order with id set (uses Model#idField as id).
 *
 * <h3>Read</h3>
 * Reads array of JSON data from the data packet returned from the {@link #config-readUrl}. Unique id for each row is required.
 * By default looks in field 'id' but can be configured by setting {@link Common.data.Model#property-idField-static}.
 *
 * <h3>Update</h3>
 * Posts array of JSON data for newly modified records to {@link #config-updateUrl}.
 *
 * <h3>Destroy</h3>
 * Posts to {@link #config-deleteUrl} with removed records ids (for example id=1,4,7).
 *
 * @example
 * new AjaxStore({
 *   createUrl  : 'php/create',
 *   readUrl    : 'php/read',
 *   updateUrl  : 'php/update',
 *   deleteUrl  : 'php/delete',
 *   modelClass : Customer
 * });
 *
 * @extends Common/data/Store
 */var AjaxStore=/*#__PURE__*/function(_Store){_inherits2(AjaxStore,_Store);function AjaxStore(){_classCallCheck2(this,AjaxStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(AjaxStore).apply(this,arguments));}_createClass2(AjaxStore,[{key:"afterConstruct",/**
     * Url to post newly created records to.
     *
     * The response must be in the form:
     *
     *     {
     *         "success": true,
     *         "data": [{
     *             "id": 0, "name": "General Motors"
     *         }, {
     *             "id": 1, "name": "Apple"
     *         }]
     *     }
     *
     * Just the array of data may be returned, however that precludes the
     * orderly handling of errors encountered at the server.
     *
     * If the server encountered an error, the packet would look like this:
     *
     *     {
     *         "success": false,
     *         "message": "Some kind of database error"
     *     }
     *
     * And that packet would be available in the {@link #event-exception} handler
     * in the `response` property of the event.
     *
     * The `success` property may be ommitted, it defaults to `true`.
     *
     * @config {String} createUrl
     * @category CRUD
     */ /**
     * Url to read data from.
     *
     * The response must be in the form:
     *
     *     {
     *         "success": true,
     *         "data": [{
     *             "id": 0, "name": "General Motors"
     *         }, {
     *             "id": 1, "name": "Apple"
     *         }]
     *     }
     *
     * Just the array of data may be returned, however that precludes the
     * orderly handling of errors encountered at the server.
     *
     * If the server encountered an error, the packet would look like this:
     *
     *     {
     *         "success": false,
     *         "message": "Some kind of database error"
     *     }
     *
     * And that packet would be available in the {@link #event-exception} handler
     * in the `response` property of the event.
     *
     * The `success` property may be omitted, it defaults to `true`.
     *
     * @config {String} readUrl
     * @category CRUD
     */ /**
     * Url to post record modifications to.
     *
     * The response must be in the form:
     *
     *     {
     *         "success": true,
     *         "data": [{
     *             "id": 0, "name": "General Motors"
     *         }, {
     *             "id": 1, "name": "Apple"
     *         }]
     *     }
     *
     * Just the array of data may be returned, however that precludes the
     * orderly handling of errors encountered at the server.
     *
     * If the server encountered an error, the packet would look like this:
     *
     *     {
     *         "success": false,
     *         "message": "Some kind of database error"
     *     }
     *
     * And that packet would be available in the {@link #event-exception} handler
     * in the `response` property of the event.
     *
     * The `success` property may be ommitted, it defaults to `true`.
     *
     * @config {String} updateUrl
     * @category CRUD
     */ /**
     * Url for destroying records.
     *
     * The response must be in the form:
     *
     *     {
     *         "success": true
     *     }
     *
     * If the server encountered an error, the packet would look like this:
     *
     *     {
     *         "success": false,
     *         "message": "Some kind of database error"
     *     }
     *
     * And that packet would be available in the {@link #event-exception} handler
     * in the `response` property of the event.
     *
     * The `success` property may be ommitted, it defaults to `true`.
     *
     * @config {String} deleteUrl
     * @category CRUD
     */ /**
     * True to initiate a load when the store is instantiated
     * @config {Boolean} autoLoad
     * @category Common
     */ //endregion
value:function afterConstruct(config){_get2(_getPrototypeOf2(AjaxStore.prototype),"afterConstruct",this).call(this,config);if(this.autoLoad){this.load().catch(function(e){});}}/**
     * Returns true if the Store is currently loading
     * @property {Boolean}
     * @readonly
     * @category CRUD
     */},{key:"buildQueryString",value:function buildQueryString(){for(var _len37=arguments.length,paramObjects=new Array(_len37),_key37=0;_key37<_len37;_key37++){paramObjects[_key37]=arguments[_key37];}var queryString=Object.entries(Object.assign.apply(Object,[{}].concat(paramObjects))).reduce(processParamEntry,[]).join('&');return queryString?'?'+queryString:'';}},{key:"internalLoad",value:function internalLoad(params,eventName,successFn){var me=this,allParams=Object.assign({},me.params,params),event={action:'read'+eventName,params:allParams},result=me.readUrl?new Promise(function(resolve,reject){if(me.trigger('beforeLoad'+eventName,event)===false){return reject(false);// eslint-disable-line
}me._isLoading=true;// This may look redundant, but it allows for two levels of event listening.
// Granular, where the observer observes only the events of interest, and
// catch-all, where the observer is interested in all requests.
me.trigger("load".concat(eventName,"Start"),event);me.trigger('beforeRequest',event);AjaxHelper.get(me.readUrl+me.buildQueryString(allParams),Object.assign({headers:me.headers,parseJson:true},me.fetchOptions)).then(function(response){var data=response.parsedJson,isArray=Array.isArray(data),success=isArray||data&&data.success!==false;me._isLoading=false;event.response=response;event.json=data;if(success){event.data=isArray?data:data[me.responseDataProperty];successFn(event);me.trigger('load'+eventName,event);resolve(event);}else{event.exception=true;event.exceptionType='server';me.trigger('exception',event);reject(event);}// finally
me.trigger('afterRequest',event);}).catch(function(responseOrError){me._isLoading=false;event.exception=true;if(responseOrError instanceof Response){event.exceptionType=responseOrError.ok?'server':'network';event.response=responseOrError;event.error=responseOrError.error;}else{event.exceptionType='server';event.error=responseOrError;}me.trigger('exception',event);reject(event);// finally
me.trigger('afterRequest',event);});}):null;return result;}/**
     * Load data from the {@link #config-readUrl}.
     * @param {Object} params A hash of parameters to append to querystring (will also append Store#params)
     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is
     * vetoed by a {@link #event-beforeLoad} handler, or if an {@link #event-exception} is detected.
     * The resolved function is passed the event object passed to any event handlers.
     * The rejected function is passed the {@link #event-exception} event if an exception occurred,
     * or `false` if the load was vetoed by a {@link #event-beforeLoad} handler.
     * @fires beforeLoad
     * @fires loadStart
     * @fires beforeRequest
     * @fires load
     * @fires exception
     * @fires afterRequest
     * @category CRUD
     */},{key:"load",value:function load(params){var me=this;return me.internalLoad(params,'',function(event){// The set Data setter will trigger the refresh event with { action: 'dataset' }
me.data=event.data;});}/**
     * Loads children into specified parent record. Parent records id is sent as a param (param name configured with
     * {@link #config-parentIdParamName}.
     * @param {Common.data.Model} parentRecord Parent record
     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is
     * vetoed by a {@link #event-beforeLoadChildren} handler, or if an {@link #event-exception} is detected.
     * The resolved function is passed the event object passed to any event handlers.
     * The rejected function is passed the {@link #event-exception} event if an exception occurred,
     * or `false` if the load was vetoed by a {@link #event-beforeLoadChildren} handler.
     * @fires beforeLoadChildren
     * @fires loadChildrenStart
     * @fires beforeRequest
     * @fires loadChildren
     * @fires exception
     * @fires afterRequest
     * @category CRUD
     */},{key:"loadChildren",value:function(){var _loadChildren2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(parentRecord){var me;return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:me=this;return _context2.abrupt("return",me.internalLoad(_defineProperty({},me.parentIdParamName,parentRecord.id),'Children',function(event){event.parentRecord=parentRecord;// Append received children
parentRecord.data[parentRecord.constructor.childrenField]=event.data;parentRecord.processChildren(parentRecord.stores);}));case 2:case"end":return _context2.stop();}}},_callee2,this);}));function loadChildren(_x12){return _loadChildren2.apply(this,arguments);}return loadChildren;}()/**
     * Commits all changes (added, modified and removed) using corresponding urls ({@link #config-createUrl},
     * {@link #config-updateUrl} and {@link #config-deleteUrl})
     * @fires beforeCommit
     * @returns {Promise} A Promise which is resolved only if all pending changes (Create, Update and Delete) successfully resolve.
     * Both the resolve and reject functions are passed a `commitState` object which is stored the {@link #event-afterRequest}
     * event for each request. Each event contains the `exception`, `request` and `response` properties eg:
     *
     *     {
     *          success: true,                  // If *all* commits succeeded
     *          changes: {
     *              added: [records...],
     *              modified: [records...],
     *              removed: [records...],
     *          },
     *          added: {
     *              source: theStore,
     *              exception: true,            // Only if the add request triggered an exception
     *              exceptionType: 'server'/'network', // Only if the add request triggered an exception
     *              response: Response,
     *              json: parsedResponseObject
     *          },
     *          modified: {},                   // Same format as added
     *          removed: {}                     // Same format as added
     *     }
     *
     * If there were no pending changes, the resolve and reject functions are passed no parameters.
     *
     * Returns `false` if a commit operation is already in progress.
     * The resolved function is passed the event object passed to any event handlers.
     * The rejected function is passed the {@link #event-exception} event if an exception occurred,
     * @category CRUD
     */},{key:"commit",value:function commit(){var me=this,changes=me.changes,allPromises=[];// not allowing additional commits while in progress
// TODO: should queue
if(me.commitPromise)return false;// No outstanding changes, return a Promise that resolves immediately.
if(!changes){return immediatePromise$2;}// Flag all affected records as being committed
[].concat(_toConsumableArray(changes.added),_toConsumableArray(changes.modified),_toConsumableArray(changes.removed)).forEach(function(record){return record.meta.committing=true;});// TODO: do we need a general way of disabling plugins?
if(!me.disabled&&me.trigger('beforeCommit',{changes:changes})!==false){var commitState={action:'commit',exception:false,changes:changes},p=me.commitRemoved(commitState);if(p){allPromises.push(p);}p=me.commitAdded(commitState);if(p){allPromises.push(p);}p=me.commitModified(commitState);if(p){allPromises.push(p);}// If there were no urls configured, behave as a local store
if(!allPromises.length){me.modified.forEach(function(r){return r.clearChanges(false);});me.modified.clear();me.added.forEach(function(r){return r.clearChanges(false);});me.added.clear();me.removed.clear();me.trigger('commit',{changes:changes});return immediatePromise$2;}// The Promises from the commit methods all resolve whether the request
// succeeded or not. They each contribute their afterrequest event to the
// commitState which can be used to detect overall success or failure
// and granular inspection of which operations succeeded or failed.
// If there's only one operation, wait for it.
// If there's more than one operation, we have to wait for allPromises to resolve.
p=allPromises.length===1?allPromises[0]:Promise.all(allPromises);return me.commitPromise=new Promise(function(resolve,reject){p.then(function(){me.commitPromise=null;if(commitState.exception){me.trigger('exception',commitState);reject(commitState);}else{me.trigger('commit',{changes:changes});resolve(commitState);}}).catch(function(){me.commitPromise=null;reject(commitState);});});}}// TODO: need a way to abort commits
/**
     * Commits added records by posting to {@link #config-createUrl}.
     * Server should return a JSON object with a 'success' property indicating whether the operation was succesful.
     * @param {Object} commitState An object into which is added a `delete` property being the {@link #event-afterRequest} event.
     * @returns {Promise} If there are added records, a Promise which will be resolved whether the commit
     * succeeds or fails. The resulting event is placed into the `add` property of the passed `commitState`
     * parameter. If there are no added records, `null` is returned.
     * The resolved function is passed the event object passed to any event handlers.
     * @private
     * @fires beforeRequest
     * @fires commitAdded
     * @fires refresh
     * @fires exception
     * @fires afterRequest
     */},{key:"commitAdded",value:function commitAdded(commitState){var me=this,added=me.added,event={action:'create',params:me.params},result=added.count&&me.createUrl?new Promise(function(resolve){var toAdd=added.values.map(function(r){return r.persistableData;});commitState.create=event;me.trigger('beforeRequest',event);var dataToSend={data:toAdd};if(me.sendAsFormData){var formData=new FormData();formData.append('data',JSON.stringify(toAdd));dataToSend=formData;}AjaxHelper.post(me.createUrl+me.buildQueryString(me.params),dataToSend,Object.assign({headers:me.headers,parseJson:true},me.fetchOptions)).then(function(response){var data=response.parsedJson,isArray=Array.isArray(data),success=isArray||data&&data.success!==false;event.json=data;event.response=response;if(success){// Copy updated fields and updated ID back into records
me.processReturnedData(added.values,isArray?data:data[me.responseDataProperty]);me.added.forEach(function(r){return r.clearChanges(false);});added.clear();me.trigger('commitAdded');// We must signal a full refresh because any number of records could have recieved any number of field updates
// back from the server, so a refresh is more efficient than picking through the received updates.
me.trigger('refresh',event);resolve(commitState);}else{// Clear committing flag
added.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;commitState.exceptionType=event.exceptionType='server';me.trigger('exception',event);resolve(commitState);}// finally
me.trigger('afterRequest',event);}).catch(function(responseOrError){// Clear committing flag
added.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;if(responseOrError instanceof Response){event.exceptionType=responseOrError.ok?'server':'network';event.response=responseOrError;event.error=responseOrError.error;}else{event.exceptionType='server';event.error=responseOrError;}me.trigger('exception',event);resolve(commitState);// finally
me.trigger('afterRequest',event);});}):null;return result;}/**
     * Commits modified records by posting to {@link #config-updateUrl}.
     * Server should return a JSON object with a 'success' property indicating whether the operation was succesful.
     * @param {Object} commitState An object into which is added a `delete` property being the {@link #event-afterRequest} event.
     * @returns {Promise} If there are added records, a Promise which will be resolved whether the commit
     * succeeds or fails. The resulting event is placed into the `update` property of the passed `commitState`
     * parameter. If there are no added records, `null` is returned.
     * The resolved function is passed the event object passed to any event handlers.
     * @private
     * @fires beforeRequest
     * @fires commitModified
     * @fires refresh
     * @fires exception
     * @fires afterRequest
     */},{key:"commitModified",value:function commitModified(commitState){var me=this,modified=me.modified,event={action:'update',params:me.params},result=modified.count&&me.updateUrl?new Promise(function(resolve){var modifications=modified.map(function(r){return me.writeAllFields?r.persistableData:r.modifications;});commitState.update=event;me.trigger('beforeRequest',event);var dataToSend={data:modifications};if(me.sendAsFormData){var formData=new FormData();formData.append('data',JSON.stringify(modifications));dataToSend=formData;}AjaxHelper.post(me.updateUrl+me.buildQueryString(me.params),dataToSend,Object.assign({headers:me.headers,parseJson:true},me.fetchOptions)).then(function(response){var data=response.parsedJson,isArray=Array.isArray(data),success=isArray||data&&data.success!==false;event.json=data;event.response=response;if(success){// Copy updated fields and updated ID back into records
me.processReturnedData(me.modified.values,isArray?data:data[me.responseDataProperty],true);// Clear down modified fields cache
modified.forEach(function(r){return r.clearChanges(false);});modified.clear();me.trigger('commitModified');// We must signal a full refresh because any number of records could have recieved any number of field updates
// back from the server, so a refresh is more efficient than picking through the received updates.
me.trigger('refresh',event);resolve(commitState);}else{// Clear committing flag
modified.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;event.exceptionType='server';me.trigger('exception',event);resolve(commitState);}// finally
me.trigger('afterRequest',event);}).catch(function(responseOrError){// Clear committing flag
modified.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;if(responseOrError instanceof Response){event.exceptionType=responseOrError.ok?'server':'network';event.response=responseOrError;event.error=responseOrError.error;}else{event.exceptionType='server';event.error=responseOrError;}me.trigger('exception',event);resolve(commitState);// finally
me.trigger('afterRequest',event);});}):null;return result;}},{key:"processReturnedData",value:function processReturnedData(localRecords,returnedData){var isUpdating=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,Model=me.modelClass,idDataSource=Model.fieldMap.id.dataSource;returnedData.forEach(function(recData,i){// Using syncId to update record's id with no flagging the property as modified.
localRecords[i].syncId(recData[idDataSource]);// When updating, only want to apply the actual changes and not reapply defaults. When adding, also
// apply the defaults
Object.assign(localRecords[i].data,Model.processData(recData,isUpdating));});}/**
     * Commits removed records by posting to {@link #config-deleteUrl}.
     * Server should return a JSON object with a 'success' property indicating whether the operation was succesful.
     * @param {Object} commitState An object into which is added a `delete` property being the {@link #event-afterRequest} event.
     * @returns {Promise} If there are added records, a Promise which will be resolved whether the commit
     * succeeds or fails. The resulting event is placed into the `delete` property of the passed `commitState`
     * parameter. If there are no added records, `null` is returned.
     * The resolved function is passed the event object passed to any event handlers.
     * @private
     * @fires beforerequest
     * @fires commitremoved
     * @fires refresh
     * @fires exception
     * @fires afterrequest
     */},{key:"commitRemoved",value:function commitRemoved(commitState){var me=this,removed=me.removed,event={action:'delete',params:me.params},result=removed.count&&me.deleteUrl?new Promise(function(resolve){commitState.delete=event;me.trigger('beforeRequest',event);var dataToSend={ids:removed.map(function(r){return r.id;})};if(me.sendAsFormData){var formData=new FormData();formData.append('id',JSON.stringify(dataToSend.ids));dataToSend=formData;}AjaxHelper.post(me.deleteUrl+me.buildQueryString(me.params),dataToSend,Object.assign({headers:me.headers,parseJson:true},me.fetchOptions)).then(function(response){var data=response.parsedJson,isArray=Array.isArray(data),success=isArray||data&&data.success!==false;event.json=data;event.response=response;if(success){removed.forEach(function(record){return record.meta.committing=false;});// In case used by other store etc.
removed.clear();me.trigger('commitRemoved');me.trigger('refresh',event);resolve(commitState);}else{// Clear committing flag
removed.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;event.exceptionType='server';me.trigger('exception',event);resolve(commitState);}// finally
me.trigger('afterRequest',event);}).catch(function(responseOrError){// Clear committing flag
removed.forEach(function(r){return r.meta.committing=false;});commitState.exception=event.exception=true;if(responseOrError instanceof Response){event.exceptionType=responseOrError.ok?'server':'network';event.response=responseOrError;event.error=responseOrError.error;}else{event.exceptionType='server';event.error=responseOrError;}me.trigger('exception',event);resolve(commitState);// finally
me.trigger('afterRequest',event);});}):null;return result;}},{key:"isLoading",get:function get(){return this._isLoading;}/**
     * Returns true if the Store is currently committing
     * @property {Boolean}
     * @readonly
     * @category CRUD
     */},{key:"isCommitting",get:function get(){return Boolean(this.commitPromise);}}],[{key:"defaultConfig",// region Events
/**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid response.
     *
     * Note that when a {@link #function-commit} fails, more than one exception event will be triggered. The individual operation,
     * `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit operation will also
     * trigger an `exception` event when all the operations have finished, so if exceptions are going to be handled gracefully,
     * the event's `action` property must be examined, and the constituent operations of the event must be examined.
     * @event exception
     * @param {Common.data.Store} source This Store
     * @param {Boolean} exception `true`
     * @param {String} action Action that failed, `'create'`, `'read'`, `'update'` or `'delete'`. May also be fired
     * with '`commit'` to indicate the failure of an aggregated `create`, `update` and `delete` operation. In this case,
     * the event will contain a property for each operation of the commit named `'create'`, `'update'` and `'delete'`,
     * each containing the individual `exception` events.
     * @param {String} exceptionType The type of failure, `'network'` or `'server'`
     * @param {Response} response the `Response` object
     * @param {Object} json The decoded response object *if the exceptionType is `'server'`*
     */ /**
     * Fired after committing added records
     * @event commitAdded
     * @param {Common.data.Store} source This Store
     */ /**
     * Fired after committing modified records
     * @event commitModified
     * @param {Common.data.Store} source This Store
     */ /**
     * Fired on successful load
     * @event load
     * @param {Common.data.Store} source This Store
     * @param {Object[]} data Data loaded
     * @param {Response} response the `Response` object
     * @param {Object} json The decoded response object.
     */ /**
     * Fired on successful load of remote child nodes for a tree node.
     * @event loadChildren
     * @param {Common.data.Store} source This Store
     * @param {Object[]} data Data loaded
     * @param {Object} json The decoded response object.
     */ /**
     * Fired after committing removed records
     * @event commitRemoved
     * @param {Common.data.Store} source This Store
     */ /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     * @event beforeLoad
     * @param {Common.data.Store} source This Store
     * @param {Object} params An object containing property/name pairs which are the parameters.
     * This may be mutated to affect the parameters used in the Ajax requet.
     */ /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     * @event beforeLoadChildren
     * @param {Common.data.Store} source This Store
     * @param {Object} params An object containing property/name pairs which are the parameters.
     * This may be mutated to affect the parameters used in the Ajax requet.
     */ /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @event loadStart
     * @param {Common.data.Store} source This Store
     * @param {Object} params An object containing property/name pairs which are the parameters.
     * This may be mutated to affect the parameters used in the Ajax requet.
     */ /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     * @event loadChildrenStart
     * @param {Common.data.Store} source This Store
     * @param {Object} params An object containing property/name pairs which are the parameters.
     * This may be mutated to affect the parameters used in the Ajax requet.
     */ /**
     * Fired before any remote request is initiated.
     * @event beforeRequest
     * @param {Common.data.Store} source This Store
     * @param {String} action Action that is making the request, `'create'`, `'read'`, `'update'` or `'delete'`
     */ /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     * @event afterRequest
     * @param {Boolean} exception `true`. *Only present if the request triggered an exception.*
     * @param {String} action Action that has finished, `'create'`, `'read'`, `'update'` or `'delete'`
     * @param {String} exceptionType The type of failure, `'network'` or `'server'`. *Only present if the request triggered an exception.*
     * @param {Response} response The `Response` object
     * @param {Object} json The decoded response object if there was no `'network'` exception.
     */ // endregion
//region Config
get:function get(){return{/**
             * An object containing the HTTP headers to add to each server request issued by this Store.
             * @config {Object}
             * @default
             */headers:null,/**
             * An object containing the Fetch options to pass to each server request issued by this Store. Use this to control if credentials are sent
             * and other options, read more at [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).
             * @config {Object}
             * @default
             */fetchOptions:null,/**
             * Specify `true` to send payloads as form data, `false` to send as regular JSON.
             * @config {Boolean}
             * @default
             */sendAsFormData:false,/**
             * Specify `true` to send all model fields when committing modified records (as opposed to just the modified fields)
             * @config {Boolean}
             * @default
             */writeAllFields:false,/**
             * The name of the HTTP parameter passed to this Store's {@link #config-readUrl} to indicate the node `id` to
             * load when loading child nodes on demand if the node being expanded was created with data containing `children: true`.
             * @config {String}
             * @default
             */parentIdParamName:'id',/**
             * The property name in JSON responses from the server that contains the data for the records
             * ```
             * {
             *   "success" : true,
             *   // The property name used here should match that of 'reponseDataProperty'
             *   "data" : [
             *     ...
             *   ]
             * }
             * ```
             * @config {String}
             * @default
             */responseDataProperty:'data'};}}]);return AjaxStore;}(Store);exports.AjaxStore=AjaxStore;AjaxStore._$name='AjaxStore';/**
 * @module Common/data/DomDataStore
 */ /**
 * Stores data on a dom element (by setting element._domData).
 * Instead of using HTML5:s element.dataset, which turned out to be slow.
 * @private
 */var DomDataStore=/*#__PURE__*/function(){function DomDataStore(){_classCallCheck2(this,DomDataStore);}_createClass2(DomDataStore,null,[{key:"get",/**
     * Get data that is connected to specified element.
     * @param {HTMLElement} element DOM element
     * @param {String} [key] The name of the property in the element data to return;
     * @returns {Object} Data
     */value:function get(element,key){var result=element._domData||(element._domData={});if(key!=null){return result[key];}return result;}/**
     * Set data connected to specified element (completely replacing any existing).
     * To update data, use DomDataStore#assign instead.
     * @param {HTMLElement} element DOM element
     * @param {Object|String} data Data object to set, or property name to set
     * @param {*} [value] If the previous parameter was a property name, this is the value to set.
     */},{key:"set",value:function set(element,data,value){if(arguments.length===3){(element._domData||(element._domData={}))[data]=value;}else{element._domData=data;}}/**
     * Updates data connected to specified element.
     * @param element DOM element
     * @param data Data to assign
     */},{key:"assign",value:function assign(element,data){Object.assign(element._domData||(element._domData={}),data);}}]);return DomDataStore;}();exports.DomDataStore=DomDataStore;DomDataStore._$name='DomDataStore';/**
 * @module Common/data/stm/state/StateBase
 */var throwAbstractMethodCall=function throwAbstractMethodCall(){throw new Error('Abstract method call!');};var throwInvalidMethodCall=function throwInvalidMethodCall(){throw new Error('Method cannot be called at this state!');};/**
 * Abstract class for STM states
 *
 * Every on* method should return a state for the STM which it should switch to
 * or throw an exception that this call at this state is illegal.
 *
 * Interface of this class mirrors interface of {@link Common.data.stm.StateTrackingManager}.
 *
 * @abstract
 */var StateBase=/*#__PURE__*/function(_Base3){_inherits2(StateBase,_Base3);function StateBase(){_classCallCheck2(this,StateBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(StateBase).apply(this,arguments));}_createClass2(StateBase,[{key:"canUndo",value:function canUndo(stm){throwAbstractMethodCall();}},{key:"canRedo",value:function canRedo(stm){throwAbstractMethodCall();}},{key:"onUndo",value:function onUndo(stm){throwAbstractMethodCall();}},{key:"onRedo",value:function onRedo(stm){throwAbstractMethodCall();}},{key:"onStartTransaction",value:function onStartTransaction(stm){throwAbstractMethodCall();}},{key:"onStopTransaction",value:function onStopTransaction(stm){throwAbstractMethodCall();}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(stm){throwAbstractMethodCall();}},{key:"onRejectTransaction",value:function onRejectTransaction(stm){throwAbstractMethodCall();}},{key:"onEnable",value:function onEnable(stm){throwAbstractMethodCall();}},{key:"onDisable",value:function onDisable(stm){throwAbstractMethodCall();}},{key:"onAutoRecordOn",value:function onAutoRecordOn(stm){throwAbstractMethodCall();}},{key:"onAutoRecordOff",value:function onAutoRecordOff(stm){throwAbstractMethodCall();}},{key:"onResetQueue",value:function onResetQueue(stm){throwAbstractMethodCall();}},{key:"onModelUpdate",value:function onModelUpdate(stm){throwAbstractMethodCall();}},{key:"onStoreModelAdd",value:function onStoreModelAdd(stm){throwAbstractMethodCall();}},{key:"onStoreModelInsert",value:function onStoreModelInsert(stm){throwAbstractMethodCall();}},{key:"onStoreModelRemove",value:function onStoreModelRemove(stm){throwAbstractMethodCall();}},{key:"onStoreModelRemoveAll",value:function onStoreModelRemoveAll(stm){throwAbstractMethodCall();}},{key:"onModelInsertChild",value:function onModelInsertChild(stm){throwAbstractMethodCall();}},{key:"onModelRemoveChild",value:function onModelRemoveChild(stm){throwAbstractMethodCall();}}]);return StateBase;}(Base);StateBase._$name='StateBase';/**
 * @module Common/data/stm/Props.js
 * @internal
 */var STATE_PROP=Symbol('STATE_PROP');var STORES_PROP=Symbol('STORES_PROP');var QUEUE_PROP=Symbol('QUEUE_PROP');var POS_PROP=Symbol('POS_PROP');var TRANSACTION_PROP=Symbol('TRANSACTION_PROP');var TRANSACTION_TIMER_PROP=Symbol('TRANSACTION_TIMER_PROP');var AUTO_RECORD_PROP=Symbol('AUTO_RECORD_PROP');var PROPS=Object.freeze([STATE_PROP,STORES_PROP,QUEUE_PROP,POS_PROP,TRANSACTION_PROP,TRANSACTION_TIMER_PROP,AUTO_RECORD_PROP]);/**
 * @module Common/data/stm/state/Registry
 *
 * Provides map of registered STM states.
 *
 * Needed to remove states circular dependency.
 *
 * @internal
 */var registry=new Map();/**
 * Registers STM state class with the given name.
 *
 * @private
 *
 * @param {string} name
 * @param {Common.data.stm.state.StateBase} state
 */var registerStmState=function registerStmState(name,state){registry.set(name,state);};/**
 * Resolves STM state class with the given name.
 *
 * @private
 *
 * @param {string} name
 * @return {Common.data.stm.state.StateBase} state
 */var resolveStmState=function resolveStmState(state){if(typeof state==='string'){state=registry.get(state);}return state;};// UMD/module compatible export
// NOTE: the most compatible way of exporting is:
//       import registry from './Registry.js';
//       { registerStmState, resolveStmState } = registry;
//          or
//       registry.registerStmState(...);
var Registry={registerStmState:registerStmState,resolveStmState:resolveStmState};var resetQueue=function resetQueue(stm,options){var undo=options.undo,redo=options.redo;var newProps;if(undo&&!redo){var _newProps;newProps=(_newProps={},_defineProperty(_newProps,QUEUE_PROP,stm[QUEUE_PROP].slice(stm.position)),_defineProperty(_newProps,POS_PROP,0),_newProps);}else if(redo&&!undo){newProps=_defineProperty({},QUEUE_PROP,stm[QUEUE_PROP].slice(0,stm.position));}else{var _newProps3;newProps=(_newProps3={},_defineProperty(_newProps3,QUEUE_PROP,[]),_defineProperty(_newProps3,POS_PROP,0),_newProps3);}return[newProps,function(){stm.notifyStoresAboutQueueReset(options);}];};/**
 * @module Common/data/stm/state/DisabledState
 */ /**
 * STM disabled state class.
 *
 * @internal
 */var DisabledStateClass=/*#__PURE__*/function(_StateBase){_inherits2(DisabledStateClass,_StateBase);function DisabledStateClass(){_classCallCheck2(this,DisabledStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(DisabledStateClass).apply(this,arguments));}_createClass2(DisabledStateClass,[{key:"canUndo",value:function canUndo(){return false;}},{key:"canRedo",value:function canRedo(){return false;}},{key:"onUndo",value:function onUndo(){throwInvalidMethodCall();}},{key:"onRedo",value:function onRedo(){throwInvalidMethodCall();}},{key:"onEnable",value:function onEnable(stm){return stm.autoRecord?'autoreadystate':'readystate';}},{key:"onDisable",value:function onDisable(){throwInvalidMethodCall();}},{key:"onAutoRecordOn",value:function onAutoRecordOn(){return _defineProperty({},AUTO_RECORD_PROP,true);}},{key:"onAutoRecordOff",value:function onAutoRecordOff(){return _defineProperty({},AUTO_RECORD_PROP,false);}},{key:"onStartTransaction",value:function onStartTransaction(){throwInvalidMethodCall();}},{key:"onStopTransaction",value:function onStopTransaction(){throwInvalidMethodCall();}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(){throwInvalidMethodCall();}},{key:"onRejectTransaction",value:function onRejectTransaction(){throwInvalidMethodCall();}},{key:"onResetQueue",value:function onResetQueue(stm,options){return resetQueue(stm,options);}},{key:"onModelUpdate",value:function onModelUpdate(){}},{key:"onModelInsertChild",value:function onModelInsertChild(){}},{key:"onModelRemoveChild",value:function onModelRemoveChild(){}},{key:"onStoreModelAdd",value:function onStoreModelAdd(){}},{key:"onStoreModelInsert",value:function onStoreModelInsert(){}},{key:"onStoreModelRemove",value:function onStoreModelRemove(){}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){}}]);return DisabledStateClass;}(StateBase);/**
 * STM disabled state.
 *
 * @internal
 */var DisabledState=new DisabledStateClass();Registry.registerStmState('disabledstate',DisabledState);/**
 * @module Common/data/stm/Transaction
 */var ACTION_QUEUE_PROP=Symbol('ACTION_QUEUE_PROP');/**
 * STM transaction class, holds list of actions constituting a transaction.
 *
 * A transaction can be undone and redone. Upon undo all the actions being held
 * are undone in reverse order. Upon redo all the actions being held are redone
 * in forward order.
 */var Transaction=/*#__PURE__*/function(_Base4){_inherits2(Transaction,_Base4);function Transaction(){_classCallCheck2(this,Transaction);return _possibleConstructorReturn2(this,_getPrototypeOf2(Transaction).apply(this,arguments));}_createClass2(Transaction,[{key:"construct",value:function construct(){var _get11;this[ACTION_QUEUE_PROP]=[];for(var _len38=arguments.length,args=new Array(_len38),_key38=0;_key38<_len38;_key38++){args[_key38]=arguments[_key38];}(_get11=_get2(_getPrototypeOf2(Transaction.prototype),"construct",this)).call.apply(_get11,[this].concat(args));}/**
     * Gets transaction's actions queue
     *
     * @property {Common.data.stm.action.ActionBase[]}
     */},{key:"addAction",/**
     * Adds an action to the transaction.
     *
     * @param {Common.data.stm.action.ActionBase|Object} action
     */value:function addAction(action){this[ACTION_QUEUE_PROP].push(action);}/**
     * Undoes actions held
     */},{key:"undo",value:function undo(){var queue=this[ACTION_QUEUE_PROP];for(var i=queue.length-1;i>=0;--i){queue[i].undo();}}/**
     * Redoes actions held
     */},{key:"redo",value:function redo(){var queue=this[ACTION_QUEUE_PROP];for(var i=0,len=queue.length;i<len;++i){queue[i].redo();}}},{key:"defaultConfig",get:function get(){return{/**
             * Transaction title
             *
             * @config {String}
             * @default
             */title:null};}},{key:"queue",get:function get(){return this[ACTION_QUEUE_PROP].slice(0);}/**
     * Gets transaction's actions queue length
     *
     * @property {Number}
     */},{key:"length",get:function get(){return this[ACTION_QUEUE_PROP].length;}}]);return Transaction;}(Base);exports.Transaction=Transaction;Transaction._$name='Transaction';/**
 * @module Common/data/stm/state/ReadyState
 */ /**
 * STM ready state class.
 *
 * @internal
 */var ReadyStateClass=/*#__PURE__*/function(_StateBase2){_inherits2(ReadyStateClass,_StateBase2);function ReadyStateClass(){_classCallCheck2(this,ReadyStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(ReadyStateClass).apply(this,arguments));}_createClass2(ReadyStateClass,[{key:"canUndo",value:function canUndo(stm){//      v
// |*|*|
return 0<stm.position&&stm.position<=stm.length;}},{key:"canRedo",value:function canRedo(stm){//  v
// |*|*|
return 0<=stm.position&&stm.position<stm.length;}},{key:"onUndo",value:function onUndo(stm,steps){var _ref58;var queue=stm[QUEUE_PROP];var curPos=stm.position,newPos=Math.max(0,curPos-steps);var next=function next(){stm.notifyStoresAboutStateRestoringStart();while(curPos!=newPos){queue[--curPos].undo();}return[stm.autoRecord?'autoreadystate':'readystate',function(){stm.notifyStoresAboutStateRestoringStop();}];};return[(_ref58={},_defineProperty(_ref58,STATE_PROP,'restoringstate'),_defineProperty(_ref58,POS_PROP,newPos),_ref58),next];}},{key:"onRedo",value:function onRedo(stm,steps){var _ref59;var queue=stm[QUEUE_PROP];var curPos=stm.position,newPos=Math.min(queue.length,curPos+steps);var next=function next(){stm.notifyStoresAboutStateRestoringStart();do{queue[curPos++].redo();}while(curPos!=newPos);return[stm.autoRecord?'autoreadystate':'readystate',function(){stm.notifyStoresAboutStateRestoringStop();}];};return[(_ref59={},_defineProperty(_ref59,STATE_PROP,'restoringstate'),_defineProperty(_ref59,POS_PROP,newPos),_ref59),next];}},{key:"onEnable",value:function onEnable(){throwInvalidMethodCall();}},{key:"onDisable",value:function onDisable(){return'disabledstate';}},{key:"onAutoRecordOn",value:function onAutoRecordOn(){var _ref60;return _ref60={},_defineProperty(_ref60,STATE_PROP,'autoreadystate'),_defineProperty(_ref60,AUTO_RECORD_PROP,true),_ref60;}},{key:"onAutoRecordOff",value:function onAutoRecordOff(){throwInvalidMethodCall();}},{key:"onStartTransaction",value:function onStartTransaction(stm,title){var _ref61;var transaction=new Transaction({title:title});return[(_ref61={},_defineProperty(_ref61,STATE_PROP,'recordingstate'),_defineProperty(_ref61,TRANSACTION_PROP,transaction),_ref61),function(){stm.notifyStoresAboutStateRecordingStart(transaction);}];}},{key:"onStopTransaction",value:function onStopTransaction(){throwInvalidMethodCall();}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(){throwInvalidMethodCall();}},{key:"onRejectTransaction",value:function onRejectTransaction(){throwInvalidMethodCall();}},{key:"onResetQueue",value:function onResetQueue(stm,options){return resetQueue(stm,options);}},{key:"onModelUpdate",value:function onModelUpdate(){}},{key:"onModelInsertChild",value:function onModelInsertChild(){}},{key:"onModelRemoveChild",value:function onModelRemoveChild(){}},{key:"onStoreModelAdd",value:function onStoreModelAdd(){}},{key:"onStoreModelInsert",value:function onStoreModelInsert(){}},{key:"onStoreModelRemove",value:function onStoreModelRemove(){}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){}}]);return ReadyStateClass;}(StateBase);/**
 * STM ready state.
 *
 * @internal
 */var ReadyState=new ReadyStateClass();Registry.registerStmState('readystate',ReadyState);/**
 * @module Common/data/stm/state/RecordingState
 */ /**
 * STM recording state class.
 *
 * @internal
 */var RecordingStateClass=/*#__PURE__*/function(_StateBase3){_inherits2(RecordingStateClass,_StateBase3);function RecordingStateClass(){_classCallCheck2(this,RecordingStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(RecordingStateClass).apply(this,arguments));}_createClass2(RecordingStateClass,[{key:"canUndo",value:function canUndo(){return false;}},{key:"canRedo",value:function canRedo(){return false;}},{key:"onEnable",value:function onEnable(){}},{key:"onDisable",value:function onDisable(stm){var _ref62;var transaction=stm[TRANSACTION_PROP];stm.notifyStoresAboutStateRecordingStop(transaction,{disabled:true});return _ref62={},_defineProperty(_ref62,STATE_PROP,'disabledstate'),_defineProperty(_ref62,TRANSACTION_PROP,null),_ref62;}},{key:"onAutoRecordOn",value:function onAutoRecordOn(stm){var _ref63;return[(_ref63={},_defineProperty(_ref63,STATE_PROP,'autorecordingstate'),_defineProperty(_ref63,AUTO_RECORD_PROP,true),_ref63),function(){stm[STATE_PROP].onStopTransactionDelayed(stm);}];}},{key:"onAutoRecordOff",value:function onAutoRecordOff(){throwInvalidMethodCall();}},{key:"onStartTransaction",value:function onStartTransaction(){throwInvalidMethodCall();}},{key:"onStopTransaction",value:function onStopTransaction(stm,title){var _ref64;var transaction=stm[TRANSACTION_PROP];var position=stm[POS_PROP];var queue=stm[QUEUE_PROP];if(transaction.length){if(!transaction.title&&!title&&stm.getTransactionTitle){transaction.title=stm.getTransactionTitle(transaction);}else if(title){transaction.title=title;}queue[position]=transaction;queue.length=++position;}return[(_ref64={},_defineProperty(_ref64,STATE_PROP,'readystate'),_defineProperty(_ref64,POS_PROP,position),_defineProperty(_ref64,TRANSACTION_PROP,null),_ref64),function(){stm.notifyStoresAboutStateRecordingStop(transaction,{stop:true});}];}},{key:"onRejectTransaction",value:function onRejectTransaction(stm){var _ref65;var transaction=stm[TRANSACTION_PROP];return[(_ref65={},_defineProperty(_ref65,STATE_PROP,'restoringstate'),_defineProperty(_ref65,TRANSACTION_PROP,null),_ref65),function(){if(transaction.length){transaction.undo();}return['readystate',function(){stm.notifyStoresAboutStateRecordingStop(transaction,{rejected:true});}];}];}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(){throwInvalidMethodCall();}},{key:"onQueueReset",value:function onQueueReset(){throwInvalidMethodCall();}},{key:"onModelUpdate",value:function onModelUpdate(stm,model,newData,oldData){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeModelUpdateAction(model,newData,oldData));}},{key:"onModelInsertChild",value:function onModelInsertChild(stm,parentModel,index,childModel,previousParent,previousIndex){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeModelInsertChildAction(parentModel,index,childModel,previousParent,previousIndex));}},{key:"onModelRemoveChild",value:function onModelRemoveChild(stm,parentModel,childModels,context){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeModelRemoveChildAction(parentModel,childModels,context));}},{key:"onStoreModelAdd",value:function onStoreModelAdd(stm,store,models,silent){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeStoreModelAddAction(store,models,silent));}},{key:"onStoreModelInsert",value:function onStoreModelInsert(stm,store,index,models,context,silent){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeStoreModelInsertAction(store,index,models,context,silent));}},{key:"onStoreModelRemove",value:function onStoreModelRemove(stm,store,models,context,silent){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeStoreModelRemoveAction(store,models,context,silent));}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(stm,store,allRecords,silent){var transaction=stm[TRANSACTION_PROP];transaction.addAction(stm.makeStoreRemoveAllAction(store,allRecords,silent));}}]);return RecordingStateClass;}(StateBase);/**
 * STM recording state.
 *
 * @internal
 */var RecordingState=new RecordingStateClass();Registry.registerStmState('recordingstate',RecordingState);/**
 * @module Common/data/stm/state/RestoringState
 */ /**
 * STM restoring state class.
 *
 * @internal
 */var RestoringStateClass=/*#__PURE__*/function(_StateBase4){_inherits2(RestoringStateClass,_StateBase4);function RestoringStateClass(){_classCallCheck2(this,RestoringStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(RestoringStateClass).apply(this,arguments));}_createClass2(RestoringStateClass,[{key:"canUndo",value:function canUndo(){return false;}},{key:"canRedo",value:function canRedo(){return false;}},{key:"onUndo",value:function onUndo(){throwInvalidMethodCall();}},{key:"onRedo",value:function onRedo(){throwInvalidMethodCall();}},{key:"onEnable",value:function onEnable(){throwInvalidMethodCall();}},{key:"onDisable",value:function onDisable(){throwInvalidMethodCall();}},{key:"onAutoRecordOn",value:function onAutoRecordOn(){return _defineProperty({},AUTO_RECORD_PROP,true);}},{key:"onAutoRecordOff",value:function onAutoRecordOff(){return _defineProperty({},AUTO_RECORD_PROP,false);}},{key:"onStartTransaction",value:function onStartTransaction(){throwInvalidMethodCall();}},{key:"onStopTransaction",value:function onStopTransaction(){throwInvalidMethodCall();}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(){throwInvalidMethodCall();}},{key:"onRejectTransaction",value:function onRejectTransaction(){throwInvalidMethodCall();}},{key:"onQueueReset",value:function onQueueReset(){throwInvalidMethodCall();}},{key:"onModelUpdate",value:function onModelUpdate(){}},{key:"onModelInsertChild",value:function onModelInsertChild(){}},{key:"onModelRemoveChild",value:function onModelRemoveChild(){}},{key:"onStoreModelAdd",value:function onStoreModelAdd(){}},{key:"onStoreModelInsert",value:function onStoreModelInsert(){}},{key:"onStoreModelRemove",value:function onStoreModelRemove(){}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){}}]);return RestoringStateClass;}(StateBase);/**
 * STM restoring state.
 *
 * @internal
 */var RestoringState=new RestoringStateClass();Registry.registerStmState('restoringstate',RestoringState);/**
 * @module Common/data/stm/state/AutoReadyState
 */ /**
 * STM transaction autostart ready state class.
 *
 * @internal
 */var AutoReadyStateClass=/*#__PURE__*/function(_ReadyStateClass){_inherits2(AutoReadyStateClass,_ReadyStateClass);function AutoReadyStateClass(){_classCallCheck2(this,AutoReadyStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(AutoReadyStateClass).apply(this,arguments));}_createClass2(AutoReadyStateClass,[{key:"onAutoRecordOn",value:function onAutoRecordOn(){throwInvalidMethodCall();}},{key:"onAutoRecordOff",value:function onAutoRecordOff(){var _ref68;return _ref68={},_defineProperty(_ref68,STATE_PROP,'readystate'),_defineProperty(_ref68,AUTO_RECORD_PROP,false),_ref68;}},{key:"onStartTransaction",value:function onStartTransaction(stm,title){var _ref69;var transaction=new Transaction({title:title});return[(_ref69={},_defineProperty(_ref69,STATE_PROP,'autorecordingstate'),_defineProperty(_ref69,TRANSACTION_PROP,transaction),_ref69),function(){stm.notifyStoresAboutStateRecordingStart(transaction);stm.stopTransactionDelayed();}];}},{key:"onModelUpdate",value:function onModelUpdate(stm,model,newData,oldData){stm.startTransaction();stm.onModelUpdate(model,newData,oldData);}},{key:"onModelInsertChild",value:function onModelInsertChild(stm,parentModel,index,childModels,context){stm.startTransaction();stm.onModelInsertChild(parentModel,index,childModels,context);}},{key:"onModelRemoveChild",value:function onModelRemoveChild(stm,parentModel,childModels,context){stm.startTransaction();stm.onModelRemoveChild(parentModel,childModels,context);}},{key:"onStoreModelAdd",value:function onStoreModelAdd(stm,store,models,silent){stm.startTransaction();stm.onStoreModelAdd(store,models,silent);}},{key:"onStoreModelInsert",value:function onStoreModelInsert(stm,store,index,models,context,silent){stm.startTransaction();stm.onStoreModelInsert(store,index,models,silent);}},{key:"onStoreModelRemove",value:function onStoreModelRemove(stm,store,models,context,silent){stm.startTransaction();stm.onStoreModelRemove(store,models,context,silent);}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(stm,store,allRecords,silent){stm.startTransaction();stm.onStoreRemoveAll(store,allRecords,silent);}}]);return AutoReadyStateClass;}(ReadyStateClass);/**
 * STM transaction autostart ready state.
 *
 * @internal
 */var AutoReadyState=new AutoReadyStateClass();Registry.registerStmState('autoreadystate',AutoReadyState);/**
 * @module Common/data/stm/state/AutoRecordingState
 */ /**
 * STM recording state class.
 *
 * @internal
 */var AutoRecordingStateClass=/*#__PURE__*/function(_Delayable5){_inherits2(AutoRecordingStateClass,_Delayable5);function AutoRecordingStateClass(){_classCallCheck2(this,AutoRecordingStateClass);return _possibleConstructorReturn2(this,_getPrototypeOf2(AutoRecordingStateClass).apply(this,arguments));}_createClass2(AutoRecordingStateClass,[{key:"onDisable",value:function onDisable(stm){var _ref70;var transaction=stm[TRANSACTION_PROP];var timer=stm[TRANSACTION_TIMER_PROP];if(timer){this.clearTimeout(timer);}stm.notifyStoresAboutStateRecordingStop(transaction,{disabled:true});return _ref70={},_defineProperty(_ref70,STATE_PROP,'disabledstate'),_defineProperty(_ref70,TRANSACTION_PROP,null),_defineProperty(_ref70,TRANSACTION_TIMER_PROP,null),_ref70;}},{key:"onAutoRecordOn",value:function onAutoRecordOn(stm){throwInvalidMethodCall();}},{key:"onAutoRecordOff",value:function onAutoRecordOff(stm){var _ref71;var timer=stm[TRANSACTION_TIMER_PROP];if(timer){this.clearTimeout(timer);}return _ref71={},_defineProperty(_ref71,STATE_PROP,'recordingstate'),_defineProperty(_ref71,AUTO_RECORD_PROP,false),_defineProperty(_ref71,TRANSACTION_TIMER_PROP,null),_ref71;}},{key:"onStopTransaction",value:function onStopTransaction(stm,title){var _ref72;var transaction=stm[TRANSACTION_PROP];var timer=stm[TRANSACTION_TIMER_PROP];var position=stm[POS_PROP];var queue=stm[QUEUE_PROP];if(timer){this.clearTimeout(timer);}if(transaction.length){if(!transaction.title&&!title&&stm.getTransactionTitle){transaction.title=stm.getTransactionTitle(transaction);}else if(title){transaction.title=title;}queue[position]=transaction;queue.length=++position;}return[(_ref72={},_defineProperty(_ref72,STATE_PROP,'autoreadystate'),_defineProperty(_ref72,POS_PROP,position),_defineProperty(_ref72,TRANSACTION_PROP,null),_defineProperty(_ref72,TRANSACTION_TIMER_PROP,null),_ref72),function(){stm.notifyStoresAboutStateRecordingStop(transaction,{stop:true});}];}},{key:"onStopTransactionDelayed",value:function onStopTransactionDelayed(stm){var _ref73;var timer=stm[TRANSACTION_TIMER_PROP];if(timer){this.clearTimeout(timer);}timer=this.setTimeout(function(){stm.stopTransaction();},stm.autoRecordTransactionStopTimeout);return _ref73={},_defineProperty(_ref73,STATE_PROP,AutoRecordingState),_defineProperty(_ref73,TRANSACTION_TIMER_PROP,timer),_ref73;}},{key:"onRejectTransaction",value:function onRejectTransaction(stm){var _ref74;var transaction=stm[TRANSACTION_PROP],timer=stm[TRANSACTION_TIMER_PROP];if(timer){this.clearTimeout(timer);}return[(_ref74={},_defineProperty(_ref74,STATE_PROP,'restoringstate'),_defineProperty(_ref74,TRANSACTION_PROP,null),_defineProperty(_ref74,TRANSACTION_TIMER_PROP,null),_ref74),function(){if(transaction.length){transaction.undo();}return['autoreadystate',function(){stm.notifyStoresAboutStateRecordingStop(transaction,{rejected:true});}];}];}},{key:"onModelUpdate",value:function onModelUpdate(stm){var _get12;for(var _len39=arguments.length,rest=new Array(_len39>1?_len39-1:0),_key39=1;_key39<_len39;_key39++){rest[_key39-1]=arguments[_key39];}(_get12=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onModelUpdate",this)).call.apply(_get12,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onModelInsertChild",value:function onModelInsertChild(stm){var _get13;for(var _len40=arguments.length,rest=new Array(_len40>1?_len40-1:0),_key40=1;_key40<_len40;_key40++){rest[_key40-1]=arguments[_key40];}(_get13=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onModelInsertChild",this)).call.apply(_get13,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onModelRemoveChild",value:function onModelRemoveChild(stm){var _get14;for(var _len41=arguments.length,rest=new Array(_len41>1?_len41-1:0),_key41=1;_key41<_len41;_key41++){rest[_key41-1]=arguments[_key41];}(_get14=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onModelRemoveChild",this)).call.apply(_get14,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onStoreModelAdd",value:function onStoreModelAdd(stm){var _get15;for(var _len42=arguments.length,rest=new Array(_len42>1?_len42-1:0),_key42=1;_key42<_len42;_key42++){rest[_key42-1]=arguments[_key42];}(_get15=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onStoreModelAdd",this)).call.apply(_get15,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onStoreModelInsert",value:function onStoreModelInsert(stm){var _get16;for(var _len43=arguments.length,rest=new Array(_len43>1?_len43-1:0),_key43=1;_key43<_len43;_key43++){rest[_key43-1]=arguments[_key43];}(_get16=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onStoreModelInsert",this)).call.apply(_get16,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onStoreModelRemove",value:function onStoreModelRemove(stm){var _get17;for(var _len44=arguments.length,rest=new Array(_len44>1?_len44-1:0),_key44=1;_key44<_len44;_key44++){rest[_key44-1]=arguments[_key44];}(_get17=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onStoreModelRemove",this)).call.apply(_get17,[this,stm].concat(rest));stm.stopTransactionDelayed();}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(stm){var _get18;for(var _len45=arguments.length,rest=new Array(_len45>1?_len45-1:0),_key45=1;_key45<_len45;_key45++){rest[_key45-1]=arguments[_key45];}(_get18=_get2(_getPrototypeOf2(AutoRecordingStateClass.prototype),"onStoreRemoveAll",this)).call.apply(_get18,[this,stm].concat(rest));stm.stopTransactionDelayed();}}]);return AutoRecordingStateClass;}(Delayable(RecordingStateClass));/**
 * STM recording state.
 *
 * @internal
 */var AutoRecordingState=new AutoRecordingStateClass();Registry.registerStmState('autorecordingstate',AutoRecordingState);/**
 * @module Common/data/stm/action/ActionBase
 */var throwAbstractMethodCall$1=function throwAbstractMethodCall$1(){throw new Error('Abstract method call!');};/**
 * Base class for STM actions.
 *
 * @abstract
 */var ActionBase=/*#__PURE__*/function(_Base5){_inherits2(ActionBase,_Base5);function ActionBase(){_classCallCheck2(this,ActionBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(ActionBase).apply(this,arguments));}_createClass2(ActionBase,[{key:"undo",/**
     * Undoes an action
     */value:function undo(){throwAbstractMethodCall$1();}/**
     * Redoes an action
     */},{key:"redo",value:function redo(){throwAbstractMethodCall$1();}},{key:"type",/**
     * Gets the type of the action (stringified class name).
     *
     * @return {String}
     */get:function get(){return this.constructor.name;}}]);return ActionBase;}(Base);ActionBase._$name='ActionBase';/**
 * @module Common/data/stm/action/UpdateAction
 */var MODEL_PROP=Symbol('MODEL_PROP');var NEW_DATA_PROP=Symbol('NEW_DATA_PROP');var OLD_DATA_PROP=Symbol('OLD_DATA_PROP');/**
 * Action to record the fact that a model has been updated.
 */var UpdateAction=/*#__PURE__*/function(_ActionBase){_inherits2(UpdateAction,_ActionBase);function UpdateAction(){_classCallCheck2(this,UpdateAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(UpdateAction).apply(this,arguments));}_createClass2(UpdateAction,[{key:"undo",value:function undo(){this.model.set(this.oldData);}},{key:"redo",value:function redo(){this.model.set(this.newData);}},{key:"type",get:function get(){return'UpdateAction';}},{key:"model",get:function get(){return this[MODEL_PROP];},set:function set(value){this[MODEL_PROP]=value;}},{key:"newData",get:function get(){return this[NEW_DATA_PROP];},set:function set(value){this[NEW_DATA_PROP]=Object.assign({},value);}},{key:"oldData",get:function get(){return this[OLD_DATA_PROP];},set:function set(value){this[OLD_DATA_PROP]=Object.assign({},value);}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a model which has been updated.
             *
             * @config {Common.data.Model}
             * @default
             */model:undefined,/**
             * Map of updated properties with new values.
             *
             * @config {Object}
             * @default
             */newData:undefined,/**
             * Map of updated properties with old values.
             *
             * @config {Object}
             * @default
             */oldData:undefined};}}]);return UpdateAction;}(ActionBase);UpdateAction._$name='UpdateAction';/**
 * @module Common/data/stm/action/InsertChildAction
 */var PARENT_MODEL_PROP=Symbol('PARENT_MODEL_PROP');var CHILD_MODELS_PROP=Symbol('CHILD_MODELS_PROP');var INSERT_INDEX_PROP=Symbol('INSERT_INDEX_PROP');var CONTEXT_PROP=Symbol('CONTEXT_PROP');/**
 * Action to record the fact of adding a children models into a parent model.
 */var InsertChildAction=/*#__PURE__*/function(_ActionBase2){_inherits2(InsertChildAction,_ActionBase2);function InsertChildAction(){_classCallCheck2(this,InsertChildAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(InsertChildAction).apply(this,arguments));}_createClass2(InsertChildAction,[{key:"undo",value:function undo(){var parentModel=this.parentModel,context=this.context,childModels=this.childModels;// Let's sort models by parent index such that models with lesser index
// were inserted back first, thus making valid parent index of models following.
childModels.sort(function(lhs,rhs){var _ref75=context.get(lhs)||{},lhsParent=_ref75.lhsParent,lhsIndex=_ref75.lhsIndex,_ref76=context.get(rhs)||{},rhsParent=_ref76.rhsParent,rhsIndex=_ref76.rhsIndex;return lhsParent&&lhsParent===rhsParent?lhsIndex-rhsIndex:0;});// Now let's re-insert records back to where they were or remove them
// if they weren't anywhere
childModels.forEach(function(m){var _ref77=context.get(m)||{},parent=_ref77.parent,index=_ref77.index;if(parent){// If we move within same parent then index must be adjusted
if(parent===parentModel){parent.insertChild(m,parent.children[index+1]);}else{// Insert at previous index
parent.insertChild(m,parent.children[index]);}}else{// Just remove
parentModel.removeChild(m);}});}},{key:"redo",value:function redo(){var me=this;me.parentModel.insertChild(me.insertIndex,me.childModels);}},{key:"type",get:function get(){return'InsertChildAction';}},{key:"parentModel",get:function get(){return this[PARENT_MODEL_PROP];},set:function set(model){this[PARENT_MODEL_PROP]=model;}},{key:"childModels",get:function get(){return this[CHILD_MODELS_PROP];},set:function set(models){this[CHILD_MODELS_PROP]=models.slice(0);}},{key:"insertIndex",get:function get(){return this[INSERT_INDEX_PROP];},set:function set(index){this[INSERT_INDEX_PROP]=index;}},{key:"context",get:function get(){return this[CONTEXT_PROP];},set:function set(ctx){this[CONTEXT_PROP]=ctx;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a parent model a child model has been added to.
             *
             * @config {Common.data.Model}
             * @default
             */parentModel:undefined,/**
             * Children models inserted.
             *
             * @config {Common.data.Model[]}
             * @default
             */childModels:undefined,/**
             * Index a children models are inserted at
             *
             * @config {Number}
             * @default
             */insertIndex:undefined,/**
             * Map having children models as keys and values containing previous parent
             * of each model and index at the previous parent.
             *
             * @config {Object}
             * @default
             */context:undefined};}}]);return InsertChildAction;}(ActionBase);InsertChildAction._$name='InsertChildAction';var PARENT_MODEL_PROP$1=Symbol('PARENT_MODEL_PROP');var CHILD_MODELS_PROP$1=Symbol('CHILD_MODELS_PROP');var CONTEXT_PROP$1=Symbol('CONTEXT_PROP');var RemoveChildAction=/*#__PURE__*/function(_ActionBase3){_inherits2(RemoveChildAction,_ActionBase3);function RemoveChildAction(){_classCallCheck2(this,RemoveChildAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(RemoveChildAction).apply(this,arguments));}_createClass2(RemoveChildAction,[{key:"undo",value:function undo(){var parentModel=this.parentModel,context=this.context,childModels=this.childModels;// Let's sort models by parent index such that models with lesser index
// were inserted back first, thus making valid parent index of models following.
childModels.sort(function(lhs,rhs){var lhsIndex=context.get(lhs),rhsIndex=context.get(rhs);return lhsIndex-rhsIndex;});// Now let's re-insert records back to where they were
childModels.forEach(function(m){parentModel.insertChild(context.get(m),m);});}},{key:"redo",value:function redo(){this.parentModel.removeChild(this.childModels);}},{key:"type",get:function get(){return'RemoveChildAction';}},{key:"parentModel",get:function get(){return this[PARENT_MODEL_PROP$1];},set:function set(model){this[PARENT_MODEL_PROP$1]=model;}},{key:"childModels",get:function get(){return this[CHILD_MODELS_PROP$1];},set:function set(models){this[CHILD_MODELS_PROP$1]=models.slice(0);}},{key:"context",get:function get(){return this[CONTEXT_PROP$1];},set:function set(ctx){this[CONTEXT_PROP$1]=ctx;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a parent model a child model has been removed to.
             *
             * @config {Common.data.Model}
             * @default
             */parentModel:undefined,/**
             * Children models removed.
             *
             * @config {Common.data.Model[]}
             * @default
             */childModels:undefined,/**
             * Map having children models as keys and values containing previous parent
             * index at the parent.
             *
             * @config {Object}
             * @default
             */context:undefined};}}]);return RemoveChildAction;}(ActionBase);RemoveChildAction._$name='RemoveChildAction';/**
 * @module Common/data/stm/action/AddAction
 */var STORE_PROP=Symbol('STORE_PROP');var MODEL_LIST_PROP=Symbol('MODEL_LIST_PROP');/**
 * Action to record the fact of models adding to a store.
 */var AddAction=/*#__PURE__*/function(_ActionBase4){_inherits2(AddAction,_ActionBase4);function AddAction(){_classCallCheck2(this,AddAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(AddAction).apply(this,arguments));}_createClass2(AddAction,[{key:"undo",value:function undo(){var me=this;me.store.remove(me.modelList,me.silent);}},{key:"redo",value:function redo(){var me=this;me.store.add(me.modelList,me.silent);}},{key:"type",get:function get(){return'AddAction';}},{key:"store",get:function get(){return this[STORE_PROP];},set:function set(store){this[STORE_PROP]=store;}},{key:"modelList",get:function get(){return this[MODEL_LIST_PROP];},set:function set(list){this[MODEL_LIST_PROP]=list.slice(0);}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a store models have been added into.
             *
             * @config {Common.data.Store}
             * @default
             */store:undefined,/**
             * List of models added into the store.
             *
             * @config {Common.data.Model[]}
             * @default
             */modelList:undefined,/**
             * Flag showing if undo/redo should be done silently i.e. with events suppressed
             *
             * @config {Boolean}
             * @default
             */silent:false};}}]);return AddAction;}(ActionBase);AddAction._$name='AddAction';/**
 * @module Common/data/stm/action/InsertAction
 */var STORE_PROP$1=Symbol('STORE_PROP');var MODEL_LIST_PROP$1=Symbol('MODEL_LIST_PROP');var INSERT_INDEX_PROP$1=Symbol('INSERT_INDEX_PROP');var CONTEXT_PROP$2=Symbol('CONTEXT_PROP');/**
 * Action to record the fact of models inserting into a store.
 */var InsertAction=/*#__PURE__*/function(_ActionBase5){_inherits2(InsertAction,_ActionBase5);function InsertAction(){_classCallCheck2(this,InsertAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(InsertAction).apply(this,arguments));}_createClass2(InsertAction,[{key:"undo",value:function undo(){var store=this.store,modelList=this.modelList,context=this.context,silent=this.silent;// Let's sort models by index such that models with lesser index
// were inserted back first, thus making valid index of models following.
modelList.sort(function(lhs,rhs){var lhsIndex=context.get(lhs),rhsIndex=context.get(rhs);return lhsIndex!==undefined&&rhsIndex!==undefined?lhsIndex-rhsIndex:0;});modelList.forEach(function(m){var index=context.get(m);if(index!==undefined){// Insert at previous index
store.insert(index,m,silent);}else{// Just remove
store.remove(m,silent);}});}},{key:"redo",value:function redo(){var me=this;me.store.insert(me.insertIndex,me.modelList,me.silent);}},{key:"type",get:function get(){return'InsertAction';}},{key:"store",get:function get(){return this[STORE_PROP$1];},set:function set(store){this[STORE_PROP$1]=store;}},{key:"modelList",get:function get(){return this[MODEL_LIST_PROP$1];},set:function set(list){this[MODEL_LIST_PROP$1]=list.slice(0);}},{key:"insertIndex",get:function get(){return this[INSERT_INDEX_PROP$1];},set:function set(index){this[INSERT_INDEX_PROP$1]=index;}},{key:"context",get:function get(){return this[CONTEXT_PROP$2];},set:function set(context){this[CONTEXT_PROP$2]=context;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a store models have been inserted into.
             *
             * @config {Common.data.Store}
             * @default
             */store:undefined,/**
             * List of models inserted into the store.
             *
             * @config {Common.data.Model[]}
             * @default
             */modelList:undefined,/**
             * Index the models have been inserted at.
             *
             * @config {Number}
             * @default
             */insertIndex:undefined,/**
             * Models move context (if models has been moved), if any.
             * Map this {@link Common/data/Model} instances as keys and their
             * previous index as values
             *
             * @config {Map}
             * @default
             */context:undefined,/**
             * Flag showing if undo/redo should be done silently i.e. with events suppressed
             *
             * @config {Boolean}
             * @default
             */silent:false};}}]);return InsertAction;}(ActionBase);InsertAction._$name='InsertAction';/**
 * @module Common/data/stm/action/RemoveAction
 */var STORE_PROP$2=Symbol('STORE_PROP');var MODEL_LIST_PROP$2=Symbol('MODEL_LIST_PROP');var CONTEXT_PROP$3=Symbol('CONTEXT_PROP');/**
 * Action to record the fact of models removed from a store.
 */var RemoveAction=/*#__PURE__*/function(_ActionBase6){_inherits2(RemoveAction,_ActionBase6);function RemoveAction(){_classCallCheck2(this,RemoveAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(RemoveAction).apply(this,arguments));}_createClass2(RemoveAction,[{key:"undo",value:function undo(){var store=this.store,context=this.context,modelList=this.modelList,silent=this.silent;// Let's sort models by index such that models with lesser index
// were inserted back first, thus making valid index of models following.
modelList.sort(function(lhs,rhs){var lhsIndex=context.get(lhs),rhsIndex=context.get(rhs);// Here, in contrast to InsertAction, index is always present
return lhsIndex-rhsIndex;});modelList.forEach(function(m){var index=context.get(m);// Insert at previous index
store.insert(index,m,silent);});}},{key:"redo",value:function redo(){var me=this;me.store.remove(me.modelList,me.silent);}},{key:"type",get:function get(){return'RemoveAction';}},{key:"store",get:function get(){return this[STORE_PROP$2];},set:function set(store){this[STORE_PROP$2]=store;}},{key:"modelList",get:function get(){return this[MODEL_LIST_PROP$2];},set:function set(list){this[MODEL_LIST_PROP$2]=list.slice(0);}},{key:"context",get:function get(){return this[CONTEXT_PROP$3];},set:function set(context){this[CONTEXT_PROP$3]=context;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a store models have been removed from.
             *
             * @config {Common.data.Store}
             * @default
             */store:undefined,/**
             * List of models removed from the store.
             *
             * @config {Common.data.Model[]}
             * @default
             */modelList:undefined,/**
             * Models removing context.
             *
             * @config {Object}
             * @default
             */context:undefined,/**
             * Flag showing if undo/redo should be done silently i.e. with events suppressed
             *
             * @config {Boolean}
             * @default
             */silent:false};}}]);return RemoveAction;}(ActionBase);RemoveAction._$name='RemoveAction';/**
 * @module Common/data/stm/action/RemoveAllAction
 */var STORE_PROP$3=Symbol('STORE_PROP');var ALL_RECORDS_PROP=Symbol('ALL_RECORDS_PROP');/**
 * Action to record store remove all operation.
 */var RemoveAllAction=/*#__PURE__*/function(_ActionBase7){_inherits2(RemoveAllAction,_ActionBase7);function RemoveAllAction(){_classCallCheck2(this,RemoveAllAction);return _possibleConstructorReturn2(this,_getPrototypeOf2(RemoveAllAction).apply(this,arguments));}_createClass2(RemoveAllAction,[{key:"undo",value:function undo(){var store=this.store,allRecords=this.allRecords,silent=this.silent;store.add(allRecords,silent);}},{key:"redo",value:function redo(){var me=this;me.store.removeAll(me.silent);}},{key:"type",get:function get(){return'RemoveAllAction';}},{key:"store",get:function get(){return this[STORE_PROP$3];},set:function set(store){this[STORE_PROP$3]=store;}},{key:"allRecords",get:function get(){return this[ALL_RECORDS_PROP];},set:function set(records){this[ALL_RECORDS_PROP]=records.slice(0);}}],[{key:"defaultConfig",get:function get(){return{/**
             * Reference to a store cleared.
             *
             * @config {Common.data.Store}
             * @default
             */store:undefined,/**
             * All store records removed
             *
             * @config {Common.data.Model[]}
             * @default
             */allRecords:undefined,/**
             * Flag showing if undo/redo should be done silently i.e. with events suppressed
             *
             * @config {Boolean}
             * @default
             */silent:false};}}]);return RemoveAllAction;}(ActionBase);RemoveAllAction._$name='RemoveAllAction';/**
 * @module Common/data/stm/StateTrackingManager
 */var makeModelUpdateAction=function makeModelUpdateAction(model,newData,oldData){return new UpdateAction({model:model,newData:newData,oldData:oldData});};var makeModelInsertChildAction=function makeModelInsertChildAction(parentModel,insertIndex,childModels,context){return new InsertChildAction({parentModel:parentModel,childModels:childModels,insertIndex:insertIndex,context:context});};var makeModelRemoveChildAction=function makeModelRemoveChildAction(parentModel,childModels,context){return new RemoveChildAction({parentModel:parentModel,childModels:childModels,context:context});};var makeStoreModelAddAction=function makeStoreModelAddAction(store,modelList,silent){return new AddAction({store:store,modelList:modelList,silent:silent});};var makeStoreModelInsertAction=function makeStoreModelInsertAction(store,insertIndex,modelList,context,silent){return new InsertAction({store:store,insertIndex:insertIndex,modelList:modelList,context:context,silent:silent});};var makeStoreModelRemoveAction=function makeStoreModelRemoveAction(store,modelList,context,silent){return new RemoveAction({store:store,modelList:modelList,context:context,silent:silent});};var makeStoreRemoveAllAction=function makeStoreRemoveAllAction(store,allRecords,silent){return new RemoveAllAction({store:store,allRecords:allRecords,silent:silent});};var stateTransition=function stateTransition(stm,event){for(var _len46=arguments.length,args=new Array(_len46>2?_len46-2:0),_key46=2;_key46<_len46;_key46++){args[_key46-2]=arguments[_key46];}var newState=event.call.apply(event,[stm[STATE_PROP],stm].concat(args));if(typeof newState==='string'){stm[STATE_PROP]=Registry.resolveStmState(newState);}else if(newState instanceof StateBase){stm[STATE_PROP]=newState;}else if(Array.isArray(newState)){var _newState=_slicedToArray(newState,2),state=_newState[0],next=_newState[1];if(typeof state==='string'){stm[STATE_PROP]=Registry.resolveStmState(state);}else if(state instanceof StateBase){stm[STATE_PROP]=state;}else if(state&&_typeof(state)==='object'){stm=Object.assign(stm,state);stm[STATE_PROP]=Registry.resolveStmState(stm[STATE_PROP]);}if(typeof next==='function'){stateTransition.apply(void 0,[stm,next].concat(args));}}else if(newState&&_typeof(newState)==='object'){stm=Object.assign(stm,newState);stm[STATE_PROP]=Registry.resolveStmState(stm[STATE_PROP]);}};/**
 * State Tracking Manager.
 *
 * When enabled tracks state of every store registered via {@link #function-addStore}.
 * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular
 * point in time
 *
 * @example
 *
 * stm = new StateTrackingManager({
 *     autoRecord : true,
 *     listeners  : {
 *        'recordingstop' : () => {
 *            // your custom code to update undo/redo GUI controls
 *            updateUndoRedoControls();
 *        },
 *        'restoringstop' : ({ stm }) => {
 *            // your custom code to update undo/redo GUI controls
 *            updateUndoRedoControls();
 *        }
 *    },
 *    getTransactionTitle : (transaction) => {
 *        // your custom code to analyze the transaction and return custom transaction title
 *        const lastAction = transaction.queue[transaction.queue.length - 1];
 *
 *        if (lastAction instanceof AddAction) {
 *            let title = 'Add new record';
 *        }
 *
 *        return title;
 *    }
 * });
 *
 * stm.addStore(userStore);
 * stm.addStore(companyStore);
 * stm.addStore(otherStore);
 *
 * stm.enable();
 */var StateTrackingManager=/*#__PURE__*/function(_Events6){_inherits2(StateTrackingManager,_Events6);function StateTrackingManager(){_classCallCheck2(this,StateTrackingManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(StateTrackingManager).apply(this,arguments));}_createClass2(StateTrackingManager,[{key:"construct",value:function construct(){var _Object$assign3,_get19;var me=this;Object.assign(me,(_Object$assign3={},_defineProperty(_Object$assign3,STATE_PROP,ReadyState),_defineProperty(_Object$assign3,STORES_PROP,[]),_defineProperty(_Object$assign3,QUEUE_PROP,[]),_defineProperty(_Object$assign3,POS_PROP,0),_defineProperty(_Object$assign3,TRANSACTION_PROP,null),_defineProperty(_Object$assign3,TRANSACTION_TIMER_PROP,null),_defineProperty(_Object$assign3,AUTO_RECORD_PROP,false),_Object$assign3));for(var _len47=arguments.length,args=new Array(_len47),_key47=0;_key47<_len47;_key47++){args[_key47]=arguments[_key47];}(_get19=_get2(_getPrototypeOf2(StateTrackingManager.prototype),"construct",this)).call.apply(_get19,[this].concat(args));}},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(StateTrackingManager.prototype),"doDestroy",this).call(this);this.destroyProperties(STATE_PROP);}/**
     * Gets current state of the manager
     *
     * @return {Common.data.stm.state.StateBase}
     */},{key:"hasStore",/**
     * Checks if a store has been added to the manager
     *
     * @param  {Common.data.Store} store
     * @return {Boolean}
     */value:function hasStore(store){return this[STORES_PROP].includes(store);}/**
     * Adds a store to the manager
     *
     * @param {Common.data.Store} store
     */},{key:"addStore",value:function addStore(store){if(!this.hasStore(store)){this[STORES_PROP].push(store);store.stm=this;}}/**
     * Removes a store from the manager
     *
     * @param {Common.data.Store} store
     */},{key:"removeStore",value:function removeStore(store){if(this.hasStore(store)){this[STORES_PROP]=this[STORES_PROP].filter(function(s){return s!==store;});store.stm=null;}}/**
     * Returns previously added store by it's id or undefined if store with the given id isn't added.
     *
     * @param  {String|Number} id
     * @return {Common.data.Store}
     * @deprecated 2.1
     */},{key:"getStoreById",value:function getStoreById(id){return this[STORES_PROP].find(function(s){return s.id===id;});}/**
     * Calls `fn` for each store registered in STM.
     *
     * @param {Function} fn (store, id) => ...
     */},{key:"forEachStore",value:function forEachStore(fn){this[STORES_PROP].forEach(function(s){return fn(s,s.id);});}/**
     * Get/set manager disabled state
     *
     * @property {Boolean}
     */},{key:"enable",/**
     * Enables manager
     */value:function enable(){this.disabled=false;}/**
     * Disables manager
     */},{key:"disable",value:function disable(){this.disabled=true;}/**
     * Checks manager ready state
     *
     * @return {Boolean}
     */},{key:"startTransaction",/**
     * Starts undo/redo recording transaction.
     *
     * @param {String} [title=nul]
     */value:function startTransaction(){var title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;stateTransition(this,this.state.onStartTransaction,title);}/**
     * Stops undo/redo recording transaction
     *
     * @param {String} [title=null]
     */},{key:"stopTransaction",value:function stopTransaction(){var title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;stateTransition(this,this.state.onStopTransaction,title);}/**
     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.
     *
     * @private
     */},{key:"stopTransactionDelayed",value:function stopTransactionDelayed(){stateTransition(this,this.state.onStopTransactionDelayed);}/**
     * Rejects currently recorded transaction.
     */},{key:"rejectTransaction",value:function rejectTransaction(){stateTransition(this,this.state.onRejectTransaction);}/**
     * Gets currently recording STM transaction.
     *
     * @return {Common.data.stm.Transaction}
     */},{key:"undo",/**
     * Undoes current undo/redo transaction.
     *
     * @param {Number} [steps=1]
     */value:function undo(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;stateTransition(this,this.state.onUndo,steps);}/**
     * Undoes all transactions.
     */},{key:"undoAll",value:function undoAll(){this.undo(this.length);}/**
     * Redoes current undo/redo transaction.
     *
     * @param {Number} [steps=1]
     */},{key:"redo",value:function redo(){var steps=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;stateTransition(this,this.state.onRedo,steps);}/**
     * Redoes all transactions.
     */},{key:"redoAll",value:function redoAll(){this.redo(this.length);}/**
     * Resets undo/redo queue.
     */},{key:"resetQueue",value:function resetQueue(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{undo:true,redo:true};stateTransition(this,this.state.onResetQueue,options);}/**
     * Resets undo queue.
     */},{key:"resetUndoQueue",value:function resetUndoQueue(){this.resetQueue({undo:true});}/**
     * Resets redo queue.
     */},{key:"resetRedoQueue",value:function resetRedoQueue(){this.resetQueue({redo:true});}},{key:"notifyStoresAboutStateRecordingStart",value:function notifyStoresAboutStateRecordingStart(transaction){var _this30=this;this.forEachStore(function(store){store.onStmRecordingStart&&store.onStmRecordingStart(_this30,transaction);});/**
         * Fired upon state recording operation starts.
         *
         * @event recordingStart
         * @param {Common.data.stm.StateTrackingManager} stm
         * @param {Common.data.stm.Transaction} transaction
         */this.trigger('recordingStart',{stm:this,transaction:transaction});}},{key:"notifyStoresAboutStateRecordingStop",value:function notifyStoresAboutStateRecordingStop(transaction,reason){var _this31=this;this.forEachStore(function(store){store.onStmRecordingStop&&store.onStmRecordingStop(_this31,transaction,reason);});/**
         * Fired upon state recording operation stops.
         *
         * @event recordingStop
         * @param {Common.data.stm.StateTrackingManager} stm
         * @param {Common.data.stm.Transaction} transaction
         * @param {Object} reason Transaction stop reason
         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.
         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.
         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.
         */this.trigger('recordingStop',{stm:this,transaction:transaction,reason:reason});}},{key:"notifyStoresAboutStateRestoringStart",value:function notifyStoresAboutStateRestoringStart(){var _this32=this;this.forEachStore(function(store){store.onStmRestoringStart&&store.onStmRestoringStart(_this32);});/**
         * Fired upon state restoration operation starts.
         *
         * @event restoringStart
         * @param {Common.data.stm.StateTrackingManager} stm
         */this.trigger('restoringStart',{stm:this});}},{key:"notifyStoresAboutStateRestoringStop",value:function notifyStoresAboutStateRestoringStop(){var _this33=this;this.forEachStore(function(store){store.onStmRestoringStop&&store.onStmRestoringStop(_this33);});/**
         * Fired upon state restoration operation stops.
         *
         * @event restoringStop
         * @param {Common.data.stm.StateTrackingManager} stm
         */this.trigger('restoringStop',{stm:this});}},{key:"notifyStoresAboutQueueReset",value:function notifyStoresAboutQueueReset(options){var _this34=this;this.forEachStore(function(store){store.onStmQueueReset&&store.onStmQueueReset(_this34,options);});/**
         * Fired upon state undo/redo queue reset.
         *
         * @event queueReset
         * @param {Common.data.stm.StateTrackingManager} stm
         */this.trigger('queueReset',{stm:this,options:options});}/**
     * Method to call from model STM mixin upon model update
     *
     * @param {Common.data.Model} model
     * @param {Object} newData
     * @param {Object} oldData
     *
     * @private
     */},{key:"onModelUpdate",value:function onModelUpdate(model,newData,oldData){stateTransition(this,this.state.onModelUpdate,model,newData,oldData);}/**
     * Method to call from model STM mixin upon tree model child insertion
     *
     * @param {Common.data.Model} parentModel Parent model
     * @param {Number} index Insertion index
     * @param {Common.data.Model[]} childModels Array of models inserted
     * @param {Map} context Map with inserted models as keys and objects with previous parent,
     *                      and index at previous parent.
     *
     * @private
     */},{key:"onModelInsertChild",value:function onModelInsertChild(parentModel,index,childModels,context){stateTransition(this,this.state.onModelInsertChild,parentModel,index,childModels,context);}/**
     * Method to call from model STM mixin upon tree model child removal
     *
     * @param {Common.data.Model} parentModel
     * @param {Common.data.Model[]} childModels
     * @param {Map} context
     *
     * @private
     */},{key:"onModelRemoveChild",value:function onModelRemoveChild(parentModel,childModels,context){stateTransition(this,this.state.onModelRemoveChild,parentModel,childModels,context);}/**
     * Method to call from store STM mixin upon store models adding
     *
     * @param {Common.data.Store} store
     * @param {Common.data.Model[]} models
     * @param {Boolean} silent
     *
     * @private
     */},{key:"onStoreModelAdd",value:function onStoreModelAdd(store,models,silent){stateTransition(this,this.state.onStoreModelAdd,store,models,silent);}/**
     * Method to call from store STM mixin upon store models insertion
     *
     * @param {Common.data.Store} store
     * @param {Number} index
     * @param {Common.data.Model[]} models
     * @param {Map} context
     * @param {Boolean} silent
     *
     * @private
     */},{key:"onStoreModelInsert",value:function onStoreModelInsert(store,index,models,context,silent){stateTransition(this,this.state.onStoreModelInsert,store,index,models,context,silent);}/**
     * Method to call from store STM mixin upon store models removal
     *
     * @param {Common.data.Store} store
     * @param {Common.data.Model[]} models
     * @param {Object} context
     * @param {Boolean} silent
     *
     * @private
     */},{key:"onStoreModelRemove",value:function onStoreModelRemove(store,models,context,silent){stateTransition(this,this.state.onStoreModelRemove,store,models,context,silent);}/**
     * Method to call from store STM mixin upon store clear
     *
     * @param {Common.data.Store} store
     * @param {Common.data.Model[]} allRecords
     * @param {Boolean} silent
     *
     * @private
     */},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(store,allRecords,silent){stateTransition(this,this.state.onStoreRemoveAll,store,allRecords,silent);}},{key:"state",get:function get(){return this[STATE_PROP];}/**
     * Gets current undo/redo queue position
     *
     * @return {Number}
     */},{key:"position",get:function get(){return this[POS_PROP];}/**
     * Gets current undo/redo queue length
     *
     * @return {Number}
     */},{key:"length",get:function get(){return this[QUEUE_PROP].length;}/**
     * Gets all the stores registered in STM
     *
     * @return {Common.data.Store[]}
     */},{key:"stores",get:function get(){return Array.from(this[STORES_PROP]);}},{key:"disabled",get:function get(){return this.state===DisabledState;},set:function set(val){var me=this;if(me.disabled!=val){if(val){stateTransition(me,me.state.onDisable,me);}else{stateTransition(me,me.state.onEnable,me);}}}},{key:"isReady",get:function get(){return this.state===ReadyState||this.state===AutoReadyState;}/**
     * Checks manager recording state
     *
     * @return {Boolean}
     */},{key:"isRecording",get:function get(){return this.state===RecordingState||this.state===AutoRecordingState;}/**
     * Gets/sets manager auto record option
     *
     * @property {Boolean}
     */},{key:"autoRecord",get:function get(){return this[AUTO_RECORD_PROP];},set:function set(value){var me=this;if(me.autoRecord!=value){if(value){stateTransition(me,me.state.onAutoRecordOn,me);}else{stateTransition(me,me.state.onAutoRecordOff,me);}}}},{key:"transaction",get:function get(){return this[TRANSACTION_PROP];}/**
     * Gets titles of all recorded undo/redo transactions
     *
     * @return {String[]}
     */},{key:"queue",get:function get(){return this[QUEUE_PROP].map(function(t){return t.title;});}/**
     * Gets manager restoring state.
     *
     * @return {Boolean}
     */},{key:"isRestoring",get:function get(){return this.state===RestoringState;}/**
     * Checks if the manager can undo.
     *
     * @return {Boolean}
     */},{key:"canUndo",get:function get(){return this.state.canUndo(this);}/**
     * Checks if the manager can redo.
     *
     * @return {Boolean}
     */},{key:"canRedo",get:function get(){return this.state.canRedo(this);}}],[{key:"defaultConfig",get:function get(){return{/**
             * Default manager disabled state
             *
             * @config {Boolean}
             * @default
             */disabled:true,/**
             * Whether to start transaction recording automatically in case the Manager is enabled.
             *
             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.
             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and
             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.
             *
             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end
             * a transaction.
             *
             * @config {Boolean}
             * @default
             */autoRecord:false,/**
             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}
             *
             * @config {Number}
             * @default
             */autoRecordTransactionStopTimeout:100,/**
             * Store model update action factory
             *
             * @config {Function}
             * @default
             * @private
             */makeModelUpdateAction:makeModelUpdateAction,/**
             * Store insert child model action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeModelInsertChildAction:makeModelInsertChildAction,/**
             * Store remove child model action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeModelRemoveChildAction:makeModelRemoveChildAction,/**
             * Store add model action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeStoreModelAddAction:makeStoreModelAddAction,/**
             * Store insert model action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeStoreModelInsertAction:makeStoreModelInsertAction,/**
             * Store remove model action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeStoreModelRemoveAction:makeStoreModelRemoveAction,/**
             * Store remove all models action factory.
             *
             * @config {Function}
             * @default
             * @private
             */makeStoreRemoveAllAction:makeStoreRemoveAllAction,/**
             * Function to create a transaction title if none is provided.
             *
             * The function receives a transaction and should return a title.
             *
             * @config {Function}
             * @default
             */getTransactionTitle:null};}}]);return StateTrackingManager;}(Events(Base));exports.StateTrackingManager=StateTrackingManager;StateTrackingManager._$name='StateTrackingManager';/**
 * @module Common/helper/CSSHelper
 */ /**
 * Provides methods to add and manipulate CSS style rules.
 *
 * Note that this class is incompatible with [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)
 *
 * ```
 * this.criticalRule = CSSHelper.insertRule(`#${this.id} .b-sch-event.critical {background-color:${this.criticalColor}}`);
 * ```
 */var CSSHelper=/*#__PURE__*/function(){function CSSHelper(){_classCallCheck2(this,CSSHelper);}_createClass2(CSSHelper,null,[{key:"insertRule",/**
     * Inserts a CSS style rule based upon the passed text
     * @param {String} cssText The text of the rule including selector and rule body just as it would
     * be specified in a CSS file.
     * @returns {CSSRule} The resulting CSS Rule object if the add was successful.
     */value:function insertRule(cssText){var styleSheet=this.styleSheet,oldCount=styleSheet.cssRules.length;styleSheet.insertRule(cssText,0);// Only return element zero if the add was successful.
if(styleSheet.cssRules.length>oldCount){return styleSheet.cssRules[0];}}/**
     * Looks up the first rule which matched the passed selector.
     * @param {String/Function} selector Either the selector string to exactly match or a function which
     * when passed a required selector, returns `true`.
     * @returns {CSSRule} The first matching CSS Rule object if any found.
     */},{key:"findRule",value:function findRule(selector){var result,isFn=typeof selector==='function';// Array#find will stop when the function returns true, stop when the inner
// find call yields a value from the search string.
// Array#find better: to http://www.andygup.net/fastest-way-to-find-an-item-in-a-javascript-array/
Array.prototype.find.call(document.head.querySelectorAll('link[rel=stylesheet],style[type*=css]'),function(element){result=Array.prototype.find.call(element.sheet.rules||element.sheet.cssRules,function(r){return isFn?selector(r):r.selectorText===selector;});if(result){return true;}});return result;}},{key:"styleSheet",get:function get(){if(!this._stylesheet){this._stylesheet=DomHelper.createElement({tag:'style',id:'bryntum-private-styles',type:'text/css',parent:document.head}).sheet;}return this._stylesheet;}}]);return CSSHelper;}();exports.CSSHelper=CSSHelper;CSSHelper._$name='CSSHelper';// TODO: Use mousedown pos and not center too reposition
/**
 * @module Common/helper/mixin/DragHelperContainer
 */ /**
 * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)
 *
 * @private
 * @mixin
 */var DragHelperContainer=function DragHelperContainer(Target){return(/*#__PURE__*/function(_ref78){_inherits2(DragHelperContainer,_ref78);function DragHelperContainer(){_classCallCheck2(this,DragHelperContainer);return _possibleConstructorReturn2(this,_getPrototypeOf2(DragHelperContainer).apply(this,arguments));}_createClass2(DragHelperContainer,[{key:"initContainerDrag",//region Init
/**
     * Initialize container drag mode.
     * @private
     */value:function initContainerDrag(){var me=this;//use container drag as default mode
if(!me.mode)me.mode='container';if(me.mode==='container'&&!me.containers)throw new Error('Container drag mode must specify containers');}//endregion
//region Grab, update, finish
/**
     * Grab an element which can be dragged between containers.
     * @private
     * @param event
     * @returns {Boolean}
     */},{key:"grabContainerDrag",value:function grabContainerDrag(event){var me=this;// allow specified selectors to prevent drag
if(!me.ignoreSelector||!DomHelper.up(event.target,me.ignoreSelector)){// go up from "handle" to draggable element
var element=DomHelper.getAncestor(event.target,me.containers,me.outerElement);if(element){var box=element.getBoundingClientRect();me.context={element:element,valid:true,action:'container',offsetX:event.pageX-box.left,offsetY:event.pageY-box.top,originalPosition:{parent:element.parentElement,prev:element.previousElementSibling,next:element.nextElementSibling}};}return true;}return false;}/**
     * Starts dragging, called when mouse moves first time after grabbing
     * @private
     * @param event
     */},{key:"startContainerDrag",value:function startContainerDrag(event){var context=this.context,dragElement=context.element,div=dragElement.cloneNode(true),box=dragElement.getBoundingClientRect();// init drag proxy
div.classList.add(this.dragProxyCls);div.classList.add(this.draggingCls);document.body.appendChild(div);context.dragProxy=div;// Always set the proxy element width manually, drag target could be sized with flex or % width
div.style.width=box.width+'px';div.style.height=box.height+'px';DomHelper.setTranslateXY(context.dragProxy,box.left,box.top);// style dragged element
context.dragging=dragElement;dragElement.classList.add(this.dropPlaceholderCls);}/**
     * Move the placeholder element into its new position on valid drag.
     * @private
     * @param event
     */},{key:"updateContainerDrag",value:function updateContainerDrag(event){var me=this,context=me.context;if(!context.started||!context.targetElement)return;var containerElement=DomHelper.getAncestor(context.targetElement,me.containers,'b-grid'),willLoseFocus=context.dragging&&context.dragging.contains(document.activeElement);if(containerElement&&DomHelper.isDescendant(context.element,containerElement)){// dragging over part of self, do nothing
return;}// The dragging element contains focus, and moving it within the DOM
// will cause focus loss which might affect an encapsulating autoClose Popup.
// Prevent focus loss handling during the DOM move.
if(willLoseFocus){GlobalEvents.suspendFocusEvents();}if(containerElement&&context.valid){me.moveNextTo(containerElement,event);}else{// dragged outside of containers, revert position
me.revertPosition();}if(willLoseFocus){GlobalEvents.resumeFocusEvents();}event.preventDefault();}/**
     * Finalize drag, fire drop.
     * @private
     * @param event
     * @fires drop
     */},{key:"finishContainerDrag",value:function finishContainerDrag(event){var _this35=this;var me=this,context=me.context,dragging=context.dragging,dragProxy=context.dragProxy,valid=context.valid,draggedTo=context.draggedTo,insertBefore=context.insertBefore,originalPosition=context.originalPosition;if(dragging){// needs to have a valid target
context.valid=valid&&draggedTo&&(// no drop on self or parent
dragging!==insertBefore||originalPosition.parent!==draggedTo);context.finalize=function(){var valid=arguments.length>0&&arguments[0]!==undefined?arguments[0]:context.valid;// revert if invalid (and context still exists, might have been aborted from outside)
if(!valid&&_this35.context){me.revertPosition();}dragging.classList.remove(me.dropPlaceholderCls);dragProxy.remove();me.reset();};// allow async finalization by setting async to true on context in drop handler,
// requires implementer to call context.finalize later to finish the drop
context.async=false;me.trigger('drop',{context:context,event:event});if(!context.async){// finalize immediately
context.finalize();}else{context.awaitingFinalization=true;}}}/**
     * Aborts a drag operation.
     * @private
     * @param {Boolean} [invalid]
     * @param {Object} [event]
     * @param {Boolean} [silent]
     */},{key:"abortContainerDrag",value:function abortContainerDrag(){var invalid=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var event=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,context=me.context;if(context.dragging){context.dragging.classList.remove(me.dropPlaceholderCls);context.dragProxy.remove();me.context={};}if(!silent){me.trigger(invalid?'drop':'abort',{context:context,event:event});}}//endregion
//region Helpers
/**
     * Starts a drag operation by creating a proxy and storing which element is being dragged.
     * @private
     */ // startDrag() {
//     const context = this.context,
//           div      = context.element.cloneNode(true);
//
//     // init drag proxy
//     div.classList.add('b-drag-proxy');
//     document.body.appendChild(div);
//     context.dragProxy = div;
//
//     // style dragged element
//     context.dragging = context.element;
//     context.dragging.classList.add('myClass');
// }
/**
     * Updates the drag proxy position.
     * @private
     * @param event
     */},{key:"updateContainerProxy",value:function updateContainerProxy(event){var me=this,context=me.context,proxy=context.dragProxy;var newX=event.pageX-context.offsetX,newY=event.pageY-context.offsetY;if(typeof me.minX==='number'){newX=Math.max(me.minX,newX);}if(typeof me.maxX==='number'){newX=Math.min(me.maxX-proxy.offsetWidth,newX);}if(typeof me.minY==='number'){newY=Math.max(me.minY,newY);}if(typeof me.maxY==='number'){newY=Math.min(me.maxY-proxy.offsetHeight,newY);}if(me.lockX){DomHelper.setTranslateY(proxy,newY);}else if(me.lockY){DomHelper.setTranslateX(proxy,newX);}else{DomHelper.setTranslateXY(proxy,newX,newY);}var targetElement;if(event.type==='touchmove'){var touch=event.changedTouches[0];targetElement=document.elementFromPoint(touch.clientX,touch.clientY);}else{targetElement=event.target;}context.targetElement=targetElement;}/**
     * Positions element being dragged in relation to targetElement.
     * @private
     * @param targetElement
     * @param event
     */},{key:"moveNextTo",value:function moveNextTo(targetElement,event){var context=this.context,dragElement=context.dragging,parent=targetElement.parentElement;if(targetElement!==dragElement){// dragged over a container and not over self, calculate where to insert
var centerX=targetElement.getBoundingClientRect().left+targetElement.offsetWidth/2;if(event.pageX<centerX){// dragged left of target center, insert before
parent.insertBefore(dragElement,targetElement);context.insertBefore=targetElement;}else{// dragged right of target center, insert after
if(targetElement.nextElementSibling){// check that not dragged to the immediate left of self. in such case, position should not change
if(targetElement.nextElementSibling!==dragElement){context.insertBefore=targetElement.nextElementSibling;parent.insertBefore(dragElement,targetElement.nextElementSibling);}else if(!context.insertBefore&&dragElement.parentElement.lastElementChild!==dragElement){// dragged left initially, should stay in place (checked in finishContainerDrag)
// TODO: or flag as invalid drag? since no change...
context.insertBefore=targetElement.nextElementSibling;}}else{parent.appendChild(dragElement);context.insertBefore=null;}}context.draggedTo=parent;}}/**
     * Moves element being dragged back to its original position.
     * @private
     */},{key:"revertPosition",value:function revertPosition(){var context=this.context,original=context.originalPosition;// revert to correct location
if(original.next){var isNoop=original.next&&original.next.previousSibling===context.dragging||!original.next&&context.dragging===original.parent.lastChild;if(!isNoop){original.parent.insertBefore(context.dragging,original.next);}}else{original.parent.appendChild(context.dragging);}// no target container
context.draggedTo=null;}//endregion
}]);return DragHelperContainer;}(Target||Base));};/**
 * @module Common/helper/mixin/DragHelperTranslate
 */var noScroll={pageXOffset:0,pageYOffset:0};/**
 * Mixin for DragHelper that handles repositioning (translating) an element within its container
 *
 * @private
 * @mixin
 */var DragHelperTranslate=function DragHelperTranslate(Target){return(/*#__PURE__*/function(_Delayable6){_inherits2(DragHelperTranslate,_Delayable6);function DragHelperTranslate(){_classCallCheck2(this,DragHelperTranslate);return _possibleConstructorReturn2(this,_getPrototypeOf2(DragHelperTranslate).apply(this,arguments));}_createClass2(DragHelperTranslate,[{key:"initTranslateDrag",//region Init
/**
     * Initialize translation drag mode.
     * @private
     */value:function initTranslateDrag(){var me=this;if(!me.isElementDraggable&&me.targetSelector){me.isElementDraggable=function(element){return DomHelper.up(element,me.targetSelector);};}}//endregion
//region Grab, update, finish
/**
     * Grab an element which can be moved using translation.
     * @private
     * @param event
     * @returns {Boolean}
     */},{key:"grabTranslateDrag",value:function grabTranslateDrag(event){var me=this,element=me.getTarget(event);if(element){me.context={valid:true,action:me.mode,// translateX or translateXY...
element:element,startPageX:event.pageX,startPageY:event.pageY,startClientX:event.clientX,startClientY:event.clientY};return true;}return false;}},{key:"getTarget",value:function getTarget(event){return DomHelper.up(event.target,this.targetSelector);}/**
     * Start translating, called on first mouse move after dragging
     * @private
     * @param event
     */},{key:"startTranslateDrag",value:function startTranslateDrag(event){var me=this,context=me.context,relatedElements=context.relatedElements;var element=context.dragProxy||context.element;if(element&&!context.started){var grabbed=element,grabbedParent=element.parentElement,// When cloning an element to be dragged, we place it in BODY by default
dragWithin=me.dragWithin=me.dragWithin||me.cloneTarget&&document.body,outerElement=me.outerElement;if(me.cloneTarget){var offsetX=DomHelper.getOffsetX(element,dragWithin),offsetY=DomHelper.getOffsetY(element,dragWithin),offsetWidth=element.offsetWidth,offsetheight=element.offsetHeight;element=this.createProxy(element);// Match the grabbed element's size and position.
DomHelper.setTranslateXY(element,offsetX,offsetY);element.style.width="".concat(offsetWidth,"px");element.style.height="".concat(offsetheight,"px");element.classList.add(me.dragProxyCls);dragWithin.appendChild(element);grabbed.classList.add('b-drag-original');if(me.hideOriginalElement){grabbed.classList.add('b-hidden');}}Object.assign(me.context,{// The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself
element:element,// The original element upon which the mousedown event triggered a drag operation
grabbed:grabbed,// The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop
grabbedParent:grabbedParent,// The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop
grabbedNextSibling:element.nextElementSibling,// elements position within parent element
elementStartX:DomHelper.getTranslateX(element),elementStartY:DomHelper.getTranslateY(element),elementX:DomHelper.getOffsetX(element,dragWithin||outerElement),elementY:DomHelper.getOffsetY(element,dragWithin||outerElement),scrollX:0,scrollY:0,scrollManagerElementContainsDragProxy:!me.cloneTarget||dragWithin===outerElement});element.classList.add(me.draggingCls);if(dragWithin){context.parentElement=element.parentElement;if(dragWithin!==element.parentElement){dragWithin.appendChild(element);}me.updateTranslateProxy(event);}if(relatedElements){relatedElements.forEach(function(r){r.classList.add(me.draggingCls);});}}}/**
     * Limit translation to outer bounds and specified constraints
     * @private
     * @param element
     * @param x
     * @param y
     * @returns {{constrainedX: *, constrainedY: *}}
     */},{key:"applyConstraints",value:function applyConstraints(element,x,y){var me=this,dragWithin=me.dragWithin,_ref79=dragWithin===document.body?window:noScroll,pageXOffset=_ref79.pageXOffset,pageYOffset=_ref79.pageYOffset;// limit to outer elements edges
if(dragWithin&&me.constrain){if(x<0)x=0;if(x+element.offsetWidth>dragWithin.scrollWidth)x=dragWithin.scrollWidth-element.offsetWidth;if(y<0)y=0;if(y+element.offsetHeight>dragWithin.scrollHeight)y=dragWithin.scrollHeight-element.offsetHeight;}// limit horizontally
if(typeof me.minX==='number'){x=Math.max(me.minX+pageXOffset,x);}if(typeof me.maxX==='number'){x=Math.min(me.maxX+pageXOffset,x);}// limit vertically
if(typeof me.minY==='number'){y=Math.max(me.minY+pageYOffset,y);}if(typeof me.maxY==='number'){y=Math.min(me.maxY+pageYOffset,y);}return{constrainedX:x,constrainedY:y};}/**
     * Update elements translation on mouse move.
     * @private
     * @param event
     */},{key:"updateTranslateProxy",value:function updateTranslateProxy(event,scrollManagerConfig){var me=this,mode=me.mode,lockX=me.lockX,lockY=me.lockY,context=me.context,element=context.dragProxy||context.element,relatedElements=context.relatedElements,relatedElDragFromPos=context.relatedElDragFromPos;// If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need to take the scrollManager scroll values into account
// since it is only relevant when dragProxy is inside the Grid (where scroll manager operates).
if(context.scrollManagerElementContainsDragProxy&&scrollManagerConfig){context.scrollX=scrollManagerConfig.scrollRelativeLeft;context.scrollY=scrollManagerConfig.scrollRelativeTop;}context.pageX=event.pageX;context.pageY=event.pageY;context.clientX=event.clientX;context.clientY=event.clientY;var newX=context.elementStartX+event.pageX-context.startPageX+context.scrollX,newY=context.elementStartY+event.pageY-context.startPageY+context.scrollY,_me$applyConstraints=me.applyConstraints(element,newX,newY),constrainedX=_me$applyConstraints.constrainedX,constrainedY=_me$applyConstraints.constrainedY;if(mode==='translateXY'&&!(lockX||lockY)){DomHelper.setTranslateXY(element,constrainedX,constrainedY);}else if(mode==='translateX'||lockY){DomHelper.setTranslateX(element,constrainedX);}else if(mode==='translateY'||lockX){DomHelper.setTranslateY(element,constrainedY);}if(relatedElements){var deltaX=!lockX&&mode!=='translateY'?constrainedX-context.elementStartX:0,deltaY=!lockY&&mode!=='translateX'?constrainedY-context.elementStartY:0;relatedElements.forEach(function(r,i){var _relatedElDragFromPos=_slicedToArray(relatedElDragFromPos[i],2),x=_relatedElDragFromPos[0],y=_relatedElDragFromPos[1];DomHelper.setTranslateXY(r,x+deltaX,y+deltaY);});}context.newX=constrainedX;context.newY=constrainedY;}/**
     * Finalize drag, fire drop.
     * @private
     * @param event
     * @fires drop
     */},{key:"finishTranslateDrag",value:function finishTranslateDrag(event){var me=this,context=me.context,xChanged=context.newX!==context.elementStartX,yChanged=context.newY!==context.elementStartY,element=context.dragProxy||context.element,relatedElements=context.relatedElements;function cleanUp(){element.classList.remove(me.invalidCls);element.classList.remove(me.draggingCls);if(relatedElements){relatedElements.forEach(function(r){r.classList.remove(me.invalidCls);r.classList.remove(me.draggingCls);});}// If we're currently aborting, the b-hidden CSS class will be removed after animation is complete
if(!element.classList.contains('b-aborting')){if(me.hideOriginalElement){context.grabbed.classList.remove('b-hidden');}context.grabbed.classList.remove('b-drag-original');}}if(!me.ignoreSamePositionDrop||me.mode!=='translateY'&&xChanged||me.mode!=='translateX'&&yChanged){if(context.valid===false){me.abortTranslateDrag(true,event);}else{var targetRect=Rectangle.from(me.dragWithin||me.outerElement);if(!me.minX&&event.pageX<targetRect.left||!me.maxX&&event.pageX>targetRect.right||!me.minY&&event.pageY<targetRect.top||!me.maxY&&event.pageY>targetRect.bottom){// revert location when dropped outside allowed element
context.valid=false;me.abortTranslateDrag(true,event);}else{context.finalize=function(){var valid=arguments.length>0&&arguments[0]!==undefined?arguments[0]:context.valid;if(context.asyncCleanup){cleanUp();}// abort if invalid (and context still exists, might have been aborted from outside)
if(!valid&&me.context){// abort if flagged as invalid, without triggering abort or drop again
me.abortTranslateDrag(true,null,true);}else if(me.cloneTarget||context.dragProxy){element.remove();}me.reset();};// allow async finalization by setting async to true on context in drop handler,
// requires implementer to call context.finalize later to finish the drop
context.async=false;me.trigger('drop',{context:context,event:event});if(!context.async){// finalize immediately
context.finalize();}else{context.awaitingFinalization=true;}}}if(!context.asyncCleanup){cleanUp();}}else{// no change, abort but not as invalid
me.abortTranslateDrag(false,event);}}/**
     * Abort translation
     * @private
     * @param invalid
     * @fires abort
     */},{key:"abortTranslateDrag",value:function abortTranslateDrag(){var invalid=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var event=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var silent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,context=me.context,relatedElements=context.relatedElements,relatedElStartPos=context.relatedElStartPos,grabbed=context.grabbed,element=context.dragProxy||context.element,resetEl=me.cloneTarget&&me.hideOriginalElement?grabbed:element;var elementStartX=context.elementStartX,elementStartY=context.elementStartY;if(element&&context.started){// Put the dragged element back where it was
if(!me.cloneTarget&&me.dragWithin&&me.dragWithin!==context.grabbedParent){context.grabbedParent.insertBefore(element,context.grabbedNextSibling);}grabbed.classList.remove('b-hidden');// Align the now visible grabbed element with the clone, so that it looks like it's
// sliding back into place when the clone is removed
if(me.cloneTarget){if(me.hideOriginalElement){var _DomHelper$getTransla9=DomHelper.getTranslateXY(grabbed);var _DomHelper$getTransla10=_slicedToArray(_DomHelper$getTransla9,2);elementStartX=_DomHelper$getTransla10[0];elementStartY=_DomHelper$getTransla10[1];DomHelper.alignTo(grabbed,element);// The getBoundingClientRect is important. The aligning above must be processed
// by a forced synchronous layout *before* the b-aborting class is added below.
resetEl.getBoundingClientRect();}element.remove();}// animated restore of position.
resetEl.classList.add('b-aborting');// Move the elements back to their original positions.
if(me.mode==='translateXY'&&!(me.lockX||me.lockY)){DomHelper.setTranslateXY(resetEl,elementStartX,elementStartY);relatedElements&&relatedElements.forEach(function(element,i){element.classList.add('b-aborting');DomHelper.setTranslateXY(element,relatedElStartPos[i][0],relatedElStartPos[i][1]);});}if(me.mode==='translateX'||me.lockY){DomHelper.setTranslateX(resetEl,elementStartX);relatedElements&&relatedElements.forEach(function(element,i){element.classList.add('b-aborting');DomHelper.setTranslateX(element,relatedElStartPos[i][0]);});}if(me.mode==='translateY'||me.lockX){DomHelper.setTranslateY(resetEl,elementStartY);relatedElements&&relatedElements.forEach(function(element,i){element.classList.add('b-aborting');DomHelper.setTranslateY(element,relatedElStartPos[i][1]);});}me.setTimeout(function(){resetEl.classList.remove('b-aborting');grabbed.classList.remove('b-dragging');grabbed.classList.remove('b-drag-original');if(!me.cloneTarget){relatedElements&&relatedElements.forEach(function(element,i){element.classList.remove('b-aborting');});element.classList.remove('b-aborting');element.classList.remove(me.draggingCls);element.classList.remove(me.invalidCls);}},300,undefined,true);if(!silent){me.trigger(invalid?'drop':'abort',{context:context,event:event});}}me.reset();}//endregion
}]);return DragHelperTranslate;}(Delayable(Target||Base)));};//TODO: add touch support
//TODO: add pointer events support
/**
 * @module Common/helper/DragHelper
 */var documentListeners={down:'onMouseDown',move:'onMouseMove',up:'onMouseUp',docclick:'onDocumentClick',touchstart:'onTouchStart',touchmove:'onTouchMove',touchend:'onTouchEnd',keydown:'onKeyDown'};/**
 * Helps with drag and drop. Supports two modes of dragging:
 * * `container` - moving/rearranging elements within and between specified containers
 * * `translateXY` - repositioning an element withing its container
 *
 * Usage examples:
 * ```
 * // dragging element between containers
 * let dragHelper = new DragHelper({
 *   mode       : 'container',
 *   containers : [ container1, container2 ]
 * });
 *
 * // dragging element within container
 * let dragHelper = new DragHelper({
 *   mode    : 'translateXY',
 *   targetSelector: 'div.moveable'
 * });
 * ```
 * In the various Drag event handlers, you will have access to the raw DOM event and some useful `context` of the drag operation:
 *
 * ```
 *  myDrag.on({
 *      drag : ({event , context}) {
 *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself
 *           const element = context.element;
 *
 *           // The original mousedown element upon which triggered the drag operation
 *           const grabbed = context.grabbed;
 *
 *           // The target under the current mouse / pointer / touch position
 *           const target = context.target;
 *       }
 *  });
 * ```
 *
 * Simple drag drop with a drop target specified:
 * ```
 * export default class MyDrag extends DragHelper {
        static get defaultConfig() {
            return {
                // Don't drag the actual cell element, clone it
                cloneTarget        : true,
                mode               : 'translateXY',
                // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified
                dropTargetSelector : '.yourDropTarget',

                // Only allow dragging elements with the 'draggable' CSS class
                targetSelector : '.draggable'
            };
        }

        construct(config) {
            const me = this;

            super.construct(config);

            me.on({
                dragstart : me.onDragStart
            });
        }

        onDragStart({ event, context }) {
            const target = context.target;

            // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your
            // data model. You can store your data on the context object which is available to you in all drag-related events
            context.userId = target.dataset.userId;
        }

        onEquipmentDrop({ context, event }) {
            const me = this;

            if (context.valid) {
                const userId   = context.userId,
                      droppedOnTarget = context.target;

                console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);

                // Dropped on a scheduled event, display toast
                WidgetHelper.toast(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);

                // tell the drag helper the operation is finished
                me.context.finalize();
            }
        }
    };
 * ```
 * @mixes Common/helper/mixin/DragHelperContainer
 * @mixes Common/helper/mixin/DragHelperTranslate
 * @mixes Common/mixin/Events
 * @extends Common/Base
 */var DragHelper=/*#__PURE__*/function(_base$mixes2){_inherits2(DragHelper,_base$mixes2);function DragHelper(){_classCallCheck2(this,DragHelper);return _possibleConstructorReturn2(this,_getPrototypeOf2(DragHelper).apply(this,arguments));}_createClass2(DragHelper,[{key:"construct",//endregion
//region Events
/**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @preventable
     * @event beforeDragStart
     * @param {DragHelper} source
     * @param {Object} context
     * @param {MouseEvent|TouchEvent} event
     */ /**
     * Fired when dragging starts.
     * @event dragStart
     * @param {DragHelper} source
     * @param {Object} context
     * @param {MouseEvent|TouchEvent} event
     */ /**
     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`
     * @event drag
     * @param {DragHelper} source
     * @param {Object} context
     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {MouseEvent} event
     */ //endregion
//region Init
/**
     * Initializes a new DragHelper.
     * @param {Object} config Configuration object, accepts options specified under Configs above
     * @example
     * new DragHelper({
     *   containers: [div1, div2],
     *   isElementDraggable: element => element.className.contains('handle'),
     *   outerElement: topParent,
     *   listeners: {
     *     drop: onDrop,
     *     thisObj: this
     *   }
     * });
     * @function constructor
     */value:function construct(config){var me=this;_get2(_getPrototypeOf2(DragHelper.prototype),"construct",this).call(this,config);me.initListeners();if(BrowserHelper.isTouchDevice){me.handleSize=me.touchHandleSize;}if(me.mode==='container'){me.initContainerDrag();}else if(me.mode.startsWith('translate')){if(me.lockY){me.mode='translateX';}else if(me.lockX){me.mode='translateY';}me.initTranslateDrag();}}},{key:"doDestroy",value:function doDestroy(){// Abort dragging
this.abort(true);_get2(_getPrototypeOf2(DragHelper.prototype),"doDestroy",this).call(this);}/**
     * Initialize listener
     * @private
     */},{key:"initListeners",value:function initListeners(){var dragStartListeners={element:this.outerElement,mousedown:documentListeners.down,thisObj:this};if(BrowserHelper.isTouchDevice){dragStartListeners.touchstart=documentListeners.touchstart;}// These will be autoDetached upon destroy
EventHelper.on(dragStartListeners);}//endregion
//region Events
/**
     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional
     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call
     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.
     * @event drop
     * @param {DragHelper} dragHelper
     * @param {Object} context
     */},{key:"onPointerDown",value:function onPointerDown(event){var me=this,handled=false,isTouch='touches'in event;// If a drag is ongoing already, finalize it and don't proceed with new drag (happens if user does mouseup
// outside browser window). Also handles the edge case of trying to start a new drag while previous is awaiting
// finalization, in which case it just bails out.
if(me.context){if(!me.context.awaitingFinalization){me.onMouseUp(event);me.reset();}return;}me.startEvent=event;if(me.isElementDraggable&&!me.isElementDraggable(event.target,event))return;if(me.mode){if(!handled&&me.mode==='container')handled=me.grabContainerDrag(event);if(!handled&&me.mode.startsWith('translate'))handled=me.grabTranslateDrag(event);}if(handled){var dragListeners={element:document,thisObj:me,keydown:documentListeners.keydown};if(isTouch){dragListeners.touchmove={handler:documentListeners.touchmove,passive:false// We need to be able to preventDefault on the touchmove
};// Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired
// iOS do fire touchend
dragListeners.touchend=dragListeners.pointerup=documentListeners.touchend;}else{dragListeners.mousemove=documentListeners.move;dragListeners.mouseup=documentListeners.up;}// A listener detacher is returned;
me.removeListeners=EventHelper.on(dragListeners);if(me.dragWithin&&me.dragWithin!==me.outerElement){var box=me.dragWithin.getBoundingClientRect();me.minY=box.top;me.maxY=box.bottom;me.minX=box.left;me.maxX=box.right;}}}/**
     * @param event
     * @private
     */},{key:"onTouchStart",value:function onTouchStart(event){var me=this;// only allowing one finger for now...
if(event.touches.length===1){me.touchStartTimer=me.setTimeout(function(){me.touchStartTimer=null;},me.touchStartDelay);me.onPointerDown(event);}}/**
     * Grab draggable element on mouse down.
     * @private
     * @param event
     */},{key:"onMouseDown",value:function onMouseDown(event){// only dragging with left mouse button
if(event.button===0){this.onPointerDown(event);}}},{key:"internalMove",value:function internalMove(event){var me=this,context=me.context,distance=EventHelper.getDistanceBetween(me.startEvent,event),abortTouchDrag=me.touchStartTimer&&distance>me.dragThreshold;if(abortTouchDrag){me.abort(true);return;}if(!me.touchStartTimer&&context&&context.element&&// Only target Elements, not text nodes
event.target.nodeType===Node.ELEMENT_NODE&&(context.started||distance>=me.dragThreshold)){if(!context.started){// triggers beforeDragStart, dragStart. returning false from beforeDragStart aborts drag
if(me.callPreventable('dragStart',{context:context,event:event},function(){var direction=me.lockX?'vertical':me.lockY?'horizontal':'both';if(context.action.startsWith('translate')){me.startTranslateDrag(event);}else if(context.action==='container'){me.startContainerDrag(event);}context.started=true;// Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present
if(me.scrollManager){me.scrollManager.startMonitoring({direction:direction,element:me.dragWithin||me.outerElement,callback:function callback(config){if(me.context.element&&me.lastMouseMoveEvent){// Indicate that this is a 'fake' mousemove event as a result of the scrolling
me.lastMouseMoveEvent.isScroll=true;me.update(me.lastMouseMoveEvent,config);}},thisObj:me});}// Global informatoinal class for when DragHelper is dragging
document.body.classList.add('b-draghelper-active');})===false){return me.abort();}}// to prevent view drag (scroll) on ipad
if(event.type==='touchmove'){event.preventDefault();event.stopImmediatePropagation();}me.update(event);}}},{key:"onTouchMove",value:function onTouchMove(event){this.internalMove(event);}/**
     * Move drag element with mouse.
     * @param event
     * @fires beforeDragStart
     * @fires dragStart
     * @private
     */},{key:"onMouseMove",value:function onMouseMove(event){this.internalMove(event);}/**
     * Updates drag, called when an element is grabbed and mouse moves
     * @private
     * @fires drag
     */},{key:"update",value:function update(event,scrollManagerConfig){var me=this,context=me.context,draggingElement=context.dragProxy||context.element;// two different modes used
var target=event.target,scrollingPageElement=document.scrollingElement||document.body;// "pointer-events:none" touchmove has no effect for the touchmove event target, meaning we cannot know
// what's under the cursor as easily in touch devices
if(event.type==='touchmove'){var touch=event.changedTouches[0];target=DomHelper.elementFromPoint(touch.clientX+scrollingPageElement.scrollLeft,touch.clientY+scrollingPageElement.scrollTop);}context.target=target;if(me.dropTargetSelector){context.valid=Boolean(target.closest(me.dropTargetSelector));}else{// assume valid drop location
context.valid=true;}// Move the drag proxy or dragged element before triggering the drag event
if(context.action){if(context.action==='container'){me.updateContainerProxy(event,scrollManagerConfig);}if(context.action.startsWith('translate')){me.updateTranslateProxy(event,scrollManagerConfig);}}// Allow external code to validate the context before updating a container drag
me.trigger('drag',{context:context,event:event});// Move the placeholder element into its new place.
// This will see the new state of context if mutated by a drag listener.
if(context.action==='container'){me.updateContainerDrag(event,scrollManagerConfig);}// change to toggle with force when not supporting IE11 any longer
draggingElement.classList[context.valid?'remove':'add'](me.invalidCls);if(event)me.lastMouseMoveEvent=event;}/**
     * Abort dragging
     * @fires abort
     */},{key:"abort",value:function abort(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,context=me.context;me.scrollManager&&me.scrollManager.stopMonitoring(me.dragWithin||me.outerElement);if(context){// Force a synchronous layout so that transitions from this point will work.
context.element.getBoundingClientRect();// Aborted drag not considered valid
context.valid=false;if(context.action==='container'){me.abortContainerDrag(undefined,undefined,silent);}else{me.abortTranslateDrag(undefined,undefined,silent);}}me.reset();}// Empty class implementation. If listeners *are* added, the detacher is added
// as an instance property. So this is always callable.
},{key:"removeListeners",value:function removeListeners(){}// Called when a drag operation is completed, aborted, or when drag doesn't start (simple click)
// Removes DOM listeners and resets context
},{key:"reset",value:function reset(){document.body.classList.remove('b-draghelper-active');this.removeListeners();/**
         * Fired when a drag operation is completed, aborted, or when drag doesn't start (simple click)
         * @event reset
         * @private
         * @param {DragHelper} dragHelper
         */this.trigger('reset');this.context=this.lastMouseMoveEvent=null;}},{key:"onTouchEnd",value:function onTouchEnd(event){this.onMouseUp(event);}/**
     * This is a capture listener, only added during drag, which prevents a click gesture
     * propagating from the terminating mouseup geature
     * @param {MouseEvent} event
     * @private
     */},{key:"onDocumentClick",value:function onDocumentClick(event){event.stopPropagation();}/**
     * Drop on mouse up (if dropped on valid target).
     * @param event
     * @private
     */},{key:"onMouseUp",value:function onMouseUp(event){var me=this,context=me.context;me.removeListeners();if(context){me.scrollManager&&me.scrollManager.stopMonitoring(me.dragWithin||me.outerElement);if(context.action==='container'){me.finishContainerDrag(event);}else if(context.started&&context.action.startsWith('translate')){me.finishTranslateDrag(event);}if(context.started){// Prevent the impending document click from the mouseup event from propagating
// into a click on our element.
var clickPreventer=EventHelper.on({element:document,thisObj:me,click:documentListeners.docclick,capture:true,once:true});// In case a click did not ensue, remove the listener
me.setTimeout(clickPreventer,50);}else{me.reset();}}}/**
     * Cancel on ESC key
     * @param event
     * @private
     */},{key:"onKeyDown",value:function onKeyDown(event){if(event.key==='Escape')this.abort();}/**
     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default
     */},{key:"createProxy",value:function createProxy(element){var clone=element.cloneNode(true);clone.removeAttribute('id');return clone;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Drag proxy CSS class
             * @config {String}
             * @default
             * @private
             */dragProxyCls:'b-drag-proxy',/**
             * CSS class added when drag is invalid
             * @config {String}
             * @default
             */invalidCls:'b-drag-invalid',/**
             * CSS class added to the source element in Container drag
             * @config {String}
             * @default
             * @private
             */draggingCls:'b-dragging',/**
             * CSS class added to the source element in Container drag
             * @config {String}
             * @default
             * @private
             */dropPlaceholderCls:'b-drop-placeholder',/**
             * CSS class added when resizing
             * @config {String}
             * @default
             * @private
             */resizingCls:'b-resizing',/**
             * The amount of pixels to move mouse before it counts as a drag operation
             * @config {Number}
             * @default
             */dragThreshold:5,/**
             * Resizing handle size
             * @config {Number}
             * @default
             */handleSize:10,/**
             * Resizing handle size on touch devices
             * @config {Number}
             * @default
             */touchHandleSize:30,/**
             * Minimum width when resizing
             * @config {Number}
             * @default
             */minWidth:1,/**
             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)
             * @config {HTMLElement}
             * @default
             */outerElement:document.body,/**
             * Outer element that limits where element can be dragged
             * @config {HTMLElement}
             * @default
             */dragWithin:null,/**
             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to "overlap" edges)
             * @config {Boolean}
             * @default
             */constrain:true,/**
             * Smallest allowed x when dragging horizontally.
             * @config {Number}
             * @default
             */minX:null,/**
             * Largest allowed x when dragging horizontally.
             * @config {Number}
             * @default
             */maxX:null,/**
             * Smallest allowed y when dragging horizontally.
             * @config {Number}
             * @default
             */minY:null,/**
             * Largest allowed y when dragging horizontally.
             * @config {Number}
             * @default
             */maxY:null,/**
             * Enabled dragging, specify mode:
             * <table>
             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers
             * <tr><td>translateXY<td>Allows dragging within a parent container
             * </table>
             * @config {String}
             * @default
             * @private
             */mode:null,/**
             * A function that determines if dragging an element is allowed. Gets called with the element as argument,
             * return true to allow dragging or false to prevent.
             * @config {Function}
             * @default
             */isElementDraggable:null,/**
             * A CSS selector used to determine if dragging an element is allowed.
             * @config {String}
             * @default
             */targetSelector:null,/**
             * A CSS selector used to determine if a drop is allowed at the current position.
             * @config {String}
             * @default
             */dropTargetSelector:null,/**
             * Set to true to clone the dragged target, and not move the actual target DOM node.
             * @config {Boolean}
             * @default
             */cloneTarget:false,/**
             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).
             * @config {Boolean}
             * @default
             */hideOriginalElement:false,/**
             * Containers whose elements can be rearranged (and moved between the containers). Used when
             * mode is set to "container".
             * @config {HTMLElement[]}
             * @default
             */containers:null,/**
             * A CSS selector used to exclude elements when using container mode
             * @config {String}
             * @default
             */ignoreSelector:null,/**
             * A CSS selector used to determine where handles should be "displayed" when resizing. Defaults to
             * targetSelector if unspecified
             * @config {String}
             * @default
             */handleSelector:null,startEvent:null,/**
             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.
             * @config {Boolean}
             * @default
             */lockX:false,/**
             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.
             * @config {Boolean}
             * @default
             */lockY:false,touchStartDelay:300,ignoreSamePositionDrop:true};}}]);return DragHelper;}(base(Base).mixes(Events,DragHelperContainer,DragHelperTranslate));exports.DragHelper=DragHelper;DragHelper._$name='DragHelper';/**
 * @module Common/helper/util/DomClassList
 */ /**
 * This class encapsulates a list of CSS classes which can be set as the `className`
 * on an `HTMLElement`.
 *
 * Properties names set on this class equate to *adding* a class if the property's value
 * is _truthy_, or removing a class if the value is _falsy_.
 *
 * ```javascript
 * const myClassList = new DomClassList('b-test-button');
 *
 * myClassList.add('test-class');
 * myClassList.important = 1;
 *
 * myHtmlElement.className = myClassList; // Sets it to "b-test-button test-class important"
 * ```
 */var DomClassList=/*#__PURE__*/function(){function DomClassList(){_classCallCheck2(this,DomClassList);for(var _len48=arguments.length,classes=new Array(_len48),_key48=0;_key48<_len48;_key48++){classes[_key48]=arguments[_key48];}if(_typeof(classes[0])==='object'){Object.assign(this,classes[0]);}else{this.process(1,classes);}// String value needs recalculating
this[dirtySymbol]=true;}/**
     * Returns a clone of this DomClassList with all the same keys set.
     * @returns {Common.helper.util.DomClassList} A clone of this DomClassList.
     */_createClass2(DomClassList,[{key:"clone",value:function clone(){return new DomClassList(this);}// An instance of this class may be assigned directly to an element's className
// it will be coerced to a string value using this method.
},{key:"toString",value:function toString(){// Adding space at the end if there is content to make concatenation code simpler in renderers.
return this.length?"".concat(this.value," "):'';}/**
     * Analogous to string.trim, returns the string value of this `DomClassList` with no trailing space.
     * @returns {String} A concatenated string value of all the class names in this `DomClassList`
     * separated by spaces.
     */},{key:"trim",value:function trim(){return this.value;}/**
     * Compares this ClassList to another ClassList (or class name string of space separated classes).
     * If the *same class names, regardless of order* are present, the two are considered equal.
     *
     * So `new DomClassList('foo bar bletch').isEqual('bletch bar foo')` would return `true`
     * @param {Common.helper.util.DomClassList|String} other The `DomClassList` or string of classes to compare to.
     * @returns {Boolean} `true` if the two contain the same class names.
     */},{key:"isEqual",value:function isEqual(other){if(typeof other==='string'){testClassList.value=other;other=testClassList;}if(this.length===other.length){var otherClasses=ObjectHelper.getTruthyKeys(other);for(var i=0,len=otherClasses.length;i<len;i++){if(!this[otherClasses[i]]){return false;}}return true;}return false;}},{key:"process",value:function process(value,classes){var len=classes.length;for(var i=0;i<len;i++){if(classes[i]){var cls=classes[i],splitClasses=cls.values?Array.from(cls.values()):cls.item?Array.from(cls):cls.split(whiteSpaceRe$2),_len49=splitClasses.length;for(var _i18=0;_i18<_len49;_i18++){if(splitClasses[_i18]){this[splitClasses[_i18]]=value;}}}}// String value needs recalculating
this[dirtySymbol]=true;}/**
     * Add CSS class(es)
     * ```
     * myClassList.add('bold', 'small');
     * ```
     * @param {String} classes CSS classes to add
     */},{key:"add",value:function add(){for(var _len50=arguments.length,classes=new Array(_len50),_key49=0;_key49<_len50;_key49++){classes[_key49]=arguments[_key49];}this.process(1,classes);}/**
     * Remove CSS class(es)
     * ```
     * myClassList.remove('bold', 'small');
     * ```
     * @param {String} classes CSS classes to remove
     */},{key:"remove",value:function remove(){for(var _len51=arguments.length,classes=new Array(_len51),_key50=0;_key50<_len51;_key50++){classes[_key50]=arguments[_key50];}this.process(0,classes);}/**
     * Analogous to the `String#split` method, but with no delimiter
     * parameter. This method returns an array containing the individual
     * CSS class names set.
     * @returns {String[]} The individual class names in this `DomClassList`
     */},{key:"split",value:function split(){return ObjectHelper.getTruthyKeys(this);}},{key:"forEach",value:function forEach(fn){return ObjectHelper.getTruthyKeys(this).forEach(fn);}// To gain some speed in DomHelper.sync(), faster than instanceof etc
},{key:"value",get:function get(){var me=this;if(me[dirtySymbol]){var keys=ObjectHelper.getTruthyKeys(me);me[lengthSymbol]=keys.length;me[valueSymbol]=keys.join(' ');me[dirtySymbol]=false;}return me[valueSymbol];},set:function set(value){var me=this,keys=Object.keys(me),len=keys.length;for(var i=0;i<len;i++){delete me[keys[i]];}if(value){me.process(1,[value]);}else{// String value needs recalculating
me[dirtySymbol]=true;}}},{key:"length",get:function get(){// Maintainer: We MUST access the value getter to force
// the value to be calculated if it's currently dirty.
return this.value?this[lengthSymbol]:0;}},{key:"isDomClassList",get:function get(){return true;}}]);return DomClassList;}();exports.DomClassList=DomClassList;var whiteSpaceRe$2=/\s+/,valueSymbol=Symbol('value'),lengthSymbol=Symbol('length'),dirtySymbol=Symbol('dirty'),testClassList=new DomClassList();DomClassList._$name='DomClassList';/**
 * @module Common/helper/util/RandomGenerator
 */ /**
 * Generates pseudo random numbers from predefined sequence of 100 numbers
 */var RandomGenerator=/*#__PURE__*/function(){function RandomGenerator(){_classCallCheck2(this,RandomGenerator);this.random100=[46,2,36,46,54,59,18,20,71,55,88,98,13,61,61,40,2,15,3,32,51,45,64,25,81,85,54,13,57,49,64,22,81,94,0,62,17,7,11,2,33,99,85,26,83,83,96,26,20,89,91,38,26,13,11,79,32,30,5,51,70,7,5,56,58,77,37,89,40,80,78,59,26,36,8,51,60,23,86,5,11,96,64,94,87,64,4,78,17,85,35,0,90,86,23,55,53,9,35,59,29,2,64,42,8,49,43,73,6,53,38,9,39,31,32,40,49,13,78,68,20,99,24,78,35,91,73,46,67,76,89,69,30,69,25,3,4,55,1,65,66,76,83,19,67,1,95,24,54,45,56,40,67,92,72,4,69,8,47,50,27,2,38,9,14,83,12,14,62,95,22,47,35,18,38,14,86,64,68,61,52,69,39,93,20,73,32,52,74,6,56,68,99,29,24,92,40,67,6,72,31,41,91,53,80,55,33,97,97,99,18,20,5,27,82,84,61,78,27,67,7,42,75,95,91,25,63,21,70,36,46,0,1,45,84,6,86,15,10,62,96,94,10,23,93,83,94,47,5,29,29,52,51,37,77,96,43,72,43,14,54,14,72,52,4,39,15,26,68,28,25,76,60,50,22,40,72,74,68,58,8,48,40,62,52,24,9,26,47,44,49,96,7,77,90,45,76,47,5,86,1,36,18,42,19,90,34,23,70,32,69,79,0,99,57,80,72,21,19,72,85,68,4,40,86,62,0,63,4,11,69,31,78,31,21,78,29,84,13,53,57,10,26,50,24,30,90,42,51,96,93,21,99,23,81,0,89,43,86,63,93,19,54,71,92,36,4,95,37,99,60,29,23,50,68,95,57,95,77,53,99,78,75,12,92,47,23,14,0,41,98,11,34,64,26,90,50,23,38,31,74,76,16,76,66,23,22,72,48,50,20,36,37,58,5,43,49,64,81,30,8,21,98,75,60,17,50,42,27,38,90,74,45,68,67,27,31,15,58,76,41,99,23,98,53,98,56,19,79,2,4,38,96,24,65,51,43,42,41,60,46,7,90,65,3,27,63,99,51,44,86,1,54,40,15,74,3,81,51,63,87,79,84,72,22,38,96,95,33,41,21,99,21,69,7,49,40,52,41,6,91,19,76,40,54,17,33,11,11,0,1,32,94,33,13,18,45,7,85,61,42,54,45,72,78,96,17,9,80,87,41,96,66,0,8,59,18,21,2,28,64,75,97,32,80,86,97,97,55,2,73,75,11,89,67,58,70,76,12,46,64,17,22,97,25,35,93,57,82,46,57,61,31,74,27,4,32,85,53,86,53,53,42,5,28,50,65,63,70,61,73,37,13,80,7,34,22,3,26,6,62,78,12,56,87,41,58,64,31,27,45,35,18,66,62,43,89,69,94,93,33,74,2,43,85,37,82,41,74,9,15,44,33,42,65,19,1,49,78,12,29,9,78,7,55,12,45,40,33,16,86,14,52,16,73,76,0,98,75,91,78,46,99,95,90,69,78,45,62,55,37,88,49,77,27,83,38,73,39,1,75,40,65,83,54,95,7,73,4,30,26,36,89,21,5,95,11,14,87,45,36,21,77,55,5,66,51,98,48,62,74,58,23,82,30,28,19,53,89,76,98,8,34,70,28,54,16,52,35,93,54,54,72,49,18,93,72,90,71,73,15,60,38,80,76,53,70,39,69,25,5,31,61,46,6,54,34,31,52,33,36,79,76,44,29,28,38,1,66,2,90,91,1,76,78,31,55,37,71,2,3,38,85,0,95,42,2,39,57,87,61,77,98,2,24,80,48,27,47,71,15,7,49,60,86,3,2,29,38,54,36,59,83,27,47,9,36,42,8,73,85,9,16,73,60,39,12,43,25,23,29,28,47,40,77,20,89,22,30,41,59,96,19,56,20,76,73,39,46,72,40,47,37,52,29,79,37,39,50,41,87,66,17,75,31,45,26,88,70,11,90,40,74,9,32,65,72,61,6,93,54,15,84,22,99,47,10,96,4,84,19,85,73,45,25,16,8,94,99,39,28,26,68,87,48,1,65,86,46,86,7,60,82,45,75,38,56,41,35,30,86,91,97,85,45,5,14,69,85,96,37,18,26,16,38,16,1,44,94,85,58,60,20,5,47,52,41,50,71,43,42,67,64,38,65,83,99,78,96,33,20,98,24,6,2,25,16,16,44,63,24,68,56,49,91,15,59,99,27,43,34,28,36,45,1,10,19,54,26,75,17,88,96,63,24,71,93,72,97,66,87,18,86];this.randomCache={};this.rndIndex=0;}/**
     * Returns next pseudo random integer number from sequence between 0 and max parameter value (99 is maximum value)
     * @param max max value
     * @returns {number}
     */_createClass2(RandomGenerator,[{key:"nextRandom",value:function nextRandom(max){var randomCache=this.randomCache,randomNumbers;if(randomCache[max]){randomNumbers=randomCache[max];}else{randomNumbers=this.random100.filter(function(num){return num<max;});randomCache[max]=randomNumbers;}return randomNumbers[this.rndIndex++%randomNumbers.length];}/**
     * Resets sequence to initial number
     */},{key:"reset",value:function reset(){this.rndIndex=0;}/**
     * Returns pseudo random array element
     * @param array input array
     * @returns {*}
     */},{key:"fromArray",value:function fromArray(array){return array[this.nextRandom(array.length)];}}]);return RandomGenerator;}();exports.RandomGenerator=RandomGenerator;RandomGenerator._$name='RandomGenerator';//TODO: add pointer events support
var documentListeners$1={down:'onMouseDown',move:'onMouseMove',up:'onMouseUp',docclick:'onDocumentClick',touchstart:'onTouchStart',touchmove:'onTouchMove',touchend:'onTouchEnd',keydown:'onKeyDown'};/**
 * @module Common/helper/ResizeHelper
 */ /**
 * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border
 * area on elements left and right edges.
 *
 * ```
 * // enable resizing all elements with class 'resizable'
 * let resizer = new ResizeHelper({
 *   targetSelector: '.resizable'
 * });
 * ```
 *
 * @mixes Common/mixin/Events
 * @internal
 */var ResizeHelper=/*#__PURE__*/function(_Events7){_inherits2(ResizeHelper,_Events7);function ResizeHelper(){_classCallCheck2(this,ResizeHelper);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResizeHelper).apply(this,arguments));}_createClass2(ResizeHelper,[{key:"construct",//endregion
//region Events
/**
     * Fires after resize
     * @event resize
     * @param {Common.helper.ResizeHelper} source
     * @param {Object} context Resize context
     */ /**
     * Fires when a resize is canceled (width is unchanged)
     * @event cancel
     * @param {Common.helper.ResizeHelper} source
     * @param {Object} context Resize context
     * @param {MouseEvent|TouchEvent} event Browser event
     */ /**
     * Fired while dragging
     * @event resizing
     * @param {Common.helper.ResizeHelper} source
     * @param {Object} context Resize context
     * @param {MouseEvent} event Browser event
     */ /**
     * Fired when dragging starts.
     * @event resizeStart
     * @param {Common.helper.ResizeHelper} source
     * @param {Object} context Resize context
     * @param {MouseEvent|TouchEvent} event Browser event
     */ //endregion
//region Init
value:function construct(config){var me=this;_get2(_getPrototypeOf2(ResizeHelper.prototype),"construct",this).call(this,config);// Larger grabbable zones on touch devices
if(!me.handleSelector&&BrowserHelper.isTouchDevice){me.handleSize=me.touchHandleSize;}me.handleVisibilityThreshold=me.handleVisibilityThreshold||2*me.handleSize;me.initListeners();me.initResize();}},{key:"doDestroy",value:function doDestroy(){this.abort(true);_get2(_getPrototypeOf2(ResizeHelper.prototype),"doDestroy",this).call(this);}/**
     * Initializes resizing
     * @private
     */},{key:"initResize",value:function initResize(){var me=this;if(!me.isElementResizable&&me.targetSelector){me.isElementResizable=function(element){return DomHelper.up(element,me.targetSelector);};}if(me.grab){var _me$grab=me.grab,edge=_me$grab.edge,element=_me$grab.element,event=_me$grab.event;me.startEvent=event;// emulates mousedown & grabResize
me.context={element:element,edge:edge,valid:true,async:false,elementStartX:DomHelper.getTranslateX(element)||element.offsetLeft,// extract x from translate
elementStartY:DomHelper.getTranslateY(element)||element.offsetTop,// extract x from translate
newX:DomHelper.getTranslateX(element)||element.offsetLeft,// No change yet on start, but info must be present
newY:DomHelper.getTranslateY(element)||element.offsetTop,// No change yet on start, but info must be present
elementWidth:element.offsetWidth,elementHeight:element.offsetHeight,startX:event.clientX+me.scrollLeft,startY:event.clientY+me.scrollTop,started:true,finalize:function finalize(){return me.reset&&me.reset();}};element.classList.add(me.resizingCls);me.internalStartResize(me.isTouch);}}/**
     * Initialize listeners
     * @private
     */},{key:"initListeners",value:function initListeners(){var me=this,dragStartListeners={element:me.outerElement,mousedown:documentListeners$1.down,thisObj:me};if(BrowserHelper.isTouchDevice){dragStartListeners.touchstart=documentListeners$1.touchstart;}else if(!me.handleSelector){dragStartListeners.mousemove={handler:documentListeners$1.move,// Filter events for checkResizeHandles so we only get called if the mouse
// is over one of our targets.
delegate:me.targetSelector};// We need to clean up when we exit one of our targets
dragStartListeners.mouseleave={handler:'onMouseLeaveTarget',delegate:me.targetSelector,capture:true};}// These will be autoDetached upon destroy
me.removeListeners=EventHelper.on(dragStartListeners);}},{key:"removeListeners",value:function removeListeners(){}//endregion
//region Scroll helpers
},{key:"internalStartResize",//endregion
//region Events
value:function internalStartResize(isTouch){var me=this,dragListeners={element:document,keydown:documentListeners$1.keydown,thisObj:me};if(isTouch){dragListeners.touchmove=documentListeners$1.touchmove;// Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired
// iOS do fire touchend
dragListeners.touchend=dragListeners.pointerup=documentListeners$1.touchend;}else{dragListeners.mousemove=documentListeners$1.move;dragListeners.mouseup=documentListeners$1.up;}// A listener detacher is returned;
me.removeDragListeners=EventHelper.on(dragListeners);me.scrollManager&&me.scrollManager.startMonitoring({direction:me.direction,// TODO Update this then when we add support for vertical resizing too
element:me.dragWithin||me.outerElement,callback:function callback(config){return me.context&&me.context.element&&me.lastMouseMoveEvent&&me.update(me.lastMouseMoveEvent,config);},thisObj:me});}// Empty class implementation. If listeners *are* added, the detacher is added
// as an instance property. So this is always callable.
},{key:"removeDragListeners",value:function removeDragListeners(){}},{key:"reset",value:function reset(){this.removeDragListeners();this.context=null;}},{key:"onPointerDown",value:function onPointerDown(isTouch,event){var me=this;me.startEvent=event;if(!me.isElementResizable||me.isElementResizable(event.target,event)){if(me.grabResizeHandle(isTouch,event)){// Stop event if resize handle was grabbed (resize started)
event.stopImmediatePropagation();me.internalStartResize(isTouch);}}}},{key:"onTouchStart",value:function onTouchStart(event){// only allowing one finger for now...
if(event.touches.length>1){return;}this.onPointerDown(true,event);}/**
     * Grab draggable element on mouse down.
     * @private
     * @param event
     */},{key:"onMouseDown",value:function onMouseDown(event){// only dragging with left mouse button
if(event.button!==0){return;}this.onPointerDown(false,event);}},{key:"internalMove",value:function internalMove(isTouch,event){var me=this,context=me.context;if(context&&context.element&&(context.started||EventHelper.getDistanceBetween(me.startEvent,event)>=me.dragThreshold)){if(!context.started){me.trigger('resizeStart',{context:context,event:event});context.started=true;}me.update(event);}// If a mousemove, and we are using zones, and not handles, we have to
// programatically check whether we are over a handle, and add/remove
// classes to change the mouse cursor to resize.
// If we are using handles, their CSS will set the mouse cursor.
else if(!isTouch&&!me.handleSelector){me.checkResizeHandles(event);}}},{key:"onTouchMove",value:function onTouchMove(event){this.internalMove(true,event);}/**
     * Move grabbed element with mouse.
     * @param event
     * @fires resizestart
     * @private
     */},{key:"onMouseMove",value:function onMouseMove(event){this.internalMove(false,event);}},{key:"internalEnd",value:function internalEnd(isTouch,event){var me=this,context=me.context;me.removeDragListeners();if(context){me.scrollManager&&me.scrollManager.stopMonitoring(me.dragWithin||me.outerElement);me.finishResize(event);// Resize could have not been finalized
if(me.context){// Prevent the impending document click from the mouseup event from propagating
// into a click on our element.
EventHelper.on({element:document,thisObj:me,click:documentListeners$1.docclick,capture:true,once:true});}}}},{key:"onTouchEnd",value:function onTouchEnd(event){this.internalEnd(true,event);}/**
     * Drop on mouse up (if dropped on valid target).
     * @param event
     * @private
     */},{key:"onMouseUp",value:function onMouseUp(event){this.internalEnd(false,event);}/**
     * This is a capture listener, only added during drag, which prevents a click gesture
     * propagating from the terminating mouseup geature
     * @param {MouseEvent} event
     * @private
     */},{key:"onDocumentClick",value:function onDocumentClick(event){event.stopPropagation();}/**
     * Cancel on ESC key
     * @param event
     * @private
     */},{key:"onKeyDown",value:function onKeyDown(event){if(event.key==='Escape'){this.abort();}}//endregion
//region Grab, update, finish
/**
     * Updates resize, called when an element is grabbed and mouse moves
     * @private
     * @fires resizing
     */},{key:"update",value:function update(event){var me=this,context=me.context,parentRectangle=Rectangle.from(me.outerElement.parentElement);// Calculate the current pointer X. Do not allow overflowing either edge
context.currentX=Math.max(Math.min(event.clientX,parentRectangle.right-1),parentRectangle.x)+me.scrollLeft;context.currentY=Math.max(Math.min(event.clientY,parentRectangle.bottom-1),parentRectangle.y)+me.scrollTop;me.updateResize(event);me.trigger('resizing',{context:context,event:event});context.element.classList[context.valid===false?'add':'remove'](me.invalidCls);// When IE11 support is dropped
// context.grabbed.classList.toggle(me.invalidCls, context.valid === false);
if(event){me.lastMouseMoveEvent=event;}}/**
     * Abort dragging
     */},{key:"abort",value:function abort(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;me.scrollManager&&me.scrollManager.stopMonitoring(me.dragWithin||me.outerElement);if(me.context){me.abortResize(null,silent);}}/**
     * Starts resizing, updates ResizeHelper#context with relevant info.
     * @private
     * @param {Boolean} isTouch
     * @param {MouseEvent} event
     * @returns {Boolean} True if handled, false if not
     */},{key:"grabResizeHandle",value:function grabResizeHandle(isTouch,event){var me=this;if(me.allowResize&&!me.allowResize(event.target,event)){return false;}var handleSelector=me.handleSelector,coordsFrom=event.type==='touchstart'?event.changedTouches[0]:event,clientX=coordsFrom.clientX,clientY=coordsFrom.clientY,// go up from "handle" to resizable element
element=me.targetSelector?DomHelper.up(event.target,me.targetSelector):event.target;if(element){var edge;// Calculate which edge to resize
// If there's a handle selector, see if it's anchored on the left or the right
if(handleSelector){if(event.target.matches(handleSelector)){if(me.direction==='horizontal'){if(event.pageX<DomHelper.getPageX(element)+element.offsetWidth/2){edge='left';}else{edge='right';}}else{if(event.pageY<DomHelper.getPageY(element)+element.offsetHeight/2){edge='top';}else{edge='bottom';}}}else{return false;}}// If we're not using handles, but just active zones
// then test whether the event position is in an active resize zone.
else{if(me.direction==='horizontal'){if(me.overLeftHandle(event,element)){edge='left';}else if(me.overRightHandle(event,element)){edge='right';}}else{if(me.overTopHandle(event,element)){edge='top';}else if(me.overBottomHandle(event,element)){edge='bottom';}}if(!edge){me.context=null;// not over an edge, abort
return false;}}// If resizing is initiated by a touch, we must preventDefault on the touchstart
// so that scrolling is not invoked when dragging. This is in lieu of a functioning
// touch-action style on iOS Safari. When that's fixed, this will not be needed.
if(event.type==='touchstart'){event.preventDefault();}if(me.trigger('beforeResizeStart',{element:element,event:event})!==false){// store initial size
me.context={element:element,edge:edge,valid:true,async:false,direction:me.direction,isTouch:isTouch,elementStartX:DomHelper.getTranslateX(element)||element.offsetLeft,// extract x from translate
elementStartY:DomHelper.getTranslateY(element)||element.offsetTop,// extract y from translate
newX:DomHelper.getTranslateX(element)||element.offsetLeft,// No change yet on start, but info must be present
newY:DomHelper.getTranslateY(element)||element.offsetTop,// No change yet on start, but info must be present
elementWidth:element.offsetWidth,elementHeight:element.offsetHeight,startX:clientX+me.scrollLeft,startY:clientY+me.scrollTop,finalize:function finalize(){return me.reset&&me.reset();}};element.classList.add(me.resizingCls);return true;}}return false;}/**
     * Check if mouse is over a resize handle (virtual). If so, highlight.
     * @private
     * @param event
     */},{key:"checkResizeHandles",value:function checkResizeHandles(event){var me=this,target=me.targetSelector?DomHelper.up(event.target,me.targetSelector):event.target;// mouse over a target element and allowed to resize?
if(target&&(!me.allowResize||me.allowResize(event.target,event))){me.currentElement=me.handleContainerSelector?DomHelper.up(event.target,me.handleContainerSelector):event.target;if(me.currentElement){var over=false;if(me.direction==='horizontal'){over=me.overLeftHandle(event,target)||me.overRightHandle(event,target);}else{over=me.overTopHandle(event,target)||me.overBottomHandle(event,target);}if(over){me.highlightHandle();// over handle
}else{me.unHighlightHandle();// not over handle
}}}else if(me.currentElement){me.unHighlightHandle();// outside element
}}},{key:"onMouseLeaveTarget",value:function onMouseLeaveTarget(event){var me=this;me.currentElement=me.handleContainerSelector?DomHelper.up(event.target,me.handleContainerSelector):event.target;if(me.currentElement){me.unHighlightHandle();}}/**
     * Updates size of target (on mouse move).
     * @private
     * @param event
     */},{key:"updateResize",value:function updateResize(event){var me=this,context=me.context;// flip which edge is being dragged depending on whether we're to the right or left of the mousedown
if(me.allowEdgeSwitch){if(me.direction==='horizontal'){context.edge=context.currentX>context.startX?'right':'left';}else{context.edge=context.currentY>context.startY?'bottom':'top';}}var// limit to outerElement if set
deltaX=context.currentX-context.startX,deltaY=context.currentY-context.startY,minWidth=DomHelper.getExtremalSizePX(context.element,'minWidth')||me.minWidth,maxWidth=DomHelper.getExtremalSizePX(context.element,'maxWidth')||me.maxWidth,minHeight=DomHelper.getExtremalSizePX(context.element,'minHeight')||me.minHeight,maxHeight=DomHelper.getExtremalSizePX(context.element,'maxHeight')||me.maxHeight,// dragging right edge right increases width, dragging left edge right decreases width
sign=context.edge==='right'||context.edge==='bottom'?1:-1,// new width, not allowed to go below minWidth
newWidth=context.elementWidth+deltaX*sign,width=Math.max(minWidth,newWidth),newHeight=context.elementHeight+deltaY*sign,height=Math.max(minHeight,newHeight);if(maxWidth>0){width=Math.min(width,maxWidth);}if(maxHeight>0){height=Math.min(height,maxHeight);}// remove flex when resizing
if(context.element.style.flex){context.element.style.flex='';}if(me.direction==='horizontal'){context.element.style.width=Math.abs(width)+'px';context.newWidth=width;// when dragging left edge, also update position (so that right edge remains in place)
if(context.edge==='left'||width<0){context.newX=Math.max(Math.min(context.elementStartX+context.elementWidth-me.minWidth,context.elementStartX+deltaX),0);if(!me.skipTranslate){DomHelper.setTranslateX(context.element,context.newX);}}// When dragging the right edge and we're allowed to flip the drag from left to right
// through the start point (eg drag event creation) the element must be at its initial X position
else if(context.edge==='right'&&me.allowEdgeSwitch&&!me.skipTranslate){DomHelper.setTranslateX(context.element,context.elementStartX);}}else{context.element.style.height=Math.abs(height)+'px';context.newHeight=height;// when dragging top edge, also update position (so that bottom edge remains in place)
if(context.edge==='top'||height<0){context.newY=Math.max(Math.min(context.elementStartY+context.elementHeight-me.minHeight,context.elementStartY+deltaY),0);if(!me.skipTranslate){DomHelper.setTranslateY(context.element,context.newY);}}// When dragging the bottom edge and we're allowed to flip the drag from top to bottom
// through the start point (eg drag event creation) the element must be at its initial Y position
else if(context.edge==='bottom'&&me.allowEdgeSwitch&&!me.skipTranslate){DomHelper.setTranslateY(context.element,context.elementStartY);}}}/**
     * Finalizes resize, fires drop.
     * @private
     * @param event
     * @fires resize
     * @fires cancel
     */},{key:"finishResize",value:function finishResize(event){var me=this,context=me.context,eventObject={context:context,event:event};context.element.classList.remove(me.resizingCls);var changed=false;if(me.direction==='horizontal'){changed=context.newWidth&&context.newWidth!==context.elementWidth;}else{changed=context.newHeight&&context.newHeight!==context.elementHeight;}me.trigger(changed?'resize':'cancel',eventObject);if(!context.async){context.finalize();}}/**
     * Abort resizing
     * @private
     * @fires cancel
     */},{key:"abortResize",value:function abortResize(){var event=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,context=me.context;context.element.classList.remove(me.resizingCls);if(me.direction==='horizontal'){DomHelper.setTranslateX(context.element,context.elementStartX);context.element.style.width=context.elementWidth+'px';}else{DomHelper.setTranslateY(context.element,context.elementStartY);context.element.style.height=context.elementHeight+'px';}!silent&&me.trigger('cancel',{context:context,event:event});if(!me.isDestroyed){me.reset();}}//endregion
//region Handles
// /**
//  * Constrain resize to outerElements bounds
//  * @private
//  * @param x
//  * @returns {*}
//  */
// constrainResize(x) {
//     const me = this;
//
//     if (me.outerElement) {
//         const box = me.outerElement.getBoundingClientRect();
//         if (x < box.left) x = box.left;
//         if (x > box.right) x = box.right;
//     }
//
//     return x;
// }
/**
     * Highlights handles (applies css that changes cursor).
     * @private
     */},{key:"highlightHandle",value:function highlightHandle(){var me=this,target=me.targetSelector?DomHelper.up(me.currentElement,me.targetSelector):me.currentElement;// over a handle, add cls to change cursor
me.currentElement.classList.add('b-resize-handle');target.classList.add('b-over-resize-handle');}/**
     * Unhighlight handles (removes css).
     * @private
     */},{key:"unHighlightHandle",value:function unHighlightHandle(){var me=this,target=me.targetSelector?DomHelper.up(me.currentElement,me.targetSelector):me.currentElement;target&&target.classList.remove('b-over-resize-handle');me.currentElement.classList.remove('b-resize-handle');me.currentElement=null;}},{key:"overAnyHandle",value:function overAnyHandle(event,target){return this.overStartHandle(event,target)||this.overEndHandle(event,target);}},{key:"overStartHandle",value:function overStartHandle(event,target){return this.direction==='horizontal'?this.overLeftHandle(event,target):this.overTopHandle(event,target);}},{key:"overEndHandle",value:function overEndHandle(event,target){return this.direction==='horizontal'?this.overRightHandle(event,target):this.overBottomHandle(event,target);}/**
     * Check if over left handle (virtual).
     * @private
     * @param {MouseEvent} event MouseEvent
     * @param {HTMLElement} target The current target element
     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false
     */},{key:"overLeftHandle",value:function overLeftHandle(event,target){if(this.leftHandle&&target.offsetWidth>=this.handleVisibilityThreshold){var leftHandle=Rectangle.from(target);leftHandle.width=this.handleSize;return leftHandle.contains(EventHelper.getPagePoint(event));}return false;}/**
     * Check if over right handle (virtual).
     * @private
     * @param {MouseEvent} event MouseEvent
     * @param {HTMLElement} target The current target element
     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false
     */},{key:"overRightHandle",value:function overRightHandle(event,target){if(this.rightHandle&&target.offsetWidth>=this.handleVisibilityThreshold){var rightHandle=Rectangle.from(target);rightHandle.x=rightHandle.right-this.handleSize;return rightHandle.contains(EventHelper.getPagePoint(event));}return false;}/**
     * Check if over top handle (virtual).
     * @private
     * @param {MouseEvent} event MouseEvent
     * @param {HTMLElement} target The current target element
     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false
     */},{key:"overTopHandle",value:function overTopHandle(event,target){if(this.topHandle&&target.offsetHeight>=this.handleVisibilityThreshold){var topHandle=Rectangle.from(target);topHandle.height=this.handleSize;return topHandle.contains(EventHelper.getPagePoint(event));}return false;}/**
     * Check if over bottom handle (virtual).
     * @private
     * @param {MouseEvent} event MouseEvent
     * @param {HTMLElement} target The current target element
     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false
     */},{key:"overBottomHandle",value:function overBottomHandle(event,target){if(this.bottomHandle&&target.offsetHeight>=this.handleVisibilityThreshold){var bottomHandle=Rectangle.from(target);bottomHandle.y=bottomHandle.bottom-this.handleSize;return bottomHandle.contains(EventHelper.getPagePoint(event));}return false;}//endregion
},{key:"scrollLeft",get:function get(){if(this.scroller){return this.scroller.x;}return this.outerElement.scrollLeft;}},{key:"scrollTop",get:function get(){if(this.scroller){return this.scroller.y;}return this.outerElement.scrollTop;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * CSS class added when resizing
             * @config {String}
             * @default
             */resizingCls:'b-resizing',/**
             * The amount of pixels to move mouse before it counts as a drag operation
             * @config {Number}
             * @default
             */dragThreshold:5,/**
             * Resizing handle size
             * @config {Number}
             * @default
             */handleSize:10,/**
             * Resizing handle size on touch devices
             * @config {Number}
             * @default
             */touchHandleSize:30,/**
             * Minimum width when resizing
             * @config {Number}
             * @default
             */minWidth:1,/**
             * Max width when resizing.
             * @config {Number}
             * @default
             */maxWidth:0,/**
             * Minimum height when resizing
             * @config {Number}
             * @default
             */minHeight:1,/**
             * Max height when resizing
             * @config {Number}
             * @default
             */maxHeight:0,// outerElement, attach events to it and use as outer limit when looking for ancestors
outerElement:document.body,/**
             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.
             * @config {Common.helper.util.Scroller}
             */scroller:null,/**
             * Assign a function to determine if a hovered element can be resized or not
             * @config {Function}
             * @default
             */allowResize:null,/**
             * Outer element that limits where element can be dragged
             * @config {HTMLElement}
             * @default
             */dragWithin:null,/**
             * A function that determines if dragging an element is allowed. Gets called with the element as argument,
             * return true to allow dragging or false to prevent.
             * @config {Function}
             * @default
             */isElementResizable:null,/**
             * A CSS selector used to determine if resizing an element is allowed.
             * @config {String}
             * @default
             */targetSelector:null,/**
             * Use left handle when resizing. Only applies when `direction` is 'horizontal'
             * @config {Boolean}
             * @default
             */leftHandle:true,/**
             * Use right handle when resizing. Only applies when `direction` is 'horizontal'
             * @config {Boolean}
             * @default
             */rightHandle:true,/**
             * Use top handle when resizing. Only applies when `direction` is 'vertical'
             * @config {Boolean}
             * @default
             */topHandle:true,/**
             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'
             * @config {Boolean}
             * @default
             */bottomHandle:true,/**
             * A CSS selector used to determine where handles should be "displayed" when resizing. Defaults to
             * targetSelector if unspecified
             * @config {String}
             * @default
             */handleSelector:null,/**
             * A CSS selector used to determine which inner element contains handles.
             * @config {String}
             * @default
             */handleContainerSelector:null,startEvent:null,/*
             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately
             * @config {Object}
             * @private
             */grab:null,/**
             * CSS class added when the resize state is invalid
             * @config {String}
             * @default
             */invalidCls:'b-resize-invalid',// A number that controls whether or not the element is wide enough for it to make sense to show resize handles
// e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit
handleVisibilityThreshold:null,// Private config that disables translation when resizing left edge. Useful for example in cases when element
// being resized is part of a flex layout
skipTranslate:false,/**
             * Direction to resize in, either 'horizontal' or 'vertical'
             * @config {String}
             * @default
             */direction:'horizontal'};}}]);return ResizeHelper;}(Events(Base));exports.ResizeHelper=ResizeHelper;ResizeHelper._$name='ResizeHelper';/**
 * @module Common/helper/VersionHelper
 */ /**
 * Helper for version handling
 * @private
 * @example
 *
 * VersionHelper.setVersion('grid', '1.5');
 *
 * if (VersionHelper.getVersion('grid').isNewerThan('1.0')) {
 *   ...
 * }
 */var VersionHelper=/*#__PURE__*/function(){function VersionHelper(){_classCallCheck2(this,VersionHelper);}_createClass2(VersionHelper,null,[{key:"setVersion",/**
     * Set version for specified product
     * @private
     * @param {String} product
     * @param {String} version
     */value:function setVersion(product,version){product=product.toLowerCase();this[product]={version:version,isNewerThan:function isNewerThan(otherVersion){return otherVersion<version;},isOlderThan:function isOlderThan(otherVersion){return otherVersion>version;}};if(!window.bryntum){window.bryntum={};}var bundleFor='';// Var productName is only defined in bundles, it is internal to bundle so not available on window. Used to
// tell importing combinations of grid/scheduler/gantt bundles apart from loading same bundle twice
try{// eslint-disable-next-line no-undef
bundleFor=productName;}catch(e){}// Set "global" flag to detect bundle being loaded twice
var globalKey="".concat(bundleFor,".").concat(product).concat(version.replace(/\./g,'-'));if(window.bryntum[globalKey]===true){if(window.parent.Siesta){window.BUNDLE_EXCEPTION=true;}else{throw new Error('Bundle included twice, check cache-busters and file types (.js)');}}else{window.bryntum[globalKey]=true;}}/**
     * Get (previously set) version for specified product
     * @private
     * @param {String} product
     */},{key:"getVersion",value:function getVersion(product){product=product.toLowerCase();if(!this[product]){throw new Error('No version specified');}return this[product].version;}}]);return VersionHelper;}();exports.VersionHelper=VersionHelper;VersionHelper._$name='VersionHelper';var DataGenerator=/*#__PURE__*/function(){function DataGenerator(){_classCallCheck2(this,DataGenerator);}_createClass2(DataGenerator,null,[{key:"reset",//region Random
value:function reset(){this.rnd.reset();this.rndTime.reset();}//endregion
//region Generate data
},{key:"generate",value:/*#__PURE__*/regeneratorRuntime.mark(function generate(count){var randomHeight,initialId,me,rnd,rndTime,firstNames,surNames,teams,foods,colors,cities,i,firstName,surName,name,startDay,start,finish,row,_args3=arguments;return regeneratorRuntime.wrap(function generate$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:randomHeight=_args3.length>1&&_args3[1]!==undefined?_args3[1]:false;initialId=_args3.length>2&&_args3[2]!==undefined?_args3[2]:1;me=this,rnd=me.rnd,rndTime=me.rndTime,firstNames=me.firstNames,surNames=me.surNames,teams=me.teams,foods=me.foods,colors=me.colors,cities=me.cities;i=0;case 4:if(!(i<count)){_context3.next=12;break;}firstName=rnd.fromArray(firstNames),surName=rnd.fromArray(surNames),name="".concat(firstName," ").concat(String.fromCharCode(65+i%25)," ").concat(surName),startDay=rnd.nextRandom(60)+1,start=new Date(2019,0,startDay),finish=new Date(2019,0,startDay+rnd.nextRandom(30)+2),row={id:i+initialId,title:'Row '+i,name:name,firstName:firstName,surName:surName,city:rnd.fromArray(cities),team:rnd.fromArray(cities)+' '+rnd.fromArray(teams),age:10+rnd.nextRandom(80),food:rnd.fromArray(foods),color:rnd.fromArray(colors),score:rnd.nextRandom(100)*10,rank:rnd.nextRandom(100)+1,start:start,finish:finish,time:DateHelper.getTime(rndTime.nextRandom(24),rndTime.nextRandom(12)*5),percent:rnd.nextRandom(100),done:rnd.nextRandom(100)<50,rating:Math.round(Math.random()*5),relatedTo:Math.min(count-1,i+initialId+rnd.nextRandom(10))};if(randomHeight){row.rowHeight=rnd.nextRandom(randomHeight===true?20:randomHeight)*5+20;}_context3.next=9;return row;case 9:i++;_context3.next=4;break;case 12:case"end":return _context3.stop();}}},generate,this);})// Param reset defaults to true to ensure we get the same dataset on consecutive calls. Without it, code editor
// reloading modules yields different data each time
},{key:"generateData",value:function generateData(count){var randomHeight=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var initialId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var reset=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(reset)this.reset();var rows=[],number=DataGenerator.overrideRowCount?DataGenerator.overrideRowCount:count,generator=this.generate(number,randomHeight,initialId);for(var i=0;i<number;i++){rows.push(generator.next().value);}return rows;}//endregion
}]);return DataGenerator;}();exports.DataGenerator=DataGenerator;Object.assign(DataGenerator,{rnd:new RandomGenerator(),rndTime:new RandomGenerator(),rating:0,cities:['Stockholm','Barcelona','Paris','Dubai','New York','San Francisco','Washington','Moscow'],firstNames:['Mike','Linda','Don','Karen','Doug','Jenny','Daniel','Melissa','John','Jane','Theo','Lisa','Adam','Mary','Barbara','James','David'],surNames:['McGregor','Ewans','Scott','Smith','Johnson','Adams','Williams','Brown','Jones','Miller','Davis','More','Wilson','Taylor','Anderson','Thomas','Jackson'],teams:['Lions','Eagles','Tigers','Horses','Dogs','Cats','Panthers','Rats','Ducks','Cougars','Hens','Roosters'],foods:['Pancake','Burger','Fish n chips','Carbonara','Taco','Salad','Bolognese','Mac n cheese','Waffles'],colors:['Blue','Green','Red','Yellow','Pink','Purple','Orange','Teal','Black']});DataGenerator._$name='DataGenerator';/**
 * @module Common/helper/util/Fullscreen
 */ /**
 * Encapsulates the functionality related to switching cross-browser to full screen view and back.
 */var Fullscreen=/*#__PURE__*/function(){function Fullscreen(){_classCallCheck2(this,Fullscreen);}_createClass2(Fullscreen,null,[{key:"init",value:function init(){var fnNames=['fullscreenEnabled','requestFullscreen','exitFullscreen','fullscreenElement'],// turns fnNames into function calls to prefixed functions, fullscreenEnabled -> document.mozFullscreenEnabled
prefixFn=function prefixFn(prefix){return fnNames.map(function(fn){var result=prefix+StringHelper.capitalizeFirstLetter(fn);// fullscreenEnabled in Firefox is called fullScreenEnabled
if(prefix==='moz'){result=result.replace('screen','Screen');// #6555 - Crash when clicking full screen button twice
// firefox doesn't support exitFullScreen method
if('mozCancelFullScreen'in document&&fn==='exitFullscreen'){result='mozCancelFullScreen';}}return result;});};this.functions='fullscreenEnabled'in document&&fnNames||'webkitFullscreenEnabled'in document&&prefixFn('webkit')||'mozFullScreenEnabled'in document&&prefixFn('moz')||'msFullscreenEnabled'in document&&prefixFn('ms')||[];var eventNames=['fullscreenchange','fullscreenerror'],msEventNames=['MSFullscreenChange','MSFullscreenError'],prefixEvt=function prefixEvt(prefix){return eventNames.map(function(eventName){return prefix+StringHelper.capitalizeFirstLetter(eventName);});};this.events='fullscreenEnabled'in document&&eventNames||'webkitFullscreenEnabled'in document&&prefixEvt('webkit')||'mozFullscreenEnabled'in document&&prefixEvt('moz')||'msFullscreenEnabled'in document&&msEventNames||[];}/**
     * True if the fullscreen mode is supported and enabled, false otherwise
     * @property {Boolean}
     */},{key:"request",/**
     * Request entering the fullscreen mode. 
     * @param {HTMLElement} element Element to be displayed fullscreen
     */value:function request(element){return element[this.functions[1]](element);}/**
     * Exit the previously entered fullscreen mode.
     */},{key:"exit",value:function exit(){return document[this.functions[2]]();}/**
     * True if fullscreen mode is currently active, false otherwise
     * @return {Boolean}
     */},{key:"onFullscreenChange",/**
     * Installs the passed listener to fullscreenchange event
     * @param {Function} fn The listener to install
     */value:function onFullscreenChange(fn){document.addEventListener(this.events[0],fn);}/**
     * Uninstalls the passed listener from fullscreenchange event
     * @param {Function} fn 
     */},{key:"unFullscreenChange",value:function unFullscreenChange(fn){document.removeEventListener(this.events[0],fn);}},{key:"enabled",get:function get(){return document[this.functions[0]];}},{key:"isFullscreen",get:function get(){return!!document[this.functions[3]];}}]);return Fullscreen;}();exports.Fullscreen=Fullscreen;Fullscreen.init();Fullscreen._$name='Fullscreen';/**
 * @module Common/mixin/Override
 */var excludedPropNames={constructor:1,prototype:1,name:1,length:1,arguments:1,caller:1,callee:1,__proto__:1};/**
 * Simplifies overriding class methods by allowing methods from another class to be used as overrides.
 * Overrides are defined as own classes. They must at a minimum contain a static getter named targetClass, which
 * should return the class to override. Apply the override by calling {@link #function-apply-static apply()}.
 *
 * @example
 * class TemplateColumnOverride {
 *   static get target() {
 *     return {
 *             class: TemplateColumn,
 *             product: 'grid',
 *             minVersion: '1.0',
 *             maxVersion: '1.5'
 *     }
 *   }
 *
 *   renderer(renderData) {
 *       // call overridden function (optional)
 *       const value = this._overridden.renderer.call(this, renderData);
 *
 *       return 'HELLO' + value;
 *   }
 * }
 * Override.apply(TemplateColumnOverride);
 */var Override=/*#__PURE__*/function(){function Override(){_classCallCheck2(this,Override);}_createClass2(Override,null,[{key:"apply",/**
     * Apply override. We strongly suggest that you at least specify a maxVersion for your overrides.
     * ```
     * class OriginalOverride {
     *     static get target() {
     *         return {
     *             class: Original,
     *             product: 'grid',
     *             minVersion: '1.0',
     *             maxVersion: '1.5'
     *         }
     *     }
     * }
     * ```
     * @param override An override class definition
     */value:function apply(override){if(!override.target)throw new Error('Override must specify what it overrides, using static getter target');if(!override.target.class)throw new Error('Override must specify which class it overrides, using target.class');if(!this.shouldApplyOverride(override))return false;var staticKeys=Object.getOwnPropertyNames(override),instanceKeys=Object.getOwnPropertyNames(override.prototype);staticKeys.splice(staticKeys.indexOf('target'),1);this.internalOverrideAll(override.target.class,staticKeys,override);this.internalOverrideAll(override.target.class.prototype,instanceKeys,override.prototype);return true;}},{key:"internalOverrideAll",value:function internalOverrideAll(targetClass,properties,overrideDefinition){var _this36=this;Reflect.ownKeys(overrideDefinition).forEach(function(key){if(properties.includes(key)&&!excludedPropNames[key]){var desc=Object.getOwnPropertyDescriptor(overrideDefinition,key);var currentTargetClass=targetClass;var targetProperty=null;// Walk up the prototype chain to find fn, needed for mixin overrides applied to class that has them
// mixed in
while(!targetProperty&&currentTargetClass){targetProperty=Object.getOwnPropertyDescriptor(currentTargetClass,key);if(!targetProperty){currentTargetClass=Object.getPrototypeOf(currentTargetClass);}}if(targetProperty){_this36.internalOverride(currentTargetClass,key,desc,targetProperty);}}});}},{key:"internalOverride",value:function internalOverride(target,key,desc,targetDesc){var overrides=target._overridden=target._overridden||{};overrides[key]=target[key];if(targetDesc.get){Object.defineProperty(target,key,{enumerable:false,configurable:true,get:desc.get});}else{target[key]=desc.value;}}/**
     * Checks versions if an override should be applied. Specify version in your overrides target config
     * @param override
     * @returns {Boolean}
     * @example
     * class OriginalOverride {
     *     static get target() {
     *         return {
     *             class: Original,
     *             product: 'grid',
     *             minVersion: '1.0',
     *             maxVersion: '1.5'
     *         }
     *     }
     * }
     * @private
     */},{key:"shouldApplyOverride",value:function shouldApplyOverride(override){var config=override.target;// not using versioning, allow override
if(!config.maxVersion&&!config.minVersion)return true;// must specify product to be able to lookup versions
if(!config.product)throw new Error('Override must specify product when using versioning');// override is for older version, disallow
if(config.maxVersion&&VersionHelper[config.product].isNewerThan(config.maxVersion)){return false;}// override is for newer version, disallow
if(config.minVersion&&VersionHelper[config.product].isOlderThan(config.minVersion)){return false;}// override is for current version, allow
return true;}}]);return Override;}();exports.Override=Override;Override._$name='Override';// The code is based on https://epsil.github.io/gll/ article.
/**
 * @module Common/util/Parser
 */ // Tools. Maybe move it to memoization module.
var nextObjectIdentity=0;var objectIdentityMap=new WeakMap();var argsToCacheKey=function argsToCacheKey(){for(var _len52=arguments.length,args=new Array(_len52),_key51=0;_key51<_len52;_key51++){args[_key51]=arguments[_key51];}return args.map(function(arg){var result;if(arg&&_typeof(arg)=='object'||typeof arg=='function'){result=objectIdentityMap.get(arg);if(result===undefined){result=++nextObjectIdentity;objectIdentityMap.set(arg,result);}}else{result=String(arg);}return result;}).join('-');};/**
 * Generic memoization function. Wraps `fn` into higher order function which caches `fn` result
 * using stringified arguments as the cache key.
 *
 * @param {Function} fn function to memoize
 */var memo=function memo(fn){var mlist=new Map();return function(){for(var _len53=arguments.length,args=new Array(_len53),_key52=0;_key52<_len53;_key52++){args[_key52]=arguments[_key52];}var mkey=argsToCacheKey(args);var result=mlist.get(mkey);if(result===undefined){result=fn.apply(void 0,args);mlist.set(mkey,result);}return result;};};/**
 * Specific memoization function caches `fn` calls. `fn` should recieve 2 arguments, the first one
 * is a string, and the second one is a callback which should be called by `fn` with some result.
 * The function returned wraps `fn` and it's callback such that `fn` would be called only once
 * with a particular first argument, other time callback will be called instantly with the result cached.
 *
 * @param {Function} fn function to memoize
 */var memoCps=function memoCps(fn){var table=new Map(),entryContinuations=function entryContinuations(entry){return entry[0];},entryResults=function entryResults(entry){return entry[1];},pushContinuation=function pushContinuation(entry,cont){return entryContinuations(entry).push(cont);},pushResult=function pushResult(entry,result){return entryResults(entry).push(result);},isResultSubsumed=function isResultSubsumed(entry,result){return entryResults(entry).some(function(r){return ObjectHelper.isEqual(r,result);});},makeEntry=function makeEntry(){return[[],[]];},isEmptyEntry=function isEmptyEntry(entry){return!entryResults(entry).length&&!entryContinuations(entry).length;},tableRef=function tableRef(str){var entry=table.get(str);if(entry===undefined){entry=makeEntry();table.set(str,entry);}return entry;};return function(str,cont){var entry=tableRef(str);if(isEmptyEntry(entry)){pushContinuation(entry,cont);fn(str,function(result){if(!isResultSubsumed(entry,result)){pushResult(entry,result);entryContinuations(entry).forEach(function(cont){return cont(result);});}});}else{pushContinuation(entry,cont);entryResults(entry).forEach(function(result){return cont(result);});}};};// End of tools
var SUCCESS=Symbol('success');var FAILURE=Symbol('failure');/**
 * Successfull parsing result. Represented as array with 3 items:
 * - SUCCESS symbol which can be checked with {@link #function-isSuccess} function.
 * - Parsed payload
 * - Rest string left to parse
 *
 * @typedef {Array} SuccessResult
 */ /**
 * Creates successull parsing result with parsed `val` and unparsed `rest`
 *
 * @param {String} val Parsed value
 * @param {String} rest Unparsed rest
 * @return {SuccessResult}
 */var success=function success(val,rest){return[SUCCESS,val,rest];};/**
 * Failure parsing result. Represented as array with 2 items:
 * - FAILURE symbol which can be checked with {@link #function-isSuccess} function
 * - Rest string left to parse
 *
 * @typedef {Array} FailureResult
 */ /**
 * Creates failed parsing result with unparsed `rest`
 *
 * @param {String} rest Unparsed rest
 * @return {FailureResult}
 */var failure=function failure(rest){return[FAILURE,rest];};/**
 * Checks if the given parsing `result` is successfull
 *
 * @param {SuccessfullResult|FailureResult} result
 */var isSuccess=function isSuccess(result){return result.length&&result[0]===SUCCESS;};/**
 * Resolves parser when needed. Parser should be resolved if it's defined as a function
 * with no arguments which returns the actual parser function with more then one argument.
 *
 * @param {Function} p Parser factory
 * @return {Function} Combinable parser function
 */var resolveParser=function resolveParser(p){return typeof p==='function'&&!p.length?p():p;};/**
 * Returns combinable parser which always return successfull parsing result with `val`
 * as parsed result and string parsed as `rest`.
 *
 * @param {*} val Succefull parsing result parsed payload
 * @return {Function} Combinable parser function
 *
 * @example
 * const sp = succeed('Ok');
 * sp('My string', (r) => console.dir(r)) // Will output successfull parsing result with `Ok` payload and `My string` rest.
 */var succeed=memo(function(val){return memoCps(function(str,cont){return cont(success(val,str));});});/**
 * Returns combinable parser which succeeds if string parsed starts with `match`. The parsing
 * result will contain `match` as parsed result and rest of the string characters,
 * the ones after `match` as the unparsed rest.
 *
 * @param {String} match String to match
 * @return {Function} Combinable parser function
 *
 * @example
 * const mp = string('My');
 * mp('My string', (r) => console.dir(r)); // Will output successfull parsing result with `My` payload and `string` rest.
 */var string=memo(function(match){return memoCps(function(str,cont){var len=Math.min(match.length,str.length),head=str.substr(0,len),tail=str.substr(len);cont(head===match?success(head,tail):failure(tail));});});/**
 * Binds parser or parser factory with a `fn` function which should recieve one string argument
 * and return a combinable parser function.
 *
 * @param {Function} p Combinable parser function or combinable parser factory which can be
 *                     resolved using with {@link #function-resolveParser}.
 * @param {Function} fn A function recieving one string argument and returning combinable parser function.
 *
 * @internal
 */var bind=function bind(p,fn){return function(str,cont){return resolveParser(p)(str,function(result){if(isSuccess(result)){var _result8=_slicedToArray(result,3),val=_result8[1],rest=_result8[2];fn(val)(rest,cont);}else{cont(result);}});};};/**
 * Combines several combined parser functions or combinable parser factories in sequence such that second starts after first succeeds
 * third after second etc, if first fails then second will not be called and so on.
 *
 * @param {...Function} parsers Combinable parser function or combinable parser factory which can be
 *                      resolved using with {@link #function-resolveParser}.
 * @returns {Function} Combinable parser function
 *
 * @example
 * const ab = seq(string('a'), string('b'));
 * ab('abc', (r) => console.dir(r)); // Will output successfull parsing result with `ab` as parsed payload and `c` as the rest.
 */var seq=memo(function(){var seq2=memo(function(a,b){return memoCps(bind(a,function(x){return bind(b,function(y){return succeed([].concat(x,y));});}));});for(var _len54=arguments.length,parsers=new Array(_len54),_key53=0;_key53<_len54;_key53++){parsers[_key53]=arguments[_key53];}return parsers.reduce(seq2,succeed([]));});/**
 * Combines several combined parser functions or combinable parser factories in alteration such that successfull parsing result will be passed into
 * a callback if one of those parsers succeeds.
 *
 * @param {...Function} parsers Combinable parser function or combinable parser factory which can be
 *                      resolved using with {@link #function-resolveParser}.
 * @returns {Function} Combinable parser function
 *
 * @example
 * const aorb = alt(string('a'), string('b'));
 * aorb('abc', (r) => console.dir(r)); // Will output successfull parsing result with `a` as parsed payload and `bc` as the rest.
 * aorb('bbc', (r) => console.dir(r)); // Will output successfull parsing result with `b` as parsed payload and `bc` as the rest.
 */var alt=memo(function(){for(var _len55=arguments.length,parsers=new Array(_len55),_key54=0;_key54<_len55;_key54++){parsers[_key54]=arguments[_key54];}return memoCps(function(str,cont){return parsers.forEach(function(p){return resolveParser(p)(str,cont);});});});/**
 * Creates combinable parser which succeeds if string to parse starts from a substring which succeeds for the regular expression
 * `pattern` the parser is created with.
 *
 * @param {String} pattern Regular expression pattern
 * @return {Function} Combinable parser function
 *
 * @example
 * const rp = regexp('a+');
 * rp('aaabb', (r) => console.dir(r)); // Will output successfull parsing result with `aaa` as parsed payload and `bb` as the rest.
 */var regexp=memo(function(pattern){return function(str,cont){var rexp=new RegExp("^".concat(pattern)),match=rexp.exec(str);if(match){var head=match[0],tail=str.substr(head.length);cont(success(head,tail));}else{cont(failure(str));}};});/**
 * Creates reducing combinable parser function which should be used to create semantic actions
 * on parsed results.
 *
 * @param {Function} p Combinable parser function or combinable parser factory which can be
 *                     resolved using with {@link #function-resolveParser}.
 * @param {Function} fn Semantic action function should be the same arity as the successfull result arity
 *                      of `p` parser.
 * @return {Function} Combinable parser function
 *
 * @example
 * const nump = red(
 *     regexp('\d'),
 *     Number
 * );
 *
 * const plusp = string('+');
 *
 * const sump = red(
 *     seq(nump, plusp, nump),
 *     (a, _, b) => a + b
 * );
 *
 * sump('7+8', (r) => console.dir(r)); // Will return successfull parsing result with `15` as parsing payload and `` as rest.
 */var red=memo(function(p,fn){return bind(p,function(){for(var _len56=arguments.length,val=new Array(_len56),_key55=0;_key55<_len56;_key55++){val[_key55]=arguments[_key55];}return succeed(fn.apply(void 0,_toConsumableArray([].concat.apply([],val))));});});/**
 * Runs combinable parsing function returning totaly parsed results only, i.e. such results which have
 * parsed the `str` string completely.
 *
 * @param {Function} body Combinable parser function
 * @param {String} str String to parse
 * @return {SuccessfullResult[]} All totaly parsed results possible for the given parsing function.
 */var runParser=function runParser(body,str){var results=[];body(str,function(result){if(isSuccess(result)){var _result9=_slicedToArray(result,3),left=_result9[2];if(left===''){results.push(result);}}});return results;};/**
 * Helper function for combinable parser definition supplements combinable parser function
 * returning a higher order function which when called with 2 arguments (string to parse and
 * a callback function) behaves exactly like parser function, but when called with 1 argument
 * it wraps call to parser function with {@link function-runParser} thus returning array of
 * totaly parsed results.
 *
 * @param {Function} body Combinable parser function
 */var defineParser=function defineParser(body){return function(str,cont){return cont?resolveParser(body)(str,cont):runParser(resolveParser(body),str);};};/**
 * Combines exports in an object such that it was possible to export parser utilities
 * in UMD/module bundles.
 *
 * @example
 * import Parser from 'Common/util/Parser.js';
 * const {string, alt, seq, success, red, defineParser} = Parser;
 */var Parser={memo:memo,memoCps:memoCps,success:success,failure:failure,isSuccess:isSuccess,resolveParser:resolveParser,succeed:succeed,string:string,bind:bind,seq:seq,alt:alt,regexp:regexp,red:red,runParser:runParser,defineParser:defineParser};/**
 * Boolean combo, a combo box with two options corresponding to true or false
 *
 * @classType booleancombo
 * @extends Common/widget/Combo
 */exports.Parser=Parser;var BooleanCombo=/*#__PURE__*/function(_Localizable3){_inherits2(BooleanCombo,_Localizable3);function BooleanCombo(){_classCallCheck2(this,BooleanCombo);return _possibleConstructorReturn2(this,_getPrototypeOf2(BooleanCombo).apply(this,arguments));}_createClass2(BooleanCombo,[{key:"store",//endregion
get:function get(){if(!this._store){this.store=new Store({data:[{id:this.positiveValue,text:this.positiveText||this.L('Yes')},{id:this.negativeValue,text:this.negativeText||this.L('No')}]});}return this._store;},set:function set(store){_set(_getPrototypeOf2(BooleanCombo.prototype),"store",store,this,true);}}],[{key:"type",get:function get(){return'booleancombo';}//region Config
},{key:"defaultConfig",get:function get(){return{/**
             * Positive option value
             *
             * @config {*}
             */positiveValue:true,/**
             * Positive option display value
             *
             * @config {String}
             */positiveText:null,/**
             * Negative option value
             *
             * @config {*}
             */negativeValue:false,/**
             * False option display value
             *
             * @config {String}
             */negativeText:null,/**
             * Default value
             *
             * @config {*}
             */value:false};}}]);return BooleanCombo;}(Localizable(Combo));exports.BooleanCombo=BooleanCombo;BooleanCombo._$name='BooleanCombo';BryntumWidgetAdapterRegister.register(BooleanCombo.type,BooleanCombo);/**
 * @module Common/widget/FileField
 */ /**
 * Filefield widget. Wraps native &lt;input type="file"&gt;.
 *
 * There is a nicer styled wrapper for this field, see {@link Common/widget/FilePicker}
 *
 * @extends Common/widget/Field
 * @example
 *
 * let fileField = new FileField({
 *   multiple : true,
 *   accept   : "image/*"
 * });
 *
 * @classType filefield
 * @externalexample widget/FileField.js
 */var FileField=/*#__PURE__*/function(_Field4){_inherits2(FileField,_Field4);function FileField(){_classCallCheck2(this,FileField);return _possibleConstructorReturn2(this,_getPrototypeOf2(FileField).apply(this,arguments));}_createClass2(FileField,[{key:"inputTemplate",value:function inputTemplate(){var me=this;// Not using reference="input" here intentionally.
// In IE11/Edge when you pick file first time, field.value reports empty string while field.files.length is
// non zero. Trying to fix this and embed file field to common field behavior is very tricky because cannot
// be covered with siesta tests (it looks like).
// Also we don't need much from this field - only `change` event.
return TemplateHelper.tpl(_templateObject15(),me.id,me.inputCls||'',me.multiple?'multiple':'',me.accept||'');}},{key:"construct",value:function construct(config){var me=this;_get2(_getPrototypeOf2(FileField.prototype),"construct",this).call(this,config);me.input=me.element.querySelector('input');EventHelper.on({element:me.input,change:me.onFileInputChange,thisObj:me});}},{key:"pickFile",/**
     * Opens browser file picker
     * @internal
     */value:function pickFile(){this.input.click();}/**
     * Clears field value
     */},{key:"clear",value:function clear(){this.input.value=null;}},{key:"onFileInputChange",value:function onFileInputChange(){var me=this,value=me.input.value,oldValue=me.oldValue;this.trigger('change',{value:value,oldValue:oldValue,userAction:true,valid:true});me.oldValue=value;}},{key:"oldValue",get:function get(){return this._oldValue;},set:function set(value){this._oldValue=value;}/**
     * Returns list of selected files
     * @returns {FileList}
     * @readonly
     */},{key:"files",get:function get(){return this.input.files;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Set to true to allow picking multiple files
             * @config {Boolean}
             * @default
             */multiple:false,/**
             * Comma-separated list of file extensions or MIME type to to accept. E.g.
             * ".jpg,.png,.doc" or "image/*". Null by default, allowing all files.
             * @config {String}
             */accept:null};}}]);return FileField;}(Field);exports.FileField=FileField;FileField._$name='FileField';BryntumWidgetAdapterRegister.register('filefield',FileField);/**
 * @module Common/widget/FilePicker
 */ /**
 * File input field wrapped into {@link Common/widget/Button button}. Clicking button opens browser file picker window.
 * When files are chosen, badge appears showing amount of files. Hovering the button shows tip with file names.
 *
 * By default only single file allowed.
 *
 * @extends Common/widget/Container
 * @example
 *
 * let fileField = new FilePicker({
 *   fileFieldConfig : {
 *      multiple : true,
 *      accept   : "image/*"
 *   },
 *   buttonConfig : {
 *       text : 'Pick file...'
 *   }
 * });
 *
 * @classType filepicker
 * @externalexample widget/FilePicker.js
 */var FilePicker=/*#__PURE__*/function(_Container5){_inherits2(FilePicker,_Container5);function FilePicker(){_classCallCheck2(this,FilePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(FilePicker).apply(this,arguments));}_createClass2(FilePicker,[{key:"construct",value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;config.items=[Object.assign({type:'button',ref:'fileButton',text:'File'},config.buttonConfig),Object.assign({type:'filefield',ref:'fileField',style:'display: none'},config.fileFieldConfig)].concat(config.items||[]);_get2(_getPrototypeOf2(FilePicker.prototype),"construct",this).call(this,config);me.button.on({click:me.onButtonClick,thisObj:me});me.fileField.on({change:me.onFileFieldChange,thisObj:me});me._thisIsAUsedExpression(me.fileTip);}},{key:"clear",/**
     * Clears field
     */value:function clear(){var me=this;me.fileField.clear();me.button.badge='';me.trigger('clear');}},{key:"onButtonClick",value:function onButtonClick(_ref80){var event=_ref80.event;var me=this;// forward click to the file input to open browser file picker
// me.fileField.input.click();
me.fileField.pickFile();event.preventDefault();}},{key:"onFileFieldChange",value:function onFileFieldChange(){var me=this;me.button.badge=me.files.length||'';me.trigger('change',{files:me.files});}},{key:"button",get:function get(){return this.widgetMap.fileButton;}},{key:"fileField",get:function get(){return this.widgetMap.fileField;}/**
     * List of selected files
     * @returns {FileList}
     * @readonly
     */},{key:"files",get:function get(){return this.fileField.files;}},{key:"fileTip",get:function get(){var me=this;return me._fileTip||(me._fileTip=new Tooltip({cls:'b-file-tip',forElement:me.button.element,showOnHover:true,align:'b-t',scrollAction:'realign',listeners:{beforeshow:function beforeshow(){var tip=this,files=me.files;if(files&&files.length){tip.html="".concat(Array.from(files).map(function(file){return file.name;}).join('<br>'));return true;}// Veto show
return false;}}}));}}],[{key:"defaultConfig",get:function get(){return{/**
             * Fires after user closes file picker dialog.
             * @event change
             * @param {FileList} files List of picked files
             */ /**
             * Fires when field is cleared with {@link #function-clear} method
             * @event clear
             */ /**
             * Wrapper button config object. See {@link Common/widget/Button} for list of available configs.
             * @config {Object}
             */buttonConfig:null,/**
             * Underlying field config object. See {@link Common/widget/FileField} for list of available configs.
             * @config {Object}
             */fileFieldConfig:null};}}]);return FilePicker;}(Container);exports.FilePicker=FilePicker;FilePicker._$name='FilePicker';BryntumWidgetAdapterRegister.register('filepicker',FilePicker);/**
 * @module Common/widget/FlagField
 */ /**
 * Flag field is a checkbox which is driven by its boolean value and vice-versa.
 * When value is `true` then checkbox is checked, when it's `false` then checkbox
 * is unchecked.
 */var FlagField=/*#__PURE__*/function(_Checkbox){_inherits2(FlagField,_Checkbox);function FlagField(){_classCallCheck2(this,FlagField);return _possibleConstructorReturn2(this,_getPrototypeOf2(FlagField).apply(this,arguments));}_createClass2(FlagField,[{key:"value",get:function get(){return this.checked;},set:function set(v){v=Boolean(v);_set(_getPrototypeOf2(FlagField.prototype),"value",v,this,true);if(!this.inputting){this.checked=v;}}}],[{key:"type",get:function get(){return'flagfield';}},{key:"defaultConfig",get:function get(){return{value:''};}}]);return FlagField;}(Checkbox);exports.FlagField=FlagField;FlagField._$name='FlagField';BryntumWidgetAdapterRegister.register(FlagField.type,FlagField);/**
 * @module Common/widget/DurationField
 */ /**
 * A specialized field allowing a user to also specify duration unit when editing the duration value.
 *
 * @extends Common/widget/TextField
 *
 * @classType durationfield
 */var DurationField=/*#__PURE__*/function(_TextField2){_inherits2(DurationField,_TextField2);function DurationField(){_classCallCheck2(this,DurationField);return _possibleConstructorReturn2(this,_getPrototypeOf2(DurationField).apply(this,arguments));}_createClass2(DurationField,[{key:"valueToVisible",value:function valueToVisible(magnitude,unit){if(!isNaN(magnitude)){var valueInt=parseInt(magnitude,10);// could happen if magnitude is null
if(!isNaN(valueInt)){var valueFixed=ObjectHelper.toFixed(magnitude,this.decimalPrecision);return String(valueInt==valueFixed?valueInt:valueFixed)+' '+DateHelper[this.useAbbreviation?'getShortNameOfUnit':'getLocalizedNameOfUnit'](unit||this.unit,magnitude!==1);}}return'';}},{key:"parseDuration",value:function parseDuration(value){if(value==null){return null;}var duration=DateHelper.parseDuration(value,this.allowDecimals,this.unit);if(!duration){return null;}duration.unit=duration.unit||this.unit;return duration;}},{key:"internalOnChange",value:function internalOnChange(event){var me=this,value=me.value,oldVal=me._lastValue;if(me.hasChanged(oldVal,value)){me._lastValue=value;me.trigger('change',{value:value,event:event,userAction:true,valid:me.isValid});}}},{key:"onFocusOut",value:function onFocusOut(e){this.syncInputFieldValue();return _get2(_getPrototypeOf2(DurationField.prototype),"onFocusOut",this).call(this,e);}/**
     * The `value` property may be set in Object form specifying two properties,
     * `magnitude`, a Number, and `unit`, a String.
     *
     * If a Number is passed, the field's current unit is used and just the magnitude is changed.
     *
     * If a String is passed, it is parsed in accordance with current locale rules.
     * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.
     *
     * Upon read, the value is always returned in object form containing `magnitude` and `unit`.
     * @property {String|Number|Object}
    */},{key:"hasChanged",value:function hasChanged(oldValue,newValue){return newValue&&!oldValue||!newValue&&oldValue||newValue&&oldValue&&(newValue.magnitude!=oldValue.magnitude||newValue.unit!=oldValue.unit);}/**
     * The `milliseconds` property is a read only property which returns the
     * number of milliseconds in this field's value
     * @property {Number}
     */},{key:"onInternalKeyDown",value:function onInternalKeyDown(keyEvent){if(keyEvent.key==='ArrowUp'){this.doSpinUp();}else if(keyEvent.key==='ArrowDown'){this.doSpinDown();}}},{key:"doSpinUp",value:function doSpinUp(){var me=this,value=me.value;me._isUserAction=true;me.value={unit:value.unit,// null magnitude will result NaN
magnitude:(value.magnitude||0)+me.step};me._isUserAction=false;}},{key:"doSpinDown",value:function doSpinDown(){var me=this,value=me.value;if(me.allowNegative||value.magnitude>0){me._isUserAction=true;me.value={unit:value.unit,// null magnitude will result NaN
magnitude:(value.magnitude||0)-me.step};me._isUserAction=false;}}},{key:"inputValue",get:function get(){// Do not use the _value property. If called during configuration, this
// will import the configured value from the config object.
var value=this.value;return value==null?'':this.valueToVisible(value.magnitude,value.unit);}},{key:"unit",set:function set(unit){this.value={magnitude:_get2(_getPrototypeOf2(DurationField.prototype),"value",this),unit:unit};},get:function get(){return this._unit;}},{key:"isValid",get:function get(){var me=this;return me.value==null&&me.clearable&&!me.required||me.value!=null&&(me.allowNegative||me.value.magnitude>=0);}},{key:"value",set:function set(value){var me=this;// A number means maintain the unit type
if(typeof value==='number'){value={magnitude:value,unit:me._unit};}// Not an object, parse as a string
else if(_typeof(value)!=='object'){value=me.parseDuration(value);}if(me.value!==value){// Only change the value if the input is valid
if(value){me._unit=value.unit;_set(_getPrototypeOf2(DurationField.prototype),"value",value,this,true);}else{me._unit=me.clearable?null:0;_set(_getPrototypeOf2(DurationField.prototype),"value",me.clearable?null:0,this,true);}}},get:function get(){return _get2(_getPrototypeOf2(DurationField.prototype),"value",this);}},{key:"milliseconds",get:function get(){var v=this.value;return DateHelper.asMilliseconds(v.magnitude,v.unit);}}],[{key:"defaultConfig",get:function get(){return{/**
             * The `value` config may be set in Object form specifying two properties,
             * `magnitude`, a Number, and `unit`, a String.
             *
             * If a String is passed, it is parsed in accordance with current locale rules.
             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.
             * @config {Object|String}
            */value:null,step:1,/**
             * The duration unit to use with the current magnitude value.
             * @config {String}
             */unit:null,/**
             * When set to `true` the field will use short names of unit durations
             * (as returned by {@link Common.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the
             * input field's display value.
             * @config {Boolean}
             */useAbbreviation:false,/**
             * Set to `true` to allow negative duration
             * @config {Boolean}
             */allowNegative:false,triggers:{spin:{type:'spintrigger'}}};}}]);return DurationField;}(TextField);exports.DurationField=DurationField;DurationField._$name='DurationField';BryntumWidgetAdapterRegister.register('durationfield',DurationField);BryntumWidgetAdapterRegister.register('duration',DurationField);/**
 * @module Grid/column/Column
 */ /**
 * Base class for other column types, used if no type is specified on a column.
 *
 * ```
 * const grid = new Grid({
 *   columns : [
 *      { field : 'name', text : 'Name' }, // Will use Column
 *      { type : 'number', field : 'age', text : 'Age' } // Will use NumberColumn
 *   ]
 * });
 * ```
 *
 * @extends Common/data/Model
 * @classType column
 * @mixes Common/mixin/Events
 * @mixes Common/localization/Localizable
 */var Column=/*#__PURE__*/function(_Events8){_inherits2(Column,_Events8);function Column(){_classCallCheck2(this,Column);return _possibleConstructorReturn2(this,_getPrototypeOf2(Column).apply(this,arguments));}_createClass2(Column,[{key:"construct",//endregion
//region Init
value:function construct(data,store){var me=this;me.masterStore=store;// Store might be an array
if(store){me._grid=Array.isArray(store)?store[0].grid:store.grid;}me.localizableProperties=data.localizableProperties||['text'];if(data.localeClass){me.localeClass=data.localeClass;}_get2(_getPrototypeOf2(Column.prototype),"construct",this).call(this,data,store,null,false);me.processConfiguredListeners(data.listeners);// Default value for region is assigned by the ColumnStore in createRecord(), same for `locked`
// Allow field : null if the column does not rely on a record field.
// For example the CheckColumn when used by GridSelection.
if(!('field'in me.data)){me.field='_'+(me.type||'')+ ++Column.emptyCount;}// If our field is a dot separated path, we must use ObjectHelper.getPath to extract our value
me.hasComplexMapping=me.field&&me.field.includes('.');if(!me.width&&!me.flex&&!me.children){// Set the width silently because we're in construction.
me.set({width:Column.defaultWidth,flex:null},null,true);}}/**
     * Extracts the value from the record specified by this Column's {@link #config-field} specification.
     *
     * This will work if the field is a dot-separated path to access fields in associated records, eg
     *
     * ```javascript
     *  field : 'resource.calendar.name'
     * ```
     *
     * **Note:** This is the raw field value, not the value returned by the {@link #config-renderer}.
     * @param {Common.data.Model} record The record from which to extract the field value.
     * @returns {*} The value of the referenced field if any.
     */},{key:"getRawValue",value:function getRawValue(record){var me=this;if(me.hasComplexMapping){return ObjectHelper.getPath(record,me.field);}return record[me.field]||record.get(me.field);}},{key:"hide",//endregion
//region Show/hide
/**
     * Hides this column.
     */value:function hide(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,parent=me.parent;// Reject non-change
if(!me.hidden){me.hidden=true;if(parent&&!parent.isRoot){// check if all sub columns are hidden, if so hide parent
var anyVisible=parent.children.some(function(child){return child.hidden!==true;});if(!anyVisible&&!parent.hidden){silent=true;// hiding parent will trigger event
parent.hide();}}if(me.children){me.children.forEach(function(child){return child.hide(true);});}if(!silent){me.stores.forEach(function(store){return store.trigger('hideColumn');});}}}/**
     * Shows this column.
     */},{key:"show",value:function show(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,parent=me.parent;// Reject non-change
if(me.hidden){me.hidden=false;if(parent&&parent.hidden){parent.show();}if(me.children){me.children.forEach(function(child){return child.show(true);});}// event is triggered on chained stores
if(!silent){me.stores.forEach(function(store){return store.trigger('showColumn');});}}}/**
     * Toggles the column visibility.
     * @param {Boolean} force Set to true (visible) or false (hidden) to force a certain state
     */},{key:"toggle",value:function toggle(){var force=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(this.hidden&&force===undefined||force===true)return this.show();if(!this.hidden&&force===undefined||force===false)return this.hide();}//endregion
//region Index & id
/**
     * Generates an id for the column when none is set. Generated ids are 'col1', 'col2' and so on. If a field is
     * specified (as it should be in most cases) the field name is used instead: 'name1', 'age2' ...
     * @private
     * @returns {String}
     */},{key:"generateId",value:function generateId(){if(!Column.generatedIdIndex)Column.generatedIdIndex=0;return(this.field?this.field.replace(/\./g,'-'):'col')+ ++Column.generatedIdIndex;}/**
     * Index among all flattened columns
     * @property {Number}
     * @readOnly
     * @internal
     */},{key:"measureSize",// Returns size in pixels for measured value
value:function measureSize(value){return DomHelper.measureSize(value,this.subGrid?this.subGrid.element:undefined);}// This method is used to calculate minimum row width for edge and safari
// It calculates minimum width of the row taking column hierarchy into account
},{key:"calculateMinWidth",value:function calculateMinWidth(){var me=this,width=me.measureSize(me.width),minWidth=me.measureSize(me.minWidth);var minChildWidth=0;if(me.children){minChildWidth=me.children.reduce(function(result,column){return result+column.calculateMinWidth();},0);}return Math.max(width,minWidth,minChildWidth);}/**
     * Resizes the column to match the widest string in it. By default it also measures the column header, this
     * behaviour can be configured by setting {@link Grid.view.Grid#config-resizeToFitIncludesHeader}.
     *
     * Called internally when you double click the edge between
     * column headers, but can also be called programmatically. For performance reasons it is limited to checking 1000
     * rows surrounding the current viewport.
     */},{key:"resizeToFitContent",value:function resizeToFitContent(){var me=this,grid=me.grid,renderer=me.renderer,defaultRenderer=me.defaultRenderer,element=me.element,rowManager=grid.rowManager,store=grid.store,count=store.count,useRenderer=renderer||defaultRenderer;if(count<=0)return;var cellElement=grid.element.querySelector(".b-grid-cell[data-column-id=".concat(me.id,"]")),originalStyle=cellElement.cssText,// Renderer might overwrite
originalClassName=cellElement.className;// Renderer might overwrite
var maxWidth=0,start,end,i,record,value;// Measure header unless configured not to
if(grid.resizeToFitIncludesHeader){var style=window.getComputedStyle(element);// Header always in view, use its element
maxWidth=DomHelper.measureText(element.innerText,element,false,element.parentElement)+parseInt(style.paddingLeft);// Seems to miss the padding, have not found why
// Remove measuring element, it messes some styling rules up if left in DOM
element.parentElement.offScreenDiv.parentElement.remove();}// If it's a very large dataset, measure the maxWidth of the field in the 1000 rows
// surrounding the rendered block.
if(count>1000){start=Math.max(Math.min(rowManager.topIndex+rowManager.rowCount/2-500,count-1000),0);end=start+1000;}else{start=0;end=count;}for(i=start;i<end;i++){record=store.getAt(i);value=me.getRawValue(record);if(useRenderer){value=useRenderer.call(me,{cellElement:cellElement,rowElement:cellElement.parentNode,value:value,record:record,column:me,size:{height:record.rowHeight||0},grid:grid,row:{},updatingSingleRow:false});// Cell renderer is allowed to direction manipulate the cell element, if so it wont return a value
value=value==null?cellElement.innerHTML:String(value);}if(value){// Measure withing the SubGrid, allows more css rules to apply. Not measuring inside rows sine that might get to costly performance wise
maxWidth=Math.max(maxWidth,DomHelper.measureText(value,cellElement,!(me.htmlEncode&&!me.disableHtmlEncode),me.subGrid.element));}}// Restore top cell which may be mutated by the repeated call of the renderer.
cellElement.className=originalClassName;cellElement.cssText=originalStyle;return me.width=maxWidth;}//endregion
//region State
/**
     * Get column state, used by State mixin
     * @private
     */},{key:"getState",value:function getState(){var _state;// TODO: exclude those with value = default?
var me=this,state=(_state={},_defineProperty(_state,me.flex?'flex':'width',me.flex?me.flex:me.width),_defineProperty(_state,"id",me.id),_defineProperty(_state,"hidden",me.hidden),_defineProperty(_state,"index",me.allIndex),_defineProperty(_state,"region",me.region),_defineProperty(_state,"filterable",me.filterable),_defineProperty(_state,"text",me.text),_defineProperty(_state,"locked",me.locked),_state);if(me.children)state.children=me.children.map(function(child){return child.getState();});return state;}/**
     * Apply state to column, used by State mixin
     * @private
     */},{key:"applyState",value:function applyState(state){var me=this;me.beginBatch();if('locked'in state){me.locked=state.locked;}if('minWidth'in state){me.minWidth=state.minWidth;}if('width'in state){me.width=state.width;}if('flex'in state){me.flex=state.flex;}if('width'in state&&me.flex){me.flex=undefined;}else if('flex'in state&&me.width){me.width=undefined;}if('text'in state){me.text=state.text;}if('region'in state){me.region=state.region;}if('renderer'in state){me.renderer=state.renderer;}if('filterable'in state){me.filterable=state.filterable;}me.endBatch();if('hidden'in state){me.toggle(state.hidden!==true);}}//endregion
//region Other
/**
     * Clear cell contents. Base implementation which just sets innerHTML to blank string.
     * Should be overridden in subclasses to clean up for examples widgets.
     * @param {HTMLElement} cellElement
     * @internal
     */},{key:"clearCell",value:function clearCell(cellElement){cellElement.innerHTML='';}/**
     * Override in subclasses to allow/prevent editing of certain rows.
     * @param {Common.data.Model} record
     * @internal
     */},{key:"canEdit",value:function canEdit(record){return true;}//endregion
},{key:"nextVisibleSibling",get:function get(){var next=this.nextSibling;while(next&&next.hidden){next=next.nextSibling;}return next;}},{key:"isLast",get:function get(){return!this.nextVisibleSibling&&(!this.parent||this.parent.isLast);}},{key:"isLastInSubGrid",get:function get(){return(!this.nextVisibleSibling||this.nextVisibleSibling.region!==this.region)&&(!this.parent||this.parent.isLastInSubGrid);}/**
     * The header element for this Column. *Only available after the grid has been rendered*.
     *
     * **Note that column headers are rerendered upon mutation of Column values, so this
     * value is volatile and should not be cached, but should be read whenever needed.**
     * @property {HTMLElement}
     * @readonly
     */},{key:"element",get:function get(){return this.grid.getHeaderElement(this);}/**
     * The text wrapping element for this Column. *Only available after the grid has been rendered*.
     *
     * This is the full-width element which *contains* the text-bearing element and any icons.
     *
     * **Note that column headers are rerendered upon mutation of Column values, so this
     * value is volatile and should not be cached, but should be read whenever needed.**
     * @property {HTMLElement}
     * @readonly
     */},{key:"textWrapper",get:function get(){return DomHelper.getChild(this.element,'.b-grid-header-text');}/**
     * The text containing element for this Column. *Only available after the grid has been rendered*.
     *
     * **Note that column headers are rerendered upon mutation of Column values, so this
     * value is volatile and should not be cached, but should be read whenever needed.**
     * @property {HTMLElement}
     * @readonly
     */},{key:"textElement",get:function get(){return DomHelper.down(this.element,'.b-grid-header-text-content');}/**
     * The child element into which content should be placed. This means where any
     * contained widgets such as filter input fields should be rendered. *Only available after the grid has been rendered*.
     *
     * **Note that column headers are rerendered upon mutation of Column values, so this
     * value is volatile and should not be cached, but should be read whenever needed.**
     * @property {HTMLElement}
     * @readonly
     */},{key:"contentElement",get:function get(){return DomHelper.down(this.element,'.b-grid-header-children');}/**
     * The Field to use as editor for this column
     * @private
     * @readonly
     */},{key:"editor",get:function get(){var editor=this.data.editor;if(editor&&!(editor instanceof Widget)){if(typeof editor==='string'){editor={type:editor};}editor=this.data.editor=WidgetHelper.createWidget(Object.assign(this.defaultEditor,editor));}return editor;},set:function set(editor){this.data.editor=editor;}/**
     * A config object specifying the editor to use to edit this column.
     * @private
     * @readonly
     */},{key:"defaultEditor",get:function get(){return{type:'textfield',name:this.field};}/**
     * Default settings for the column, applied in constructor. None by default, override in subclass.
     * @member {Object} defaults
     * @returns {Object}
     * @readonly
     */ //get defaults() {
//    return {};
//}
//endregion
//region Properties
},{key:"grid",get:function get(){return this._grid||this.parent&&this.parent.grid;}},{key:"locked",get:function get(){return this.data.region==='locked';},set:function set(locked){this.region=locked?'locked':'normal';}// parent headers cannot be sorted by
},{key:"sortable",get:function get(){return this.isLeaf&&this.data.sortable;},set:function set(sortable){this.set('sortable',sortable);}// parent headers cannot be grouped by
},{key:"groupable",get:function get(){return this.isLeaf&&this.data.groupable;},set:function set(groupable){this.set('groupable',groupable);}},{key:"allIndex",get:function get(){return this.masterStore.indexOf(this);}//endregion
//region Width
/**
     * Get/set columns width in px. If column uses flex, width will be undefined.
     * Setting a width on a flex column cancels out flex.
     *
     * **NOTE:** Grid might be configured to always stretch the last column, in which case the columns actual width
     * might deviate from the configured width.
     *
     * ```javascript
     * let grid = new Grid({
     *     appendTo : 'container',
     *     height   : 200,
     *     width    : 400,
     *     columns  : [{
     *         text  : 'First column',
     *         width : 100
     *     }, {
     *         text  : 'Last column',
     *         width : 100 // last column in the grid is always stretched to fill the free space
     *     }]
     * });
     *
     * grid.columns.last.element.offsetWidth; // 300 -> this points to the real element width
     * ```
     * @property {Number|String}
     */},{key:"width",get:function get(){return this.data.width;},set:function set(width){var data={width:width};if(width){data.flex=null;// remove flex when setting width to enable resizing flex columns
}this.set(data);}//Returns subGrid for the column
},{key:"subGrid",get:function get(){return this.grid?this.grid.getSubGridFromColumn(this):undefined;}}],[{key:"fields",//region Config
get:function get(){return[//region Common
/**
             * Get/set header text
             * @member {String} text
             */ /**
             * Text to display in the header
             * @config {String} text
             * @category Common
             */'text',/**
             * The {@link Common.data.Model Model} field name to read data from
             * @config {String} field
             * @category Common
             */'field',/**
             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you want to display.
             * Can also affect other aspects of the cell, such as styling.
             * @param {HTMLElement} cellElement Cell element, for adding CSS classes, styling etc
             * @param {*} value Value to be displayed in the cell
             * @param {Common.data.Model} record Record for the row
             * @param {Grid.column.Column} column This column
             * @param {Grid.view.Grid} grid This grid
             * @param {Grid.row.Row} row Row object
             * @param {Object} size Set `size.height` to specify the desired row height for the current row. Largest specified height will be used, including the configured {@link Grid/view/Grid#config-rowHeight}
             * @config {Function} renderer
             * @category Common
             */'renderer',/**
             * Column width. If value is Number then width is in pixels
             * @config {Number|String} width
             * @category Common
             */'width',/**
             * Gets or sets the column flex weight
             * @member {String} flex
             */ /**
             * Column width as a flex weight. All columns with flex specified divide the available space (after
             * subtracting fixed widths) between them according to the flex value. Columns that have flex 2 will be
             * twice as wide as those with flex 1 (and so on)
             * @config {Number} flex
             * @category Common
             */'flex',//endregion
//region Interaction
/**
             * Specifies if this column should be editable, and define which editor to use for editing cells in the
             * column (if {@link Grid/feature/CellEdit CellEdit} feature is enabled). Editor refers to {@link #config-field} for a data source. If
             * record has method set + capitalized field, method will be called, e.g. if record has method named
             * `setFoobar` and this config is `foobar`, then instead of `record.foobar = value`,
             * `record.setFoobar(value)` will be called.
             * @config {String|Object|Boolean} editor
             * @category Interaction
             */{name:'editor',defaultValue:{}},/**
             * Allow sorting of data in the column. You can pass true/false to enable/disable sorting, or provide a
             * custom sorting function, or a config object for a {@link Common.util.CollectionSorter}
             *
             * ```javascript
             * const grid = new Grid({
             *     columns : [
             *          {
             *              // Disable sorting for this column
             *              sortable : false
             *          },
             *          {
             *              // Custom sorting for this column
             *              sortable : function(user1, user2) {
             *                  return user1.name < user2.name ? -1 : 1;
             *              }
             *          },
             *          {
             *              // A config object for a Common.util.CollectionSorter
             *              sortable : {
             *                  property         : 'someField',
             *                  direction        : 'DESC',
             *                  useLocaleCompare : 'sv-SE'
             *              }
             *          }
             *     ]
             * });
             * ```
             *
             * @config {Boolean/Function/Object} sortable
             * @default true
             * @category Interaction
             */{name:'sortable',defaultValue:true},/**
             * Allow searching in the column (respected by QuickFind and Search features)
             * @config {Boolean} searchable
             * @default true
             * @category Interaction
             */{name:'searchable',defaultValue:true},/**
             * Allow filtering data in the column (if Filter or FilterBar feature is enabled). Also allows passing a
             * custom filtering function that will be called for each record with a single argument of format
             * { value, record, [operator] }. Returning `true` from the function includes the record in the filtered set.
             *
             * ```
             * const grid = new Grid({
             *     columns : [
             *          {
             *              field : 'name',
             *              // Disable filtering for this column
             *              filterable : false
             *          },
             *          {
             *              field : 'age',
             *              // Custom filtering for this column
             *              filterable: ({ value, record }) => Math.abs(record.age - value) < 10
             *          }
             *     ]
             * });
             * ```
             *
             * @config {Boolean/Function} filterable
             * @default true
             * @category Interaction
             */{name:'filterable',defaultValue:true},/**
             * Allow column visibility to be toggled through UI
             * @config {Boolean} hideable
             * @default true
             * @category Interaction
             */{name:'hideable',defaultValue:true},/**
             * Set to false to prevent this column header from being dragged
             * @config {Boolean} draggable
             * @category Interaction
             */{name:'draggable',defaultValue:true},/**
             * Set to false to prevent grouping by this column
             * @config {Boolean} groupable
             * @category Interaction
             */{name:'groupable',defaultValue:true},/**
             * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
             * @config {Boolean} resizable
             * @default true
             * @category Interaction
             */{name:'resizable',defaultValue:true},//endregion
//region Rendering
/**
             * Renderer function for group headers (when using Group feature).
             * @param {HTMLElement} cellElement Cell element, for adding CSS classes, styling etc.
             * @param {*} groupRowFor Current group value
             * @param {Common.data.Model} record Record for the row
             * @param {Grid.column.Column} groupColumn Column that the grid is grouped by
             * @config {Function} groupRenderer
             * @returns {String} The header grouping text
             * @category Rendering
             */'groupRenderer',/**
             * Renderer function for the column header.
             * @param {Object} renderData
             * @param {Grid.column.Column} renderData.column This column
             * @param {HTMLElement} renderData.headerElement The header element
             * @config {Function} headerRenderer
             * @category Rendering
             */'headerRenderer',/**
             * Renderer function for cell tooltips header (used with CellTooltip feature). Specify false to prevent
             * tooltip for that column.
             * @param {HTMLElement} cellElement Cell element
             * @param {Common.data.Model} record Record for cell row
             * @param {Grid.column.Column} column Cell column
             * @param {CellTooltip} cellTooltip Feature instance, used to set tooltip content async
             * @param {MouseEvent} event The event that triggered the tooltip
             * @config {Function} tooltipRenderer
             * @category Rendering
             */'tooltipRenderer',/**
             * CSS class added to each cell in this column
             * @config {String} cellCls
             * @category Rendering
             */'cellCls',/**
             * CSS class added to the header of this column
             * @config {String} cls
             * @category Rendering
             */'cls',/**
             * Get/set header icon class
             * @member {String} icon
             */ /**
             * Icon to display in header. Specifying an icon will render a `<i>` element with the icon as value for the
             * class attribute
             * @config {String} icon
             * @category Rendering
             */'icon',//endregion
//region Layout
/**
             * Text align (left, center, right)
             * @config {String} align
             * @category Layout
             */'align',/**
             * Column minimal width. If value is Number then minimal width is in pixels
             * @config {Number|String} minWidth
             * @default 60
             * @category Layout
             */{name:'minWidth',defaultValue:60},/**
             * Get/set columns hidden state. Specify `true` to hide the column, `false` to show it.
             * @member {Boolean} hidden
             */ /**
             * Hide the column from start
             * @config {Boolean} hidden
             * @category Layout
             */{name:'hidden',defaultValue:false},/**
             * Convenient way of putting a column in the "locked" region. Same effect as specifying region: 'locked'.
             * If you have defined your own regions (using {@link Grid.view.Grid#config-subGridConfigs}) you should use
             * {@link #config-region} instead of this one.
             * @config {Boolean} locked
             * @default false
             * @category Layout
             */{name:'locked'},/**
             * Region (part of the grid, it can be configured with multiple) where to display the column. Defaults to
             * {@link Grid.view.Grid#config-defaultRegion}.
             * @config {String} region
             * @category Layout
             */{name:'region'},//endregion
// region Menu
/**
             * Show column picker for the column
             * @config {Boolean} showColumnPicker
             * @default true
             * @category Menu
             */{name:'showColumnPicker',defaultValue:true},/**
             * false to prevent showing a context menu on the column header element
             * @config {Boolean} enableHeaderContextMenu
             * @default true
             * @category Menu
             */{name:'enableHeaderContextMenu',defaultValue:true},/**
             * false to prevent showing a context menu on the cell elements in this column
             * @config {Boolean} enableCellContextMenu
             * @default true
             * @category Menu
             */{name:'enableCellContextMenu',defaultValue:true},/**
             * Extra items to show in the header context menu for this column
             * @config {Object[]} headerMenuItems
             * @category Menu
             */'headerMenuItems',/**
             * Extra items to show in the cell context menu for this column
             * @config {Object[]} cellMenuItems
             * @category Menu
             */'cellMenuItems',//endregion
//region Summary
/**
             * Summary type (when using Summary feature). Valid types are:
             * <dl class="wide">
             * <dt>sum <dd>Sum of all values in the column
             * <dt>add <dd>Alias for sum
             * <dt>count <dd>Number of rows
             * <dt>countNotEmpty <dd>Number of rows containing a value
             * <dt>average <dd>Average of all values in the column
             * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)
             * </dl>
             * @config {String} sum
             * @category Summary
             */'sum',/**
             * Summary configs, use if you need multiple summaries per column. Replaces {@link #config-sum} and
             * {@link #config-summaryRenderer} configs. Accepts an array of objects with the following fields:
             * * sum - Matching {@link #config-sum}
             * * renderer - Matching {@link #config-summaryRenderer}
             * * seed - Initial value when using a function as `sum`
             * @config {Object[]} summaries
             * @category Summary
             */'summaries',/**
             * Renderer function for summary (when using Summary feature). The renderer is called with the calculated
             * summary as only argument.
             * @config {Function} summaryRenderer
             * @category Summary
             */'summaryRenderer',//region Misc
/**
             * Column settings at different responsive levels, see responsive demo under examples/
             * @config {Object} responsiveLevels
             * @category Misc
             */'responsiveLevels',/**
             * Tags, may be used by ColumnPicker feature for grouping columns by tag in the menu
             * @config {String[]} tags
             * @category Misc
             */'tags',/**
             * Column config to apply to normal config if viewed on a touch device
             * @config {Object} touchConfig
             * @category Misc
             */'touchConfig',/**
             * When using the tree feature, exactly one column should specify { tree: true }
             * @config {Boolean} tree
             * @category Misc
             */'tree',/**
             * Determines which type of filtering to use for the column. Usually determined by the column type used,
             * but may be overridden by setting this field.
             * @config {String} filterType
             * @category Misc
             */'filterType',/**
             * By default, any rendered column text content is HTML-encoded. Set this flag to `false` disable this and allow rendering html elements
             * @config {Boolean} htmlEncode
             * @default true
             * @category Misc
             */{name:'htmlEncode',defaultValue:true},/**
             * Set to `true`to automatically call DomHelper.sync for html returned from a renderer. Should in most cases
             * be more performant than replacing entire innerHTML of cell and also allows CSS transitions to work. Has
             * no effect unless `htmlEncode` is enabled. Returned html must contain a single root element (that can have
             * multiple children). See PercentColumn for example usage.
             * @config {Boolean} autoSyncHtml
             * @default false
             * @category Misc
             */{name:'autoSyncHtml',defaultValue:false},'type',/**
             * Set to `true` to have the {@link Grid.feature.CellEdit CellEdit} feature update the record being
             * edited live upon field edit instead of when editing is finished by using `TAB` or `ENTER`
             */{name:'instantUpdate',defaultValue:false},{name:'repaintOnResize',defaultValue:false},/**
            * An optional query selector to select a sub element within the cell being
            * edited to align a cell editor's `X` position and `width` to.
            * @config {String} editTargetSelector
            */'editTargetSelector'//endregion
];}// prevent undefined fields from being exposed, to simplify spotting errors
},{key:"autoExposeFields",get:function get(){return false;}},{key:"type",get:function get(){return'column';}},{key:"text",get:function get(){return this.defaultValues.text;}}]);return Column;}(Events(Localizable(Model)));// Registered in ColumnStore as we can't have this in Column due to circular dependencies
// ColumnStore.registerColumnType(Column);
exports.Column=Column;Column.emptyCount=0;Column.defaultWidth=100;Column.exposeProperties();Column._$name='Column';/**
 * @module Grid/data/ColumnStore
 */ /**
 * A store specialized in handling columns. Used by the Grid to hold its columns and used as a chained store by each SubGrid
 * to hold theirs. Should not be instanced directly, instead access it through `grid.columns` or `subGrid.columns`
 *
 * ```
 * // resize first column
 * grid.columns.first.width = 200;
 *
 * // remove city column
 * grid.columns.get('city').remove();
 *
 * // add new column
 * grid.columns.add({text : 'New column'});
 *
 * // add new column to specific region (SubGrid)
 * grid.columns.add({text : 'New column', region : 'locked'});
 *
 * // add new column to 'locked' region (SubGrid)
 * grid.columns.add({text : 'New column', locked : true});
 * ```
 *
 * @extends Common/data/Store
 */var ColumnStore=/*#__PURE__*/function(_Localizable4){_inherits2(ColumnStore,_Localizable4);function ColumnStore(){_classCallCheck2(this,ColumnStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnStore).apply(this,arguments));}_createClass2(ColumnStore,[{key:"construct",value:function construct(config){var me=this;// Consequences of ColumnStore construction can cause reading of grid.columns
// so set the property early.
if(config.grid){config.grid._columnStore=me;me.id="".concat(config.grid.id,"-columns");}_get2(_getPrototypeOf2(ColumnStore.prototype),"construct",this).call(this,config);// So that we can invalidate cached collections which take computing so that we compute them
// only when necessary. For example when asking for the visible leaf columns, we do not want
// to compute that each time.
me.on({change:me.clearCaches,scope:me,prio:1});}},{key:"doDestroy",value:function doDestroy(){var allColumns=[];this.traverse(function(column){return allColumns.push(column);});_get2(_getPrototypeOf2(ColumnStore.prototype),"doDestroy",this).call(this);// Store's destroy unjoins all records. Destroy all columns *after* that.
allColumns.forEach(function(column){return column.destroy();});}// Overridden because the flat collection only contains top level columns,
// not leaves - group columns are *not* expanded.
},{key:"getById",value:function getById(id){return _get2(_getPrototypeOf2(ColumnStore.prototype),"getById",this).call(this,id)||this.idRegister[id];}},{key:"forEach",value:function forEach(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;// Override to omit root
if(this.tree){this.rootNode.traverseWhile(function(n,i){return fn.call(thisObj,n,i);},true);}// stores on subgrids are chained and are not trees
else{_get2(_getPrototypeOf2(ColumnStore.prototype),"forEach",this).call(this,fn,thisObj);}}},{key:"clearCaches",value:function clearCaches(){this._visibleColumns=null;}},{key:"onMasterDataChanged",value:function onMasterDataChanged(event){_get2(_getPrototypeOf2(ColumnStore.prototype),"onMasterDataChanged",this).call(this,event);// If master store has changes we also need to clear cached columns, in case a column was hidden
this.clearCaches();}},{key:"getAdjacentVisibleLeafColumn",value:function getAdjacentVisibleLeafColumn(columnOrId){var next=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var wrap=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var columns=this.visibleColumns,column=columnOrId instanceof Column?columnOrId:this.getById(columnOrId),idx=columns.indexOf(column)+(next?1:-1);// If we walked off either end, wrap if directed to do so,
// otherwise, return null;
if(!columns[idx]){if(wrap){idx=next?0:columns.length-1;}else{return null;}}return columns[idx];}/**
     * Bottom columns are the ones displayed in the bottom row of a grouped header, or all columns if not using a grouped
     * header. They are the columns that actually display any data.
     * @returns {Grid.column.Column[]}
     * @readonly
     */},{key:"get",/**
     * Get column by field. To be sure that you are getting exactly the intended column, use {@link Common.data.Store#function-getById Store#getById()} with the
     * columns id instead.
     * @param {String} field Field name
     * @returns {Grid.column.Column}
     */value:function get(field){return this.findRecord('field',field,true);}/**
     * Used internally to create a new record in the store. Creates a column of the correct type by looking up the
     * specified type among registered columns.
     * @private
     */},{key:"createRecord",value:function createRecord(data){var columnClass=this.modelClass;if(data.type){columnClass=ColumnStore.getColumnClass(data.type);if(!columnClass)throw new Error(this.L('columnTypeNotFound',data));}if(data.locked){data.region='locked';delete data.locked;}var column=new columnClass(data,this);// Doing this after construction, in case the columnClass has a default value for region (Schedulers
// TimeAxisColumn has)
if(!column.data.region){column.data.region=this.grid?this.grid.defaultRegion:'normal';// Some ColumnStore tests lacks Grid
}return column;}/**
     * indexOf extended to also accept a columns field, for backward compatibility.
     * ```
     * grid.columns.indexOf('name');
     * ```
     * @param recordOrId
     * @returns {Number}
     */},{key:"indexOf",value:function indexOf(recordOrId){// TODO: build the need for field away
var index=_get2(_getPrototypeOf2(ColumnStore.prototype),"indexOf",this).call(this,recordOrId);if(index>-1)return index;// no record found by id, find by field since old code relies on that instead of id
// TODO: replace such cases with columns id
return this.records.findIndex(function(r){return r.field===recordOrId;});}//region Column types
/**
     * Call from custom column to register it with ColumnStore. Required to be able to specify type in column config.
     * @param columnClass The class
     * @example
     * // create and register custom column
     * class CustomColumn {
     *  static get type() {
     *      return 'custom';
     *  }
     * }
     * ColumnStore.registerColumnType(CustomColumn);
     * // now possible to specify in column config
     * let grid = new Grid({
     *   columns: [
     *     { type: 'custom', field: 'id' }
     *   ]
     * });
     */},{key:"totalFixedWidth",get:function get(){var result=0;var _iteratorNormalCompletion29=true;var _didIteratorError29=false;var _iteratorError29=undefined;try{for(var _iterator29=this[Symbol.iterator](),_step29;!(_iteratorNormalCompletion29=(_step29=_iterator29.next()).done);_iteratorNormalCompletion29=true){var col=_step29.value;if(!col.hidden){if(col.flex){result+=col.measureSize(Column.defaultWidth);}else{result+=Math.max(col.measureSize(col.width),col.measureSize(col.minWidth));}}}}catch(err){_didIteratorError29=true;_iteratorError29=err;}finally{try{if(!_iteratorNormalCompletion29&&_iterator29.return!=null){_iterator29.return();}}finally{if(_didIteratorError29){throw _iteratorError29;}}}return result;}/**
     * Returns the visible leaf headers which drive the rows' cell content.
     * @property {Grid.column.Column[]}
     * @readonly
     */},{key:"visibleColumns",get:function get(){var me=this;if(!me._visibleColumns){me._visibleColumns=me.leaves.filter(function(column){return!column.hidden;});}return me._visibleColumns;}},{key:"bottomColumns",get:function get(){return this.leaves;}}],[{key:"registerColumnType",value:function registerColumnType(columnClass){if(!ColumnStore.columnTypes)ColumnStore.columnTypes={};ColumnStore.columnTypes[columnClass.type]=columnClass;}/**
     * Returns registered column class for specified type.
     * @param type Type name
     * @returns {Grid.column.Column}
     * @internal
     */},{key:"getColumnClass",value:function getColumnClass(type){return ColumnStore.columnTypes&&ColumnStore.columnTypes[type];}//endregion
},{key:"defaultConfig",get:function get(){return{modelClass:Column,tree:true};}}]);return ColumnStore;}(Localizable(Store));/**
 * Custom {@link Grid.data.ColumnStore} event which triggers when a column is resized, i.e. its width has been changed
 *
 * @param {Function} handler
 * @param {Object} [thisObj]
 */exports.ColumnStore=ColumnStore;var columnResizeEvent=function columnResizeEvent(handler,thisObj){return{'update':function update(_ref81){var store=_ref81.store,record=_ref81.record,changes=_ref81.changes;var result=true;if('width'in changes||'minWidth'in changes||'flex'in changes){result=handler.call(thisObj,{store:store,record:record,changes:changes});}return result;}};};// Can't have this in Column due to circular dependencies
ColumnStore.registerColumnType(Column);ColumnStore._$name='ColumnStore';//TODO: Currently widgets reuse elements already in cell, but performance would improve if entire widget was reused
/**
 * @module Grid/column/WidgetColumn
 */ /**
 * A column that displays widgets in the cells
 *
 * @extends Grid/column/Column
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'widget', text: 'Increase age', widget: { type: 'button', icon: 'add' }, data: 'age' }
 *     ]
 * });
 *
 * @classType widget
 * @externalexample column/WidgetColumn.js
 */var WidgetColumn=/*#__PURE__*/function(_Column){_inherits2(WidgetColumn,_Column);function WidgetColumn(){_classCallCheck2(this,WidgetColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(WidgetColumn).apply(this,arguments));}_createClass2(WidgetColumn,[{key:"construct",//endregion
//region Init / Destroy
value:function construct(config,store){this.widgetMap={};this.internalCellCls='b-widget-cell';_get2(_getPrototypeOf2(WidgetColumn.prototype),"construct",this).apply(this,arguments);}},{key:"doDestroy",value:function doDestroy(){// Destroy all the widgets we created.
for(var _i19=0,_Object$values2=Object.values(this.widgetMap);_i19<_Object$values2.length;_i19++){var widget=_Object$values2[_i19];widget.destroy&&widget.destroy();}_get2(_getPrototypeOf2(WidgetColumn.prototype),"doDestroy",this).call(this);}//endregion
//region Render
/**
     * Renderer that displays a widget in the cell.
     * @param {Object} event Render event
     * @private
     */},{key:"renderer",value:function renderer(event){var me=this,cellElement=event.cellElement,column=event.column,value=event.value,record=event.record,widgets=column.widgets;if(widgets){// If there is no widgets yet and we're going to add them,
// need to make sure there is no content left in the cell after its previous usage
// by grid features such as grouping feature or so.
if(!cellElement.widgets){// Reset cell content
me.clearCell(cellElement);}cellElement.widgets=widgets.map(function(widgetCfg,i){var widget,widgetNextSibling;// If cell element already has widgets, check if we need to destroy/remove one
if(cellElement.widgets){// Current widget
widget=cellElement.widgets[i];// Store next element sibling to insert widget to correct position later
widgetNextSibling=widget.element.nextElementSibling;// If we are not syncing content for present widget, remove it from cell and render again later
if(widgetCfg.recreate&&widget){// destroy widget and remove reference to it
delete me.widgetMap[widget.id];widget.destroy();cellElement.widgets[i]=null;}}// Ensure widget is created if first time through
if(!widget){me.onBeforeWidgetCreate(widgetCfg,event);widget=WidgetHelper.append(widgetCfg,widgetNextSibling?{insertBefore:widgetNextSibling}:cellElement)[0];me.widgetMap[widget.id]=widget;me.onAfterWidgetCreate(widget,event);}widget.cellInfo={cellElement:cellElement,value:value,record:record,column:column};if(me.grid){widget.readOnly=me.grid.readOnly;}if(me.onBeforeWidgetSetValue(widget,event)!==false){if(!widgetCfg.noValueOnRender){if(widgetCfg.valueProperty){widget[widgetCfg.valueProperty]=value;}else if(widget.defaultBindProperty){widget[widget.defaultBindProperty]=value;}else{widget.text=widget.value=value;}}}return widget;});}}//endregion
//region Other
/**
     * Called before widget is created on rendering
     * @param {Object} widgetCfg Widget config
     * @param {Object} event Render event
     * @private
     */},{key:"onBeforeWidgetCreate",value:function onBeforeWidgetCreate(widgetCfg,event){}/**
     * Called after widget is created on rendering
     * @param {Common.widget.Widget} widget Created widget
     * @param {Object} event Render event
     * @private
     */},{key:"onAfterWidgetCreate",value:function onAfterWidgetCreate(widget,event){}/**
     * Called before widget gets value on rendering. Pass `false` to skip value setting while rendering
     * @param {Common.widget.Widget} widget Created widget
     * @param {Object} event Render event
     * @private
     */},{key:"onBeforeWidgetSetValue",value:function onBeforeWidgetSetValue(widget,renderEvent){}// Overrides base implementation to cleanup widgets, for example when a cell is reused as part of group header
},{key:"clearCell",value:function clearCell(cellElement){var _this37=this;if(cellElement.widgets){cellElement.widgets.forEach(function(widget){// Destroy widget and remove reference to it
delete _this37.widgetMap[widget.id];widget.destroy();});cellElement.widgets=null;}// Even if there is no widgets need to make sure there is no content left, for example after a cell has been reused as part of group header
_get2(_getPrototypeOf2(WidgetColumn.prototype),"clearCell",this).call(this,cellElement);}// Null implementation because there is no way of ascertaining whether the widgets get their width from
// the column, or the column shrinkwraps the Widget.
// Remember that the widget could have a width from a CSS rule which we cannot read.
// It might have width: 100%, or a flex which would mean it is sized by us, but we cannot read that -
// getComputedStyle would return the numeric width.
},{key:"resizeToFitContent",value:function resizeToFitContent(){}//endregion
}],[{key:"type",//region Config
get:function get(){return'widget';}},{key:"fields",get:function get(){return[/**
             * An array of widget config objects
             * @config {Object[]} widgets
             * @category Common
             */'widgets'];}},{key:"defaults",get:function get(){return{filterable:false,sortable:false,editor:false,searchable:false};}}]);return WidgetColumn;}(Column);exports.WidgetColumn=WidgetColumn;ColumnStore.registerColumnType(WidgetColumn);WidgetColumn.exposeProperties();WidgetColumn._$name='WidgetColumn';//TODO: Reuse checkbox instead of creating a new one
/**
 * @module Grid/column/CheckColumn
 */ /**
 * A column that displays a checkbox in the cell. The value of the backing field is toggled by the checkbox.
 *
 * @extends Grid/column/WidgetColumn
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'check', field: 'allow' }
 *     ]
 * });
 *
 * @classType check
 * @externalexample column/CheckColumn.js
 */var CheckColumn=/*#__PURE__*/function(_WidgetColumn){_inherits2(CheckColumn,_WidgetColumn);_createClass2(CheckColumn,null,[{key:"type",//region Config
get:function get(){return'check';}},{key:"fields",get:function get(){return['checkCls'];}},{key:"defaults",get:function get(){return{align:'center',/**
             * CSS class name to add to checkbox
             * @config {String}
             * @category Rendering
             */checkCls:null,widgets:[{type:'checkbox',valueProperty:'checked'}]};}}]);function CheckColumn(config,store){var _this38;_classCallCheck2(this,CheckColumn);_this38=_possibleConstructorReturn2(this,_getPrototypeOf2(CheckColumn).apply(this,arguments));_this38.internalCellCls='b-check-cell';return _this38;}//endregion
//region Widget rendering
_createClass2(CheckColumn,[{key:"onBeforeWidgetCreate",value:function onBeforeWidgetCreate(widgetCfg,event){widgetCfg.cls=this.checkCls;}},{key:"onAfterWidgetCreate",value:function onAfterWidgetCreate(widget,event){event.cellElement.widget=widget;widget.on({beforeChange:'onBeforeCheckboxChange',change:'onCheckboxChange',thisObj:this});}},{key:"onBeforeWidgetSetValue",value:function onBeforeWidgetSetValue(widget){widget.record=widget.cellInfo.record;}//endregion
//region Events
},{key:"onBeforeCheckboxChange",value:function onBeforeCheckboxChange(_ref82){var source=_ref82.source,checked=_ref82.checked;/**
         * Fired when a cell is clicked to toggle its checked status. Returning `false` will prevent status change.
         * @event beforeToggle
         * @param {Grid.column.Column} source This Column
         * @param {Common.data.Model} record The record for the row containing the cell.
         * @param {Boolean} checked The new checked status of the cell.
         */return this.trigger('beforeToggle',{record:source.cellInfo.record,checked:checked});}},{key:"onCheckboxChange",value:function onCheckboxChange(_ref83){var source=_ref83.source,checked=_ref83.checked;var record=source.cellInfo.record,field=this.field;if(field){var setterName="set".concat(StringHelper.capitalizeFirstLetter(field));if(record[setterName]){record[setterName](checked);}else{record.set(field,checked);}}/**
         * Fired when a cell is clicked to toggle its checked status.
         * @event toggle
         * @param {Grid.column.Column} source This Column
         * @param {Common.data.Model} record The record for the row containing the cell.
         * @param {Boolean} checked The new checked status of the cell.
         */this.trigger('toggle',{record:record,checked:checked});}//endregion
}]);return CheckColumn;}(WidgetColumn);exports.CheckColumn=CheckColumn;ColumnStore.registerColumnType(CheckColumn);CheckColumn._$name='CheckColumn';/**
 * @module Grid/column/DateColumn
 */ /**
 * A column that displays a date in the specified format (see {@link Common.helper.DateHelper#function-format-static} for formatting options),
 * with a date picker as default editor.
 *
 * @extends Grid/column/Column
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *          { type: 'date', text: 'Start date', format: 'YYYY-MM-DD', data: 'start' }
 *     ]
 * });
 *
 * @classType date
 * @externalexample column/DateColumn.js
 */var DateColumn=/*#__PURE__*/function(_Column2){_inherits2(DateColumn,_Column2);_createClass2(DateColumn,null,[{key:"type",//region Config
get:function get(){return'date';}},{key:"fields",get:function get(){return['format','pickerFormat','step'];}},{key:"defaults",get:function get(){return{/**
             * Date format
             * @config {String}
             * @category Common
             */format:'L',/**
             * Date format used for date picker
             * @config {String}
             * @category Common
             */pickerFormat:null,/**
             * Time increment duration value. See {@link Common.widget.DateField#config-step} for more information
             * @config {String|Number|Object}
             * @category Common
             */step:1,minWidth:85,filterType:'date'};}//endregion
//region Init
}]);function DateColumn(config,store){var _this39;_classCallCheck2(this,DateColumn);_this39=_possibleConstructorReturn2(this,_getPrototypeOf2(DateColumn).apply(this,arguments));_this39.internalCellCls='b-date-cell';return _this39;}//endregion
//region Display
/**
     * Renderer that displays the date with the specified format. Also adds cls 'date-cell' to the cell.
     * @private
     */_createClass2(DateColumn,[{key:"defaultRenderer",value:function defaultRenderer(_ref84){var value=_ref84.value;return value?this.formatValue(value):'';}/**
     * Group renderer that displays the date with the specified format.
     * @private
     */},{key:"groupRenderer",value:function groupRenderer(_ref85){var cellElement=_ref85.cellElement,groupRowFor=_ref85.groupRowFor;cellElement.innerHTML=this.formatValue(groupRowFor);}//endregion
//region Formatter
/**
     * Used by both renderer and groupRenderer to do the actual formatting of the date
     * @private
     * @param value
     * @returns {String}
     */},{key:"formatValue",value:function formatValue(value){// Ideally we should be served a date, but if not make it easier for the user by parsing
if(typeof value==='string'){value=DateHelper.parse(value,this.format);}return DateHelper.format(value,this.format);}//endregion
//region Getters/setters
/**
     * Get/Set format for date displayed in cell and editor (see {@link Common.helper.DateHelper#function-format-static} for formatting options)
     * @property {String}
     */},{key:"format",set:function set(value){var me=this,editor=me.editor;me.set('format',value);if(editor){editor.format=me.format;}},get:function get(){return this.get('format');}},{key:"defaultEditor",get:function get(){var me=this;return{name:me.field,type:'date',calendarContainerCls:'b-grid-cell-editor-related',format:me.format,pickerFormat:me.pickerFormat||me.format,step:me.step};}//endregion
}]);return DateColumn;}(Column);exports.DateColumn=DateColumn;ColumnStore.registerColumnType(DateColumn);DateColumn.exposeProperties();DateColumn._$name='DateColumn';/**
 * @module Grid/column/PercentColumn
 */ /**
 * A column that display a basic progress bar
 *
 * @extends Grid/column/Column
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'percent', text: 'Progress', data: 'progress' }
 *     ]
 * });
 *
 * @classType percent
 * @externalexample column/PercentColumn.js
 */var PercentColumn=/*#__PURE__*/function(_Column3){_inherits2(PercentColumn,_Column3);_createClass2(PercentColumn,null,[{key:"type",get:function get(){return'percent';}},{key:"fields",get:function get(){return['lowThreshold'];}},{key:"defaults",get:function get(){return{/**
             * PercentColumn uses a {@link Common.widget.NumberField} configured with an allowed interval 0 - 100 as
             * its default editor.
             * @config {Object|String}
             * @default Common.widget.NumberField
             * @category Misc
             */editor:{type:'number',min:0,max:100},/**
             * When below this percentage the bar will have `b-low` CSS class added. By default it turns the bar red.
             * @config {Number}
             * @category Rendering
             */lowThreshold:20,filterType:'number',htmlEncode:false,searchable:false,summaryRenderer:function summaryRenderer(sum){return"".concat(sum,"%");}};}}]);function PercentColumn(config,store){var _this40;_classCallCheck2(this,PercentColumn);_this40=_possibleConstructorReturn2(this,_getPrototypeOf2(PercentColumn).apply(this,arguments));_this40.internalCellCls='b-percent-bar-cell';return _this40;}/**
     * Renderer that displays a progress bar in the cell.
     * @private
     */_createClass2(PercentColumn,[{key:"renderer",value:function renderer(_ref86){var value=_ref86.value,cellElement=_ref86.cellElement;value=value||0;if(!cellElement.percentBarElement){cellElement.percentBarElement=DomHelper.createElement({tag:'div',className:'b-percent-bar-outer',parent:cellElement,children:[{tag:'div',className:'b-percent-bar',html:'%'}]},true)[1];}var percentBarElement=cellElement.percentBarElement;percentBarElement.classList[value===0?'add':'remove']('b-zero');percentBarElement.classList[value<this.lowThreshold?'add':'remove']('b-low');percentBarElement.style.width=value+'%';percentBarElement.firstChild.data=value+'%';}// Overrides base implementation to cleanup the checkbox, for example when a cell is reused as part of group header
},{key:"clearCell",value:function clearCell(cellElement){if(cellElement.percentBarElement){cellElement.percentBarElement=null;}_get2(_getPrototypeOf2(PercentColumn.prototype),"clearCell",this).call(this,cellElement);}// Null implementation because the column width drives the width of its content.
// So the concept of sizing to content is invalid here.
},{key:"resizeToFitContent",value:function resizeToFitContent(){}}]);return PercentColumn;}(Column);exports.PercentColumn=PercentColumn;PercentColumn.sum='average';ColumnStore.registerColumnType(PercentColumn);PercentColumn._$name='PercentColumn';/**
 * @module Grid/column/NumberColumn
 */ /**
 * A column for showing/editing numbers
 *
 * @extends Grid/column/Column
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'number', min: 0, max : 100, field: 'score' }
 *     ]
 * });
 *
 * @classType number
 * @externalexample column/NumberColumn.js
 */var NumberColumn=/*#__PURE__*/function(_Column4){_inherits2(NumberColumn,_Column4);_createClass2(NumberColumn,null,[{key:"type",//region Config
get:function get(){return'number';}},{key:"fields",get:function get(){return[/**
             * The minimum value for the field used during editing.
             * @config {Number} min
             * @category Common
             */'min',/**
             * The maximum value for the field used during editing.
             * @config {Number} max
             * @category Common
             */'max',/**
             * Step size for the field used during editing. Specify a fractional step size to allow entering decimal
             * numbers.
             * @config {Number} step
             * @category Common
             */'step',/**
             * Unit to append to displayed value.
             * @config {String} unit
             * @category Common
             */'unit'];}},{key:"defaults",get:function get(){return{filterType:'number'};}}]);function NumberColumn(config,store){var _this41;_classCallCheck2(this,NumberColumn);_this41=_possibleConstructorReturn2(this,_getPrototypeOf2(NumberColumn).apply(this,arguments));_this41.internalCellCls='b-number-cell';return _this41;}//endregion
//region Init
_createClass2(NumberColumn,[{key:"defaultRenderer",/**
     * Renderer that displays value + optional unit in the cell
     * @private
     */value:function defaultRenderer(_ref87){var _ref87$value=_ref87.value,value=_ref87$value===void 0?0:_ref87$value;if(this.unit){return"".concat(value).concat(this.unit);}return value;}},{key:"defaultEditor",get:function get(){return{name:this.field,type:'numberfield',max:this.max,min:this.min,step:this.step};}}]);return NumberColumn;}(Column);ColumnStore.registerColumnType(NumberColumn);NumberColumn.exposeProperties();NumberColumn._$name='NumberColumn';// TODO: resuse icon elements
/**
 * @module Grid/column/RatingColumn
 */ /**
 * A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.
 * Clicking the first and only star toggles it.
 *
 * @extends Grid/column/NumberColumn
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'rating', max : 10, field: 'rating' }
 *     ]
 * });
 *
 * @classType percent
 * @externalexample column/RatingColumn.js
 */var RatingColumn=/*#__PURE__*/function(_NumberColumn){_inherits2(RatingColumn,_NumberColumn);_createClass2(RatingColumn,null,[{key:"type",get:function get(){return'rating';}},{key:"fields",get:function get(){return['emptyIcon','filledIcon','editable'];}},{key:"defaults",get:function get(){return{min:0,max:5,/**
             * The empty rating icon to show
             * @config {String}
             * @category Rendering
             */emptyIcon:'b-icon b-icon-star',/**
             * The filled rating icon to show
             * @config {String}
             * @category Rendering
             */filledIcon:'b-icon b-icon-star',/**
             * Allow user to click an icon to change the value
             * @config {Boolean}
             * @category Interaction
             */editable:true,filterType:'number',searchable:false,width:'11.2em',htmlEncode:false,autoSyncHtml:true,minWidth:'11.2em',editor:false};}}]);function RatingColumn(config,store){var _this42;_classCallCheck2(this,RatingColumn);_this42=_possibleConstructorReturn2(this,_getPrototypeOf2(RatingColumn).apply(this,arguments));_this42.internalCellCls='b-rating-cell';return _this42;}/**
     * Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.
     * @private
     */_createClass2(RatingColumn,[{key:"renderer",value:function renderer(_ref88){var value=_ref88.value;var html="<div class=\"b-rating-cell-inner ".concat(!this.editable?'b-not-editable':'',"\">");for(var i=0;i<this.max;i++){var filled=i<value;html+="<i class=\"b-rating-icon ".concat(filled?'b-filled '+this.filledIcon:'b-empty '+this.emptyIcon,"\"></i>");}html+='</div>';return html;}},{key:"onCellClick",value:function onCellClick(_ref89){var grid=_ref89.grid,column=_ref89.column,record=_ref89.record,cellSelector=_ref89.cellSelector,target=_ref89.target,event=_ref89.event;if(target.classList.contains('b-rating-icon')&&!grid.readOnly&&column.editable){var starIndex=[].indexOf.call(target.parentNode.childNodes,target);if(target.classList.contains('b-filled')&&(event.metaKey||event.shiftKey)){starIndex=starIndex-1;}// Clicking first star when it is only one removes it
if(record.get(column.field)===1&&starIndex===0){starIndex=-1;}record.set(column.field,starIndex+1);}}}]);return RatingColumn;}(NumberColumn);exports.RatingColumn=RatingColumn;ColumnStore.registerColumnType(RatingColumn);RatingColumn.exposeProperties();RatingColumn._$name='RatingColumn';/**
 * @module Grid/column/RowNumberColumn
 */ /**
 * A column that displays the row number in each cell
 *
 * @extends Grid/column/Column
 *
 * @example
 * let grid = new Grid({
    appendTo : targetElement,
    width    : 300,
    columns  : [
        { type : 'rownumber' }
    ]
});
 *
 * @classType rownumber
 * @externalexample column/RowNumberColumn.js
 */var RowNumberColumn=/*#__PURE__*/function(_Column5){_inherits2(RowNumberColumn,_Column5);function RowNumberColumn(){_classCallCheck2(this,RowNumberColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(RowNumberColumn).apply(this,arguments));}_createClass2(RowNumberColumn,[{key:"construct",value:function construct(config,store){var me=this;_get2(_getPrototypeOf2(RowNumberColumn.prototype),"construct",this).apply(this,arguments);// Update our width when the store mutates (tests test Columns in isolation with no grid, so we must handle that!)
if(me.grid){me.grid.store.on({change:me.resizeToFitContent,thisObj:me});if(me.grid.store.count){me.grid.on({render:me.resizeToFitContent,thisObj:me,once:true});}}me.internalCellCls='b-row-number-cell';}},{key:"renderer",/**
     * Renderer that displays the row number in the cell.
     * @private
     */value:function renderer(_ref90){var record=_ref90.record,grid=_ref90.grid;return record.meta.specialRow?'':grid.store.indexOf(record,true)+1;}/**
     * Resizes the column to match the widest string in it. Called when you double click the edge between column
     * headers
     */},{key:"resizeToFitContent",value:function resizeToFitContent(){var grid=this.grid,store=grid.store,count=store.count;if(count&&!this.hidden){var cellElement=grid.element.querySelector(".b-grid-cell[data-column-id=".concat(this.id,"]"));// cellElement might not exist, e.g. when trial is expired
if(cellElement){var cellStyle=window.getComputedStyle(cellElement),cellPadding=parseInt(cellStyle['padding-left']),maxWidth=DomHelper.measureText(count,cellElement);this.width=maxWidth+2*cellPadding;}}}},{key:"flex",set:function set(f){}}],[{key:"defaults",get:function get(){return{groupable:false,sortable:false,filterable:false,searchable:false,resizable:false,minWidth:50,width:50,align:'right',text:'#',editor:false};}},{key:"type",get:function get(){return'rownumber';}}]);return RowNumberColumn;}(Column);exports.RowNumberColumn=RowNumberColumn;ColumnStore.registerColumnType(RowNumberColumn);RowNumberColumn._$name='RowNumberColumn';/**
 * @module Grid/column/TemplateColumn
 */ /**
 * A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.
 * It should return a string which will be rendered in the cell
 *
 * @extends Grid/column/Column
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *         { type: 'template', field: 'age', template: value => `${value} years old` }
 *     ]
 * });
 *
 * @classType template
 * @externalexample column/TemplateColumn.js
 */var TemplateColumn=/*#__PURE__*/function(_Column6){_inherits2(TemplateColumn,_Column6);_createClass2(TemplateColumn,null,[{key:"fields",get:function get(){return[/**
             * Template function used to generate a value displayed in the cell. Called with arguments { value, record, field }
             * @config {Function} template
             * @category Common
             */'template'];}},{key:"defaults",get:function get(){return{htmlEncode:false};}}]);function TemplateColumn(config,store){var _this43;_classCallCheck2(this,TemplateColumn);_this43=_possibleConstructorReturn2(this,_getPrototypeOf2(TemplateColumn).apply(this,arguments));var me=_assertThisInitialized2(_this43);if(!me.template)throw new Error(me.L('noTemplate'));if(typeof me.template!=='function')throw new Error(me.L('noFunction'));return _this43;}_createClass2(TemplateColumn,[{key:"renderer",/**
     * Renderer that uses a template for cell content.
     * @private
     */value:function renderer(renderData){// If it's a special row, such as a group row, we can't use the user's template
if(!renderData.record.meta.specialRow){return this.template({value:renderData.value,record:renderData.record,field:renderData.column.field});}}}],[{key:"type",get:function get(){return'template';}}]);return TemplateColumn;}(Column);exports.TemplateColumn=TemplateColumn;ColumnStore.registerColumnType(TemplateColumn);TemplateColumn.exposeProperties();TemplateColumn._$name='TemplateColumn';/**
 * @module Grid/column/TimeColumn
 */ /**
 * A column that displays a time in the specified format (see {@link Common.helper.DateHelper#function-format-static} for formatting options),
 * with a time picker as default editor.
 *
 * @extends Grid/column/Column
 *
 * @example
 * new Grid({
 *     appendTo : document.body,
 *
 *     columns : [
 *          { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }
 *     ]
 * });
 *
 * @classType time
 * @externalexample column/TimeColumn.js
 */var TimeColumn=/*#__PURE__*/function(_Column7){_inherits2(TimeColumn,_Column7);_createClass2(TimeColumn,null,[{key:"type",//region Config
get:function get(){return'time';}},{key:"fields",get:function get(){return['format'];}},{key:"defaults",get:function get(){return{/**
             * Time format
             * @config {String}
             * @category Common
             */format:'LT',minWidth:140,filterType:'time'};}//endregion
//region Init
}]);function TimeColumn(config,store){var _this44;_classCallCheck2(this,TimeColumn);_this44=_possibleConstructorReturn2(this,_getPrototypeOf2(TimeColumn).apply(this,arguments));_this44.internalCellCls='b-time-cell';return _this44;}//endregion
//region Display
/**
     * Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.
     * @private
     */_createClass2(TimeColumn,[{key:"defaultRenderer",value:function defaultRenderer(_ref91){var value=_ref91.value;return value?this.formatValue(value):'';}/**
     * Group renderer that displays the time with the specified format.
     * @private
     */},{key:"groupRenderer",value:function groupRenderer(_ref92){var cellElement=_ref92.cellElement,groupRowFor=_ref92.groupRowFor;cellElement.innerHTML=this.formatValue(groupRowFor);}//endregion
//region Formatter
/**
     * Used by both renderer and groupRenderer to do the actual formatting of the time
     * @private
     * @param value
     * @returns {String}
     */},{key:"formatValue",value:function formatValue(value){var me=this;// Ideally we should be served a time, but if not make it easier for the user by parsing
if(typeof value==='string'){value=DateHelper.parse(value,me.format);}return DateHelper.format(value,me.format);}//endregion
//region Getters/Setters
/**
     * Get/Set format for time displayed in cell and editor (see {@link Common.helper.DateHelper#function-format-static} for formatting options)
     * @property {String}
     */},{key:"format",set:function set(value){var me=this,editor=me.editor;me.set('format',value);if(editor){editor.format=me.format;}},get:function get(){return this.get('format');}},{key:"defaultEditor",get:function get(){return{name:this.field,type:'time',format:this.format};}//endregion
}]);return TimeColumn;}(Column);exports.TimeColumn=TimeColumn;ColumnStore.registerColumnType(TimeColumn);TimeColumn.exposeProperties();TimeColumn._$name='TimeColumn';/**
 * @module Grid/column/TreeColumn
 */var currentParentHasIcon=false;/**
 * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.
 *
 * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href} and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode, and `target` will
 * have the same meaning as in an A tag:
 *
 * ```javascript
 * {
 *    id        : 1,
 *    name      : 'Some external link'
 *    href      : '//www.website.com",
 *    target    : '_blank"
 * }
 * ```
 *
 * @example
 * new TreeGrid({
 *     appendTo : document.body,
 *
 *     columns : [
 *          { type: 'tree', field: 'name' }
 *     ]
 * });
 *
 * @classType tree
 * @extends Grid/column/Column
 * @externalexample column/TreeColumn.js
 */var TreeColumn=/*#__PURE__*/function(_Column8){_inherits2(TreeColumn,_Column8);_createClass2(TreeColumn,null,[{key:"defaults",get:function get(){return{tree:true,hideable:false,minWidth:150};}},{key:"fields",get:function get(){return[/**
             * The icon to use for the collapse icon in collapsed state
             * @config {String} expandIconCls
             */{name:'expandIconCls',defaultValue:'b-icon b-icon-tree-expand'},/**
             * The icon to use for the collapse icon in expanded state
             * @config {String} collapseIconCls
             */{name:'collapseIconCls',defaultValue:'b-icon b-icon-tree-collapse'},/**
             * The icon to use for the collapse icon in expanded state
             * @config {String} collapsedFolderIconCls
             */ //{ name : 'collapsedFolderIconCls', defaultValue : 'b-icon b-icon-tree-folder' },
{name:'collapsedFolderIconCls'},/**
             * The icon to use for the collapse icon in expanded state
             * @config {String} expandedFolderIconCls
             */ //{ name : 'expandedFolderIconCls', defaultValue : 'b-icon b-icon-tree-folder-open' },
{name:'expandedFolderIconCls'},/**
             * The icon to use for the leaf nodes in the tree
             * @config {String} leafIconCls
             */{name:'leafIconCls',defaultValue:'b-icon b-icon-tree-leaf'},{name:'editTargetSelector',defaultValue:'.b-tree-cell-value'}];}},{key:"type",get:function get(){return'tree';}}]);function TreeColumn(config,store){var _this45;_classCallCheck2(this,TreeColumn);_this45=_possibleConstructorReturn2(this,_getPrototypeOf2(TreeColumn).apply(this,arguments));var me=_assertThisInitialized2(_this45);me.internalCellCls='b-tree-cell';// We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation
// since this class requires quite a lot of DOM infrastructure around the actual rendered content
me.shouldHtmlEncode=me.htmlEncode;me.tempDiv=document.createElement('div');me.setData('htmlEncode',false);// add tree renderer (which calls original renderer internally)
if(me.renderer){me.originalRenderer=me.renderer;}me.renderer=me.treeRenderer.bind(me);return _this45;}/**
     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons
     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.
     * @private
     */_createClass2(TreeColumn,[{key:"treeRenderer",value:function treeRenderer(renderData){var me=this;var cellElement=renderData.cellElement,row=renderData.row,record=renderData.record,value=renderData.value,html='',gridMeta=record.instanceMeta(renderData.grid.store),cls='',tag=record.href?'a':'div',iconCls;if(me.originalRenderer){var rendererHtml=me.originalRenderer(renderData);value=rendererHtml===false?cellElement.innerHTML:rendererHtml;}if(!record.isLeaf){row.addCls&&row.addCls('b-tree-parent-row');cellElement.classList.add('b-tree-parent-cell');// Spinner while loading children, added to row in Tree#toggleCollapse but needs to be readded if row is
// rerendered during load
if(gridMeta.isLoadingChildren){row.addCls('b-loading-children');}// TODO remove IE 11 is no longer supported (doesnt support this)
//cellElement.classList.toggle('b-tree-collapsed', record.meta.collapsed === true);
html+="<div class=\"b-tree-expander ".concat(gridMeta.collapsed?me.expandIconCls+' b-tree-collapsed':me.collapseIconCls+' b-tree-expanded',"\"></div>");// Allow user to customize tree icon or opt out entirely
currentParentHasIcon=iconCls=renderData.iconCls||record.iconCls||(gridMeta.collapsed?me.collapsedFolderIconCls:me.expandedFolderIconCls);if(iconCls){html+="<div class=\"b-tree-icon ".concat(iconCls,"\"></div>");}}else{// TODO: Cleanup for reusing dom nodes should be done elsewhere, also cleanup selection
cellElement.classList.add('b-tree-leaf-cell');// Allow user to customize tree icon or opt out entirely
iconCls=renderData.iconCls||record.iconCls||me.leafIconCls;if(iconCls){cls+=iconCls;}}value=value!=null?value:'';if(me.shouldHtmlEncode){me.tempDiv.innerText=value;value=me.tempDiv.innerHTML;}html+="<div class=\"b-tree-cell-value\">".concat(value,"</div>");// TODO: make size configurable
var padding=record.childLevel*1.7+(record.isLeaf?currentParentHasIcon?1.8:iconCls?0.4:0.3:0);return"<".concat(tag," ").concat(record.href?"href=\"".concat(record.href,"\""):''," ").concat(tag==='a'&&record.target?"target=\"".concat(record.target,"\""):''," class=\"b-tree-cell-inner ").concat(cls,"\" style=\"padding-left:").concat(padding,"em\">").concat(html,"</").concat(tag,">");}}]);return TreeColumn;}(Column);exports.TreeColumn=TreeColumn;ColumnStore.registerColumnType(TreeColumn);TreeColumn.exposeProperties();TreeColumn._$name='TreeColumn';/**
 * @module Grid/data/GridRowModel
 */ /**
 * Model extended with some fields related to grid rendering. Used as default model type in the grids store if nothing
 * else is specified.
 *
 * Using this model is optional. If you use a custom model instead and need the functionality of any of the fields
 * below, you just have to remember to add fields with the same name to your model.
 *
 * @extends Common/data/Model
 */var GridRowModel=/*#__PURE__*/function(_Model3){_inherits2(GridRowModel,_Model3);function GridRowModel(){_classCallCheck2(this,GridRowModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridRowModel).apply(this,arguments));}_createClass2(GridRowModel,null,[{key:"fields",get:function get(){return[/**
             * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
             * @field {String} iconCls
             */'iconCls',/**
             * Start expanded or not (only valid for tree data)
             * @field {Boolean} expanded
             */'expanded',/**
             * CSS class (or several classes divided by space) to append to row elements
             * @field {String} cls
             */'cls',/**
             * Row height, set it to use another height then the default for a row
             * @field {Number} rowHeight
             */'rowHeight',/**
             * A link to use for this record when rendered into a {@link Grid.column.TreeColumn}.
             * @field {String} href
             */'href',/**
             * The target to use if this tree node provides a value for the {@link #field-href} field.
             * @field {String} target
             */'target'];}}]);return GridRowModel;}(Model);exports.GridRowModel=GridRowModel;GridRowModel.exposeProperties();GridRowModel._$name='GridRowModel';/**
 * @module Grid/feature/GridFeatureManager
 */var consumerToFeatureMap=new Map(),consumerToDefaultFeatureMap=new Map(),DEFAULT_FOR_TYPE='Grid';/**
 * Static class intended to register and query grid features
 *
 * @class
 */var GridFeatureManager=/*#__PURE__*/function(){function GridFeatureManager(){_classCallCheck2(this,GridFeatureManager);}_createClass2(GridFeatureManager,null,[{key:"registerFeature",/**
     * Register a feature class with the Grid. Enables it to be created and configured using config Grid#features.
     * @param {Common.mixin.InstancePlugin} featureClass Feature to register
     * @param {Boolean} [onByDefault] Specify true to have the feature enabled per default
     * @param {String|String[]} [forType] Specify a type to let the class applying the feature to determine if it should use it
     */value:function registerFeature(featureClass){var onByDefault=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var forType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var as=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;as=StringHelper.lowercaseFirstLetter(as||featureClass.$name);if(!Array.isArray(forType)){forType=[forType||DEFAULT_FOR_TYPE];}forType.forEach(function(forType){var consumerFeaturesMap=consumerToFeatureMap.get(forType)||new Map(),consumerDefaultFeaturesMap=consumerToDefaultFeatureMap.get(forType)||new Map();consumerFeaturesMap.set(as,featureClass);consumerDefaultFeaturesMap.set(featureClass,onByDefault);consumerToFeatureMap.set(forType,consumerFeaturesMap);consumerToDefaultFeatureMap.set(forType,consumerDefaultFeaturesMap);});}/**
     * Get all the features registered for the given type name in an object where keys are feature names and values are feature constructors.
     *
     * @param {String} [forType]
     * @return {Object}
     */},{key:"getTypeNameFeatures",value:function getTypeNameFeatures(){var forType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_FOR_TYPE;var consumerFeaturesMap=consumerToFeatureMap.get(forType),features={};if(consumerFeaturesMap){consumerFeaturesMap.forEach(function(featureClass,as){return features[as]=featureClass;});}return features;}/**
     * Get all the default features registered for the given type name in an object where keys are feature names and values are feature constructors.
     *
     * @param {String} [forType]
     * @return {Object}
     */},{key:"getTypeNameDefaultFeatures",value:function getTypeNameDefaultFeatures(){var forType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DEFAULT_FOR_TYPE;var consumerFeaturesMap=consumerToFeatureMap.get(forType),consumerDefaultFeaturesMap=consumerToDefaultFeatureMap.get(forType);var features={};if(consumerFeaturesMap&&consumerDefaultFeaturesMap){consumerFeaturesMap.forEach(function(featureClass,as){if(consumerDefaultFeaturesMap.get(featureClass)){features[as]=featureClass;}});}return features;}/**
     * Gets all the features registered for the given instance type name chain. First builds the type name chain then quaries for features
     * for each type name and combines them into one object, see {@link #function-getTypeNameFeatures-static}() for returned object description.
     * If feature is registered for both parent and child type name then feature for child overrides feature for parent.
     *
     * @param {Object} instance
     * @return {Object}
     */},{key:"getInstanceFeatures",value:function getInstanceFeatures(instance){var _this46=this;return instance.classNameHierarchy().reduce(function(features,typeName){return Object.assign(features,_this46.getTypeNameFeatures(typeName));},{});}/**
     * Gets all the *defualt* features registered for the given instance type name chain. First builds the type name chain then quaries for features
     * for each type name and combines them into one object, see {@link #function-getTypeNameFeatures-static}() for returned object description.
     * If feature is registered for both parent and child type name then feature for child overrides feature for parent.
     *
     * @param {Object} instance
     * @return {Object}
     */},{key:"getInstanceDefaultFeatures",value:function getInstanceDefaultFeatures(instance){var _this47=this;return instance.classNameHierarchy().reduce(function(features,typeName){return Object.entries(_this47.getTypeNameFeatures(typeName)).reduce(function(features,_ref93){var _ref94=_slicedToArray(_ref93,2),as=_ref94[0],featureClass=_ref94[1];if(_this47.isDefaultFeatureForTypeName(featureClass,typeName)){features[as]=featureClass;}else{delete features[as];}return features;},features);},{});}/**
     * Checks if the given feature class is default for the type name
     *
     * @param {Common.mixin.InstancePlugin} featureClass Feature to check
     * @param {String} [forType]
     * @return {Boolean}
     */},{key:"isDefaultFeatureForTypeName",value:function isDefaultFeatureForTypeName(featureClass){var forType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_FOR_TYPE;var consumerDefaultFeaturesMap=consumerToDefaultFeatureMap.get(forType);return consumerDefaultFeaturesMap&&consumerDefaultFeaturesMap.get(featureClass)||false;}/**
     * Checks if the given feature class is default for the given instance type name chain. If the feature is not default for the
     * parent type name but it is for the child type name, then the child setting overrides the parent one.
     *
     * @param {Common.mixin.InstancePlugin} featureClass Feature to check
     * @param {String} [forType]
     * @return {Boolean}
     */},{key:"isDefaultFeatureForInstance",value:function isDefaultFeatureForInstance(featureClass,instance){//const typeChain = ObjectHelper.getTypeNameChain(instance);
var typeChain=instance.classNameHierarchy().reverse();var result=null;for(var i=0,len=typeChain.length;i<len&&result===null;++i){var consumerDefaultFeaturesMap=consumerToDefaultFeatureMap.get(typeChain[i]);if(consumerDefaultFeaturesMap&&consumerDefaultFeaturesMap.has(featureClass)){result=consumerDefaultFeaturesMap.get(featureClass);}}return result||false;}/**
     * Resets feature registration date, used in tests to reset state after test
     *
     * @internal
     */},{key:"reset",value:function reset(){consumerToFeatureMap.clear();consumerToDefaultFeatureMap.clear();}}]);return GridFeatureManager;}();exports.GridFeatureManager=GridFeatureManager;GridFeatureManager._$name='GridFeatureManager';/**
 * @module Grid/feature/CellTooltip
 */ /**
 * Displays a tooltip when hovering cells. Contents can be customized by specifying a global `tooltipRenderer` function
 * for the feature and/or on a per column basis.
 *
 * Configuration properties passed into this feature are used to configure the {@link Common.widget.Tooltip} instance
 * used.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // Enable CellTooltip and configure it to show the cell's full value
 * let grid = new Grid({
 *   features: {
 *     cellTooltip: ({value}) => value
 *   }
 * });
 *
 * // Column with its own tooltip renderer
 * {
 *   text            : 'Name',
 *   field           : 'name',
 *   tooltipRenderer : ({ record }) => `My name is\xa0<b>${record.name}</b>`
 * }
 *
 * // Async tooltip with some custom settings
 * let grid = new Grid({
 *   features: {
 *     cellTooltip: {
 *       // Time that mouse needs to be over cell before tooltip is shown
 *       hoverDelay : 4000,
 *       // Time after mouse out to hide the tooltip, 0 = instantly
 *       hideDelay  : 0,
 *       // Async tooltip renderer
 *       tooltipRenderer({ record, tip }) {
 *         // Initiate some async action
 *         AjaxHelper.get(`tooltip.php?id=${record.id}`).then(() => {
 *             tip.html = 'Async content here...';
 *         });
 *
 *         // Signal async tooltip. The tooltip will display a load mask until its html is updated (above)
 *         return false;
 *       }
 *     }
 *   }
 * });
 *
 * @demo celltooltip
 * @classtype cellTooltip
 * @externalexample feature/CellTooltip.js
 */var CellTooltip=/*#__PURE__*/function(_InstancePlugin){_inherits2(CellTooltip,_InstancePlugin);function CellTooltip(){_classCallCheck2(this,CellTooltip);return _possibleConstructorReturn2(this,_getPrototypeOf2(CellTooltip).apply(this,arguments));}_createClass2(CellTooltip,[{key:"construct",//endregion
// region Init
value:function construct(grid,config){var me=this;_get2(_getPrototypeOf2(CellTooltip.prototype),"construct",this).call(this,grid,me.processConfig(config));me.tip=new Tooltip(Object.assign({forElement:grid.element,forSelector:'.b-grid-cell',hoverDelay:1000,trackMouse:false,cls:'b-celltooltip-tip',getHtml:me.getTooltipContent.bind(me),listeners:{pointerOver:'onPointerOver',thisObj:me}},config));me.relayEvents(me.tip,['beforeshow','show']);}},{key:"onPointerOver",value:function onPointerOver(_ref95){var target=_ref95.target;var column=this.client.getColumnFromElement(target);// Veto onPointerOver if column's tooltipRenderer is false
return column.tooltipRenderer!==false;}// CellTooltip feature handles special config cases, where user can supply a function to use as tooltipRenderer
// instead of a normal config object
},{key:"processConfig",value:function processConfig(config){if(typeof config==='function'){return{tooltipRenderer:config};}return config;}// override setConfig to process config before applying it (used mainly from ReactGrid)
},{key:"setConfig",value:function setConfig(config){_get2(_getPrototypeOf2(CellTooltip.prototype),"setConfig",this).call(this,this.processConfig(config));}},{key:"doDestroy",value:function doDestroy(){this.tip.destroy();_get2(_getPrototypeOf2(CellTooltip.prototype),"doDestroy",this).call(this);}//endregion
//region Content
/**
     * Called from Tooltip to populate it with html.
     * @private
     */},{key:"getTooltipContent",value:function getTooltipContent(_ref96){var tip=_ref96.tip,cellElement=_ref96.forElement,event=_ref96.event;var me=this,record=me.client.getRecordFromElement(cellElement),column=me.client.getColumnFromElement(cellElement);var result;// If we have not changed context, we should not change content, unless we have a custom target selector
// (element within the cell)
if(!me.forSelector&&record===me.lastRecord&&column===me.lastColumn){return me.tip._html;}// first, use columns tooltipRenderer if any
if(column.tooltipRenderer){result=column.tooltipRenderer({cellElement:cellElement,record:record,column:column,event:event,tip:tip,cellTooltip:me});}// secondly, try features renderer (but specifying column.tooltipRenderer as false prevents tooltip in that column)
else if(me.tooltipRenderer&&column.tooltipRenderer!==false){result=me.tooltipRenderer({cellElement:cellElement,record:record,column:column,event:event,tip:tip,cellTooltip:me});}if(result!=null){me.lastRecord=record;me.lastColumn=column;}return result;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Function called to generated html for the contents of the a cells tooltip. Called with a single argument
             * with format `{ cellElement, record, column, tip, cellTooltip, event }`. Return a html string, or false to
             * flag that it will be done async
             * @config {Function}
             */tooltipRenderer:null};}}]);return CellTooltip;}(InstancePlugin);exports.CellTooltip=CellTooltip;CellTooltip._$name='CellTooltip';GridFeatureManager.registerFeature(CellTooltip);/**
 * @module Grid/feature/ColumnDragToolbar
 */ /**
 * Displays a toolbar while dragging column headers. Drop on a button in the toolbar to activate a certain function,
 * for example to group by that column. This feature simplifies certain operations on touch devices.
 *
 * This feature is <strong>disabled</strong> by default, but turned on automatically on touch devices.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @classtype columnDragToolbar
 * @externalexample feature/ColumnDragToolbar.js
 */var ColumnDragToolbar=/*#__PURE__*/function(_Delayable7){_inherits2(ColumnDragToolbar,_Delayable7);function ColumnDragToolbar(){_classCallCheck2(this,ColumnDragToolbar);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnDragToolbar).apply(this,arguments));}_createClass2(ColumnDragToolbar,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){if(grid.features.columnReorder){grid.features.columnReorder.on('beforedestroy',this.onColumnReorderBeforeDestroy,this);}this.grid=grid;_get2(_getPrototypeOf2(ColumnDragToolbar.prototype),"construct",this).call(this,grid,config);}},{key:"doDestroy",value:function doDestroy(){var me=this;if(me.grid.features.columnReorder&&!me.grid.features.columnReorder.isDestroyed){me.detachFromColumnReorder();}me.element&&me.element.remove();me.element=null;_get2(_getPrototypeOf2(ColumnDragToolbar.prototype),"doDestroy",this).call(this);}},{key:"init",value:function init(){var me=this,grid=me.grid;if(!grid.features.columnReorder){return;}me.reorderDetacher=grid.features.columnReorder.on({gridheaderdragstart:function gridheaderdragstart(_ref97){var context=_ref97.context;var column=grid.columns.getById(context.element.dataset.columnId);me.showToolbar(column);},gridheaderdrag:function gridheaderdrag(_ref98){var context=_ref98.context;return me.onDrag(context);},gridheaderabort:function gridheaderabort(){me.hideToolbar();},gridheaderdrop:function gridheaderdrop(_ref99){var context=_ref99.context;if(context.valid){me.hideToolbar();}else{me.onDrop(context);}}});me.initialized=true;}},{key:"onColumnReorderBeforeDestroy",value:function onColumnReorderBeforeDestroy(){this.detachFromColumnReorder();}},{key:"detachFromColumnReorder",value:function detachFromColumnReorder(){var me=this;me.grid.features.columnReorder.un('beforedestroy',me.onColumnReorderBeforeDestroy,me);me.reorderDetacher&&me.reorderDetacher();me.reorderDetacher=null;}/**
     * Initializes this feature on grid render.
     * @private
     */},{key:"render",value:function render(){if(!this.initialized)this.init();}//endregion
//region Toolbar
},{key:"showToolbar",value:function showToolbar(column){var me=this,buttons=me.grid.getColumnDragToolbarItems(column,[]),groups=[];me.clearTimeout(me.buttonHideTimer);me.clearTimeout(me.toolbarHideTimer);buttons.forEach(function(button){var group=groups.find(function(group){return group.text===button.group;});if(!group){group={text:button.group,buttons:[]};groups.push(group);}group.buttons.push(button);});me.element=DomHelper.append(me.grid.element,me.template(groups));me.groups=groups;me.buttons=buttons;me.column=column;}},{key:"hideToolbar",value:function hideToolbar(){var me=this;return new Promise(function(resolve){if(me.element&&!me.toolbarHideTimer){me.element.classList.add('b-remove');// TODO: use AnimationHelper when available
me.toolbarHideTimer=me.setTimeout(function(){me.toolbarHideTimer=null;me.element&&me.element.remove();me.element=null;resolve();},200);}});}//endregion
//region Events
},{key:"onDrag",value:function onDrag(info){var me=this;if(info.dragProxy.getBoundingClientRect().top-me.grid.element.getBoundingClientRect().top>100){me.element.classList.add('b-closer');}else{me.element.classList.remove('b-closer');}if(me.hoveringButton){me.hoveringButton.classList.remove('b-hover');me.hoveringButton=null;}if(info.targetElement&&info.targetElement.closest('.b-columndragtoolbar')){me.element.classList.add('b-hover');var button=info.targetElement.closest('.b-columndragtoolbar  .b-target-button:not([data-disabled=true])');if(button){button.classList.add('b-hover');me.hoveringButton=button;}}else{me.element.classList.remove('b-hover');}}},{key:"onDrop",value:function onDrop(info){var me=this;if(info.targetElement&&info.targetElement.matches('.b-columndragtoolbar .b-target-button:not([data-disabled=true])')){var buttonEl=info.targetElement,button=me.buttons.find(function(button){return button.name===buttonEl.dataset.name;});if(button){buttonEl.classList.add('b-activate');me.buttonHideTimer=me.setTimeout(function(){me.hideToolbar();button.onDrop({column:me.column});},100);}}else{me.hideToolbar();}}//endregion
},{key:"template",value:function template(groups){return TemplateHelper.tpl(_templateObject16(),groups.map(function(group){return TemplateHelper.tpl(_templateObject17(),group.buttons.map(function(btn){return TemplateHelper.tpl(_templateObject18(),btn.name,btn.disabled,btn.icon,btn.text);}),group.text);}));}}],[{key:"pluginConfig",//region Config
// Plugin configuration. This plugin chains some of the functions in Grid
get:function get(){return{after:['render']};}}]);return ColumnDragToolbar;}(Delayable(InstancePlugin));exports.ColumnDragToolbar=ColumnDragToolbar;ColumnDragToolbar.featureClass='b-hascolumndragtoolbar';// used by default on touch devices, can be enabled otherwise
ColumnDragToolbar._$name='ColumnDragToolbar';GridFeatureManager.registerFeature(ColumnDragToolbar,BrowserHelper.isTouchDevice);/**
 * @module Grid/feature/ColumnPicker
 */ /**
 * Displays a column picker (to show/hide columns) in the header context menu. Columns can be displayed in sub menus
 * by region or tag. Grouped headers are displayed as menu hierarchies.
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo columns
 * @classtype columnPicker
 * @externalexample feature/ColumnPicker.js
 */var ColumnPicker=/*#__PURE__*/function(_InstancePlugin2){_inherits2(ColumnPicker,_InstancePlugin2);function ColumnPicker(){_classCallCheck2(this,ColumnPicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnPicker).apply(this,arguments));}_createClass2(ColumnPicker,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){this.grid=grid;_get2(_getPrototypeOf2(ColumnPicker.prototype),"construct",this).call(this,grid,config);}//endregion
//region Context menu
/**
     * Get menu items, either a straight list of columns or sub menus per subgrid
     * @private
     * @param columnStore Column store to traverse
     * @returns {Object[]} Menu item configs
     */},{key:"getColumnPickerItems",value:function getColumnPickerItems(columnStore){var me=this;if(me.groupByRegion){// submenus for grids regions
return me.grid.regions.map(function(region){var columns=me.grid.getSubGrid(region).columns.records;return{text:StringHelper.capitalizeFirstLetter(region),menu:me.buildColumnMenu(columns),disabled:columns.length===0,region:region};});}else if(me.groupByTag){// submenus for column tags
var tags={};columnStore.forEach(function(column){column.tags&&column.hideable&&column.tags.forEach(function(tag){if(!tags[tag]){tags[tag]=1;}});});// TODO: as checkitems, but how to handle toggling? hide a column only when all tags for it are unchecked?
return Object.keys(tags).sort().map(function(tag){return{text:StringHelper.capitalizeFirstLetter(tag),menu:me.buildColumnMenu(me.getColumnsForTag(tag)),tag:tag,onBeforeSubMenu:function onBeforeSubMenu(_ref100){var item=_ref100.item,itemEl=_ref100.itemEl;me.refreshTagMenu(item,itemEl);}};});}else{// all columns in same menu
return me.buildColumnMenu(columnStore.records);}}/**
     * Get all columns that has the specified tag
     * TODO: if tags are useful from somewhere else, move to ColumnStore
     * @private
     * @param tag
     * @returns {Grid.column.Column[]}
     */},{key:"getColumnsForTag",value:function getColumnsForTag(tag){// TODO: if tags are usefull from somewhere else, move to ColumnStore
return this.grid.columns.records.filter(function(column){return column.tags&&column.tags.includes(tag)&&column.hideable!==false;});}/**
     * Refreshes checked status for a tag menu. Needed since columns can appear under multiple tags.
     * @private
     */},{key:"refreshTagMenu",value:function refreshTagMenu(item,itemEl){var columns=this.getColumnsForTag(item.tag);columns.forEach(function(column){var subItem=item.items.find(function(subItem){return subItem.column===column;});if(subItem)subItem.checked=column.hidden!==true;});}/**
     * Traverses columns to build menu items for the column picker.
     * @private
     */},{key:"buildColumnMenu",value:function buildColumnMenu(columns){var _this48=this;var currentRegion=columns.length>0&&columns[0].region,grid=this.grid;return columns.reduce(function(items,column){var visibleInRegion=_this48.grid.columns.visibleColumns.filter(function(col){return col.region===column.region;});if(column.hideable!==false){var itemConfig={grid:grid,text:column.text,column:column,name:column.id,checked:column.hidden!==true,disabled:column.hidden!==true&&visibleInRegion.length===1,cls:column.region!==currentRegion?'b-separator':''};currentRegion=column.region;if(column.children){itemConfig.menu=_this48.buildColumnMenu(column.children);}items.push(itemConfig);}return items;},[]);}/**
     * Supply items for headers context menu.
     * @private
     * @param column Header for this column
     * @param items Array of items to add to
     * @returns {Object[]} Modified items
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this,grid=me.grid,columns=grid.columns;if(column.showColumnPicker!==false&&columns.some(function(col){return col.hideable;})){// column picker
items.push({text:me.L('columnsMenu'),name:'columnPicker',icon:'b-fw-icon b-icon-columns',cls:'b-separator',weight:100,menu:me.getColumnPickerItems(columns),onToggle:me.onColumnToggle});}// menu item for hiding this column
if(column.hideable!==false){var visibleInRegion=columns.visibleColumns.filter(function(col){return col.region===column.region;});items.push({text:me.L('hideColumn'),icon:'b-fw-icon b-icon-hide-column',weight:101,name:'hideColumn',disabled:visibleInRegion.length===1,onItem:function onItem(){return column.hide();}});}}/**
     * Handler for column hide/show menu checkitems.
     * @private
     * @param {Object} The {@link Common.widget.MenuItem#event-toggle} event.
     */},{key:"onColumnToggle",value:function onColumnToggle(_ref101){var menu=_ref101.menu,item=_ref101.item,checked=_ref101.checked;if(!!item.column.hidden!==!checked){item.column[checked?'show':'hide']();var grid=item.grid,column=item.column,columns=grid.columns,siblingItems=menu.items,visibleInRegion=columns.visibleColumns.filter(function(col){return col.region===item.column.region;}),currentMenu=grid.features.contextMenu.currentMenu,hideItem=currentMenu.items.find(function(item){return item.name==='hideColumn';});// Do not allow user to hide the last column in any region
if(visibleInRegion.length===1){var lastVisibleItem=siblingItems.find(function(i){return i.name===visibleInRegion[0].id;});if(lastVisibleItem){lastVisibleItem.disabled=true;}// Also disable "Hide column" item if only one column left in this region
if(hideItem&&column.region===item.column.region){hideItem.disabled=true;}}// Multiple columns visible, enable "hide-column" and all items for that region
else{visibleInRegion.forEach(function(col){var siblingItem=siblingItems.find(function(sibling){return sibling.column===col;});if(siblingItem){siblingItem.disabled=false;}});if(hideItem&&column.region===item.column.region){hideItem.disabled=false;}}if(item.menu){// Reflect status in submenu.
// Cannot use short form () => foo because eachWidget aborts on return of false
item.menu.eachWidget(function(subItem){subItem.checked=checked;});}var parentItem=menu.owner;if(parentItem&&parentItem.column===column.parent){var anyChecked=siblingItems.some(function(subItem){return subItem.checked===true;});parentItem.checked=anyChecked;}}}/**
     * Supply items to ColumnDragToolbar
     * @private
     */},{key:"getColumnDragToolbarItems",value:function getColumnDragToolbarItems(column,items){var visibleInRegion=this.grid.columns.visibleColumns.filter(function(col){return col.region===column.region;});if(column.hideable!==false&&visibleInRegion.length>1){items.push({text:this.L('hideColumnShort'),group:this.L('Column'),icon:'b-fw-icon b-icon-hide-column',weight:101,name:'hideColumn',onDrop:function onDrop(_ref102){var column=_ref102.column;return column.hide();}});}return items;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Groups columns in the picker by region (each region gets its own sub menu)
             * @config {Boolean}
             * @default
             */groupByRegion:false,/**
             * Groups columns in the picker by tag, each column may be shown under multiple tags. See
             * {@link Grid.column.Column#config-tags}
             * @config {Boolean}
             * @default
             */groupByTag:false};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['getHeaderMenuItems','getColumnDragToolbarItems']};}}]);return ColumnPicker;}(InstancePlugin);exports.ColumnPicker=ColumnPicker;ColumnPicker._$name='ColumnPicker';GridFeatureManager.registerFeature(ColumnPicker,true);// TODO: Make this work for grouped columns
/**
 * @module Grid/feature/ColumnReorder
 */ /**
 * Allows user to reorder columns by dragging headers. To get notified about column reorder listen to `change` event
 * on {@link Grid.data.ColumnStore columns} store.
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo columns
 * @classtype columnReorder
 * @externalexample feature/ColumnReorder.js
 */var ColumnReorder=/*#__PURE__*/function(_Delayable8){_inherits2(ColumnReorder,_Delayable8);function ColumnReorder(){_classCallCheck2(this,ColumnReorder);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnReorder).apply(this,arguments));}_createClass2(ColumnReorder,[{key:"construct",//region Init
value:function construct(grid){this.ignoreSelectors=['.b-grid-header-resize-handle','.b-field'];this.grid=grid;_get2(_getPrototypeOf2(ColumnReorder.prototype),"construct",this).call(this,grid);}},{key:"doDestroy",value:function doDestroy(){this.dragHelper&&this.dragHelper.destroy();_get2(_getPrototypeOf2(ColumnReorder.prototype),"doDestroy",this).call(this);}/**
     * Initialize drag & drop (called from render)
     * @private
     */},{key:"init",value:function init(){var me=this,grid=me.grid,gridEl=grid.element,containers=DomHelper.children(gridEl,'.b-grid-headers');containers.push.apply(containers,_toConsumableArray(DomHelper.children(gridEl,'.b-grid-header-children')));if(me.dragHelper){// update the dragHelper with the new set of containers it should operate upon
me.dragHelper.containers=containers;}else{me.dragHelper=new DragHelper({name:'columnReorder',mode:'container',dragThreshold:10,targetSelector:'.b-grid-header',outerElement:gridEl.querySelector('header.b-grid-header-container'),containers:containers,isElementDraggable:function isElementDraggable(element){var abort=Boolean(DomHelper.up(element,me.ignoreSelectors.join(',')));if(abort){return false;}var columnEl=DomHelper.up(element,this.targetSelector),column=columnEl&&grid.columns.getById(columnEl.dataset.columnId),isLast=column&&column.childLevel===0&&grid.subGrids[column.region].columns.count===1;// TODO: If we want to prevent dragging last column out of group we can use the code below...
/*isLast = column.level !== 0
                            // In grouped header, do not allow dragging last remaining child
                            ? column.parent.children.length === 1
                            // Not in a grouped header, do not allow dragging last remaining column
                            : grid.subGrids[column.region].columns.count === 1;*/return Boolean(column)&&column.draggable!==false&&!isLast;},ignoreSelector:'.b-filter-icon,.b-grid-header-resize-handle',listeners:{dragstart:me.onDragStart,drag:me.onDrag,drop:me.onDrop,thisObj:me}});me.relayEvents(me.dragHelper,['dragstart','drag','drop','abort'],'gridheader');}}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid
},{key:"onDrag",//endregion
//region Events (drop)
value:function onDrag(_ref103){var context=_ref103.context,event=_ref103.event;var me=this,targetHeader=IdHelper.fromElement(event.target,'header');// If SubGrid is configured with a sealed column set, do not allow moving into it
if(targetHeader&&targetHeader.subGrid.sealedColumns){context.valid=false;return;}// Require that we drag inside grid header while dragging if we don't have a drag toolbar
if(!me.grid.features.columnDragToolbar){context.valid=Boolean(event.target.closest('.b-grid-headers'));}}},{key:"onDragStart",value:function onDragStart(){var me=this;if(!me.grid.features.columnDragToolbar){var headerContainerBox=me.grid.element.querySelector('.b-grid-header-container').getBoundingClientRect();me.dragHelper.minY=headerContainerBox.top;me.dragHelper.maxY=headerContainerBox.bottom;}this.grid.headerContainer.classList.add('b-dragging-header');}/**
     * Handle drop
     * @private
     */},{key:"onDrop",value:function onDrop(_ref104){var context=_ref104.context;if(!context.valid){return this.onInvalidDrop({context:context});}var me=this,grid=me.grid,element=context.dragging,onHeader=DomHelper.up(context.target,'.b-grid-header'),onColumn=grid.columns.get(onHeader.dataset.column),toRegion=context.draggedTo.dataset.region||onColumn.region,sibling=context.insertBefore,column=grid.columns.getById(element.dataset.columnId),insertBefore=sibling?grid.columns.getById(sibling.dataset.columnId):grid.subGrids[toRegion].columns.last.nextSibling,newParent=insertBefore?insertBefore.parent:grid.columns.rootNode;grid.headerContainer.classList.remove('b-dragging-header');// Dropped into its current position in the same SubGrid - abort
if(toRegion===column.region&&onColumn===column.previousSibling){me.dragHelper.abort();return;}// Check if we should remove last child
var emptyParent=column.parent&&column.parent.children.length===1&&column.parent;if(emptyParent){emptyParent.parent.removeChild(emptyParent);}// Clean up element used during drag drop as it will not be removed by Grid when it refreshes its header elements
element.remove();column.region=toRegion;// Insert the column into its new place
newParent.insertChild(column,insertBefore);}/**
     * Handle invalid drop
     * @private
     */},{key:"onInvalidDrop",value:function onInvalidDrop(_ref105){var context=_ref105.context;this.grid.headerContainer.classList.remove('b-dragging-header');}//endregion
//region Render
/**
     * Updates DragHelper with updated headers when grid contents is rerendered
     * @private
     */},{key:"renderContents",value:function renderContents(){// columns shown, hidden or reordered
this.init();}/**
     * Initializes this feature on grid render.
     * @private
     */},{key:"render",value:function render(){// always reinit on render
this.init();}//endregion
}],[{key:"pluginConfig",get:function get(){return{after:['render','renderContents']};}}]);return ColumnReorder;}(Delayable(InstancePlugin));exports.ColumnReorder=ColumnReorder;ColumnReorder.featureClass='b-column-reorder';ColumnReorder._$name='ColumnReorder';GridFeatureManager.registerFeature(ColumnReorder,true);/**
 * @module Grid/feature/ColumnResize
 */ /**
 * Enables user to resize columns by dragging a handle on the righthand side of the header. To get notified about column
 * resize listen to `change` event on {@link Grid.data.ColumnStore columns} store.
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo columns
 * @classtype columnResize
 * @externalexample feature/ColumnResize.js
 */var ColumnResize=/*#__PURE__*/function(_InstancePlugin3){_inherits2(ColumnResize,_InstancePlugin3);function ColumnResize(){_classCallCheck2(this,ColumnResize);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnResize).apply(this,arguments));}_createClass2(ColumnResize,[{key:"construct",//region Init
value:function construct(grid,config){var me=this;me.grid=grid;_get2(_getPrototypeOf2(ColumnResize.prototype),"construct",this).call(this,grid,config);me.resizer=new ResizeHelper({name:'columnResize',targetSelector:'.b-grid-header',handleSelector:'.b-grid-header-resize-handle',outerElement:grid.element,listeners:{resizestart:me.onResizeStart,resizing:me.onResizing,resize:me.onResize,thisObj:me}});}//endregion
// This plugin needs no functions chaining into the client grid
},{key:"doDestroy",value:function doDestroy(){this.resizer&&this.resizer.destroy();_get2(_getPrototypeOf2(ColumnResize.prototype),"doDestroy",this).call(this);}//region Events
},{key:"onResizeStart",value:function onResizeStart(_ref106){var context=_ref106.context;var me=this,column=context.column=me.grid.columns.getById(context.element.dataset.columnId);me.resizer.minWidth=column.minWidth;// remove minWidth value as it's used as a rendering workaround for IE flexbox bugs
context.element.style.minWidth='';me.grid.element.classList.add('b-column-resizing');}/**
     * Handle drag event - resize the column live unless it's a touch gesture
     * @private
     */},{key:"onResizing",value:function onResizing(_ref107){var context=_ref107.context;if(context.valid&&this.liveResize){this.grid.dragResizing=true;context.column.width=context.newWidth;}}/**
     * Handle drop event (only used for touch)
     * @private
     */},{key:"onResize",value:function onResize(_ref108){var context=_ref108.context;var me=this,column=context.column;me.grid.element.classList.remove('b-column-resizing');if(context.valid){if(me.liveResize){me.grid.dragResizing=false;me.grid.afterColumnsResized();}else{context.column.width=context.newWidth;}// In case of IE 11 we should calculate flex basis to fix header width
// covered by ColumnResize.t
if(BrowserHelper.isIE11&&column.parent&&column.parent.flex){var parent=column.parent,headerEl=me.grid.getHeaderElement(parent.id);headerEl.style.flexBasis=parent.children.reduce(function(result,column){return result+me.grid.getHeaderElement(column.id).offsetWidth;},0)+'px';}}}/**
     * Start resizing on touch start. Only cares about the first touch.
     * @private
     * @param event
     */ /*onElementTouchStart(event) {
     const me     = this,
     target = event.target;

     if (target.classList.contains('b-resizer')) {
     me.startResize(target, event.touches[0].clientX);
     event.preventDefault();
     }
     }*/ /**
     * Update size on touch move.
     * @private
     * @param event
     */ /*onElementTouchMove(event) {
     if (this.element) {
     this.updateResize(event.touches[0].clientX);
     event.preventDefault();
     }
     }*/ /**
     * Stop resizing on touch end.
     * @private
     * @param event
     * @returns {Boolean}
     */ /*onElementTouchEnd(event) {
     if (this.element) {
     this.endResize();
     event.preventDefault();
     return false;
     }
     }*/ //endregion
},{key:"liveResize",set:function set(liveResize){if(liveResize==='auto'){liveResize=!BrowserHelper.isMobileSafari;}this._liveResize=liveResize;},get:function get(){return this._liveResize;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Resize all cells below a resizing header during dragging.
             * `'auto'` means `true` on non-mobile platforms.
             * @config {String/Boolean}
             * @default
             */liveResize:'auto'};}},{key:"pluginConfig",get:function get(){return[];}}]);return ColumnResize;}(InstancePlugin);exports.ColumnResize=ColumnResize;ColumnResize.featureClass='b-column-resize';ColumnResize._$name='ColumnResize';GridFeatureManager.registerFeature(ColumnResize,true);//TODO: Context menu should hide when clicking elsewhere
/**
 * @module Grid/feature/ContextMenu
 */ /**
 * Right click to display context menu for headers and cells. Items for the menu are requested by calling
 * {@link Grid.view.Grid#function-getHeaderMenuItems Grid.getHeaderMenuItems()} or
 * {@link Grid.view.Grid#function-getCellMenuItems Grid.getCellMenuItems()} (see {@link Grid.feature.Sort Sort} feature).
 * It is also possible to add items via the features config and via column configs. See examples below.
 *
 * Add extra items to both header and cell for all columns:
 *
 * ```javascript
 * // Extra items for all columns
 * const grid = new Grid({
 *   features: {
 *     contextMenu: {
 *       headerItems: [
 *         { text: 'My header item', icon: 'fa fa-car', weight: 200, onItem : () => ... }
 *       ],
 *
 *       cellItems: [
 *         { text: 'My cell item', icon: 'fa fa-bus', weight: 200, onItem : () => ... }
 *       ]
 *     }
 *   }
 * });
 * ```
 *
 * Add extra items to both header and cell for a single column:
 *
 * ```javascript
 * // Extra items for single column
 * const grid = new Grid({
 *   columns: [
 *     { field: 'name', text: 'Name', headerMenuItems: [
 *       { text: 'My unique header item', icon: 'fa fa-flask', onItem : () => ... }
 *     ]},
 *     { field: 'city', text: 'City', cellMenuItems: [
 *       { text: 'My unique cell item', icon: 'fa fa-beer', onItem : () => ... }
 *     ]},
 *   ]
 * });
 * ```
 *
 * It is also possible to manipulate the default items and add new ones in a processing function (same pattern applies
 * for header menu):
 *
 * ```javascript
 * const grid = new Grid({
 *   features: {
 *     contextMenu: {
 *       processCellItems({items, record}) {
 *           if (record.cost > 5000) {
 *              items.push({ text : 'Split cost' });
 *           }
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 * @demo filtering
 * @classtype contextMenu
 * @externalexample feature/ContextMenu.js
 */var ContextMenu=/*#__PURE__*/function(_InstancePlugin4){_inherits2(ContextMenu,_InstancePlugin4);function ContextMenu(){_classCallCheck2(this,ContextMenu);return _possibleConstructorReturn2(this,_getPrototypeOf2(ContextMenu).apply(this,arguments));}_createClass2(ContextMenu,[{key:"construct",//endregion
//region Events
/**
     * Fired from grid before the context menu is shown for a header. Allows manipulation of the items
     * to show in the same way as in `processHeaderItems`. Returning false from a listener prevents the
     * menu from being shown.
     * @event headerContextMenuBeforeShow
     * @preventable
     * @param {Grid.view.Grid} source
     * @param {Object} items Menu item configs
     * @param {Grid.column.Column} column Column
     */ /**
     * Fired from grid after showing the context menu for a header
     * @event headerContextMenuShow
     * @preventable
     * @param {Grid.view.Grid} source
     * @param {Common.widget.Menu} menu The menu
     * @param {Grid.column.Column} column Column
     */ /**
     * Fired from grid before the context menu is shown for a cell. Allows manipulation of the items
     * to show in the same way as in `processCellItems`. Returning false from a listener prevents the
     * menu from being shown.
     * @event cellContextMenuBeforeShow
     * @preventable
     * @param {Grid.view.Grid} source
     * @param {Object} items Menu item configs
     * @param {Grid.column.Column} column Column
     * @param {Common.data.Model} record Record
     */ /**
     * Fired from grid after showing the context menu for a cell
     * @event cellContextMenuShow
     * @preventable
     * @param {Grid.view.Grid} source
     * @param {Common.widget.Menu} menu The menu
     * @param {Grid.column.Column} column Column
     * @param {Common.data.Model} record Record
     */ /**
     * Fired when an item is selected in the context menu.
     * @event contextMenuItem
     * @param {Grid.view.Grid} grid The grid
     * @param {Object} item Selected menu item
     * @param {Grid.column.Column} column Column
     * @param {HTMLElement} itemEl Menu item element
     */ /**
     * Fired when an check item is toggled in the context menu.
     * @event contextMenuToggleItem
     * @param {Grid.view.Grid} grid The grid
     * @param {Object} item Selected menu item
     * @param {Grid.column.Column} column Column
     * @param {Boolean} checked Checked or not
     * @param {HTMLElement} itemEl Menu item element
     */ //endregion
//region Init
value:function construct(grid,config){this.grid=grid;_get2(_getPrototypeOf2(ContextMenu.prototype),"construct",this).call(this,grid,config);}},{key:"doDestroy",value:function doDestroy(){if(this.currentMenu){this.currentMenu.destroy();}_get2(_getPrototypeOf2(ContextMenu.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
// The contextmenu event is emulated from a taphold gesture on touch platforms.
},{key:"onElementContextMenu",//endregion
//region Events
value:function onElementContextMenu(event){this.triggerEvent==='contextmenu'&&this.showContextMenu(event);}},{key:"onElementClick",value:function onElementClick(event){this.triggerEvent==='click'&&this.showContextMenu(event);}},{key:"onElementDblClick",value:function onElementDblClick(event){this.triggerEvent==='dblclick'&&this.showContextMenu(event);}},{key:"onElementKeyDown",value:function onElementKeyDown(event){if(!event.handled&&event.target.matches('.b-grid-header.b-depth-0')){switch(event.key){case' ':case'ArrowDown':this.showContextMenu(event);break;}}}/**
     * Show context menu.
     * @param event
     * @fires contextmenuitem
     * @fires contextmenutoggleitem
     * @private
     */},{key:"showContextMenu",value:function showContextMenu(event){var me=this,grid=me.grid,target=event.target,header=DomHelper.up(target,'.b-grid-header'),cellData=grid.getEventData(event);if(header){me.handleHeaderContextMenu(header,event);}else if(cellData){me.handleCellContextMenu(cellData,event);}}},{key:"handleHeaderContextMenu",value:function handleHeaderContextMenu(header,event){if(header.dataset.column){var me=this,grid=me.grid,column=grid.columns.getById(header.dataset.columnId),setColumn=function setColumn(item){if(!item.column){item.column=column;}var menu=item.menu;if(menu){if(!Array.isArray(menu)){menu=menu.items||menu.widgets;}menu.forEach(setColumn);}};if(column.enableHeaderContextMenu!==false){// User's items for all headers and for specific column correspondingly. Check Context Menu demo for details.
var items=[].concat(_toConsumableArray(me.headerItems),_toConsumableArray(column.headerMenuItems||[])),processHeaderItems=me.processHeaderItems,eventParams={items:items,column:column,event:event,element:header};// getHeaderMenuItems() is chained by mixins, thus each feature can supply items
grid.getHeaderMenuItems(column,items);if((!processHeaderItems||processHeaderItems(eventParams)!==false)&&items.length>0){event.preventDefault();items.sort(function(a,b){return(a.weight||150)-(b.weight||150);});// Propagate the operating column down to all MenuItem levels
// Will not override if they are preconfigured with a column.
items.forEach(setColumn);// Trigger event that allows preventing menu or manipulating its items
if(grid.trigger('headerContextMenuBeforeShow',eventParams)!==false){// Align to header element when using arrow down key
me.currentMenu=WidgetHelper.showContextMenu(event.type==='keydown'?header:[event.clientX+1,event.clientY+1],{owner:me.client,constrainTo:document,cls:'b-context-menu',items:items,// We can only realign if we are aligning to an element.
scrollAction:'hide',onItem:function onItem(_ref109){var source=_ref109.source,item=_ref109.item,element=_ref109.element;grid.trigger('contextMenuItem',{source:grid,item:item,column:column,element:element});},onToggle:function onToggle(_ref110){var source=_ref110.source,item=_ref110.item,checked=_ref110.checked,element=_ref110.element;grid.trigger('contextMenuToggleItem',{source:grid,item:item,column:column,checked:checked,element:element});},onDestroy:function onDestroy(){// If menu is destroyed by WidgetHelper, make sure we don't keep a reference to it anymore
me.currentMenu=null;},listeners:{show:function show(_ref111){var menu=_ref111.source;eventParams.menu=menu;grid.trigger('headerContextMenuShow',eventParams);}}});}}}}}},{key:"handleCellContextMenu",value:function handleCellContextMenu(cellData,event){var me=this,grid=me.grid,cell=cellData.cellElement,column=grid.columns.getById(cellData.columnId);if(column.enableCellContextMenu!==false){// Process the gesture as navigation so that the use may select/multiselect
// the items to include in their context menu operation.
// Also select if not already selected.
grid.focusCell(cellData.cellSelector,{doSelect:!grid.isSelected(cellData.id),event:event});var record=cellData.record,items=[].concat(_toConsumableArray(me.cellItems||[]),_toConsumableArray(column.cellMenuItems||[])),processCellItems=me.processCellItems,eventParams={items:items,column:column,event:event,record:record,element:cell};// getCellMenuItems() is chained by mixins, thus each feature can supply items
grid.getCellMenuItems(column,record,items);if((!processCellItems||processCellItems(eventParams)!==false)&&items.length>0){items.forEach(function(item){item.column=column;item.record=record;});event.preventDefault();items.sort(function(a,b){return(a.weight||150)-(b.weight||150);});// Trigger event that allows preventing menu or manipulating its items
if(grid.trigger('cellContextMenuBeforeShow',eventParams)!==false){me.currentMenu=WidgetHelper.showContextMenu([event.clientX+1,event.clientY+1],{owner:me.client,items:items,// Load up the item event with the contextual info
onBeforeItem:function onBeforeItem(itemEvent){Object.assign(itemEvent,eventParams);},onItem:function onItem(_ref112){var item=_ref112.item;grid.trigger('contextMenuItem',{source:grid,item:item,column:column,record:record,cell:cell});},onClose:function onClose(_ref113){var reason=_ref113.reason;// return focus to grid when context menu is closed, if not cause by clicking outside of grid
if(reason!=='outside'){grid.element.focus();}},onDestroy:function onDestroy(){// If menu is destroyed by WidgetHelper, make sure we don't keep a reference to it anymore
me.currentMenu=null;},listeners:{show:function show(_ref114){var menu=_ref114.source;eventParams.menu=menu;grid.trigger('cellContextMenuShow',eventParams);}}});}}}}/**
     * Hides the context menu
     * @protected
     * @internal
     */},{key:"hideContextMenu",value:function hideContextMenu(animate){this.currentMenu&&this.currentMenu.hide(animate);}//endregion
//region Getters/Setters
},{key:"triggerEvent",get:function get(){return this._triggerEvent||this.client.contextMenuTriggerEvent;},set:function set(value){this._triggerEvent=value;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Extra items to add to the header context menu. See {@link Common.widget.MenuItem} for more info.
             *
             * ```javascript
             * features : {
             *     contextMenu : {
             *         headerItems : [
             *             { text : 'Header item', onItem : () => ... }
             *         ]
             *     }
             * }
             * ```
             *
             * @config {Object[]}
             */headerItems:[],/**
             * A function called before displaying the header menu that allows manipulations of its items. Called with a
             * single parameter with format { column, items }. Returning `false` from this function prevents
             * the menu from being shown.
             *
             * ```javascript
             * features : {
             *     contextMenu : {
             *         processHeaderItems({record, items}) {
             *             // Add or remove items here as needed
             *             if (column.field === 'age') {
             *                 items.push({ text: 'Hide youngsters', icon : 'b-fa b-fa-fw b-fa-baby' })
             *             }
             *         }
             *     }
             * }
             * ```
             *
             * @config {Function}
             */processHeaderItems:null,/**
             * Extra items to add to the cell context menu. See {@link Common.widget.MenuItem} for more info.
             *
             * ```javascript
             * features : {
             *     contextMenu : {
             *         cellItems : [
             *             { text : 'Cell item', onItem : () => ... }
             *         ]
             *     }
             * }
             * ```
             *
             * @config {Object[]}
             */cellItems:[],/**
             * A function called before displaying the cell menu that allows manipulations of its items. Called with a
             * single parameter with format { record, items }. Returning `false` from this function prevents
             * the menu from being shown.
             *
             * ```javascript
             * features : {
             *     contextMenu : {
             *         processCellItems({record, items}) {
             *             // Add or remove items here as needed
             *             if (record.age > 50) {
             *                 items.push({ text: 'Add extra vacation', icon : 'b-fa b-fa-fw b-fa-umbrella-beach' })
             *             }
             *         }
             *     }
             * }
             * ```
             *
             * @config {Function}
             */processCellItems:null,/**
             * Event which is used to show context menu.
             * Available options are: 'contextmenu', 'click', 'dblclick'.
             * Default value is used from {@link Grid/view/Grid#config-contextMenuTriggerEvent}
             * @config {String}
             */triggerEvent:null};}},{key:"pluginConfig",get:function get(){return{assign:['showContextMenu'],chain:['onElementContextMenu','onElementClick','onElementDblClick','onElementKeyDown']};}}]);return ContextMenu;}(InstancePlugin);exports.ContextMenu=ContextMenu;ContextMenu.featureClass='';ContextMenu._$name='ContextMenu';GridFeatureManager.registerFeature(ContextMenu,true);//TODO: Format value in header filter tooltip (see date)
/**
 * @module Grid/feature/Filter
 */ /**
 * Feature that allows filtering of the grid by settings filters on columns. The actual filtering is done by the store.
 * For info on programmatically handling filters, see {@link Common.data.mixin.StoreFilter StoreFilter}.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // Filtering turned on but no default filter
 * let grid = new Grid({
 *   features : {
 *     filter : true
 *   }
 * });
 *
 * // Using default filter
 * let grid = new Grid({
 *   features : {
 *     filter : { property : 'city', value : 'Gavle' }
 *   }
 * });
 *
 * // Custom filtering function for a column
 * let grid = new Grid({
 *    features : {
 *        filter : true
 *    },
 *
 *    columns: [
 *        {
 *          field      : 'age',
 *          text       : 'Age',
 *          type       : 'number',
 *          // Custom filtering function that checks "greater than" no matter which field user filled in :)
 *          filterable : ({ record, value, operator }) => record.age > value
 *        }
 *    ]
 * });
 *
 * @demo filtering
 * @classtype filter
 * @externalexample feature/Filter.js
 */var Filter=/*#__PURE__*/function(_InstancePlugin5){_inherits2(Filter,_InstancePlugin5);function Filter(){_classCallCheck2(this,Filter);return _possibleConstructorReturn2(this,_getPrototypeOf2(Filter).apply(this,arguments));}_createClass2(Filter,[{key:"construct",value:function construct(grid,config){var me=this;me.grid=grid;me.store=grid.store;me.closeFilterEditor=me.closeFilterEditor.bind(me);_get2(_getPrototypeOf2(Filter.prototype),"construct",this).call(this,grid,config);me.store.on({filter:me.onStoreFilter},me);if(config&&_typeof(config)==='object'){me.store.filter(config,null,me.client.isConfiguring);}}//endregion
//region Plugin config
},{key:"doDestroy",value:function doDestroy(){var me=this;me.filterTip&&me.filterTip.destroy();me.store.un({sort:me.onStoreFilter},me);_get2(_getPrototypeOf2(Filter.prototype),"doDestroy",this).call(this);}//endregion
//region Refresh headers
/**
     * Update headers to match stores filters. Called on store load and grid header render.
     * @param reRenderRows Also refresh rows?
     * @private
     */},{key:"refreshHeaders",value:function refreshHeaders(reRenderRows){var me=this,grid=me.grid,element=grid.headerContainer;if(element){// remove .latest from all filters, will be applied to actual latest
DomHelper.children(element,'.b-filter-icon.b-latest').forEach(function(iconElement){return iconElement.classList.remove('b-latest');});if(!me.filterTip){me.filterTip=new Tooltip({forElement:element,forSelector:'.b-filter-icon',getHtml:function getHtml(_ref115){var forElement=_ref115.forElement;return forElement.dataset.filterText;}});}var _iteratorNormalCompletion30=true;var _didIteratorError30=false;var _iteratorError30=undefined;try{for(var _iterator30=grid.columns[Symbol.iterator](),_step30;!(_iteratorNormalCompletion30=(_step30=_iterator30.next()).done);_iteratorNormalCompletion30=true){var column=_step30.value;if(column.filterable!==false){var filter=me.store.filters.getBy('property',column.field),headerEl=column.element;if(headerEl){var textEl=column.textWrapper,filterIconEl=textEl&&textEl.querySelector('.b-filter-icon'),filterText=void 0;if(filter){filterText=me.L('filter')+': '+(typeof filter==='string'?filter:"".concat(filter.operator," ").concat(filter.displayValue||filter.value||''));//TODO: filter.value needs to be formatted using column format or something
}else{filterText=me.L('applyFilter');}if(!filterIconEl){// putting icon in header text to have more options for positioning it
filterIconEl=DomHelper.createElement({parent:textEl,tag:'div',className:'b-filter-icon',dataset:{filterText:filterText}});headerEl.classList.add('b-filterable');}else{filterIconEl.dataset.filterText=filterText;}// latest applied filter distinguished with class to enable highlighting etc.
if(column.field===me.store.latestFilterField)filterIconEl.classList.add('b-latest');headerEl.classList[filter?'add':'remove']('b-filter');// When IE11 support is dropped
// headerEl.classList.toggle('b-filter', !!filter);
}column.meta.isFiltered=!!filter;}}}catch(err){_didIteratorError30=true;_iteratorError30=err;}finally{try{if(!_iteratorNormalCompletion30&&_iterator30.return!=null){_iterator30.return();}}finally{if(_didIteratorError30){throw _iteratorError30;}}}if(reRenderRows){grid.refreshRows();}}}//endregion
//region Filter
},{key:"applyFilter",value:function applyFilter(config){var store=this.store,column=this.grid.columns.get(config.property);if(typeof column.filterable==='function'){store.filter({filterBy:function filterBy(record){return column.filterable(Object.assign({},config,{record:record}));},// To be able to retrieve the value next time filtering popup is shown, not actually used by the filter
value:config.value,property:config.property,operator:config.operator,displayValue:config.displayValue});}else{store.filter(config);}}// TODO: break out as own views, registering with Filter the same way columns register with ColumnManager
},{key:"getPopupDateItems",value:function getPopupDateItems(fieldType,filter,initialValue,field,store,changeCallback,closeCallback){var me=this,onClose=changeCallback,onClear=closeCallback;function onChange(_ref116){var source=_ref116.source,value=_ref116.value;if(value==null){closeCallback();}else{me.applyFilter({property:field,operator:source.operator,value:value,displayValue:source._value});changeCallback();}}return[{type:'date',ref:'on',placeholder:me.L('on'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-equal"></i>',value:filter&&filter.operator==='='?filter.value:initialValue,operator:'=',onChange:onChange,onClose:onClose,onClear:onClear},{type:'date',ref:'before',placeholder:me.L('before'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-before"></i>',value:filter&&filter.operator==='<'?filter.value:null,operator:'<',onChange:onChange,onClose:onClose,onClear:onClear},{type:'date',ref:'after',cls:'b-last-row',placeholder:me.L('after'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-after"></i>',value:filter&&filter.operator==='>'?filter.value:null,operator:'>',onChange:onChange,onClose:onClose,onClear:onClear}];}},{key:"getPopupNumberItems",value:function getPopupNumberItems(fieldType,filter,initialValue,field,store,changeCallback,closeCallback){var me=this,onEsc=changeCallback,onClear=closeCallback;function onChange(_ref117){var source=_ref117.source,value=_ref117.value;if(value==null){closeCallback();}else{me.applyFilter({property:field,operator:source.operator,value:value});changeCallback();}}return[{type:'number',placeholder:me.L('equals'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-equal"></i>',value:filter&&filter.operator==='='?filter.value:initialValue,operator:'=',onChange:onChange,onEsc:onEsc,onClear:onClear},{type:'number',placeholder:me.L('lessThan'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-less"></i>',value:filter&&filter.operator==='<'?filter.value:null,operator:'<',onChange:onChange,onEsc:onEsc,onClear:onClear},{type:'number',cls:'b-last-row',placeholder:me.L('moreThan'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-more"></i>',value:filter&&filter.operator==='>'?filter.value:null,operator:'>',onChange:onChange,onEsc:onEsc,onClear:onClear}];}},{key:"getPopupStringItems",value:function getPopupStringItems(fieldType,filter,initialValue,field,store,changeCallback,closeCallback){var me=this;return[{type:fieldType,cls:'b-last-row',placeholder:me.L('filter'),clearable:true,label:'<i class="b-fw-icon b-icon-filter-equal"></i>',value:filter?filter.value||filter:initialValue,onChange:function onChange(_ref118){var value=_ref118.value;if(value===''){closeCallback();}else{me.applyFilter({property:field,value:value});changeCallback();}},onClose:changeCallback,onClear:closeCallback}];}/**
     * Get fields to display in filter popup.
     * @param fieldType Type of field, number, date etc.
     * @param filter Current filter filter
     * @param initialValue
     * @param field Column
     * @param store Grid store
     * @param changeCallback Callback for when filter has changed
     * @param closeCallback Callback for when editor should be closed
     * @returns {*}
     * @private
     */},{key:"getPopupItems",value:function getPopupItems(fieldType,filter,initialValue,field,store,changeCallback,closeCallback){switch(fieldType){case'date':return this.getPopupDateItems.apply(this,arguments);case'number':return this.getPopupNumberItems.apply(this,arguments);default:return this.getPopupStringItems.apply(this,arguments);}}/**
     * Shows a popup where a filter can be edited.
     * @param {Grid.column.Column} column Column to show filter editor for
     * @param {*} value Value to init field with
     */},{key:"showFilterEditor",value:function showFilterEditor(column,value){var me=this,col=typeof column==='string'?me.grid.columns.getById(column):column,headerEl=col.element,filter=me.store.filters.getBy('property',col.field),type=col.filterType||col.type||'string',fieldType={'string':'text','number':'number','date':'date'}[type]||'text';if(col.filterable===false)return;me.filterEditorPopup=WidgetHelper.openPopup(headerEl,{width:'16em',cls:'b-filter-popup',scrollAction:'realign',items:me.getPopupItems(fieldType,filter,value,col.field,me.store,me.closeFilterEditor,function(){me.store.removeFieldFilter(col.field);me.closeFilterEditor();})});}/**
     * Close the filter editor.
     */},{key:"closeFilterEditor",value:function closeFilterEditor(){var me=this;// Must defer the destroy because it may be closed by an event like a "change" event where
// there may be plenty of code left to execute which must not execute on destroyed objects.
me.filterEditorPopup&&me.filterEditorPopup.setTimeout(me.filterEditorPopup.destroy);me.filterEditorPopup=null;}//endregion
//region Context menu
//TODO: break out together with getPopupXXItems() (see comment above)
},{key:"getMenuDateItems",value:function getMenuDateItems(column,record){var me=this,value=record[column.field],filter=function filter(operator){me.applyFilter({property:column.field,operator:operator,value:value,displayValue:column.formatValue?column.formatValue(value):value});};return[{text:me.L('on'),icon:'b-fw-icon b-icon-filter-equal',cls:'b-separator',name:'filterDateEquals',onItem:function onItem(){return filter('=');}},{text:me.L('before'),icon:'b-fw-icon b-icon-filter-before',name:'filterDateBefore',onItem:function onItem(){return filter('<');}},{text:me.L('after'),icon:'b-fw-icon b-icon-filter-after',name:'filterDateAfter',onItem:function onItem(){return filter('>');}}];}},{key:"getMenuNumberItems",value:function getMenuNumberItems(column,record){var me=this,filter=function filter(operator){me.applyFilter({property:column.field,operator:operator,value:record[column.field]});};return[{text:me.L('equals'),icon:'b-fw-icon b-icon-filter-equal',cls:'b-separator',name:'filterNumberEquals',onItem:function onItem(){return filter('=');}},{text:me.L('lessThan'),icon:'b-fw-icon b-icon-filter-less',name:'filterNumberLess',onItem:function onItem(){return filter('<');}},{text:me.L('moreThan'),icon:'b-fw-icon b-icon-filter-more',name:'filterNumberMore',onItem:function onItem(){return filter('>');}}];}},{key:"getMenuStringItems",value:function getMenuStringItems(column,record){var _this49=this;return[{text:this.L('equals'),icon:'b-fw-icon b-icon-filter-equal',cls:'b-separator',name:'filterStringEquals',onItem:function onItem(){_this49.applyFilter({property:column.field,value:record[column.field]});}}];}/**
     * Add menu items for filtering, depending on filter type etc.
     * @param column
     * @param record
     * @param items
     * @returns {Object[]}
     * @private
     */},{key:"getCellMenuItems",value:function getCellMenuItems(column,record,items){var me=this,field=record.getFieldDefinition(column.field);if(column.filterable!==false){var filterItems=[];if(column.meta.isFiltered){filterItems.push({text:me.L('removeFilter'),icon:'b-fw-icon b-icon-clear',cls:'b-separator',name:'filterRemove',onItem:function onItem(){me.store.removeFieldFilter(column.field);}});}switch(column.filterType||column.type||field&&field.type){case'date':filterItems.push.apply(filterItems,_toConsumableArray(me.getMenuDateItems.apply(me,arguments)));break;case'number':filterItems.push.apply(filterItems,_toConsumableArray(me.getMenuNumberItems.apply(me,arguments)));break;default:filterItems.push.apply(filterItems,_toConsumableArray(me.getMenuStringItems.apply(me,arguments)));break;}// remove separator from second item if filtered
if(column.meta.isFiltered&&filterItems.length>1){filterItems[1].cls='';}items.push.apply(items,filterItems);}}/**
     * Add menu item for removing filter if column is filtered.
     * @private
     * @param column Column
     * @param items Menu items
     * @returns {Object[]}
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this;if(column.meta.isFiltered){items.push({text:me.L('editFilter'),name:'editFilter',icon:'b-fw-icon b-icon-filter',cls:'b-separator',onItem:function onItem(){me.showFilterEditor(column);}});items.push({text:me.L('removeFilter'),name:'removeFilter',icon:'b-fw-icon b-icon-remove',onItem:function onItem(){me.store.removeFieldFilter(column.field);}});}else if(column.filterable!==false){items.push({text:me.L('filter'),name:'filter',icon:'b-fw-icon b-icon-filter',cls:'b-separator',onItem:function onItem(){me.showFilterEditor(column);}});}}//endregion
//region Events
/**
     * Store filtered; refresh headers.
     * @private
     */},{key:"onStoreFilter",value:function onStoreFilter(){// Pass false to not refresh rows.
// Store's refresh event will refresh the rows.
this.refreshHeaders(false);}/**
     * Called after headers are rendered, make headers match stores initial sorters
     * @private
     */},{key:"renderHeader",value:function renderHeader(){this.refreshHeaders(false);}/**
     * Called when user clicks on the grid. Only care about clicks on the filter icon.
     * @param {MouseEvent} event
     * @private
     */},{key:"onElementClick",value:function onElementClick(event){var target=event.target;if(this.filterEditorPopup)this.closeFilterEditor();// Checks if click is on node expander icon, then toggles expand/collapse
if(target.classList.contains('b-filter-icon')){var headerEl=DomHelper.up(target,'.b-grid-header');this.showFilterEditor(headerEl.dataset.columnId);return false;}}//endregion
}],[{key:"pluginConfig",//region Init
// Plugin configuration. This plugin chains some of the functions in Grid.
get:function get(){return{chain:['renderHeader','getCellMenuItems','getHeaderMenuItems','onElementClick']};}}]);return Filter;}(InstancePlugin);exports.Filter=Filter;Filter.featureClass='b-filter';Filter._$name='Filter';GridFeatureManager.registerFeature(Filter);/**
 * @module Grid/feature/FilterBar
 */ /**
 * Feature that allows filtering of the grid by entering filters on column headers.
 * The actual filtering is done by the store.
 * For info on programmatically handling filters, see {@link Common.data.mixin.StoreFilter StoreFilter}.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * The individual filterability of columns is defined by a `filterable`
 * property on the column which defaults to `true`. If `false`, that column
 * is not filterable.
 *
 * The property value may also be a custom filter function.
 *
 * The property value may also be an object which may contain the following two properties:
 *  - **filterFn** : `Function` A custom filtering function
 *  - **filterField** : `Object` A config object for the filter value input field.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // filtering turned on but no default filter
 * let grid = new Grid({
 *   features: {
 *     filterBar : true
 *   }
 * });
 *
 * @example
 * // using default filter
 * let grid = new Grid({
 *   features : {
 *     filterBar : { filter: { property : 'city', value : 'Gavle' } }
 *   }
 * });
 *
 * @example
 * // Custom filtering function for a column
 * let grid = new Grid({
 *   features : {
 *     filter : true
 *   },
 *
 *   columns: [
 *      {
 *        field      : 'age',
 *        text       : 'Age',
 *        type       : 'number',
 *        // Custom filtering function that checks "greater than"
 *        filterable : ({ record, value }) => record.age > value
 *      },
 *        field : 'name',
 *        // Filterable may specify a filterFn and a config for the filtering input field
 *        filterable : {
 *          filterFn : ({ record, value }) => record.name.toLowerCase().indexof(value.toLowerCase()) !== -1,
 *          filterField : {
 *            emptyText : 'Filter name'
 *          }
 *        }
 *      }
 *   ]
 * });
 *
 * @demo filterbar
 * @classtype filterBar
 * @externalexample feature/FilterBar.js
 */var FilterBar=/*#__PURE__*/function(_InstancePlugin6){_inherits2(FilterBar,_InstancePlugin6);function FilterBar(){_classCallCheck2(this,FilterBar);return _possibleConstructorReturn2(this,_getPrototypeOf2(FilterBar).apply(this,arguments));}_createClass2(FilterBar,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){var me=this;Object.assign(me,{filterFieldCls:'b-filter-bar-field',filterFieldInputCls:'b-filter-bar-field-input',filterableColumnCls:'b-filter-bar-enabled',filterFieldInputSelector:'.b-filter-bar-field-input',filterableColumnSelector:'.b-filter-bar-enabled',filterParseRegExp:/^\s*([<>=*])?(.*)$/,storeTrackingSupended:0,store:grid.store,grid:grid});me.onColumnFilterFieldChange=me.onColumnFilterFieldChange.bind(me);_get2(_getPrototypeOf2(FilterBar.prototype),"construct",this).call(this,grid,Array.isArray(config)?{filter:config}:config);me.store.on({filter:me.onStoreFilter,thisObj:me});if(me.filter){me.store.filter(me.filter);}me.gridDetacher=grid.on('beforeelementclick',me.onBeforeElementClick,me);}},{key:"doDestroy",value:function doDestroy(){var me=this;me.destroyFilterBar();me.gridDetacher&&me.gridDetacher();_get2(_getPrototypeOf2(FilterBar.prototype),"doDestroy",this).call(this);}},{key:"destroyFilterBar",//endregion
//region FilterBar
value:function destroyFilterBar(){var me=this,columns=me.grid.columns;columns&&columns.forEach(me.destroyColumnFilterField,me);}/**
     * Hides the filtering fields.
     */},{key:"hideFilterBar",value:function hideFilterBar(){var me=this,columns=me.grid.columns;// we don't want to hear back store "filter" event while we're resetting store filters
me.clearStoreFiltersOnHide&&me.suspendStoreTracking();// hide the fields, each silently - no updating of the store's filtered state until the end
columns&&columns.forEach(function(col){return me.hideColumnFilterField(col,true);});// Now update the filtered state
me.grid.store.filter();me.clearStoreFiltersOnHide&&me.resumeStoreTracking();me.hidden=true;}/**
     * Shows the filtering fields.
     */},{key:"showFilterBar",value:function showFilterBar(){this.renderFilterBar();this.hidden=false;}/**
     * Toggles the filtering fields visibility.
     */},{key:"toggleFilterBar",value:function toggleFilterBar(){var me=this;if(me.hidden){me.showFilterBar();}else{me.hideFilterBar();}}/**
     * Renders the filtering fields for filterable columns.
     * @private
     */},{key:"renderFilterBar",value:function renderFilterBar(){var me=this;me.grid.columns.visibleColumns.forEach(function(column){return me.renderColumnFilterField(column);});}//endregion
//region FilterBar fields
/**
     * Renders text field filter in the provided column header.
     * @param {Grid.column.Column} column Column to render text field filter for.
     * @private
     */},{key:"renderColumnFilterField",value:function renderColumnFilterField(column){var me=this,grid=me.grid,filterable=me.getColumnFilterable(column);// we render fields for filterable columns only
if(filterable&&!column.hidden){var headerEl=column.element;var widget=me.getColumnFilterField(column);// if we don't haven't created a field yet
// we build it from scratch
if(!widget){var filter=grid.store.filters.getBy('property',column.field),type="".concat(column.filterType||'text',"field");widget=WidgetHelper.append(Object.assign({type:type,owner:me.grid,clearable:true,column:column,name:column.field,value:filter&&me.buildFilterString(filter),cls:me.filterFieldCls,inputCls:me.filterFieldInputCls,keyStrokeChangeDelay:me.keyStrokeFilterDelay,onChange:me.onColumnFilterFieldChange,onClear:me.onColumnFilterFieldChange},filterable.filterField),headerEl)[0];me.setColumnFilterField(column,widget);}// if we have one..
else{// re-apply widget filter
me.onColumnFilterFieldChange({source:widget,value:widget.value});// re-append the widget to its parent node (in case the column header was redrawn (happens when resizing columns))
widget.render(headerEl);// show widget in case it was hidden
widget.show();}headerEl.classList.add(me.filterableColumnCls);}}/**
     * Fills in column filter fields with values from the grid store filters.
     * @private
     */},{key:"updateColumnFilterFields",value:function updateColumnFilterFields(){var me=this,grid=me.grid;var field,filter;var _iteratorNormalCompletion31=true;var _didIteratorError31=false;var _iteratorError31=undefined;try{for(var _iterator31=grid.columns[Symbol.iterator](),_step31;!(_iteratorNormalCompletion31=(_step31=_iterator31.next()).done);_iteratorNormalCompletion31=true){var column=_step31.value;field=me.getColumnFilterField(column);if(field){filter=grid.store.filters.getBy('property',column.field);field.value=filter&&me.buildFilterString(filter)||'';}}}catch(err){_didIteratorError31=true;_iteratorError31=err;}finally{try{if(!_iteratorNormalCompletion31&&_iterator31.return!=null){_iterator31.return();}}finally{if(_didIteratorError31){throw _iteratorError31;}}}}},{key:"getColumnFilterable",value:function getColumnFilterable(column){if(!column.isRoot&&column.filterable!==false&&column.field){if(typeof column.filterable==='function'){column.filterable={filterFn:column.filterable};}return column.filterable;}}},{key:"destroyColumnFilterField",value:function destroyColumnFilterField(column){var me=this,widget=me.getColumnFilterField(column);if(widget){me.hideColumnFilterField(column);// destroy filter UI field
widget.destroy();// remember there is no field bound anymore
me.setColumnFilterField(column,undefined);}}},{key:"hideColumnFilterField",value:function hideColumnFilterField(column,silent){var me=this,store=me.grid.store,columnEl=column.element,widget=me.getColumnFilterField(column);if(widget){// hide field
widget.hide();if(me.clearStoreFiltersOnHide&&column.field){store.removeFieldFilter(column.field,silent);}columnEl.classList.remove(me.filterableColumnCls);}}},{key:"getColumnFilterField",value:function getColumnFilterField(column){var me=this;return me._columnFilters&&me._columnFilters[column.data.id];}},{key:"setColumnFilterField",value:function setColumnFilterField(column,widget){var me=this;me._columnFilters=me._columnFilters||{};me._columnFilters[column.data.id]=widget;}//endregion
//region Filters
},{key:"parseFilterValue",value:function parseFilterValue(value){var match=String(value).match(this.filterParseRegExp);return{operator:match[1]||'*',value:match[2]};}},{key:"buildFilterString",value:function buildFilterString(filter){var result;if(filter&&!filter.initialConfig.filterBy){result=(filter.operator==='*'?'':filter.operator)+filter.value;}return result;}//endregion
// region Events
/**
     * Fires when store gets filtered. Refreshes field values in column headers.
     * @private
     */},{key:"onStoreFilter",value:function onStoreFilter(){if(!this.storeTrackingSupended){this.updateColumnFilterFields();}}},{key:"suspendStoreTracking",value:function suspendStoreTracking(){this.storeTrackingSupended++;}},{key:"resumeStoreTracking",value:function resumeStoreTracking(){this.storeTrackingSupended--;}/**
     * Called after headers are rendered, make headers match stores initial sorters
     * @private
     */},{key:"renderHeader",value:function renderHeader(element){this.renderFilterBar();}},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this;// flagging event with handled = true used to signal that other features should probably not care about it
if(event.handled)return;// if we are pressing left/right arrow keys while being in a filter editor
// we set event.handled flag (otherwise other features prevent the event)
if(event.target.matches(me.filterFieldInputSelector)){switch(event.key){case'ArrowLeft':case'ArrowRight':event.handled=true;}}}},{key:"onBeforeElementClick",value:function onBeforeElementClick(_ref119){var event=_ref119.event;var me=this;// prevent other features reacting when clicking a filter field (or any element inside it)
if(event.target.closest('.'+me.filterFieldCls)){return false;}}/**
     * Called when a column text filter field value is changed by user.
     * @param  {TextField} field Filter text field.
     * @param  {String} value New filtering value.
     * @private
     */},{key:"onColumnFilterFieldChange",value:function onColumnFilterFieldChange(_ref120){var field=_ref120.source,value=_ref120.value;var me=this,store=me.grid.store,filterable=me.getColumnFilterable(field.column);// we don't want to hear back store "filter" event
// so we suspend store tracking
me.suspendStoreTracking();if(value==null||value===''){// remove filter if setting to empty
store.removeFieldFilter(field.name);}else if(filterable.filterFn){store.filter({filterBy:function filterBy(record){return filterable.filterFn({property:field.name,value:value,record:record});},// To be able to clear the filter
property:field.name});}else{store.filter(Object.assign({property:field.name},me.parseFilterValue(value)));}me.resumeStoreTracking();}//endregion
//region Menu items
/**
     * Adds a menu item to toggle filter bar visibility.
     * @param column Column
     * @param items Menu items
     * @returns {Object[]} Menu items.
     * @private
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this;items.push({text:me.L(me.hidden?'enableFilterBar':'disableFilterBar'),name:'toggleFilterBar',icon:'b-fw-icon b-icon-filter',cls:'b-separator',onItem:function onItem(){return me.toggleFilterBar();}});}//endregion
}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * The delay in milliseconds to wait after the last keystroke before applying filters.
             * Set to 0 to not trigger filtering from keystrokes, requires pressing ENTER instead
             * @config {Number}
             * @default
             */keyStrokeFilterDelay:300,// Destroying data level filters when we hiding UI is supposed to be optional someday. So far this flag is private
clearStoreFiltersOnHide:true};}},{key:"pluginConfig",get:function get(){return{before:['onElementKeyDown'],chain:['renderHeader','getHeaderMenuItems']};}}]);return FilterBar;}(InstancePlugin);exports.FilterBar=FilterBar;FilterBar.featureClass='b-filter-bar';FilterBar._$name='FilterBar';GridFeatureManager.registerFeature(FilterBar);//TODO: Expand function?
/**
 * @module Grid/feature/Group
 */ /**
 * Enables rendering and handling of row groups. The actual grouping is done in the store, but triggered by [shift] +
 * clicking headers or by using two finger tap (one on header, one anywhere on grid). Groups can be expanded/collapsed
 * by clicking on the group row or pressing [space] when group row is selected.
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @example
 * // grouping turned on but no default grouper
 * let grid = new Grid({
 *   features: {
 *     group: true
 *   }
 * });
 *
 * // default grouper, group by field 'name'
 * let grid = new Grid({
 *   features: {
 *     group: 'name'
 *   }
 * });
 *
 * // default grouper and custom renderer, which will be applied to each cell except the "group" cell
 * let grid = new Grid({
 *   features: {
 *     group: {
 *       field: 'name',
 *       ascending: false,
 *       renderer: () => 'Text'
 *     }
 *   }
 * });
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo grouping
 * @classtype group
 * @externalexample feature/Group.js
 */var Group=/*#__PURE__*/function(_InstancePlugin7){_inherits2(Group,_InstancePlugin7);function Group(){_classCallCheck2(this,Group);return _possibleConstructorReturn2(this,_getPrototypeOf2(Group).apply(this,arguments));}_createClass2(Group,[{key:"construct",//region Init
value:function construct(grid,config){var me=this;if(grid.features.tree)return;// groupSummary feature needs to be initialized first, if it is used
me._thisIsAUsedExpression(grid.features.groupSummary);// process initial config into an actual config object
config=me.processConfig(config);Object.assign(me,{grid:grid,rowManager:grid.rowManager,store:grid.store});_get2(_getPrototypeOf2(Group.prototype),"construct",this).call(this,grid,config);me.store.on({group:me.onStoreGroup,groupingoff:me.onStoreGroupingOff,thisObj:me});me.rowManager.on({rendercell:me.renderCell,thisObj:me});}// Group feature handles special config cases, where user can supply a string or a group config object
// instead of a normal config object
},{key:"processConfig",value:function processConfig(config){if(typeof config==='string'){return{field:config,ascending:null};}return config;}// override setConfig to process config before applying it (used mainly from ReactGrid)
},{key:"setConfig",value:function setConfig(config){var me=this;if(config===null){me.store.clearGroupers();}else{_get2(_getPrototypeOf2(Group.prototype),"setConfig",this).call(this,me.processConfig(config));}}},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(Group.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"toggleCollapse",//endregion
//region Expand/collapse
/**
     * Collapses or expands a group depending on its current state
     * @param recordOrId Record or records id for a group row to collapse or expand
     * @param collapse Force collapse (true) or expand (true)
     * @fires togglegroup
     */value:function toggleCollapse(recordOrId,collapse){this.internalToggleCollapse(recordOrId,collapse);}/**
     * Collapses or expands a group depending on its current state
     * @param recordOrId Record or records id for a group row to collapse or expand
     * @param collapse Force collapse (true) or expand (true)
     * @param skipRender True to not render rows
     * @internal
     * @fires togglegroup
     */},{key:"internalToggleCollapse",value:function internalToggleCollapse(recordOrId,collapse){var skipRender=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,store=me.store,groupRecord=store.getById(recordOrId),meta=groupRecord.meta;if(meta.groupRowFor===undefined)return;collapse=collapse===undefined?!meta.collapsed:collapse;if(collapse){store.excludeGroupRecords(groupRecord);}else{store.includeGroupRecords(groupRecord);}// note to self, all this could be done in collapsed setter on GroupModel if desired...
meta.collapsed=collapse;/**
         * Group expanded or collapsed
         * @event toggleGroup
         * @param groupRecord Group record
         * @param {Boolean} collapse Collapsed (true) or expanded (false)
         */me.grid.trigger('toggleGroup',{groupRecord:groupRecord,collapse:collapse});if(!skipRender){// render from grouprecord and down, no need to touch those above
me.rowManager.renderFromRecord(groupRecord);}}/**
     * Collapse all groups. This function is exposed on Grid and can thus be called as `grid.collapseAll()`
     */},{key:"collapseAll",value:function collapseAll(){var me=this;if(me.store.isGrouped){me.store.groupRecords.forEach(function(r){return me.internalToggleCollapse(r,true,true);});me.grid.refreshRows(true);}}/**
     * Expand all groups. This function is exposed on Grid and can thus be called as `grid.expandAll()`
     */},{key:"expandAll",value:function expandAll(){var me=this;if(me.store.isGrouped){me.store.groupRecords.forEach(function(r){return me.internalToggleCollapse(r,false,true);});me.grid.refreshRows();}}//endregion
//region Rendering
/**
     * Called when a cell is rendered, styles the group rows first cell.
     * @private
     */},{key:"renderCell",value:function renderCell(renderData){var me=this;// no need to run the code below if not grouping
if(!me.store.isGrouped)return;var cellElement=renderData.cellElement,rowElement=renderData.rowElement,column=renderData.column,grid=me.grid,meta=renderData.record.meta,firstColumn=grid.columns.visibleColumns[0],subGrid=grid.getSubGridFromColumn(column);if(meta.hasOwnProperty('groupRowFor')){// Let column clear the cell, in case it needs to do some cleanup
column.clearCell(cellElement);// this is a group row, add css classes
// IE11 doesnt support this
//rowElement.classList.toggle('b-grid-group-collapsed', meta.collapsed === undefined ? false : meta.collapsed);
if(meta.collapsed){rowElement.classList.add('b-grid-group-collapsed');}else{rowElement.classList.remove('b-grid-group-collapsed');}rowElement.classList.add('b-group-row');if(column.region===grid.regions[0]&&(firstColumn.type==='rownumber'&&column===subGrid.columns.visibleColumns[1]||firstColumn.type!=='rownumber'&&column===subGrid.columns.visibleColumns[0])){cellElement.classList.add('b-group-title');}me.buildGroupHeader(renderData);}else{// not a group row, remove css classes
// TODO: use dom query to remove before render instead?
if(cellElement===rowElement.firstElementChild){// IE11 doesnt support this
//rowElement.classList.remove('b-group-row', 'b-grid-group-collapsed');
rowElement.classList.remove('b-group-row');rowElement.classList.remove('b-grid-group-collapsed');cellElement.classList.remove('b-group-title');}}}// renderData.cellElement is required
},{key:"buildGroupHeader",value:function buildGroupHeader(renderData){var me=this,record=renderData.record,cellElement=renderData.cellElement,rowElement=renderData.rowElement,column=renderData.column,persist=renderData.persist,grid=me.grid,meta=record.meta,firstColumn=grid.columns.visibleColumns[0],subGrid=column&&grid.getSubGridFromColumn(column);var html=null;if(persist||column&&firstColumn.type==='rownumber'&&column===subGrid.columns.visibleColumns[1]||firstColumn.type!=='rownumber'&&column===subGrid.columns.visibleColumns[0]){// build group header no matter what cell it is or
// build group value in first cell of first subgrid
if(persist||column.region===grid.regions[0]){var groupColumn=grid.columns.get(meta.groupField);// First try using columns groupRenderer (might not even have a column if grouping programmatically)
if(groupColumn&&groupColumn.groupRenderer){// groupRenderer could return nothing and just apply changes directly to DOM element
html=groupColumn.groupRenderer({cellElement:cellElement,groupRowFor:meta.groupRowFor,record:record,rowElement:rowElement,groupColumn:groupColumn});}// Secondly use features groupRenderer, if configured with one
else if(me.groupRenderer){// groupRenderer could return nothing and just apply changes directly to DOM element
html=me.groupRenderer(Object.assign({},renderData,{groupRowFor:meta.groupRowFor,groupColumn:groupColumn}));}// Third, just display unformatted value and child count
else{// Need to adjust count if group summary is used
// TODO remove this when grouping has been refactored to not store group headers/footers in the Store
var count=meta.childCount-(grid.features.groupSummary?1:0);html="".concat(meta.groupRowFor==null?'':meta.groupRowFor," (").concat(count,")");}}}else if(me.groupRenderer){// groupRenderer could return nothing and just apply changes directly to DOM element
html=me.groupRenderer(renderData);}// Renderers could return nothing and just apply changes directly to DOM element
if(typeof html==='string'){cellElement.innerHTML=html;}return cellElement.innerHTML;}/**
     * Called when an header is rendered, adds grouping icon if grouped by that column.
     * @private
     * @param headerContainerElement
     */},{key:"renderHeader",value:function renderHeader(headerContainerElement){var me=this,grid=me.grid,groupers=me.store.groupers;// Sorted from start, reflect in rendering
var _iteratorNormalCompletion32=true;var _didIteratorError32=false;var _iteratorError32=undefined;try{for(var _iterator32=groupers[Symbol.iterator](),_step32;!(_iteratorNormalCompletion32=(_step32=_iterator32.next()).done);_iteratorNormalCompletion32=true){var groupInfo=_step32.value;// Might be grouping by field without column, which is valid
var column=grid.columns.get(groupInfo.field),header=column&&grid.getHeaderElement(column.id);// IE11 doesnt support this
//header && header.classList.add('b-group', groupInfo.ascending ? 'b-asc' : 'b-desc');
if(header){header.classList.add('b-group');header.classList.add(groupInfo.ascending?'b-asc':'b-desc');}}}catch(err){_didIteratorError32=true;_iteratorError32=err;}finally{try{if(!_iteratorNormalCompletion32&&_iterator32.return!=null){_iterator32.return();}}finally{if(_didIteratorError32){throw _iteratorError32;}}}}//endregion
//region Context menu
/**
     * Supply items for headers context menu.
     * @private
     * @param column Header for this column
     * @param items Add items to this array
     * @returns {Object[]} Modified items array
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this,store=me.store;if(column.groupable!==false){items.push({text:me.L('groupAscending'),icon:'b-fw-icon b-icon-group-asc',name:'groupAsc',cls:'b-separator',weight:110,onItem:function onItem(_ref121){var column=_ref121.item.column;return store.group(column.field,true);}},{text:me.L('groupDescending'),icon:'b-fw-icon b-icon-group-desc',name:'groupDesc',weight:110,onItem:function onItem(_ref122){var column=_ref122.item.column;return store.group(column.field,false);}});}if(store.isGrouped){items.push({text:me.L('stopGrouping'),icon:'b-fw-icon b-icon-clear',name:'groupRemove',cls:column.groupable?'':'b-separator',weight:110,onItem:function onItem(_ref123){var column=_ref123.item.column;return store.clearGroupers();}});}}/**
     * Supply items to ColumnDragToolbar
     * @private
     */},{key:"getColumnDragToolbarItems",value:function getColumnDragToolbarItems(column,items){var me=this,store=me.store;items.push({text:me.L('groupAscendingShort'),group:me.L('Group'),icon:'b-icon b-icon-group-asc',name:'groupAsc',cls:'b-separator',weight:110,onDrop:function onDrop(_ref124){var column=_ref124.column;return store.group(column.field,true);}});items.push({text:me.L('groupDescendingShort'),group:me.L('Group'),icon:'b-icon b-icon-group-desc',name:'groupDesc',weight:110,onDrop:function onDrop(_ref125){var column=_ref125.column;return store.group(column.field,false);}});var grouped=store.groupers&&store.groupers.find(function(col){return col.field===column.field;});items.push({text:me.L('stopGroupingShort'),group:me.L('Group'),icon:'b-icon b-icon-clear',name:'groupRemove',disabled:!grouped,weight:110,onDrop:function onDrop(_ref126){var column=_ref126.column;return store.removeGrouper(column.field);}});return items;}//endregion
//region Events - Store
/**
     * Called when store grouping changes. Reflects on header and rerenders rows.
     * @private
     */},{key:"onStoreGroup",value:function onStoreGroup(_ref127){var groupers=_ref127.groupers;var grid=this.grid,element=grid.element,curGroupHeaders=element&&DomHelper.children(element,'.b-grid-header.b-group');if(element){var _iteratorNormalCompletion33=true;var _didIteratorError33=false;var _iteratorError33=undefined;try{for(var _iterator33=curGroupHeaders[Symbol.iterator](),_step33;!(_iteratorNormalCompletion33=(_step33=_iterator33.next()).done);_iteratorNormalCompletion33=true){var header=_step33.value;// IE11 doesnt support this
//header.classList.remove('b-group', 'b-asc', 'b-desc');
header.classList.remove('b-group');header.classList.remove('b-asc');header.classList.remove('b-desc');}}catch(err){_didIteratorError33=true;_iteratorError33=err;}finally{try{if(!_iteratorNormalCompletion33&&_iterator33.return!=null){_iterator33.return();}}finally{if(_didIteratorError33){throw _iteratorError33;}}}var _iteratorNormalCompletion34=true;var _didIteratorError34=false;var _iteratorError34=undefined;try{for(var _iterator34=groupers[Symbol.iterator](),_step34;!(_iteratorNormalCompletion34=(_step34=_iterator34.next()).done);_iteratorNormalCompletion34=true){var groupInfo=_step34.value;var _header=grid.getHeaderElementByField(groupInfo.field);// IE11 doesnt support this
//header && header.classList.add('b-group', groupInfo.ascending ? 'b-asc' : 'b-desc');
if(_header){_header.classList.add('b-group');_header.classList.add(groupInfo.ascending?'b-asc':'b-desc');}}}catch(err){_didIteratorError34=true;_iteratorError34=err;}finally{try{if(!_iteratorNormalCompletion34&&_iterator34.return!=null){_iterator34.return();}}finally{if(_didIteratorError34){throw _iteratorError34;}}}}}/**
     * Called when grouping is turned of in the store. Updates headers and rows.
     * @private
     * @param store
     */},{key:"onStoreGroupingOff",value:function onStoreGroupingOff(){var me=this,grid=me.grid,curGroupHeaders=DomHelper.children(grid.element,'.b-grid-header.b-group');var _iteratorNormalCompletion35=true;var _didIteratorError35=false;var _iteratorError35=undefined;try{for(var _iterator35=curGroupHeaders[Symbol.iterator](),_step35;!(_iteratorNormalCompletion35=(_step35=_iterator35.next()).done);_iteratorNormalCompletion35=true){var header=_step35.value;// IE11 doesnt support this
//header.classList.remove('b-group', 'b-asc', 'b-desc');
header.classList.remove('b-group');header.classList.remove('b-asc');header.classList.remove('b-desc');}}catch(err){_didIteratorError35=true;_iteratorError35=err;}finally{try{if(!_iteratorNormalCompletion35&&_iterator35.return!=null){_iterator35.return();}}finally{if(_didIteratorError35){throw _iteratorError35;}}}grid.refreshRows();}//endregion
//region Events - Grid
/**
     * Store touches when user touches header, used in onElementTouchEnd.
     * @private
     */},{key:"onElementTouchStart",value:function onElementTouchStart(event){var me=this,target=event.target,header=DomHelper.up(target,'.b-grid-header'),column=header&&me.grid.getColumnFromElement(header);// If it's a multi touch, group.
if(event.touches.length>1&&column&&column.groupable!==false){me.store.group(column.field);}}/**
     * React to click on headers (to group by that column if [alt] is pressed) and on group rows (expand/collapse).
     * @private
     * @param event
     * @returns {Boolean}
     */},{key:"onElementClick",value:function onElementClick(event){var me=this,store=me.store,target=event.target,row=DomHelper.up(target,'.b-group-row'),header=DomHelper.up(target,'.b-grid-header'),field=header&&header.dataset.column;if(target.classList.contains('b-resizer'))return;// Header
if(header&&field){var columnGrouper=store.groupers.find(function(g){return g.field===field;});// Store has a grouper for this column's field; flip grouper order
if(columnGrouper&&!event.shiftKey){store.group(field,!columnGrouper.ascending);return false;}// Group or ungroup
else if(event.shiftKey){var column=me.grid.columns.get(field);if(column.groupable!==false){if(event.altKey){store.removeGrouper(field);}else{store.group(field);}}}event.preventDefault();}// Anywhere on group-row
if(row){me.internalToggleCollapse(DomDataStore.get(row).id);return false;}}/**
     * Toggle groups with [space].
     * @private
     * @param event
     * @returns {*}
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this;// only catch space on grid element, not in editors etc...
if(me.store.isGrouped&&event.target===me.client.element&&event.key===' '&&me.grid.focusedCell){event.preventDefault();me.internalToggleCollapse(me.grid.focusedCell.id);}}//endregion
//region Grid overrides
},{key:"onStoreDataChange",value:function onStoreDataChange(data){var store=data.source;// Grouping mixin needs to process data which then makes sure UI is refeshed
if(store.isGrouped&&store.count>0)return;this.overridden.onStoreDataChange(data);}//endregion
},{key:"renderer",set:function set(renderer){this.groupRenderer=renderer;}},{key:"field",set:function set(field){this._field=field;this.store.group(field,this.ascending);},get:function get(){return this._field;}}],[{key:"defaultConfig",get:function get(){return{/**
             * The name of the record field to group by.
             * @config {String}
             * @default
             */field:null,/**
             * A function which yields the HTML for a group header when passed a data block.
             * The function is called in the context of this Group feature object.
             * The data block passed contains the following properties:
             *  - `groupRowFor` The value of the {@link #config-field} for the group.
             *  - `groupColumn` Optionally, the column under which the {@link #config-field} is shown.
             *  - `record` The group record representing the group, containing a `groupChildren` property which contains the child records for the group.
             *
             * The default renderer displays the `groupRowFor` and `record.meta.childCount`
             * @config {Function}
             * @default
             */renderer:null};}},{key:"pluginConfig",get:function get(){return{assign:['collapseAll','expandAll'],chain:['renderHeader','getHeaderMenuItems','getColumnDragToolbarItems','onElementTouchStart','onElementClick','onElementKeyDown'],override:['onStoreDataChange']};}}]);return Group;}(InstancePlugin);exports.Group=Group;Group.featureClass='b-group';Group._$name='Group';GridFeatureManager.registerFeature(Group,true,['Grid','Scheduler']);/**
 * @module Grid/feature/mixin/SummaryFormatter
 */ /**
 * Mixin for Summary and GroupSummary that handles formatting sums.
 * @mixin
 * @private
 */var SummaryFormatter=function SummaryFormatter(Target){return(/*#__PURE__*/function(_ref128){_inherits2(SummaryFormatter,_ref128);function SummaryFormatter(){_classCallCheck2(this,SummaryFormatter);return _possibleConstructorReturn2(this,_getPrototypeOf2(SummaryFormatter).apply(this,arguments));}_createClass2(SummaryFormatter,[{key:"generateHtml",/**
     * Calculates sums and returns as a html table
     * @param {Grid.column.Column} column Column to calculate sum for
     * @param {Common.data.Model[]} records Records to include in calculation
     * @param {String} cls CSS class to apply to summary table
     * @returns {string}
     */value:function generateHtml(column,records,cls){var store=this.store,summaries=column.summaries||(column.sum?[{sum:column.sum,renderer:column.summaryRenderer}]:[]);var html="<table class=\"".concat(cls,"\">");summaries.forEach(function(config){var type=config.sum,sum=null;if(type===true)type='sum';switch(type){case'sum':case'add':sum=store.sum(column.field,records);break;case'max':sum=store.max(column.field,records);break;case'min':sum=store.min(column.field,records);break;case'average':case'avg':sum=store.average(column.field,records);break;case'count':sum=records.length;break;case'countNotEmpty':sum=records.reduce(function(sum,record){var value=record[column.field];return sum+(value!==null&&value!==undefined?1:0);},0);break;}if(typeof type==='function'){sum=records.reduce(type,'seed'in config?config.seed:0);}if(sum!==null){var valueCls='b-grid-summary-value',// value to display, either using renderer or as is
valueHtml=config.renderer?config.renderer({config:config,sum:sum}):sum,// optional label
labelHtml=config.label?"<td class=\"b-grid-summary-label\">".concat(config.label,"</td>"):'';var summaryHtml;// no <td>s in html, wrap it (always the case when not using renderer)
if(!String(valueHtml).includes('<td>')){summaryHtml=labelHtml// has label, use returned html as value cell
?"".concat(labelHtml,"<td class=\"").concat(valueCls,"\">").concat(valueHtml,"</td>")// no label, span entire table
:"<td colspan=\"2\" class=\"".concat(valueCls,"\">").concat(valueHtml,"</td>");}// user is in charge of giving correct formatting
else{summaryHtml=valueHtml;}html+="<tr>".concat(summaryHtml,"</tr>");}});return html+'</table>';}}]);return SummaryFormatter;}(Target||Base));};/**
 * @module Grid/feature/GroupSummary
 */ /**
 * Displays a summary row as a group footer in a grouped grid. Uses same configuration options on columns as
 * {@link Grid.feature.Summary}.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * ```
 * features : {
 *     group        : 'city',
 *     groupSummary : true
 * }
 * ```
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo groupsummary
 * @classtype groupsummary
 * @externalexample feature/GroupSummary.js
 */var GroupSummary=/*#__PURE__*/function(_SummaryFormatter){_inherits2(GroupSummary,_SummaryFormatter);function GroupSummary(){_classCallCheck2(this,GroupSummary);return _possibleConstructorReturn2(this,_getPrototypeOf2(GroupSummary).apply(this,arguments));}_createClass2(GroupSummary,[{key:"construct",//region Init
value:function construct(grid,config){var me=this;Object.assign(me,{grid:grid,store:grid.store});// flag that will make the Store insert rows for group footers
me.store.useGroupFooters=true;_get2(_getPrototypeOf2(GroupSummary.prototype),"construct",this).call(this,grid,config);if(!grid.features.group){throw new Error('Requires Group feature to work, please enable');}me.store.on({update:me.onStoreUpdate,// need to run before grids listener, to flag for full refresh
prio:1,thisObj:me});me.grid.rowManager.on({beforerenderrow:me.onBeforeRenderRow,rendercell:me.renderCell,thisObj:me});}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"onBeforeRenderRow",//endregion
//region Render
/**
     * Called before rendering row contents, used to reset rows no longer used as group summary rows
     * @private
     */value:function onBeforeRenderRow(_ref129){var row=_ref129.row,record=_ref129.record;if(row.isGroupFooter&&!record.meta.hasOwnProperty('groupFooterFor')){// not a group row, remove css
row.isGroupFooter=false;row.removeCls('b-group-footer');// force full "redraw" when rendering cells
row.forceInnerHTML=true;}}/**
     * Called when a cell is rendered, styles the group rows first cell.
     * @private
     */},{key:"renderCell",value:function renderCell(_ref130){var column=_ref130.column,cellElement=_ref130.cellElement,rowElement=_ref130.rowElement,row=_ref130.row,record=_ref130.record,size=_ref130.size;var me=this;// no need to do the code below if not grouping
if(!me.store.isGrouped)return;if(record.meta.hasOwnProperty('groupFooterFor')){// this is a group row, add css
rowElement.classList.add('b-group-footer');row.isGroupFooter=true;// returns height config or count. config format is { height, count }. where `height is in px and should be
// added to value calculated from `count
var heightSetting=me.updateSummaryHtml(cellElement,column,record.meta.groupRecord.groupChildren);var count=typeof heightSetting==='number'?heightSetting:heightSetting.count;// number of summaries returned, use to calculate cell height
if(count>1){size.height=me.grid.rowHeight+count*me.grid.rowHeight*0.1;}// height config with height specified, added to cell height
if(heightSetting.height){size.height+=heightSetting.height;}}}},{key:"updateSummaryHtml",value:function updateSummaryHtml(cellElement,column,records){records=records.slice();records.pop();// last record is group footer, remove
var html=this.generateHtml(column,records,'b-grid-group-summary');// First time, set table
if(!cellElement.children.length){cellElement.innerHTML=html;}// Following times, sync changes
else{DomHelper.sync(html,cellElement.firstElementChild);}// return summary "count", used to set row height
return column.summaries?column.summaries.length:column.sum?1:0;}//endregion
//region Events
/**
     * Updates summaries on store changes (except record update, handled below)
     * @private
     */},{key:"onStoreUpdate",value:function onStoreUpdate(_ref131){var _this50=this;var store=_ref131.source,changes=_ref131.changes;// If a grouping field is among the changes, StoreGroup#onDataChanged will
// take care of the update by re-sorting.
if(changes&&store.groupers.find(function(grouper){return grouper.field in changes;})){return;}// only update summary when a field that affects summary is changed
// TODO: this should maybe be removed, another column might depend on the value for its summary?
var shouldUpdate=Object.keys(changes).some(function(field){var colField=_this50.grid.columns.get(field);// check existence, since a field not used in a column might have changed
return Boolean(colField)&&(Boolean(colField.sum)||Boolean(colField.summaries));});if(shouldUpdate){this.grid.forceFullRefresh=true;}}//endregion
}],[{key:"pluginConfig",get:function get(){return{};}}]);return GroupSummary;}(SummaryFormatter(InstancePlugin));exports.GroupSummary=GroupSummary;GroupSummary.featureClass='b-group-summary';GroupSummary._$name='GroupSummary';GridFeatureManager.registerFeature(GroupSummary);//TODO: Handle date columns
/**
 * @module Grid/feature/QuickFind
 */ /**
 * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the
 * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // enable QuickFind
 * let grid = new Grid({
 *   features: {
 *     quickFind: true
 *   }
 * });
 *
 * // navigate to next hit programmatically
 * grid.features.quickFind.gotoNextHit();
 *
 * @demo quickfind
 * @classtype quickFind
 * @externalexample feature/QuickFind.js
 */var QuickFind=/*#__PURE__*/function(_InstancePlugin8){_inherits2(QuickFind,_InstancePlugin8);function QuickFind(){_classCallCheck2(this,QuickFind);return _possibleConstructorReturn2(this,_getPrototypeOf2(QuickFind).apply(this,arguments));}_createClass2(QuickFind,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){var me=this;me.grid=grid;me.store=grid.store;_get2(_getPrototypeOf2(QuickFind.prototype),"construct",this).call(this,grid,config);}//endregion
//region Plugin config
//endregion
//region Show/hide QuickFind
/**
     * Shows a "searchfield" in the header. Triggered automatically when you have a cell focused and start typing.
     * @private
     */},{key:"showQuickFind",value:function showQuickFind(){var me=this,header=me.grid.getHeaderElement(me.columnId);if(header){if(!me.headerField){var _DomHelper$createElem3=DomHelper.createElement({tag:'div',className:'b-quick-hit-header',children:[{tag:'div',className:'b-quick-hit-field'},{tag:'div',className:'b-quick-hit-badge'}]},true),_DomHelper$createElem4=_slicedToArray(_DomHelper$createElem3,3),element=_DomHelper$createElem4[0],_field2=_DomHelper$createElem4[1],badge=_DomHelper$createElem4[2];if(me.mode==='header'){header.appendChild(element);}else{element.className+=' b-quick-hit-mode-grid';me.grid.element.appendChild(element);}me.headerField={header:element,field:_field2,badge:badge,colHeader:header};}me.headerField.field.innerHTML=me.find;me.headerField.badge.innerHTML=me.found.length;header.classList.add('b-quick-find-header');if(!me.renderListenerInitialized){me.grid.rowManager.on({rendercell:me.renderCell,thisObj:me});me.renderListenerInitialized=true;}}}/**
     * Hide the "searchfield" and remove highlighted hits. Called automatically when pressing [esc] or backspacing away
     * the keywords.
     * @private
     */},{key:"hideQuickFind",value:function hideQuickFind(){var me=this;// rerender cells to remove quick-find markup
var _iteratorNormalCompletion36=true;var _didIteratorError36=false;var _iteratorError36=undefined;try{for(var _iterator36=(me.prevFound||me.found)[Symbol.iterator](),_step36;!(_iteratorNormalCompletion36=(_step36=_iterator36.next()).done);_iteratorNormalCompletion36=true){var hit=_step36.value;var row=me.grid.getRowById(hit.id);if(row)row.renderCell(row.getCell(me.columnId),hit.data);}}catch(err){_didIteratorError36=true;_iteratorError36=err;}finally{try{if(!_iteratorNormalCompletion36&&_iterator36.return!=null){_iterator36.return();}}finally{if(_didIteratorError36){throw _iteratorError36;}}}if(me.headerField){me.headerField.header.parentNode.removeChild(me.headerField.header);me.headerField.colHeader.classList.remove('b-quick-find-header');me.headerField=null;}if(me.renderListenerInitialized){me.grid.rowManager.un({rendercell:me.renderCell},me);me.renderListenerInitialized=false;}me.grid.trigger('hideQuickFind');}//endregion
//region Search
/**
     * Performs a search and highlights hits. If find is empty, QuickFind is closed.
     * @param find Text to search for
     * @param columnFieldOrId Column to search
     */},{key:"search",value:function search(find){var columnFieldOrId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.columnId;var me=this,column=me.grid.columns.getById(columnFieldOrId)||me.grid.columns.get(columnFieldOrId),found=me.store.findByField(column.field,find),i=1,grid=me.grid;Object.assign(me,{foundMap:{},prevFound:me.found,found:found,find:find,columnId:column.id});if(find){me.showQuickFind();}else{me.hideQuickFind();}// reset column to use its normal settings for htmlEncoding
if(me.currentColumn&&me.currentColumn!==column)me.currentColumn.disableHtmlEncode=false;// clear old hits
var _iteratorNormalCompletion37=true;var _didIteratorError37=false;var _iteratorError37=undefined;try{for(var _iterator37=DomHelper.children(grid.element,'.b-quick-hit')[Symbol.iterator](),_step37;!(_iteratorNormalCompletion37=(_step37=_iterator37.next()).done);_iteratorNormalCompletion37=true){var cell=_step37.value;//IE11 doesnt support this
//cell.classList.remove('b-quick-hit', 'b-quick-hit-cell');
cell.classList.remove('b-quick-hit');cell.classList.remove('b-quick-hit-cell');// rerender cell to remove quick-hit-text
var row=DomDataStore.get(cell).row;row.renderCell(cell);}// want to set innerHTML each time for cell decoration to work
}catch(err){_didIteratorError37=true;_iteratorError37=err;}finally{try{if(!_iteratorNormalCompletion37&&_iterator37.return!=null){_iterator37.return();}}finally{if(_didIteratorError37){throw _iteratorError37;}}}column.disableHtmlEncode=true;me.currentColumn=column;if(!found)return;if(found.length>0){me.gotoClosestHit(grid.focusedCell,found);}// highlight hits for visible cells
var _iteratorNormalCompletion38=true;var _didIteratorError38=false;var _iteratorError38=undefined;try{for(var _iterator38=found[Symbol.iterator](),_step38;!(_iteratorNormalCompletion38=(_step38=_iterator38.next()).done);_iteratorNormalCompletion38=true){var hit=_step38.value;me.foundMap[hit.id]=i++;var _row=grid.getRowById(hit.data.id);if(_row){_row.renderCell(_row.getCell(column.id));}// limit highlighted hits
if(i>1000)break;}}catch(err){_didIteratorError38=true;_iteratorError38=err;}finally{try{if(!_iteratorNormalCompletion38&&_iterator38.return!=null){_iterator38.return();}}finally{if(_didIteratorError38){throw _iteratorError38;}}}me.grid.trigger('quickFind',{find:find,found:found});}/**
     * Clears and closes QuickFind.
     */},{key:"clear",value:function clear(){if(this.found&&this.found.length){this.search('');}}/**
     * Number of results found
     * @type {Number}
     * @readonly
     */},{key:"gotoHit",/**
     * Found results (as returned by Store#findByField), an array in format { index: x, data: record }
     * @member {Object[]} found
     * @readonly
     */ //endregion
//region Navigation
/**
     * Go to specified hit.
     * @param index
     */value:function gotoHit(index){var me=this,grid=me.grid,nextHit=me.found[index];if(nextHit){grid.focusCell({columnId:me.columnId,id:nextHit.id});}return!!nextHit;}},{key:"gotoClosestHit",value:function gotoClosestHit(focusedCell,found){var focusedIndex=focusedCell?this.grid.store.indexOf(focusedCell.id):0,foundSorted=found.slice().sort(function(a,b){return Math.abs(a.index-focusedIndex)-Math.abs(b.index-focusedIndex);});this.gotoHit(found.indexOf(foundSorted[0]));}/**
     * Go to the first hit.
     */},{key:"gotoFirstHit",value:function gotoFirstHit(){this.gotoHit(0);}/**
     * Go to the last hit.
     */},{key:"gotoLastHit",value:function gotoLastHit(){this.gotoHit(this.found.length-1);}/**
     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].
     */},{key:"gotoNextHit",value:function gotoNextHit(){var me=this,grid=me.grid,// start from focused cell, or if focus has left grid use lastFocusedCell
currentId=grid._focusedCell?grid._focusedCell.id:grid.lastFocusedCell.id,currentIndex=grid.store.indexOf(currentId)||0,nextHit=me.found.find(function(hit){return hit.index>currentIndex;});if(nextHit){grid.focusCell({columnId:me.columnId,id:nextHit.id});}else{me.gotoFirstHit();}}/**
     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].
     */},{key:"gotoPrevHit",value:function gotoPrevHit(){var me=this,grid=me.grid,currentId=grid._focusedCell?grid._focusedCell.id:grid.lastFocusedCell.id,currentIndex=grid.store.indexOf(currentId)||0,found=me.found,prevHit;if(!found.length)return;for(var i=found.length-1;i--;i>=0){if(found[i].index<currentIndex){prevHit=found[i];break;}}if(prevHit){grid.focusCell({columnId:me.columnId,id:prevHit.id});}else{me.gotoLastHit();}}//endregion
//region Render
/**
     * Called from SubGrid when a cell is rendered.
     * @private
     */},{key:"renderCell",value:function renderCell(renderData){var me=this,cellElement=renderData.cellElement,foundMap=me.foundMap&&me.columnId===renderData.column.id&&me.foundMap[renderData.record.id];if(foundMap){// Check also TreeColumn's special internal `shouldHtmlEncode` flag
var htmlEncoded=renderData.column.htmlEncode||renderData.column.shouldHtmlEncode;// highlight cell
cellElement.classList.add('b-quick-hit');// Special treatment of columns outputting HTML, just highlight whole cell
if(!htmlEncoded){cellElement.classList.add('b-quick-hit-cell');}else{// if features have added other stuff to the cell, value is in div.b-grid-cell-value
// highlight in cell if found in innerHTML
var inner=DomHelper.down(cellElement,'.b-grid-cell-value,.b-tree-cell-value')||cellElement,html=inner.innerText,where=html&&html.toLowerCase().indexOf(me.find.toLowerCase());if(where>-1){var end=where+me.find.length,casedFind=html.slice(where,end),spaceChar='';// Insert a space if matching char preceded by whitespace
if(html[where-1]===' '){spaceChar='&nbsp;';}html=html.slice(0,where)+"<span class=\"b-quick-hit-text\">".concat(spaceChar).concat(casedFind,"</span>")+html.slice(end);inner.innerHTML=html+"<div class=\"b-quick-hit-cell-badge\">".concat(foundMap,"</div>");}else{cellElement.classList.add('b-quick-hit-cell');}}}}//endregion
//region Events
/**
     * Chained function called on grids keydown event. Handles backspace, escape, f3 and ctrl/cmd + g keys.
     * @private
     * @param event KeyboardEvent
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this,filterFeature=this.grid.features.filter;// Only react to keystrokes on grid cell elements. IE11 gets event.target wrong compared to other browsers...
if(DomHelper.up(event.target,BrowserHelper.isIE11?'.b-widget:not(.b-grid-subgrid):not(.b-grid)':'.b-widget:not(.b-grid)')){return;}if(me.find.length>0){// backspace
if(event.key==='Backspace'){event.preventDefault();me.find=me.find.substr(0,me.find.length-1);//console.log(me.find);
me.search(me.find);}// escape
else if(event.key==='Escape'){event.preventDefault();me.find='';me.search(me.find);}// F3 or CTRL+g
else if(event.key==='F3'||event.key.toLowerCase()==='g'&&(event.ctrlKey||event.metaKey)){event.preventDefault();if(event.shiftKey){me.gotoPrevHit();}else{me.gotoNextHit();}}// Ctrl+Shift+F
else if(filterFeature&&me.columnId&&me.foundCount&&event.ctrlKey&&event.shiftKey&&event.key==='F'){filterFeature.showFilterEditor(me.grid.columns.getById(me.columnId),me.find);}}}/**
     * Chained function called on grids keypress event. Handles input for "searchfield".
     * @private
     * @param event
     */},{key:"onElementKeyPress",value:function onElementKeyPress(event){var me=this;// Only react to keystrokes on grid cell elements
if(DomHelper.up(event.target,BrowserHelper.isIE11?'.b-widget:not(.b-grid-subgrid):not(.b-grid)':'.b-widget:not(.b-grid)')||event.key==='Enter'){return;}if(me.grid._focusedCell){var column=me.grid.columns.getById(me.grid._focusedCell.columnId);// if trying to search in invalid column, it's a hard failure
if(column&&column.searchable!==false){me.columnId=me.grid._focusedCell.columnId;if(event.key&&event.key.length===1){me.find+=event.key;me.search(me.find);}}}}},{key:"onCellNavigate",value:function onCellNavigate(grid,fromCellSelector,toCellSelector,event){var me=this,found=me.prevFound||me.found;if(found&&(!toCellSelector||toCellSelector.columnId!==me.columnId)){me.clear();}}//endregion
},{key:"foundCount",get:function get(){return this.found?this.found.length:0;}}],[{key:"defaultConfig",//region Config
get:function get(){return{mode:'header',find:''};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['onElementKeyDown','onElementKeyPress','onCellNavigate']};}}]);return QuickFind;}(InstancePlugin);exports.QuickFind=QuickFind;QuickFind.featureClass='b-quick-find';QuickFind._$name='QuickFind';GridFeatureManager.registerFeature(QuickFind);/**
 * @module Grid/feature/RegionResize
 */ /**
 * Makes the splitter between grid section draggable so you can resize grid sections.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // enable RegionResize
 * let grid = new Grid({
 *   features: {
 *     regionResize: true
 *   }
 * });
 *
 * @demo features
 * @classtype regionResize
 * @externalexample feature/RegionResize.js
 */var RegionResize=/*#__PURE__*/function(_InstancePlugin9){_inherits2(RegionResize,_InstancePlugin9);function RegionResize(){_classCallCheck2(this,RegionResize);return _possibleConstructorReturn2(this,_getPrototypeOf2(RegionResize).apply(this,arguments));}_createClass2(RegionResize,[{key:"construct",// region Init
value:function construct(grid,config){this.grid=grid;_get2(_getPrototypeOf2(RegionResize.prototype),"construct",this).call(this,grid,config);}},{key:"doDestroy",value:function doDestroy(){// TODO: Cleanup
_get2(_getPrototypeOf2(RegionResize.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"onElementDblClick",//endregion
value:function onElementDblClick(event){var me=this,grid=me.grid,splitterEl=DomHelper.up(event.target,'.b-grid-splitter-collapsed');// If collapsed splitter is dblclicked and region is not expanding
// It is unlikely that user might dblclick splitter twice and even if he does, nothing should happen.
// But just in case lets not expand twice.
if(splitterEl&&!me.expanding){me.expanding=true;var region=splitterEl.dataset.region,subGrid=grid.getSubGrid(region);// Usually collapsed splitter means corresponding region is collapsed. But in case of last two regions one
// splitter can be collapsed in two directions. So, if corresponding region is expanded then last one is collapsed
if(!subGrid.collapsed){region=grid.getLastRegions()[1];subGrid=grid.getSubGrid(region);}subGrid.expand().then(function(){return me.expanding=false;});}}//region Move splitter
/**
     * Begin moving splitter.
     * @private
     * @param splitterElement Splitter element
     * @param clientX Initial x position from which new width will be calculated on move
     */},{key:"startMove",value:function startMove(splitterElement,clientX){var me=this,grid=me.grid,region=splitterElement.dataset.region,gridEl=grid.element,subGrid=grid.getSubGrid(region),nextRegion=grid.regions[grid.regions.indexOf(region)+1],nextSubGrid=grid.getSubGrid(nextRegion),flip=1;if(subGrid.flex!=null){// If subgrid has flex, check if next one does not
if(nextSubGrid.flex==null){subGrid=nextSubGrid;flip=-1;}}if(splitterElement.classList.contains('b-grid-splitter-collapsed')){return;}var availableWidth=subGrid.element.offsetWidth+nextSubGrid.element.offsetWidth;me.dragContext={element:splitterElement,headerEl:subGrid.header.element,subGridEl:subGrid.element,subGrid:subGrid,originalWidth:subGrid.element.offsetWidth,originalX:clientX,minWidth:subGrid.minWidth||0,maxWidth:Math.min(availableWidth,subGrid.maxWidth||availableWidth),flip:flip};gridEl.classList.add('b-moving-splitter');splitterElement.classList.add('b-moving');}},{key:"onCollapseClick",value:function onCollapseClick(subGrid,splitterEl){var me=this,grid=me.grid,region=splitterEl.dataset.region,regions=grid.getLastRegions();// Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the
// left one. Check if we are working with last splitter
if(regions[0]===region){var lastSubGrid=grid.getSubGrid(regions[1]);if(lastSubGrid.collapsed){lastSubGrid.expand();return;}}subGrid.collapse();}},{key:"onExpandClick",value:function onExpandClick(subGrid,splitterEl){var me=this,grid=me.grid,region=splitterEl.dataset.region,regions=grid.getLastRegions();// Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the
// left one. Check if we are working with last splitter
if(regions[0]===region){if(!subGrid.collapsed){var lastSubGrid=grid.getSubGrid(regions[1]);lastSubGrid.collapse();return;}}subGrid.expand();}/**
     * Update splitter position.
     * @private
     * @param newClientX
     */},{key:"updateMove",value:function updateMove(newClientX){var dragContext=this.dragContext;if(dragContext){var difX=newClientX-dragContext.originalX,newWidth=Math.min(dragContext.maxWidth,dragContext.originalWidth+difX*dragContext.flip);// SubGrids monitor their own size and keep any splitters synced
dragContext.subGrid.width=Math.max(newWidth,dragContext.minWidth);}}/**
     * Stop moving splitter.
     * @private
     */},{key:"endMove",value:function endMove(){var me=this,dragContext=me.dragContext;if(dragContext){me.grid.element.classList.remove('b-moving-splitter');dragContext.element.classList.remove('b-moving');me.dragContext=null;}}//endregion
//region Events
/**
     * Start moving splitter on touch start.
     * @private
     * @param event
     */},{key:"onElementTouchStart",value:function onElementTouchStart(event){var me=this,target=event.target;if(target.classList.contains('b-grid-splitter')){me.startMove(target,event.touches[0].clientX);event.preventDefault();}}/**
     * Move splitter on touch move.
     * @private
     * @param event
     */},{key:"onElementTouchMove",value:function onElementTouchMove(event){if(this.dragContext){this.updateMove(event.touches[0].clientX);event.preventDefault();}}/**
     * Stop moving splitter on touch end.
     * @private
     * @param event
     */},{key:"onElementTouchEnd",value:function onElementTouchEnd(event){if(this.dragContext){this.endMove();event.preventDefault();}}/**
     * Start moving splitter on mouse down (on splitter).
     * @private
     * @param event
     */},{key:"onElementMouseDown",value:function onElementMouseDown(event){var me=this,target=event.target,splitter=event.target.closest(':not(.b-row-reordering):not(.b-dragging-event):not(.b-dragging-task):not(.b-dragging-header):not(.b-dragselecting) .b-grid-splitter'),subGrid=splitter&&me.grid.getSubGrid(splitter.dataset.region);// Only care about left clicks, avoids a bug found by monkeys
if(event.button===0){// In case of touch screen inner splitter has 100% height and we should handle
// it as target too
if(target.classList.contains('b-grid-splitter')||target.classList.contains('b-grid-splitter-inner')){me.startMove(splitter,event.clientX);event.preventDefault();}else if(target.classList.contains('b-icon-collapse-gridregion')){me.onCollapseClick(subGrid,splitter);}else if(target.classList.contains('b-icon-expand-gridregion')){me.onExpandClick(subGrid,splitter);}}}/**
     * Move splitter on mouse move.
     * @private
     * @param event
     */},{key:"onElementMouseMove",value:function onElementMouseMove(event){if(this.dragContext){this.updateMove(event.clientX);event.preventDefault();}}/**
     * Stop moving splitter on mouse up.
     * @private
     * @param event
     */},{key:"onElementMouseUp",value:function onElementMouseUp(event){if(this.dragContext){this.endMove();event.preventDefault();}}},{key:"onSubGridCollapse",value:function onSubGridCollapse(subGrid){var splitterEl=this.grid.resolveSplitter(subGrid),regions=this.grid.getLastRegions();// if last region was collapsed
if(regions[1]===subGrid.region){splitterEl.classList.add('b-grid-splitter-allow-collapse');}}},{key:"onSubGridExpand",value:function onSubGridExpand(subGrid){var splitterEl=this.grid.resolveSplitter(subGrid);splitterEl.classList.remove('b-grid-splitter-allow-collapse');}//endregion
},{key:"render",value:function render(){var _this$grid=this.grid,regions=_this$grid.regions,subGrids=_this$grid.subGrids;// Multiple regions, only allow collapsing to the edges by hiding buttons
if(regions.length>2){// Only works in a 3 subgrid scenario. To support more subgrids we have to merge splitters or something
// on collapse. Not going down that path currently...
subGrids[regions[0]].splitterElement.classList.add('b-left-only');subGrids[regions[1]].splitterElement.classList.add('b-right-only');}}}],[{key:"pluginConfig",get:function get(){return{chain:['onElementTouchStart','onElementTouchMove','onElementTouchEnd','onElementMouseDown','onElementMouseMove','onElementDblClick','onElementMouseUp','onSubGridCollapse','onSubGridExpand','render']};}}]);return RegionResize;}(InstancePlugin);exports.RegionResize=RegionResize;RegionResize.featureClass='b-split';RegionResize._$name='RegionResize';GridFeatureManager.registerFeature(RegionResize);/**
 * @module Grid/feature/RowReorder
 */ /**
 * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event
 * on the grid {@link Common.data.Store store}.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled.
 *
 * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to the `index` property which is the target drop position.
 * For trees you get access to the `parent` record and `index`, where index means the child index inside the parent.
 *
 * ```
 * features : {
 *     rowReorder : {
 *         listeners : {
 *             gridRowDrag : ({ context }) => {
 *                // Here you have access to context.insertBefore, and additionally context.parent for trees
 *
 *                context.valid = false;
 *             }
 *         }
 *     }
 * }
 * ```
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @classtype rowReorder
 */var RowReorder=/*#__PURE__*/function(_Delayable9){_inherits2(RowReorder,_Delayable9);function RowReorder(){_classCallCheck2(this,RowReorder);return _possibleConstructorReturn2(this,_getPrototypeOf2(RowReorder).apply(this,arguments));}_createClass2(RowReorder,[{key:"construct",value:function construct(grid,config){this.grid=grid;_get2(_getPrototypeOf2(RowReorder.prototype),"construct",this).apply(this,arguments);}},{key:"doDestroy",value:function doDestroy(){this.dragHelper&&this.dragHelper.destroy();_get2(_getPrototypeOf2(RowReorder.prototype),"doDestroy",this).call(this);}/**
     * Initialize drag & drop (called from render)
     * @private
     */},{key:"init",value:function init(){var me=this,grid=me.grid;me.dragHelper=new DragHelper({name:'rowReorder',mode:'translateXY',cloneTarget:true,dragThreshold:10,targetSelector:'.b-grid-row',lockX:true,scrollManager:grid.scrollManager,dragWithin:grid.verticalScroller,outerElement:grid.verticalScroller,// Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree
ignoreSamePositionDrop:false,createProxy:function createProxy(element){var clone=element.cloneNode(true),container=document.createElement('div');clone.removeAttribute('id');// The containing element will be positioned instead
clone.style.transform='';container.appendChild(clone);return container;},listeners:{beforedragstart:me.onBeforeDragStart,dragstart:me.onDragStart,drag:me.onDrag,drop:me.onDrop,reset:me.onReset,thisObj:me}});me.dropIndicator=DomHelper.createElement({parent:grid.bodyContainer,className:'b-row-drop-indicator'});me.relayEvents(me.dragHelper,['beforeDragStart','dragStart','drag','drop','abort'],'gridRow');}//endregion
//region Plugin config
},{key:"onBeforeDragStart",//endregion
//region Events (drop)
value:function onBeforeDragStart(_ref132){var context=_ref132.context;var grid=this.grid,targetSubGrid=grid.regions[0],subGridEl=grid.subGrids[targetSubGrid].element;// Disabled for touch devices until implemented fully. https://app.assembla.com/spaces/bryntum/tickets/8185-fix-row-reorder-for-touch-devices/details#
// Only dragging enabled in the leftmost grid section
if(this.disabled||grid.readOnly||DomHelper.isTouchEvent||!subGridEl.contains(context.element)){return false;}var record=this.grid.getRecordFromElement(context.element);return!record.meta.specialRow;}},{key:"onDragStart",value:function onDragStart(_ref133){var context=_ref133.context;var me=this,record=me.grid.getRecordFromElement(context.grabbed);if(!record){throw new Error('Failed to find record for dragged element');}if(me.grid.features.cellEdit){me.grid.readOnly=true;me.grid.features.cellEdit.cancelEditing(true);}if(me.grid.features.contextMenu){me.grid.features.contextMenu.hideContextMenu(false);}me.grid.element.classList.add('b-row-reordering');var focusedCell=context.element.querySelector('.b-focused');focusedCell&&focusedCell.classList.remove('b-focused');DomHelper.removeClasses(context.element.firstElementChild,['b-selected','b-hover']);me.record=record;}},{key:"onDrag",value:function onDrag(_ref134){var context=_ref134.context,event=_ref134.event;var me=this,_me$grid=me.grid,store=_me$grid.store,rowManager=_me$grid.rowManager;// Ignore if user drags outside grid area
if(!me.dragHelper.outerElement.contains(event.target)||!event.target.closest('.b-grid-subgrid')){context.valid=false;return;}var valid=context.valid,row=me.grid.rowManager.getRowAt(event.clientY),overRecord,dataIndex,after,insertBefore;if(row){var rowTop=row.top+me.grid._bodyRectangle.y,middleY=rowTop+row.height/2;dataIndex=row.dataIndex;overRecord=row&&store.getAt(dataIndex);// Drop after row below if mouse is in bottom half of hovered row
after=event.clientY>middleY;}// Below the rows. Drop after last row
else{dataIndex=store.count-1;overRecord=store.last;row=me.grid.rowManager.getRow(dataIndex);after=true;}// Hovering the dragged record. This is a no-op.
// But still gather the contextual data.
if(overRecord===me.record){valid=false;}if(store.tree){DomHelper.removeClsGlobally(me.grid.element,'b-row-reordering-target-parent');insertBefore=after?overRecord.nextSibling:overRecord;// For trees, prevent moving a parent into its own hierarchy
if(me.record.contains(overRecord)){valid=false;}context.parent=overRecord.parent;if(!context.parent.isRoot){var parentRow=rowManager.getRowById(context.parent);if(parentRow){parentRow.addCls('b-row-reordering-target-parent');}}me.clearTimeout(me.hoverTimer);if(overRecord&&overRecord.isParent&&!overRecord.isExpanded(store)){me.hoverTimer=me.setTimeout(function(){return me.grid.expand(overRecord);},me.hoverExpandTimeout);}}else{// Public property used for validation
insertBefore=after?store.getAt(dataIndex+1):overRecord;}// Provide visual clue to user of the drop position
DomHelper.setTranslateY(me.dropIndicator,row.top+(after?row.height:0));context.insertBefore=insertBefore;context.valid=valid;}/**
     * Handle drop
     * @private
     */},{key:"onDrop",value:function onDrop(_ref135){var context=_ref135.context;var me=this,grid=me.grid,store=grid.store;context.asyncCleanup=context.async=true;context.element.classList.add('b-dropping');me.setTimeout(function(){grid.element.classList.remove('b-row-reordering');if(context.valid){if(store.tree){context.parent.insertChild(me.record,context.insertBefore);}else{store.insert(context.insertBefore?store.indexOf(context.insertBefore):store.count,me.record);}store.clearSorters();context.finalize();}},300);}/**
     * Clean up on reset
     * @private
     */},{key:"onReset",value:function onReset(){var me=this;me.grid.element.classList.remove('b-row-reordering');me.grid.readOnly=false;DomHelper.removeClsGlobally(me.grid.element,'b-row-reordering-target-parent');}//endregion
//region Render
/**
     * Updates DragHelper with updated headers when grid contents is rerendered
     * @private
     */},{key:"render",value:function render(){// columns shown, hidden or reordered
this.init();}//endregion
}],[{key:"defaultConfig",//region Events
/**
     * Fired before dragging starts, return false to prevent the drag operation.
     * @preventable
     * @event beforeGridRowDragStart
     * @param {DragHelper} source
     * @param {Object} context
     * @param {MouseEvent|TouchEvent} event
     */ /**
     * Fired when dragging starts.
     * @event gridRowDragStart
     * @param {DragHelper} source
     * @param {Object} context
     * @param {MouseEvent|TouchEvent} event
     */ /**
     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid / tree record, and additionally `context.parent` (a TreeNode) for trees. You can
     * signal that the drop position is valid or invalid by setting `context.valid = false;`
     * @event gridRowDrag
     * @param {DragHelper} source
     * @param {Object} context
     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Common.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Common.data.Model} context.parent The parent record of the current drop position (only applicable for trees)
     * @param {MouseEvent} event
     */ /**
     * Fired on row drop
     * @event gridRowDrop
     * @param {DragHelper} source
     * @param {Object} context
     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.
     * @param {Common.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)
     * @param {Common.data.Model} context.parent The parent record of the current drop position (only applicable for trees)
     * @param {MouseEvent} event
     */ /**
     * Fired when a row drag operation is aborted
     * @event gridRowAbort
     * @param {DragHelper} source
     * @param {Object} context
     * @param {MouseEvent} event
     */ //endregion
//region Init
get:function get(){return{/**
             * If hovering over a parent node for this period of a time in a tree, the node will expand
             * @config {Number}
             */hoverExpandTimeout:1000};}},{key:"pluginConfig",get:function get(){return{after:['render']};}}]);return RowReorder;}(Delayable(InstancePlugin));exports.RowReorder=RowReorder;RowReorder.featureClass='';RowReorder._$name='RowReorder';GridFeatureManager.registerFeature(RowReorder,false);GridFeatureManager.registerFeature(RowReorder,true,'Gantt');//TODO: Should listen for store search also, to work the other way around
/**
 * @module Grid/feature/Search
 */ /**
 * Feature that allows the user to search the entire grid. Navigate between hits using the
 * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.
 *
 * Note that this feature does not include a UI, please build your own and call appropriate methods in the feature. For
 * a demo implementation, see
 * <a href="../examples/search" target="_blank">Search example</a>.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // enable Search
 * let grid = new Grid({
 *   features: {
 *     search: true
 *   }
 * });
 *
 * // perform search
 * grid.features.search.search('steve');
 *
 * @demo search
 * @classtype search
 * @externalexample feature/Search.js
 */var Search=/*#__PURE__*/function(_InstancePlugin10){_inherits2(Search,_InstancePlugin10);function Search(){_classCallCheck2(this,Search);return _possibleConstructorReturn2(this,_getPrototypeOf2(Search).apply(this,arguments));}_createClass2(Search,[{key:"construct",//region Init
value:function construct(grid,config){var me=this;_get2(_getPrototypeOf2(Search.prototype),"construct",this).call(this,grid,config);Object.assign(me,{store:grid.store,grid:grid,find:'',hitEls:[]});}},{key:"doDestroy",value:function doDestroy(){this.clear(true);_get2(_getPrototypeOf2(Search.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"search",//endregion
//region Search
/**
     * Performs a search and highlights hits.
     * @param {String} find Text to search for
     * @param {Boolean} gotoHit Go to first hit after search
     * @param {Boolean} reapply Pass true to force search
     */value:function search(find){var gotoHit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var reapply=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// empty search considered a clear
if(!find){return this.clear();}// searching for same thing again, do nothing
if(!reapply&&find===this.find){return;}var me=this,grid=me.grid,// Only search columns in use
columns=grid.columns.visibleColumns.filter(function(col){return col.searchable!==false;}),fields=columns.map(function(col){return col.field;}),found=me.store.search(find,fields);var i=1;Object.assign(me,{foundMap:{},prevFound:me.found,found:found,find:find});// clear old hits
var _iteratorNormalCompletion39=true;var _didIteratorError39=false;var _iteratorError39=undefined;try{for(var _iterator39=DomHelper.children(grid.element,'.b-search-hit')[Symbol.iterator](),_step39;!(_iteratorNormalCompletion39=(_step39=_iterator39.next()).done);_iteratorNormalCompletion39=true){var cell=_step39.value;// IE11 doesnt support this
//cell.classList.remove('b-search-hit', 'b-search-hit-cell');
cell.classList.remove('b-search-hit');cell.classList.remove('b-search-hit-cell');// rerender cell to remove search-hit-text
var row=DomDataStore.get(cell).row;row.renderCell(cell);}}catch(err){_didIteratorError39=true;_iteratorError39=err;}finally{try{if(!_iteratorNormalCompletion39&&_iterator39.return!=null){_iterator39.return();}}finally{if(_didIteratorError39){throw _iteratorError39;}}}if(!found)return;// columns from previous search, reset htmlEncode
if(me.hitColumns){me.hitColumns.forEach(function(col){return col.disableHtmlEncode=false;});}me.hitColumns=[];// highlight hits for visible cells
var _iteratorNormalCompletion40=true;var _didIteratorError40=false;var _iteratorError40=undefined;try{for(var _iterator40=found[Symbol.iterator](),_step40;!(_iteratorNormalCompletion40=(_step40=_iterator40.next()).done);_iteratorNormalCompletion40=true){var hit=_step40.value;me.foundMap[hit.field+'-'+hit.id]=i++;// disable htmlEncode for columns with hits
var column=me.grid.columns.get(hit.field);if(column){column.disableHtmlEncode=true;me.hitColumns.push(column);}// limit hits
if(i>1000)break;}}catch(err){_didIteratorError40=true;_iteratorError40=err;}finally{try{if(!_iteratorNormalCompletion40&&_iterator40.return!=null){_iterator40.return();}}finally{if(_didIteratorError40){throw _iteratorError40;}}}if(!me.listenersInitialized){me.grid.rowManager.on({rendercell:me.renderCell},me);me.store.on({refresh:me.onStoreRefresh},me);me.listenersInitialized=true;}grid.refreshRows();me.grid.trigger('search',{grid:grid,find:find,found:found});if(gotoHit&&!me.isHitFocused){me.gotoNextHit(true);}return found;}/**
     * Clears search results.
     */},{key:"clear",value:function clear(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,grid=me.grid;if(me.foundMap){delete me.foundMap;delete me.find;}DomHelper.forEachSelector(grid.element,'.b-search-hit',function(cell){// IE11 doesnt support this
//cell.classList.remove('b-search-hit', 'b-search-hit-cell');
cell.classList.remove('b-search-hit');cell.classList.remove('b-search-hit-cell');});DomHelper.removeEachSelector(grid.element,'.b-search-hit-cell-badge,.b-search-hit-text');if(me.listenersInitialized){grid.rowManager.un({rendercell:me.renderCell},me);me.store.un({refresh:me.onStoreRefresh},me);me.listenersInitialized=false;}if(!silent){grid.refreshRows();me.grid.trigger('clearSearch',{grid:grid});}}/**
     * Number of results found
     * @readonly
     * @returns {Number}
     */},{key:"gotoNextHit",/**
     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].
     */value:function gotoNextHit(){var fromStart=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;if(!me.found||!me.found.length)return;var grid=me.grid,fromCell=grid.focusedCell||grid.lastFocusedCell,currentIndex=fromCell&&!fromStart?grid.store.indexOf(fromCell.id):-1,nextHit=me.found.findIndex(function(hit){return hit.index>currentIndex;});if(nextHit!==-1){me.gotoHit(nextHit);}}/**
     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].
     */},{key:"gotoPrevHit",value:function gotoPrevHit(){var me=this;if(!me.found||!me.found.length)return;var grid=me.grid,fromCell=grid.focusedCell||grid.lastFocusedCell,currentIndex=fromCell?grid.store.indexOf(fromCell.id):0,found=me.found;for(var i=found.length-1;i--;i>=0){var hit=found[i];if(hit.index<currentIndex){me.gotoHit(i);break;}}}/**
     * Go to specified hit.
     * @param index
     */},{key:"gotoHit",value:function gotoHit(index){var me=this,grid=me.grid,nextHit=me.found[index];if(nextHit){grid.focusCell({field:nextHit.field,id:nextHit.id});}return!!nextHit;}/**
     * Go to the first hit.
     */},{key:"gotoFirstHit",value:function gotoFirstHit(){this.gotoHit(0);}/**
     * Go to the last hit.
     */},{key:"gotoLastHit",value:function gotoLastHit(){this.gotoHit(this.found.length-1);}//endregion
//region Render
/**
     * Called from SubGrid when a cell is rendered. Highlights search hits.
     * @private
     */},{key:"renderCell",value:function renderCell(_ref136){var cellElement=_ref136.cellElement,column=_ref136.column,record=_ref136.record,value=_ref136.value,cellContent=_ref136.cellContent;var me=this,hitIndex=me.foundMap&&me.foundMap[column.field+'-'+record.id];// clear search stuff from cell, might not be done by rendering since it does not always set innerHTML any longer
//if (me.hitElements.includes(cellElement)) {
//    const textElement  = cellElement.querySelector('.b-search-hit-text'),
//        badgeElement = cellElement.querySelector('.b-search-hit-cell-badge');
//
//    textElement && textElement.remove();
//    badgeElement && badgeElement.remove();
//
//    cellElement.classList.remove('b-search-hit');
//    cellElement.classList.remove('b-search-hit-cell');
//
//    me.hitElements.splice(me.hitElements.indexOf(cellElement), 1);
//}
if(hitIndex){// highlight cell
cellElement.classList.add('b-search-hit');// highlight in cell if found in innerHTML
var inner=DomHelper.down(cellElement,'.b-grid-cell-value')||cellElement,find=String(me.find).toLowerCase();if(String(value).toLowerCase()===find){inner.innerHTML="<span class=\"b-search-hit-text\">".concat(cellContent,"</span><div class=\"b-search-hit-cell-badge\">").concat(hitIndex,"</div>");}else{var _find=String(me.find).toLowerCase(),where=cellContent&&cellContent.toLowerCase().indexOf(_find);if(where>-1){var end=where+_find.length,casedFind=cellContent.slice(where,end);inner.innerHTML="".concat(cellContent.slice(0,where),"<span class=\"b-search-hit-text\">").concat(casedFind,"</span>").concat(cellContent.slice(end),"<div class=\"b-search-hit-cell-badge\">").concat(hitIndex,"</div>");}else{cellElement.classList.add('b-search-hit-cell');}}me.hitEls.push(cellElement);}}//endregion
//region Context menu
/**
     * Add search menu item to cell context menu.
     * @param column
     * @param record
     * @param items
     * @returns {*}
     * @private
     */},{key:"getCellMenuItems",value:function getCellMenuItems(column,record,items){var me=this;if(column.searchable){items.push({text:me.L('searchForValue'),icon:'b-fw-icon b-icon-search',cls:'b-separator',name:'search',onItem:function onItem(_ref137){var item=_ref137.item;var column=item.column,record=item.record;// TODO: Only extract selection from current cell instead? Lazy way for now
var sel=window.getSelection().toString();if(!sel)sel=record[column.field];me.search(sel);}});}return items;}//endregion
//region Events
/**
     * Chained function called on grids keydown event. Handles backspace, escape, f3 and ctrl/cmd + g keys.
     * @private
     * @param event KeyboardEvent
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this;if(me.find&&me.find!==''){if(event.key==='F3'||event.key.toLowerCase()==='g'&&(event.ctrlKey||event.metaKey)){event.preventDefault();if(event.shiftKey){me.gotoPrevHit();}else{me.gotoNextHit();}}}}},{key:"onStoreRefresh",value:function onStoreRefresh(){this.search(this.find,false,true);}//endregion
},{key:"foundCount",get:function get(){return this.found&&this.found.length||0;}//endregion
//region Navigation
/**
     * Checks if focused row is a search hit.
     * @returns {Boolean} Returns true if focused row is a hit
     * @readonly
     */},{key:"isHitFocused",get:function get(){var me=this,grid=me.grid,currentIndex=grid.focusedCell?grid.store.indexOf(grid.focusedCell.id):-1,currentColumn=grid.focusedCell?grid.columns.getById(grid.focusedCell.columnId):null;return currentIndex!==-1&&me.found.some(function(hit){return hit.index===currentIndex&&currentColumn&&hit.field===currentColumn.field;});}}],[{key:"pluginConfig",get:function get(){return{chain:['getCellMenuItems','onElementKeyDown']};}}]);return Search;}(InstancePlugin);exports.Search=Search;Search.featureClass='b-search';Search._$name='Search';GridFeatureManager.registerFeature(Search);//TODO: Allow multisort using multitouch?
/**
 * @module Grid/feature/Sort
 */ /**
 * Allows sorting of grid by clicking (or tapping) headers, also displays which columns grid is sorted by (numbered if
 * using multisort). Use modifier keys for multisorting: meta + click to add sorter, meta + alt + click to remove sorter.
 * The actual sorting is done by the store.
 *
 * For info on programmatically handling sorting, see {@link Common.data.mixin.StoreSort StoreSort}.
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // use initial sorting
 * let grid = new Grid({
 *   features: {
 *     sort: 'name'
 *   }
 * });
 *
 * // can also be specified on store
 * let grid = new Grid({
 *   store: {
 *     sorters: [
 *       { field: 'name', ascending: false }
 *     ]
 *   }
 * });
 *
 * @demo sorting
 * @classtype sort
 * @externalexample feature/Sort.js
 */var Sort=/*#__PURE__*/function(_InstancePlugin11){_inherits2(Sort,_InstancePlugin11);function Sort(){_classCallCheck2(this,Sort);return _possibleConstructorReturn2(this,_getPrototypeOf2(Sort).apply(this,arguments));}_createClass2(Sort,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){var me=this;// process initial config into an actual config object
config=me.processConfig(config);me.store=grid.store;me.grid=grid;me.store.on({sort:me.syncHeaderSortState,thisObj:me});_get2(_getPrototypeOf2(Sort.prototype),"construct",this).call(this,grid,config);}// Sort feature handles special config cases, where user can supply a string or an array of sorters
// instead of a normal config object
},{key:"processConfig",value:function processConfig(config){if(typeof config==='string'||Array.isArray(config)){return{field:config,ascending:null};}return config;}// override setConfig to process config before applying it
},{key:"setConfig",value:function setConfig(config){_get2(_getPrototypeOf2(Sort.prototype),"setConfig",this).call(this,this.processConfig(config));}},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(Sort.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"syncHeaderSortState",//endregion
//region Headers
/**
     * Update headers to match stores sorters (displays sort icon in correct direction on them)
     * @private
     */value:function syncHeaderSortState(){var me=this,sorterMap={};if(!me.grid.isConfiguring){var storeSorters=me.store.sorters,sorterCount=storeSorters.length,classList=new DomClassList(),sorter;// Key sorters object by field name so we can find them.
for(var sortIndex=0;sortIndex<sorterCount;sortIndex++){var _sorter=storeSorters[sortIndex];if(_sorter.field){sorterMap[_sorter.field]={ascending:_sorter.ascending,sortIndex:sortIndex+1};}}// Sync the sortable, sorted, and sortIndex state of each leaf header element
var _iteratorNormalCompletion41=true;var _didIteratorError41=false;var _iteratorError41=undefined;try{for(var _iterator41=me.grid.columns.bottomColumns[Symbol.iterator](),_step41;!(_iteratorNormalCompletion41=(_step41=_iterator41.next()).done);_iteratorNormalCompletion41=true){var leafColumn=_step41.value;var leafHeader=leafColumn.element;if(leafHeader){// TimeAxisColumn in Scheduler has no textWrapper, since it has custom rendering,
// but since it cannot be sorted by anyway lets just ignore it
var dataset=leafColumn.textWrapper&&leafColumn.textWrapper.dataset;// data-sortIndex is 1-based, and only set if there is > 1 sorter.
// iOS Safari throws a JS error if the requested delete property is not present.
dataset&&dataset.sortIndex&&delete dataset.sortIndex;classList.value=leafHeader.classList;if(leafColumn.sortable!==false){classList.add(me.sortableCls);sorter=sorterMap[leafColumn.field];if(sorter){if(sorterCount>1&&dataset){dataset.sortIndex=sorter.sortIndex;}classList.add(me.sortedCls);if(sorter.ascending){classList.add(me.sortedAscCls);classList.remove(me.sortedDescCls);}else{classList.add(me.sortedDescCls);classList.remove(me.sortedAscCls);}}else{classList.remove(me.sortedCls);// Not optimal, but easiest way to make sure sort feature does not remove needed classes.
// Better solution would be to use different names for sorting and grouping
if(!classList['b-group']){classList.remove(me.sortedAscCls);classList.remove(me.sortedDescCls);}}}else{classList.remove(me.sortableCls);}// Update the element's classList
DomHelper.syncClassList(leafHeader,classList);}}}catch(err){_didIteratorError41=true;_iteratorError41=err;}finally{try{if(!_iteratorNormalCompletion41&&_iterator41.return!=null){_iterator41.return();}}finally{if(_didIteratorError41){throw _iteratorError41;}}}}}//endregion
//region Context menu
/**
     * Adds sort menu items to header context menu.
     * @param column
     * @param items
     * @returns {Object[]}
     * @private
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this;if(column.sortable!==false){items.push({text:me.L('sortAscending'),icon:'b-fw-icon b-icon-sort-asc',name:'sortAsc',cls:'b-separator',weight:105,onItem:function onItem(_ref138){var column=_ref138.item.column;return me.store.sort(column.field,true);}});items.push({text:me.L('sortDescending'),icon:'b-fw-icon b-icon-sort-desc',name:'sortDesc',weight:105,onItem:function onItem(_ref139){var column=_ref139.item.column;return me.store.sort(column.field,false);}});if(me.multiSort&&me.grid.columns.records.filter(function(col){return col.sortable;}).length>1){var sorter=this.grid.store.sorters.find(function(s){return s.field===column.field;});items.push({text:me.L('multiSort'),icon:'b-fw-icon b-icon-sort',name:'multiSort',weight:105,menu:[{text:sorter?me.L('toggleSortAscending'):me.L('addSortAscending'),icon:'b-fw-icon b-icon-sort-asc',name:'addSortAsc',disabled:sorter&&sorter.ascending,weight:105,onItem:function onItem(_ref140){var column=_ref140.item.column;return me.store.addSorter(column.field,true);}},{text:sorter?me.L('toggleSortDescending'):me.L('addSortDescending'),icon:'b-fw-icon b-icon-sort-desc',name:'addSortDesc',disabled:sorter&&!sorter.ascending,weight:105,onItem:function onItem(_ref141){var column=_ref141.item.column;return me.store.addSorter(column.field,false);}},{text:me.L('removeSorter'),icon:'b-fw-icon b-icon-remove',name:'remove-sorter',weight:105,disabled:!sorter,onItem:function onItem(_ref142){var column=_ref142.item.column;return me.store.removeSorter(column.field);}}]});}}return items;}/**
     * Supply items to ColumnDragToolbar
     * @private
     */},{key:"getColumnDragToolbarItems",value:function getColumnDragToolbarItems(column,items){var me=this,store=me.store;if(column.sortable!==false){items.push({text:me.L('sortAscendingShort'),group:me.L('Sort'),icon:'b-icon b-icon-sort-asc',name:'sortAsc',cls:'b-separator',weight:105,onDrop:function onDrop(_ref143){var column=_ref143.column;return store.sort(column.field,true);}});items.push({text:me.L('sortDescendingShort'),group:me.L('Sort'),icon:'b-icon b-icon-sort-desc',name:'sortDesc',weight:105,onDrop:function onDrop(_ref144){var column=_ref144.column;return store.sort(column.field,false);}});var sorter=store.sorters.find(function(s){return s.field===column.field;});Array.prototype.push.apply(items,[{text:me.L('addSortAscendingShort'),group:me.L('Multisort'),icon:'b-icon b-icon-sort-asc',name:'multisortAddAsc',disabled:sorter&&sorter.ascending,weight:105,onDrop:function onDrop(_ref145){var column=_ref145.column;return store.addSorter(column.field,true);}},{text:me.L('addSortDescendingShort'),group:me.L('Multisort'),icon:'b-icon b-icon-sort-desc',name:'multisortAddDesc',disabled:sorter&&!sorter.ascending,weight:105,onDrop:function onDrop(_ref146){var column=_ref146.column;return store.addSorter(column.field,false);}},{text:me.L('removeSorterShort'),group:me.L('Multisort'),icon:'b-icon b-icon-remove',name:'multisortRemove',weight:105,disabled:!sorter,onDrop:function onDrop(_ref147){var column=_ref147.column;return store.removeSorter(column.field);}}]);}return items;}//endregion
//region Events
/**
     * Clicked on header, sort Store.
     * @private
     */},{key:"onElementClick",value:function onElementClick(event){var me=this,store=me.store,target=event.target,header=DomHelper.up(target,'.b-grid-header.b-sortable'),field=header&&header.dataset.column;if(me.ignoreRe.test(target.className))return;//Header
if(header&&field){var column=me.grid.columns.getById(header.dataset.columnId),columnGrouper=store.groupers.find(function(g){return g.field===field;});// The Group feature will handle the change of the grouper's direction
if(columnGrouper&&!event.shiftKey){return;}if(column.sortable&&!event.shiftKey){if(event.metaKey&&event.altKey){store.removeSorter(column.field);}else{var sortBy=column.field;if(typeof column.sortable==='function'){sortBy={field:column.field,fn:column.sortable};}else if(_typeof(column.sortable)==='object'){sortBy=column.sortable;// Handle mismatch between Store#sort and CollectionSorter (field/property)
if(!sortBy.field){sortBy.field=sortBy.property||column.field;}}store.sort(sortBy,null,event.metaKey);}}}}/**
     * Called when grid headers are rendered, make headers match current sorters.
     * @private
     */},{key:"renderHeader",value:function renderHeader(){this.syncHeaderSortState();}//endregion
},{key:"field",set:function set(field){// Use columns sortable config for initial sorting if it is specified
var column=this.grid.columns.get(field);if(column&&_typeof(column.sortable)==='object'){// Normalization of Store & CollectionSorter differences
column.sortable.field=column.sortable.property||field;field=column.sortable;}this.store.sort(field,this.ascending);}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Enable multi sort
             * @config {Boolean}
             * @default
             */multiSort:true,ignoreRe:new RegExp([// Stop this feature from having to know the internals of two other optional features.
'b-grid-header-resize-handle','b-filter-icon'].join('|')),sortableCls:'b-sortable',sortedCls:'b-sort',sortedAscCls:'b-asc',sortedDescCls:'b-desc'};}},{key:"pluginConfig",get:function get(){return{chain:['onElementClick','getHeaderMenuItems','getColumnDragToolbarItems','renderHeader']};}}]);return Sort;}(InstancePlugin);exports.Sort=Sort;Sort.featureClass='b-sort';Sort._$name='Sort';GridFeatureManager.registerFeature(Sort,true);/**
 * @module Grid/feature/Stripe
 */ /**
 * Stripes rows, by adding even (b-even) or odd (b-odd) css classes to row elements.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * let grid = new Grid({
 *   features: {
 *     stripe: true
 *   }
 * });
 *
 * @demo columns
 * @classtype stripe
 * @externalexample feature/Stripe.js
 */var Stripe=/*#__PURE__*/function(_InstancePlugin12){_inherits2(Stripe,_InstancePlugin12);function Stripe(){_classCallCheck2(this,Stripe);return _possibleConstructorReturn2(this,_getPrototypeOf2(Stripe).apply(this,arguments));}_createClass2(Stripe,[{key:"construct",value:function construct(grid,config){this.grid=grid;_get2(_getPrototypeOf2(Stripe.prototype),"construct",this).call(this,grid,config);grid.rowManager.on({renderrow:this.onRenderRow,thisObj:this});}/**
     * Applies even/odd CSS when row is rendered
     * @param {Grid.row.Row} rowModel
     * @private
     */},{key:"onRenderRow",value:function onRenderRow(_ref148){var row=_ref148.row;row.addCls(row.dataIndex%2===0?'b-even':'b-odd');}}]);return Stripe;}(InstancePlugin);exports.Stripe=Stripe;Stripe._$name='Stripe';GridFeatureManager.registerFeature(Stripe);/**
 * @module Grid/view/Bar
 */ /**
 * Base class used by Header and Footer. Holds an element for each column. Not intended to be used directly.
 *
 * @extends Common/widget/Widget
 * @internal
 * @abstract
 */var Bar=/*#__PURE__*/function(_Widget9){_inherits2(Bar,_Widget9);function Bar(){_classCallCheck2(this,Bar);return _possibleConstructorReturn2(this,_getPrototypeOf2(Bar).apply(this,arguments));}_createClass2(Bar,[{key:"construct",//region Init
/**
     * Construct a bar for the specified SubGrid.
     * @param {Object} config Bar config
     * @function constructor
     */value:function construct(config){var subGrid=config.subGrid;if(subGrid){config.grid=subGrid.grid;config.columns=subGrid.columns;if(subGrid.width){config.width=subGrid.width;}else if(subGrid.flex){config.flex=subGrid.flex;}}_get2(_getPrototypeOf2(Bar.prototype),"construct",this).call(this,config);}},{key:"fixCellWidths",//endregion
/**
     * Fix cell widths (flex or fixed width) after rendering.
     * Not a part of template any longer because of CSP
     * @private
     */value:function fixCellWidths(){var me=this;var hasFlex=false,flexBasis;// single header "cell"
me.columns.traverse(function(column){var cellEl=me.getBarCellElement(column.id),domWidth=DomHelper.setLength(column.width),domMinWidth=DomHelper.setLength(column.minWidth);if(cellEl){// We have to work round the IE11 bug that flex-basis affects the content-box
// and any padding is added as extra.
// TODO: Remove  this when IE11 retires.
if(BrowserHelper.isIE11){flexBasis="calc(".concat(domWidth," - ").concat(me.getLrPadding(cellEl),"px)");}else{flexBasis=domWidth;}hasFlex=hasFlex||Boolean(column.flex);// Parent column without any specified width and flex should have flex calculated if any child has flex
if(column.isParent&&column.width==null&&column.flex==null){var flex=column.children.reduce(function(result,child){return result+=!child.hidden&&child.flex||0;},0);// Do not want to store this flex value on the column since it is always calculated
cellEl.style.flex=flex>0?"".concat(flex," 0 auto"):'';if(flex>0){// TODO: Figure out a better way of handling this, minWidth on the columns breaks the flexbox
//  calculation compared to cells, making them misalign
column.traverse(function(col){return col.data.minWidth=null;});}}// Normal case, set flex, width etc.
else{if(parseInt(column.minWidth)>=0){cellEl.style.minWidth=domMinWidth;}// Clear all the things we might have to set to correct cell widths
cellEl.style.flex=cellEl.style.flexBasis=cellEl.style.width='';if(column.flex){// If column has children we need to give it
// flex-shrink: 0, flex-basis: auto so that it always
// shrinkwraps its children without shrinking
if(!isNaN(parseInt(column.flex))&&column.children){cellEl.style.flex="".concat(column.flex," 0 auto");}else{cellEl.style.flex=column.flex;}}else if(parseInt(column.width)>=0){var parent=column.parent;// Only grid header bar has a notion of group headers
// Column is a child of an unwidthed group. We have to use width
// to stretch it.
if(me.isHeader&&!parent.isRoot&&!parent.width){cellEl.style.width=domWidth;}else{// https://app.assembla.com/spaces/bryntum/tickets/8041
// Column header widths must be set using flex-basis.
// Using width means that wide widths cause a flexed SubGrid
// to bust the flex rules.
// TODO: When IE11 retires, remove calc() hacks to overcome its flexbox bugs.
// Note that grid in Grid#onColumnsResized and SubGrid#fixCellWidths,
// cells MUST still be sized using width since rows
// are absolutely positioned and will not cause the busting out
// problem, and rows will not stretch to shrinkwrap the cells
// unless they are widthed with width.
cellEl.style.flexBasis=flexBasis;}}}if(column.height>=0){cellEl.style.height=DomHelper.setLength(column.height);}}});me.element.classList[hasFlex?'add':'remove']('b-has-flex');}},{key:"getLrPadding",value:function getLrPadding(cellEl){if(!this.cellLrPadding){var s=cellEl.ownerDocument.defaultView.getComputedStyle(cellEl);this.cellLrPadding=parseInt(s.getPropertyValue('padding-left'))+parseInt(s.getPropertyValue('padding-right'))+parseInt(s.getPropertyValue('border-left-width'))+parseInt(s.getPropertyValue('border-right-width'));}return this.cellLrPadding;}/**
     * Get the header or footer cell element for the specified column.
     * @param {String} columnId Column id
     * @returns {HTMLElement} Header or footer element, depending on which subclass is in use.
     * @private
     */},{key:"getBarCellElement",value:function getBarCellElement(columnId){return this.element.querySelector("[data-column-id=\"".concat(columnId,"\"]"));}},{key:"columns",get:function get(){return this._columns;},set:function set(columns){this._columns=columns;}}],[{key:"defaultConfig",get:function get(){return{scrollable:{}// We need a scroller, but no dimensions scroll by default
};}}]);return Bar;}(Widget);exports.Bar=Bar;Bar._$name='Bar';//import styles from '../../../resources/sass/grid/view/footer.scss';
/**
 * @module Grid/view/Footer
 */ /**
 * Grid footer, used by Summary feature. You should not need to create instances manually.
 *
 * @extends Grid/view/Bar
 * @internal
 */var Footer=/*#__PURE__*/function(_Bar){_inherits2(Footer,_Bar);function Footer(){_classCallCheck2(this,Footer);return _possibleConstructorReturn2(this,_getPrototypeOf2(Footer).apply(this,arguments));}_createClass2(Footer,[{key:"startConfigure",value:function startConfigure(config){config.scrollable.overflowX='hidden-scroll';_get2(_getPrototypeOf2(Footer.prototype),"startConfigure",this).call(this,config);}},{key:"refreshContent",value:function refreshContent(){this.element.firstElementChild.innerHTML=this.contentTemplate();this.fixFooterWidths();}},{key:"render",value:function render(appendToElement){_get2(_getPrototypeOf2(Footer.prototype),"render",this).call(this,appendToElement);this.refreshContent();}},{key:"template",value:function template(){var region=this.subGrid.region;return TemplateHelper.tpl(_templateObject19(),region,region,region);}},{key:"getFooter",//region Getters
/**
     * Get the footer cell element for the specified column.
     * @param {String} columnId Column id
     * @returns {HTMLElement} Footer cell element
     */value:function getFooter(columnId){return this.getBarCellElement(columnId);}//endregion
/**
     * Footer template. Iterates leaf columns to create content.
     * Style not included because of CSP. Widths are fixed up in
     * {@link #function-fixFooterWidths}
     * @private
     */},{key:"contentTemplate",value:function contentTemplate(){var me=this;return me.columns.visibleColumns.map(function(column){return column.hidden?'':TemplateHelper.tpl(_templateObject20(),column.align?"b-grid-footer-align-".concat(column.align):'',column.cls||'',column.field,column.id,column.allIndex,column.footerText||'');}).join('');}/**
     * Fix footer widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP
     * @private
     */},{key:"fixFooterWidths",value:function fixFooterWidths(){this.fixCellWidths();}},{key:"subGrid",get:function get(){return this._subGrid;},set:function set(subGrid){this._subGrid=this.owner=subGrid;}},{key:"overflowElement",get:function get(){return this.footersElement;}}],[{key:"defaultConfig",get:function get(){return{isFooter:true};}}]);return Footer;}(Bar);Footer._$name='Footer';/**
 * @module Grid/feature/Summary
 */ /**
 * Displays a summary row in the grid footer. Specify type of summary on columns, available types are:
 * <dl class="wide">
 * <dt>sum <dd>Sum of all values in the column
 * <dt>add <dd>Alias for sum
 * <dt>count <dd>Number of rows
 * <dt>countNotEmpty <dd>Number of rows containing a value
 * <dt>average <dd>Average of all values in the column
 * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)
 * </dl>
 * Columns can also specify a summaryRenderer to format the calculated sum.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * ```
 * { text : 'Score', data : 'score', width : 80, sum : true }
 * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: sum => return 'Average rank ' + sum }
 * ```
 *
 * Also it is possible to set up multiple summaries as array of summary configs:
 * ```
 * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }
 * ```
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo features
 * @classtype summary
 * @externalexample feature/Summary.js
 */var Summary=/*#__PURE__*/function(_SummaryFormatter2){_inherits2(Summary,_SummaryFormatter2);function Summary(){_classCallCheck2(this,Summary);return _possibleConstructorReturn2(this,_getPrototypeOf2(Summary).apply(this,arguments));}_createClass2(Summary,[{key:"construct",//region Init
value:function construct(grid,config){var me=this;Object.assign(me,{grid:grid,store:grid.store});_get2(_getPrototypeOf2(Summary.prototype),"construct",this).call(this,grid,config);me.store.on({change:me.onStoreChanged,thisObj:me});// footers aren't added by default, add
me.grid.eachSubGrid(function(subGrid){if(!subGrid.footer){subGrid.footer=new Footer({subGrid:subGrid,parent:subGrid// Contained widgets need to know their parents
});}});}},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(Summary.prototype),"doDestroy",this).call(this);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"renderRows",//endregion
//region Render
value:function renderRows(){this.updateSummaries();}/**
     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):
     * ```
     * <table>
     *     <tr><td colspan="2">0</td></tr> // { sum : 'min' } Only a calculation, span entire table
     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation
     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation
     * </table>
     * ```
     * @private
     */},{key:"updateSummaries",value:function updateSummaries(){var me=this,cells=DomHelper.children(me.grid.element,'.b-grid-footer'),store=me.store,records=store.storage.values.filter(function(r){return!r.meta.specialRow;});// reset seeds, to not have ever increasing sums :)
me.grid.columns.forEach(function(column){column.summaries&&column.summaries.forEach(function(config){if('seed'in config){if(!('initialSeed'in config)){config.initialSeed=config.seed;}if(['number','string','date'].includes(_typeof(config.initialSeed))){config.seed=config.initialSeed;}else{// create shallow copy
config.seed=Object.assign({},config.initialSeed);}}});});cells.forEach(function(cellElement){var column=me.grid.columns.get(cellElement.dataset.column),html=me.generateHtml(column,records,'b-grid-footer-summary');if(column.summaries?column.summaries.length:column.sum?1:0){// First time, set table
if(!cellElement.children.length){cellElement.innerHTML=html;}// Following times, sync changes
else{DomHelper.sync(html,cellElement.firstElementChild);}}});}//endregion
//region Events
/**
     * Updates summaries on store changes (except record update, handled below)
     * @private
     */},{key:"onStoreChanged",value:function onStoreChanged(_ref149){var _this51=this;var action=_ref149.action,changes=_ref149.changes;var shouldUpdate=true;if(action==='update'){// only update summary when a field that affects summary is changed
// TODO: this should maybe be removed, another column might depend on the value for its summary?
shouldUpdate=Object.keys(changes).some(function(field){var colField=_this51.grid.columns.get(field);// check existence, since a field not used in a column might have changed
return Boolean(colField)&&(Boolean(colField.sum)||Boolean(colField.summaries));});}if(shouldUpdate){this.updateSummaries();}}//endregion
}],[{key:"pluginConfig",get:function get(){return{chain:['renderRows']};}}]);return Summary;}(SummaryFormatter(InstancePlugin));exports.Summary=Summary;Summary.featureClass='b-summary';Summary._$name='Summary';GridFeatureManager.registerFeature(Summary);//TODO: Handle paths? Like expandPath('Parent A/Sub B/Leaf')
/**
 * @module Grid/feature/Tree
 */var immediatePromise$3=new Promise(function(resolve){return resolve();});/**
 * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires
 * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a
 * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and
 * also called.
 *
 * This feature is <strong>disabled</strong> by default.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo tree
 * @classtype tree
 * @externalexample feature/Tree.js
 */var Tree=/*#__PURE__*/function(_Delayable10){_inherits2(Tree,_Delayable10);function Tree(){_classCallCheck2(this,Tree);return _possibleConstructorReturn2(this,_getPrototypeOf2(Tree).apply(this,arguments));}_createClass2(Tree,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){var me=this;_get2(_getPrototypeOf2(Tree.prototype),"construct",this).call(this,grid,config);// find column
var treeColumn=grid.columns.find(function(col){return col instanceof TreeColumn;});Object.assign(me,{grid:grid,store:grid.store,rowManager:grid.rowManager,treeColumn:treeColumn});}},{key:"doDestroy",value:function doDestroy(){//TODO: Cleanup
_get2(_getPrototypeOf2(Tree.prototype),"doDestroy",this).call(this);}//endregion
//region Expand & collapse
/**
     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to toggle
     * @param {Boolean} [collapse] Force collapse (true) or expand (false)
     * @param {Boolean} [skipRefresh] Set to true to not refresh rows (if calling in batch)
     * @returns {Promise}
     */},{key:"toggleCollapse",value:function(){var _toggleCollapse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(idOrRecord,collapse){var skipRefresh,me,store,grid,rowManager,record,meta,success,row,cell,_args4=arguments;return regeneratorRuntime.wrap(function _callee3$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:skipRefresh=_args4.length>2&&_args4[2]!==undefined?_args4[2]:false;me=this,store=me.store,grid=me.grid,rowManager=grid.rowManager,record=store.getById(idOrRecord),meta=record.instanceMeta(store);// If in the middle of a load, we cannot proceed.
// If its a leaf, this is a no-op.
if(!(meta.isLoadingChildren||record.isLeaf)){_context4.next=4;break;}return _context4.abrupt("return");case 4:success=true,row=rowManager.getRowFor(record);if(collapse===undefined){collapse=!meta.collapsed;}// Reject a no-op before the beforeToggleNode is fired
if(!(Boolean(meta.collapsed)===collapse)){_context4.next=8;break;}return _context4.abrupt("return");case 8:grid.trigger('beforeToggleNode',{source:grid,record:record,collapse:collapse});meta.collapsed=collapse;if(!meta.collapsed){_context4.next=14;break;}store.onNodeCollapse(record);_context4.next=32;break;case 14:store.onNodeExpand(record);// Children not yet loaded, ask store for them.
// It will append them. Appending to a node which
// is expandded will insert the children into the UI.
if(record.isLoaded){_context4.next=32;break;}meta.isLoadingChildren=true;if(row){row.addCls('b-loading-children');}_context4.prev=18;_context4.next=21;return store.loadChildren(record);case 21:// Recache the row after possible async render
row=rowManager.getRowFor(record);_context4.next=28;break;case 24:_context4.prev=24;_context4.t0=_context4["catch"](18);// fail triggers event within loadChildren, no need to do much here
success=false;meta.collapsed=true;case 28:_context4.prev=28;// row might have changed during load
if(row){row.removeCls('b-loading-children');}meta.isLoadingChildren=false;return _context4.finish(28);case 32:if(success){if(row){cell=row.getCell(me.treeColumn.id);// Toggle cell's expanded/collapsed state
row.renderCell(cell,record);}// Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks
// Block multiple applications in the case of a recursive collapseAll operation
if(!me.isTogglingNode){grid.element.classList.add('b-toggling-node');me.isTogglingNode=true;me.requestAnimationFrame(function(){grid.element.classList.remove('b-toggling-node');me.isTogglingNode=false;});}grid.trigger(meta.collapsed?'collapseNode':'expandNode',{source:grid,record:record});grid.trigger('toggleNode',{source:grid,record:record,collapse:collapse});}case 33:case"end":return _context4.stop();}}},_callee3,this,[[18,24,28,32]]);}));function toggleCollapse(_x13,_x14){return _toggleCollapse.apply(this,arguments);}return toggleCollapse;}()/**
     * Collapse a single node. This function is exposed on Grid and can thus be called as `grid.collapse()`
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to collapse
     * @returns {Promise}
     */},{key:"collapse",value:function(){var _collapse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(idOrRecord){return regeneratorRuntime.wrap(function _callee4$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt("return",this.toggleCollapse(idOrRecord,true));case 1:case"end":return _context5.stop();}}},_callee4,this);}));function collapse(_x15){return _collapse.apply(this,arguments);}return collapse;}()/**
     * Expand a single node. This function is exposed on Grid and can thus be called as `grid.expand()`
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to expand
     * @returns {Promise}
     */},{key:"expand",value:function(){var _expand=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5(idOrRecord){return regeneratorRuntime.wrap(function _callee5$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt("return",this.toggleCollapse(idOrRecord,false));case 1:case"end":return _context6.stop();}}},_callee5,this);}));function expand(_x16){return _expand.apply(this,arguments);}return expand;}()/**
     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)
     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)
     * @param {Common.data.Model} [topNode] The topmost node from which to cascade a collapse.
     * Defaults to the {@link Common.data.Store#property-rootNode}. Not included in the cascade if
     * the root node is being used.
     * @returns {Promise}
     */},{key:"expandOrCollapseAll",value:function expandOrCollapseAll(){var _this52=this;var collapse=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var topNode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.store.rootNode;// TODO: Some logic here and some in the store, keep in same place maybe
var grid=this.grid,store=this.store,promises=[];grid.trigger('beforeToggleAllNodes',{source:grid,collapse:collapse});// Each collapse/expand will trigger events on store, avoid that by suspending
store.suspendEvents();topNode.traverse(function(record){var gridMeta=record.instanceMeta(store);if(!record.isLeaf){if(collapse&&!gridMeta.collapsed){_this52.toggleCollapse(record,true,true);}else if(!collapse&&gridMeta.collapsed){promises.push(_this52.toggleCollapse(record,false,true));}}},topNode===store.rootNode);store.resumeEvents();// Return to top when collapsing all
grid.refreshRows(true);grid.trigger('toggleAllNodes',{source:grid,collapse:collapse});return collapse?immediatePromise$3:Promise.all(promises);}/**
     * Collapse all nodes. This function is exposed on Grid and can thus be called as `grid.collapseAll()`
     * @returns {Promise}
     */},{key:"collapseAll",value:function(){var _collapseAll=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6(){return regeneratorRuntime.wrap(function _callee6$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:return _context7.abrupt("return",this.expandOrCollapseAll(true));case 1:case"end":return _context7.stop();}}},_callee6,this);}));function collapseAll(){return _collapseAll.apply(this,arguments);}return collapseAll;}()/**
     * Expand all nodes. This function is exposed on Grid and can thus be called as `grid.expandAll()`
     * @returns {Promise}
     */},{key:"expandAll",value:function(){var _expandAll=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(){return regeneratorRuntime.wrap(function _callee7$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:return _context8.abrupt("return",this.expandOrCollapseAll(false));case 1:case"end":return _context8.stop();}}},_callee7,this);}));function expandAll(){return _expandAll.apply(this,arguments);}return expandAll;}()/**
     * Expands parent nodes to make this node "visible". This function is exposed on Grid and can thus be called as
     * `grid.expandTo()`
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node
     * @returns {Promise}
     */},{key:"expandTo",value:function(){var _expandTo=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee9(idOrRecord){var me,record,recordMeta,refreshNeeded,parent,parents;return regeneratorRuntime.wrap(function _callee9$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:me=this,record=me.store.getById(idOrRecord),recordMeta=record.instanceMeta(me.store);// Already visible? abort
if(!(recordMeta.hiddenByCollapse===false)){_context10.next=3;break;}return _context10.abrupt("return");case 3:// Expand each parent
refreshNeeded=false,parent=record.parent,parents=[];// To expand path correctly we need to do it from top
// so parent record for each record will be in the store already
while(parent&&!parent.isRoot){parents.push(parent);parent=parent.parent;}_context10.next=7;return parents.reverse().forEach(/*#__PURE__*/function(){var _ref150=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee8(parent){return regeneratorRuntime.wrap(function _callee8$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:if(parent.instanceMeta(me.store).collapsed){refreshNeeded=true;}_context9.next=3;return me.toggleCollapse(parent,false,true);case 3:case"end":return _context9.stop();}}},_callee8);}));return function(_x18){return _ref150.apply(this,arguments);};}());case 7:if(refreshNeeded){me.grid.refreshRows();}_context10.next=10;return me.grid.scrollRowIntoView(record);case 10:case"end":return _context10.stop();}}},_callee9,this);}));function expandTo(_x17){return _expandTo.apply(this,arguments);}return expandTo;}()//endregion
//region Renderer
//endregion
//region Events
/**
     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.
     * @private
     */},{key:"onElementClick",value:function onElementClick(event){var me=this,target=event.target,cellData=me.grid.getEventData(event);// Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true
if(target.classList.contains('b-tree-expander')||me.expandOnCellClick&&cellData&&cellData.record.isParent){me.toggleCollapse(cellData.record);}}/**
     * Called on key down in grid. Expand/collapse node on [space]
     * @private
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){// only catch space on grid element, not in editors etc...
if(event.target===this.client.element&&event.key===' '){event.preventDefault();this.toggleCollapse(this.grid.focusedCell.id);}}//endregion
},{key:"navigateRight",value:function navigateRight(event){var me=this,grid=me.grid,cellSelector=grid.focusedCell;if(cellSelector){var record=grid.store.getById(cellSelector.id);// shift triggers tree navigation behaviour, also used by default for single column which is tree
if(grid.columns.getById(cellSelector.columnId).tree&&(event.shiftKey||grid.columns.count===1)){// on collapsed parent, expand
if(record.isParent&&record.instanceMeta(grid.store).collapsed){me.expand(record);}// otherwise go down
else{grid.navigateDown(event);}return false;}}}},{key:"navigateLeft",value:function navigateLeft(event){var me=this,grid=me.grid,cellSelector=grid.focusedCell;if(cellSelector){var record=grid.store.getById(cellSelector.id);if(grid.columns.getById(cellSelector.columnId).tree&&(event.shiftKey||grid.columns.count===1)){// on expanded parent, collapse
if(record.isParent&&!record.instanceMeta(grid.store).collapsed){me.collapse(record);}// otherwise go to parent
else if(record.parent){grid.focusCell({id:record.parent.id,columnId:cellSelector.columnId});}return false;}}}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Expand parent nodes when clicking on their cell
             * @config {Boolean}
             * @default
             */expandOnCellClick:false};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{assign:['collapseAll','expandAll','collapse','expand','expandTo','toggleCollapse'],before:['navigateRight','navigateLeft'],chain:['onElementClick','onElementKeyDown']};}}]);return Tree;}(Delayable(InstancePlugin));exports.Tree=Tree;Tree.featureClass='b-tree';Tree._$name='Tree';GridFeatureManager.registerFeature(Tree,false,'Grid');GridFeatureManager.registerFeature(Tree,true,'TreeGrid');/**
 * @module Grid/util/ScrollManager
 */ /**
 * Allows features to scroll grid when for example dragging close to edges. Normally you should not need to interact
 * with this class.
 * @internal
 */var ScrollManager=/*#__PURE__*/function(_Delayable11){_inherits2(ScrollManager,_Delayable11);function ScrollManager(){_classCallCheck2(this,ScrollManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(ScrollManager).apply(this,arguments));}_createClass2(ScrollManager,[{key:"startMonitoring",//endregion
//region Start/stop monitoring
/**
     * Starts monitoring an element. It will be scrolled if mouse is pressed and within zoneWidth pixels from element edge.
     * @param {HTMLElement|Object} elementOrConfig Element which might be scrolled or config { element, callback, thisObj }
     */value:function startMonitoring(elementOrConfig){var me=this,config=elementOrConfig instanceof HTMLElement?{element:elementOrConfig}:elementOrConfig,element=config.element,verticalElement=config.verticalElement||me.verticalElement||element;// only interested in elements that exists and are scrollable
if(element&&(element.scrollWidth>element.offsetWidth||verticalElement.scrollHeight>verticalElement.offsetHeight)){// already monitoring, bail out
if(me.monitoring.find(function(m){return m.element===element;}))return;config.direction=config.direction||me.direction;// store some stuff needed later
Object.assign(config,{verticalElement:verticalElement,scrollManager:me,startScrollLeft:element.scrollLeft,startScrollTop:verticalElement.scrollTop,scrollLeft:element.scrollLeft,scrollTop:verticalElement.scrollTop,scrollRelativeLeft:0,scrollRelativeTop:0});var handler=me.onMouseMove.bind(config);// listen to mousemove to determine if scroll needed or not
me.mouseMoveDetacher=EventHelper.on({mousemove:handler,touchmove:handler,element:element});// Cache scrollWidth because it may actually change in Edge and allow scrolling to empty space when creating
// dependency
config.scrollWidth=element.scrollWidth;me.monitoring.push(config);}}/**
     * Stops monitoring an element.
     * @param {HTMLElement} element Element for which monitoring is not desired any more and should stop as soon as possible. Preferably right away, but no later than on next frame :)
     */},{key:"stopMonitoring",value:function stopMonitoring(element){var me=this,config=me.monitoring.find(function(m){return m.element===element;});// cant stop nothing...
if(!config)return;me.stopScroll(config);me.mouseMoveDetacher&&me.mouseMoveDetacher();me.monitoring.splice(me.monitoring.indexOf(config),1);}//endregion
//region Internals
/**
     * Starts scrolling (see #performScroll). Called from onMouseMove.
     * @private
     * @param {Object} config Config object
     */},{key:"startScroll",value:function startScroll(config){config.scrolling=true;this.performScroll(config);}/**
     * Stops scrolling. Called from onMouseMove.
     * @private
     * @param {Object} config
     */},{key:"stopScroll",value:function stopScroll(config){config.scrolling=false;if(config.scrollRequested){this.cancelAnimationFrame(config.frameId);config.scrollRequested=false;}}/**
     * Scrolls by an amount determined by config.scrollDeltaX/Y on each frame. Start/stop by calling #startScroll and
     * #stopScroll.
     * @private
     * @param {Object} config Config object
     */},{key:"performScroll",value:function performScroll(config){var _this53=this;// this function is called repeatedly on each frame for as long as scrolling is needed
// check that scrolling is needed
if(config.scrolling&&!config.scrollRequested){var element=config.element,vertical=config.verticalElement;// scroll the determined amount of pixels
if(config.scrollDeltaX!==0){config.scrollLeft+=config.scrollDeltaX;// limit to element edges
config.scrollLeft=Math.max(Math.min(config.scrollLeft,config.scrollWidth-element.offsetWidth),0);config.scrollRelativeLeft=config.scrollLeft-config.startScrollLeft;element.scrollLeft=config.scrollLeft;}if(config.scrollDeltaY!==0){config.scrollTop+=config.scrollDeltaY;// limit to element edges
config.scrollTop=Math.max(Math.min(config.scrollTop,vertical.scrollHeight-vertical.offsetHeight),0);config.scrollRelativeTop=config.scrollTop-config.startScrollTop;vertical.scrollTop=config.scrollTop;}// call callback if scrolled in any direction
if((config.scrollRelativeLeft!==0||config.scrollRelativeTop!==0)&&config.callback){config.callback.call(config.thisObj||this,config);}// scroll some more on next frame
config.scrollRequested=true;config.frameId=this.requestAnimationFrame(function(){config.scrollRequested=false;_this53.performScroll(config);});}}/**
     * Listener for mouse move on monitored element. Determines if scrolling is needed, and if so how fast to scroll.
     * See #zoneWidth & #scrollSpeed configs.
     * @private
     * @param {MouseEvent} event
     */},{key:"onMouseMove",value:function onMouseMove(event){var config=this,me=config.scrollManager,element=config.element,vertical=config.verticalElement,box=element.getBoundingClientRect(),vbox=vertical.getBoundingClientRect(),width=me.zoneWidth,speed=me.scrollSpeed;// scroll left or right?
config.scrollDeltaX=0;if(config.direction!=='vertical'){if(event.clientX>box.right-width){config.scrollDeltaX=Math.round((width-(box.right-event.clientX))/speed)+1;}else if(event.clientX<box.left+width){config.scrollDeltaX=-Math.round((width+(box.left-event.clientX))/speed)-1;}}//console.log(config.scrollDeltaX, event.clientX, box.right, element.scrollLeft);
// scroll up or down?
config.scrollDeltaY=0;if(config.direction!=='horizontal'){if(event.clientY>vbox.bottom-width){config.scrollDeltaY=Math.round((width-(vbox.bottom-event.clientY))/speed)+1;}else if(event.clientY<vbox.top+width){config.scrollDeltaY=-Math.round((width+(vbox.top-event.clientY))/speed)-1;}}if(config.scrollDeltaX===0&&config.scrollDeltaY===0){me.stopScroll(config);}else{me.startScroll(config);}}//endregion
}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * Width in pixels of zone at element edges where scrolling can be triggered
             * @config {Number}
             * @default
             */zoneWidth:50,/**
             * Scroll speed, higher number is slower. Calculated as "distance from zone edge / scrollSpeed"
             * @config {Number}
             * @default
             */scrollSpeed:5,/**
             * Default element to use for vertical scrolling. Can be overridden in calls to `startMonitoring()`.
             * @config {HTMLElement}
             */verticalElement:null,/**
             * The direction(s) to scroll ('horizontal', 'vertical' or 'both')
             * @config {String}
             */direction:'both',monitoring:[]};}}]);return ScrollManager;}(Delayable(Base));ScrollManager._$name='ScrollManager';/**
 * @module Grid/view/Header
 */ /**
 * The Grid header, which contains simple columns but also allows grouped columns. One instance is created and used per SubGrid
 * automatically, you should not need to instantiate this class manually. See {@link Grid.column.Column} for information about
 * column configuration.
 *
 * @extends Grid/view/Bar
 * @internal
 *
 * @externalexample grid/Header.js
 */var Header=/*#__PURE__*/function(_Bar2){_inherits2(Header,_Bar2);function Header(){_classCallCheck2(this,Header);return _possibleConstructorReturn2(this,_getPrototypeOf2(Header).apply(this,arguments));}_createClass2(Header,[{key:"startConfigure",value:function startConfigure(config){config.scrollable.overflowX='hidden-scroll';_get2(_getPrototypeOf2(Header.prototype),"startConfigure",this).call(this,config);}},{key:"template",value:function template(){var me=this,region=me.region;return TemplateHelper.tpl(_templateObject21(),region,region,region,me.maxDepth);}},{key:"contentTemplate",/**
     * Header template, recursive template for column headers.
     * Style not included because of CSP. Widths are fixed up in
     * {@link #function-fixHeaderWidths}
     * @private
     */value:function contentTemplate(column){var me=this;if(column.hidden){return'';}else{/* eslint-disable */return TemplateHelper.tpl(_templateObject22(),column.field,column.id,column.isLeaf?'tabindex="0"':'',column.children?"\n                    <div class=\"b-grid-header-children\">\n                            ".concat(column.children.map(function(child){return me.contentTemplate(child);}).join(''),"\n                    </div>\n                    "):'');/* eslint-enable */}}// used by safari to fix flex when rows width shrink below this value
},{key:"calculateMinWidthForSafari",value:function calculateMinWidthForSafari(){var minWidth=0,columns=this.columns.visibleColumns;columns.forEach(function(column){minWidth+=column.calculateMinWidth();});return minWidth;}/**
     * Fix header widths (flex or fixed width) after rendering. Not a part of template any longer because of CSP
     * @private
     */},{key:"fixHeaderWidths",value:function fixHeaderWidths(){this.fixCellWidths();}},{key:"refreshHeaders",value:function refreshHeaders(){var me=this;// run renderers, not done from template to work more like cell rendering
me.columns.traverse(function(column){var headerElement=me.getBarCellElement(column.id);if(headerElement){var _ref151;var classList=new DomClassList((_ref151={'b-grid-header':1,'b-grid-header-parent':column.isParent},_defineProperty(_ref151,"b-level-".concat(column.childLevel),1),_defineProperty(_ref151,"b-depth-".concat(column.meta.depth),1),_defineProperty(_ref151,"b-grid-header-align-".concat(column.align),column.align),_defineProperty(_ref151,'b-grid-header-resizable',column.resizable&&column.isLeaf),_defineProperty(_ref151,column.cls,column.cls),_defineProperty(_ref151,'b-last-parent',column.isParent&&column.isLastInSubGrid),_defineProperty(_ref151,'b-last-leaf',column.isLeaf&&column.isLastInSubGrid),_ref151));var html=column.text;headerElement.className=classList;if(column.headerRenderer){html=column.headerRenderer.call(column.thisObj||me,{column:column,headerElement:headerElement});}if(column.icon){html="<i class=\"".concat(column.icon,"\"></i>")+(html||'');}var innerEl=headerElement.querySelector('.b-grid-header-text-content');if(innerEl){innerEl.innerHTML=html||'';}}});me.fixHeaderWidths();}},{key:"initDepths",/**
     * Depths are used for styling of grouped headers. Sets them on meta.
     * @private
     */value:function initDepths(){var columns=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.columns;var parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var me=this,maxDepth=0;if(parent&&parent.meta)parent.meta.depth++;var _iteratorNormalCompletion42=true;var _didIteratorError42=false;var _iteratorError42=undefined;try{for(var _iterator42=columns[Symbol.iterator](),_step42;!(_iteratorNormalCompletion42=(_step42=_iterator42.next()).done);_iteratorNormalCompletion42=true){var column=_step42.value;// TODO: this should maybe move
column.meta.depth=0;if(column.children){me.initDepths(column.children,column);if(column.meta.depth&&parent)parent.meta.depth+=column.meta.depth;}if(column.meta.depth>maxDepth)maxDepth=column.meta.depth;}}catch(err){_didIteratorError42=true;_iteratorError42=err;}finally{try{if(!_iteratorNormalCompletion42&&_iterator42.return!=null){_iterator42.return();}}finally{if(_didIteratorError42){throw _iteratorError42;}}}if(!parent){this.maxDepth=maxDepth;}return maxDepth;}//endregion
//region Getters
/**
     * Get the header cell element for the specified column.
     * @param {String} columnId Column id
     * @returns {HTMLElement} Header cell element
     */},{key:"getHeader",value:function getHeader(columnId){return this.getBarCellElement(columnId);}//endregion
},{key:"refreshContent",value:function refreshContent(){var me=this;me.content=me.columns.map(function(col){return me.contentTemplate(col);}).join('');me.refreshHeaders();}},{key:"render",value:function render(appendToElement){_get2(_getPrototypeOf2(Header.prototype),"render",this).call(this,appendToElement);this.refreshContent();}},{key:"subGrid",get:function get(){return this._subGrid;},set:function set(subGrid){this._subGrid=subGrid;this.id=subGrid.id+'-header';}},{key:"region",get:function get(){return this.subGrid&&this.subGrid.region;}},{key:"overflowElement",get:function get(){return this.headersElement;}},{key:"columns",get:function get(){return _get2(_getPrototypeOf2(Header.prototype),"columns",this);},set:function set(columns){var me=this;me.columnsDetacher&&me.columnsDetacher();if(columns){// columns is a chained store, it will be repopulated from master when columns change.
// That action always triggers change with action dataset.
me.columnsDetacher=columns.on({change:function change(){this.initDepths();},thisObj:me});}_set(_getPrototypeOf2(Header.prototype),"columns",columns,this,true);me.initDepths();}},{key:"contentElement",get:function get(){return this.element.firstElementChild;}}],[{key:"defaultConfig",get:function get(){return{isHeader:true};}}]);return Header;}(Bar);exports.Header=Header;Header._$name='Header';/**
 * @module Grid/util/SubGridScroller
 */var immediatePromise$4=new Promise(function(resolve){return resolve();}),defaultScrollOptions$1={block:'nearest'};/**
 * A Scroller subclass which handles scrolling in a SubGrid. Needs special treatment since the SubGrid itself only
 * allows horizontal scrolling, while the vertical scrolling is done by an outer element containing all subgrids.
 *
 * @internal
 */var SubGridScroller=/*#__PURE__*/function(_Scroller){_inherits2(SubGridScroller,_Scroller);function SubGridScroller(){_classCallCheck2(this,SubGridScroller);return _possibleConstructorReturn2(this,_getPrototypeOf2(SubGridScroller).apply(this,arguments));}_createClass2(SubGridScroller,[{key:"scrollIntoView",value:function scrollIntoView(element){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$1;var me=this,_me$getDeltaTo=me.getDeltaTo(element,options),xDelta=_me$getDeltaTo.xDelta,yDelta=_me$getDeltaTo.yDelta,result=xDelta||yDelta?me.scrollBy(xDelta,yDelta,options):immediatePromise$4;if(options.highlight||options.focus){result.then(function(){if(options.highlight){if(element instanceof Rectangle){element.translate(-xDelta,-yDelta).highlight();}else{DomHelper.highlight(element);}}options.focus&&element.focus&&element.focus();});}return result;}},{key:"scrollBy",value:function scrollBy(xDelta,yDelta,options){var yPromise=yDelta&&this.yScroller.scrollBy(0,yDelta,options),xPromise=xDelta&&_get2(_getPrototypeOf2(SubGridScroller.prototype),"scrollBy",this).call(this,xDelta,0,options);if(xPromise&&xPromise.cancel&&yPromise&&yPromise.cancel){var cancelX=xPromise.cancel,cancelY=yPromise.cancel;// Set up cross canceling
xPromise.cancel=yPromise.cancel=function(){cancelX();cancelY();};return Promise.all([xPromise,yPromise]);}return xPromise||yPromise;}},{key:"scrollTo",value:function scrollTo(toX,toY,options){var yPromise=toY!=null&&this.yScroller.scrollTo(null,toY,options),xPromise=toX!=null&&_get2(_getPrototypeOf2(SubGridScroller.prototype),"scrollTo",this).call(this,toX,null,options);if(xPromise&&xPromise.cancel&&yPromise&&yPromise.cancel){var cancelX=xPromise.cancel,cancelY=yPromise.cancel;// Set up cross canceling
xPromise.cancel=yPromise.cancel=function(){cancelX();cancelY();};return Promise.all([xPromise,yPromise]);}return xPromise||yPromise;}},{key:"viewport",get:function get(){return Rectangle.from(this.element).intersect(Rectangle.from(this.yScroller.element));}},{key:"y",set:function set(y){this.yScroller.y=y;},get:function get(){return this.yScroller?this.yScroller.y:0;}},{key:"maxY",get:function get(){return this.yScroller?this.yScroller.maxY:0;}},{key:"scrollHeight",get:function get(){return this.yScroller?this.yScroller.scrollHeight:0;}},{key:"clientHeight",get:function get(){return this.yScroller?this.yScroller.clientHeight:0;}}]);return SubGridScroller;}(Scroller);SubGridScroller._$name='SubGridScroller';/**
 * @module Grid/view/SubGrid
 */ /**
 * A SubGrid is a part of the grid (it has at least one and normally no more than two, called locked and normal). It
 * has its own header, which holds the columns to display rows for in the SubGrid. SubGrids are created by Grid, you
 * should not need to create instances directly.
 *
 * If not configured with a width or flex, the SubGrid will be sized to fit its columns. In this case, if all columns
 * have a fixed width (not using flex) then toggling columns will also affect the width of the SubGrid.
 *
 * @extends Common/widget/Widget
 */var SubGrid=/*#__PURE__*/function(_Widget10){_inherits2(SubGrid,_Widget10);function SubGrid(){_classCallCheck2(this,SubGrid);return _possibleConstructorReturn2(this,_getPrototypeOf2(SubGrid).apply(this,arguments));}_createClass2(SubGrid,[{key:"construct",//endregion
//region Init
/**
     * SubGrid constructor
     * @param config
     * @private
     */value:function construct(config){var me=this;_get2(_getPrototypeOf2(SubGrid.prototype),"construct",this).call(this,config);me.initHeader();me.rowManager.on('addrows',me.onAddRow,me);}},{key:"doDestroy",value:function doDestroy(){var me=this;me.header&&me.header.destroy();me.footer&&me.footer.destroy();me.fakeScroller&&me.fakeScroller.destroy();me.virtualScrollerElement&&me.virtualScrollerElement.remove();me.splitterElement&&me.splitterElement.remove();_get2(_getPrototypeOf2(SubGrid.prototype),"doDestroy",this).call(this);}/**
     * Creates a header for the SubGrid
     * @private
     */},{key:"initHeader",value:function initHeader(){var me=this,config=Object.assign({subGrid:me,columns:me.columns,hidden:me.hideHeaders,parent:me// Contained widgets need to know their parents
},me.headerConfig);me.header=new me.headerClass(config);}/**
     * Initializes elements for the SubGrid and its header and footer (if any)
     * @private
     */},{key:"initElements",value:function initElements(){var me=this;me.footerElement=DomHelper.down(me.grid.element,'.b-grid-footer-scroller-'+me.region);me.updateHasFlex();}//endregion
//region Template
},{key:"template",value:function template(){var grid=this.grid,region=this.region,isLastSubGrid=!grid||region===grid.regions[grid.regions.length-1],splitterCls="b-grid-splitter".concat(BrowserHelper.isIE11?' b-grid-splitter-transform':'');// The virtual scroller element in the template below will be moved to the virtual scroller container in grid on
// render. It is defined as part of the SubGrid template to get references for free
// Same applies to the splitter. Except for the last SubGrid, it does not have a splitter
return TemplateHelper.tpl(_templateObject23(),region,region,region,isLastSubGrid?'':TemplateHelper.tpl(_templateObject24(),region,splitterCls));}},{key:"rowTemplate",value:function rowTemplate(){var me=this;return TemplateHelper.tpl(_templateObject25(),me.columns.visibleColumns.map(me.cellTemplate,me));}},{key:"cellTemplate",value:function cellTemplate(column){return"<div class=\"b-grid-cell\" data-column=\"".concat(column.field,"\" data-column-id=\"").concat(column.id,"\"></div>");}//endregion
//region Render
},{key:"onPaint",value:function onPaint(){var me=this;if(!me.rendered){var grid=me.grid,splitter=grid&&grid.resolveSplitter(me);// Unit tests create naked SubGrids so we have to do this.
if(grid){// Move virtual scroller & splitter to grids container for them
grid.virtualScrollers.appendChild(me.virtualScrollerElement);me.splitterElement&&grid.element.appendChild(me.splitterElement);me.renderHeader(grid.headerContainer);me.renderFooter(grid.footerContainer);me.initElements();}me.syncSplitter(true);me.splitterWidth=splitter&&splitter.offsetWidth||1;me._collapsed&&me.collapse();me.rendered=true;}}},{key:"renderHeader",value:function renderHeader(appendToElement){if(this.header){this.header.render(appendToElement);}}},{key:"renderFooter",value:function renderFooter(appendToElement){if(this.footer){this.footer.render(appendToElement);// footerContainer starts hidden, since it is not used by default. make sure it is visible here
this.grid.footerContainer.classList.remove('b-hidden');}}},{key:"refreshHeader",value:function refreshHeader(){this.header.refreshContent();}},{key:"refreshFooter",value:function refreshFooter(){this.footer&&this.footer.refreshContent();}//endregion
//region Size & resize
/**
     * Sets cell widths. Cannot be done in template because of CSP
     * @private
     */},{key:"fixCellWidths",value:function fixCellWidths(rowElement){var visibleColumns=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!visibleColumns)visibleColumns=this.columns.bottomColumns.filter(function(col){return!col.hidden;});// fix cell widths, no longer allowed in template because of CSP
var cellElement=rowElement.firstElementChild,i=0;while(cellElement){var column=visibleColumns[i];if(column.minWidth){DomHelper.setLength(cellElement,'minWidth',column.minWidth);}// either flex or width, flex has precedence
if(column.flex){cellElement.style.flex=column.flex;cellElement.style.width='';}else if(column.width){// https://app.assembla.com/spaces/bryntum/tickets/8041
// Although header and footer elements must be sized
// using flex-basis to avoid the busting out problem,
// grid cells MUST be sized using width since rows are absolutely
// positioned and will not cause the busting out problem,
// and rows will not stretch to shrinkwrap the cells
// unless they are widthed with width.
cellElement.style.flex='';cellElement.style.width=DomHelper.setLength(column.width);// IE11 calculates flexbox container width based on min-width rather than actual width. When column
// has width defined greater than minWidth, row may have incorrect width
if(BrowserHelper.isIE11){cellElement.style.minWidth=cellElement.style.width;}}else{cellElement.style.flex=cellElement.style.width=cellElement.style.minWidth='';}cellElement=cellElement.nextElementSibling;i++;}}},{key:"fixWidths",/**
     * Sets header width and scroller width (if needed, depending on if using flex). Might also change the subgrids
     * width, if it uses a width calculated from its columns.
     * @private
     */value:function fixWidths(){var me=this,element=me.element,header=me.header,footer=me.footer;if(me.flex){header.flex=me.flex;if(footer){footer.flex=me.flex;}element.style.flex=me.flex;}else{// If width is calculated and no column is using flex, check if total width is less than width. If so,
// recalculate width and bail out of further processing (since setting width will trigger again)
if(me.hasCalculatedWidth&&!me.columns.some(function(col){return!col.hidden&&col.flex;})&&me.totalFixedWidth!==me.width){me.width=me.totalFixedWidth;// Setting width above clears the hasCalculatedWidth flag, but we want to keep it set to react correctly
// next time
me.hasCalculatedWidth=true;return;}var totalWidth=me.width;if(!totalWidth){totalWidth=0;// summarize column widths, needed as container width when not using flex widths and for correct
// overflow check in Edge
var _iteratorNormalCompletion43=true;var _didIteratorError43=false;var _iteratorError43=undefined;try{for(var _iterator43=me.columns[Symbol.iterator](),_step43;!(_iteratorNormalCompletion43=(_step43=_iterator43.next()).done);_iteratorNormalCompletion43=true){var col=_step43.value;if(!col.flex&&!col.hidden)totalWidth+=col.width;}}catch(err){_didIteratorError43=true;_iteratorError43=err;}finally{try{if(!_iteratorNormalCompletion43&&_iterator43.return!=null){_iterator43.return();}}finally{if(_didIteratorError43){throw _iteratorError43;}}}}// rows are absolutely positioned, meaning that their width won't affect container width
// hence we must set it, if not using flex
element.style.width="".concat(totalWidth,"px");header.width=totalWidth;if(footer){footer.width=totalWidth;}}me.syncScrollingPartners(false);}// Safari/Edge do not shrink cells the same way as chrome & ff does without having a width set on the row
},{key:"fixRowWidthsInSafariEdge",value:function fixRowWidthsInSafariEdge(){if(BrowserHelper.isSafari||BrowserHelper.isEdge){var me=this,region=me.region,header=me.header,minWidth=header.calculateMinWidthForSafari();// fix row widths for safari, it does not size flex cells correctly at small widths otherwise.
// there should be a css solution, but I have failed to find it
me.rowManager.forEach(function(row){// This function runs on resize and rendering a SubGrid triggers a resize. When adding a new SubGrid
// on the fly elements wont exists for it yet, so ignore...
var element=row.getElement(region);// it is worth noting that setting a width does not prevent the row from growing beyond that with
// when making view wider, it is used in flex calculation more like a min-width
if(element){element.style.width="".concat(minWidth,"px");}});header.headersElement.style.width="".concat(minWidth,"px");}}/**
     * Get/set SubGrid width, which also sets header and footer width (if available).
     * @property {Number}
     */},{key:"onInternalResize",/**
     * Called when grid changes size. SubGrid determines if it has changed size and triggers scroll (for virtual
     * rendering in cells to work when resizing etc.)
     * @private
     */value:function onInternalResize(element,newWidth,newHeight,oldWidth,oldHeight){var me=this,grid=me.grid;// Widget caches dimensions
_get2(_getPrototypeOf2(SubGrid.prototype),"onInternalResize",this).call(this,element,newWidth,newHeight,oldWidth,oldHeight);// Unit tests create naked SubGrids so we have to do this.
if(grid&&newWidth!==oldWidth){// trigger scroll, in case anything is done on scroll it needs to be done now also
grid.trigger('horizontalScroll',{subGrid:me,grid:grid,scrollLeft:me.scrollable.x});me.refreshFakeScroll();// Do not sync splitters while rendering, they need to be synced after render to appear at correct positions
if(grid.rendered){// One subgrid changing size might affect others, make sure splitters are at correct locations
grid.eachSubGrid(function(subGrid){return subGrid.syncSplitter();});}me.fixRowWidthsInSafariEdge();// This was originally triggered from within syncSplitters(). Moved it here since now syncing all splitters
me.trigger('afterInternalResize',me);}}},{key:"syncSplitter",value:function syncSplitter(){var initial=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var element=this.element,splitterElement=this.splitterElement;if(splitterElement){splitterElement.style.left="".concat(element.offsetLeft+(this.collapsed&&!initial?0:element.offsetWidth),"px");}}/**
     * Get the "viewport" for the SubGrid as a Rectangle
     * @property {Common.helper.util.Rectangle}
     * @readonly
     */},{key:"updateHasFlex",/**
     * Called when updating column widths to apply 'b-has-flex' which is used when fillLastColumn is configured.
     * @internal
     */value:function updateHasFlex(){var hasFlex=this.columns.visibleColumns.some(function(column){return column.flex;});DomHelper.toggleClasses(this.element,['b-has-flex'],hasFlex);}//endregion
//region Scroll
/**
     * Fixes widths of fake scrollers
     * @private
     */},{key:"refreshFakeScroll",value:function refreshFakeScroll(){var me=this,element=me.element,virtualScrollerElement=me.virtualScrollerElement,virtualScrollerWidth=me.virtualScrollerWidth,scroller=me.scrollable;// Use a fixed scroll width if grid is empty, to make it scrollable without rows
// https://app.assembla.com/spaces/bryntum/tickets/7184
scroller.scrollWidth=me.store.count?null:me.totalFixedWidth;virtualScrollerElement.style.width="".concat(element.offsetWidth,"px");//if (BrowserHelper.isEdge) {
// Needed for Edge, it does not size correctly
if(me.totalFixedWidth>scroller.clientWidth){element.classList.add('b-overflowing-horizontally');}else{element.classList.remove('b-overflowing-horizontally');}//}
// This is if *this* subGrid has horizontal overflow
// +1 is for Edge, it messes up otherwise
if(scroller.scrollWidth>scroller.clientWidth+(BrowserHelper.isEdge?1:0)){virtualScrollerWidth.style.width="".concat(scroller.scrollWidth,"px");me.header.element.classList.add('b-overflowing');me.footer&&me.footer.element.classList.add('b-overflowing');me.overflowingHorizontally=true;// If *any* SubGrids have horizontal overflow, the main grid
// has to show its virtual horizontal scollbar.
me.grid.virtualScrollers.classList.remove('b-hide-display');}else{virtualScrollerWidth.style.width=0;me.header.element.classList.remove('b-overflowing');me.footer&&me.footer.element.classList.remove('b-overflowing');me.overflowingHorizontally=false;}}/**
     * Init scroll syncing for header and footer (if available).
     * @private
     */},{key:"initScroll",value:function initScroll(){var me=this,scroller=me.scrollable,virtualScrollerElement=me.virtualScrollerElement;if(BrowserHelper.isFirefox){scroller.element.addEventListener('wheel',function(event){if(event.deltaX){scroller.x+=event.deltaX;event.preventDefault();}});}scroller.yScroller=me.grid.scrollable;// Add our Scroller to the controlling GridScroller
scroller.yScroller.addScroller(scroller);// Create a Scroller for the fake horizontal scrollbar so that it can partner
me.fakeScroller=new Scroller({element:virtualScrollerElement,overflowX:true});// Fire horizontalscroll when our xScroller reports a scroll
scroller.on('scroll',me.createOnFrame(me.syncScrollingPartners));scroller.on('scrollend',function(){me.scrolling=false;});scroller.addPartner(me.fakeScroller,'x');if(me.header){scroller.addPartner(me.header.scrollable,'x');}if(me.footer){scroller.addPartner(me.footer.scrollable,'x');}}},{key:"syncScrollingPartners",/**
     * This syncs the horizontal scroll position of the header and the footer with
     * the horizontal scroll position of the grid. Usually, this will be called automatically
     * when the grid scrolls. In some cases, such as a refresh caused by column changes
     * it will need to be called from elsewhere.
     * @internal
     */value:function syncScrollingPartners(){var addCls=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var subGrid=this,grid=subGrid.grid,scrollLeft=subGrid.scrollable.x;if(!subGrid.scrolling&&addCls){subGrid.scrolling=true;}grid.trigger('horizontalScroll',{subGrid:subGrid,grid:grid,scrollLeft:scrollLeft});}/**
     * Scrolls a column into view (if it is not already). Called by Grid#scrollColumnIntoView, use it instead to not
     * have to care about which SubGrid contains a column.
     * @param {Grid.column.Column|String|Number} column Column name (data) or column index or actual column object.
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the element when it is in view.
     * @returns {Promise} If the column exists, a promise which is resolved when the column header element has been scrolled into view.
     */},{key:"scrollColumnIntoView",value:function scrollColumnIntoView(column,options){var me=this,scroller=me.header.scrollable;// Allow column,column id,or column index to be passed
column=column instanceof Column?column:me.columns.get(column)||me.columns.getById(column)||me.columns.getAt(column);if(column){// Get the current column header element.
var columnHeaderElement=me.header.getHeader(column.id);if(columnHeaderElement){return scroller.scrollIntoView(Rectangle.from(columnHeaderElement,null,true),options);}}}//endregion
//region Rows
/**
     * Creates elements for the new rows when RowManager has determined that more rows are needed
     * @private
     */},{key:"onAddRow",value:function onAddRow(_ref152){var rows=_ref152.rows;var me=this,html=me.rowTemplate(),visibleColumns=me.columns.bottomColumns.filter(function(col){return!col.hidden;}),frag=document.createDocumentFragment();rows.forEach(function(row){var rowElement=DomHelper.createElementFromTemplate(html);frag.appendChild(rowElement);row.addElement(me.region,rowElement);// TODO: Stamp the correct width into the cells on creation
me.fixCellWidths(rowElement,visibleColumns);});me.fixRowWidthsInSafariEdge();// Put the row elements into the SubGrid en masse.
// If 2nd param is null, insertBefore appends.
me.element.insertBefore(frag,me.insertRowsBefore);}/**
     * Get all row elements for this SubGrid.
     * @returns {HTMLElement[]} Row elements
     * @readonly
     */},{key:"clearRows",/**
     * Removes all row elements from the subgrids body and empties cache
     * @private
     */value:function clearRows(){this.emptyCache();var all=this.element.querySelectorAll('.b-grid-row'),range=document.createRange();if(all.length){range.setStartBefore(all[0]);range.setEndAfter(all[all.length-1]);range.deleteContents();}}// only called when RowManager.rowScrollMode = 'dom', which is not intended to be used
},{key:"addNewRowElement",value:function addNewRowElement(){var rowElement=DomHelper.append(this.element,this.rowTemplate());this.fixCellWidths(rowElement);return rowElement;}},{key:"toggleTransitionClasses",//endregion
// region Expand/collapse
// All usages are commented, uncomment when this is resolved: https://app.assembla.com/spaces/bryntum/tickets/5472
value:function toggleTransitionClasses(){var doRemove=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,grid=me.grid,nextRegion=grid.getSubGrid(grid.getNextRegion(me.region)),splitter=grid.resolveSplitter(nextRegion);nextRegion.element.classList[doRemove?'remove':'add']('b-grid-subgrid-animate-collapse');nextRegion.header.element.classList[doRemove?'remove':'add']('b-grid-subgrid-animate-collapse');me.element.classList[doRemove?'remove':'add']('b-grid-subgrid-animate-collapse');me.header.element.classList[doRemove?'remove':'add']('b-grid-subgrid-animate-collapse');splitter.classList[doRemove?'remove':'add']('b-grid-splitter-animate');}/**
     * Get/set collapsed state
     * @property {Boolean}
     */},{key:"collapse",/**
     * Collapses subgrid. If collapsing subgrid is the only one expanded, next subgrid to the right (or previous) will
     * be expanded.
     *
     * @example
     * let locked = grid.getSubGrid('locked');
     * locked.collapse().then(() => {
     *     console.log(locked.collapsed); // Logs 'True'
     * });
     *
     * let normal = grid.getSubGrid('normal');
     * normal.collapse().then(() => {
     *     console.log(locked.collapsed); // Logs 'False'
     *     console.log(normal.collapsed); // Logs 'True'
     * });
     *
     * @async
     * @returns {Promise} A Promise which resolves when this SubGrid is fully collapsed.
     */value:function(){var _collapse2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee10(){var me,collapsedWidth,grid,nextRegion,expandedRegions;return regeneratorRuntime.wrap(function _callee10$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:me=this,collapsedWidth=me.collapsedStateWidth,grid=me.grid,nextRegion=grid.getSubGrid(grid.getNextRegion(me.region));// Count all expanded regions. Grid must have always have at least one expanded
expandedRegions=0;grid.eachSubGrid(function(subGrid){subGrid!==me&&!subGrid._collapsed&&++expandedRegions;});// Current region is the only one expanded, expand next region
if(!(expandedRegions===0)){_context11.next=6;break;}_context11.next=6;return nextRegion.expand();case 6:return _context11.abrupt("return",new Promise(function(resolve){if(!me._beforeCollapseState){me._beforeCollapseState={};var widthChanged=false;// If current width matches width expected after collapse (probably very narrow region plus wide collapse
// placeholder) resize event will not be fired. In such case we want to trigger callback immediately
if(me.width!==collapsedWidth){widthChanged=true;// Toggle transition classes here, we will actually change width below
// me.toggleTransitionClasses();
// afterinternalresize event is buffered, it will be fired only once after animation is finished
// and element size is final
me.on({afterinternalresize:function afterinternalresize(){// me.toggleTransitionClasses(true);
resolve(me);},thisObj:me,once:true});}// When trying to collapse region we need its partner to occupy free space. Considering multiple
// regions, several cases are possible:
// 1) Both left and right regions have fixed width
// 2) Left region has fixed width, right region is flexed
// 3) Left region is flexed, right region has fixed width
// 4) Both regions are flexed
//
// To collapse flexed region we need to remove flex style, remember it somehow and set fixed width.
// If another region is flexed, it will fill the space. If it has fixed width, we need to increase
// its width by collapsing region width. Same logic should be appliead to headers.
//
// Save region width first
me._beforeCollapseState.width=me.width;// Save left coordinate too, to restore splitter position
me._beforeCollapseState.splitterLeft=grid.resolveSplitter(me).offsetLeft;// Next region is not flexed, need to make it fill the space
if(nextRegion.element.style.flex===''){me._beforeCollapseState.nextRegionWidth=nextRegion.width;nextRegion.width+=me._beforeCollapseState.width;}// Current region is flexed, store style to restore on expand
if(me.element.style.flex!==''){me._beforeCollapseState.style=me.element.style.flex;// remove flex state to reduce width later
me.header.element.style.flex=me.element.style.flex='';}me.element.classList.add('b-grid-subgrid-collapsed');me._collapsed=true;if(!widthChanged){resolve(false);}else{// resize, will trigger afterinternalresize above
me.width=collapsedWidth;// Since grid width is animated, we should animate splitter position too . Coordinate is not precise
// but it will be fixed after collapse is done
grid.resolveSplitter(me).style.left=me.element.offsetLeft;}}}).then(function(value){if(value!==false){me.grid.trigger('subGridCollapse',me);}}));case 7:case"end":return _context11.stop();}}},_callee10,this);}));function collapse(){return _collapse2.apply(this,arguments);}return collapse;}()/**
     * Expands subgrid.
     *
     * @example
     * grid.getSubGrid('locked').expand().then(() => console.log('locked grid expanded'));
     *
     * @async
     * @returns {Promise} A Promise which resolves when this SubGrid is fully expanded.
     */},{key:"expand",value:function(){var _expand2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee11(){var me,grid,nextRegion;return regeneratorRuntime.wrap(function _callee11$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:me=this,grid=me.grid,nextRegion=grid.getSubGrid(grid.getNextRegion(me.region));return _context12.abrupt("return",new Promise(function(resolve){if(me._beforeCollapseState!=null){// If current width matches width expected after expand resize event will not be fired. In such case
// we want to trigger callback immediately
var widthChanged=false;// See similar clause in collapse method above
if(me.width!==me._beforeCollapseState.width){widthChanged=true;// Toggle transition classes here, we will actually change width below
// me.toggleTransitionClasses();
me.on({afterinternalresize:function afterinternalresize(){// me.toggleTransitionClasses(true);
// Delay the resolve to avoid "ResizeObserver loop limit exceeded" errors
// collapsing the only expanded region and it has to expand its nextRegion
// before it can collapse.
setTimeout(function(){return resolve(me);},10);},thisObj:me,once:true});}// previous region is not flexed, reduce its width as it was increased in collapse
if(nextRegion.element.style.flex===''){nextRegion.width=me._beforeCollapseState.nextRegionWidth;}me.element.classList.remove('b-grid-subgrid-collapsed');me._collapsed=false;// Always restore width, restoring flex wont trigger resize otherwise
me.width=me._beforeCollapseState.width;// This region used to be flex, lets restore it
if(me._beforeCollapseState.style){me.header.element.style.flex=me.element.style.flex=me._beforeCollapseState.style;// set width to be empty, we want styles to be consistent and clean
me.header.element.style.width=me.element.style.width='';me._width=null;}// Since grid width is animated, we should animate splitter position too . Coordinate is not precise
// but it will be fixed after collapse is done
grid.resolveSplitter(me).style.left="".concat(me._beforeCollapseState.splitterLeft,"px");me.element.classList.remove('b-grid-subgrid-collapsed');me._collapsed=false;if(!widthChanged){resolve(false);}delete me._beforeCollapseState;}}).then(function(value){if(value!==false){me.grid.trigger('subGridExpand',me);}}));case 2:case"end":return _context12.stop();}}},_callee11,this);}));function expand(){return _expand2.apply(this,arguments);}return expand;}()//endregion
},{key:"totalFixedWidth",get:function get(){return this.columns.totalFixedWidth;}},{key:"width",set:function set(width){var me=this;// Width explicitly set, remember that
me.hasCalculatedWidth=false;if(me.header)me.header.width=width;if(me.footer)me.footer.width=width;_set(_getPrototypeOf2(SubGrid.prototype),"width",width,this,true);// Can't wait until the  throttled resize occurs - it looks bad.
if(!me.isConfiguring){me.onElementResize();}},get:function get(){return _get2(_getPrototypeOf2(SubGrid.prototype),"width",this);}/**
     * Get/set SubGrid flex, which also sets header and footer flex (if available).
     * @property {Number|String}
     */},{key:"flex",set:function set(flex){var me=this;// Width explicitly set, remember that
me.hasCalculatedWidth=false;if(me.header)me.header.flex=flex;if(me.footer)me.footer.flex=flex;_set(_getPrototypeOf2(SubGrid.prototype),"flex",flex,this,true);// Can't wait until the  throttled resize occurs - it looks bad.
if(!me.isConfiguring){me.onElementResize();}},get:function get(){return _get2(_getPrototypeOf2(SubGrid.prototype),"flex",this);}},{key:"viewRectangle",get:function get(){var me=this;return new Rectangle(me.scrollable.x,me.scrollable.y,me._width,me.rowManager.viewHeight);}},{key:"scrolling",set:function set(scrolling){this._scrolling=scrolling;this.grid.bodyContainer.classList[scrolling?'add':'remove']('b-scrolling');},get:function get(){return this._scrolling;}},{key:"rowElements",get:function get(){return this.fromCache('.b-grid-row',true);}},{key:"emptyText",get:function get(){return this._emptyText;},set:function set(text){this._emptyText=text;this.element.dataset.emptyText=text;}},{key:"collapsed",get:function get(){return this._collapsed;},set:function set(collapsed){if(this.isConfiguring){this._collapsed=collapsed;}else{if(collapsed){this.collapse();}else{this.expand();}}}}],[{key:"defaultConfig",//region Config
/**
     * Region (name) for this SubGrid
     * @config {String} region
     */ /**
     * Column store, a store containing the columns for this SubGrid
     * @config {Grid.data.ColumnStore} columns
     */get:function get(){return{insertRowsBefore:null,appendTo:null,hideHeaders:null,monitorResize:true,// Width of the subgrid in the collapsed state
collapsedStateWidth:5,// Default width of the splitter.
splitterWidth:1,/**
             * Set `true` to start subgrid collapsed. To operate collapsed state on subgrid use
             * {@link #function-collapse}/{@link #function-expand} methods.
             * @config {Boolean}
             * @default false
             */collapsed:null,scrollable:{// Each SubGrid only handles scrolling in the X axis.
// The owning Grid handles the Y axis.
overflowX:true},scrollerClass:SubGridScroller,// Will be set to true by GridSubGrids if it calculates the subgrids width based on its columns.
// Used to determine if hiding a column should affect subgrids width
hasCalculatedWidth:null,/**
             * Set `true` to disable moving columns into or out of this SubGrid.
             * @config {Boolean}
             * @default false
             * @private
             */sealedColumns:null,emptyText:null};}}]);return SubGrid;}(Widget);exports.SubGrid=SubGrid;SubGrid._$name='SubGrid';/**
 * @module Grid/row/Row
 */ /**
 * Represents a single rendered row in the grid. Consists of one row element for each SubGrid in use. The grid only
 * creates as many rows as needed to fill the current viewport (and a buffer). As the grid scrolls
 * the rows are repositioned and reused, there is not a one to one relation between rows and records.
 *
 * For normal use cases you should not have to use this class directly. Rely on using renderers instead.
 * @extends Common/Base
 */var Row=/*#__PURE__*/function(_Delayable12){_inherits2(Row,_Delayable12);function Row(){_classCallCheck2(this,Row);return _possibleConstructorReturn2(this,_getPrototypeOf2(Row).apply(this,arguments));}_createClass2(Row,[{key:"construct",//region Init
/**
     * Constructs a Row setting its index.
     * @param {Object} config A configuration object which must contain the following two properties:
     * @param {Grid.view.Grid} config.grid The owning Grid.
     * @param {Grid.row.RowManager} config.rowManager The owning RowManager.
     * @param {Number} index The index of the row within the RowManager's cache.
     * @function constructor
     */value:function construct(config){// Set up defaults and properties
Object.assign(this,{_elements:{},_elementsArray:[],_cells:{},_allCells:[],_regions:[],lastHeight:0,lastTop:-1,_dataIndex:0,_top:0,_height:0,_id:null,forceInnerHTML:false,isGroupFooter:false});Object.assign(this,config);_get2(_getPrototypeOf2(Row.prototype),"construct",this).call(this);}//endregion
//region Data getters/setters
/**
     * Get index in RowManagers rows array
     * @property {Number}
     * @readonly
     */},{key:"addElement",//endregion
//region Row elements
/**
     * Add a row element for specified region.
     * @param {String} region Region to add element for
     * @param {HTMLElement} element Element
     * @private
     */value:function addElement(region,element){var me=this;var cellElement=element.firstElementChild;me._elements[region]=element;me._elementsArray.push(element);me._regions.push(region);DomDataStore.assign(element,{index:me.index});me._cells[region]=[];while(cellElement){me._cells[region].push(cellElement);me._allCells.push(cellElement);DomDataStore.set(cellElement,{column:cellElement.dataset.column,// TODO: dataset is slow, read from columnstore using index instead
columnId:cellElement.dataset.columnId,rowElement:cellElement.parentNode,row:me});cellElement=cellElement.nextElementSibling;}// making css selectors simpler, dataset has bad performance but it is only set once and never read
element.dataset.index=me.index;}/**
     * Get the element for the specified region.
     * @param {String} region
     * @returns {HTMLElement}
     */},{key:"getElement",value:function getElement(region){return this._elements[region];}/**
     * Execute supplied function for each regions element.
     * @param {Function} fn
     */},{key:"eachElement",value:function eachElement(fn){for(var i=0;i<this._elementsArray.length;i++){fn(this._elementsArray[i],i);}//this._elementsArray.forEach(fn);
}/**
     * Execute supplied function for each cell.
     * @param {Function} fn
     */},{key:"eachCell",value:function eachCell(fn){this._allCells.forEach(fn);}/**
     * Row elements (one for each region)
     * @type {HTMLElement[]}
     * @readonly
     */},{key:"getCells",/**
     * Get cell elements for specified region.
     * @param {String} region Region to get elements for
     * @returns {HTMLElement[]} Array of cell elements
     */value:function getCells(region){return this._cells[region];}/**
     * Get the cell element for the specified column.
     * @param {String|Number} columnId Column id
     * @returns {HTMLElement} Cell element
     */},{key:"getCell",value:function getCell(columnId){/*let found = null;
         // look in all regions
         this._regions.forEach(region => {
         if (!found) found = this.getCells(region).find(cell => DomDataStore.get(cell).column === column);
         });*/return this._allCells.find(function(cell){var cellData=DomDataStore.get(cell);return cellData.columnId===columnId||cellData.column===columnId;});}},{key:"removeElements",value:function removeElements(){var onlyRelease=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;if(!onlyRelease){me._elementsArray.forEach(function(element){return element.remove();});}me._elements={};me._cells={};me._elementsArray.length=me._regions.length=me._allCells.length=me.lastHeight=me.height=0;me.lastTop=-1;}//endregion
//region Height
/**
     * Get/set row height
     * @property {Number}
     */},{key:"setHeightIfBigger",/**
     * Sets row height, but only if the height is bigger than currently set height (used when rendering rows to
     * match height for highest region element)
     * @param height Height to set
     * @private
     */value:function setHeightIfBigger(height){if(height>this.height)this.height=height;}/**
     * Sync elements height to rows height
     * @private
     */},{key:"updateElementsHeight",value:function updateElementsHeight(){var me=this;// prevent unnecessary style updates
if(me.lastHeight!==me.height){var elements=me._elementsArray;for(var i=0;i<elements.length;i++){elements[i].style.height="".concat(me.offsetHeight,"px");}me.lastHeight=me.height;}}//endregion
//region CSS
/**
     * Add css classes to each element.
     * @param {...String} classes
     */},{key:"addCls",value:function addCls(){for(var _len57=arguments.length,classes=new Array(_len57),_key56=0;_key56<_len57;_key56++){classes[_key56]=arguments[_key56];}this.eachElement(function(element){return DomHelper.addClasses(element,classes);});}/**
     * Remove css classes from each element.
     * @param {...String} classes
     */},{key:"removeCls",value:function removeCls(){for(var _len58=arguments.length,classes=new Array(_len58),_key57=0;_key57<_len58;_key57++){classes[_key57]=arguments[_key57];}this.eachElement(function(element){return DomHelper.removeClasses(element,classes);});}//endregion
//region Position
/**
     * Is this the very first row?
     * @property {Boolean}
     * @readonly
     */},{key:"setTop",/**
     * Sets top coordinate, translating elements position.
     * @param top Top coordinate
     * @internal
     */value:function setTop(top){if(this._top!==top){this._top=top;this.translateElements();}}/**
     * Sets bottom coordinate, translating elements position.
     * @param bottom Bottom coordinate
     * @private
     */},{key:"setBottom",value:function setBottom(bottom){this.setTop(bottom-this.offsetHeight);}/**
     * Sets css transform to position elements at correct top position (translateY)
     * @private
     */},{key:"translateElements",value:function translateElements(){var me=this,positionMode=me.grid.positionMode;if(me.lastTop!==me.top){var elements=me._elementsArray;for(var i=0;i<elements.length;i++){var style=elements[i].style;if(positionMode==='translate'){style.transform="translate(0,".concat(me.top,"px)");}else if(positionMode==='translate3d'){style.transform="translate3d(0,".concat(me.top,"px,0)");}else if(positionMode==='position'){style.top="".concat(me.top,"px");}}me.rowManager.trigger('translateRow',{row:me});me.lastTop=me.top;}}/**
     * Moves all row elements up or down and updates model.
     * @param {Number} offsetTop Pixels to offset the elements
     * @private
     */},{key:"offset",value:function offset(offsetTop){var newTop=this._top+offsetTop;// Not allowed to go below zero (won't be reachable on scroll in that case)
if(newTop<0){offsetTop-=newTop;newTop=0;}this.setTop(newTop);return offsetTop;}//endregion
//region Render
/**
     * Renders a record into this rows elements (trigger event that subgrids catch to do the actual rendering).
     * @param {Common.data.Model} record
     * @private
     */},{key:"render",value:function render(recordIndex,record){var updatingSingleRow=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var batch=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,cells=me.cells,grid=me.grid,oldId=me._id,elements=me._elementsArray,rowElData=DomDataStore.get(elements[0]),rowManager=me.rowManager,rowHeight=rowManager._rowHeight,oldHeight=me.height,defaultRowCls=updatingSingleRow&&grid.transitionDuration?"".concat(me.cls," b-grid-row-updating"):me.cls;var i=0,rowElement,cell,size;// no record specified, try looking up in store (false indicates empty row, don't do lookup
if(!record&&record!==false){record=grid.store.getById(rowElData.id);recordIndex=grid.store.indexOf(record);}var selected=record&&grid.isSelected(record.id);// used by GroupSummary feature to clear row before
rowManager.trigger('beforeRenderRow',{row:me,record:record,oldId:oldId});for(i;i<elements.length;i++){rowElement=elements[i];// Clean classList
rowElement.className=defaultRowCls;// Apply cls from data directly to row
// TODO: should be configurable on grid
if(selected){rowElement.classList.add('b-selected');}// no record & data says it is displayed, "undisplay" it
if(!record){rowElData.displayed=false;rowElement.classList.add('b-grid-row-not-displayed');}if(record){if(record.cls)record.cls.split(' ').forEach(function(cls){return rowElement.classList.add(cls);});// has record and data says it is not displayed, flag as displayed
//if (rowElData.displayed === false) rowEl.classList.remove('b-grid-row-not-displayed');
rowElData.displayed=true;}}if(updatingSingleRow&&grid.transitionDuration){me.setTimeout(function(){// We should iterate all elements, in case we have regions in the grid
elements.forEach(function(element){element.classList.remove('b-grid-row-updating');});},grid.transitionDuration);}// Will be set from renderers
me.height=0;if(record){me.id=record.id;me.dataIndex=recordIndex;}else{// More rows then records, render it empty for now...
me.id=null;me.dataIndex=null;}for(i=0;i<cells.length;i++){cell=cells[i];size=me.renderCell(cell,record,i,updatingSingleRow);// we want to make row in all parts as high as the highest cell
me.setHeightIfBigger(size&&size.height||rowHeight);}// Height gets set during render, reflect on elements
me.updateElementsHeight();// Rerendering a row might change its height, which forces translation of all following rows
if(updatingSingleRow){if(oldHeight!==me.height){rowManager.translateFromRow(me,batch);}rowManager.trigger('updateRow',{row:me,record:record,oldId:oldId});}// TODO: Make direct function call if no more features than Stripe needs this
rowManager.trigger('renderRow',{row:me,record:record,oldId:oldId});me.forceInnerHTML=false;}/**
     * Renders a single cell, calling features to allow them to hook.
     * @param cellElement Cell element to render
     * @param record Record, fetched from store if undefined
     * @param index
     * @param updatingSingleRow
     * @private
     */},{key:"renderCell",value:function renderCell(cellElement,record,index){var _newCellClass;var updatingSingleRow=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var me=this,cellElementData=DomDataStore.get(cellElement),col=me.grid.columns.getById(cellElementData.columnId),rowElement=cellElementData.rowElement,rowElementData=DomDataStore.get(rowElement),internalCellCls=col.internalCellCls,cellCls=col.cellCls,align=col.align,renderer=col.renderer,defaultRenderer=col.defaultRenderer,columnId=col.id,cellContext={columnId:columnId,id:rowElementData.id},useRenderer=renderer||defaultRenderer;if(!record){// Clear out row without record
// Edge case, only happens if groups/tree is collapsed leading to fewer records than row elements
if(rowElementData.id===null){// setting to ' ' (space) makes it not remove firstChild, thus not breaking
// when doing real render the next time
// NOTE: have opted to not clear cell. might be confusing in DOM but simplifies for cells reusing
// elements internally. Another option would be to have a derenderer per column which is called
// cell.innerHTML = ' ';
cellElement.className='b-grid-cell';return;}record=me.grid.store.getById(rowElementData.id);if(!record)return;}var newCellClass=(_newCellClass={'b-grid-cell':1},_defineProperty(_newCellClass,internalCellCls,internalCellCls),_defineProperty(_newCellClass,cellCls,cellCls),_defineProperty(_newCellClass,'b-cell-dirty',record.isFieldModified(col.field)),_defineProperty(_newCellClass,"b-grid-cell-align-".concat(align),align),_defineProperty(_newCellClass,'b-selected',me.grid.isSelected(cellContext)),_defineProperty(_newCellClass,'b-focused',me.grid.isFocused(cellContext)),_newCellClass);DomHelper.syncClassList(cellElement,newCellClass);var// TODO: record.rowHeight should be configurable (which field)
size={height:record.get('rowHeight')||0},cellContent=col.getRawValue(record),shouldSetContent=true,rendererData={cellElement:cellElement,rowElement:rowElement,value:cellContent,record:record,column:col,size:size,grid:me.grid,row:cellElementData.row,updatingSingleRow:updatingSingleRow};// Call renderer or set innerHTML directly if none
// if renderer returns a value, set it in innerHTML below. render is also free to do it itself
if(useRenderer){cellContent=useRenderer.call(col,rendererData);if(cellContent===undefined)shouldSetContent=false;}// Listeners might need to know what string went into the DOM
// Maintainer: the == null test below ensures that values of both null and undefined
// result in an empty cell.
var text=rendererData.cellContent=cellContent==null?'':String(cellContent);if(shouldSetContent){// row might be flagged by GroupSummary to require full "redraw"
if(me.forceInnerHTML){cellElement.innerHTML=text;}// display cell contents as text or use actual html?
// (disableHtmlEncode set by features that decorate cell contents)
else if(col.htmlEncode&&!col.disableHtmlEncode){if(BrowserHelper.isLinux){// linux does not have firstChild.data
cellElement.innerText=text;}else{// setting firstChild.data is faster than innerText (and innerHTML),
// but in some cases the inner node is lost and needs to be recreated
var firstChild=cellElement.firstChild;if(!firstChild){cellElement.innerText=text;}else{firstChild.data=text;}}}else{var hasStringContent=typeof cellContent==='string';if(col.autoSyncHtml&&(!hasStringContent||cellElement.childElementCount)){// String content in html column is handled as a html template string
if(hasStringContent){// update cell with only changed attributes etc.
DomHelper.sync(text,cellElement.firstElementChild);}// Other content is considered to be a DomHelper config object
else{DomHelper.sync({elementConfig:cellContent,targetElement:cellElement});}}else{cellElement.innerHTML=text;}}}// Allow others to affect rendering
me.rowManager.trigger('renderCell',rendererData);return size;}//endregion
},{key:"index",get:function get(){return this._index;},set:function set(index){this._index=index;}/**
     * Get/set this rows current index in grids store
     * @property {Number}
     */},{key:"dataIndex",get:function get(){return this._dataIndex;},set:function set(dataIndex){if(this._dataIndex!==dataIndex){var elements=this._elementsArray;this._dataIndex=dataIndex;for(var i=0;i<elements.length;i++){elements[i].dataset.index=dataIndex;}}}/**
     * Get/set id for currently rendered record
     * @property {String|Number}
     */},{key:"id",get:function get(){return this._id;},set:function set(id){var me=this,idObj={id:id},idMap=me.rowManager.idMap,elements=me._elementsArray,cells=me._allCells;if(me._id!=id||idMap[id]!==me){if(idMap[me._id]===me)delete idMap[me._id];idMap[id]=me;me._id=id;for(var i=0;i<elements.length;i++){DomDataStore.assign(elements[i],idObj);}for(var _i20=0;_i20<cells.length;_i20++){DomDataStore.assign(cells[_i20],idObj);}}}},{key:"elements",get:function get(){return this._elements;}//endregion
//region Cell elements
/**
     * Row cell elements
     * @returns {HTMLElement[]}
     * @readonly
     */},{key:"cells",get:function get(){return this._allCells;}},{key:"height",get:function get(){return this._height;},set:function set(height){this._height=height;}/**
     * Get row height including border
     * @property {Number}
     */},{key:"offsetHeight",get:function get(){// me.height is specified height, add border height to it to get cells height to match specified rowHeight
// border height is measured in Grid#get rowManager
return this.height+this.grid._rowBorderHeight;}},{key:"isFirst",get:function get(){return this.dataIndex===0;}/**
     * Row top coordinate
     * @property {Number}
     * @readonly
     */},{key:"top",get:function get(){return this._top;}/**
     * Row bottom coordinate
     * @property {Number}
     * @readonly
     */},{key:"bottom",get:function get(){return this._top+this._height+this.grid._rowBorderHeight;}}],[{key:"defaultConfig",get:function get(){return{cls:'b-grid-row'};}}]);return Row;}(Delayable(Base));Row._$name='Row';//TODO: Handle vertical resize, add/remove row elements?
/**
 * @module Grid/row/RowManager
 * @private
 */ /**
 * Virtual representation of the grid, using {@link Grid.row.Row} to represent rows. Plugs into {@link Grid.view.Grid}
 * and exposes the following functions on grid itself:
 * * {@link #function-getRecordCoords()}
 * * {@link #function-getRowById()}
 * * {@link #function-getRow()}
 * * {@link #function-getRowFor()}
 * * {@link #function-getRowFromElement()}
 *
 * @example
 * let row = grid.getRowById(1);
 * @private
 */var RowManager=/*#__PURE__*/function(_InstancePlugin13){_inherits2(RowManager,_InstancePlugin13);function RowManager(){_classCallCheck2(this,RowManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(RowManager).apply(this,arguments));}_createClass2(RowManager,[{key:"construct",//endregion
//region Init
value:function construct(config){config.grid._rowManager=this;this.scrollTargetRecordId=null;_get2(_getPrototypeOf2(RowManager.prototype),"construct",this).call(this,config.grid,config);}/**
     * Initializes the RowManager with Rows to fit specified height.
     * @param {Number} height
     * @private
     * @category Init
     */},{key:"initWithHeight",value:function initWithHeight(height){var isRendering=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this;// no valid height, make room for all rows
if(me.autoHeight){height=me.store.allCount*me.rowOffsetHeight;}me.viewHeight=height;me.calculateRowCount(isRendering);return height;}/**
     * Releases all elements (not from dom), calculates how many are needed, creates those and renders
     */},{key:"reinitialize",value:function reinitialize(){var returnToTop=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,top=me.topRow?me.topRow.top:0;me._rows.length=1;me.scrollTargetRecordId=null;if(returnToTop){me.topIndex=0;me.lastScrollTop=0;}// any elements currently used for rows should be released.
// actual removal of elements is done in SubGrid#clearRows
me.releaseElements();// Calculate and correct the amount of rows needed (without triggering render)
me.calculateRowCount(false,true,true);if(!returnToTop&&me.topRow){// since all rows were removed and new ones added, we need to restore dataIndex and position for rendering
// to happen at correct pos
me.topRow.dataIndex=me.topIndex;me.topRow.setTop(top);}// Need to estimate height in case we have Grid using autoHeight
me.estimateTotalHeight();me.renderFromRow(me.topRow);}//endregion
//region Rows
/**
     * Add or remove rows to fit row count
     * @private
     * @category Rows
     */},{key:"matchRowCount",value:function matchRowCount(){var skipRender=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,rows=me._rows,numRows=rows.length,delta=numRows-me.rowCount,grid=me.grid;if(delta){if(delta<0){var newRows=[];// add rows
for(var index=numRows,dataIndex=numRows?rows[numRows-1].dataIndex+1:0;index<me.rowCount;index++,dataIndex++){newRows.push(new Row({rowManager:me,grid:grid,index:index,dataIndex:dataIndex}));}rows.push.apply(rows,newRows);// and elements (by triggering event used by SubGrid to add elements)
me.trigger('addRows',{rows:newRows});if(!skipRender){// render
me.renderFromRow(rows[Math.max(0,numRows-1)]);}}else{// remove rows from bottom
var removedRows=rows.splice(numRows-delta,delta);// and linked elements
removedRows.forEach(function(row){return row.eachElement(function(element){return element.remove();});});// trigger event in case some feature needs to cleanup when removing (widget column might be interested)
me.trigger('removeRows',{rows:removedRows});// no need to rerender or such when removing from bottom. all is good :)
}}}/**
     * Calculates how many rows fit in the available height (view height)
     * @private
     * @category Rows
     */},{key:"calculateRowCount",value:function calculateRowCount(){var skipMatchRowCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var allowRowCountShrink=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var skipRender=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// TODO: replace prependRowBuffer, appendXX with bufferSize
var me=this,store=me.store,visibleRowCount=Math.ceil(me.viewHeight/me.rowOffsetHeight),// Want whole rows
maxRenderRowCount=visibleRowCount+me.prependRowBuffer+me.appendRowBuffer;if(!me.grid.columns.count){me.rowCount=0;return 0;}// when for example jumping we do not want to remove excess rows,
// since we know they are needed at other scroll locations
if(maxRenderRowCount<me.rowCount&&!allowRowCountShrink)return me.rowCount;me.visibleRowCount=visibleRowCount;me.rowCount=Math.min(store.count,maxRenderRowCount);// No need for more rows than data
if(me.rowScrollMode==='all'){me.rowCount=store.allCount;}// If the row count doesn't match the calculated, ensure it matches,
if(!skipMatchRowCount){if(me._rows&&me.rowCount!==me._rows.length){me.matchRowCount(skipRender);}else if(!me.rowCount){me.trigger('changeTotalHeight',{totalHeight:me.totalHeight});}me.grid.bodyContainer.classList[me.rowCount||store.isLoading?'remove':'add']('b-grid-empty');}return me.rowCount;}},{key:"releaseElements",value:function releaseElements(){this.forEach(function(row){return row.removeElements(true);});this._rows.length=0;this.idMap={};}//endregion
//region Rows - Getters
},{key:"getRow",/**
     * Get the Row at specified index. Returns `undefined` if the row index is not rendered.
     * @param {Number} index
     * @returns {Grid.row.Row}
     * @category Rows
     */value:function getRow(index){return this.rowCount&&this.rows[index-this.topIndex];}/**
     * Get Row for specified record id
     * @param {Common.data.Model|String|Number} recordOrId Record id (or a record)
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     */},{key:"getRowById",value:function getRowById(recordOrId){if(!(typeof recordOrId==='string'||typeof recordOrId==='number')){recordOrId=recordOrId.id;}// Don't use ===, want to match 1 == '1' since id is stored on rowElement in dataset (html attribute, always string)
return this.idMap[recordOrId];// || this.rows.find(row => row.id == recordOrId);
}/**
     * Get a Row from an HTMLElement
     * @param {HTMLElement} element
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     */},{key:"getRowFromElement",value:function getRowFromElement(element){element=element.closest('.b-grid-row');return element&&this.getRow(element.dataset.index);}/**
     * Get the row at the specified Y coordinate, which is by default viewport-based.
     * @param {Number} y The `Y` coordinate to find the Row for.
     * @param {Boolean} [local=false] Pass `true` if the `Y` coordinate is local to the SubGrid's element.
     * @returns {Grid.row.Row} Found Row or null if no row is rendered at that point.
     */},{key:"getRowAt",value:function getRowAt(y){var local=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// Make it local.
if(!local){y-=Rectangle.from(this.grid.bodyContainer,null,true).top;// Adjust for scrolling
y+=this.grid.scrollable.y;}y=roundPx(y);return this.rows.find(function(r){return y>=r.top&&y<r.bottom;});}/**
     * Get a Row for either a record, a record id or an HTMLElement
     * @param {HTMLElement|Common.data.Model|String|Number} recordOrId Record or record id or HTMLElement
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     */},{key:"getRowFor",value:function getRowFor(recordOrId){if(recordOrId instanceof HTMLElement)return this.getRowFromElement(recordOrId);return this.getRowById(recordOrId);}/**
     * Gets the Row following the specified Row (by index or object). Wraps around the end.
     * @param {Number|Grid.row.Row} indexOrRow index or Row
     * @returns {Grid.row.Row}
     * @category Rows
     */},{key:"getNextRow",value:function getNextRow(indexOrRow){var me=this,index=typeof indexOrRow==='number'?indexOrRow:indexOrRow.index;return me.getRow((index+1)%me.rowCount);}/**
     * Get the Row that is currently displayed at top.
     * @property {Grid.row.Row}
     * @readonly
     * @category Rows
     */},{key:"offsetRows",/**
     * Calls offset() for each Row passing along offset parameter
     * @param {Number} offset Pixels to translate Row elements.
     * @private
     * @category Rows
     */value:function offsetRows(offset){if(offset!==0){var rows=this.rows,length=rows.length;for(var i=0;i<length;i++){rows[i].offset(offset);}}}//endregion
//region Row height
// TODO: should support setting rowHeight in em and then convert internally to pixels. 1em = font-size. Not needed for 1.0
/**
     * Set a fixed row height (can still be overridden by renderers) or get configured row height. Setting refreshes all rows
     * @category Rows
     */},{key:"getRecordCoords",//endregion
//region Calculations
/**
     * Returns top and bottom for rendered row or estimated coordinates for unrendered.
     * @param {Common.data.Model|string|Number} recordOrId Record or record id
     * @param {Boolean} [local] Pass true to get relative record coordinates
     * @returns {Common.helper.util.Rectangle} Record bounds with format { x, y, width, height, bottom, right }
     * @category Calculations
     */value:function getRecordCoords(recordOrId){var local=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,//id  = ['string', 'number'].includes(typeof recordOrId) ? recordOrId : recordOrId.id,
id=typeof recordOrId==='string'||typeof recordOrId==='number'?recordOrId:recordOrId.id,row=me.getRowById(recordOrId);var scrollingViewport=me.client._bodyRectangle;// _bodyRectangle is not updated on page/containing element scroll etc. Need to make sure it is correct in case
// that has happend. This if-statement should be removed when fixing
// https://app.assembla.com/spaces/bryntum/tickets/6587-cached-_bodyrectangle-should-be-updated-on--quot-external-quot--scroll/details
if(!local){scrollingViewport=me.client._bodyRectangle=Rectangle.client(me.client.bodyContainer);}// Rendered? Then we know position for certain
if(row){return new Rectangle(scrollingViewport.x,local?Math.round(row.top):Math.round(row.top+scrollingViewport.y-me.client.scrollable.y),scrollingViewport.width,row.offsetHeight);}return me.getRecordCoordsByIndex(me.store.indexOf(id),local);}/**
     * Returns estimated top and bottom coordinates for specified row.
     * @param {Number} recordIndex Record index
     * @returns {Common.helper.util.Rectangle} Estimated record bounds with format { x, y, width, height, bottom, right }
     * @category Calculations
     */},{key:"getRecordCoordsByIndex",value:function getRecordCoordsByIndex(recordIndex){var local=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,scrollingViewport=me.client._bodyRectangle,// Not using rowOffsetHeight since it floors the value and that rounding might give big errors far down
height=me.averageRowHeight||me._rowHeight+me.grid._rowBorderHeight,currentTopIndex=me.topRow.dataIndex,currentBottomIndex=me.bottomRow.dataIndex,// Instead of estimating top from the very top, use closest known coordinate. Makes sure a coordinate is not
// estimated on wrong side of rendered rows, needed to correctly draw dependencies where one event is located
// on a unrendered row
calculateFrom=// bottomRow is closest, calculate from it
recordIndex>currentBottomIndex?{index:recordIndex-currentBottomIndex-1,y:me.bottomRow.bottom,from:'bottomRow'//  closer to topRow than 0, use topRow
}:recordIndex>currentTopIndex/2?{index:recordIndex-currentTopIndex,y:me.topRow.top,from:'topRow'// closer to the very top, use it
}:{index:recordIndex,y:0,from:'top'},top=Math.floor(calculateFrom.y+calculateFrom.index*height),//top               = Math.floor(recordIndex * height),
result=new Rectangle(scrollingViewport.x,local?top:top+scrollingViewport.y-me.client.scrollable.y,scrollingViewport.width,height);// Signal that it's not based on an element, so is only approximate.
// Grid.scrollRowIntoView will have to go round again using the block options below to ensure it's correct.
result.virtual=true;// When the block becomes visible, scroll it to the logical position using the scrollIntoView's block
// option. If it's above, use block: 'start', if below, use block: 'end'.
result.block=result.bottom<scrollingViewport.y?'start':result.y>scrollingViewport.bottom?'end':'nearest';return result;}/**
     * Total estimated grid height (used for scroller)
     * @property {Number}
     * @readonly
     * @category Calculations
     */},{key:"forEach",//endregion
//region Iteration etc.
/**
     * Calls a function for each Row
     * @param {Function} fn Function that will be called with Row as first parameter
     * @category Iteration
     */value:function forEach(fn){this.rows.forEach(fn);}/**
     * Iterator that allows you to do for (let row of rowManager)
     * @category Iteration
     */},{key:Symbol.iterator,value:function value(){return this.rows[Symbol.iterator]();}//endregion
//region Scrolling & rendering
/**
     * Renders from the top of the grid, also resetting scroll to top. Used for example when collapsing all groups.
     * @category Scrolling & rendering
     */},{key:"returnToTop",value:function returnToTop(){var me=this;me.topIndex=0;me.lastScrollTop=0;me.topRow.dataIndex=0;// Force the top row to the top of the scroll range
me.topRow.setTop(0);me.refresh();// Rows rendered from top, make sure grid is scrolled to top also
me.grid.scrollable.y=0;}/**
     * Renders from specified records row and down (used for example when collapsing a group, does not affect rows above).
     * @param {Common.data.Model} record Record of first row to render
     * @category Scrolling & rendering
     */},{key:"renderFromRecord",value:function renderFromRecord(record){var row=this.getRowById(record.id);if(row){this.renderFromRow(row);}}/**
     * Renders from specified row and down (used for example when collapsing a group, does not affect rows above).
     * @param {Grid.row.Row} fromRow First row to render
     * @category Scrolling & rendering
     */},{key:"renderFromRow",value:function renderFromRow(){var fromRow=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var me=this,_rows=me._rows,store=me.store,storeCount=store.count;// Calculate row count, adding rows if needed, but do not rerender - we are going to do that below.
// Bail out if no rows. Allow removing rows if we have more than store have rows
if(me.calculateRowCount(false,storeCount<_rows.length,true)===0){return;}var// render from this row
fromRowIndex=fromRow?_rows.indexOf(fromRow):0,// starting either from its specified dataIndex or from its index (happens on first render, no dataIndex yet)
dataIndex=fromRow?fromRow.dataIndex:_rows[0].dataIndex,// amount of records after this one in store
recordsAfter=storeCount-dataIndex-1,// render to this row, either the last row or the row which will hold the last record available
toRowIndex=Math.min(_rows.length-1,fromRowIndex+recordsAfter),// amount of rows which wont be rendered below last record (if we have fewer records than topRow + row count)
leftOverCount=_rows.length-toRowIndex-1,// Start with top correctly just below the previous row's bottom
top=fromRowIndex>0?_rows[fromRowIndex-1].bottom:_rows[fromRowIndex].top,row;// _rows array is ordered in display order, just iterate to the end
for(var i=fromRowIndex;i<=toRowIndex;i++){row=_rows[i];// Needed in scheduler when translating events, happens before render
row.dataIndex=dataIndex;row.setTop(top);row.render(dataIndex,store.getAt(dataIndex++),false);top+=row.offsetHeight;}// if number for records to display has decreased, for example by collapsing a node, we might get unused rows
// below bottom. move those to top to not have unused rows laying around
while(leftOverCount-->0){me.displayRecordAtTop();}if(me.averageRowHeight){// Adjust average, subtracting the rendered block's estimated height and then adding the actual height
me.averageRowHeight=(me.averageRowHeight*(storeCount-me.rowCount)+(top-me.topRow.top))/storeCount;}else{me.averageRowHeight=(top-me.topRow.top)/me.rowCount;}// Reestimate total height
me.estimateTotalHeight();}/**
     * Renders the passed array (or [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)) of {@link Grid.row.Row rows}
     * @param {Grid.row.Row[]|Set} rows The rows to render
     * @category Scrolling & rendering
     */},{key:"renderRows",value:function renderRows(rows){var oldHeight,heightChanged=false;rows=Array.from(rows);// Render the requested rows.
var _iteratorNormalCompletion44=true;var _didIteratorError44=false;var _iteratorError44=undefined;try{for(var _iterator44=rows[Symbol.iterator](),_step44;!(_iteratorNormalCompletion44=(_step44=_iterator44.next()).done);_iteratorNormalCompletion44=true){var row=_step44.value;oldHeight=row.height;// Pass updatingSingleRow as false, so that it does not shuffle following
// rows downwards on each render. We do that once here after the rows are all refreshed.
row.render(null,null,false);heightChanged|=row.height!==oldHeight;}// If this caused a height change, shuffle following rows.
}catch(err){_didIteratorError44=true;_iteratorError44=err;}finally{try{if(!_iteratorNormalCompletion44&&_iterator44.return!=null){_iterator44.return();}}finally{if(_didIteratorError44){throw _iteratorError44;}}}if(heightChanged){this.translateFromRow(rows[0],true);// Reestimate total height
this.estimateTotalHeight();}}/**
     * Translates all rows after the specified row. Used when a single rows height is changed and the others should
     * rearrange. (Called from Row#render)
     * @param {Grid.row.Row} fromRow
     * @private
     * @category Scrolling & rendering
     */},{key:"translateFromRow",value:function translateFromRow(fromRow){var batch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,top=fromRow.bottom,storeCount=me.store.count,row,index;for(index=fromRow.dataIndex+1,row=me.getRow(index);row;row=me.getRow(++index)){row.setTop(top);top+=row.offsetHeight;}// Adjust average, subtracting the rendered block's estimated height and then adding the actual height
me.averageRowHeight=(me.averageRowHeight*(storeCount-me.rowCount)+(me.bottomRow.bottom-me.topRow.top))/storeCount;// Reestimate total height
if(!batch){me.estimateTotalHeight();}}/**
     * Rerender all rows
     * @category Scrolling & rendering
     */},{key:"refresh",value:function refresh(){var me=this,topRow=me.topRow;// too early
if(!topRow){return;}me.idMap={};me.renderFromRow(topRow);me.trigger('refresh');}/**
     * Makes sure that specified record is displayed in view
     * @param newScrollTop Top of visible section
     * @param [forceRecordIndex] Index of record to display at center
     * @private
     * @category Scrolling & rendering
     */},{key:"jumpToPosition",value:function jumpToPosition(newScrollTop,forceRecordIndex){// There are two very different requirements here.
// If there is a forceRecordIndex, that takes precedence to get it into the center of the
// viewport, and wherever we render the calculated row block, we may then *adjust the scrollTop*
// to get that row to the center.
//
// If there's no forceRecordIndex, then the scroll position is the primary objective and
// we must render what we calculate to be correct at that viewport position.
var me=this,rowHeight=me.rowOffsetHeight,storeCount=me.store.count,// Calculate index of the top of the rendered block.
// If we are targeting the scrollTop, this will be the top index at the scrollTop minus prepend count.
// If we are targeting a recordIndex, this will attempt to place that in the center of the rendered block.
targetIndex=forceRecordIndex==null?Math.floor(newScrollTop/rowHeight)-me.prependRowBuffer:forceRecordIndex-Math.floor(me.rowCount/2),startIndex=Math.max(Math.min(targetIndex,storeCount-me.rowCount),0),viewportTop=me.client.scrollable.y,viewportBottom=Math.min(me.client._bodyRectangle.height+viewportTop+me.appendBufferHeight,me.totalHeight);me.lastScrollTop=newScrollTop;me.topRow.dataIndex=me.topIndex=startIndex;me.topRow.setTop(startIndex*rowHeight,false);// render entire buffer
me.refresh();// TODO: It is likely the approach below will be needed for scrolling in opposite direction also, although no
//   problem encountered yet
// Not filled all the way down?
if(me.bottomRow.bottom<viewportBottom){// Fill with available rows (might be available above buffer because of var row height), stop if we run out of records :)
while(me.bottomRow.bottom<viewportBottom&&me._rows[me.prependRowBuffer].top<viewportTop&&me.bottomRow.dataIndex<storeCount-1){me.displayRecordAtBottom();}// Average row height in rendered block
var blockHeight=me.bottomRow.bottom-me.topRow.top;// Adjust average, subtracting the rendered block's estimated height and then adding the actual height
me.averageRowHeight=(me.averageRowHeight*(storeCount-me.rowCount)+blockHeight)/storeCount;// TODO: Block below was not needed for current tests, but if row height in one block is enough smaller
//  than average row height then we will need to add more rows
// Still not filled all the way down? Need more rows
// if (me.bottomRow.bottom < viewportBottom) {
//     //const localAverage = blockHeight / me.rowCount;
//     while (me.bottomRow.bottom < viewportBottom) {
//        me.addRecordAtBottom();
//     }
// }
}me.estimateTotalHeight();// If the row index is our priority, then scroll it into the center
if(forceRecordIndex!=null){var targetRow=me.getRow(forceRecordIndex),// When coming from a block of high rowHeights to one with much lower we might still miss the target...
// TODO: Jump again in these cases?
rowCenter=targetRow&&Rectangle.from(targetRow._elementsArray[0]).center.y,viewportCenter=me.grid.scrollable.viewport.center.y;// Scroll the targetRow into the center of the viewport
if(targetRow){me.grid.scrollable.y=newScrollTop=Math.floor(me.grid.scrollable.y+(rowCenter-viewportCenter));}}return newScrollTop;}/**
     * Jumps to a position if it is far enough from current position. Otherwise does nothing.
     * @private
     * @category Scrolling & rendering
     */},{key:"warpIfNeeded",value:function warpIfNeeded(newScrollTop){var me=this,result={newScrollTop:newScrollTop,deltaTop:newScrollTop-me.lastScrollTop};// if gap to fill is large enough, better to jump there than to fill row by row
if(Math.abs(result.deltaTop)>me.rowCount*me.rowOffsetHeight*3){// no specific record targeted
var index;// Specific record specified as target of scroll?
if(me.scrollTargetRecordId){index=me.store.indexOf(me.scrollTargetRecordId);// since scroll is happening async record might have been removed after requesting scroll,
// in that case we rely on calculated index (as when scrolling without target)
}// perform the jump and return results
result.newScrollTop=me.jumpToPosition(newScrollTop,index);result.deltaTop=0;// no extra filling needed
}return result;}/**
     * Handles virtual rendering (only visible rows + buffer are in dom) for rows
     * @param {Number} newScrollTop The `Y` scroll position for which to render rows.
     * @param {Boolean} [force=false] Pass `true` to update the rendered row block even if the scroll position has not changed.
     * @return {Number} Adjusted height required to fit rows
     * @private
     * @category Scrolling & rendering
     */},{key:"updateRenderedRows",value:function updateRenderedRows(newScrollTop,force,ignoreError){var me=this,clientRect=me.client._bodyRectangle;// Changing row height will trigger a scroll, ignore it here
if(me.ignoreScroll){me.ignoreScroll=false;return null;}// Might be triggered after removing all records, should not crash
if(me.rowCount===0){return 0;}var result=me.estimatedTotalHeight;// Only react if we have scrolled by more than one row
if(force||Math.abs(newScrollTop-me.lastScrollTop)>me.rowOffsetHeight){// If scrolled by a large amount, jump instead of rendering each row
var posInfo=me.warpIfNeeded(newScrollTop);me.scrollTargetRecordId=null;// Cache the last correct render scrollTop before fill.
// it can be adjusted to hide row position corrections.
me.lastScrollTop=posInfo.newScrollTop;if(posInfo.deltaTop>0){// Scrolling down
me.fillBelow(posInfo.newScrollTop);}else if(posInfo.deltaTop<0){// Scrolling up
me.fillAbove(posInfo.newScrollTop);}// Calculate the new height based on new content
result=me.estimateTotalHeight();// If it's a temporary scroll, we can be told to ignore the drift.
// Apart from that, we must correct keep the rendered block position correct.
// Otherwise, when rolling upwards after a teleport, we may not be able to reach
// the top. Some rows may end up at -ve positions.
if(!ignoreError){// Only correct the rendered block position if we are in danger of running out of scroll space.
// That is if we are getting towards the top or bottom of the scroll range.
if(// Scrolling up within top zone
posInfo.deltaTop<0&&newScrollTop<clientRect.height*2||// Scrolling down within bottom zone
posInfo.deltaTop>0&&newScrollTop>me.estimatedTotalHeight-clientRect.height*2-3){// Correct the rendered block position if it's not at the calculated position.
// Keep the visual position correct by adjusting the scrollTop by the same amount.
// When variable row heights are used, this will keep the rendered block top correct.
// TODO: Calc could be eased more, using distance left to have less effect the further away from top/bottom
var error=me.topRow.top-me.topIndex*me.rowOffsetHeight;if(error){me.offsetRows(-error);me.grid.scrollable.y=me.lastScrollTop=me.grid.scrollable.y-error;}}}}return result;}/**
     * Moves as many rows from the bottom to the top that are needed to fill to current scroll pos.
     * @param newTop Scroll position
     * @private
     * @category Scrolling & rendering
     */},{key:"fillAbove",value:function fillAbove(newTop){var me=this,fillHeight=newTop-me.topRow.top-me.prependBufferHeight;var accumulatedHeight=0;while(accumulatedHeight>fillHeight&&me.topIndex>0){// We want to show prev record at top of rows
accumulatedHeight-=me.displayRecordAtTop();}}/**
     * Moves as many rows from the top to the bottom that are needed to fill to current scroll pos.
     * @param newTop Scroll position
     * @private
     * @category Scrolling & rendering
     */},{key:"fillBelow",value:function fillBelow(newTop){var me=this,fillHeight=newTop-me.topRow.top-me.prependBufferHeight,recordCount=me.store.count,rowCount=me.rowCount;var accumulatedHeight=0;// Repeat until we have filled empty height
while(accumulatedHeight<fillHeight&&// fill empty height
me.topIndex+rowCount<recordCount&&// as long as we have records left
me.topRow.top+me.topRow.offsetHeight<newTop// and do not run move top row fully into view (can happen with var row height)
){// We want to show next record at bottom of rows
accumulatedHeight+=me.displayRecordAtBottom();}}/**
     * Estimates height needed to fit all rows, based on average row height. Also offsets rows if needed to not be above
     * the reachable area of the view.
     * @returns {Number}
     * @private
     * @category Scrolling & rendering
     */},{key:"estimateTotalHeight",value:function estimateTotalHeight(){var me=this,recordCount=me.store.count,estimate=Math.floor(recordCount*(me.averageRowHeight||me.rowOffsetHeight)),bottomRow=me.bottomRow;// No bottomRow yet if estimating initial height in autoHeight grid
if(bottomRow){var bottom=bottomRow.bottom;//top                   = topRow.top;
// To low estimate or reached the end with scroll left, adjust to fit current bottom
if(bottom>estimate||me.topIndex+me.rowCount>=recordCount&&estimate>bottom){estimate=bottom;// estimate all the way down
if(bottomRow.dataIndex<recordCount-1){estimate+=(recordCount-1-bottomRow.dataIndex)*me.rowOffsetHeight;}}}// TODO: Remove these lines if tests are green, error correction should handle this
// We have reached the very first row but are not at top, compensate.
// Keep the visuals correct by scrolling down by the same amount.
// if (topRow.isFirst && top !== 0) {
//     debugger;
//     me.offsetRows(-top);
//     me.grid.scrollable.y = me.lastScrollTop = me.grid.scrollable.y - top;
// }
if(estimate!=me.estimatedTotalHeight){me.trigger('changeTotalHeight',{totalHeight:estimate});}me.estimatedTotalHeight=estimate;return estimate;}/**
     * Moves a row from bottom to top and renders the corresponding record to it.
     * @returns {Number} New row height
     * @private
     * @category Scrolling & rendering
     */},{key:"displayRecordAtTop",value:function displayRecordAtTop(){var me=this,recordIndex=me.topIndex-1,record=me.store.getAt(recordIndex),recordCount=me.store.count,// Row currently rendered at the bottom, the row we want to move
bottomRow=me.bottomRow,bottomRowTop=bottomRow.top;me.trigger('beforeTranslateRow',{row:bottomRow,newRecord:record});// estimated top, for rendering that depends on having top
bottomRow._top=me.topRow.top-me.rowOffsetHeight;bottomRow.estimatedTop=true;// Render row
bottomRow.render(recordIndex,record,false);// Move it to top. Restore top so that the setter won't reject non-change
// if the estimate happened to be correct.
bottomRow._top=bottomRowTop;bottomRow.setBottom(me.topRow.top);bottomRow.estimatedTop=false;// Prev row is now at top
me.topIndex--;// move to start of array (bottomRow becomes topRow)
me._rows.unshift(me._rows.pop());me.averageRowHeight=(me.averageRowHeight*(recordCount-1)+bottomRow.offsetHeight)/recordCount;return bottomRow.offsetHeight;}/**
     * Moves a row from top to bottom and renders the corresponding record to it.
     * @returns {Number} New row height
     * @private
     * @category Scrolling & rendering
     */},{key:"displayRecordAtBottom",value:function displayRecordAtBottom(){var me=this,//scrollMode  = me.rowScrollMode,
recordIndex=me.topIndex+me.rowCount,record=me.store.getAt(recordIndex),recordCount=me.store.count,// Row currently rendered on the top, the row we want to move
topRow=me.topRow;// if (scrollMode === 'dom') {
//     // only for performance evaluation, not to be used
//
//     // remove divs
//     topRow.removeElements();
//
//     // add new divs
//     me.grid.regions.forEach(region => {
//         let div = me.grid.getSubGrid(region).addNewRowElement();
//         topRow.addElement(region, div);
//     });
// }
me.trigger('beforeTranslateRow',{row:topRow,newRecord:record});topRow.dataIndex=recordIndex;// Move it to bottom
topRow.setTop(me.bottomRow.bottom);// Render row
topRow.render(recordIndex,record,false);// Next row is now at top
me.topIndex++;// move to end of array (topRow becomes bottomRow)
me._rows.push(me._rows.shift());me.averageRowHeight=(me.averageRowHeight*(recordCount-1)+topRow.offsetHeight)/recordCount;return topRow.offsetHeight;}//endregion
},{key:"store",get:function get(){return this.client.store;}/**
     * Get all Rows
     * @property {Grid.row.Row[]}
     * @readonly
     * @category Rows
     */},{key:"rows",get:function get(){return this._rows;}},{key:"topRow",get:function get(){return this._rows[0];}/**
     * Get the Row currently displayed furthest down.
     * @property {Grid.row.Row}
     * @readonly
     * @category Rows
     */},{key:"bottomRow",get:function get(){var me=this,// TODO: remove when ticket on making sure rowCount is always up to date is fixed
rowCount=Math.min(me.rowCount,me.store.count);return me.rows[rowCount-1];}},{key:"rowHeight",get:function get(){return this._rowHeight;},set:function set(height){var me=this,grid=me.grid,oldRowHeight=me._rowHeight;ObjectHelper.assertNumber(height,'rowHeight');me.trigger('beforeRowHeight',{height:height});me._rowHeight=height;me.prependBufferHeight=me.prependRowBuffer*me.rowOffsetHeight;me.appendBufferHeight=me.appendRowBuffer*me.rowOffsetHeight;if(me.rows.length){var average=me.averageRowHeight;var oldAverage=average;// Estimate a new averageRowHeight
average-=grid._rowBorderHeight;average*=height/oldRowHeight;me.averageRowHeight=average+=grid._rowBorderHeight;// Adjust number of rows, since it is only allowed to shrink in refresh()
me.calculateRowCount(false,true,true);// Reposition the top row since it is used to position the rest
me.topRow.setTop(me.topRow.dataIndex*average);me.refresh();var oldY=grid.scrollable.y,newY=oldY*(average/oldAverage);// Apply average diff to grid scroll to keep rows in view, but ignore the updating of rows triggered
// by the scroll, since they are correctly updated by the refresh above.
// Only set the ignore flag if there will be a scroll event to clear it.
if(newY!==oldY){me.ignoreScroll=true;grid.scrollable.y=newY;}}me.trigger('rowHeight',{height:height});}/**
     * Get actually used row height, which includes any border and might be an average if using variable row height.
     * @property {Number}
     */},{key:"rowOffsetHeight",get:function get(){return Math.floor(this.averageRowHeight)||this._rowHeight+this.grid._rowBorderHeight;}},{key:"totalHeight",get:function get(){return Math.floor(this.store.count*this.rowOffsetHeight);}}],[{key:"pluginConfig",//region Config
// Plugin configuration.
get:function get(){return{chain:['getRowById','topRow','bottomRow','getRecordCoords','getRow','getRowFor','getRowFromElement','destroy'],assign:['rowHeight']};}},{key:"defaultConfig",get:function get(){return{/**
             * Number of rows to render above current viewport
             * @config {Number}
             * @default
             */prependRowBuffer:5,/**
             * Number of rows to render below current viewport
             * @config {Number}
             * @default
             */appendRowBuffer:5,/**
             * Default row height, assigned from Grid at construction (either from config
             * {@link Grid.view.Grid#config-rowHeight} or CSS). Can be set from renderers
             * @config {Number}
             * @default
             */rowHeight:null,idMap:{},rowScrollMode:'move',autoHeight:false,// TODO: investigate if topIndex can to built away, since topRow is always first in array and has dataIndex??
topIndex:0,lastScrollTop:0,_rows:[]};}}]);return RowManager;}(InstancePlugin);exports.RowManager=RowManager;RowManager._$name='RowManager';/**
 * @module Grid/util/GridScroller
 */var xAxis$1={x:1};/**
 * A Scroller subclass which handles scrolling in a grid.
 *
 * If the grid has no parallel scrolling grids (No locked columns), then this functions
 * transparently as a Scroller.
 *
 * If there are locked columns, then scrolling to an _element_ will invoke the scroller
 * of the subgrid which contains that element.
 * @internal
 */var GridScroller=/*#__PURE__*/function(_Scroller2){_inherits2(GridScroller,_Scroller2);function GridScroller(){_classCallCheck2(this,GridScroller);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridScroller).apply(this,arguments));}_createClass2(GridScroller,[{key:"addScroller",value:function addScroller(scroller){(this.xScrollers||(this.xScrollers=[])).push(scroller);}},{key:"addPartner",value:function addPartner(otherScroller){var axes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:xAxis$1;if(typeof axes==='string'){axes=_defineProperty({},axes,1);}// Link up all our X scrollers
if(axes.x){for(var i=0;i<this.xScrollers.length;i++){this.xScrollers[i].addPartner(otherScroller.xScrollers[i],'x');}}// We are the only Y scroller
if(axes.y){_get2(_getPrototypeOf2(GridScroller.prototype),"addPartner",this).call(this,otherScroller,'y');}}},{key:"updateOverflowX",value:function updateOverflowX(overflowX){this.xScrollers&&this.xScrollers.forEach(function(s){return s.overflowX=overflowX;});this.widget.virtualScrollers.classList[overflowX===false?'add':'remove']('b-hide-display');}},{key:"scrollIntoView",value:function scrollIntoView(element,options){// If we are after an element, we have to ask the scroller of the SubGrid
// that the element is in. It will do the X scrolling and delegate the Y
// scrolling up to this GridScroller.
if(element.nodeType===1){var _iteratorNormalCompletion45=true;var _didIteratorError45=false;var _iteratorError45=undefined;try{for(var _iterator45=this.xScrollers[Symbol.iterator](),_step45;!(_iteratorNormalCompletion45=(_step45=_iterator45.next()).done);_iteratorNormalCompletion45=true){var subGridScroller=_step45.value;if(subGridScroller.element.contains(element)){return subGridScroller.scrollIntoView(element,options);}}}catch(err){_didIteratorError45=true;_iteratorError45=err;}finally{try{if(!_iteratorNormalCompletion45&&_iterator45.return!=null){_iterator45.return();}}finally{if(_didIteratorError45){throw _iteratorError45;}}}}else{return _get2(_getPrototypeOf2(GridScroller.prototype),"scrollIntoView",this).call(this,element,options);}}},{key:"x",set:function set(x){this.xScrollers[0].x=x;},get:function get(){return this.xScrollers[0].x;}}]);return GridScroller;}(Scroller);GridScroller._$name='GridScroller';//TODO: Should it fire more own events instead and rely less on function chaining?
var domEventHandlers={touchstart:'onElementTouchStart',touchmove:'onElementTouchMove',touchend:'onElementTouchEnd',mouseover:'onElementMouseOver',mouseout:'onElementMouseOut',mousedown:'onElementMouseDown',mousemove:'onElementMouseMove',mouseup:'onElementMouseUp',click:'onHandleElementClick',dblclick:'onElementDblClick',keydown:'onElementKeyDown',keyup:'onElementKeyUp',keypress:'onElementKeyPress',contextmenu:'onElementContextMenu',focus:'onGridElementFocus'};/**
 * @module Grid/view/mixin/GridElementEvents
 */ /**
 * Mixin for Grid that handles dom events. Some listeners fire own events but all can be chained by features. None of
 * the functions in this class are indented to be called directly.
 *
 * @mixin
 */var GridElementEvents=function GridElementEvents(Target){return(/*#__PURE__*/function(_ref153){_inherits2(GridElementEvents,_ref153);function GridElementEvents(){_classCallCheck2(this,GridElementEvents);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridElementEvents).apply(this,arguments));}_createClass2(GridElementEvents,[{key:"initInternalEvents",//endregion
//region Events
/**
     * User clicked in a grid cell
     * @event cellClick
     * @param {Grid.view.Grid} grid
     * @param {Common.data.Model} record
     * @param {Grid.column.Column} column
     * @param {Object} cellSelector
     * @param {HTMLElement} cellElement
     * @param {HTMLElement} target
     * @param {Event} event
     */ /**
     * User double clicked in a grid cell
     * @event cellDblClick
     * @param {Grid.view.Grid} grid
     * @param {Common.data.Model} record
     * @param {Grid.column.Column} column
     * @param {Object} cellSelector
     * @param {HTMLElement} cellElement
     * @param {HTMLElement} target
     * @param {Event} event
     */ /**
     * User activated contextmenu in a grid cell
     * @event cellContextMenu
     * @param {Grid.view.Grid} grid
     * @param {Common.data.Model} record
     * @param {Grid.column.Column} column
     * @param {Object} cellSelector
     * @param {HTMLElement} cellElement
     * @param {HTMLElement} target
     * @param {Event} event
     */ /**
     * User moved moused to a grid cell
     * @event cellMouseOver
     * @param {Grid.view.Grid} grid
     * @param {Common.data.Model} record
     * @param {Grid.column.Column} column
     * @param {Object} cellSelector
     * @param {HTMLElement} cellElement
     * @param {HTMLElement} target
     * @param {Event} event
     */ /**
     * User moved moused out of a grid cell
     * @event cellMouseOut
     * @param {Grid.view.Grid} grid
     * @param {Common.data.Model} record
     * @param {Grid.column.Column} column
     * @param {Object} cellSelector
     * @param {HTMLElement} cellElement
     * @param {HTMLElement} target
     * @param {Event} event
     */ //endregion
//region Event handling
/**
     * Init listeners for a bunch of dom events. All events are handled by handleEvent().
     * @private
     * @category Events
     */value:function initInternalEvents(){var handledEvents=Object.keys(domEventHandlers),len=handledEvents.length,listeners={element:this.element,thisObj:this};// Route all events through handleEvent, so that we can capture this.event
// before we route to the handlers
for(var i=0;i<len;i++){listeners[handledEvents[i]]='handleEvent';}EventHelper.on(listeners);}/**
     * This method find the cell location of the passed event. It returns an object describing the cell.
     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.
     * @returns {Object} An object containing the following properties:
     * - `cellElement` - The cell element clicked on.
     * - `columnId` - The `id` of the column clicked under.
     * - `record` - The {@link Common.data.Model record} clicked on.
     * - `id` - The `id` of the {@link Common.data.Model record} clicked on.
     * @private
     * @category Events
     */},{key:"getEventData",value:function getEventData(event){var me=this,cellElement=DomHelper.up(event.target,'.b-grid-cell');// There is a cell
if(cellElement){var cellData=DomDataStore.get(cellElement),id=cellData.id,columnId=cellData.columnId,record=me.store.getById(id);// Row might not have a record, since we transition record removal
// https://app.assembla.com/spaces/bryntum/tickets/6805
return record?{cellElement:cellElement,cellData:cellData,columnId:columnId,id:id,record:record,cellSelector:{id:id,columnId:columnId}}:null;}}/**
     * Handles all dom events, routing them to correct functions (touchstart -> onElementTouchStart)
     * @param event
     * @private
     * @category Events
     */},{key:"handleEvent",value:function handleEvent(event){if(!this.disabled){this.event=event;if(domEventHandlers[event.type]){this[domEventHandlers[event.type]](event);}}}//endregion
//region Touch events
/**
     * Touch start, chain this function in features to handle the event.
     * @param event
     * @category Touch events
     * @internal
     */},{key:"onElementTouchStart",value:function onElementTouchStart(event){var me=this;DomHelper.isTouchEvent=true;if(event.touches.length===1){me.longPressTimeout=setTimeout(function(){me.onElementLongPress(event);event.preventDefault();me.longPressPerformed=true;},me.longPressTime);}}/**
     * Touch move, chain this function in features to handle the event.
     * @param event
     * @category Touch events
     * @internal
     */},{key:"onElementTouchMove",value:function onElementTouchMove(event){if(this.longPressTimeout){clearTimeout(this.longPressTimeout);this.longPressTimeout=null;}}/**
     * Touch end, chain this function in features to handle the event.
     * @param event
     * @category Touch events
     * @internal
     */},{key:"onElementTouchEnd",value:function onElementTouchEnd(event){var me=this;if(me.longPressPerformed){if(event.cancelable){event.preventDefault();}me.longPressPerformed=false;}if(me.longPressTimeout){clearTimeout(me.longPressTimeout);me.longPressTimeout=null;}}},{key:"onElementLongPress",value:function onElementLongPress(event){}//endregion
//region Mouse events
// Trigger events in same style when clicking, dblclicking and for contextmenu
},{key:"triggerCellMouseEvent",value:function triggerCellMouseEvent(name,event){var me=this,cellData=me.getEventData(event);// There is a cell
if(cellData){var column=me.columns.getById(cellData.columnId);me.trigger('cell'+StringHelper.capitalizeFirstLetter(name),{grid:this,record:cellData.record,column:column,cellSelector:cellData.cellSelector,cellElement:cellData.cellElement,target:event.target,event:event});}}/**
     * Mouse down, chain this function in features to handle the event.
     * @param event
     * @category Mouse events
     * @internal
     */},{key:"onElementMouseDown",value:function onElementMouseDown(event){var me=this,cellData=me.getEventData(event);me.skipFocusSelection=true;me.triggerCellMouseEvent('mousedown',event);// Browser event unification fires a mousedown on touch tap prior to focus.
if(!event.defaultPrevented){me.onFocusGesture(cellData,event);}}/**
     * Move move, chain this function in features to handle the event.
     * @param event
     * @category Mouse events
     * @internal
     */},{key:"onElementMouseMove",value:function onElementMouseMove(event){}/**
     * Mouse up, chain this function in features to handle the event.
     * @param event
     * @category Mouse events
     * @internal
     */},{key:"onElementMouseUp",value:function onElementMouseUp(event){}/**
     * Called before {@link #function-onElementClick}.
     * Fires 'beforeElementClick' event which can return false to cancel further onElementClick actions.
     * @param event
     * @fires beforeElementClick
     * @category Mouse events
     * @internal
     */},{key:"onHandleElementClick",value:function onHandleElementClick(event){if(this.trigger('beforeElementClick',{event:event})!==false){this.onElementClick(event);}}/**
     * Click, select cell on click and also fire 'cellClick' event.
     * Chain this function in features to handle the dom event.
     * @param event
     * @fires cellClick
     * @category Mouse events
     * @internal
     */},{key:"onElementClick",value:function onElementClick(event){var me=this,cellData=me.getEventData(event);// There is a cell
if(cellData){me.triggerCellMouseEvent('click',event);// Clear hover styling when clicking in a row to avoid having it stick around if you keyboard navigate
// away from it
// https://app.assembla.com/spaces/bryntum/tickets/5848
DomDataStore.get(cellData.cellElement).row.removeCls('b-hover');}}},{key:"onFocusGesture",value:function onFocusGesture(cellData,event){//TODO: should be able to cancel focusCell from listeners
if(cellData){this.focusCell(cellData.cellSelector,{doSelect:true,event:event});}}/**
     * Double click, fires 'cellDblClick' event.
     * Chain this function in features to handle the dom event.
     * @param {Event} event
     * @fires cellDblClick
     * @category Mouse events
     * @internal
     */},{key:"onElementDblClick",value:function onElementDblClick(event){var me=this,target=event.target;me.triggerCellMouseEvent('dblClick',event);if(target.classList.contains('b-grid-header-resize-handle')){var header=DomHelper.up(target,'.b-grid-header'),column=me.columns.getById(header.dataset.columnId);column.resizeToFitContent();}}/**
     * Mouse over, adds 'hover' class to elements.
     * @param event
     * @fires mouseOver
     * @category Mouse events
     * @internal
     */},{key:"onElementMouseOver",value:function onElementMouseOver(event){// bail out early if scrolling
if(!this.scrolling){var cellElement=DomHelper.up(event.target,'.b-grid-cell');if(cellElement){var row=DomDataStore.get(cellElement).row;// No hover effect needed if a mouse button is pressed (like when resizing window, region, or resizing something etc).
// NOTE: 'buttons' not supported in Safari
if(row&&(typeof event.buttons!=='number'||event.buttons===0)){row.addCls('b-hover');}this.triggerCellMouseEvent('mouseOver',event);}/**
             * Mouse moved in over element in grid
             * @event mouseOver
             * @param {Event} event
             */this.trigger('mouseOver',{event:event});}}/**
     * Mouse out, removes 'hover' class from elements.
     * @param event
     * @fires mouseOut
     * @category Mouse events
     * @internal
     */},{key:"onElementMouseOut",value:function onElementMouseOut(event){var me=this;// bail out early if scrolling
if(!me.scrolling){var cellElement=DomHelper.up(event.target,'.b-grid-cell');if(cellElement){var row=DomDataStore.get(cellElement).row;if(row)row.removeCls('b-hover');me.triggerCellMouseEvent('mouseOut',event);}/**
             * Mouse moved out from element in grid
             * @event mouseOut
             * @param {Event} event
             */me.trigger('mouseOut',{event:event});}}//endregion
//region Keyboard events
/**
     * Key down, handles arrow keys for selection.
     * Chain this function in features to handle the dom event.
     * @param event
     * @category Keyboard events
     * @internal
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this;// flagging event with handled = true used to signal that other features should probably not care about it.
// for this to work you should specify overrides for onElementKeyDown to be run before this function
// (see for example CellEdit feature)
if(event.handled)return;if(event.target.matches('.b-grid-header.b-depth-0')){me.handleHeaderKeyDown(event);}else if(event.target===this.element||BrowserHelper.isIE11&&event.currentTarget===this.element){// IE11 Browser check is not placed in EventHelper to maintain built-in delegated functionality
me.handleViewKeyDown(event);}// If focus is *within* a cell (eg WidgetColumn or CheckColumn), jump up to focus the cell.
else if(event.key==='Escape'&&me.isActionableLocation){var focusedCell=ObjectHelper.clone(me.focusedCell);focusedCell.element=null;me.focusCell(focusedCell);DomHelper.focusWithoutScrolling(me.element);}}},{key:"handleViewKeyDown",value:function handleViewKeyDown(event){var me=this;switch(event.key){case'ArrowLeft':event.preventDefault();return me.navigateLeft(event);case'ArrowRight':event.preventDefault();return me.navigateRight(event);case'ArrowUp':event.preventDefault();return me.navigateUp(event);case'ArrowDown':event.preventDefault();return me.navigateDown(event);}}},{key:"handleHeaderKeyDown",value:function handleHeaderKeyDown(event){var me=this,column=me.columns.getById(event.target.dataset.columnId);column.onKeyDown&&column.onKeyDown(event);switch(event.key){case'ArrowLeft':var prev=me.columns.getAdjacentVisibleLeafColumn(column,false);if(prev){var _element=me.getHeaderElement(prev.id);_element.focus();}break;case'ArrowRight':var next=me.columns.getAdjacentVisibleLeafColumn(column,true);if(next){var _element2=me.getHeaderElement(next.id);_element2.focus();}break;case'Enter':var element=me.getHeaderElement(column.id);element.click();break;}}/**
     * Key press, chain this function in features to handle the dom event.
     * @param event
     * @category Keyboard events
     * @internal
     */},{key:"onElementKeyPress",value:function onElementKeyPress(event){}/**
     * Key up, chain this function in features to handle the dom event.
     * @param event
     * @category Keyboard events
     * @internal
     */},{key:"onElementKeyUp",value:function onElementKeyUp(event){}//endregion
//region Other events
/**
     * Context menu, chain this function in features to handle the dom event.
     * In most cases, include ContextMenu feature instead.
     * @param event
     * @category Other events
     * @internal
     */},{key:"onElementContextMenu",value:function onElementContextMenu(event){var me=this,cellData=me.getEventData(event);// There is a cell
if(cellData){me.triggerCellMouseEvent('contextMenu',event);// Focus on tap for touch events.
// Selection follows from focus.
if(DomHelper.isTouchEvent){me.onFocusGesture(cellData,event);}}}/**
     * Overrides empty base function in View, called when view is resized.
     * @fires resize
     * @param element
     * @param width
     * @param height
     * @param oldWidth
     * @param oldHeight
     * @category Other events
     * @internal
     */},{key:"onInternalResize",value:function onInternalResize(element,width,height,oldWidth,oldHeight){var me=this;if(me._devicePixelRatio&&me._devicePixelRatio!==window.devicePixelRatio){// Pixel ratio changed, likely because of browser zoom. This affects the relative scrollbar width also
DomHelper.resetScrollBarWidth();}me._devicePixelRatio=window.devicePixelRatio;// cache to avoid recalculations in the middle of rendering code (RowManger#getRecordCoords())
me._bodyRectangle=Rectangle.client(me.bodyContainer);_get2(_getPrototypeOf2(GridElementEvents.prototype),"onInternalResize",this).apply(this,arguments);if(height!==oldHeight){me._bodyHeight=me.bodyContainer.offsetHeight;if(me.rendered){// initial height will be set from render(),
// it reaches onInternalResize too early when rendering, headers/footers are not sized yet
me.rowManager.initWithHeight(me._bodyHeight);}}me.refreshVirtualScrollbars();if(width!==oldWidth){// Slightly delay to avoid resize loops.
me.setTimeout(function(){if(!me.isDestroyed){me.updateResponsive(width,oldWidth);}},0);}}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Time in ms until a longpress is triggered
             * @config {Number}
             * @default
             * @category Events
             */longPressTime:400};}}]);return GridElementEvents;}(Target||Base));};/**
 * @module Grid/view/mixin/GridFeatures
 */var validConfigTypes={string:1,object:1,function:1// used by CellTooltip
};/**
 * Mixin for Grid that handles features. Features are plugins that add functionality to the grid. Feature classes should
 * register with Grid by calling {@link Grid.feature.GridFeatureManager#function-registerFeature-static registerFeature}. This
 * enables features to be specified and configured in grid
 * config.
 *
 * Define which features to use:
 *
 * ```javascript
 * // specify which features to use (note that some features are used by default)
 * const grid = new Grid({
 *   features: {
 *      sort: 'name',
 *      search: true
 *   }
 * });
 * ```
 *
 * Access a feature in use:
 *
 * ```javascript
 * grid.features.search.search('cat');
 * ```
 *
 * Basic example of implementing a feature:
 *
 * ```javascript
 * class MyFeature extends InstancePlugin {
 *
 * }
 *
 * GridFeatures.registerFeature(MyFeature);
 *
 * // using the feature
 * const grid = new Grid({
 *   features: {
 *     myFeature: true
 *   }
 * });
 * ```
 *
 * @mixin
 */var GridFeatures=function GridFeatures(Target){return(/*#__PURE__*/function(_ref154){_inherits2(GridFeatures,_ref154);function GridFeatures(){_classCallCheck2(this,GridFeatures);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridFeatures).apply(this,arguments));}_createClass2(GridFeatures,[{key:"createFeatureInitializer",value:function createFeatureInitializer(features,featureName,featureClass,config){var constructorArgs=[this],construct=featureClass.prototype.construct;// Only pass config if there is one.
// The constructor(config = {}) only works for undefined config
if(validConfigTypes[_typeof(config)]){constructorArgs[1]=config;}return{configurable:true,get:function get(){// Delete this defined property and replace it with the Feature instance.
delete features[featureName];// Ensure the feature is injected into the features object before initialization
// so that it is available from call chains from its initialization.
featureClass.prototype.construct=function(){features[featureName]=this;for(var _len59=arguments.length,args=new Array(_len59),_key58=0;_key58<_len59;_key58++){args[_key58]=arguments[_key58];}construct.apply(this,args);featureClass.prototype.construct=construct;};// Return the Feature instance
return _construct(featureClass,constructorArgs);}};}//endregion
//region Other stuff
/**
     * Check if a feature is included
     * @param {String} name Feature name, as registered with `GridFeatureManager.registerFeature()`
     * @returns {Boolean}
     * @category Misc
     */},{key:"hasFeature",value:function hasFeature(name){return!!(this.features&&name in this.features);}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"features",//region Init
/**
     * Specify which features to use on the grid. Most features accepts a boolean, some also accepts a config object.
     * Please note that if you are not using the bundles you might need to import the features you want to use.
     *
     * ```javascript
     * const grid = new Grid({
     *     features : {
     *         stripe : true,   // Enable stripe feature
     *         sort   : 'name', // Configure sort feature
     *         group  : false   // Disable group feature
     *     }
     * }
     * ```
     *
     * @config {Object} features
     * @category Common
     */ /**
     * Map of the features available on the grid. Use it to access them on your grid object
     *
     * ```javascript
     * grid.features.group.expandAll();
     * ```
     *
     * @readonly
     * @property {Object}
     * @category Common
     * @typings any
     */set:function set(features){var me=this,defaultFeatures=GridFeatureManager.getInstanceDefaultFeatures(this);features=me._features=ObjectHelper.assign({},features);// default features, enabled unless otherwise specified
if(defaultFeatures){Object.entries(defaultFeatures).forEach(function(_ref155){var _ref156=_slicedToArray(_ref155,2),as=_ref156[0],featureClass=_ref156[1];if(!(as in features)){features[as]=true;}});}// We *prime* the features so that if any configuration code accesses a feature, it
// will self initialize, but if not, they will remain in a primed state until afterConfigure.
var featureName,config,featureClass;var registeredInstanceFeatures=GridFeatureManager.getInstanceFeatures(this);for(var _i21=0,_Object$keys2=Object.keys(features);_i21<_Object$keys2.length;_i21++){featureName=_Object$keys2[_i21];config=features[featureName];// Create feature initialization property if config is truthy.
// Config must be a valid configuration value for the feature class.
if(config){// Feature configs name must start with lowercase letter to be valid
if(StringHelper.lowercaseFirstLetter(featureName)!==featureName){throw new Error(me.L('invalidFeatureNameFormat',featureName));}featureClass=registeredInstanceFeatures[featureName];if(!featureClass){throw new Error(me.L('featureNotFound',featureName));}// Create a self initializing property on the features object named by the feature name.
// when accessed, it will create and return the real feature.
// Now, if some Feature initiualization code attempt to access a feature which has not yet been initialized
// it will be initialized just in time.
Reflect.defineProperty(features,featureName,me.createFeatureInitializer(features,featureName,featureClass,config));}}},get:function get(){return this._features;}},{key:"widgetClass",get:function get(){}}]);return GridFeatures;}(Target||Base));};/**
 * @module Grid/view/mixin/GridNavigation
 */var defaultFocusOptions=Object.freeze({doSelect:true});/**
 * Mixin for Grid that handles cell to cell navigation.
 *
 * @mixin
 */var GridNavigation=function GridNavigation(Target){return(/*#__PURE__*/function(_ref157){_inherits2(GridNavigation,_ref157);function GridNavigation(){_classCallCheck2(this,GridNavigation);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridNavigation).apply(this,arguments));}_createClass2(GridNavigation,[{key:"onGridElementFocus",/**
     * Grid element focus, selects first row and cell when grid is focused if none is selected (otherwise user cannot
     * see that grid is focused).
     * Chain this function it features to handle the dom event.
     * @param event
     * @category Other events
     * @internal
     */value:function onGridElementFocus(event){// Select first row if none is selected when grid is focused (to show that it has focus)
var me=this,focusOptions={doSelect:false,event:event};if(me._focusedCell){me.focusCell(me._focusedCell,focusOptions);}else{// If they just clicked in blank space, do not refocus the last focused cell.
// We focus cell 0, 0 on that gesture.
var targetCell=me.element.contains(event.relatedTarget)?null:me.lastFocusedCell;if(targetCell){// The previously focused record has since been removed.
// Fallback to reverting to where focus endtered the grid from.
// TODO: CellContext should store the record index
// to fall back to if the actual record is no longer present.
if(!me.store.getById(targetCell.id)){me.revertFocus();return;}// flag to not affect selection
me.returningFocus=true;me.focusCell(targetCell,focusOptions);me.returningFocus=false;}else if(!me.skipFocusSelection&&me.store.first){me.focusCell({id:me.store.first.id,columnId:me.columns.visibleColumns[0].id},focusOptions);}}me.skipFocusSelection=false;}},{key:"onFocusOut",value:function onFocusOut(event){_get2(_getPrototypeOf2(GridNavigation.prototype),"onFocusOut",this).call(this,event);this.clearFocus();}/**
     * Checks whether or not a cell is focused.
     * @param {Object|string|Number} cellSelector Cell selector { id: x, columnId: xx } or row id
     * @returns {Boolean} true if cell or row is focused, otherwise false
     */},{key:"isFocused",value:function isFocused(cellSelector){return Boolean(this._focusedCell)&&this.isLocationEqual(cellSelector,this._focusedCell);}/**
     * Navigates to a cell and/or its row (depending on selectionMode)
     * @param {Object} cellSelector { id: rowId, columnId: 'columnId' }
     * @param {Object} options Modifier options for how to deal with focusing the cell. These
     * are used as the {@link Common.helper.util.Scroller#function-scrollTo} options.
     * @param {Boolean} [options.doSelect=true] Optionally pass `false` to not continue to selection.
     * @param {Event} [options.event] Optionally pass the UI event which instigated the focus request.
     * @returns {Object} Cell selector
     * @fires navigate
     */},{key:"focusCell",value:function focusCell(cellSelector){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultFocusOptions;// If we're being passed a context object (as opposed to a record), clone in case we were
// passed the _focusedCell, and after refresh isLocationEqual needs to detect a difference.
cellSelector=this.normalizeCellContext(cellSelector===Object?Object.assign({},cellSelector):cellSelector);var me=this,doSelect=options.doSelect!==false,event=options.event,lastFocusedCell=me.lastFocusedCell=me._focusedCell,isNotMove=me.isLocationEqual(cellSelector,lastFocusedCell),lastCell=lastFocusedCell&&me.getCell(lastFocusedCell);var cell=me.getCell(cellSelector);// If we're focusing due to a mousedown on a focusable element *within* a cell
// then we do not "navigate" to the cell - we allow the element to be focused.
// For example a CheckColumn or WidgetColumn.
if(event&&event.type==='mousedown'){for(var target=event.target;target!==cell;target=target.parentElement){if(DomHelper.isFocusable(target)){cellSelector.element=target;return;}}}// No navigation takes place, but the selection still needs to know if a UI event happened.
if(isNotMove){if(event){me.onCellNavigate&&me.onCellNavigate(me,null,me._focusedCell,event,doSelect);}return cellSelector;}if(lastCell){lastCell.classList.remove('b-focused');}me.scrollRowIntoView(cellSelector.id,Object.assign({column:cellSelector.columnId},options));// Get the newly visible cell *after* it has been scrolled into view.
// With buffered rendering, it may not have existed before the scroll.
cell=me.getCell(cellSelector);if(cell){cellSelector.element=cell;cell.classList.add('b-focused');}//Remember
me._focusedCell=cellSelector;me.onCellNavigate&&me.onCellNavigate(me,lastFocusedCell,me._focusedCell,event,doSelect);me.trigger('navigate',{lastFocusedCell:lastFocusedCell,focusedCell:me._focusedCell,event:event});//TODO: should be able to cancel selectcell from listeners
return cellSelector;}},{key:"isLocationEqual",value:function isLocationEqual(cellSelector,otherCellSelector){return cellSelector&&otherCellSelector&&cellSelector.id===otherCellSelector.id&&cellSelector.columnId===otherCellSelector.columnId&&(// Normalized cellSelectors are not required to have an element, only compare elements if both selectors
// have it specified
!cellSelector.element||!otherCellSelector.element||cellSelector.element===otherCellSelector.element);}},{key:"blurCell",value:function blurCell(cellSelector){var me=this,cell=me.getCell(cellSelector);if(cell){cell.classList.remove('b-focused');}}},{key:"clearFocus",value:function clearFocus(){var me=this;if(me._focusedCell){// set last to have focus return to previous cell when alt tabbing
me.lastFocusedCell=me._focusedCell;me.blurCell(me._focusedCell);me._focusedCell=null;}}/**
     * Selects the cell before or after currently focused cell.
     * @private
     * @param next Specify true to select the next cell, false to select the previous
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object} Used cell selector
     */},{key:"internalNextPrevCell",value:function internalNextPrevCell(){var next=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var event=arguments.length>1?arguments[1]:undefined;var me=this,cellSelector=me._focusedCell;if(cellSelector){return me.focusCell({id:cellSelector.id,columnId:me.columns.getAdjacentVisibleLeafColumn(cellSelector.columnId,next,true).id},{doSelect:true,event:event});}return null;}/**
     * Select the cell after the currently focused one.
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object} Cell selector
     */},{key:"navigateRight",value:function navigateRight(event){return this.internalNextPrevCell(true,event);}/**
     * Select the cell before the currently focused one.
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object} Cell selector
     */},{key:"navigateLeft",value:function navigateLeft(event){return this.internalNextPrevCell(false,event);}//endregion
//region Row
/**
     * Selects the next or previous record in relation to the current selection. Scrolls into view if outside.
     * @private
     * @param next Next record (true) or previous (false)
     * @param {Boolean} skipSpecialRows True to not return specialRows like headers
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object/Boolean} Selection context for the focused row (& cell) or false if no selection was made
     */},{key:"internalNextPrevRow",value:function internalNextPrevRow(next){var skipSpecialRows=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var event=arguments.length>2?arguments[2]:undefined;var me=this,cell=me._focusedCell;if(!cell)return false;var record=me.store["get".concat(next?'Next':'Prev')](cell.id,false,skipSpecialRows);if(!record)return false;return me.focusCell({id:record.id,columnId:me._focusedCell&&me._focusedCell.columnId},{doSelect:true,event:event});}/**
     * Navigates to the cell below the currently focused cell
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object} Selector for focused row (& cell)
     */},{key:"navigateDown",value:function navigateDown(event){return this.internalNextPrevRow(true,false,event);}/**
     * Navigates to the cell above the currently focused cell
     * @param {Event} [event] Optionally, the UI event which caused navigation.
     * @returns {Object} Selector for focused row (& cell)
     */},{key:"navigateUp",value:function navigateUp(event){return this.internalNextPrevRow(false,false,event);}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"focusedCell",//region Cell
/**
     * User navigated to a grid cell
     * @event navigate
     * @param {Grid.view.Grid} grid
     * @param {Object} last focused location
     * @param {Object} location focus moved to
     * @param {Event} [event] The UI event which caused navigation.
     */ /**
     * Cell selector for focused cell, set to focus a cell or use {@link #function-focusCell}.
     * @property {Object}
     */get:function get(){return this._focusedCell;}/**
     * This property is `true` if an element _within_ a cell is focused.
     * @property {Boolean}
     * @readonly
     */,set:function set(cellSelector){this.focusCell(cellSelector,{doSelect:false});}},{key:"isActionableLocation",get:function get(){var focusedCell=this._focusedCell;return Boolean(focusedCell&&focusedCell.element&&this.getCell(focusedCell).contains(focusedCell.element));}},{key:"focusedRecord",get:function get(){if(this._focusedCell){return this.store.getById(this._focusedCell.id);}}/**
     * CSS selector for currently focused cell. Format is "[data-index=index] [data-column-id=columnId]".
     * @property {String}
     * @readonly
     */},{key:"cellCSSSelector",get:function get(){var me=this,cell=me._focusedCell,row=cell&&me.getRowById(cell.id);if(!cell||!row)return'';return"[data-index=".concat(row.index,"] [data-column-id=").concat(cell.columnId,"]");}},{key:"widgetClass",get:function get(){}}]);return GridNavigation;}(Target||Base));};/**
 * @module Grid/view/mixin/GridResponsive
 */ /**
 * Simplifies making grid responsive. Supply levels as {@link #config-responsiveLevels} config, default levels are:
 * <dl>
 * <dt>small <dd>< 400px,
 * <dt>medium <dd>< 600px
 * <dt>large <dd>> 600px
 * </dl>
 *
 * Columns can define configs per level to be resized etc:
 *
 * ```
 * let grid = new Grid({
 *   responsiveLevels: {
 *     small: 300,
 *     medium: 400,
 *     large: '*' // everything above 400
 *   },
 *
 *   columns: [
 *     {
 *       field: 'name',
 *       text: 'Name',
 *       responsiveLevels: {
 *         small: { hidden: true },
 *         '*': { hidden: false } // all other levels
 *       }
 *     },
 *     { field: 'xx', ... }
 *   ]
 * });
 * ```
 *
 * It is also possible to give a [Grid state](#Grid/view/mixin/GridState) object instead of a level width, but in that
 * case the object must contain a `levelWidth` property:
 *
 * ```
 * let grid = new Grid({
 *   responsiveLevels: {
 *     small: {
 *       // Width is required
 *       levelWidth : 400,
 *       // Other configs are optional, see GridState for available options
 *       rowHeight  : 30
 *     },
 *     medium : {
 *       levelWidth : 600,
 *       rowHeight  : 40
 *     },
 *     large: {
 *       levelWidth : '*', // everything above 300
 *       rowHeight  : 45
 *     }
 *   }
 * });
 * ```
 *
 * @demo responsive
 * @externalexample grid/Responsive.js
 * @mixin
 */var GridResponsive=function GridResponsive(Target){return(/*#__PURE__*/function(_ref158){_inherits2(GridResponsive,_ref158);function GridResponsive(){_classCallCheck2(this,GridResponsive);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridResponsive).apply(this,arguments));}_createClass2(GridResponsive,[{key:"getClosestBiggerLevel",/**
     * Find closes bigger level, aka level we want to use.
     * @private
     * @category Misc
     */value:function getClosestBiggerLevel(width){var me=this,levels=Object.keys(me.responsiveLevels),useLevel=null,minDelta=99995,biggestLevel=null;levels.forEach(function(level){var levelSize=me.responsiveLevels[level];// responsiveLevels can contains config objects, in which case we should use width from it
if(!['number','string'].includes(_typeof(levelSize))){levelSize=levelSize.levelWidth;}if(levelSize==='*'){biggestLevel=level;}else if(width<levelSize){var delta=levelSize-width;if(delta<minDelta){minDelta=delta;useLevel=level;}}});return useLevel||biggestLevel;}/**
     * Get currently used responsive level (as string)
     * @returns {String}
     * @readonly
     * @category Misc
     */},{key:"updateResponsive",/**
     * Check if resize lead to a new responsive level and take appropriate actions
     * @private
     * @fires responsive
     * @param width
     * @param oldWidth
     * @category Misc
     */value:function updateResponsive(width,oldWidth){var me=this,oldLevel=me.getClosestBiggerLevel(oldWidth),level=me.getClosestBiggerLevel(width);if(oldLevel!==level){// Level might be a state object
var levelConfig=me.responsiveLevels[level];if(!['number','string'].includes(_typeof(levelConfig))){me.applyState(levelConfig);}// check columns for responsive config
me.columns.forEach(function(column){var levels=column.responsiveLevels;if(levels){if(levels[level]){// using state to apply responsive config, since it already does what we want...
column.applyState(levels[level]);}else if(levels['*']){column.applyState(levels['*']);}}});me.element.classList.remove('b-responsive-'+oldLevel);me.element.classList.add('b-responsive-'+level);/**
             * Grid resize lead to a new responsive level being applied
             * @event responsive
             * @param {Grid.view.Grid} grid Grid that was resized
             * @param {String} level New responsive level (small, large, etc)
             * @param {Number} width New width in px
             * @param {String} oldLevel Old responsive level
             * @param {Number} oldWidth Old width in px
             */me.trigger('responsive',{level:level,width:width,oldLevel:oldLevel,oldWidth:oldWidth});}}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"responsiveLevel",get:function get(){return this.getClosestBiggerLevel(this.width);}},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",get:function get(){return{/**
             * "Break points" for which responsive config to use for columns and css.
             * @config {Object}
             * @category Misc
             * @default <code>{ small : 400, medium : 600, large : '*' }</code>
             */responsiveLevels:Object.freeze({small:400,medium:600,large:'*'})};}}]);return GridResponsive;}(Target||Base));};var validIdTypes={string:1,number:1};/**
 * @module Grid/view/mixin/GridSelection
 */ /**
 * Mixin for Grid that handles row and cell selection.
 *
 * @example
 * // select a row
 * grid.selectedRow = 7;
 *
 * // select a cell
 * grid.selectedCell = { id: 5, columnId: 'column1' }
 *
 * // select a record
 * grid.selectedRecord = grid.store.last;
 *
 * // select multiple records by ids
 * grid.selectedRecords = [1, 2, 4, 6]
 *
 * @mixin
 */var GridSelection=function GridSelection(Target){return(/*#__PURE__*/function(_ref159){_inherits2(GridSelection,_ref159);function GridSelection(){_classCallCheck2(this,GridSelection);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridSelection).apply(this,arguments));}_createClass2(GridSelection,[{key:"afterConfigure",//region Init
value:function afterConfigure(){var me=this;// Inject our CheckColumn into the ColumnStore
if(me.selectionMode.checkbox){var col=me.checkboxColumn=new CheckColumn({id:"".concat(me.id,"-selection-column"),width:'4em',field:null,// Always put the checkcolumn in the first region
region:Object.keys(me.subGridConfigs).sort()[0]});col.meta.depth=0;// This is assigned in Column.js for normal columns
col._grid=me;// Override renderer to inject the rendered record's selected status into the value
var checkboxRenderer=col.renderer;col.renderer=function(renderData){renderData.value=me.isSelected(renderData.record);checkboxRenderer.call(col,renderData);};col.on({toggle:'onCheckChange',thisObj:me});// Insert the checkbox after any rownumber column. If not there, -1 means in at 0.
var insertIndex=me.columns.indexOf(me.columns.findRecord('type','rownumber'))+1;me.columns.insert(insertIndex,col);}_get2(_getPrototypeOf2(GridSelection.prototype),"afterConfigure",this).call(this);}//endregion
//region Events
/**
     * The selection has been changed.
     * @event selectionchange
     * @param {String} action `'select'`/`'deselect'`
     * @param {String} mode `'row'`/`'cell'`
     * @param {Grid.view.Grid} source
     * @param {Common.data.Model[]|Object} deselected The records or cells (depending on the `mode`) deselected in this operation.
     * @param {Common.data.Model[]|Object} selected The records or cells (depending on the `mode`) selected in this operation.
     * @param {Common.data.Model[]|Object} selection  The records or cells (depending on the `mode`) in the new selection.
     */ /**
     * Responds to mutations of the underlying storage Collection
     * @param {Object} event
     * @private
     */},{key:"onRecordCollectionChange",value:function onRecordCollectionChange(_ref160){var recordCollection=_ref160.source,action=_ref160.action,_ref160$added=_ref160.added,added=_ref160$added===void 0?[]:_ref160$added,removed=_ref160.removed;var me=this;if(me._selectedCell&&!me.isSelectable(me._selectedCell)){me.deselectCell(me._selectedCell);}// Filter out unselectable rows
added=added.filter(function(row){return me.isSelectable(row);});me.triggerChangeEvent({mode:'row',action:added.length?'select':'deselect',selection:me.selectedRecords,selected:added,deselected:removed},me.silent);}},{key:"onCheckChange",value:function onCheckChange(_ref161){var checked=_ref161.checked,record=_ref161.record;if(checked){this.selectRow(record,false,true);}else{this.deselectRow(record);}}},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this,focusedCell=me.focusedCell,checkboxColumn=me.checkboxColumn;_get2(_getPrototypeOf2(GridSelection.prototype),"onElementKeyDown",this).call(this,event);// SPACE key on our CheckColumn toggles it
if(focusedCell&&event.key===' '&&checkboxColumn&&me.columns.getById(focusedCell.columnId)===checkboxColumn){var checkbox=me.getCell(focusedCell).widget;if(checkbox){checkbox.toggle();}}}//endregion
//region Selection collection
},{key:"spliceSelectedRecords",/**
     * Removes and adds records to/from the selection at the same time. Analogous
     * to the `Array` `splice` method.
     *
     * Note that if items that are specified for removal are also in the `toAdd` array,
     * then those items are *not* removed then appended. They remain in the same position
     * relative to all remaining items.
     *
     * @param {Number} index Index at which to remove a block of items. Only valid if the
     * second, `toRemove` argument is a number.
     * @param {Object[]|Number} toRemove Either the number of items to remove starting
     * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).
     * @param  {Object[]|Object} toAdd An item, or an array of items to add.
     */value:function spliceSelectedRecords(index,toRemove,toAdd){this._recordCollection.splice(index,toRemove,toAdd);}//endregion
//region Cell & row
/**
     * Checks whether or not a cell or row is selected.
     * @param {Object|string|Number|Common.data.Model} cellSelectorOrId Cell selector { id: x, column: xx } or row id, or record
     * @returns {Boolean} true if cell or row is selected, otherwise false
     * @category Selection
     */},{key:"isSelected",value:function isSelected(cellSelectorOrId){var me=this;// A record passed
if(cellSelectorOrId instanceof Model){cellSelectorOrId=cellSelectorOrId.id;}if(validIdTypes[_typeof(cellSelectorOrId)]){return me.recordCollection.includes(cellSelectorOrId);}else{return me._selectedCell&&me._selectedCell.id==cellSelectorOrId.id&&me._selectedCell.columnId===cellSelectorOrId.columnId;}}/**
     * Checks whether or not a cell or row can be selected.
     * @param recordCellOrId Record or cell or record id
     * @returns {Boolean} true if cell or row cane be selected, otherwise false
     * @category Selection
     */},{key:"isSelectable",value:function isSelectable(recordCellOrId){// Selection disabled for undefined record, special row (group header / footer) and
// record which was already removed from store
if(!recordCellOrId){return false;}var row=this.store.getById(recordCellOrId.id||recordCellOrId);return row&&!(row.meta&&row.meta.specialRow);}/**
     * Cell selector for selected cell, set to select a cell or use {@link #function-selectCell()}.
     * @property {Object}
     * @category Selection
     */},{key:"selectRow",/**
     * Selects a row (without selecting a cell).
     * @param recordOrId Record or record id, specifying null will deselect all
     * @param {Boolean} scrollIntoView Specify `false` to prevent row from being scrolled into view
     * @param {Boolean} addToSelection Specify `true` to add to selection, defaults to `false` which replaces
     * @fires selectionchange
     * @category Selection
     */value:function selectRow(recordOrId){var scrollIntoView=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var addToSelection=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,record=me.store.getById(recordOrId);if(record){me.selectCell({id:record.id},scrollIntoView,addToSelection);}else{me.deselectAll();}}/**
     * Selects a cell and/or its row (depending on selectionMode)
     * @param {Object} cellSelector { id: rowId, columnId: 'columnId' }
     * @param {Boolean} scrollIntoView Specify false to prevent row from being scrolled into view
     * @param {Boolean} addToSelection Specify `true` to add to selection, defaults to `false` which replaces
     * @param {Boolean} silent Specify `true` to not trigger any events when selecting the cell
     * @returns {Object} Cell selector
     * @fires selectionchange
     * @category Selection
     */},{key:"selectCell",value:function selectCell(cellSelector){var scrollIntoView=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var addToSelection=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var silent=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,recordCollection=me.recordCollection,selectionMode=me.selectionMode,selector=me.normalizeCellContext(cellSelector),record=selector.record||me.store.getById(selector.id);// Clear selection if row is not selectable
if(!me.isSelectable(record)){this.deselectAll();return;}if(scrollIntoView){me.scrollRowIntoView(selector.id,{column:selector.columnId});}// Row selection (both sides if locked columns)
if(selectionMode.row){if(silent){me.silent=(me.silent||0)+1;}if(addToSelection){recordCollection.add(record);}// Clear all others
else{recordCollection.splice(0,recordCollection.count,record);}if(silent){me.silent--;}// When starting a selection, register the start cell
if(me.recordCollection.count===1){me.startCell=selector;me.lastRange=null;}}// Cell selection
if(selectionMode.cell&&(selector.columnId||selector.column)&&!me.isSelected(selector)){var deselected=me._selectedCell?[me._selectedCell]:[];//Remember
me._selectedCell=selector;me.triggerChangeEvent({mode:'cell',action:'select',selected:[selector],deselected:deselected,selection:[selector]},silent);}return selector;}/**
     * Deselects all selected rows and cells
     * @category Selection
     */},{key:"deselectAll",value:function deselectAll(){var me=this;me.recordCollection.clear();if(me._selectedCell){me.deselectCell(me._selectedCell);}}/**
     * Deselect a row
     * @param {Common.data.Model|String|Number} recordOrId Record or an id for a record
     * @category Selection
     */},{key:"deselectRow",value:function deselectRow(recordOrId){var record=recordOrId instanceof Model?recordOrId:this.store.getById(recordOrId);record&&this.recordCollection.remove(record);}/**
     * Deselect a cell/row, depending on settings in Grid#selectionMode
     * @param {Object} cellSelector
     * @returns {Object} Normalized cell selector
     * @category Selection
     */},{key:"deselectCell",value:function deselectCell(cellSelector){var me=this,selector=me.normalizeCellContext(cellSelector),selMode=me.selectionMode,record=selector.record||me.store.getById(selector.id),selectedCell=me._selectedCell;// Row selection (both sides if locked columns)
if(selMode.row){me.recordCollection.remove(record);}// Cell selection
if(selMode.cell&&selector.columnId&&selectedCell){if(selectedCell.id===selector.id&&selectedCell.columnId===selector.columnId){me._selectedCell=null;me.triggerChangeEvent({mode:'cell',action:'deselect',selected:[],deselected:[selector],selection:[]});}}return selector;}//endregion
//region Record
/**
     * Selects rows corresponding to a range of records (from fromId to toId)
     * @param {String|Number} fromId
     * @param {String|Number} toId
     * @category Selection
     */},{key:"selectRange",value:function selectRange(fromId,toId){var store=this.store,recordCollection=this.recordCollection,fromIndex=store.indexOf(fromId),toIndex=store.indexOf(toId),startIndex=Math.min(fromIndex,toIndex),endIndex=Math.max(fromIndex,toIndex);if(startIndex===-1||endIndex===-1){throw new Error('Record not found in selectRange');}recordCollection.splice(0,recordCollection.count,store.getRange(startIndex,endIndex+1,false));}/**
     * Triggered from Grid view when records get removed from the store.
     * Deselects all records which have been removed.
     * @private
     * @category Selection
     */},{key:"onStoreRemove",value:function onStoreRemove(event){// If the next mixin up the inheritance chain has an implementation, call it
_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreRemove",this)&&_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreRemove",this).call(this,event);this.recordCollection.remove(event.records);}/**
     * Triggered from Grid view when the store changes. This might happen
     * if store events are batched and then resumed.
     * Deselects all records which have been removed.
     * @private
     * @category Selection
     */},{key:"onStoreDataChange",value:function onStoreDataChange(_ref162){var action=_ref162.action,store=_ref162.source;// If the next mixin up the inheritance chain has an implementation, call it
_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreDataChange",this)&&_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreDataChange",this).apply(this,arguments);if(['dataset','batch'].includes(action)){var selectedRecords=this.recordCollection,toRemove=[];selectedRecords.forEach(function(record){if(!store.includes(record)){toRemove.push(record);}});// Remove in one go to fire a single selectionChange event
selectedRecords.remove(toRemove);}}/**
     * Triggered from Grid view when all records get removed from the store.
     * Deselects all records.
     * @private
     * @category Selection
     */},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){// If the next mixin up the inheritance chain has an implementation, call it
_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreRemoveAll",this)&&_get2(_getPrototypeOf2(GridSelection.prototype),"onStoreRemoveAll",this).call(this);this.deselectAll();}//endregion
//region Handle multiSelect
/**
     * Handles multi selection using the mouse. Called from GridElementEvents on mousedown in a cell and
     * simultaneously pressing a modifier key.
     * @param cellData
     * @param event
     * @private
     * @category Selection
     */},{key:"handleMouseMultiSelect",value:function handleMouseMultiSelect(cellData,event){var me=this,id=cellData.id;function mergeRange(fromId,toId){var store=me.store,recordCollection=me.recordCollection,fromIndex=store.indexOf(fromId),toIndex=store.indexOf(toId),startIndex=Math.min(fromIndex,toIndex),endIndex=Math.max(fromIndex,toIndex);if(startIndex===-1||endIndex===-1){throw new Error('Record not found in selectRange');}var newRange=store.getRange(startIndex,endIndex+1,false).filter(function(row){return me.isSelectable(row);});recordCollection.splice(0,me.lastRange||0,newRange);me.lastRange=newRange;}if((event.metaKey||event.ctrlKey)&&me.isSelected(id)){// ctrl/cmd deselects row if selected
me.deselectRow(id);}else if(me.selectionMode.multiSelect){if(event.shiftKey&&me.startCell){// shift appends selected range (if we have previously focused cell)
mergeRange(me.startCell.id,id);}else if(event.ctrlKey||event.metaKey){// ctrl/cmd adds to selection if using multiselect (and not selected)
me.selectRow(id,false,true);}}}//endregion
//region Navigation
/**
     * Triggered from GridNavigation when focus is moved to another cell within the grid. Selects the cell unless
     * modifier keys are pressed, in which case it has already been handled
     * @private
     * @category Selection
     */},{key:"onCellNavigate",value:function onCellNavigate(me,fromCellSelector,toCellSelector,event){var doSelect=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;// CheckColumn events are handled by the CheckColumn itself.
if(me.columns.getById(toCellSelector.columnId)===me.checkboxColumn){return;}// 1.do not affect selection if focus is returning to the grid from some widget
// 2. don't select when clicking expander icon in a tree
if(!doSelect||me.returningFocus||event&&event.target.classList.contains('b-tree-expander')){return;}var isSameRecord=fromCellSelector&&toCellSelector.id===fromCellSelector.id,isMouse=event&&event.type==='mousedown',isMouseCtrl=isMouse&&event.ctrlKey;// SHIFT for keyboard / mouse and CTRL for mouse events indicate multiselect
if(event&&(!event.button||event.button===2)&&(event.shiftKey||isMouseCtrl)){me.handleMouseMultiSelect(toCellSelector,event);}else{me.selectCell(toCellSelector,false,isSameRecord&&(!event||event.shiftKey||event.ctrlKey)||event&&(isMouseCtrl||event.button===2&&me.isSelected(toCellSelector.id)));}// Remember last cell with ctrl pressed
if(!me.startCell||isMouseCtrl){me.startCell=toCellSelector;me.lastRange=null;}}/**
     * Keeps the UI synced with the selectionchange event before firing it out.
     * Event is not fired if the `silent` parameter is truthy.
     * @param {Object} selectionChangeEvent The change event to sync the UI to, and to possibly fire.
     * @param {Boolean} silent Specify `true` to not trigger any the passed.
     * @private
     * @category Selection
     */},{key:"triggerChangeEvent",value:function triggerChangeEvent(selectionChangeEvent,silent){var me=this,mode=selectionChangeEvent.mode,selected=selectionChangeEvent.selected,deselected=selectionChangeEvent.deselected;var i,len,row,cell;// Keep the UI up to date with the triggered changes.
// A mode: 'row' change selects and/or deselects records.
if(mode==='row'){for(i=0,len=selected.length;i<len;i++){row=me.getRowFor(selected[i]);if(row){row.addCls('b-selected');if(me.checkboxColumn&&!selected[i].meta.specialRow){row.getCell(me.checkboxColumn.id).widget.checked=true;}}}for(i=0,len=deselected.length;i<len;i++){row=me.getRowFor(deselected[i]);if(row){row.removeCls('b-selected');if(me.checkboxColumn&&!deselected[i].meta.specialRow){row.getCell(me.checkboxColumn.id).widget.checked=false;}}}}// A mode: 'cell' change selects and/or deselects *one* cell right now.
// But we always use an array for future-proofing.
else if(mode==='cell'){for(i=0,len=selected.length;i<len;i++){cell=me.getCell(selected[i]);if(cell){cell.classList.add('b-selected');}}for(i=0,len=deselected.length;i<len;i++){cell=me.getCell(deselected[i]);if(cell){cell.classList.remove('b-selected');}}}if(!silent){me.trigger('selectionChange',selectionChangeEvent);}}//endregion
//region Getters/setters
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"recordCollection",set:function set(recordCollection){if(!(recordCollection instanceof Collection)){recordCollection=new Collection(recordCollection);}this._recordCollection=recordCollection;// Fire row change events from onRecordCollectionChange
recordCollection.on({change:'onRecordCollectionChange',thisObj:this});},get:function get(){return this._recordCollection;}},{key:"selectedCell",get:function get(){return this._selectedCell;},set:function set(cellSelector){this.selectCell(cellSelector);}/**
     * The last selected record. Set to select a row or use Grid#selectRow. Set to null to
     * deselect all
     * @property {Common.data.Model}
     * @category Selection
     */},{key:"selectedRecord",get:function get(){return this.recordCollection.last||null;},set:function set(record){this.selectRow(record);}/**
     * Selected records.
     * Can be set as array of ids.
     * ```
     * grid.selectedRecords = [1, 2, 4, 6]
     * ```
     *
     * @property {Common.data.Model[]|Number[]}
     * @category Selection
     */},{key:"selectedRecords",get:function get(){return this.recordCollection.values;},set:function set(selectedRecords){var recordCollection=this.recordCollection,store=this.store,toSelect=[];if(selectedRecords&&selectedRecords.length){var _iteratorNormalCompletion46=true;var _didIteratorError46=false;var _iteratorError46=undefined;try{for(var _iterator46=selectedRecords[Symbol.iterator](),_step46;!(_iteratorNormalCompletion46=(_step46=_iterator46.next()).done);_iteratorNormalCompletion46=true){var record=_step46.value;record=store.getById(record);if(record){toSelect.push(record);}}}catch(err){_didIteratorError46=true;_iteratorError46=err;}finally{try{if(!_iteratorNormalCompletion46&&_iterator46.return!=null){_iterator46.return();}}finally{if(_didIteratorError46){throw _iteratorError46;}}}}// Replace the entire selected collection with the new record set
recordCollection.splice(0,recordCollection.count,toSelect);}/**
     * CSS selector for the currently selected cell. Format is "[data-index=index] [data-column=column]".
     * @type {String}
     * @category Selection
     * @readonly
     */},{key:"selectedCellCSSSelector",get:function get(){var me=this,cell=me._selectedCell,row=cell&&me.getRowById(cell.id);if(!cell||!row)return'';return"[data-index=".concat(row.dataIndex,"] [data-column-id=").concat(cell.columnId,"]");}},{key:"widgetClass",get:function get(){}//endregion
}],[{key:"defaultConfig",get:function get(){return{recordCollection:{}};}}]);return GridSelection;}(Target||Base));};// TODO: prevent multiple rerenders
/**
 * @module Grid/view/mixin/GridState
 */ /**
 * Mixin for Grid that handles state. It serializes the following grid properties:
 *
 * * rowHeight
 * * readOnly
 * * selectedCell
 * * selectedRecords
 * * columns (order, widths, visibility)
 * * store (sorters, groupers, filters)
 * * scroll position
 *
 * See {@link Common.mixin.State} for more information on state.
 *
 * @demo state
 * @externalexample grid/State.js
 * @mixin
 */var GridState=function GridState(Target){return(/*#__PURE__*/function(_ref163){_inherits2(GridState,_ref163);function GridState(){_classCallCheck2(this,GridState);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridState).apply(this,arguments));}_createClass2(GridState,[{key:"getState",/**
     * Get grids current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,
     * selectedRecordId, column states and store state.
     * @returns {Object} State object to be serialized
     * @private
     */value:function getState(){var me=this,style=me.element.style.cssText,state={rowHeight:me.rowHeight,readOnly:me.readOnly};if(style){state.style=style;}if(me.selectedCell){// TODO: Create wrapper class to avoid JSON.stringify recursion in state.selectedCell.
var _me$selectedCell=me.selectedCell,id=_me$selectedCell.id,columnId=_me$selectedCell.columnId;state.selectedCell={id:id,columnId:columnId};}state.selectedRecords=me.selectedRecords.map(function(entry){return entry.id;});state.columns=me.columns.map(function(column){return column.getState();});state.store=me.store.state;state.scroll=me.storeScroll();state.width={};state.collapsed={};me.eachSubGrid(function(subGrid){if(subGrid.flex==null){state.width[subGrid.region]=subGrid.width;}state.collapsed[subGrid.region]=subGrid.collapsed;});return state;}/**
     * Apply previously stored state.
     * @param {Object} state
     * @private
     */},{key:"applyState",value:function applyState(state){var me=this;if('readOnly'in state){me.readOnly=state.readOnly;}if('rowHeight'in state){me.rowHeight=state.rowHeight;}if('style'in state){me.style=state.style;}if('selectedCell'in state){me.selectedCell=state.selectedCell;}if('store'in state){me.store.state=state.store;}if('selectedRecords'in state){me.selectedRecords=state.selectedRecords;}if('columns'in state){// each column triggers rerender at least once...
state.columns.forEach(function(columnState){var column=me.columns.getById(columnState.id);if(column){column.applyState(columnState);column.stateSortIndex=columnState.index;}});me.eachSubGrid(function(subGrid){subGrid.columns.records.sort(function(a,b){return a.stateSortIndex-b.stateSortIndex;});subGrid.columns.allRecords.sort(function(a,b){return a.stateSortIndex-b.stateSortIndex;});});me.columns.sort({fn:function fn(a,b){return a.stateSortIndex-b.stateSortIndex;}// always sort ascending
},true);// manually triggered rerender
me.rendered?me.renderContents():me.render();}if('width'in state){me.eachSubGrid(function(subGrid){if(subGrid.region in state.width){subGrid.width=state.width[subGrid.region];}});}if('collapsed'in state){me.eachSubGrid(function(subGrid){subGrid.collapsed=state.collapsed[subGrid.region];});}if('scroll'in state){me.restoreScroll(state.scroll);}}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GridState;}(Target||Base));};/**
 * @module Grid/view/mixin/GridSubGrids
 */ /**
 * Mixin for grid that handles SubGrids. Each SubGrid is scrollable horizontally separately from the other SubGrids.
 * Having two SubGrids allows you to achieve what is usually called locked or frozen columns.
 *
 * By default a Grid has two SubGrids, one named 'locked' and one 'normal'. The `locked` region has fixed width, while
 * the `normal` region grows to fill all available width (flex).
 *
 * Which SubGrid a column belongs to is
 * determined using its {@link Grid.column.Column#config-region} config. For example to put a column into the locked
 * region, specify `{ region: 'locked' }`. For convenience, a column can be put in the locked region using
 * `{ locked: true }`.
 *
 * @example
 * { data: 'name', text: 'Name', locked: true }
 * { data: 'age', text: 'Age', region: 'locked' }
 *
 * @demo features
 * @mixin
 */var GridSubGrids=function GridSubGrids(Target){return(/*#__PURE__*/function(_ref164){_inherits2(GridSubGrids,_ref164);function GridSubGrids(){_classCallCheck2(this,GridSubGrids);return _possibleConstructorReturn2(this,_getPrototypeOf2(GridSubGrids).apply(this,arguments));}_createClass2(GridSubGrids,[{key:"initSubGrids",//region Init
/**
     * Initializes subGrids from subGrid configs in config.subGridConfigs. Regions specified on columns but not The default config.subGridConfigs is:
     * { normal: { flex: 1 } }
     * @private
     * @category SubGrid
     */value:function initSubGrids(){var me=this,oldRegions=me._regions,usedRegions=new Set();var first=true,hasCalculatedWidth,subGridConfig,subGridColumns;// TODO: move into subgrid or columnmanager
var _iteratorNormalCompletion47=true;var _didIteratorError47=false;var _iteratorError47=undefined;try{for(var _iterator47=me.columns.records[Symbol.iterator](),_step47;!(_iteratorNormalCompletion47=(_step47=_iterator47.next()).done);_iteratorNormalCompletion47=true){var column=_step47.value;if(column.region&&!me.subGridConfigs[column.region]){me.subGridConfigs[column.region]={};}usedRegions.add(column.region);}// If "reconfiguring" columns, we are going to create new subgrids so destroy any existing
}catch(err){_didIteratorError47=true;_iteratorError47=err;}finally{try{if(!_iteratorNormalCompletion47&&_iterator47.return!=null){_iterator47.return();}}finally{if(_didIteratorError47){throw _iteratorError47;}}}if(oldRegions){oldRegions.forEach(function(region){return me.subGrids[region].destroy();});}/**
         * An object containing the {@link Grid.view.SubGrid} region instances, indexed by subGrid id ('locked', normal'...)
         * @property {Object} subGrids
         * @readonly
         */me.subGrids={};me._regions=Array.from(usedRegions);me._regions.sort();// Implementer has provided configs for other subGrids but not normal, put defaults in place
if(me.subGridConfigs.normal&&Object.keys(me.subGridConfigs.normal).length===0){me.subGridConfigs.normal=Grid.defaultConfig.subGridConfigs.normal;}var _iteratorNormalCompletion48=true;var _didIteratorError48=false;var _iteratorError48=undefined;try{var _loop3=function _loop3(){var region=_step48.value;subGridColumns=me.columns.makeChained(function(column){return column.childLevel===0&&column.region===region;},['region']);subGridConfig=ObjectHelper.assign({},me.subGridConfigs[region],{owner:me,grid:me,store:me.store,rowManager:me.rowManager,region:region,headerClass:me.subGridConfigs[region].headerClass||me.headerClass,columns:subGridColumns,hideHeaders:me.hideHeaders});hasCalculatedWidth=false;if(!subGridConfig.flex&&!subGridConfig.width){subGridConfig.width=subGridColumns.totalFixedWidth;hasCalculatedWidth=true;}me.subGrids[region]=new SubGrid(subGridConfig);// Must be set after creation, otherwise reset in SubGrid#set width
me.subGrids[region].hasCalculatedWidth=hasCalculatedWidth;if(first){// Have already done lookups for this in a couple of places, might as well store it...
me.subGrids[region].isFirstRegion=true;first=false;}};for(var _iterator48=me._regions[Symbol.iterator](),_step48;!(_iteratorNormalCompletion48=(_step48=_iterator48.next()).done);_iteratorNormalCompletion48=true){_loop3();}}catch(err){_didIteratorError48=true;_iteratorError48=err;}finally{try{if(!_iteratorNormalCompletion48&&_iterator48.return!=null){_iterator48.return();}}finally{if(_didIteratorError48){throw _iteratorError48;}}}}/**
     * Destroy all SubGrids.
     * @private
     */},{key:"doDestroy",value:function doDestroy(){this.callEachSubGrid('destroy');_get2(_getPrototypeOf2(GridSubGrids.prototype),"doDestroy",this).call(this);}//endregion
//region Iteration & calling
/**
     * Iterate over all subGrids, calling the supplied function for each.
     * @param {Function} fn Function to call for each instance
     * @param {Object} thisObj `this` reference to call the function in, defaults to the subGrid itself
     * @category SubGrid
     * @internal
     */},{key:"eachSubGrid",value:function eachSubGrid(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var me=this;//for (let subGrid of Object.values(this.subGrids)) {
me.regions.forEach(function(region,i){var subGrid=me.subGrids[region];fn.call(thisObj||subGrid,subGrid,i++);});}},{key:"eachWidget",value:function eachWidget(fn){var deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this;me.regions.forEach(function(region){var widget=me.subGrids[region];if(fn(widget)===false){return;}if(deep&&widget.eachWidget){widget.eachWidget(fn,deep);}});}/**
     * Call a function by name for all subGrids (that have the function).
     * @param {String} fnName Name of function to call, uses the subGrid itself as `this` reference
     * @param params Parameters to call the function with
     * @return {*} Return value from first SubGrid is returned
     * @category SubGrid
     * @internal
     */},{key:"callEachSubGrid",value:function callEachSubGrid(fnName){for(var _len60=arguments.length,params=new Array(_len60>1?_len60-1:0),_key59=1;_key59<_len60;_key59++){params[_key59-1]=arguments[_key59];}// TODO: make object { normal: retval, locked: retval } to return? or store. revisit when needed
var me=this,returnValue=null;//Object.values(this.subGrids).forEach((subGrid, i) => {
me.regions.forEach(function(region,i){var subGrid=me.subGrids[region];if(subGrid[fnName]){var partialReturnValue=subGrid[fnName].apply(subGrid,params);if(i===0)returnValue=partialReturnValue;}});return returnValue;}//endregion
//region Getters
/**
     * This method should return names of the two last regions in the grid as they are visible in the UI. In case
     * `regions` property cannot be trusted, use different approach. Used by SubGrid and RegionResize to figure out
     * which region should collapse or expand.
     * @returns {String[]}
     * @private
     * @category SubGrid
     */},{key:"getLastRegions",value:function getLastRegions(){var result=this.regions.slice(-2);// ALWAYS return array of length 2 in order to avoid extra conditions. Normally should not be called with 1 region
return result.length===2?result:[result[0],result[0]];}/**
     * This method should return right neighbour for passed region, or left neighbour in case last visible region is passed.
     * This method is used to decide which subgrid should take space of the collapsed one.
     * @param {String} region
     * @returns {String}
     * @private
     * @category SubGrid
     */},{key:"getNextRegion",value:function getNextRegion(region){var regions=this.regions;// return next region or next to last
return regions[regions.indexOf(region)+1]||regions[regions.length-2];}},{key:"getPreviousRegion",value:function getPreviousRegion(region){return this.regions[this.regions.indexOf(region)-1];}/**
     * Returns the subGrid for the specified region.
     * @param {String} region Region, eg. locked or normal (per default)
     * @returns {Grid.view.SubGrid} A subGrid
     * @category SubGrid
     */},{key:"getSubGrid",value:function getSubGrid(region){return this.subGrids[region];}/**
     * Get the SubGrid that contains specified column
     * @param {String|Grid.column.Column} column Column "name" or column object
     * @returns {Grid.view.SubGrid}
     * @category SubGrid
     */},{key:"getSubGridFromColumn",value:function getSubGridFromColumn(column){column=column instanceof Column?column:this.columns.get(column)||this.columns.getById(column);return this.getSubGrid(column.region);}},{key:"onSubGridCollapse",//endregion
//region Resize
//endregion
value:function onSubGridCollapse(subGrid){var splitterEl=this.resolveSplitter(subGrid);splitterEl.classList.add('b-grid-splitter-collapsed');// 5 in next 2 lines is the default splitter width as defined in SASS.
splitterEl.style.width="".concat(subGrid.collapsedStateWidth+subGrid.splitterWidth,"px");splitterEl.style.left="".concat(Math.max(subGrid.element.offsetLeft-subGrid.splitterWidth,0),"px");}},{key:"onSubGridExpand",value:function onSubGridExpand(subGrid){var splitterEl=this.resolveSplitter(subGrid);splitterEl.classList.remove('b-grid-splitter-collapsed');splitterEl.style.width='';}/**
     * Returns splitter element for subgrid
     * @param {Grid.view.SubGrid|String} subGrid
     * @returns {HTMLElement}
     * @private
     * @category SubGrid
     */},{key:"resolveSplitter",value:function resolveSplitter(subGrid){var me=this,regions=me.getLastRegions();var region=subGrid instanceof SubGrid?subGrid.region:subGrid;if(regions[1]===region){region=regions[0];}return this.subGrids[region].splitterElement;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"regions",get:function get(){if(!this._regions){this.initSubGrids();}return this._regions;}},{key:"widgetClass",get:function get(){}}]);return GridSubGrids;}(Target||Base));};/**
 * @module Common/widget/layout/Fit
 */ /**
 * A helper class for containers which must manage a single child widget which must fit the container's
 * {@link Common.widget.Widget#property-contentElement contentElement}.
 */var Fit=/*#__PURE__*/function(_Layout2){_inherits2(Fit,_Layout2);function Fit(){_classCallCheck2(this,Fit);return _possibleConstructorReturn2(this,_getPrototypeOf2(Fit).apply(this,arguments));}_createClass2(Fit,null,[{key:"defaultConfig",get:function get(){return{containerCls:'b-fit-container',itemCls:'b-fit-item'};}}]);return Fit;}(Layout);// Layouts must register themselves so that the static layout instantiation
// in Layout knows what to do with layout type names
Fit._$name='Fit';Layout.registerLayout(Fit);/**
 * @module Common/widget/Editor
 */ /**
 * Displays an input field, optionally editing a field of a record at a particular position.
 *
 * Offers events to signal edit completion upon `ENTER` or focus loss (if configured to do so),
 * or edit cancellation on `ESC`, or focus loss if configured that way.
 * @extends Common/widget/Container
 *
 * @classType Editor
 */var Editor=/*#__PURE__*/function(_Container6){_inherits2(Editor,_Container6);function Editor(){_classCallCheck2(this,Editor);return _possibleConstructorReturn2(this,_getPrototypeOf2(Editor).apply(this,arguments));}_createClass2(Editor,[{key:"afterConfigure",//endregion
//region Events
/**
     * Fired before the editor is shown to start an edit operation. Returning `false` from a handler vetoes the edit operation.
     * @event beforestart
     * @property {Object} value - The value to be edited.
     * @preventable
     */ /**
     * Fired when an edit operation has begun.
     * @event start
     * @property {Object} value - The starting value of the field.
     * @property {Common.widget.Editor} source - The Editor that triggered the event.
     */ /**
     * Fired when an edit completion has been requested, either by `ENTER`, or focus loss (if configured to complete on blur).
     * The completion may be vetoed, in which case, focus is moved back into the editor.
     * @event beforecomplete
     * @property {Object} oldValue - The original value.
     * @property {Object} value - The new value.
     * @property {Common.widget.Editor} source - The Editor that triggered the event.
     * @preventable
     */ /**
     * Edit has been completed, and any associated record or element has been updated.
     * @event complete
     * @property {Object} oldValue - The original value.
     * @property {Object} value - The new value.
     * @property {Common.widget.Editor} source - The Editor that triggered the event.
     */ /**
     * Fired when cancellation has been requested, either by `ESC`, or focus loss (if configured to cancel on blur).
     * The cancellation may be vetoed, in which case, focus is moved back into the editor.
     * @event beforecancel
     * @property {Object} oldValue - The original value.
     * @property {Object} value - The new value.
     * @property {Common.widget.Editor} source - The Editor that triggered the event.
     * @preventable
     */ /**
     * Edit has been canceled without updating the associated record or element.
     * @event cancel
     * @property {Object} oldValue - The original value.
     * @property {Object} value - The value of the field.
     * @property {Common.widget.Editor} source - The Editor that triggered the event.
     */ /**
     * Fire to relay a `keypress` event from the field.
     * @event keypress
     * @property {Event} event - The key event.
     */ //endregion
value:function afterConfigure(){var me=this;_get2(_getPrototypeOf2(Editor.prototype),"afterConfigure",this).call(this);if(me.completeKey||me.cancelKey){EventHelper.on({element:me.element,keydown:'onKeyDown',thisObj:me});}LocaleManagerSingelton.on({locale:'onLocaleChange',thisObj:me});}},{key:"onLocaleChange",value:function onLocaleChange(){var me=this;if(me.inputField){me.inputField.syncInputFieldValue();}}/**
     * Start editing
     * @param {Object} editObject An object containing details about what to edit.
     * @param {HTMLElement/Common.helper.util.Rectangle} editObject.target the element or Rectangle to align to.
     * @param {String} [editObject.align=t0-t0] How to align to the target.
     * @param {Boolean} [editObject.matchSize=true] Match editor size to target size.
     * @param {Common.data.Model} [editObject.record] The record to edit.
     * @param {String} [editObject.field] The field name in the record to edit. This defaults to the `name` of the {@link #config-inputField}.
     * Also if record has method set + capitalized field, method will be called, e.g. if record has method named
     * `setFoobar` and this config is `foobar`, then instead of `record.foobar = value`, `record.setFoobar(value)` will be called.
     * @param {Object} [editObject.value] The value to edit.
     * @param {Boolean} [editObject.focus=true] Focus the field.
     */},{key:"startEdit",value:function startEdit(_ref165){var target=_ref165.target,_ref165$align=_ref165.align,align=_ref165$align===void 0?'t0-t0':_ref165$align,_ref165$matchSize=_ref165.matchSize,matchSize=_ref165$matchSize===void 0?true:_ref165$matchSize,value=_ref165.value,record=_ref165.record,_ref165$field=_ref165.field,field=_ref165$field===void 0?this.inputField.name:_ref165$field,_ref165$focus=_ref165.focus,focus=_ref165$focus===void 0?true:_ref165$focus;var me=this,inputField=me.inputField,targetRect=target instanceof Rectangle?target:Rectangle.inner(target);if(me.trigger('beforestart',{value:value})!==false){if(record&&field&&value===undefined){me.record=record;me.dataField=field;value=record[field];}if(matchSize){me.width=targetRect.width;me.height=targetRect.height;}inputField.value=value;me.showBy({target:target,align:align});if(focus&&me.inputField.focus){me.inputField.focus();}if(target.nodeType===1){target.classList.add('b-editing');}// Passed value may have been '10/06/2019', send the live field value to startedit
me.trigger('start',{value:inputField.value});me.oldValue=inputField.value;// If the value from th value getter is an array, we must clone it because
// if it's the same *instance*, the ObjectHelper.isEqual test in completeEdit
// will find that there are no changes.
if(Array.isArray(me.oldValue)){me.oldValue=me.oldValue.slice();}return true;}return false;}},{key:"refreshEdit",value:function refreshEdit(){if(this.isVisible){var record=this.record,dataField=this.dataField,inputField=this.inputField;if(record&&dataField){var value=record[dataField];// Only update the field if the value has changed
if(!ObjectHelper.isEqual(inputField.value,value)){inputField.value=value;}}}}},{key:"onKeyDown",value:function onKeyDown(event){var me=this;switch(event.key){case me.completeKey:me.completeEdit();event.stopImmediatePropagation();break;case me.cancelKey:me.cancelEdit();event.stopImmediatePropagation();break;}me.trigger('keydown',{event:event});}},{key:"onFocusOut",value:function onFocusOut(event){_get2(_getPrototypeOf2(Editor.prototype),"onFocusOut",this).call(this,event);if(!this.isFinishing){var method=this["".concat(this.blurAction,"Edit")];if(method){method.call(this);}}}/**
     * Complete the edit, and, if associated with a record, update the record if possible.
     * If editing is completed, the editor is hidden.
     *
     * If the field is invalid, and this Editor is configured `{@link #config-allowInvalid}: false`
     * then editing is not completed.
     *
     * If a {@link #event-beforecomplete} handler returns `false` then editing is not completed.
     *
     * If the field's valus has not been changed, then editing is terminated through {@link #function-cancelEdit}.
     *
     * @returns `true` if editing ceased, `false` if the editor is still active.
     */},{key:"completeEdit",value:function completeEdit(){var me=this,inputField=me.inputField,oldValue=me.oldValue,value=inputField.value;// If we're configured not to allow invalid values, refocus the field in case complete was triggered by focusout.
if(!inputField.isValid&&!(me.allowInvalid||inputField.allowInvalid)){inputField.focus&&inputField.focus();return false;}// No change means a cancel.
else if(ObjectHelper.isEqual(value,oldValue)){me.cancelEdit();return true;}// Allow veto of the completion
else{var context={value:value,oldValue:oldValue};if(me.trigger('beforecomplete',context)===false){inputField.focus&&inputField.focus();}// EXPERIMENTAL: Allow async finalization of the editing, implementer may want to show a confirmation popup etc
else if(context.async){context.async.then(function(result){if(result===true){me.onEditComplete();}else{inputField.setError(result||inputField.L('invalidValue'));if(!(me.allowInvalid||inputField.allowInvalid)){inputField.focus&&inputField.focus();}}});return false;}// Successful completion
else{me.onEditComplete();return true;}}return false;}/**
     * Cancel the edit and hide the editor.
     */},{key:"cancelEdit",value:function cancelEdit(){var me=this,inputField=me.inputField,oldValue=me.oldValue,value=inputField.value;if(!me.isFinishing&&me.trigger('beforecancel',{value:value,oldValue:oldValue})!==false){// Hiding must not trigger our blurAction
me.isFinishing=true;me.hide();me.trigger('cancel',{value:value,oldValue:oldValue});me.isFinishing=false;}}// Handle updating what needs to be updated.
},{key:"onEditComplete",value:function onEditComplete(){var me=this,record=me.record,dataField=me.dataField,inputField=me.inputField,oldValue=me.oldValue,lastAlignSpec=me.lastAlignSpec,target=lastAlignSpec.target,value=inputField.value;if(!me.isFinishing){// Hiding must not trigger our blurAction
me.isFinishing=true;me.hide();if(record){var setterName="set".concat(StringHelper.capitalizeFirstLetter(dataField));if(record[setterName]){record[setterName](value);}else{record[dataField]=value;}}me.trigger('complete',{value:value,oldValue:oldValue});if(target.nodeType===1){target.classList.remove('b-editing');}me.isFinishing=false;}}},{key:"doDestroy",value:function doDestroy(){if(this.createdInputField){this.inputField.destroy();}_get2(_getPrototypeOf2(Editor.prototype),"doDestroy",this).call(this);}},{key:"owner",set:function set(owner){this._owner=owner;}// This is a positioned widget appended to a Widget's contentElement. It has no owner link.
// Grab the owner by finding what widget it is inside.
,get:function get(){return this._owner||IdHelper.fromElement(this.element.parentNode);}},{key:"items",get:function get(){return this._items=[this.inputField];}},{key:"inputField",set:function set(inputField){var me=this;if(me._inputField){me._inputField.destroy();}if(typeof inputField==='string'){inputField={type:inputField};}if(inputField instanceof Widget){me._inputField=inputField;}else{me._inputField=WidgetHelper.createWidget(inputField);me.createdInputField=true;// So we know we can destroy it
}me._inputField.parent=me;},get:function get(){return this._inputField;}}],[{key:"defaultConfig",//region Config
get:function get(){return{positioned:true,hidden:true,layout:'fit',/**
             * A config object, or the `type` string of the input field which this editor will encapsulate.
             * @config {Object|String}
             * @default
             */inputField:'textfield',/**
             * What action should be taken when focus moves out of the editor, either by `TAB` or clicking outside.
             * May be `'complete'` or `'cancel`'. Any other value results in no action being taken upon focus leaving the editor
             * leaving the application to listen for the {@link Common.widget.Widget#event-focusout focusout} event.
             * @config {String}
             * @default
             */blurAction:'complete',/**
             * The name of the `key` which completes the edit.
             *
             * See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.
             * @config {String}
             * @default
             */completeKey:'Enter',/**
             * The name of the `key` which cancels the edit.
             *
             * See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values for key names.
             * @config {String}
             * @default
             */cancelKey:'Escape',/**
             * Configure as `true` to allow editing to complete when the field is invalid. Editing may always be _canceled_.
             * @config {String}
             * @default
             */allowInvalid:false};}}]);return Editor;}(Container);Editor._$name='Editor';BryntumWidgetAdapterRegister.register('editor',Editor);//TODO: Maybe some more way to stop editing in touch mode (in case grid fills entire page...)
var validNonEditingKeys={Enter:1,F2:1};var validEditingKeys={ArrowUp:1,ArrowDown:1,ArrowLeft:1,ArrowRight:1};/**
 * @module Grid/feature/CellEdit
 */ /**
 * Adding this feature to the grid enables cell editing, usage instructions:
 * <h3>Start editing</h3>
 * * Double click on a cell
 * * Press [ENTER] or [F2] with a cell selected
 *
 * <h3>While editing</h3>
 * * [ENTER] <dd>Finish editing and start editing the same cell in next row
 * * [SHIFT] + [ENTER] <dd>Same as above put with previous row
 * * [F2] <dd>Finish editing
 * * [CMD/CTRL] + [ENTER] <dd>Finish editing
 * * [ESC] <dd>Cancel editing
 * * [TAB] <dd>Finish editing and start editing the next cell
 * * [SHIFT] + [TAB] <dd>Finish editing and start editing the previous cell
 *
 * Columns specify editor in their config, editor can
 * also by set by using a column type.
 *
 * <h3>Preventing editing of certain cells</h3>
 * You can prevent editing on a column by setting `editor` to false:
 *
 * ```javascript
 * new Grid({
 *    columns : [
 *       {
 *          type   : 'number',
 *          text   : 'Age',
 *          field  : 'age',
 *          editor : false
 *       }
 *    ]
 * ```
 * To prevent editing in a specific cell, listen to the {@link #event-beforeCellEditStart} and return false:
 *
 * ```javascript
 * grid.on('beforeCellEditStart', ({ editorContext }) => {
 *     return editorContext.column.field !== 'id';
 * });
 * ```
 *
 * This feature is <strong>enabled</strong> by default.
 *
 * @example
 * { data: 'name', text: 'Name', editor: 'text' }
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @demo celledit
 * @classtype cellEdit
 * @externalexample feature/CellEdit.js
 */var CellEdit=/*#__PURE__*/function(_Delayable13){_inherits2(CellEdit,_Delayable13);function CellEdit(){_classCallCheck2(this,CellEdit);return _possibleConstructorReturn2(this,_getPrototypeOf2(CellEdit).apply(this,arguments));}_createClass2(CellEdit,[{key:"construct",//endregion
//region Init
value:function construct(grid,config){var me=this;me.grid=grid;_get2(_getPrototypeOf2(CellEdit.prototype),"construct",this).call(this,grid,config);me.storeListenerDetacher=grid.store.on({update:'onStoreUpdate',thisObj:me});me.listenerDetacher=grid.on({cellclick:'onCellClick',celldblclick:'onCellDblClick',beforerenderrows:'onGridBeforeRenderRows',thisObj:me});}},{key:"doDestroy",value:function doDestroy(){this.cancelEditing(true);this.listenerDetacher();this.storeListenerDetacher();_get2(_getPrototypeOf2(CellEdit.prototype),"doDestroy",this).call(this);}//endregion
//region Editing
/**
     * Is any cell currently being edited?
     * @returns {boolean}
     */},{key:"getEditorForCell",/**
     * Internal function to create of get existing editor for specified cell.
     * @private
     * @param cellContext Cell to get or create editor for
     * @returns {{editor: (Element|*|null), field: *, widget: *}}
     * @category Internal
     */value:function getEditorForCell(_ref166){var column=_ref166.column,selector=_ref166.selector;var me=this,grid=me.grid;// Reuse the editor by caching it on the column
var editor=column._cellEditor;if(!editor){column.editor.autoSelect=me.autoSelect;editor=column._cellEditor=new me.editorClass({cls:'b-cell-editor',inputField:column.editor,blurAction:'none',completeKey:false,cancelKey:false,owner:grid,listeners:me.getEditorListeners()});// Keep the record synced with the value
if(column.instantUpdate){ObjectHelper.wrapProperty(column.editor,'value',null,function(v){// Only tickle the record if the value has changed.
if(me.editorContext&&!ObjectHelper.isEqual(me.editorContext.record[me.editorContext.column.field],v)){me.editorContext.record[me.editorContext.column.field]=v;}});}}var widgetWrapperData=editor.element.dataset;widgetWrapperData.rowId=selector.id;widgetWrapperData.columnId=selector.columnId;widgetWrapperData.field=column.field;return me.editor=editor;}// Turned into function to allow overriding in Gantt, and make more configurable in general
},{key:"getEditorListeners",value:function getEditorListeners(){return{focusout:'onEditorFocusOut',focusin:'onEditorFocusIn',start:'onEditorStart',beforecomplete:'onEditorBeforeComplete',complete:'onEditorComplete',cancel:'onEditorCancel',thisObj:this};}},{key:"onEditorStart",value:function onEditorStart(_ref167){var editor=_ref167.source;var me=this,editorContext=me.editorContext=editor.cellEditorContext;if(editorContext){var grid=me.grid,cell=editorContext.cell,_editor=editorContext.editor,column=editorContext.column;// Match editorTarget size and position
if(column.editTargetSelector){var editorTarget=cell.querySelector(column.editTargetSelector);if(editorTarget){_editor.width-=editorTarget.offsetLeft;DomHelper.addTranslateX(_editor.element,editorTarget.offsetLeft);}}cell.classList.add('b-editing');me.grid.on({cellclick:'onCellClickWhileEditing',viewportResize:'onViewportResizeWhileEditing'},me);// Handle tapping outside of the grid element. Use GlobalEvents
// because it uses a capture:true listener before any other handlers
// might stop propagation.
// Cannot use delegate here. A tapped cell will match :not(#body-container)
me.removeEditingListeners=GlobalEvents.addListener({globaltap:'onTapOut',thisObj:me});/**
             * Fires on the owning Grid when editing starts
             * @event startCellEdit
             * @param {Grid.view.Grid} grid **Deprecated** Use `source` instead
             * @param {Grid.view.Grid} source Owner grid
             * @param {Object} editorContext Editing context
             * @param {Common.widget.Editor} editorContext.editor The Editor being used.
             * Will contain an `inputField` property which is the field being used to perform the editing.
             * @param {Grid.column.Column} editorContext.column Target column
             * @param {Common.data.Model} editorContext.record Target record
             * @param {HTMLElement} editorContext.cell Target cell
             * @param {*} editorContext.value Cell value
             */grid.trigger('startCellEdit',{grid:grid,editorContext:editorContext});}}},{key:"onEditorBeforeComplete",value:function onEditorBeforeComplete(context){var grid=this.grid,editor=context.source,editorContext=editor.cellEditorContext;context.grid=grid;context.editorContext=editorContext;/**
         * Fires on the owning Grid before the cell editing is finished, return false to signal that the value is invalid and editing should not be finalized.
         * @event beforeFinishCellEdit
         * @param {Grid.view.Grid} grid Target grid
         * @param {Object} editorContext Editing context
         * @param {Common.widget.Editor} editorContext.editor The Editor being used.
         * Will contain an `inputField` property which is the field being used to perform the editing.
         * @param {Grid.column.Column} editorContext.column Target column
         * @param {Common.data.Model} editorContext.record Target record
         * @param {HTMLElement} editorContext.cell Target cell
         * @param {*} editorContext.value Cell value
         */return grid.trigger('beforeFinishCellEdit',context);}},{key:"onEditorComplete",value:function onEditorComplete(_ref168){var editor=_ref168.source;var grid=this.grid,editorContext=editor.cellEditorContext;// Ensure the docs below are accurate!
editorContext.value=editor.inputField.value;/**
         * Fires on the owning Grid when cell editing is finished
         * @event finishCellEdit
         * @param {Grid.view.Grid} grid Target grid
         * @param {Object} editorContext Editing context
         * @param {Common.widget.Editor} editorContext.editor The Editor being used.
         * Will contain an `inputField` property which is the field being used to perform the editing.
         * @param {Grid.column.Column} editorContext.column Target column
         * @param {Common.data.Model} editorContext.record Target record
         * @param {HTMLElement} editorContext.cell Target cell
         * @param {*} editorContext.value Cell value
         */grid.trigger('finishCellEdit',{grid:grid,editorContext:editorContext});this.cleanupAfterEdit(editorContext);}},{key:"onEditorCancel",value:function onEditorCancel(){var editorContext=this.editorContext,muteEvents=this.muteEvents,grid=this.grid;if(editorContext){this.cleanupAfterEdit(editorContext);}if(!muteEvents){/**
             * Fires on the owning Grid when editing is cancelled
             * @event cancelCellEdit
             * @param {Grid.view.Grid} grid **Deprecated** Use `source` instead
             * @param {Grid.view.Grid} source Owner grid
             */grid.trigger('cancelCellEdit',{grid:grid});}}},{key:"cleanupAfterEdit",value:function cleanupAfterEdit(editorContext){var me=this,editor=editorContext.editor;editorContext.cell.classList.remove('b-editing');editor.cellEditorContext=me.editorContext=null;me.grid.un({cellclick:'onCellClickWhileEditing',viewportResize:'onViewportResizeWhileEditing'},me);me.removeEditingListeners();// MS Edge workaround.
// At this moment active element is grid.element, but removing editor element still triggers focusout event
// which is processed by the GlobalEvents, which decides that focus goes to body element. That, in turn, triggers
// clearFocus on grid navigation, removing focused cell from cache etc, eventually focus actually goes to body.
// Suspending listener to seamlessly remove element keeping focus where it belongs.
// NOTE: not reproducible in IFrame, so our tests cannot catch this
GlobalEvents.suspendFocusEvents();editor.element.remove();GlobalEvents.resumeFocusEvents();}/**
     * Find the next succeeding or preceding cell which is editable (column.editor != false)
     * @param {Object} cellInfo
     * @param {Boolean} isForward
     * @returns {Object}
     * @private
     * @category Internal
     */},{key:"getAdjacentEditableCell",value:function getAdjacentEditableCell(cellInfo,isForward){var addNewAtEnd=this.addNewAtEnd,grid=this.grid,store=grid.store,rowManager=grid.rowManager,rowId=cellInfo.id,columnId=cellInfo.columnId,columns=grid.columns,column=columns.getAdjacentLeaf(columnId,isForward);while(rowId){var record=store.getById(rowId);if(column){columnId=column.id;if(!column.hidden&&column.editor&&column.canEdit(record)){return{id:rowId,columnId:column.id};}column=columns.getAdjacentLeaf(columnId,isForward);}else{var editRec=store.getAdjacent(cellInfo.id,isForward,false,true);if(!editRec&&isForward&&addNewAtEnd){editRec=store.add(_typeof(addNewAtEnd)==='object'?ObjectHelper.clone(addNewAtEnd):{})[0];// If the new record was not added due to it being off the end of the rendered block
// ensure we force it to be there before we attempt to edit it.
if(!rowManager.getRowFor(editRec)){rowManager.displayRecordAtBottom();}}rowId=editRec&&editRec.id;if(editRec){column=isForward?columns.first:columns.leaves[columns.leaves.length-1];}}}return null;}/**
     * Creates an editing context object for the passed cell context (target cell must be in the DOM).
     *
     * If the referenced cell is editable, an object returned will
     * be returned containing the following properties:
     *
     *     - column
     *     - record
     *     - cell
     *     - value
     *     - selector
     *
     * If the references cell is _not_ editable, `false` will be returned.
     * @param {Object} cellContext an object which encapsulates a cell.
     * @param {String} cellContext.id The record id of the row to edit
     * @param {String} cellContext.columnId The column id of the column to edit
     * @private
     */},{key:"getEditingContext",value:function getEditingContext(cellContext){cellContext=this.grid.normalizeCellContext(cellContext);var me=this,grid=me.grid,column=grid.columns.getById(cellContext.columnId),record=grid.store.getById(cellContext.id),cell=grid.getCell(cellContext);// Cell must be in the DOM to edit.
// Cannot edit hidden columns and columns without an editor.
// Cannot edit special rows (groups etc).
if(cell&&column&&!column.hidden&&column.editor&&record&&!record.meta.specialRow&&column.canEdit(record)){var value=record&&record[column.field];return{column:column,record:record,cell:cell,value:value===undefined?null:value,selector:cellContext};}else{return false;}}/**
     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.
     * This function is exposed on Grid and can thus be called as `grid.startEditing(...)`
     * @param {Object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See {@link Grid.view.Grid#function-getCell} for details.
     * @fires startCellEdit
     * @returns {Boolean} editingStarted
     * @category Editing
     */},{key:"startEditing",value:function startEditing(){var cellContext=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;// If already editing, or grid is readonly, no can do.
if(!(me.editorContext||me.disabled||me.grid.readOnly||me.grid.disabled)){var grid=me.grid,normalizedContext=grid.normalizeCellContext(cellContext);// First scroll record into view and register it as last focusedCell
grid.focusCell(cellContext);var editorContext=me.getEditingContext(normalizedContext);/**
             * Fires on the owning Grid before editing starts, return `false` to prevent editing
             * @event beforeCellEditStart
             * @preventable
             * @param {Grid.view.Grid} source Owner grid
             * @param {Object} editorContext Editing context
             * @param {Grid.column.Column} editorContext.column Target column
             * @param {Common.data.Model} editorContext.record Target record
             * @param {HTMLElement} editorContext.cell Target cell
             * @param {*} editorContext.value Cell value
             */if(grid.trigger('beforeCellEditStart',{grid:grid,editorContext:editorContext})===false){return false;}// Cannot edit hidden columns and columns without an editor
// Cannot edit special rows (groups etc).
if(editorContext){// Focus grid element to preserve focus inside once editing is started
// https://app.assembla.com/spaces/bryntum/tickets/8155-grid-cell-not-properly-focused-in-advanced-demo
DomHelper.focusWithoutScrolling(grid.element);var editor=editorContext.editor=me.getEditorForCell(editorContext),cell=editorContext.cell,record=editorContext.record,column=editorContext.column;// Prevent highlight when setting the value in the editor
editor.inputField.highlightExternalChange=false;editor.cellEditorContext=editorContext;editor.render(me.grid.getSubGridFromColumn(column).element);// Attempt to start edit.
// We will set up our context in onEditorStart *if* the start was successful.
editor.startEdit({target:cell,record:record});return true;}}return false;}/**
     * Cancel editing, destroys the editor
     * @param {Boolean} silent Pass true to prevent method from firing event
     * @fires cancelCellEdit
     * @category Editing
     */},{key:"cancelEditing",value:function cancelEditing(){var silent=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,editorContext=me.editorContext,editor=me.editor,grid=me.grid;if(editorContext){// If cancel was not called from onEditorFocusOut, then refocus the grid.
if(editor.containsFocus){// Kill editorContext before we destroy the editor so that we know we are not editing
// in ensuing focusout event handling
me.editorContext=null;// Control focus reversion if we own focus
if(editor.inputField.owns(DomHelper.activeElement)){grid.focus();}me.editorContext=editorContext;}me.muteEvents=silent;editor.cancelEdit();me.muteEvents=false;}}/**
     * Finish editing, update the underlying record and destroy the editor
     * @fires finishCellEdit
     * @category Editing
     * @returns `false` if the edit could not be finished due to the value being invalid or the
     * Editor's `complete` event was vetoed.
     */},{key:"finishEditing",value:function finishEditing(){var editorContext=this.editorContext;if(editorContext){return editorContext.editor.completeEdit();}return false;}//endregion
//region Context menu
// /**
//  * Populates the cell context menu with an 'Edit cell' item.
//  * @private
//  * @param column
//  * @param {Common.data.Model} record
//  * @param {Array} items
//  * @returns {Array}
//  * @category Internal
//  */
// getCellMenuItems(column, record, items) {
//     const me = this;
//
//     if (column.editor !== false) {
//         items.push({
//             text   : this.L('editCell'),
//             icon   : 'edit',
//             id     : 'cellEdit',
//             onItem : () => {
//                 me.editorContext && me.finishEditing();
//                 // selecting in context menu triggers cancel, which is fine in other cases...
//                 me.startEditing({ id : record.id, columnId : column.id, field : column.field });
//                 me.preventFinish = true;
//             }
//         });
//     }
//     return items;
// }
//endregion
//region Events
/**
     * Event handler added when editing is active called when user clicks a cell in the grid during editing.
     * It finishes editing and moves editor to the selected cell instead.
     * @private
     * @category Internal event handling
     */},{key:"onCellClickWhileEditing",value:function onCellClickWhileEditing(_ref169){var event=_ref169.event,cellSelector=_ref169.cellSelector;var me=this;// Ignore clicks in the editor.
if(!me.editorContext.editor.owns(event.target)){if(me.getEditingContext(cellSelector)){// Attempt to finish the current edit.
// Will return false if the field is invalid.
if(me.finishEditing()){me.startEditing(cellSelector);}// Previous edit was invalid, return to it.
else{me.grid.focusCell(me.editorContext.selector);me.editor.inputField.focus();}}else{me.finishEditing();}}}},{key:"onViewportResizeWhileEditing",value:function onViewportResizeWhileEditing(){var _this$editorContext=this.editorContext,editor=_this$editorContext.editor,column=_this$editorContext.column;editor.width=column.element.offsetWidth;}/**
     * Starts editing if user taps selected cell again on touch device. Chained function called when user clicks a cell.
     * @private
     * @category Internal event handling
     */},{key:"onCellClick",value:function onCellClick(_ref170){var grid=_ref170.source,record=_ref170.record,cellSelector=_ref170.cellSelector,cellElement=_ref170.cellElement,target=_ref170.target,event=_ref170.event;var selected=grid.focusedCell||{},column=grid.columns.getById(cellSelector.columnId);// Columns may provide their own handling of cell editing
if(column.onCellClick){column.onCellClick({grid:grid,column:column,record:record,cellSelector:cellSelector,cellElement:cellElement,target:target,event:event});}else if(target.matches('.b-tree-expander')){this.cancelEditing();return false;}else if(DomHelper.isTouchEvent&&cellSelector.id==selected.id&&cellSelector.columnId==selected.columnId){this.startEditing(cellSelector);}}/**
     * Chained function called when user dbl clicks a cell. Starts editing.
     * @private
     * @category Internal event handling
     */},{key:"onCellDblClick",value:function onCellDblClick(_ref171){var cellSelector=_ref171.cellSelector;var me=this;if(me.editorContext&&!me.finishEditing()){return;}me.startEditing(cellSelector);}/**
     * Update the input field if underlying data changes during edit.
     * @private
     * @category Internal event handling
     */},{key:"onStoreUpdate",value:function onStoreUpdate(_ref172){var changes=_ref172.changes,record=_ref172.record;var editorContext=this.editorContext;if(editorContext&&editorContext.editor.isVisible){if(record===editorContext.record&&editorContext.editor.dataField in changes){editorContext.editor.refreshEdit();}}}/**
     * Invalidate editor when grid renders rows.
     * @private
     * @category Internal event handling
     */},{key:"onGridBeforeRenderRows",value:function onGridBeforeRenderRows(){// grid rows are being rerendered, meaning the underlying data might be changed.
// the editor probably won't be over the same record, so cancel
if(this.editorContext&&this.editorContext.editor.isVisible){this.cancelEditing();}}/**
     * Chained function called on key down. [enter] or [f2] starts editing. [enter] also finishes editing and starts
     * editing next row, [f2] also finishes editing without moving to the next row. [esc] cancels editing. [tab]
     * edits next column, [shift] + [tab] edits previous.
     * @param event
     * @private
     * @category Internal event handling
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){var me=this;// flagging event with handled = true used to signal that other features should probably not care about it
if(event.handled)return;if(!me.editorContext){var key=event.key,editingStartedWithCharacterKey=me.autoEdit&&(key.length===1||key==='Backspace');// enter or f2 to edit, or any character key if autoEdit is enabled
if((editingStartedWithCharacterKey||validNonEditingKeys[key])&&me.grid.focusedCell){event.preventDefault();if(!me.startEditing(me.grid.focusedCell)){return;}var inputField=me.editor.inputField,input=inputField.input;// if editing started with a keypress and the editor has an input field, set its value
if(editingStartedWithCharacterKey&&input){// Simulate a keydown in an input field by setting input value
// plus running our internal processing of that event
input.value=key==='Backspace'?'':key;inputField.internalOnInput(event);// IE11 + Edge put caret at 0 when focusing
inputField.moveCaretToEnd();}}}else{// enter
if(event.key==='Enter'){event.preventDefault();event.stopPropagation();if(me.finishEditing()){// Finalizing might have been blocked by an invalid value
if(!me.isEditing){// Enter in combination with special keys finishes editing
// On touch Enter always finishes editing. Feels more natural since no tab-key etc.
if(event.ctrlKey||event.metaKey||event.altKey||me.grid.touch){return;}// Edit previous
else if(event.shiftKey){if(me.grid.navigateUp()){me.startEditing(me.grid.focusedCell);}}// Edit next
else if(me.grid.navigateDown()){me.startEditing(me.grid.focusedCell);}}}}// f2
if(event.key==='F2'){event.preventDefault();me.finishEditing();}// esc
if(event.key==='Escape'){event.stopPropagation();event.preventDefault();me.cancelEditing();}// tab
if(event.key==='Tab'){event.preventDefault();var focusedCell=me.grid.focusedCell;if(focusedCell){var cellInfo=me.getAdjacentEditableCell(focusedCell,!event.shiftKey);if(cellInfo){if(me.finishEditing()){me.grid.focusCell(cellInfo,{animate:100});me.startEditing(cellInfo);}}}}// prevent arrow keys from moving editor
if(validEditingKeys[event.key]){event.handled=true;}}}},{key:"onElementMouseDown",value:function onElementMouseDown(event){// If it's a contextmenu mousedown during cell edit, prevent default
// because the contextmenu handler will move focus directly to the context menu.
// If we allow it to go through the grid, the edit will not terminate because
// that usually means begin editing somewhere else in the grid.
// TODO: This won't be necessary when cells are the focusable DOM unit.
if(event.button===2&&this.editorContext){event.preventDefault();}}/**
     * Cancel editing on widget focusout
     * @private
     */},{key:"onEditorFocusOut",value:function onEditorFocusOut(event){var me=this,grid=me.grid;// If the editor is not losing focus as a result of its tidying up process
// And focus is moving to outside of the grid, or back to the initiating cell
// (which indicates a click on empty space below rows), then explicitly terminate.
if(me.editorContext&&!me.editor.isFinishing&&me.editor.inputField.owns(event.target)&&(event.toWidget!==grid||grid.isLocationEqual(me.grid.focusedCell,me.editorContext.selector))){if(me.blurAction==='cancel'){me.cancelEditing();}else{me.finishEditing();}}}},{key:"onEditorFocusIn",value:function onEditorFocusIn(event){var widget=event.toWidget;if(widget===this.editor.inputField){if(this.autoSelect&&widget.selectAll&&!widget.readOnly&&!widget.disabled){widget.selectAll();}}}/**
     * Cancel edit on touch outside of grid for mobile Safari (focusout not triggering unless you touch something focusable)
     * @private
     */},{key:"onTapOut",value:function onTapOut(_ref173){var event=_ref173.event;var me=this;if(!me.grid.bodyContainer.contains(event.target)){if(!me.editor.inputField.owns(event.target)){if(me.blurAction==='cancel'){me.cancelEditing();}else{me.finishEditing();}}}}/**
     * Finish editing if clicking below rows (only applies when grid is higher than rows).
     * @private
     * @category Internal event handling
     */},{key:"onElementClick",value:function onElementClick(event){var me=this;if(event.target.classList.contains('b-grid-body-container')&&me.editorContext){me.finishEditing();}}//endregion
},{key:"isEditing",get:function get(){return Boolean(this.editorContext);}}],[{key:"defaultConfig",//region Config
// Default configuration
get:function get(){return{/**
             * Set to true to select the field text when editing starts
             * @config {Boolean}
             * @default
             */autoSelect:true,/**
             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.
             * May be `'complete'` or `'cancel`'.
             * @config {String}
             * @default
             */blurAction:'complete',/**
             * Set to true to have TAB on the last cell in the data set create a new record
             * and begin editing it at its first editable cell.
             *
             * If this is configured as an object, it is used as the default data value set for each new record.
             * @config {Boolean/Object}
             * @default
             */addNewAtEnd:null,/**
             * Set to true to start editing when user starts typing text on a focused cell (as in Excel)
             * @config {Boolean}
             * @default
             */autoEdit:false,/**
             * Class to use as an editor. Default value: {@link Common.widget.Editor}
             * @config {Common.widget.Widget}
             * @internal
             */editorClass:Editor};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{assign:['startEditing'],before:['onElementKeyDown','onElementMouseDown'],chain:['onElementClick']};}}]);return CellEdit;}(Delayable(InstancePlugin));CellEdit.featureClass='b-cell-edit';CellEdit._$name='CellEdit';GridFeatureManager.registerFeature(CellEdit,true);//region Import
//endregion
/**
 * @module Grid/view/Grid
 */var resolvedPromise=new Promise(function(resolve){return resolve();}),defaultScrollOptions$2={block:'nearest',inline:'nearest'};/**
 * The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the {@link Grid.view.TreeGrid}).
 *
 * <h2>Intro</h2>
 * The Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the browser. The two
 * most important configs are {@link #config-store} and {@link #config-columns}. With the store config, you decide which data to load into the grid.
 * You can work with both in-memory arrays or load data using ajax. See the {@link Common.data.Store} class to learn more about loading data into stores.
 *
 * The columns config accepts an array of {@link Grid.column.Column Column} descriptors defining which fields that will be displayed in the grid.
 * The {@link Grid.column.Column#config-field} property in the column descriptor maps to a field in your dataset. The simplest grid configured with inline data and two columns would
 * look like this:
 *
 *      let grid = new Grid({
 *          appendTo : document.body,
 *
 *          columns: [
 *              { field: 'name', text: 'Name' },
 *              { field: 'job', text: 'Job', renderer: ({value}) => value ? value : 'Unemployed' }
 *          ],
 *
 *          data: [
 *              { name: 'Bill', job: 'Retired' },
 *              { name: 'Elon', job: 'Visionary' },
 *              { name: 'Me' }
 *          ]
 *      });
 *
 * {@inlineexample grid/Grid.js}
 * <h2>Features</h2>
 * To avoid the Grid core being bloated, its main features are implemented in separate ´feature´ classes. These can be turned on and off based
 * on your requirements. To configure (or disable) a feature, use the {@link #config-features} object to provide your desired configuration for the features
 * you want to use. Each feature has an ´id´ that you use as a key in the features object:
 *
 *      let grid = new Grid({
 *          appendTo : document.body,
 *
 *          features : {
 *              cellEdit     : false,
 *              regionResize : true,
 *              cellTooltip  : {
 *                  tooltipRenderer : (data) => {
 *                  }
 *              },
 *              ...
 *          }
 *      });
 *
 * {@region Column configuration options}
 * A grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a Column to a field in your dataset, or define a custom {@link Grid.column.Column#config-renderer}.
 * The renderer function receives one object parameter containing rendering data for the current cell being rendered.
 *
 *      let grid = new Grid({
 *          appendTo : document.body,
 *
 *          columns: [
 *              {
 *                  field: 'task',
 *                  text: 'Task',
 *                  renderer: (renderData) => {
 *                      const record = renderData.record;
 *
 *                      if (record.percentDone === 100) {
 *                          renderData.cellElement.classList.add('taskDone');
 *                          renderData.cellElement.style.background = 'green';
 *                      }
 *
 *                      return renderData.value;
 *                  }
 *              }
 *          ]
 *      });
 *
 * {@endregion}
 * {@region Grid sections (aka "locked" or "frozen" columns)}
 * The grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns that
 * don't fit the available width of the screen. To enable this feature, simply mark the columns you want to `lock`.
 * Locked columns are then displayed in their own section to the left of the other columns:
 *
 *      let grid = new Grid({
 *          appendTo : document.body,
 *          width    : 500,
 *          subGridConfigs : {
 *              // set a fixed locked section width if desired
 *              locked : { width: 300 }
 *          },
 *          columns : [
 *              { field : 'name', text : 'Name', width : 200, locked : true },
 *              { field : 'firstName', text : 'First name', width : 100, locked : true },
 *              { field : 'surName', text : 'Last name', width : 100, locked : true },
 *              { field : 'city', text : 'City', width : 100 },
 *              { type : 'number', field : 'age', text : 'Age', width : 200 },
 *              { field : 'food', text : 'Food', width : 200 }
 *          ]
 *      });
 *
 * {@inlineexample grid/LockedGrid.js}
 * You can also move columns between sections by using drag and drop, or use the built-in header context menu. If you want to be able to resize the
 * locked grid section, enable the {@link Grid.feature.RegionResize regionResize} feature.
 * {@endregion}
 * {@region Filtering}
 * One important requirement of a good Grid component is the ability to filter large datasets to quickly find what you're looking for. To
 * enable filtering (through the context menu), add the {@link Grid.feature.Filter filter} feature:
 *
 *      let grid = new Grid({
 *          features: {
 *              filter: true
 *          }
 *      });
 *
 * Or activate a default filter at initial rendering:
 *
 *      let grid = new Grid({
 *          features: {
 *              filter: { property : 'city', value : 'New York' }
 *          }
 *      });
 *
 * {@inlineexample feature/Filter.js}
 * {@endregion}
 * {@region Tooltips}
 * If you have a data models with many fields, and you want to show
 * additional data when hovering over a cell, use the {@link Grid.feature.CellTooltip cellTooltip} feature. To show a tooltip for all cells:
 *
 *      let grid = new Grid({
 *          features: {
 *              cellTooltip: ({value}) => value
 *          }
 *      });
 *
 * {@inlineexample feature/CellTooltip.js}
 * {@endregion}
 * {@region Inline Editing (default <strong>on</strong>)}
 * To enable inline cell editing in the grid, simply add the {@link Grid.feature.CellEdit cellEdit} feature:
 *
 *      let grid = new Grid({
 *          appendTo : document.body,
 *
 *          features : {
 *              cellEdit : true
 *          },
 *          columns: [
 *              {
 *                  field: 'task',
 *                  text: 'Task'
 *              }
 *          ]
 *      });
 *
 * {@inlineexample feature/CellEdit.js}
 * {@endregion}
 * {@region Context Menu}
 * Use the {@link Grid.feature.ContextMenu contextMenu} feature if you want your users to be able to interact with the data through the context menu:
 *
 *      let grid = new Grid({
 *          features: {
 *              contextMenu: {
 *                  headerItems: [
 *                      {
 *                          text: 'Show info',
 *                          icon: 'fa fa-info-circle',
 *                          weight: 200,
 *                          onItem : ({ item }) => console.log(item.text)
 *                      }
 *                  ],
 *
 *              cellItems: [
 *                  { text: 'Show options', icon: 'fa fa-gear', weight: 200 }
 *              ]
 *          }
 *      }
 *
 * {@inlineexample feature/ContextMenu.js}
 * {@endregion}
 * {@region Grouping}
 * To group rows by a field in your dataset, use the {@link Grid.feature.Group group} feature.
 * {@inlineexample feature/Group.js}
 * {@endregion}
 * {@region Searching}
 * When working with lots of data, a quick alternative to filtering is the {@link Grid.feature.Search search} feature. It highlights
 * matching values in the grid as you type.
 * {@inlineexample feature/Search.js}
 * {@endregion}
 * {@region Loading and saving data}
 * The grid keeps all its data in a {@link Common.data.Store}, which is essentially an Array of {@link Common.data.Model Model} items.
 * You define your own Model representing your data entities and use the Model API to get and set values.
 *
 *      class Person extends Model {}
 *
 *      let person = new Person({
 *          name: 'Steve',
 *          age: 38
 *      });
 *
 *      person.name = 'Linda'; // person object is now `dirty`
 *
 *      let store = new Store({
 *          data : [
 *              { name : 'Don', age : 40 }
 *          ]
 *      });
 *
 *      store.add(person);
 *
 *      console.log(store.count()); // === 2
 *
 *      store.remove(person); // Remove from store
 *
 * When you update a record in a store, it's considered dirty, until you call {@link Common.data.mixin.StoreCRUD#function-commit commit} on the containing Store. You can also configure your Store to commit automatically (like Google docs).
 * If you use an AjaxStore, it will send changes to your server when commit is called.
 * Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell it to refresh manually.
 *
 * To learn more about loading and saving data, please refer to [this guide](#guides/data/displayingdata.md).
 * {@endregion}
 * {@region Default configs}
 * There is a myriad of configs and features available for Grid, some of them on by default and some of them requiring
 * extra configuration. The code below tries to illustrate the major things that are used by default:
 *
 * ```javascript
 * let grid = new Grid({
 *    // The following features are enabled by default:
 *    features : {
 *        cellEdit      : true,
 *        columnPicker  : true,
 *        columnReorder : true,
 *        columnResize  : true,
 *        contextMenu   : true,
 *        group         : true,
 *        sort          : true
 *    },
 *
 *    animateRemovingRows       : true,  // Rows will slide out on removal
 *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`
 *    columnLines               : true,  // Themes might override it to hide lines anyway
 *    emptyText                 : 'No rows to display',
 *    enableTextSelection       : false, // Not allowed to select text in cells by default,
 *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid
 *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes
 *    loadMask                  : 'Loading...',
 *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns
 *    responsiveLevels : {
 *      small : 400,
 *      medium : 600,
 *      large : '*'
 *    },
 *    rowHeight                 : null,  // Determined using CSS, it will measure rowHeight
 *    showDirty                 : false, // No indicator for changed cells
 *    showRemoveInContextMenu   : true   // Context menu has "Remove row" item
 * });
 * ```
 * {@endregion}
 * {@region Performance}
 * In general the Grid widget has very good performance and you can try loading any amount of data in the <a target="_blank" href="../examples/bigdataset">bigdataset</a> demo.
 * The overall rendering performance is naturally affected by many other things than
 * the data volume. Other important factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of features enabled
 * and of course the browser (Chrome fastest, IE slowest).
 * {@endregion}
 *
 * @extends Common/widget/Widget
 * @mixes Common/mixin/Events
 * @mixes Common/mixin/Pluggable
 * @mixes Common/mixin/State
 * @mixes Grid/view/mixin/GridElementEvents
 * @mixes Grid/view/mixin/GridFeatures
 * @mixes Grid/view/mixin/GridResponsive
 * @mixes Grid/view/mixin/GridSelection
 * @mixes Grid/view/mixin/GridState
 * @mixes Grid/view/mixin/GridSubGrids
 *
 * @classType grid
 */var Grid=/*#__PURE__*/function(_base$mixes3){_inherits2(Grid,_base$mixes3);function Grid(){_classCallCheck2(this,Grid);return _possibleConstructorReturn2(this,_getPrototypeOf2(Grid).apply(this,arguments));}_createClass2(Grid,[{key:"finishConfigure",//endregion
//region Init-destroy
value:function finishConfigure(config){var me=this;_get2(_getPrototypeOf2(Grid.prototype),"finishConfigure",this).call(this,config);me.scrollManager=new ScrollManager({grid:me,// Horizontal scrolling might happen on different subgrids, but vertical is always on same element
verticalElement:me.scrollable.element});// When locale is applied columns react and change, which triggers `change` event on columns store for each
// changed column, and every change normally triggers rendering view. This overhead becomes noticeable with
// larger amount of columns. So we set two listeners to locale events: prioritized listener to be executed first
// and suspend renderContents method and unprioritized one to resume method and call it immediately.
LocaleManagerSingelton.on({locale:'onBeforeLocaleChange',prio:1,thisObj:me});LocaleManagerSingelton.on({locale:'onLocaleChange',prio:-1,thisObj:me});GlobalEvents.on({theme:'onThemeChange',thisObj:me});// Access the property getter to ensure that all regions have been initialized
me._thisIsAUsedExpression(me.regions);// Add the extra grid classes to the element
me.setGridClassList(me.element.classList);}},{key:"onBeforeLocaleChange",value:function onBeforeLocaleChange(){this._suspendRenderContentsOnColumnsChanged=true;}},{key:"onLocaleChange",value:function onLocaleChange(){this._suspendRenderContentsOnColumnsChanged=false;this.rendered?this.renderContents():this.render();}},{key:"finalizeInit",value:function finalizeInit(){_get2(_getPrototypeOf2(Grid.prototype),"finalizeInit",this).call(this);if(this.store.isLoading){// Maybe show loadmask if store is already loading when grid is constructed
this.onStoreLoadStart();}}/**
     * Cleanup
     * @private
     */},{key:"doDestroy",value:function doDestroy(){var me=this;me.storeDetacher&&me.storeDetacher();for(var _i22=0,_Object$values3=Object.values(me.features);_i22<_Object$values3.length;_i22++){var feature=_Object$values3[_i22];feature.destroy&&feature.destroy();}if(me.columns){me.columns=null;}if(me.store){me.store=null;}_get2(_getPrototypeOf2(Grid.prototype),"doDestroy",this).call(this);}/**
     * Adds extra classes to the Grid element after it's been configured.
     * Also iterates through features, thus ensuring they have been initialized.
     * @private
     */},{key:"setGridClassList",value:function setGridClassList(classList){var me=this;classList.add("b-grid-".concat(me.positionMode));// TODO: enableTextSelection should be a setter, enabling toggling at any time
if(!me.enableTextSelection){classList.add('b-grid-notextselection');}if(me.autoHeight){classList.add('b-autoheight');}if(me.readOnly){classList.add('b-readonly');}if(me.fillLastColumn){classList.add('b-fill-last-column');}if(me.showDirty){classList.add('b-show-dirty');}for(var featureName in me.features){var feature=me.features[featureName],featureClass=void 0;if(feature.constructor.hasOwnProperty('featureClass')){featureClass=feature.constructor.featureClass;}else{featureClass="b-".concat(feature instanceof Base?feature.$name:feature.constructor.name);}if(featureClass){classList.add(featureClass.toLowerCase());}}}//endregion
//region Functions & events injected by features
// For documentation & typings purposes
//region Feature events
/**
     * *Only when the {@link Grid.feature.Tree} feature is enabled*.
     * <p>Fired before a record toggles its collapsed state.
     * @event beforeToggleNode
     * @param {Common.data.Model} record The record being toggled.
     * @param {Boolean} collapse `true` if the node is being collapsed.
     */ /**
     * *Only when the {@link Grid.feature.Tree} feature is enabled*.
     * <p>Fired after a record has been collapsed.
     * @event collapseNode
     * @param {Common.data.Model} record The record which has been collapsed.
     */ /**
     * *Only when the {@link Grid.feature.Tree} feature is enabled*.
     * <p>Fired after a record has been expanded.
     * @event expandNode
     * @param {Common.data.Model} record The record which has been expanded.
     */ /**
     * *Only when the {@link Grid.feature.Tree} feature is enabled*.
     * <p>Fired after a record toggles its collapsed state.
     * @event toggleNode
     * @param {Common.data.Model} record The record being toggled.
     * @param {Boolean} collapse `true` if the node is being collapsed.
     */ //endregion
/**
     * Collapse all groups/parent nodes.
     *
     * *NOTE: Only available when the {@link Grid/feature/Group Group} or the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function collapseAll
     * @category Feature shortcuts
     */ /**
     * Expand all groups/parent nodes.
     *
     * *NOTE: Only available when the {@link Grid/feature/Group Group} or the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function expandAll
     * @category Feature shortcuts
     */ /**
     * Start editing specified cell. If no cellContext is given it starts with the first cell in the first row.
     *
     * *NOTE: Only available when the {@link Grid/feature/CellEdit CellEdit} feature is enabled.*
     *
     * @function startEditing
     * @param {Object} cellContext Cell specified in format { id: 'x', columnId/column/field: 'xxx' }. See {@link Grid.view.Grid#function-getCell} for details.
     * @returns {Boolean}
     * @category Feature shortcuts
     */ /**
     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.
     *
     * *NOTE: Only available when the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function toggleCollapse
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to toggle
     * @param {Boolean} [collapse] Force collapse (true) or expand (false)
     * @param {Boolean} [skipRefresh] Set to true to not refresh rows (if calling in batch)
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Collapse a single node.
     *
     * *NOTE: Only available when the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function collapse
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to collapse
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Expand a single node.
     *
     * *NOTE: Only available when the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function expand
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to expand
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Expands parent nodes to make this node "visible".
     *
     * *NOTE: Only available when the {@link Grid/feature/Tree Tree} feature is enabled.*
     *
     * @function expandTo
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node
     * @returns {Promise}
     * @category Feature shortcuts
     */ //endregion
//region Grid template & elements
},{key:"template",value:function template(data){var virtualScrollerStyle=BrowserHelper.isFirefox?"height:".concat(DomHelper.scrollBarWidth,"px"):'';// SubGrids are set up first time regions are pulled in
this._thisIsAUsedExpression(data.regions);return TemplateHelper.tpl(_templateObject26(),this.hideHeaders?'b-hidden':'',DomHelper.scrollBarWidth?'':'b-overlay-scrollbar',virtualScrollerStyle);}},{key:"onColumnsChanged",value:function onColumnsChanged(_ref174){var action=_ref174.action,changes=_ref174.changes,column=_ref174.record;var me=this;if(action==='update'){// Just updating width is already handled in a minimal way.
if('width'in changes||'minWidth'in changes||'flex'in changes){// Update any leaf columns that want to be repainted on size change
if(me.rendered){var region=column.region;me.columns.visibleColumns.forEach(function(col){if(col.region===region&&col.repaintOnResize){me.refreshColumn(col);}});}return;}// Column toggled, need to recheck if any visible column has flex
if('hidden'in changes){var subGrid=me.getSubGridFromColumn(column.id);subGrid.header.fixHeaderWidths();if(subGrid.footer){subGrid.footer.fixFooterWidths();}subGrid.updateHasFlex();}}// New columns set ("reconfiguring"), or moved to previously not available region
if(action==='dataset'||changes&&'region'in changes&&!me.regions.includes(changes.region.value)){// Create required subgrids (removing existing)
me.initSubGrids();// Render and jump start them
me.eachSubGrid(function(subGrid){subGrid.render(me.verticalScroller);subGrid.initScroll();});}if(!me._suspendRenderContentsOnColumnsChanged){me.renderContents();}}},{key:"onColumnsResized",value:function onColumnsResized(_ref175){var changes=_ref175.changes,column=_ref175.record;var me=this,setWidth=changes.width&&column.flex==null,setMinWidth=changes.minWidth&&column.flex==null,setFlex=changes.flex&&column.width==null,domWidth=DomHelper.setLength(column.width),domMinWidth=DomHelper.setLength(column.minWidth),subGrid=me.getSubGridFromColumn(column.id);// Let header and footer fix their own widths
subGrid.header.fixHeaderWidths();if(subGrid.footer){subGrid.footer.fixFooterWidths();}subGrid.updateHasFlex();if(!me.cellEls||column!==me.lastColumnResized){me.cellEls=DomHelper.children(me.element,".b-grid-cell[data-column-id=".concat(column.id,"]"));me.lastColumnResized=column;}var _iteratorNormalCompletion49=true;var _didIteratorError49=false;var _iteratorError49=undefined;try{for(var _iterator49=me.cellEls[Symbol.iterator](),_step49;!(_iteratorNormalCompletion49=(_step49=_iterator49.next()).done);_iteratorNormalCompletion49=true){var cell=_step49.value;if(setWidth){// https://app.assembla.com/spaces/bryntum/tickets/8041
// Although header and footer elements must be sized
// using flex-basis to avoid the busting out problem,
// grid cells MUST be sized using width since rows are absolutely
// positioned and will not cause the busting out problem,
// and rows will not stretch to shrinkwrap the cells
// unless they are widthed with width.
cell.style.width=domWidth;cell.style.flex='';// IE11 calculates flexbox container width based on min-width rather than actual width. When column
// has width defined greater than minWidth, row may have incorrect width
if(BrowserHelper.isIE11){cell.style.minWidth=domWidth;}}else if(setMinWidth){cell.style.minWidth=domMinWidth;}else if(setFlex){cell.style.flex=column.flex;cell.style.width='';}else{cell.style.flex=cell.style.width=cell.style.minWidth='';}}// If we're being driven by the ColumnResizer, it will
// call afterColumnsResized.
}catch(err){_didIteratorError49=true;_iteratorError49=err;}finally{try{if(!_iteratorNormalCompletion49&&_iterator49.return!=null){_iterator49.return();}}finally{if(_didIteratorError49){throw _iteratorError49;}}}if(!me.dragResizing){me.afterColumnsResized();}}},{key:"afterColumnsResized",value:function afterColumnsResized(){var me=this;me.refreshVirtualScrollbars();me.eachSubGrid(function(subGrid){if(!subGrid.collapsed){subGrid.fixWidths();subGrid.fixRowWidthsInSafariEdge();subGrid.refreshFakeScroll();}});me.lastColumnResized=me.cellEls=null;}//endregion
//region Rows
/**
     * Get the Row that is currently displayed at top.
     * @member {Grid.row.Row} topRow
     * @readonly
     * @category Rows
     * @private
     */ /**
     * Get the Row currently displayed furthest down.
     * @member {Grid.row.Row} bottomRow
     * @readonly
     * @category Rows
     * @private
     */ /**
     * Get Row for specified record id.
     * @function getRowById
     * @param {Common.data.Model|String|Number} recordOrId Record id (or a record)
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     * @private
     */ /**
     * Returns top and bottom for rendered row or estimated coordinates for unrendered.
     * @function getRecordCoords
     * @param {Common.data.Model|string|Number} recordOrId Record or record id
     * @returns {Object} Record bounds with format { top, height, bottom }
     * @category Calculations
     * @private
     */ /**
     * Get the Row at specified index. "Wraps" index if larger than available rows.
     * @function getRow
     * @param {Number} index
     * @returns {Grid.row.Row}
     * @category Rows
     * @private
     */ /**
     * Get a Row for either a record, a record id or an HTMLElement
     * @function getRowFor
     * @param {HTMLElement|Common.data.Model|String|Number} recordOrId Record or record id or HTMLElement
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     * @private
     */ /**
     * Get a Row from an HTMLElement
     * @function getRowFromElement
     * @param {HTMLElement} element
     * @returns {Grid.row.Row} Found Row or null if record not rendered
     * @category Rows
     * @private
     */},{key:"showEmptyText",value:function showEmptyText(){this.bodyContainer&&this.bodyContainer.classList[this.rowManager.rowCount||this.store.isLoading?'remove':'add']('b-grid-empty');}//endregion
//region Store
/**
     * Hooks up data store listeners
     * @private
     * @category Store
     */},{key:"bindStore",value:function bindStore(store){var me=this;me.storeDetacher=store.on({refresh:me.onStoreDataChange,update:me.onStoreUpdateRecord,add:me.onStoreAdd,remove:me.onStoreRemove,move:me.onStoreMove,replace:me.onStoreReplace,removeall:me.onStoreRemoveAll,loadstart:me.onStoreLoadStart,afterrequest:me.onStoreAfterRequest,clearchanges:me.onStoreDataChange,exception:me.onStoreException},me);}},{key:"onStoreUpdateRecord",/**
     * Rerenders a cell if a record is updated in the store
     * @private
     * @category Store
     */value:function onStoreUpdateRecord(_ref176){var store=_ref176.source,record=_ref176.record,data=_ref176.data;var me=this;if(me.forceFullRefresh){// flagged to need full refresh (probably from using GroupSummary)
me.rowManager.refresh();me.forceFullRefresh=false;}else{var row;// Search for old row if id was changed
if(record.isFieldModified('id')){row=me.getRowFor(record.meta.modified.id);}row=row||me.getRowFor(record);// not rendered, bail out
if(!row)return;// We must refresh the full row if it's a special row which has signalled
// an update because it has no cells.
if(me.fullRowRefresh||record.meta.specialRow){var index=store.indexOf(record);if(index!==-1){row.render(index,record);}}else{Object.keys(data).forEach(function(field){var cell=row.getCell(field);if(cell)row.renderCell(cell,record);});}}}},{key:"refreshFromRowOnStoreAdd",value:function refreshFromRowOnStoreAdd(row,context){var me=this,rowManager=me.rowManager;rowManager.renderFromRow(row);rowManager.trigger('changeTotalHeight',{totalHeight:rowManager.totalHeight});// First record? Also update fake scrollers
// TODO: Consider making empty grid scrollable to not have to do this
if(me.store.count===1){me.callEachSubGrid('refreshFakeScroll');}}/**
     * Refreshes rows when data is added to the store
     * @private
     * @category Store
     */},{key:"onStoreAdd",value:function onStoreAdd(_ref177){var store=_ref177.source,records=_ref177.records,index=_ref177.index,oldIndex=_ref177.oldIndex,isChild=_ref177.isChild,oldParent=_ref177.oldParent,isMove=_ref177.isMove;// Do not react if the content has not been rendered
if(!this.rendered){return;}// If it's the addition of a child to a collapsed zone, the UI does not change.
if(isChild&&!records[0].ancestorsExpanded(store)){return;}this.rowManager.calculateRowCount(false,true,true);var me=this,rowManager=me.rowManager,topIndex=rowManager.topIndex,rows=rowManager.rows,rowCount=rowManager.rowCount,bottomIndex=rowManager.topIndex+rowManager.rowCount-1,dataStart=index,dataEnd=index+records.length-1,atEnd=bottomIndex>=store.count-records.length-1;// When moving a node within a tree we might need the redraw to include its old parent and its children. Not worth
// the complexity of trying to do a partial render for this, rerender all rows to be safe.
// Moving records within a flat store is handled elsewhere, in onStoreMove
// TODO: Moving within a tree should also trigger 'move' (https://app.assembla.com/spaces/bryntum/tickets/7270)
if(oldParent||oldIndex>-1||isChild&&isMove){rowManager.refresh();}// Added block starts in our visible block. Render from there downwards.
else if(dataStart>=topIndex&&dataStart<topIndex+rowCount){me.refreshFromRowOnStoreAdd.apply(me,[rows[dataStart-topIndex]].concat(Array.prototype.slice.call(arguments)));}// Added block ends in our visible block, render block
else if(dataEnd>=topIndex&&dataEnd<topIndex+rowCount){rowManager.refresh();}// If added block is outside of the visible area, no visible change
// but potentially a change in total dataset height.
else{// If we are against the end of the dataset, and have appended records
// ensure they are rendered below
if(atEnd&&index>bottomIndex){rowManager.fillBelow(me._scrollTop);}rowManager.trigger('changeTotalHeight',{totalHeight:rowManager.totalHeight});}}/**
     * Responds to exceptions signalled by the store
     * @private
     * @category Store
     */},{key:"onStoreException",value:function onStoreException(event){var me=this;var message;switch(event.type){case'server':message=event.response.message||'Unspecified failure';break;case'exception':if(event.exceptionType==='network'){message='Network error';}else{// Server sent something that couldn't be parsed
message=event.error&&event.error.message||'Failed to parse server response';}break;default:message=event.response.status+' - '+event.response.statusText||'Unknown error';}// eslint-disable-next-line
var messageHTML="<div class=\"b-grid-load-failure\">\n                <div class=\"b-grid-load-fail\">".concat(me.L('loadFailedMessage'),"</div>\n                <div class=\"b-grid-load-fail\">").concat(event.response.url?event.response.url+' responded with':'',"</div>\n                <div class=\"b-grid-load-fail\">").concat(message,"</div>\n            </div>");if(me.activeMask){me.activeMask.icon=me.loadMaskErrorIcon;me.activeMask.text=messageHTML;me.loadmaskHideTimer=me.setTimeout(function(){me.unmaskBody();},me.loadMaskHideTimeout);}}/**
     * Refreshes rows when data is changed in the store
     * @private
     * @category Store
     */},{key:"onStoreDataChange",value:function onStoreDataChange(_ref178){var action=_ref178.action,changes=_ref178.changes,store=_ref178.source;// If the next mixin up the inheritance chain has an implementation, call it
_get2(_getPrototypeOf2(Grid.prototype),"onStoreDataChange",this)&&_get2(_getPrototypeOf2(Grid.prototype),"onStoreDataChange",this).apply(this,arguments);var me=this,isGroupFieldChange=store.isGrouped&&changes&&me.groupers.find(function(grouper){return grouper.field in changes;});// If it's new data, the old calculation is invalidated.
if(action==='dataset'){me.rowManager.averageRowHeight=null;}// No need to rerender if it's a change of the value of the group field which
// will be responded to by StoreGroup
if(me.rendered&&!isGroupFieldChange){// Return to top if setting new data or is filtering
me.renderRows(null,action==='dataset'||action==='filter');}me.showEmptyText();}/**
     * Shows a load mask while the connected store is loading
     * @private
     * @category Store
     */},{key:"onStoreLoadStart",value:function onStoreLoadStart(){if(this.loadMask){this.maskBody(this.loadMask);}}/**
     * Hides load mask after a load request ends either in success or failure
     * @private
     * @category Store
     */},{key:"onStoreAfterRequest",value:function onStoreAfterRequest(event){if(this.activeMask&&!event.exception){this.unmaskBody();}}/**
     * Animates removal of record.
     * @private
     * @category Store
     */},{key:"onStoreRemove",value:function onStoreRemove(_ref179){var records=_ref179.records,isCollapse=_ref179.isCollapse,isChild=_ref179.isChild,isMove=_ref179.isMove;// Do not react if the content has not been rendered,
// or if it is a move, which will be handled by onStoreAdd
if(!this.rendered||isMove){return;}// GridSelection mixin does its job on records removing
_get2(_getPrototypeOf2(Grid.prototype),"onStoreRemove",this)&&_get2(_getPrototypeOf2(Grid.prototype),"onStoreRemove",this).apply(this,arguments);var topRowIndex=Math.pow(2,53)-1;var me=this,rowManager=this.rowManager,rowsToRemove=records.reduce(function(result,record){var row=rowManager.getRowById(record.id);if(row){result.push(row);// Rows are repositioned in the array, it matches visual order. Need to find actual index in it
topRowIndex=Math.min(topRowIndex,rowManager.rows.indexOf(row));}return result;},[]);if(me.animateRemovingRows&&rowsToRemove.length&&!isCollapse&&!isChild){var topRow=rowsToRemove[0];me.isAnimating=true;// As soon as first row has disappeared, rerender the view
EventHelper.on({element:topRow._elementsArray[0],transitionend:function transitionend(e){me.isAnimating=false;// hovering triggers background-color transitions, ignore those
if(e.propertyName!=='background-color'&&e.propertyName!=='width'){rowsToRemove.forEach(function(row){return row.removeCls('b-removing');});rowManager.refresh();// undocumented internal event for scheduler
me.trigger('rowRemove');}},once:true});rowsToRemove.forEach(function(row){return row.addCls('b-removing');});}else{// Potentially remove rows and change dataset height
rowManager.calculateRowCount(false,true,true);// If there were rows below which have moved up into place
// then repurpose them with their new records
if(rowManager.rows[topRowIndex]){rowManager.renderFromRow(rowManager.rows[topRowIndex]);}// If nothing to render below, just update dataset height
else{rowManager.trigger('changeTotalHeight',{totalHeight:rowManager.totalHeight});}me.trigger('rowRemove',{isCollapse:isCollapse});}}},{key:"onStoreMove",value:function onStoreMove(_ref180){var from=_ref180.from,to=_ref180.to;var rowManager=this.rowManager,topIndex=rowManager.topIndex,rowCount=rowManager.rowCount,_sort=[from,to].sort(),_sort2=_slicedToArray(_sort,2),dataStart=_sort2[0],dataEnd=_sort2[1];// Changed block starts in our visible block. Render from there downwards.
if(dataStart>=topIndex&&dataStart<topIndex+rowCount){rowManager.renderFromRow(rowManager.rows[dataStart-topIndex]);}// Changed block ends in our visible block, render block
else if(dataEnd>=topIndex&&dataEnd<topIndex+rowCount){rowManager.refresh();}// If changed block is outside of the visible area, this is a no-op
}},{key:"onStoreReplace",value:function onStoreReplace(_ref181){var _this54=this;var records=_ref181.records,all=_ref181.all;if(all){this.rowManager.refresh();}else{var rows=records.reduce(function(rows,_ref182){var _ref183=_slicedToArray(_ref182,2),record=_ref183[1];var row=_this54.getRowFor(record);if(row){rows.push(row);}return rows;},[]);this.rowManager.renderRows(rows);}}/**
     * Rerenders grid when all records have been removed
     * @private
     * @category Store
     */},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){// GridSelection mixin does its job on records removing
_get2(_getPrototypeOf2(Grid.prototype),"onStoreRemoveAll",this)&&_get2(_getPrototypeOf2(Grid.prototype),"onStoreRemoveAll",this).apply(this,arguments);if(this.rendered){this.renderRows();this.showEmptyText();}}/**
     * Convenience functions for getting/setting data in related store
     * @property {Object[]}
     * @category Common
     */},{key:"getHeaderMenuItems",//endregion
//region Context menu items
/**
     * Populates the header context menu. Chained in features to add menu items.
     * @param column Column for which the menu will be shown
     * @param items Array of menu items, add to it and return it
     * @category Menu items
     * @internal
     */value:function getHeaderMenuItems(column,items){var me=this,subGrids=me.subGrids,regions=me.regions;var first=true;Object.entries(subGrids).forEach(function(_ref184){var _ref185=_slicedToArray(_ref184,2),region=_ref185[0],subGrid=_ref185[1];// If SubGrid is configured with a sealed column set, do not allow moving into it
if(subGrid.sealedColumns){return;}if(column.draggable&&region!==column.region&&(!column.parent&&subGrids[column.region].columns.count>1||column.parent&&column.parent.children.length>1)){var moveRight=subGrid.element.compareDocumentPosition(subGrids[column.region].element)===document.DOCUMENT_POSITION_PRECEDING,// With 2 regions, use Move left, Move right. With multiple, include region name
text=regions.length>2?me.L('Move column to ')+region:me.L(moveRight?'moveColumnRight':'moveColumnLeft');items.push({targetSubGrid:region,text:text,icon:'b-fw-icon '+(moveRight?'b-icon-column-move-right':'b-icon-column-move-left'),name:'moveColumn',cls:first?'b-separator':'',onItem:function onItem(_ref186){var item=_ref186.item;var column=item.column;column.traverse(function(col){return col.region=region;});// Changing region will move the column to the correct SubGrid, but we want it to go last
me.columns.insert(me.columns.indexOf(subGrids[item.targetSubGrid].columns.last)+1,column);me.scrollColumnIntoView(column);}});first=false;}});}/**
     * Populates the cell context menu. Chained in features to add menu items.
     * @param column {Grid.column.Column} Column for which the menu will be shown
     * @param record {Common.data.Model} Record (row) for which the menu will be shown
     * @param items {Object[]} Array of menu items, add to it and return it
     * @category Menu items
     * @internal
     */},{key:"getCellMenuItems",value:function getCellMenuItems(column,record,items){var me=this;if(me.showRemoveRowInContextMenu&&!me.readOnly&&record&&!record.meta.specialRow){if(me.selectedRecords.length>1){items.push({text:me.L('removeRows'),icon:'b-fw-icon b-icon-trash',name:'removeRows',onItem:function onItem(){return me.store.remove(me.selectedRecords);}});}else{items.push({text:me.L('removeRow'),icon:'b-fw-icon b-icon-trash',name:'removeRow',onItem:function onItem(){return me.store.remove(record);}});}}}},{key:"getColumnDragToolbarItems",value:function getColumnDragToolbarItems(column,items){return items;}//endregion
//region Getters
},{key:"normalizeCellContext",value:function normalizeCellContext(cellContext){var columns=this.columns,store=this.store;// TODO: should clone instead of modify?
// TODO: The answer is to use the Grid/util/Location class to robustly encapsulate a record/column intersection
// And have them immutable, so that to change is to clone, as explained by MaximGB,
// we want to use columnId for precision, but allow user to specify column name for ease of use...
// modify cellContext to include columnId in those cases
if(cellContext instanceof store.modelClass){return{record:cellContext,id:cellContext.id,columnId:columns.bottomColumns[0].id};}if(!('columnId'in cellContext)){if('field'in cellContext){var column=columns.get(cellContext.field);cellContext.columnId=column&&column.id;}else if('column'in cellContext){var _column=typeof cellContext.column==='number'?columns.bottomColumns[cellContext.column]:cellContext.column;cellContext.columnId=_column&&_column.id;}// Fall back to first leaf column
if(!('columnId'in cellContext)){cellContext.columnId=columns.bottomColumns[0].id;}}if('id'in cellContext){// If the context is for an element, but it's stale (for a removed record)
// then fix it up to refer to the record id at the same index.
if(cellContext.element&&!store.getById(cellContext.id)){// This uses the data-index property to get the row at that index.
var newRec=this.getRecordFromElement(cellContext.element);// We have a record at the same index.
if(newRec){cellContext.id=newRec.id;}}}else{if('row'in cellContext){cellContext.id=store.getAt(cellContext.row).id;}else if('record'in cellContext){cellContext.id=cellContext.record.id;}}return cellContext;}// TODO: move to RowManager? Or create a CellManager?
/**
     * Returns a cell if rendered.
     * @param {Object} cellContext { id: rowId, columnId: columnId [,column: column number, field: column field] }
     * @param {Number} [cellContext.row] The row index of the row to access. Exclusive with `id` and 'record'.
     * @param {String|Number} [cellContext.id] The record id of the row to access. Exclusive with `row` and 'record'.
     * @param {Common.data.Model} [cellContext.record] The record of the row to access. Exclusive with `id` and 'row'.
     * @param {Number} [cellContext.column] The column instance or the index of the cell to access.  Exclusive with `columnId`.
     * @param {String|Number} [cellContext.columnId] The column id of the column to access. Exclusive with `column`.
     * @param {String} [cellContext.field] The field of the column to access. Exclusive with `column`.
     * @returns {HTMLElement}
     * @category Getters
     */},{key:"getCell",value:function getCell(cellContext){var row,result=null;cellContext=this.normalizeCellContext(cellContext);if(cellContext.id){row=this.getRowById(cellContext.id);}if(row&&cellContext.columnId){result=row.getCell(cellContext.columnId);}return result;}//TODO: Should move to ColumnManager? Or Header?
/**
     * Returns the header element for the column
     * @param {String|Number|Grid.column.Column} columnId or Column instance
     * @returns {HTMLElement} Header element
     * @category Getters
     */},{key:"getHeaderElement",value:function getHeaderElement(columnId){if(typeof columnId!=='string'){columnId=columnId.id;}return this.fromCache(".b-grid-header[data-column-id=\"".concat(columnId,"\"]"));}},{key:"getHeaderElementByField",value:function getHeaderElementByField(field){var column=this.columns.get(field);return column?this.getHeaderElement(column):null;}/**
     * Body height
     * @property {Number}
     * @readonly
     * @category Layout
     */},{key:"getRecordFromElement",/**
     * Searches up from the specified element for a grid row and returns the record associated with that row.
     * @param {HTMLElement} element Element somewhere within a row or the row container element
     * @returns {Common.data.Model} Record for the row
     * @category Getters
     */value:function getRecordFromElement(element){var el=element.closest('.b-grid-row');if(!el)return null;return this.store.getAt(el.dataset.index);}/**
     * Searches up from specified element for a grid cell or an header and returns the column which the cell belongs to
     * @param {HTMLElement} element Element somewhere in a cell
     * @returns {Grid.column.Column} Column to which the cell belongs
     * @category Getters
     */},{key:"getColumnFromElement",value:function getColumnFromElement(element){var cell=DomHelper.up(element,'.b-grid-cell, .b-grid-header');if(!cell)return null;if(cell.matches('.b-grid-header')){return this.columns.getById(cell.dataset.columnId);}var cellData=DomDataStore.get(cell);return this.columns.getById(cellData.columnId);}// Getter and setter for autoHeight only added for type checking, since it seems common to get it wrong in react/angular
},{key:"fixSizes",//endregion
//region Fix width & height
/**
     * Sets widths and heights for headers, rows and other parts of the grid as needed
     * @private
     * @category Width & height
     */value:function fixSizes(){// subGrid width
this.callEachSubGrid('fixWidths');}},{key:"onRowManagerChangeTotalHeight",value:function onRowManagerChangeTotalHeight(_ref187){var totalHeight=_ref187.totalHeight;this.refreshTotalHeight(totalHeight);}/**
     * Makes height of vertical scroller match estimated total height of grid. Called when scrolling vertically and
     * when showing/hiding rows.
     * @param {Number} height
     * @private
     * @category Width & height
     */},{key:"refreshTotalHeight",value:function refreshTotalHeight(){var height=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.rowManager.totalHeight;// Removed isVisible check here, since rows are rendered on paint now (when grid is visible)
if(this.renderingRows){return;}if(this.rowManager.bottomRow){height=Math.max(height,this.rowManager.bottomRow.bottom);}var me=this,scroller=me.scrollable,delta=Math.abs(me.virtualScrollHeight-height),clientHeight=me._bodyRectangle.height,newMaxY=height-clientHeight;if(delta){var// We must update immediately if we are nearing the end of the scroll range.
isCritical=newMaxY-me._scrollTop<clientHeight*2||// Or if we have scrolled pass visual height
me._verticalScrollHeight&&me._verticalScrollHeight-clientHeight<me._scrollTop;// Update the true scroll range using the scroller. This will not cause a repaint.
scroller.scrollHeight=me.virtualScrollHeight=height;// If we are scrolling, put this off because it causes
// a full document layout and paint.
if(me.scrolling&&!isCritical){if(!me.virtualScrollHeightDirty){me.virtualScrollHeightDirty=scroller.on({scrollend:me.fixElementHeights,thisObj:me,once:true});}}else{me.virtualScrollHeightDirty&&me.virtualScrollHeightDirty();me.fixElementHeights(height);}}}},{key:"fixElementHeights",value:function fixElementHeights(){var me=this,height=me.virtualScrollHeight,heightInPx="".concat(height,"px");me._verticalScrollHeight=height;me.verticalScroller.style.height=heightInPx;me.virtualScrollHeightDirty=false;if(me.autoHeight){me.bodyContainer.style.height=heightInPx;me._bodyHeight=height;me._bodyRectangle=Rectangle.client(me.bodyContainer);}me.refreshVirtualScrollbars();}//endregion
//region Scroll & virtual rendering
},{key:"onRowManagerRequestScrollChange",/**
     * Responds to request from RowManager to adjust scroll position. Happens when jumping to a scroll position with
     * variable row height.
     * @param {Number} bottomMostRowY
     * @private
     * @category Scrolling
     */value:function onRowManagerRequestScrollChange(_ref188){var bottom=_ref188.bottom;this.scrollable.y=bottom-this.bodyHeight;}/**
     * Scroll syncing for normal headers & grid + triggers virtual rendering for vertical scroll
     * @private
     * @fires scroll
     * @category Scrolling
     */},{key:"initScroll",value:function initScroll(){var me=this;// This method may be called early, before render calls it, so ensure that it's
// only executed once.
if(!me.scrollInitialized){var scrollTop,onScroll=me.createOnFrame(function(){scrollTop=me.scrollable.y;// Was getting scroll events in FF where scrollTop was unchanged, ignore those
if(scrollTop!==me._scrollTop){me._scrollTop=scrollTop;if(!me.scrolling){me.scrolling=true;me.eachSubGrid(function(s){return s.suspendResizeMonitor=true;});}me.rowManager.updateRenderedRows(scrollTop);/**
                        * Grid has scrolled vertically
                        * @event scroll
                        * @param {Grid.view.Grid} grid
                        * @param {Number} scrollTop
                        */me.trigger('scroll',{scrollTop:scrollTop});}});me.scrollInitialized=true;me.scrollable.on({scroll:onScroll,scrollend:function scrollend(){me.scrolling=false;me.eachSubGrid(function(s){return s.suspendResizeMonitor=false;});}});me.callEachSubGrid('initScroll');}}// TODO: rename to scrollRecordIntoView? Or have an alias?
/**
     * Scrolls a row into view. If row isn't rendered it tries to calculate position
     * @param {Common.data.Model|String|Number} recordOrId Record or record id
     * @param {Object} [options] How to scroll.
     * @param {String} [options.column] Field name or ID of the column, or the Column instance to scroll to.
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.
     * @param {Boolean|Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the element when it is in view.
     * @category Scrolling
     * @returns {Promise} A promise which resolves when the specified row has been scrolled into view.
     */},{key:"scrollRowIntoView",value:function scrollRowIntoView(recordOrId){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$2;var me=this,blockPosition=options.block||'nearest',rowManager=me.rowManager;recordOrId=me.store.getById(recordOrId);if(recordOrId){// check that record is "displayable", not filtered out or hidden by collapse
if(me.store.indexOf(recordOrId)===-1){return resolvedPromise;}var scroller=me.scrollable,recordRect=me.getRecordCoords(recordOrId);var scrollerRect=Rectangle.from(scroller.element);// If it was calculated from the index, update the rendered rowScrollMode
// and scroll to the actual element. Note that this should only be necessary
// for variableRowHeight.
// But to "make the tests green", this is a workaround for a buffered rendering
// bug when teleporting scroll. It does not render the rows at their correct
// positions. Please do not try to "fix" this. I will do it. NGW
if(recordRect.virtual){var virtualBlock=recordRect.block;// Scroll the calculated position to the center of the scrollingViewport
// and then update the rendered block while asking the RowManager to
// display the required recordOrId.
scroller.scrollIntoView(recordRect,{block:'center'});rowManager.scrollTargetRecordId=recordOrId;rowManager.updateRenderedRows(scroller.y,true);recordRect=me.getRecordCoords(recordOrId);rowManager.lastScrollTop=scroller.y;if(recordRect.virtual){// bail out to not get caught in infinite loop, since code above is cut out of bundle
// eslint-disable-next-line no-useless-return,no-unreachable
return resolvedPromise;}var innerOptions=blockPosition!=='nearest'?options:{block:virtualBlock};// Scroll the target just less than append/prepend buffer height out of view so that the animation looks good
if(options.animate){// Do not fire scroll events during this scroll sequence - it's a purely cosmetic operation.
// We are scrolling the desired row out of view merely to *animate scroll* it to the requested position.
scroller.suspendEvents();// Scroll to its final position
if(blockPosition==='end'||blockPosition==='nearest'&&virtualBlock==='end'){scroller.y-=scrollerRect.bottom-recordRect.bottom;}else if(blockPosition==='start'||blockPosition==='nearest'&&virtualBlock==='start'){scroller.y+=recordRect.y-scrollerRect.y;}// Ensure rendered block is correct at that position
rowManager.updateRenderedRows(scroller.y,false,true);// Scroll away from final position to enable a cosmetic scroll to final position
if(virtualBlock==='end'){scroller.y-=rowManager.appendRowBuffer*rowManager.rowHeight-1;}else{scroller.y+=rowManager.prependRowBuffer*rowManager.rowHeight-1;}// The row will still be rendered, so scroll it using the scroller directly
var result=scroller.scrollIntoView(me.getRecordCoords(recordOrId),Object.assign({},options,innerOptions));// Now we're at the required position, resume events
result.then(function(){return scroller.resumeEvents();});return result;}else{return me.scrollRowIntoView(recordOrId,Object.assign({},options,innerOptions));}}else{var column=options.column;if(column){if(typeof column==='string'){column=me.columns.getById(column)||me.columns.get(column);}if(column){// If we are targetting a column, we must use the scroller of that column's SubGrid
scroller=me.getSubGridFromColumn(column).scrollable;var cellRect=Rectangle.from(rowManager.getRowFor(recordOrId).getCell(column.id));recordRect.x=cellRect.x;recordRect.width=cellRect.width;}}return scroller.scrollIntoView(recordRect,options);}}}/**
     * Scrolls a column into view (if it is not already)
     * @param {Grid.column.Column|String|Number} column Column name (data) or column index or actual column object.
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the element when it is in view.
     * @returns {Promise} If the column exists, a promise which is resolved when the column header element has been scrolled into view.
     * @category Scrolling
     */},{key:"scrollColumnIntoView",value:function scrollColumnIntoView(column,options){column=column instanceof Column?column:this.columns.get(column)||this.columns.getById(column)||this.columns.getAt(column);return this.getSubGridFromColumn(column).scrollColumnIntoView(column,options);}// TODO The API { id: recordId, column: 'columnName' } is not clear: id has to be renamed to `record` or `recordId` to be self-explanatory;
/**
     * Scrolls a cell into view (if it is not already)
     * @param {Object} cellContext Cell selector { id: recordId, column: 'columnName' }
     * @category Scrolling
     */},{key:"scrollCellIntoView",value:function scrollCellIntoView(cellContext,options){return this.scrollRowIntoView(cellContext.id,Object.assign({column:cellContext.columnId},options));}/**
     * Scroll all the way down
     * @returns {Promise} A promise which resolves when the bottom is reached.
     * @category Scrolling
     */},{key:"scrollToBottom",value:function scrollToBottom(options){// triggers scroll to last record. not using current scroller height because we do not know if it is correct
return this.scrollRowIntoView(this.store.last,options);}/**
     * Scroll all the way up
     * @returns {Promise} A promise which resolves when the top is reached.
     * @category Scrolling
     */},{key:"scrollToTop",value:function scrollToTop(options){return this.scrollable.scrollBy(0,-this.scrollable.y,options);}/**
     * Store scroll state (scrollTop for entire grid and scrollLeft per sub grid)
     * @returns {{scrollTop: (*|string|number), scrollLeft: {}}}
     * @category Scrolling
     */},{key:"storeScroll",value:function storeScroll(){var me=this,state=me.storedScrollState={scrollTop:me.scrollable.y,scrollLeft:{}};// TODO: Implement special multi-element Scroller subclass for Grids which
// encapsulates the x axis only Scrollers of all its SubGrids.
me.eachSubGrid(function(subGrid){state.scrollLeft[subGrid.region]=subGrid.scrollable.x;});return state;}/**
     * Restore scroll state. If state is not specified, restores the last stored state.
     * @param state Scroll state, optional
     * @category Scrolling
     */},{key:"restoreScroll",value:function restoreScroll(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.storedScrollState;var me=this;// TODO: Implement special multi-element Scroller subclass for Grids which
// encapsulates the x axis only Scrollers of all its SubGrids.
me.eachSubGrid(function(subGrid){subGrid.scrollable.x=state.scrollLeft[subGrid.region];});me.scrollable.y=state.scrollTop;}//endregion
//region Theme & measuring
/**
     * Creates a fake subgrid with one row and mesaures its height. Result is used as rowHeight.
     * @private
     */},{key:"measureRowHeight",value:function measureRowHeight(){var me=this,// Create a fake subgrid with one row, since styling for row is specified on .b-grid-subgrid .b-grid-row
rowMeasureElement=DomHelper.createElement({tag:'div',// TODO: should either get correct widgetClassList or query features for measure classes
className:'b-grid '+(me.features.stripe?'b-stripe':''),style:'position: absolute; visibility: hidden',html:'<div class="b-grid-subgrid"><div class="b-grid-row"></div></div>',parent:document.getElementById(me.appendTo)||document.body});// Use style height or default height from config.
// Not using clientHeight since it will have some value even if no height specified in CSS
var rowEl=rowMeasureElement.firstElementChild.firstElementChild,styleHeight=parseInt(DomHelper.getStyleValue(rowEl,'height')),borderTop=parseInt(DomHelper.getStyleValue(rowEl,'border-top-width')),borderBottom=parseInt(DomHelper.getStyleValue(rowEl,'border-bottom-width'));// Change rowHeight if specified in styling, also remember that value to replace later if theme changes and
// user has not explicitly set some other height
if(me.rowHeight==null||me.rowHeight===me._rowHeightFromStyle){me.rowHeight=!isNaN(styleHeight)&&styleHeight?styleHeight:me.defaultRowHeight;me._rowHeightFromStyle=me.rowHeight;}// this measurement will be added to rowHeight during rendering, to get correct cell height
me._rowBorderHeight=borderTop+borderBottom;me._isRowMeasured=true;rowMeasureElement.remove();// There is a ticket about measuring the actual first row instead:
// https://app.assembla.com/spaces/bryntum/tickets/5735-measure-first-real-rendered-row-for-rowheight/details
}/**
     * Handler for global theme change event (triggered by shared.js). Remeasures row height.
     * @private
     */},{key:"onThemeChange",value:function onThemeChange(_ref189){var theme=_ref189.theme;this.measureRowHeight();this.trigger('theme',{theme:theme});}//endregion
//region Rendering of rows
/**
     * Triggers a render of records to all row elements. Call after changing order, grouping etc to reflect changes
     * visually. Preserves scroll.
     * @category Rendering
     */},{key:"refreshRows",value:function refreshRows(){var returnToTop=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.element.classList.add('b-notransition');if(returnToTop){this.rowManager.returnToTop();}else{this.rowManager.refresh();}this.element.classList.remove('b-notransition');}/**
     * Triggers a render of all the cells in a column.
     * @param {Grid.column.Column} column
     * @category Rendering
     */},{key:"refreshColumn",value:function refreshColumn(column){var field=column.field;this.rowManager.forEach(function(row){var cell=row.getCell(field);row.renderCell(cell);});}//endregion
//region Render the grid
/**
     * Recalculates virtual scrollbars widths and scrollWidth
     * @private
     */},{key:"refreshVirtualScrollbars",value:function refreshVirtualScrollbars(){var scrollBarWidth=DomHelper.scrollBarWidth;if(scrollBarWidth){var me=this,headerContainer=me.headerContainer,footerContainer=me.footerContainer,virtualScrollers=me.virtualScrollers,hasVerticalOverflow=me.virtualScrollHeight>me.bodyHeight,hasHorizontalOverflow=Object.values(me.subGrids).some(function(subGrid){return subGrid.overflowingHorizontally;});if(hasHorizontalOverflow){virtualScrollers.classList.remove('b-hide-display');}else{virtualScrollers.classList.add('b-hide-display');}if(hasVerticalOverflow){if(!headerContainer.classList.contains('b-grid-vertical-overflow')){headerContainer.classList.add('b-grid-vertical-overflow');}}else{headerContainer.classList.remove('b-grid-vertical-overflow');}// can get called before headers are rendered. headers might also be hidden (such as in docs)
var lastHeaderScroller=headerContainer.querySelector('.b-grid-header-scroller:last-child');if(lastHeaderScroller&&hasVerticalOverflow){var headerBorderWidth=parseInt(DomHelper.getStyleValue(lastHeaderScroller,'border-right-width'));// Add a style to pad the header-container to clear the grid's vertical scrollbar
// TODO: regions part of calculation is to compensate for 1px off with third region, but it should be solvable using CSS. Not finding how though...
headerContainer.style.paddingRight=scrollBarWidth-headerBorderWidth+(me.regions.length>2?1:0)+'px';footerContainer.style.paddingRight="".concat(scrollBarWidth,"px");}else{headerContainer.style.paddingRight='0';footerContainer.style.paddingRight='0';}}}},{key:"onContentChange",value:function onContentChange(){var me=this,rowManager=me.rowManager;if(me.isVisible){var contentHeight=Math.max(rowManager.totalHeight,rowManager.bottomRow?rowManager.bottomRow.bottom:0);me.paintListener=null;// cache to avoid recalculations in the middle of rendering code (RowManger#getRecordCoords())
me._bodyRectangle=Rectangle.client(me.bodyContainer);me._bodyHeight=me.autoHeight?contentHeight:me._bodyRectangle.height;me.refreshTotalHeight(contentHeight);me.callEachSubGrid('refreshFakeScroll');}// If not visible, this operation MUST be done when we become visible.
// This is announced by the paint event which is triggered when a Widget
// really gains visibility, ie is shown or rendered, or it's not hidden,
// and a hidden/non-rendered ancestor is shown or rendered.
// See Widget#triggerPaint.
else if(!me.paintListener){me.paintListener=me.on({paint:'onContentChange',once:true,thisObj:me});}}/**
     * Called after headers have been rendered to the headerContainer.
     * This does not do anything, it's just for Features to hook in to.
     * @param {HTMLElement} headerContainer DOM element which contains the headers.
     * @param {HTMLElement} element Grid element
     * @private
     * @category Rendering
     */},{key:"renderHeader",value:function renderHeader(headerContainer,element){}/**
     * Called after footers have been rendered to the footerContainer.
     * This does not do anything, it's just for Features to hook in to.
     * @param {HTMLElement} footerContainer DOM element which contains the footers.
     * @param {HTMLElement} element Grid element
     * @private
     * @category Rendering
     */},{key:"renderFooter",value:function renderFooter(footerContainer,element){}},{key:"suspendRefresh",value:function suspendRefresh(){this.refreshSuspended++;}},{key:"resumeRefresh",value:function resumeRefresh(trigger){if(this.refreshSuspended&&! --this.refreshSuspended){if(trigger){this.refreshRows();}}}/**
     * Rerenders all grid rows, completely replacing all row elements with new ones
     * @category Rendering
     */},{key:"renderRows",value:function renderRows(){var keepScroll=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var returnToTop=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,scrollState=keepScroll&&me.storeScroll();if(me.refreshSuspended){return;}/**
         * Grid rows are about to be rendered
         * @event beforeRenderRows
         * @param {Grid.view.Grid} grid
         */me.trigger('beforeRenderRows');me.renderingRows=true;// This allows us to do things like disable animations on a refresh
me.element.classList.add('b-grid-refreshing');// remove all row elements from dom (sets innerHTML = '')
me.callEachSubGrid('clearRows');if(returnToTop){me.scrollable.y=me._scrollTop=0;}me.rowManager.reinitialize(returnToTop);me.renderingRows=false;me.onContentChange();if(keepScroll){me.restoreScroll(scrollState);}me.element.classList.remove('b-grid-refreshing');}/**
     * Rerenders the grids rows, headers and footers, completely replacing all row elements with new ones
     * @category Rendering
     */ // TODO: Make render call this fn, not very DRY currently
},{key:"renderContents",value:function renderContents(){var me=this,element=me.appendTo,headerContainer=me.headerContainer,footerContainer=me.footerContainer;me.emptyCache();// columns will be "drawn" on render anyway, bail out
if(!me.rendered)return;// reset measured header height, to make next call to get headerHeight measure it
me._headerHeight=null;me.callEachSubGrid('refreshHeader',headerContainer);me.callEachSubGrid('refreshFooter',footerContainer);// Note that these are hook methods for features to plug in to. They do not do anything.
me.renderHeader(headerContainer,element);me.renderFooter(footerContainer,element);me.fixSizes();me.renderRows(false);}// Render rows etc. on first paint, to make sure Grids element has been laid out
},{key:"onPaint",value:function onPaint(){var me=this,element=me.element,headerContainer=me.headerContainer,bodyContainer=me.bodyContainer,footerContainer=me.footerContainer;if(me.rendered){return;}// apply any responsive configs before rendering columns and rows
me.updateResponsive(me.width,0);var maxDepth=0;// Cached, updated on resize. Used by RowManager and by the subgrids upon their render
me._bodyRectangle=Rectangle.client(me.bodyContainer);me.eachSubGrid(function(subGrid){subGrid.render(me.verticalScroller);});// Note that these are hook methods for features to plug in to. They do not do anything.
// SubGrids take care of their own rendering.
me.renderHeader(headerContainer,element);me.renderFooter(footerContainer,element);if(me.autoHeight){me._bodyHeight=me.rowManager.initWithHeight(element.offsetHeight-headerContainer.offsetHeight-footerContainer.offsetHeight,true);bodyContainer.style.height=me.bodyHeight+'px';}else{me._bodyHeight=me.bodyContainer.offsetHeight;me.rowManager.initWithHeight(me._bodyHeight,true);}me.eachSubGrid(function(subGrid){if(subGrid.header.maxDepth>maxDepth){maxDepth=subGrid.header.maxDepth;}});headerContainer.dataset.maxDepth=maxDepth;me.fixSizes();me.renderRows(false);me.initScroll();me.initInternalEvents();me.rendered=true;}},{key:"render",value:function render(target){var me=this;// When displayed inside one of our containers, require a size to be considered visible. Ensures it is painted
// on display when for example in a tab
me.requireSize=Boolean(me.owner);_get2(_getPrototypeOf2(Grid.prototype),"render",this).call(this,target);// Sanity check that main element has been given some sizing styles, unless autoHeight is used in which case
// it will be sized programmatically instead
if(!me.autoHeight&&me.headerContainer.offsetHeight&&!me.bodyContainer.offsetHeight){console.warn('Grid element not sized correctly, please check your CSS styles and review how you size the widget');}}//endregion
// region Masking
/**
     * Show a load mask with a spinner and the specified message. When using an AjaxStore masking and unmasking is
     * handled automatically, but if you are loading data in other ways you can call this function manually when your
     * load starts.
     * ```
     * myLoadFunction() {
     *   // Show mask before initiating loading
     *   grid.maskBody('Loading data');
     *   // Your custom loading code
     *   load.then(() => {
     *      // Hide the mask when loading is finished
     *      grid.unmaskBody();
     *   });
     * }
     * ```
     * @param {String} loadMask Message to show next to the spinner
     * @returns {Common.widget.Mask}
     */},{key:"maskBody",value:function maskBody(loadMask){var me=this;if(!me.bodyContainer){return;}// remove any existing mask
me.unmaskBody();var _me$activeMask=me.activeMask=WidgetHelper.mask(me.element,loadMask),maskElement=_me$activeMask.maskElement;maskElement.style.marginTop="".concat(me.headerContainer.offsetHeight,"px");maskElement.style.marginBottom="".concat(me.footerContainer.offsetHeight,"px");return me.activeMask;}/**
     * Hide the load mask.
     */},{key:"unmaskBody",value:function unmaskBody(){var me=this;me.loadmaskHideTimer&&me.clearTimeout(me.loadmaskHideTimer);me.loadmaskHideTimer=null;me.activeMask&&me.activeMask.destroy();me.activeMask=null;}// endregion
},{key:"overflowElement",get:function get(){return this.bodyContainer;}},{key:"focusElement",get:function get(){return this.element;}//endregion
//region Columns
},{key:"columns",set:function set(columns){var me=this;if(me._columnStore){if(columns){// TODO: @johan: reconfiguring, ie changing whole column set should work.
// That could mean a total recalculation of subGrids.
// That's not possible right now, so
//throw new Error('Cannot reconfigure column set');
// me._columnStore.clear();
me._columnStore.data=columns;}else{me._columnStore.destroy();}}else{// ColumnStore instance
if(columns instanceof ColumnStore){if(!columns.grid){columns.grid=me;}me._columnStore=columns;}// Array of columns
else if(Array.isArray(columns)){me._columnStore=new ColumnStore({grid:me,data:columns});}// Store config object
else if(columns){me._columnStore=new ColumnStore(Object.assign({grid:me},columns));}// changes might be triggered when applying state, before grid is rendered
// TODO: have this run a lighter weight, non-destructive response.
// onColumnsChanged is a start, but lots of machinery is hooked to render.
me._columnStore.on('change',me.onColumnsChanged,me);me._columnStore.on(columnResizeEvent(me.onColumnsResized,me));// Add touch class for touch devices
if(BrowserHelper.isTouchDevice){me.touch=true;// apply touchConfig for columns that defines it
me._columnStore.forEach(function(column){var touchConfig=column.touchConfig;if(touchConfig){column.applyState(touchConfig);}});}}}/**
     * Get the {@link Grid.data.ColumnStore ColumnStore} used by this Grid.
     *
     * @property {Grid.data.ColumnStore}
     * @category Common
     * @readonly
     */,get:function get(){return this._columnStore;}},{key:"rowManager",get:function get(){var me=this;// Use row height from CSS if not specified in config. Did not want to turn this into a getter/setter for
// rowHeight since RowManager will plug its implementation into Grid when created below, and after initial
// configuration that is what should be used
if(!me._isRowMeasured){me.measureRowHeight();}// RowManager is a plugin, it is configured with its grid as its "client".
// It uses client.store as its record source.
return me._rowManager||(me._rowManager=new RowManager({grid:me,rowHeight:me.rowHeight,rowScrollMode:me.rowScrollMode||'move',autoHeight:me.autoHeight,listeners:{changetotalheight:me.onRowManagerChangeTotalHeight,requestscrollchange:me.onRowManagerRequestScrollChange,thisObj:me}}));}},{key:"store",get:function get(){return this._store;}/**
     * Get/set the store used by this Grid. The setter accepts Store or a configuration object for a store.
     * If the configuration contains a `readUrl`, an AjaxStore will be created.
     * @property {Common.data.Store|Object}
     * @category Common
     */,set:function set(store){var me=this,features=me.initialConfig.features;if(store!==me._store){if(me.storeDetacher){me.storeDetacher();me.storeDetacher=null;}if(store){if(store instanceof Store);else{var storeCfg={};if(me.data){storeCfg.data=me.data;}if(features&&features.tree){storeCfg.tree=true;}// extend GridRowModel to not pollute it with custom fields (if we have multiple grids on page)
if(!store.modelClass){storeCfg.modelClass=/*#__PURE__*/function(_GridRowModel){_inherits2(_class4,_GridRowModel);function _class4(){_classCallCheck2(this,_class4);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class4).apply(this,arguments));}return _class4;}(GridRowModel);}store=new(store.readUrl?AjaxStore:Store)(Object.assign(storeCfg,store));}me._store=store;me.bindStore(store);}else{if(me.destroyStore){me._store.destroy();}me._store=null;}}}},{key:"data",get:function get(){if(this._store){return this._store.records;}else{return this._data;}},set:function set(data){if(this._store){this._store.data=data;}else{this._data=data;}}},{key:"emptyText",get:function get(){return this._emptyText;},set:function set(text){this._emptyText=text;this.eachSubGrid(function(subGrid){return subGrid.emptyText=text;});}},{key:"bodyHeight",get:function get(){return this._bodyHeight;}/**
     * Header height
     * @property {Number}
     * @readonly
     * @category Layout
     */},{key:"headerHeight",get:function get(){var me=this;// measure header if rendered and not stored
if(me.rendered&&!me._headerHeight){me._headerHeight=me.headerContainer.offsetHeight;}return me._headerHeight;}},{key:"autoHeight",get:function get(){return this._autoHeight;},set:function set(autoHeight){ObjectHelper.assertBoolean(autoHeight,'autoHeight');this._autoHeight=autoHeight;}/**
     * Toggle column line visibility. End result might be overruled by/differ between themes.
     * @property {Boolean}
     */},{key:"columnLines",get:function get(){return this._columnLines;},set:function set(columnLines){ObjectHelper.assertBoolean(columnLines,'columnLines');DomHelper.toggleClasses(this.element,'b-no-column-lines',!columnLines);this._columnLines=columnLines;}//endregion
//region ReadOnly
/**
     * Get/set read only mode, which prevents cell editing etc.
     * Exactly what is prevented is up to each feature.
     * @property {Boolean}
     * @fires readonly
     * @category Common
     */},{key:"readOnly",set:function set(readOnly){var me=this;me._readOnly=readOnly;if(me.rendered){/**
             * Fired when grids read only state is toggled
             * @event readOnly
             * @param {Boolean} readOnly Read only or not
             */me.trigger('readOnly',{readOnly:readOnly});// IE11 doesnt support this
//me.element.classList.toggle('b-readonly', readOnly);
if(readOnly){me.element.classList.add('b-readonly');}else{me.element.classList.remove('b-readonly');}}},get:function get(){return this._readOnly;}},{key:"scrolling",set:function set(scrolling){this._scrolling=scrolling;this.bodyContainer.classList[scrolling?'add':'remove']('b-scrolling');},get:function get(){return this._scrolling;}},{key:"isAnimating",get:function get(){return this._animating;},set:function set(value){var me=this;if(me.rendered&&value!==me.isAnimating){if(value){me.element.classList.add('b-animating');}else{me.element.classList.remove('b-animating');}me._animating=value;}}}],[{key:"getLKey",value:function getLKey(){return'%LICENSE%';}},{key:"defaultConfig",//region Config
// Default settings, applied in grids constructor.
get:function get(){return{/**
             * Row height in pixels. When set to null, an empty row will be measured and its height will be used as
             * default row height, enabling it to be controlled using CSS
             * @config {Number}
             * @default null
             * @category Common
             */rowHeight:null,// used if no rowHeight specified and none found in CSS. not public since our themes have row height
// specified and this is more of an internal failsafe
defaultRowHeight:45,/**
             * Text to display when there is no data to display in the grid
             * @config {String}
             * @default
             * @category Common
             */emptyText:this.L('noRows'),/**
             * Refresh entire row when a cells value changes (true) or only the cell (false).
             * @config {Boolean}
             * @default
             * @category Misc
             */fullRowRefresh:true,/**
             * Read only or not
             * @config {Boolean}
             * @default false
             * @category Common
             */readOnly:null,/**
             * True to not create any grid column headers
             * @config {Boolean}
             * @default false
             * @category Misc
             */hideHeaders:null,/**
             * Show "Remove row" item in context menu (if enabled and grid not read only)
             * @config {Boolean}
             * @default
             * @category Misc
             */showRemoveRowInContextMenu:true,/**
             * Automatically set grids height to fit all rows (no scrolling in the grid). In general you should avoid
             * using `autoHeight: true`, since it will bypass Grids virtual rendering and render all rows at once, which
             * in a larger grid is really bad for performance.
             * @config {Boolean}
             * @default false
             * @category Layout
             */autoHeight:null,/**
             * Store that holds records to display in the grid, or a store config object.
             * A store will be created if none is specified
             * @config {Common.data.Store/Object}
             * @category Common
             */store:{},/**
             * Data to set in grids store (a Store will be created if none is specified)
             * @config {Object[]}
             * @category Common
             */data:null,/**
             * Column definitions for the grid, will be used to create Column instances that are added to a ColumnStore:
             *
             * ```
             * new Grid({
             *   columns : [
             *     { text : 'Alias', field : 'alias' },
             *     { text : 'Superpower', field : 'power' }
             *   ]
             * });
             * ```
             *
             * Also accepts a store config object:
             *
             * ```
             * new Grid({
             *   columns : {
             *     data : [
             *       { text : 'Alias', field : 'alias' },
             *       { text : 'Superpower', field : 'power' }
             *     ],
             *     listeners : {
             *       update() {
             *         // Some update happened
             *       }
             *     }
             *   }
             * });
             * ```
             *
             * This store can be accessed using {@link #property-columns}:
             *
             * ```
             * grid.columns.add({ field : 'column', text : 'New column' });
             * ```
             * @config {Object[]|Object}
             * @category Common
             */columns:[],/**
             * Region to which columns are added when they have none specified
             * @config {String}
             * @default
             * @category Misc
             */defaultRegion:'normal',/**
             * true to destroy the store when the grid is destroyed
             * @config {Boolean}
             * @default false
             * @category Misc
             */destroyStore:null,/**
             * Default selection settings
             * @config {Object}
             * @default
             * @category Selection
             */selectionMode:{row:true,cell:true,multiSelect:true,checkbox:false},/**
             * Set to true to allow text selection in the grid cells
             * @config {Boolean}
             * @default false
             * @category Selection
             */enableTextSelection:null,/**
             * A message to be shown when a store is performing a remote operation.
             * @config {String}
             * @default "Loading..."
             * @category Misc
             */loadMask:this.L('loadMask'),/**
             * Set to `false` to inhibit column lines
             * @config {Boolean}
             * @default
             * @category Misc
             */columnLines:true,/**
             * Set to `true` to stretch the last column in a grid with all fixed width columns
             * to fill extra available space if the grid's width is wider than the sum of all
             * configured column widths.
             * @config {Boolean}
             * @default
             * @category Layout
             */fillLastColumn:true,/**
             * Set to `false` to only measure cell contents when double clicking the edge between column headers.
             * @config {Boolean}
             * @default
             * @category Layout
             */resizeToFitIncludesHeader:true,/**
             * Set to `false` to prevent remove row animation and remove the delay related to that.
             * @config {Boolean}
             * @default
             * @category Misc
             */animateRemovingRows:!BrowserHelper.isIE11,// IE11 doesn't have reliable firing of transitionend
/**
             * Set to `true` to not get a warning when using another base class than GridRowModel for your grid data. If
             * you do, and would like to use the full feature set of the grid then include the fields from GridRowModel
             * in your model definition.
             * @config {Boolean}
             * @default false
             * @category Misc
             */disableGridRowModelWarning:null,loadMaskErrorIcon:'b-icon b-icon-warning',headerClass:Header,testPerformance:false,// TODO: break out as strategies
positionMode:'translate',// translate, translate3d, position
rowScrollMode:'move',// move, dom, all
/**
             * Grid monitors window resize by default.
             * @config {Boolean}
             * @default true
             * @category Misc
             */monitorResize:true,/**
             * An object containing Feature configuration objects (or `true` if no configuration is required)
             * keyed by the Feature class name in all lowercase.
             * @config {Object}
             * @category Common
             * @typings any
             */features:true,/**
             * An object containing sub grid configuration objects keyed by a `region` property.
             * By default, grid has a 'locked' region (if configured with locked columns) and a 'normal' region.
             * The 'normal' region defaults to use `flex: 1`.
             *
             * This config can be used to reconfigure the "built in" sub grids or to define your own.
             * ```
             * // Redefining the "built in" regions
             * new Grid({
             *   subGridConfigs : {
             *     locked : { flex : 1 },
             *     normal : { width : 100 }
             *   }
             * });
             *
             * // Defining your own multi region sub grids
             * new Grid({
             *   subGridConfigs : {
             *     left   : { width : 100 },
             *     middle : { flex : 1 },
             *     right  : { width  : 100 }
             *   },
             *
             *   columns : {
             *     { field : 'manufacturer', text: 'Manufacturer', region : 'left' },
             *     { field : 'model', text: 'Model', region : 'middle' },
             *     { field : 'year', text: 'Year', region : 'middle' },
             *     { field : 'sales', text: 'Sales', region : 'right' }
             *   }
             * });
             * ```
             * @config {Object}
             * @category Misc
             */subGridConfigs:{normal:{flex:1}},/**
             * Configures whether the grid is scrollable in the `Y` axis. This is used to configure a {@link Grid.util.GridScroller}.
             * See the {@link #config-scrollerClass} config option.
             * @config {Object}
             * @category Scrolling
             */scrollable:{// Just Y for now until we implement a special grid.view.Scroller subclass
// Which handles the X scrolling of subgrids.
overflowY:true},/**
             * The class to instantiate to use as the {@link #config-scrollable}. Defaults to {@link Grid.util.GridScroller}.
             * @config {Common.helper.util.Scroller}
             * @internal
             * @category Scrolling
             */scrollerClass:GridScroller,/**
             * Configure as `true` to have the grid show a red "changed" tag in cells who's
             * field value has changed and not yet been committed.
             * @config {Boolean}
             * @default false
             * @category Misc
             */showDirty:null,loadMaskHideTimeout:3000,refreshSuspended:0,transitionDuration:500,/**
             * Event which is used to show context menus.
             * Available options are: 'contextmenu', 'click', 'dblclick'.
             * Default value is 'contextmenu'
             * @config {String}
             */contextMenuTriggerEvent:'contextmenu'// Grid requires a size to be considered visible
//requireSize : true
};}},{key:"properties",get:function get(){return{_selectedRecords:[],_verticalScrollHeight:0,virtualScrollHeight:0,_scrollTop:null};}}]);return Grid;}(base(Widget).mixes(Pluggable,State,GridElementEvents,GridFeatures,GridNavigation,GridResponsive,GridSelection,GridState,GridSubGrids));exports.Grid=Grid;Grid._$name='Grid';BryntumWidgetAdapterRegister.register('grid',Grid);VersionHelper.setVersion('grid','2.2.4');/**
 * @module Grid/view/TreeGrid
 */ /**
 * A TreeGrid, a Tree combined with a Grid. Must be configured with exactly one {@link Grid.column.TreeColumn} (`type: tree`), but can also have an
 * arbitrary number of other columns. Most features that can be used with Grid also works with TreeGrid, with the
 * exception of the Group feature.
 * @extends Grid/view/Grid
 *
 * @classtype treegrid
 * @externalexample grid/TreeGrid.js
 */var TreeGrid=/*#__PURE__*/function(_Grid){_inherits2(TreeGrid,_Grid);function TreeGrid(){_classCallCheck2(this,TreeGrid);return _possibleConstructorReturn2(this,_getPrototypeOf2(TreeGrid).apply(this,arguments));}_createClass2(TreeGrid,[{key:"store",//region Plugged in functions / inherited configs
/**
     * Store that holds records to display in the TreeGrid, or a store config object.
     * If you supply a Store, make sure it is configured with `tree : true` to handle tree data.
     * A store will be created if none is specified
     * @config {Common.data.Store|Object} store
     * @default
     */ /**
     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.
     *
     * @function toggleCollapse
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to toggle
     * @param {Boolean} [collapse] Force collapse (true) or expand (false)
     * @param {Boolean} [skipRefresh] Set to true to not refresh rows (if calling in batch)
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Collapse a single node.
     *
     * @function collapse
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to collapse
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Expand a single node.
     *
     * @function expand
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node to expand
     * @returns {Promise}
     * @category Feature shortcuts
     */ /**
     * Expands parent nodes to make this node "visible".
     *
     * @function expandTo
     * @param {String|Number|Common.data.Model} idOrRecord Record (the node itself) or id of a node
     * @returns {Promise}
     * @category Feature shortcuts
     */ //endregion
//region Store
/**
     * Get/set the store used by this TreeGrid. Accepts a config or a Store. If assigning an already existing Store,
     * it must be configured with `tree: true`
     * @property {Common.data.Store|Object}
     */set:function set(store){if(store&&!store.tree){// existing store instance, not much we can do about it
if(store instanceof Store){throw new Error('TreeGrid requires a Store configured with tree : true');}// store config, enable tree
else{store.tree=true;}}_set(_getPrototypeOf2(TreeGrid.prototype),"store",store,this,true);},get:function get(){return _get2(_getPrototypeOf2(TreeGrid.prototype),"store",this);}//endregion
}]);return TreeGrid;}(Grid);exports.TreeGrid=TreeGrid;TreeGrid._$name='TreeGrid';BryntumWidgetAdapterRegister.register('treegrid',TreeGrid);/**
 * @module Scheduler/crud/transport/AjaxTransport
 */ /**
 * Implements data transferring functional that can be used for {@link Scheduler.crud.AbstractCrudManager} super classing.
 * Uses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 *
 * @example
 * // create a new CrudManager using AJAX as a transport system and JSON for encoding
 * class MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}
 *
 * @abstract
 * @mixin
 */var AjaxTransport=function AjaxTransport(Target){return(/*#__PURE__*/function(_ref190){_inherits2(AjaxTransport,_ref190);function AjaxTransport(){_classCallCheck2(this,AjaxTransport);return _possibleConstructorReturn2(this,_getPrototypeOf2(AjaxTransport).apply(this,arguments));}_createClass2(AjaxTransport,[{key:"cancelRequest",/**
     * Cancels a sent request.
     * @param {Promise} requestPromise The Promise object wrapping the Request to be cancelled.
     * The _requestPromise_ is the return value returned from the corresponding {@link #function-sendRequest} call.
     */value:function cancelRequest(requestPromise){requestPromise.abort();}/**
     * Sends request to the server.
     * @param {Object} request The request configuration object having following properties:
     * @param {String} request.data The encoded request.
     * @param {String} request.type The request type. Either `load` or `sync`.
     * @param {Function} request.success A function to be started on successful request transferring.
     * @param {String} request.success.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
     * @param {Function} request.failure A function to be started on request transfer failure.
     * @param {String} request.failure.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
     * @param {Object} request.thisObj `this` reference for the above `success` and `failure` functions.
     * @return {Promise} The fetch Promise object.
     * @fires beforesend
     */},{key:"sendRequest",value:function sendRequest(config){var me=this,pack=config.data,packCfg=me.transport[config.type]||{},paramName=packCfg.paramName,params=Object.assign({},packCfg.params),method=packCfg.method||AjaxTransport.defaultMethod[config.type];var requestConfig=Object.assign({url:packCfg.url,method:method,params:params},packCfg.requestConfig);// if no param name specified then we'll transfer package in the request body
if(!paramName){// TODO: get rid of this legacy code in the next major release
// ..here we should simply make: requestConfig.body = pack
requestConfig.jsonData=pack;// ..otherwise we use parameter
}else{requestConfig.params=requestConfig.params||{};requestConfig.params[paramName]=pack;}/**
         * Fires before a request is sent to the server.
         *
         * ```javascript
         * crudManager.on('beforesend', function (crud, params, requestType) {
         *     // let's set "sync" request parameters
         *     if (requestType == 'sync') {
         *         // dynamically depending on "flag" value
         *         if (flag) {
         *             params.foo = 'bar';
         *         } else {
         *             params.foo = 'smth';
         *         }
         *     }
         * });
         * ```
         * @event beforesend
         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
         * @param {Object} params Request params
         * @param {String} requestType Request type (`load`/`sync`)
         * @param {Object} requestConfig Configuration object for Ajax request call
         */me.trigger('beforeSend',{params:params,type:config.type,requestConfig:requestConfig,config:config});var responseOptions=Object.assign({method:method,headers:requestConfig.headers,queryParams:params,body:method==='HEAD'||method==='GET'?undefined:requestConfig.jsonData},requestConfig.fetchOptions),ajaxPromise=AjaxHelper.fetch(requestConfig.url,responseOptions);ajaxPromise.then(function(response){if(response.ok){config.success&&config.success.call(config.thisObj||me,response,responseOptions);}else{config.failure&&config.failure.call(config.thisObj||me,response,responseOptions);}});return ajaxPromise;}}],[{key:"defaultMethod",/**
     * Configuration of the AJAX requests used to communicate with a server-side.
     * An object where you can set the following possible properties:
     * @config {Object} transport
     * @property {Object} transport.load Load requests configuration:
     * @property {String} transport.load.url URL to request for data loading.
     * @property {String} [transport.load.method='POST'] HTTP method to be used for load requests.
     * @property {String} [transport.load.paramName] Name of parameter in which a packet will be transfered. If not specified then a packet will be transfered in a request body (default).
     * @property {Object} [transport.load.params] Extra load request params if needed.
     * @property {Object} [transport.load.requestConfig] Ajax request config. Can be used instead of above `url`, `method`, `params`:
     *
     * ```javascript
     * transport   : {
     *     load    : {
     *         requestConfig : {
     *             url             : 'http://some-url',
     *             method          : 'GET',
     *             // get rid of cache-buster parameter
     *             disableCaching  : false,
     *             // extra request parameters
     *             params          : {
     *                 foo         : 'bar'
     *             },
     *             // custom request headers
     *             headers         : {
     *                 ...
     *             },
     *             fetchOptions    : {
     *                 credentials : 'include'
     *             }
     *         }
     *     }
     * }
     * ```
     *
     * @property {Object} transport.sync Sync requests configuration:
     * @property {String} transport.sync.url URL to request for data persisting.
     * @property {String} [transport.sync.method='POST'] HTTP method to be used for sync requests.
     * @property {String} [transport.sync.paramName] Name of parameter in which a packet will be transfered. If not specified then a packet will be transfered in a request body (default).
     * @property {Object} [transport.sync.params] Extra sync request params if needed.
     * @property {Object} [transport.sync.requestConfig] Ajax request config. Can be used instead of above `url`, `method`, `params`:
     *
     * ```javascript
     * transport   : {
     *     sync    : {
     *         requestConfig : {
     *             url             : 'http://some-url',
     *             method          : 'GET',
     *             // get rid of cache-buster parameter
     *             disableCaching  : false,
     *             // extra request parameters
     *             params          : {
     *                 foo         : 'bar'
     *             },
     *             // custom request headers
     *             headers         : {
     *                 ...
     *             }
     *         }
     *     }
     * }
     * ```
     */get:function get(){return{load:'GET',sync:'POST'};}}]);return AjaxTransport;}(Target||Base));};/**
 * @module Scheduler/crud/AbstractCrudManagerMixin
 */exports.AjaxTransport=AjaxTransport;var storeSortFn=function storeSortFn(lhs,rhs,sortProperty){// TODO: get rid of these StoreDescriptors. Just use Stores.
if(lhs.store){lhs=lhs.store;}if(rhs.store){rhs=rhs.store;}lhs=lhs[sortProperty]||0;rhs=rhs[sortProperty]||0;return lhs<rhs?-1:lhs>rhs?1:0;},// Sorter function to keep stores in loadPriority order
storeLoadSortFn=function storeLoadSortFn(lhs,rhs){return storeSortFn(lhs,rhs,'loadPriority');},// Sorter function to keep stores in syncPriority order
storeSyncSortFn=function storeSyncSortFn(lhs,rhs){return storeSortFn(lhs,rhs,'syncPriority');},nullFn$1=function nullFn$1(){};/**
 * An abstract mixin that supplies most of the CrudManager functionality.
 * It implements basic mechanisms of collecting stores to organize batch communication with a server.
 * Yet it does not contain methods related to _data transfer_ nor _encoding_.
 * These methods are to be provided in sub-classes.
 * Out of the box there are mixins implementing {@link Scheduler.crud.transport.AjaxTransport support of AJAX for data transferring}
 * and {@link Scheduler.crud.encoder.JsonEncoder JSON for data encoding system}.
 * For example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the dada to the server:
 *
 * ```javascript
 * class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {
 *     ...
 * }
 * ```
 *
 * ## Data transfer and encoding methods
 *
 * These are methods that must be provided by subclasses of this class:
 *
 * - {@link #function-sendRequest sendRequest}
 * - {@link #function-cancelRequest cancelRequest}
 * - {@link #function-encode encode}
 * - {@link #function-decode decode}
 *
 * @mixin
 * @abstract
 */var AbstractCrudManagerMixin=function AbstractCrudManagerMixin(Target){return(/*#__PURE__*/function(_Target){_inherits2(AbstractCrudManagerMixin,_Target);function AbstractCrudManagerMixin(){_classCallCheck2(this,AbstractCrudManagerMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(AbstractCrudManagerMixin).apply(this,arguments));}_createClass2(AbstractCrudManagerMixin,[{key:"construct",//endregion
//region Init
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this._requestId=0;this.activeRequests={};this.crudStoresIndex={};this._crudManagerConfig=config;_get2(_getPrototypeOf2(AbstractCrudManagerMixin.prototype),"construct",this).call(this,config);}},{key:"applyCrudManagerMixinConfig",value:function applyCrudManagerMixinConfig(config){var cfg=this.splitCrudManagerConfig(config);if(cfg.crudStores){this.crudStores=cfg.crudStores;delete cfg.crudStores;}Object.assign(this,cfg);}},{key:"afterConfigure",value:function afterConfigure(){if(!this.initialConfig){this.applyCrudManagerMixinConfig(this._crudManagerConfig);}}},{key:"splitCrudManagerConfig",value:function splitCrudManagerConfig(config){// debugger
var result=Object.assign({},this.constructor.crudManagerDefaultConfig);// let result = Object.assign({}, this.constructor.defaultConfig);
for(var cfg in config){if(cfg in result){result[cfg]=config[cfg];delete config[cfg];}}return result;}},{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(AbstractCrudManagerMixin.prototype),"afterConstruct",this).call(this);if(this.autoLoad){this.load().catch(function(e){});}}//endregion
//region Store descriptors & index
/**
     * Returns a registered store descriptor.
     * @param {String|Common.data.Store} storeId The store identifier or registered store instance.
     * @returns {Object} The descriptor of the store.
     */},{key:"getStoreDescriptor",value:function getStoreDescriptor(storeId){if(!storeId)return null;if(storeId instanceof Store)return this.crudStores.find(function(storeDesc){return storeDesc.store===storeId;});if(_typeof(storeId)==='object')return this.crudStoresIndex[storeId.storeId];return this.crudStoresIndex[storeId]||this.getStoreDescriptor(Store.getStore(storeId));}},{key:"fillStoreDescriptor",value:function fillStoreDescriptor(descriptor){var store=descriptor.store,storeIdProperty=store.storeIdProperty||this.storeIdProperty,model=store.modelClass&&store.modelClass.prototype;!descriptor.storeId&&(descriptor.storeId=store[storeIdProperty]);!descriptor.idField&&(descriptor.idField=model.idField);!descriptor.phantomIdField&&(descriptor.phantomIdField=model&&model.phantomIdField);!('writeAllFields'in descriptor)&&(descriptor.writeAllFields=store.writeAllFields);// TODO: PORT support for writeAllFields
return descriptor;}},{key:"updateCrudStoreIndex",value:function updateCrudStoreIndex(){var crudStoresIndex=this.crudStoresIndex={};this.crudStores.forEach(function(store){return store.storeId&&(crudStoresIndex[store.storeId]=store);});}//endregion
//region Store collection (add, remove, get & iterate)
/**
     * Returns a registered store.
     * @param {String} storeId Store identifier.
     * @returns {Common.data.Store} Found store instance.
     */},{key:"getCrudStore",value:function getCrudStore(storeId){var storeInfo=this.getStoreDescriptor(storeId);return storeInfo&&storeInfo.store;}},{key:"forEachCrudStore",value:function forEachCrudStore(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;if(!fn)return;this.crudStores.every(function(store){return fn.call(thisObj,store.store,store.storeId,store)!==false;});}},{key:"addCrudStore",/**
     * Adds a store to the collection.
     *
     *```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     *```
     *
     * **Note:** Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * @param {Common.data.Store|String|Object|Common.data.Store[]|String[]|Object[]} store
     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.
     * The _store descriptor_ is an object having following properties:
     * @param {String} store.storeId The store identifier that will be used as a key in requests.
     * @param {Common.data.Store} store.store The store itself.
     * @param {String} [store.idField] The idField of the store. If not specified will be taken from the store model.
     * @param {String} [store.phantomIdField] The field holding unique Ids of phantom records (if store has such model).
     * @param {Boolean} [store.writeAllFields] Set to true to write all fields from modified records
     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the this position will be taken relative to it.
     * If not specified then store(s) will be appended to the end of collection.
     * Otherwise it will be just a position in stores collection.
     *
     * ```javascript
     * // insert stores store4, store5 to the start of collection
     * crudManager.addCrudStore([ store4, store5 ], 0);
     * ```
     *
     * @param {String|Common.data.Store|Object} [fromStore] The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of {@link #function-getStoreDescriptor} call).
     *
     * ```javascript
     * // insert store6 just before a store having storeId equal to 'foo'
     * crudManager.addCrudStore(store6, 0, 'foo');
     *
     * // insert store7 just after store3 store
     * crudManager.addCrudStore(store7, 1, store3);
     * ```
     */value:function addCrudStore(store,position,fromStore){if(!store)return;if(!Array.isArray(store))store=[store];if(!store.length)return;var me=this,data=[];// loop over list of stores to be added
store.forEach(function(storeInfo){// if store instance provided
if(storeInfo instanceof Store){storeInfo={store:storeInfo};}else if(_typeof(storeInfo)==='object'){// normalize sub-stores (if any)
if(storeInfo.stores){if(!Array.isArray(storeInfo.stores))storeInfo.stores=[storeInfo.stores];storeInfo.stores.forEach(function(subStore,j){var subStoreInfo=subStore;if(typeof subStore==='string'){subStoreInfo={storeId:subStore};}// keep reference to the "master" store descriptor
subStoreInfo.masterStoreInfo=storeInfo;storeInfo.stores[j]=subStoreInfo;});}// if it's a store identifier
}else{storeInfo={store:Store.getStore(storeInfo)};}data.push(me.fillStoreDescriptor(storeInfo));// if the store has "setCrudManager" hook - use it
if(storeInfo.store.setCrudManager){storeInfo.store.setCrudManager(me);// otherwise decorate the store w/ "crudManager" property
}else{storeInfo.store.crudManager=me;}// Prevent AjaxStores from performing their own CRUD operations
if(me.overrideCrudStoreLoad&&storeInfo.store.load){storeInfo.store.load=storeInfo.store.commit=function(){};}// listen to store changes
me.bindCrudStoreListeners(storeInfo.store);});// if no position specified then append stores to the end
if(typeof position==='undefined'){me.crudStores.push.apply(me.crudStores,data);// if position specified
}else{var _me$crudStores;var pos=position;// if specified the store relative to which we should insert new one(-s)
if(fromStore){if(fromStore instanceof Store||_typeof(fromStore)!=='object')fromStore=me.getStoreDescriptor(fromStore);// get its position
pos+=me.crudStores.indexOf(fromStore);}// insert new store(-s)
//me.crudStores.splice.apply(me.crudStores, [].concat([pos, 0], data));
(_me$crudStores=me.crudStores).splice.apply(_me$crudStores,[pos,0].concat(data));}me.updateCrudStoreIndex();}// Adds configured scheduler stores to the store collection ensuring correct order
// unless they're already registered.
},{key:"addPrioritizedStore",value:function addPrioritizedStore(store){var me=this;if(!me.hasCrudStore(store)){this.addCrudStore(store,ArrayHelper.findInsertionIndex(store,me.crudStores,storeLoadSortFn));}if(!me.hasApplySequenceStore(store)){this.addStoreToApplySequence(store,ArrayHelper.findInsertionIndex(store,me.syncApplySequence,storeSyncSortFn));}}},{key:"hasCrudStore",value:function hasCrudStore(store){return this.crudStores.some(function(s){return s===store||s.store===store||s.storeId===store;});}/**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     *
     * ```javascript
     *    // remove store having storeId equal to "foo"
     *    crudManager.removeCrudStore("foo");
     *
     *    // remove store3
     *    crudManager.removeCrudStore(store3);
     * ```
     *
     * @param {Object|String|Common.data.Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */},{key:"removeCrudStore",value:function removeCrudStore(store){var me=this,stores=me.crudStores;for(var i=0,l=stores.length;i<l;i++){var s=stores[i];if(s===store||s.store===store||s.storeId===store){// unbind store listeners
me.unbindCrudStoreListeners(s.store);delete me.crudStoresIndex[s.storeId];stores.splice(i,1);if(me.syncApplySequence){me.removeStoreFromApplySequence(store);}break;}}}//endregion
//region Store listeners
},{key:"bindCrudStoreListeners",value:function bindCrudStoreListeners(store,un){var me=this,listeners={update:me.onCrudStoreChange,//me.onStoreUpdate,
removeall:me.onCrudStoreChange,detachable:true,thisObj:me};// TODO: destroying a store should remove listeners from it (should be default behaviour in Events)
Object.assign(listeners,{add:me.onCrudStoreChange,remove:me.onCrudStoreChange});store.crudDetatcher=store.on(listeners);}},{key:"unbindCrudStoreListeners",value:function unbindCrudStoreListeners(store){store.crudDetatcher&&store.crudDetatcher();}//endregion
//region Apply sequence
/**
     * Adds a store to the alternative sync responses apply sequence.
     * By default the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using {@link #config-syncApplySequence} option
     * or but calling this method.
     *
     * **Please note**, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     *
     *    ```javascript
     *    // alternative sequence was not set for this crud manager
     *    // so let's fill it with existing stores keeping the same order
     *    crudManager.addStoreToApplySequence(crudManager.crudStores);
     *
     *    // and now we can add our new store
     *
     *    // we will load its data last
     *    crudManager.addCrudStore(someNewStore);
     *    // but changes to it will be applied first
     *    crudManager.addStoreToApplySequence(someNewStore, 0);
     *    ```
     * add registered stores to the sequence along with the store(s) you want to add
     *
     * @param {Common.data.Store|Object|Common.data.Store[]|Object[]} store The store to add or its _descriptor_ (or array of stores or descriptors).
     * Where _store descriptor_ is an object having following properties:
     * @param {String} store.storeId The store identifier that will be used as a key in requests.
     * @param {Common.data.Store} store.store The store itself.
     * @param {String} [store.idField] The idField of the store. If not specified will be taken from the store model.
     * @param {String} [store.phantomIdField] The field holding unique Ids of phantom records (if store has such model).

     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the this position will be taken relative to it.
     * If not specified then store(s) will be appended to the end of collection.
     * Otherwise it will be just a position in stores collection.
     *
     *    ```javascript
     *    // insert stores store4, store5 to the start of sequence
     *    crudManager.addStoreToApplySequence([ store4, store5 ], 0);
     *    ```
     * @param {String|Common.data.Store|object} [fromStore] The store relative to which position should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of {@link #function-getStoreDescriptor} call).
     *
     *    ```javascript
     *    // insert store6 just before a store having storeId equal to 'foo'
     *    crudManager.addStoreToApplySequence(store6, 0, 'foo');
     *
     *    // insert store7 just after store3 store
     *    crudManager.addStoreToApplySequence(store7, 1, store3);
     *    ```
     */},{key:"addStoreToApplySequence",value:function addStoreToApplySequence(store,position,fromStore){if(!store)return;if(!Array.isArray(store))store=[store];var me=this,// loop over list of stores to add
data=store.reduce(function(collection,store){var s=me.getStoreDescriptor(store);if(s)collection.push(s);return collection;},[]);// if no position specified then append stores to the end
if(typeof position==='undefined'){me.syncApplySequence.push.apply(me.syncApplySequence,data);// if position specified
}else{var _me$syncApplySequence;var pos=position;// if specified the store relative to which we should insert new one(-s)
if(fromStore){if(fromStore instanceof Store||_typeof(fromStore)!=='object')fromStore=me.getStoreDescriptor(fromStore);// get its position
pos+=me.syncApplySequence.indexOf(fromStore);}// insert new store(-s)
//me.syncApplySequence.splice.apply(me.syncApplySequence, [].concat([pos, 0], data));
(_me$syncApplySequence=me.syncApplySequence).splice.apply(_me$syncApplySequence,[pos,0].concat(_toConsumableArray(data)));}}/**
     * Removes a store from the alternative sync sequence.
     *
     *    ```javascript
     *    // remove store having storeId equal to "foo"
     *    crudManager.removeCrudStore("foo");
     *
     *    // remove store3
     *    crudManager.removeCrudStore(store3);
     *    ```
     *
     * @param {Object|String|Common.data.Store} store The store to remove. Either the store descriptor, store identifier or store itself.
     */},{key:"removeStoreFromApplySequence",value:function removeStoreFromApplySequence(store){var index=this.syncApplySequence.findIndex(function(s){return s===store||s.store===store||s.storeId===store;});if(index>-1)this.syncApplySequence.splice(index,1);}},{key:"hasApplySequenceStore",value:function hasApplySequenceStore(store){return this.syncApplySequence.some(function(s){return s===store||s.store===store||s.storeId===store;});}//endregion
//region Events
// onNodeRemove(oldParent) {
//     var treeStore = oldParent && oldParent.getTreeStore();
//     // "noderemove" event is fired too early and getRemovedRecords() don't not have the removed node yet
//     // so we wait till tree store "endupdate" event and only then invoke "onCrudStoreChange" method
//     treeStore && treeStore.on('endupdate', this.onCrudStoreChange, this, { once : true });
// }
// onStoreUpdate(store, record, operation, fields) {
//     if ((!store.isTreeStore || record !== store.getRoot())) {
//         // If only a single field was changed, make sure it's a persistable field to avoid full scan of the store
//         // Collapsing/expanding a tree node will trigger this behavior otherwise
//         var isSingleNonPersistField = fields && fields.length === 1 && record.getField(fields[0]) && !record.getField(fields[0]).persist;
//
//         if (!isSingleNonPersistField) {
//             this.onCrudStoreChange();
//         }
//     }
// }
// onTreeStoreInsertOrAppend(parent, child) {
//     if (!child.isRoot()) {
//         this.onCrudStoreChange();
//     }
// }
},{key:"onCrudStoreChange",value:function onCrudStoreChange(){var me=this;if(me.crudIgnoreUpdates)return;/**
         * Fires when any record in a registered stores is changed.
         * ```javascript
         *     crudManager.on('hasChanges', function (crud) {
         *         // enable persist changes button when some store gets changed
         *         saveButton.enable();
         *     });
         * ```
         * @event crudStoreHasChanges
         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
         */if(me.crudStoreHasChanges()){me.trigger('hasChanges');if(me.autoSync){// add deferred call if it's not scheduled yet
if(!me.autoSyncTimerId){me.autoSyncTimerId=setTimeout(function(){me.autoSyncTimerId=null;me.sync();},me.autoSyncTimeout);}}}else{me.trigger('noChanges');}}},{key:"internalOnResponse",value:function(){var _internalOnResponse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee12(requestType,responseText,responseOptions,options){var me,response;return regeneratorRuntime.wrap(function _callee12$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:// reset last requested package ID
me=this;me.activeRequests[requestType]=null;response=responseText?me.decode(responseText):null;if(!(!response||!response.success)){_context13.next=8;break;}/**
             * Fires when a request fails.
             * @event requestfail
             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.
             * @param {String} requestType The request type (`sync` or `load`).
             * @param {Object} response The decoded server response object.
             * @param {String} responseText The raw server response text
             * @param {Object} responseOptions The response options.
             */me.trigger('requestFail',{requestType:requestType,response:response,responseText:responseText,responseOptions:responseOptions});/**
             * Fires when a {@link #function-load load request} fails.
             * @event loadFail
             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.
             * @param {Object} response The decoded server response object.
             * @param {String} responseText The raw server response text
             * @param {Object} responseOptions The response options.
             * @params {Object} options Options provided to the {@link #function-load} method.
             */ /**
             * Fires when a {@link #function-sync sync request} fails.
             * @event syncFail
             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.
             * @param {Object} response The decoded server response object.
             * @param {String} responseText The raw server response text
             * @param {Object} responseOptions The response options.
             */me.trigger(requestType+'Fail',{response:response,responseOptions:responseOptions,responseText:responseText,options:options});me.warn('CrudManager: '+requestType+' failed, please inspect the server response');return _context13.abrupt("return",response);case 8:if(!(me.trigger('beforeResponseApply',{requestType:requestType,response:response})!==false&&me.trigger('before'+StringHelper.capitalizeFirstLetter(requestType)+'Apply',{response:response,options:options})!==false)){_context13.next=15;break;}me.crudRevision=response.revision;_context13.next=12;return me.applyResponse(requestType,response,options);case 12:/**
             * Fires on successful request completion after data gets applied to the stores.
             * @event requestdone
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {String} requestType The request type (`sync` or `load`).
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             */me.trigger('requestDone',{requestType:requestType,response:response,responseOptions:responseOptions});/**
             * Fires on successful {@link #function-load load request} completion after data gets loaded to the stores.
             * @event load
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             * @params {Object} options Options provided to the {@link #load} method.
             */ /**
             * Fires on successful {@link #function-sync sync request} completion.
             * @event sync
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {Object} response The decoded server response object.
             * @param {Object} responseOptions The server response options.
             */me.trigger(requestType,{response:response,responseOptions:responseOptions,options:options});if(requestType==='load'||!me.crudStoreHasChanges()){/**
                 * Fires when registered stores get into state when they don't have any
                 * not persisted change. This happens after {@link #function-load load} or {@link #function-sync sync} request
                 * completion. Or this may happen after a record update which turns its fields back to their original state.
                 *
                 * ```javascript
                 *     crudManager.on('nochanges', function (crud) {
                 *         // disable persist changes button when there is no changes
                 *         saveButton.disable();
                 *     });
                 * ```
                 *
                 * @event nochanges
                 * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
                 */me.trigger('noChanges');}case 15:return _context13.abrupt("return",response);case 16:case"end":return _context13.stop();}}},_callee12,this);}));function internalOnResponse(_x19,_x20,_x21,_x22){return _internalOnResponse.apply(this,arguments);}return internalOnResponse;}()},{key:"internalOnLoad",value:function(){var _internalOnLoad=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee13(responseText,responseOptions,options){return regeneratorRuntime.wrap(function _callee13$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:// Successful load request, mark crud manager as loaded
this.crudLoaded=true;return _context14.abrupt("return",this.internalOnResponse('load',responseText,responseOptions,options));case 2:case"end":return _context14.stop();}}},_callee13,this);}));function internalOnLoad(_x23,_x24,_x25){return _internalOnLoad.apply(this,arguments);}return internalOnLoad;}()},{key:"internalOnSync",value:function(){var _internalOnSync=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee14(responseText,responseOptions,options){return regeneratorRuntime.wrap(function _callee14$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:return _context15.abrupt("return",this.internalOnResponse('sync',responseText,responseOptions,options));case 1:case"end":return _context15.stop();}}},_callee14,this);}));function internalOnSync(_x26,_x27,_x28){return _internalOnSync.apply(this,arguments);}return internalOnSync;}()//endregion
//region Changes tracking
},{key:"suspendChangesTracking",value:function suspendChangesTracking(){this.crudIgnoreUpdates++;}},{key:"resumeChangesTracking",value:function resumeChangesTracking(triggerCheck){if(this.crudIgnoreUpdates&&! --this.crudIgnoreUpdates){if(triggerCheck){this.onCrudStoreChange();}}}/**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     *
     *    ```javascript
     *    // if we have any unsaved changes
     *    if (crudManager.crudStoreHasChanges()) {
     *        // persist them
     *        crudManager.sync();
     *    // otherwise
     *    } else {
     *        alert("There are no unsaved changes...");
     *    }
     *    ```
     *
     * @param {String|Common.data.Store} [storeId] The store identifier or store instance to check changes for.
     * If not specified then will check changes for all of the registered stores.
     * @returns {Boolean} `true` if there are not persisted changes.
     */},{key:"crudStoreHasChanges",value:function crudStoreHasChanges(storeId){if(storeId){var store=this.getCrudStore(storeId);return store&&this.isCrudStoreDirty(store);}return this.crudStores.some(this.isCrudStoreDirty);// for (var i = 0, l = this.crudStores.length; i < l; i++) {
//     if (this.isCrudStoreDirty(this.crudStores[i].store)) return true;
// }
//
// return false;
}},{key:"isCrudStoreDirty",value:function isCrudStoreDirty(store){return store.store.changes!=null;}//endregion
//region Load
},{key:"emitCrudStoreEvents",value:function emitCrudStoreEvents(stores,eventName){var event={action:'read'+eventName};var _iteratorNormalCompletion50=true;var _didIteratorError50=false;var _iteratorError50=undefined;try{for(var _iterator50=this.crudStores[Symbol.iterator](),_step50;!(_iteratorNormalCompletion50=(_step50=_iterator50.next()).done);_iteratorNormalCompletion50=true){var store=_step50.value;if(stores.includes(store.storeId)){store.store.trigger(eventName,event);}}}catch(err){_didIteratorError50=true;_iteratorError50=err;}finally{try{if(!_iteratorNormalCompletion50&&_iterator50.return!=null){_iterator50.return();}}finally{if(_didIteratorError50){throw _iteratorError50;}}}}},{key:"getLoadPackage",value:function getLoadPackage(options){var pack={type:'load',requestId:this.requestId},stores=this.crudStores,optionsCopy=Object.assign({},options);pack.stores=stores.map(function(store){var//filterParam = store.filterParam || store.store.filterParam || this.crudFilterParam,
opts=optionsCopy&&optionsCopy[store.storeId],pageSize=store.pageSize||store.store&&store.store.pageSize;// TODO: PORT currently no support for remote filters
// if the store uses remote filtering
// if (store.store.remoteFilter && filterParam) {
//
//     opts = opts || {};
//
//     var filters = [];
//
//     store.store.getFilters().each(function(f) {
//         filters.push(f.serialize());
//     });
//
//     // put filters info into the package
//     opts[filterParam] = filters;
// }
// TODO: PORT currently no support for paging
if(opts||pageSize){var params=Object.assign({storeId:store.storeId,page:1,pageSize:pageSize},opts);store.currentPage=params.page;// Remove from common request options
if(opts){delete optionsCopy[store.storeId];}return params;}return store.storeId;});// Apply common request options
Object.assign(pack,optionsCopy);return pack;}},{key:"loadCrudStore",value:function loadCrudStore(store,data,options,storeDesc){var rows=data&&data.rows;if(options&&options.append||data.append){store.add(rows);}else{store.data=rows;}store.trigger('load',{source:store,data:rows});}},{key:"loadDataToCrudStore",value:function loadDataToCrudStore(storeDesc,data,options){var me=this,store=storeDesc.store,// nested stores list
subStores=storeDesc.stores,idField=storeDesc.idField||'id',//model && model.meta.idField || 'id',
isTree=store.tree,subData,rows=data&&data.rows;store.__loading=true;//TODO: PORT meta data on store?
// apply server provided meta data to the store
// if (metaData) {
//     if (store.applyMetaData) {
//         store.applyMetaData(metaData);
//     } else {
//         store.metaData = metaData;
//     }
// }
if(rows){if(subStores){subData=me.getSubStoresData(rows,subStores,idField,isTree);}me.loadCrudStore(store,data,options,storeDesc);if(subData){// load sub-stores as well (if we have them)
subData.forEach(function(sub){me.loadDataToCrudStore(Object.assign({store:store.getById(sub.id).get(sub.storeDesc.storeId)// TODO: PORT have to check what this does
},sub.storeDesc),sub.data);});}}store.__loading=false;}},{key:"loadCrudManagerData",value:function loadCrudManagerData(response){var _this55=this;var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// we don't want reacting on store changes during loading of them
this.suspendChangesTracking();// we load data to the stores in the order they're kept in this.stores array
this.crudStores.forEach(function(storeDesc){var storeId=storeDesc.storeId,data=response[storeId];if(data){_this55.loadDataToCrudStore(storeDesc,data,options[storeId]);}});this.resumeChangesTracking();}/**
     * Returns true if the crud manager is currently loading data
     * @property {Boolean}
     * @readonly
     * @category CRUD
     */},{key:"load",/**
     * Loads data to the stores registered in the crud manager. For example:
     *
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     *
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling {@link #function-cancelRequest}.
     * @param {Object} options The request parameters. This argument can be omitted like this:
     *
     * ```javascript
     * crudManager.load().then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     *
     * When presented it should be an object where keys are store Ids and values are, in turn, objects
     * of parameters related to the corresponding store. And these parameters will be transferred with a load request.
     *
     * ```javascript
     * {
     *     store1 : { page : 3, append : true, smth : 'foo' },
     *     store2 : { page : 2, bar : '!!!' }
     * },
     * ```
     *
     * Additionally for flat stores `append: true` can be specified to add loaded records to the existing records, default is to remove corresponding store's existing records first.
     * **Please note** that for delta loading you can also use an {@link #config-trackResponseType alternative approach}.
     * @returns {Promise} Promise, which is resolved if request was successful.
     * Both the resolve and reject functions are passed a `state` object. State object has following structure:
     *
     *     {
     *         cancelled       : Boolean, // **optional** flag, which is present when promise was rejected
     *         rawResponse     : String,  // raw response from ajax request, either response xml or text
     *         rawResponseText : String,  // raw response text as String from ajax request
     *         response        : Object,  // processed response in form of object
     *         options         : Object   // options, passed to load request
     *     }
     *
     * If promise was rejected by {@link #event-beforeload} event, `state` object will have structure:
     *
     *     {
     *         cancelled : true
     *     }
     *
     */value:function load(options){var me=this,pack=me.getLoadPackage(options);return new Promise(function(resolve,reject){/**
             * Fires before {@link #function-load load request} is sent. Return `false` to cancel load request.
             * @event beforeload
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {Object} request The request object.
             */if(me.trigger('beforeLoad',{pack:pack})!==false){// if another load request is in progress let's cancel it
if(me.activeRequests.load){me.cancelRequest(me.activeRequests.load.desc);me.trigger('loadCanceled',{pack:pack});}me.emitCrudStoreEvents(pack.stores,'loadStart');me.activeRequests.load={options:options,pack:pack,resolve:resolve,reject:reject,id:pack.requestId,desc:me.sendRequest({data:me.encode(pack),type:'load',success:me.onLoadSuccess,failure:me.onLoadFailure,thisObj:me})};}else{/**
                 * Fired after {@link #function-load load request} was canceled by some {@link #event-beforeload} listener
                 * or due to incomplete prior load request.
                 * @event loadcanceled
                 * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
                 * @param {Object} request The request object.
                 */me.trigger('loadCanceled',{pack:pack});reject({cancelled:true});}});}},{key:"onLoadSuccess",value:function(){var _onLoadSuccess=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee15(rawResponse,responseOptions){var responseText,request,options,response;return regeneratorRuntime.wrap(function _callee15$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:responseText='';request=this.activeRequests.load,options=request.options;_context16.next=4;return rawResponse.text().then(function(value){return responseText=value;}).catch(nullFn$1);case 4:_context16.next=6;return this.internalOnLoad(responseText,responseOptions,options);case 6:response=_context16.sent;this.emitCrudStoreEvents(request.pack.stores,'afterRequest');if(!response||!response.success){request.reject({cancelled:false,response:response,rawResponse:rawResponse,responseText:responseText,options:options});}else{request.resolve({response:response,rawResponse:rawResponse,responseText:responseText,options:options});}case 9:case"end":return _context16.stop();}}},_callee15,this);}));function onLoadSuccess(_x29,_x30){return _onLoadSuccess.apply(this,arguments);}return onLoadSuccess;}()},{key:"onLoadFailure",value:function(){var _onLoadFailure=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee16(rawResponse,responseOptions){var responseText,request,options,response;return regeneratorRuntime.wrap(function _callee16$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:responseText='';request=this.activeRequests.load,options=request.options;_context17.next=4;return rawResponse.text().then(function(value){return responseText=value;}).catch(nullFn$1);case 4:_context17.next=6;return this.internalOnLoad(responseText,responseOptions,options);case 6:response=_context17.sent;this.emitCrudStoreEvents(request.pack.stores,'afterRequest');request.reject({cancelled:false,response:response,rawResponse:rawResponse,responseText:responseText,options:options});case 9:case"end":return _context17.stop();}}},_callee16,this);}));function onLoadFailure(_x31,_x32){return _onLoadFailure.apply(this,arguments);}return onLoadFailure;}()},{key:"getSubStoresData",value:function getSubStoresData(rows,subStores,idField,isTree){var _this56=this;if(!rows)return;var result=[];function processRow(row,subStores){subStores.forEach(function(subStore){var storeId=subStore.storeId;// if row contains data for this sub-store
if(row[storeId]){// keep them for the later loading
result.push({id:row[idField],storeDesc:subStore,data:row[storeId]});// and remove reference from the row
delete row[storeId];}});}// if it's a TreeStore
if(isTree){// loop over nodes
rows.forEach(function(row){processRow(row,subStores);// also let's grab sub-stores from node children
var childrenSubData=_this56.getSubStoresData(row.children,subStores,idField,true);if(childrenSubData){result=result.concat(childrenSubData);}});// if it's a "flat" store
}else{rows.forEach(function(row){return processRow(row,subStores);});}return result;}//endregion
//region Changes (prepare, process, get)
},{key:"prepareAdded",value:function prepareAdded(list,phantomIdField,stores){var _this57=this;return list.filter(function(record){return record.isValid;}).map(function(record){var data=Object.assign(record.persistableData,_defineProperty({},phantomIdField,record.id));if(_this57.resetIdsBeforeSync)delete data[record.constructor.idField];// if the store has embedded ones
if(stores){_this57.processSubStores(record,data,stores);}return data;});}},{key:"prepareUpdated",value:function prepareUpdated(list,stores,storeInfo){var _this58=this;var writeAllFields=storeInfo.writeAllFields||storeInfo.writeAllFields!==false&&this.writeAllFields;// TODO: root node included into store.modified
// need to get rid of it since we don't persist it
if(storeInfo.store.tree){var rootNode=storeInfo.store.rootNode;list=list.filter(function(record){return record!==rootNode;});}return list.filter(function(record){return record.isValid;}).reduce(function(data,record){var recordData;// write all fields
if(writeAllFields){recordData=record.persistableData;recordData[record.constructor.idField]=record.id;}else{recordData=record.modifications;recordData[record.constructor.idField]=record.id;// TODO: PORT critical fields
// critical fields should always be presented
// const criticalFields = record.getCriticalFields();
//
// for (var j = 0; j < criticalFields.length; j++) {
//     field = criticalFields[j];
//
//     if (field.serialize) {
//         data[field.getName()] = field.serialize(record.get(field.getName()), record);
//     } else {
//         data[field.getName()] = record.get(field.getName());
//     }
// }
}// if the store has embedded ones
if(stores){_this58.processSubStores(record,recordData,stores);}var persistableFields=Object.keys(recordData);if(persistableFields.length>1||persistableFields[0]!==record.constructor.idField){data.push(recordData);}return data;},[]);}},{key:"prepareRemoved",value:function prepareRemoved(list){return list.map(function(record){return _defineProperty({},record.constructor.idField,record.id);});}},{key:"processSubStores",value:function processSubStores(record,data,stores){var _this59=this;stores.forEach(function(store){var id=store.storeId,subStore=record.get(id);// if embedded store is assigned to the record
if(subStore){// let's collect its changes as well
var changes=_this59.getCrudStoreChanges(Object.assign({store:subStore},store));if(changes){data[id]=Object.assign(changes,{$store:true});}else{delete data[id];}}else{delete data[id];}});}},{key:"getCrudStoreChanges",value:function getCrudStoreChanges(store){var phantomIdField=arguments.length>1&&arguments[1]!==undefined?arguments[1]:store.phantomIdField||this.phantomIdField;var s=store.store,added=s.added.values,updated=s.modified.values,removed=s.removed.values,// sub-stores
stores=store.stores,result;if(added.length)added=this.prepareAdded(added,phantomIdField,stores);if(updated.length)updated=this.prepareUpdated(updated,stores,store);if(removed.length)removed=this.prepareRemoved(removed);// if this store has changes
if(added.length||updated.length||removed.length){result={};if(added.length)result.added=added;if(updated.length)result.updated=updated;if(removed.length)result.removed=removed;}return result;}},{key:"getChangeSetPackage",value:function getChangeSetPackage(){var _this60=this;var pack={type:'sync',requestId:this.requestId,revision:this.crudRevision},found=0;this.crudStores.forEach(function(store){var changes=_this60.getCrudStoreChanges(store);if(changes){found++;pack[store.storeId]=changes;}});return found?pack:null;}//endregion
//region Apply
},{key:"applyChangesToRecord",value:function applyChangesToRecord(record,rawChanges,stores,store){var me=this,modelClass=record.constructor,fieldDataSourceMap=modelClass.fieldDataSourceMap,recProto=modelClass.prototype,changes={},data=record.data,done=_defineProperty({},me.phantomIdField,true);var hasChanges;// if this store has sub-stores assigned to some fields
if(stores){// then first we apply changes to that stores
stores.forEach(function(store){var name=store.storeId;if(rawChanges.hasOwnProperty(name)){// remember that we processed this field
done[name]=true;var subStore=record.get(name);if(subStore){me.applyChangesToStore(Object.assign({store:subStore},store),rawChanges[name]);}else{console.log("Can't find store for the response sub-package");}}});}// Collect the changes into a change set for field names.
for(var dataSource in rawChanges){if(rawChanges.hasOwnProperty(dataSource)&&!done[dataSource]){var _field3=fieldDataSourceMap[dataSource],propName=_field3?_field3.name:dataSource,value=modelClass.processField(propName,rawChanges[dataSource]),oldValue=dataSource in recProto?record[propName]:ObjectHelper.getPath(data,dataSource);if(!ObjectHelper.isEqual(oldValue,value)){hasChanges=true;changes[propName]=value;}}}if(hasChanges){me.suspendChangesTracking();// Set each field seperately until https://app.assembla.com/spaces/bryntum/tickets/9123 is fixed.
for(var fieldName in changes){record[fieldName]=changes[fieldName];}// TODO: Re-enable record.set when https://app.assembla.com/spaces/bryntum/tickets/9123 is fixed.
// Set fields one go
// record.set(changes);
me.resumeChangesTracking();// Clear changes only for the passed record,
// not descendant nodes.
// TODO: they *might* also be genuinely new
// so might have to stay.
record.clearChanges(true,false);}}},{key:"applyRemovals",value:function applyRemovals(store,removed,context){var _this61=this;var removedStash=store.removed,findByIdFn=context.findByIdFn,removeRecordFn=context.removeRecordFn,applied=0;removed.forEach(function(remove){var done=false,id=remove.id;// just remove the record from the removed stash
if(removedStash.includes(remove)){removedStash.remove(remove);done=true;// number of removals applied
applied++;}// if responded removed record isn`t found in store.removed
// probably don't removed on the client side yet (server driven removal)
if(!done){var record=findByIdFn(id);if(record){_this61.suspendChangesTracking();removeRecordFn(record);removedStash.remove(record);// number of removals applied
applied++;_this61.resumeChangesTracking();}else{console.log('Can\'t find record to remove from the response package');}}});return applied;}},{key:"getApplyChangesToStoreHelpers",value:function getApplyChangesToStoreHelpers(store){// if it's a tree store
if(store.tree){return{findByPhantomFn:function findByPhantomFn(id){return store.getById(id);},findByIdFn:function findByIdFn(id){return store.getById(id);},// TODO: need to support parentIdProperty
addRecordFn:function addRecordFn(data){var parent=data.parentId&&store.getById(data.parentId)||store.rootNode;return parent.appendChild(data);},removeRecordFn:function removeRecordFn(record){return record.remove();}};// plain store
}else{return{findByPhantomFn:function findByPhantomFn(id){return store.getById(id);},findByIdFn:function findByIdFn(id){return store.getById(id);},addRecordFn:function addRecordFn(data){return store.add(data)[0];},removeRecordFn:function removeRecordFn(record){return store.remove(record);}};}}},{key:"applyChangesToStore",value:function(){var _applyChangesToStore=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee17(storeDesc,storeResponse){var me,phantomIdField,idField,store,_me$getApplyChangesTo,findByPhantomFn,findByIdFn,addRecordFn,removeRecordFn,rows,removed,stores;return regeneratorRuntime.wrap(function _callee17$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:me=this,phantomIdField=storeDesc.phantomIdField||me.phantomIdField,idField=storeDesc.idField||'id',store=storeDesc.store,_me$getApplyChangesTo=me.getApplyChangesToStoreHelpers(store),findByPhantomFn=_me$getApplyChangesTo.findByPhantomFn,findByIdFn=_me$getApplyChangesTo.findByIdFn,addRecordFn=_me$getApplyChangesTo.addRecordFn,removeRecordFn=_me$getApplyChangesTo.removeRecordFn,rows=storeResponse.rows,removed=storeResponse.removed;// process added/updated records
if(rows){// sub-stores
stores=storeDesc.stores;rows.forEach(function(data){var phantomId=data[phantomIdField],id=data[idField];var record=null;// if phantomId is provided then we will use it to find added record
if(phantomId!=null&&phantomId!=null){record=findByPhantomFn(phantomId);}// if id is provided then we will use it to find updated record
else if(idField){record=findByIdFn(id);}if(record){me.applyChangesToRecord(record,data,stores,store);}else{me.suspendChangesTracking();// create new record in the store
record=addRecordFn(data);me.resumeChangesTracking();record.clearChanges();}});}// process removed records
if(removed&&me.applyRemovals(store,removed,{idField:idField,findByIdFn:findByIdFn,removeRecordFn:removeRecordFn})){store.trigger('dataChanged',{source:store});}case 3:case"end":return _context18.stop();}}},_callee17,this);}));function applyChangesToStore(_x33,_x34){return _applyChangesToStore.apply(this,arguments);}return applyChangesToStore;}()},{key:"applySyncResponse",value:function(){var _applySyncResponse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee19(response){var me,stores;return regeneratorRuntime.wrap(function _callee19$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:me=this,stores=me.syncApplySequence.length?me.syncApplySequence:me.crudStores;me.applyingSyncResponse=true;stores.forEach(/*#__PURE__*/function(){var _ref192=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee18(store){var storeResponse;return regeneratorRuntime.wrap(function _callee18$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:storeResponse=response[store.storeId];if(!storeResponse){_context19.next=4;break;}_context19.next=4;return me.applyChangesToStore(store,storeResponse);case 4:case"end":return _context19.stop();}}},_callee18);}));return function(_x36){return _ref192.apply(this,arguments);};}());me.applyingSyncResponse=false;case 4:case"end":return _context20.stop();}}},_callee19,this);}));function applySyncResponse(_x35){return _applySyncResponse.apply(this,arguments);}return applySyncResponse;}()},{key:"applyLoadResponse",value:function(){var _applyLoadResponse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee20(response,options){return regeneratorRuntime.wrap(function _callee20$(_context21){while(1){switch(_context21.prev=_context21.next){case 0:this.applyingLoadResponse=true;this.loadCrudManagerData(response,options);this.applyingLoadResponse=false;case 3:case"end":return _context21.stop();}}},_callee20,this);}));function applyLoadResponse(_x37,_x38){return _applyLoadResponse.apply(this,arguments);}return applyLoadResponse;}()},{key:"applyResponse",value:function(){var _applyResponse=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee21(requestType,response,options){return regeneratorRuntime.wrap(function _callee21$(_context22){while(1){switch(_context22.prev=_context22.next){case 0:// in trackResponseType we check response type before deciding how to react on the response
if(this.trackResponseType){requestType=response.type||requestType;}_context22.t0=requestType;_context22.next=_context22.t0==='load'?4:_context22.t0==='sync'?7:10;break;case 4:_context22.next=6;return this.applyLoadResponse(response,options);case 6:return _context22.abrupt("break",10);case 7:_context22.next=9;return this.applySyncResponse(response);case 9:return _context22.abrupt("break",10);case 10:case"end":return _context22.stop();}}},_callee21,this);}));function applyResponse(_x39,_x40,_x41){return _applyResponse.apply(this,arguments);}return applyResponse;}()//endregion
/**
     * Generates unique request identifier.
     * @internal
     * @template
     * @return {Number} The request identifier.
     */},{key:"sync",/**
     * Persists changes made on the registered stores to the server. Usage:
     *
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log("Changes saved..."),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     *
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it until previous request completion.
     * In this case {@link #event-syncdelayed} event will be fired.
     *
     * ** Note: ** Please take a look at {@link #config-autoSync} config. This option allows to persist changes automatically after any data modification.
     * @returns {Promise} Promise, which is resolved if request was successful.
     * Both the resolve and reject functions are passed a `state` object. State object has following structure:
     *
     *     {
     *         cancelled       : Boolean, // **optional** flag, which is present when promise was rejected
     *         rawResponse     : String,  // raw response from ajax request, either response xml or text
     *         rawResponseText : String,  // raw response text as String from ajax request
     *         response        : Object,  // processed response in form of object
     *     }
     *
     * If promise was rejected by {@link #event-beforesync} event, `state` object will have structure:
     *
     *     {
     *         cancelled : true
     *     }
     *
     */value:function sync(){var me=this;if(me.activeRequests.sync){// let's delay this call and start it only after server response
/**
             * Fires after {@link #function-sync sync request} was delayed due to incomplete previous one.
             * @event syncdelayed
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {Object} arguments The arguments of {@link #function-sync} call.
             */me.trigger('syncDelayed');// Queue sync request after current one
return me.activeSyncPromise=me.activeSyncPromise.then(function(){return me.sync();},function(){return me.sync();});}// Store current requrest promise. While this one is pending, all following sync requests will create chain
// of sequential promises
return me.activeSyncPromise=new Promise(function(resolve,reject){// get current changes set package
var pack=me.getChangeSetPackage();// if no data to persist we resolve immediately
if(!pack){resolve(null);return;}/**
             * Fires before {@link #function-sync sync request} is sent. Return `false` to cancel sync request.
             *
             * ```javascript
             *     crudManager.on('beforesync', function() {
             *        // cannot persist changes before at least one record is added
             *        // to the `someStore` store
             *        if (!someStore.getCount()) return false;
             *     });
             * ```
             * @event beforesync
             * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
             * @param {Object} request The request object.
             */if(me.trigger('beforeSync',{pack:pack})!==false){// keep active request details
me.activeRequests.sync={pack:pack,resolve:resolve,reject:reject,id:pack.requestId,desc:me.sendRequest({data:me.encode(pack),type:'sync',success:me.onSyncSuccess,failure:me.onSyncFailure,thisObj:me})};}else{// if this sync was canceled let's fire event about it
/**
                 * Fires after {@link #function-sync sync request} was canceled by some {@link #event-beforesync} listener.
                 * @event synccanceled
                 * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.
                 * @param {Object} request The request object.
                 */me.trigger('syncCanceled',{pack:pack});reject({cancelled:true});}});}},{key:"onSyncSuccess",value:function(){var _onSyncSuccess=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee22(rawResponse,responseOptions){var responseText,request,response;return regeneratorRuntime.wrap(function _callee22$(_context23){while(1){switch(_context23.prev=_context23.next){case 0:responseText='';_context23.next=3;return rawResponse.text().then(function(value){return responseText=value;}).catch(nullFn$1);case 3:request=this.activeRequests.sync;_context23.next=6;return this.internalOnSync(responseText,responseOptions);case 6:response=_context23.sent;if(!response||!response.success){request.reject({cancelled:false,response:response,rawResponse:rawResponse,responseText:responseText,request:request});}else{request.resolve({response:response,rawResponse:rawResponse,responseText:responseText,request:request});}case 8:case"end":return _context23.stop();}}},_callee22,this);}));function onSyncSuccess(_x42,_x43){return _onSyncSuccess.apply(this,arguments);}return onSyncSuccess;}()},{key:"onSyncFailure",value:function(){var _onSyncFailure=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee23(rawResponse,responseOptions){var responseText,request,response;return regeneratorRuntime.wrap(function _callee23$(_context24){while(1){switch(_context24.prev=_context24.next){case 0:responseText='';_context24.next=3;return rawResponse.text().then(function(value){return responseText=value;}).catch(nullFn$1);case 3:request=this.activeRequests.sync;_context24.next=6;return this.internalOnSync(responseText,responseOptions);case 6:response=_context24.sent;request.reject({cancelled:false,response:response,rawResponse:rawResponse,responseText:responseText,request:request});case 8:case"end":return _context24.stop();}}},_callee23,this);}));function onSyncFailure(_x44,_x45){return _onSyncFailure.apply(this,arguments);}return onSyncFailure;}()/**
     * Commits all records changes of all the registered stores.
     */},{key:"commitCrudStores",value:function commitCrudStores(){this.crudStores.forEach(function(store){return store.store.commit();});}/**
     * Rejects all records changes on all stores and re-insert any records that were removed locally. Any phantom records will be removed.
     */},{key:"rejectCrudStores",value:function rejectCrudStores(){this.crudStores.forEach(function(store){return store.store.clearChanges();});}},{key:"warn",value:function warn(){if('console'in window){var c=console;c.log&&c.log.apply&&c.log.apply(c,arguments);}}/**
     * Removes all stores and cancels active requests.
     */},{key:"doDestroy",value:function doDestroy(){var me=this;me.activeRequests.load&&me.cancelRequest(me.activeRequests.load.desc);me.activeRequests.sync&&me.cancelRequest(me.activeRequests.sync.desc);while(me.crudStores.length>0){me.removeCrudStore(me.crudStores[0]);}clearTimeout(me.autoSyncTimerId);me.destroyed=true;}// set crudRevision(value) {
//     debugger
//     this._crudRevision = value;
// }
// get crudRevision() {
//     return this._crudRevision;
// }
},{key:"crudStores",set:function set(stores){this._crudStores=[];this.addCrudStore(stores);// Ensure preconfigured stores stay stable at the start of the array when
// addPrioritizedStore attempts to insert in order. Only featured gantt/scheduler stores
// must participate in the ordering. If they were configured in, they must not move.
var _iteratorNormalCompletion51=true;var _didIteratorError51=false;var _iteratorError51=undefined;try{for(var _iterator51=this._crudStores[Symbol.iterator](),_step51;!(_iteratorNormalCompletion51=(_step51=_iterator51.next()).done);_iteratorNormalCompletion51=true){var store=_step51.value;store.loadPriority=store.syncPriority=0;}}catch(err){_didIteratorError51=true;_iteratorError51=err;}finally{try{if(!_iteratorNormalCompletion51&&_iterator51.return!=null){_iterator51.return();}}finally{if(_didIteratorError51){throw _iteratorError51;}}}},get:function get(){return this._crudStores;}},{key:"syncApplySequence",set:function set(stores){this._syncApplySequence=[];this.addStoreToApplySequence(stores);},get:function get(){return this._syncApplySequence;}},{key:"isCrudManagerLoading",get:function get(){return Boolean(this.activeRequests.load||this.applyingLoadResponse);}},{key:"requestId",get:function get(){return Date.now()+''+this._requestId++;}}],[{key:"crudManagerDefaultConfig",//region Default config
get:function get(){// static get defaultConfig() {
return{// overrideCrudStoreLoad : false,
/**
             * The server revision stamp.
             * The _revision stamp_ is a number which should be incremented after each server-side change.
             * This property reflects the current version of the data retrieved from the server and gets updated after each {@link #function-load} and {@link #function-sync} call.
             * @property {Number}
             * @readonly
             */crudRevision:null,/**
             * A list of registered stores whose server communication will be collected into a single batch.
             * Each store is represented by a _store descriptor_, an object having following structure:
             * @member {Object[]} crudStores
             * @property {String} stores.storeId Unique store identifier.
             * @property {Common.data.Store} stores.store Store itself.
             * @property {String} [stores.phantomIdField] Set this if store model has a predefined field to keep phantom record identifier.
             * @property {String} [stores.idField] id field name, if it's not specified then class will try to get it from a store model.
             */ /**
             * Sets the list of stores controlled by the CRUD manager.
             * Store can be provided by itself, its storeId or an object having the following structure:
             * @property {String} stores.storeId Unique store identifier. Under this name the store related requests/responses will be sent.
             * @property {Common.data.Store} stores.store The store itself.
             * @property {String} [stores.phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.
             * @property {String} [stores.idField] id field name, if it's not specified then class will try to get it from a store model.
             * @config {Common.data.Store[]|String[]|Object[]}
             */crudStores:[],/**
             * Name of a store property to retrieve store identifiers from.
             * Store identifier is used as a container name holding corresponding store data while transferring them to/from the server.
             * By default `storeId` property is used. And in case a container identifier has to differ this config can be used:
             *
             * ```javascript
             * class CatStore extends Store {
             *     // storeId is "meow" but for sending/receiving store data
             *     // we want have "cats" container in JSON, so we create a new property "storeIdForCrud"
             *     storeId          : 'meow',
             *     storeIdForCrud   : 'cats'
             * });
             *
             * class MyCrudManager extends CrudManager {
             *     ...
             *     crudStores           : ['meow'],
             *     // crud manager will get store identifier from "storeIdForCrud" property
             *     storeIdProperty  : 'storeIdForCrud'
             * });
             * ```
             * The `storeIdProperty` property can also be specified directly on a store:
             *
             * ```javascript
             * class CatStore extends Store {
             *     // storeId is "meow" but for sending/receiving store data
             *     // we want have "cats" container in JSON
             *     storeId          : 'meow',
             *     // so we create a new property "storeIdForCrud"..
             *     storeIdForCrud  : 'cats',
             *     // and point CrudManager to use it as the store identifier source
             *     storeIdProperty  : 'storeIdForCrud'
             * });
             *
             * class DogStore extends Store {
             *     // storeId is "dogs" and it will be used as a container name for the store data
             *     storeId          : 'dogs'
             * });
             *
             * class MyCrudManager extends CrudManager {
             *     ...
             *     crudStores           : ['meow', 'dogs']
             * });
             * ```
             * @config {String}
             */storeIdProperty:'storeId',// TODO: no support for remote filtering yet
// /**
//  * The name of the 'filter' parameter to send in a load request.
//  * @config {String}
//  * @default
//  */
crudFilterParam:'filter',/**
             * Sends request to the server.
             * @function sendRequest
             * @param {Object} request The request to send. An object having following properties:
             * @param {String} request.data {@link #function-encode Encoded} request.
             * @param {String} request.type Request type, can be either `load` or `sync`
             * @param {Function} request.success Callback to be started on successful request transferring
             * @param {Function} request.failure Callback to be started on request transfer failure
             * @param {Object} request.thisObj `this` reference for the above `success` and `failure` callbacks
             * @return {Promise} The request promise.
             * @abstract
             */ /**
             * Cancels request to the server.
             * @function cancelRequest
             * @param {Object} request The request to cancel (a value returned by corresponding {@link #function-sendRequest} call).
             * @abstract
             */ /**
             * Encodes request to the server.
             * @function encode
             * @param {Object} request The request to encode.
             * @returns {String} The encoded request.
             * @abstract
             */ /**
             * Decodes response from the server.
             * @function decode
             * @param {String} response The response to decode.
             * @returns {Object} The decoded response.
             * @abstract
             */transport:{},/**
             * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
             * So `load` request may be responded with `sync` response for example.
             * Can be used for smart server logic allowing the server to decide when it's better to respond with a complete data set (`load` response)
             * or it's enough to return just a delta (`sync` response).
             * @config {Boolean}
             * @default
             */trackResponseType:false,/**
             * Field name to be used to transfer a phantom record identifier.
             * @config {String}
             * @default
             */phantomIdField:'$PhantomId',/**
             * `true` to automatically call {@link #function-load} method after creation.
             * @config {Boolean}
             * @default
             */autoLoad:false,/**
             * The timeout in milliseconds to wait before persisting changes to the server.
             * Used when {@link #config-autoSync} is set to `true`.
             * @config {Number}
             * @default
             */autoSyncTimeout:100,/**
             * `true` to automatically persist store changes after edits are made in any of the stores monitored.
             * Please note that sync request will not be invoked immediately but only after {@link #config-autoSyncTimeout} interval.
             * @config {Boolean}
             * @default
             */autoSync:false,/**
             * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them to the server.
             * @config {Boolean}
             * @default
             */resetIdsBeforeSync:true,/**
             * @member {Object[]} syncApplySequence
             * An array of stores presenting an alternative sync responses apply order.
             * Each store is represented by a _store descriptor_, an object having following structure:
             * @property {String} syncApplySequence.storeId Unique store identifier.
             * @property {Common.data.Store} syncApplySequence.store Store itself.
             * @property {String} [syncApplySequence.phantomIdField] Set this if store model has a predefined field to keep phantom record identifier.
             * @property {String} [syncApplySequence.idField] id field name, if it's not specified then class will try to get it from a store model.
             */ /**
             * An array of store identifiers sets an alternative sync responses apply order.
             * By default the order in which sync responses are applied to the stores is the same as they registered in.
             * But in case of some tricky dependencies between stores this order can be changed:
             *
             *```javascript
             * class MyCrudManager extends CrudManager {
             *     // register stores (they will be loaded in the same order: 'store1' then 'store2' and finally 'store3')
             *     crudStores : ['store1', 'store2', 'store3'],
             *     // but we apply changes from server to them in an opposite order
             *     syncApplySequence : ['store3', 'store2', 'store1']
             * });
             *```
             * @config {String[]}
             */syncApplySequence:[],/**
             * true to write all fields from the record to the server. If set to false it will only send the fields that
             * were modified. Note that any fields that have `persist` set to false will still be ignored while those
             * with `critical` set to true will be included.
             * @config {Boolean}
             * @default
             */writeAllFields:false,crudIgnoreUpdates:0,// Flag that shows if crud manager performed successful load request
crudLoaded:false,createMissingRecords:false,autoSyncTimerId:null,applyingLoadResponse:false,applyingSyncResponse:false,callOnFunctions:true};}}]);return AbstractCrudManagerMixin;}(Target));};/**
 * @module Scheduler/crud/AbstractCrudManager
 */ /**
 * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.
 * It implements basic mechanisms to organize batch communication with a server.
 * Yet it does not contain methods related to _data transfer_ nor _encoding_.
 * These methods are to be provided in sub-classes by consuming the appropriate mixins.
 *
 * For example, this is how the class can be used to implement an JSON encoding system:
 *
 * ```javascript
 * // let's make new CrudManager using AJAX as a transport system and JSON for encoding
 * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {
 *
 * }
 * ```
 *
 * ## Data transfer and encoding methods
 * These are methods that must be provided by subclasses of this class:
 *
 * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)
 * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)
 * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)
 * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)
 *
 * @extends Common/Base
 * @mixes Common/mixin/Events
 * @mixes Scheduler/crud/AbstractCrudManagerMixin
 * @abstract
 */var AbstractCrudManager=/*#__PURE__*/function(_AbstractCrudManagerM){_inherits2(AbstractCrudManager,_AbstractCrudManagerM);function AbstractCrudManager(){_classCallCheck2(this,AbstractCrudManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(AbstractCrudManager).apply(this,arguments));}_createClass2(AbstractCrudManager,[{key:"construct",//endregion
//region Init
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(config.stores){config.crudStores=config.stores;delete config.stores;}_get2(_getPrototypeOf2(AbstractCrudManager.prototype),"construct",this).call(this,config);}//endregion
//region Store collection (add, remove, get & iterate)
},{key:"commit",/**
     * Commits all records changes of all the registered stores.
     */value:function commit(){this.commitCrudStores();}/**
     * Rejects all records changes on all stores and re-insert any records that were removed locally. Any phantom records will be removed.
     */},{key:"reject",value:function reject(){this.rejectCrudStores();}/**
     * Adds a store to the collection.
     *
     *```javascript
     * // append stores to the end of collection
     * crudManager.addStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     *```
     *
     * **Note:** Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * @param {Common.data.Store|String|Object|Common.data.Store[]|String[]|Object[]} store
     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.
     * The _store descriptor_ is an object having following properties:
     * @param {String} store.storeId The store identifier that will be used as a key in requests.
     * @param {Common.data.Store} store.store The store itself.
     * @param {String} [store.idField] The idField of the store. If not specified will be taken from the store model.
     * @param {String} [store.phantomIdField] The field holding unique Ids of phantom records (if store has such model).
     * @param {Boolean} [store.writeAllFields] Set to true to write all fields from modified records
     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the this position will be taken relative to it.
     * If not specified then store(s) will be appended to the end of collection.
     * Otherwise it will be just a position in stores collection.
     *
     * ```javascript
     * // insert stores store4, store5 to the start of collection
     * crudManager.addStore([ store4, store5 ], 0);
     * ```
     *
     * @param {String|Common.data.Store|Object} [fromStore] The store relative to which position should be calculated. Can be defined as a store identifier, instance or descriptor (the result of {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).
     *
     * ```javascript
     * // insert store6 just before a store having storeId equal to 'foo'
     * crudManager.addStore(store6, 0, 'foo');
     *
     * // insert store7 just after store3 store
     * crudManager.addStore(store7, 1, store3);
     * ```
     */},{key:"addStore",value:function addStore(){return this.addCrudStore.apply(this,arguments);}},{key:"removeStore",value:function removeStore(){return this.removeCrudStore.apply(this,arguments);}},{key:"getStore",value:function getStore(){return this.getCrudStore.apply(this,arguments);}},{key:"hasChanges",value:function hasChanges(){return this.crudStoreHasChanges.apply(this,arguments);}},{key:"loadData",value:function loadData(){return this.loadCrudManagerData.apply(this,arguments);}},{key:"revision",//region Default config
/**
     * The server revision stamp.
     * The _revision stamp_ is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated after each {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.
     * @property {Number} revision
     * @readonly
     */get:function get(){return this.crudRevision;},set:function set(value){this.crudRevision=value;}},{key:"stores",set:function set(stores){// debugger
if(stores!==this.crudStores){this.crudStores=stores;}}/**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a _store descriptor_, an object having following structure:
     * @member {Object[]} stores
     * @property {String} stores.storeId Unique store identifier.
     * @property {Common.data.Store} stores.store Store itself.
     * @property {String} [stores.phantomIdField] Set this if store model has a predefined field to keep phantom record identifier.
     * @property {String} [stores.idField] id field name, if it's not specified then class will try to get it from a store model.
     */,get:function get(){return this.crudStores;}//endregion
/**
     * Returns true if the crud manager is currently loading data
     * @property {Boolean}
     * @readonly
     * @category CRUD
     */},{key:"isLoading",get:function get(){return this.isCrudManagerLoading;}}],[{key:"defaultConfig",get:function get(){// debugger
return Object.assign({},this.crudManagerDefaultConfig,{overrideCrudStoreLoad:true,/**
             * Sets the list of stores controlled by the CRUD manager.
             * Store can be provided by itself, its storeId or an object having the following structure:
             * @property {String} stores.storeId Unique store identifier. Under this name the store related requests/responses will be sent.
             * @property {Common.data.Store} stores.store The store itself.
             * @property {String} [stores.phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.
             * @property {String} [stores.idField] id field name, if it's not specified then class will try to get it from a store model.
             * @config {Common.data.Store[]|String[]|Object[]}
             */stores:null/**
             * Encodes request to the server.
             * @function encode
             * @param {Object} request The request to encode.
             * @returns {String} The encoded request.
             * @abstract
             */ /**
             * Decodes response from the server.
             * @function decode
             * @param {String} response The response to decode.
             * @returns {Object} The decoded response.
             * @abstract
             */});}}]);return AbstractCrudManager;}(AbstractCrudManagerMixin(Events(Base)));exports.AbstractCrudManager=AbstractCrudManager;AbstractCrudManager._$name='AbstractCrudManager';/**
 * @module Scheduler/model/AssignmentModel
 */ /**
 * This class represent a single assignment of a resource to an event in scheduler.
 * It is a subclass of {@link Common.data.Model} class.
 * Please refer to the documentation for that class to become familiar with the base interface of this class.
 *
 * An Assignment has the following fields:
 * - `id` - The id of the assignment
 * - `resourceId` - The id of the resource assigned
 * - `eventId` - The id of the event to which the resource is assigned
 *
 * The data source for these fields can be customized by subclassing this class.
 *
 * @extends Common/data/Model
 */var AssignmentModel=/*#__PURE__*/function(_Model4){_inherits2(AssignmentModel,_Model4);function AssignmentModel(){_classCallCheck2(this,AssignmentModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentModel).apply(this,arguments));}_createClass2(AssignmentModel,[{key:"getResource",// /**
//  * Returns an event associated with this assignment.
//  *
//  * @privateparam  {Scheduler.data.EventStore} [eventStore]
//  * @return {Scheduler.model.TimeSpan} Event instance
//  */
// getEvent(eventStore = this.eventStore) {
//     // removed assignment will not have "this.joined" so we are providing a way to get an event via provided
//     // event store
//     return eventStore && eventStore.getById(this.eventId);
// }
/**
     * Returns the resource associated with this assignment.
     *
     * @privateparam {Scheduler.data.ResourceStore} [resourceStore]
     * @return {Scheduler.model.ResourceModel} Instance of resource
     */value:function getResource(){var resourceStore=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.resourceStore;// removed assignment will not have "this.joined" so we are providing a way to get a resource via provided
// resource store
return resourceStore&&resourceStore.getById(this.resourceId);}// /**
//  * Convenience method to get a name of the associated event.
//  *
//  * @privateparam  {Scheduler.data.EventStore} [eventStore]
//  * @return {String} name
//  */
// getEventName(eventStore) {
//     const evnt = this.getEvent(eventStore);
//     return evnt && evnt.name || '';
// }
// /**
//  * Convenience method to get a name of the associated resource.
//  *
//  * @privateparam {Scheduler.data.ResourceStore} [resourceStore]
//  * @return {String} name
//  */
// getResourceName(resourceStore) {
//     const resource = this.getResource(resourceStore);
//     return resource && resource.name || '';
// }
//endregion
// Convenience getter to not have to check `instanceof AssignmentModel`
},{key:"fullCopy",value:function fullCopy(){// NOT IMPLEMENTED
//return this.copy.apply(this, arguments);
throw new Error('Not implemented');}// private
},{key:"assignmentStore",//endregion
//region Stores
/**
     * Returns an assigment store this assignment is part of. Assignment must be part of an assigment store
     * to be able to retrieve it.
     *
     * @return {Scheduler.data.AssignmentStore}
     */get:function get(){return this.stores&&this.stores[0];}/**
     * Returns an event store this assignment uses as default event store. Assignment must be part
     * of an assignment store to be able to retrieve default event store.
     *
     * @return {Scheduler.data.EventStore}
     */},{key:"eventStore",get:function get(){var assignmentStore=this.assignmentStore;return assignmentStore&&assignmentStore.eventStore;}/**
     * Returns a resource store this assignment uses as default resource store. Assignment must be part
     * of an assignment store to be able to retrieve default resource store.
     *
     * @return {Scheduler.data.ResourceStore}
     */},{key:"resourceStore",get:function get(){var eventStore=this.eventStore;return eventStore&&eventStore.resourceStore;}//endregion
//region Event & resource
/**
     * Convenience property to get the name of the associated event.
     * @property {String}
     * @readonly
     */},{key:"eventName",get:function get(){return this.event&&this.event.name;}/**
     * Convenience property to get the name of the associated resource.
     * @property {String}
     * @readonly
     */},{key:"resourceName",get:function get(){return this.resource&&this.resource.name;}},{key:"isAssignment",get:function get(){return true;}/**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     *
     * @return {Boolean} true if this model can be persisted to server.
     */},{key:"isPersistable",get:function get(){var event=this.event,resource=this.resource;return this.isValid&&!event.hasGeneratedId&&!resource.hasGeneratedId;}},{key:"isValid",get:function get(){return this.resource!=null&&this.event!=null;}},{key:"eventResourceCompositeKey",get:function get(){return AssignmentModel.makeAssignmentEventResourceCompositeKey(this.eventId,this.resourceId);}}],[{key:"makeAssignmentEventResourceCompositeKey",value:function makeAssignmentEventResourceCompositeKey(eventId,resourceId){return"event(".concat(eventId,")-resource(").concat(resourceId,")");}},{key:"fields",//region Fields
get:function get(){return[/**
             * Id for the resource assigned
             * @field {String|Number} resourceId
             */{name:'resourceId'},/**
             * Id for the event assigned
             * @field {String|Number} eventId
             */{name:'eventId'}];}},{key:"relationConfig",get:function get(){return[/**
             * Resource assigned
             * @member {Scheduler.model.ResourceModel} resource
             */{relationName:'resource',fieldName:'resourceId',store:'resourceStore',collectionName:'assignments'},/**
             * Event assigned
             * @member {Scheduler.model.EventModel} event
             */{relationName:'event',fieldName:'eventId',store:'eventStore',collectionName:'assignments'}];}}]);return AssignmentModel;}(Model);exports.SchedulerAssignmentModel=AssignmentModel;AssignmentModel.exposeProperties();AssignmentModel._$name='AssignmentModel';/**
 * @module Scheduler/data/AssignmentStore
 */ /**
 * A class representing a collection of assignments between events in the {@link Scheduler.data.EventStore} and resources
 * in the {@link Scheduler.data.ResourceStore}.
 *
 * Contains a collection of {@link Scheduler.model.AssignmentModel} records.
 *
 * @extends Common/data/Store
 */var AssignmentStore=/*#__PURE__*/function(_AjaxStore){_inherits2(AssignmentStore,_AjaxStore);function AssignmentStore(){_classCallCheck2(this,AssignmentStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentStore).apply(this,arguments));}_createClass2(AssignmentStore,[{key:"doDestroy",//region Init & destroy
value:function doDestroy(){var me=this;me.eventStoreDetacher&&me.eventStoreDetacher();me.resourceStoreDetacher&&me.resourceStoreDetacher();_get2(_getPrototypeOf2(AssignmentStore.prototype),"doDestroy",this).call(this);}//endregion
//region Stores
/**
     * Get/set the associated event store instance.  Usually it is configured automatically, by the event store itself.
     *
     * @param {Scheduler.data.EventStore}
     */},{key:"attachToEventStore",value:function attachToEventStore(eventStore){var me=this;me.eventStoreDetacher&&me.eventStoreDetacher();if(eventStore){me.eventStoreDetacher=eventStore.on({'remove':me.onEventRemove,'resourcestorechange':me.onEventStoreResourceStoreChange,thisObj:me,prio:200// higher then in cache, we need those handlers to do their job before cache update
});}// If store is assigned after configuration we need to init relations
if(!me.isConfiguring){me.initRelations(true);}me.attachToResourceStore(eventStore&&eventStore.resourceStore);}},{key:"attachToResourceStore",value:function attachToResourceStore(resourceStore){var me=this;me.resourceStore=resourceStore;me.resourceStoreDetacher&&me.resourceStoreDetacher();if(resourceStore){me.resourceStoreDetacher=resourceStore.on({remove:me.onResourceRemove,removeAll:me.onResourceRemoveAll,thisObj:me,prio:200// higher then in cache
});// If store is assigned after configuration we need to init relations
if(!me.isConfiguring){me.initRelations(true);}}}},{key:"onEventStoreResourceStoreChange",value:function onEventStoreResourceStoreChange(_ref193){var newResourceStore=_ref193.newResourceStore;this.attachToResourceStore(newResourceStore);}//endregion
//region Event & resource events
// TODO: We have no isMove in our stores
},{key:"onEventRemove",value:function onEventRemove(_ref194){var records=_ref194.records,isMove=_ref194.isMove,isCollapse=_ref194.isCollapse;if(!isMove&&!isCollapse){var assignments=[];records.forEach(function(record){// traversing in a flat structure will only call fn on self, no need to handle tree case differently
record.traverse(function(eventRecord){assignments.push.apply(assignments,_toConsumableArray(eventRecord.assignments));});});// Flag that remove is caused by removing events, to prevent getting stuck in removal loop in SchedulerStores
this.isRemovingEvent=true;assignments.length&&this.remove(assignments);this.isRemovingEvent=false;}}// TODO: We have no isMove in our stores
},{key:"onResourceRemove",value:function onResourceRemove(_ref195){var records=_ref195.records,isMove=_ref195.isMove,isCollapse=_ref195.isCollapse;if(!isMove&&!isCollapse){var assignments=[];records.forEach(function(record){// traversing in a flat structure will only call fn on self, no need to handle tree case differently
record.traverse(function(resourceRecord){assignments.push.apply(assignments,_toConsumableArray(resourceRecord.assignments));});});// TODO: Make resource removal behaviour configurable
assignments.length&&this.remove(assignments);}}},{key:"onResourceRemoveAll",value:function onResourceRemoveAll(){// TODO: Make resource removal behaviour configurable
this.removeAll();}//endregion
//region Mapping
/**
     * Maps over event assignments.
     *
     * @param {Scheduler.model.EventModel} event
     * @param {Function} [fn]
     * @param {Function} [filterFn]
     * @return {Array}
     */},{key:"mapAssignmentsForEvent",value:function mapAssignmentsForEvent(event,fn,filterFn){var me=this,fnSet=Boolean(fn),filterFnSet=Boolean(filterFn),eventId=Model.asId(event),assignmentCache=me.relationCache.event&&me.relationCache.event[eventId];if(!assignmentCache)return[];fn=fn||function(a){return a;};filterFn=filterFn||function(){return true;};if(fnSet||filterFnSet){return assignmentCache.reduce(function(result,assignment){var mapResult=fn(assignment);if(filterFn(mapResult)){//result = result.concat([mapResult]);
result.push(mapResult);}return result;},[]);}return assignmentCache;}/**
     * Maps over resource assignments.
     *
     * @param {Scheduler.model.ResourceModel|Number|String} resource
     * @param {Function} [fn]
     * @param {Function} [filterFn]
     * @return {Scheduler.model.ResourceModel[]}
     */},{key:"mapAssignmentsForResource",value:function mapAssignmentsForResource(resource,fn,filterFn){var me=this,fnSet=Boolean(fn),filterFnSet=Boolean(filterFn),resourceId=Model.asId(resource),assignmentCache=me.relationCache.resource&&me.relationCache.resource[resourceId];if(!assignmentCache)return[];fn=fn||function(a){return a;};filterFn=filterFn||function(){return true;};if(fnSet||filterFnSet){return assignmentCache.reduce(function(result,assignment){var mapResult=fn(assignment);if(filterFn(mapResult)){//result = result.concat([mapResult]);
result.push(mapResult);}return result;},[]);}return assignmentCache;}/**
     * Returns all assignments for a given event.
     *
     * @param {Scheduler.model.TimeSpan} event
     * @return {Scheduler.model.AssignmentModel[]}
     */},{key:"getAssignmentsForEvent",value:function getAssignmentsForEvent(event){return event.assignments;}/**
     * Removes all assignments for given event
     *
     * @param {Scheduler.model.TimeSpan|Object} event
     */},{key:"removeAssignmentsForEvent",value:function removeAssignmentsForEvent(event){return this.remove(event.assignments);}/**
     * Returns all assignments for a given resource.
     *
     * @param {Scheduler.model.ResourceModel|Object} event
     * @return {Scheduler.model.TimeSpan[]}
     */},{key:"getAssignmentsForResource",value:function getAssignmentsForResource(resource){return this.mapAssignmentsForResource(resource);}/**
     * Removes all assignments for given resource
     *
     * @param {Scheduler.model.ResourceModel|*} resource
     */},{key:"removeAssignmentsForResource",value:function removeAssignmentsForResource(resource){this.remove(this.getAssignmentsForResource(resource));}/**
     * Returns all resources assigned to an event.
     *
     * @param {Scheduler.model.EventModel} event
     * @return {Scheduler.model.ResourceModel[]}
     */},{key:"getResourcesForEvent",value:function getResourcesForEvent(event){var me=this;// TODO: cache event -> resource
//if (!me.relationCache.events) return []; //return me.eventResourceCache.get(event);
return me.mapAssignmentsForEvent(event,function(assignment){return assignment.resource;},function(resource){return Boolean(resource);});}/**
     * Returns all events assigned to a resource
     *
     * @param {Scheduler.model.ResourceModel|*} resource
     * @return {Scheduler.model.TimeSpan[]}
     */},{key:"getEventsForResource",value:function getEventsForResource(resource){var me=this;//if (me.resourceEventsCache) return me.resourceEventsCache.get(resource);
return me.mapAssignmentsForResource(resource,function(assignment){return assignment.event;},function(event){return!!event;});}/**
     * Creates and adds assignment record(s) for a given event and resource.
     *
     * @param {Scheduler.model.TimeSpan|*} event
     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} resource The resource(s) to assign to the event
     * @privateparam {Function} [assignmentSetupFn]
     * @privateparam {Boolean} [removeExistingAssignments] true to first remove existing assignments
     * @return {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)
     */},{key:"assignEventToResource",value:function assignEventToResource(event,resource){var assignmentSetupFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:function(o){return o;};var removeExistingAssignments=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,resources=Array.isArray(resource)?resource:[resource];var assignments=[];me.beginBatch();if(removeExistingAssignments){me.removeAssignmentsForEvent(event);}resources.forEach(function(resource){if(!me.isEventAssignedToResource(event,resource)){var assignment=new me.modelClass({eventId:Model.asId(event),resourceId:Model.asId(resource)});assignment=assignmentSetupFn(assignment);assignments.push(assignment);}});assignments=me.add(assignments);me.endBatch();return assignments;}/**
     * Removes assignment record for a given event and resource.
     *
     * @param {Scheduler.model.TimeSpan|String|Number} event
     * @param {Scheduler.model.ResourceModel|String|Number} [resource] The resource to unassign the event from. If omitted, all resources of the events will be unassigned
     * @return {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]}
     */},{key:"unassignEventFromResource",value:function unassignEventFromResource(event,resource){var me=this;if(!resource)return me.removeAssignmentsForEvent(event);if(me.isEventAssignedToResource(event,resource)){var assignment=me.getAssignmentForEventAndResource(event,resource);me.remove(assignment);return assignment;}return null;}/**
     * Checks whether an event is assigned to a resource.
     *
     * @param {Scheduler.model.EventModel|String|Number} event Event record or id
     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource record or id
     * @return {Boolean}
     */},{key:"isEventAssignedToResource",value:function isEventAssignedToResource(event,resource){var me=this,records=me.getResourcesForEvent(event),resourceId=Model.asId(resource);// noinspection EqualityComparisonWithCoercionJS
return records.some(function(res){return res.id==resourceId;});}/**
     * Returns an assignment record for a given event and resource
     *
     * @param {Scheduler.model.EventModel|String|Number} event The event or its id
     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource or its id
     * @return {Scheduler.model.AssignmentModel}
     */},{key:"getAssignmentForEventAndResource",value:function getAssignmentForEventAndResource(event,resource){var me=this;event=me.eventStore.getById(event);resource=me.resourceStore.getById(resource);//const key = me.modelClass.makeAssignmentEventResourceCompositeKey(event, resource);
//TODO: PORT key map
//return me.records.find(a => key == me.modelClass.makeAssignmentEventResourceCompositeKey(a.eventId, a.resourceId));
// noinspection EqualityComparisonWithCoercionJS
return me.records.find(function(assignment){return assignment.event==event&&assignment.resource==resource;});}//endregion
},{key:"eventStore",get:function get(){return this._eventStore;},set:function set(eventStore){var me=this,oldStore=me._eventStore;me._eventStore=eventStore||null;me.attachToEventStore(me._eventStore);if((oldStore||eventStore)&&oldStore!==eventStore){/**
             * Fires when new event store is set via {@link #property-eventStore} method.
             * @event eventstorechange
             * @param {Scheduler.data.AssignmentStore} this
             * @param {Scheduler.data.EventStore} newEventStore
             * @param {Scheduler.data.EventStore} oldEventStore
             */me.trigger('eventStoreChange',{newEventStore:eventStore,oldEventStore:oldStore});}}}],[{key:"defaultConfig",get:function get(){return{/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:300,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:300,modelClass:AssignmentModel};}}]);return AssignmentStore;}(AjaxStore);exports.SchedulerAssignmentStore=AssignmentStore;AssignmentStore._$name='AssignmentStore';/**
 * @module Scheduler/model/CalendarDayModel
 */ /**
 * A model representing a single day in the calendar. Depending on the `type` field, day may be a concrete day per se (2012/01/01),
 * a certain weekday (all Thursdays), or an override for all certain weekdays in the timeframe
 * (all Fridays between 2012/01/01 - 2012/01/15, inclusive).
 *
 * A collection of CalendarDayModel instances to be provided for the {@link Scheduler.data.Calendar calendar}
 *
 * @extends Common/data/Model
 */var CalendarDayModel=/*#__PURE__*/function(_Model5){_inherits2(CalendarDayModel,_Model5);function CalendarDayModel(){_classCallCheck2(this,CalendarDayModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarDayModel).apply(this,arguments));}_createClass2(CalendarDayModel,[{key:"clearDate",/**
     * Clears the date for this day
     */value:function clearDate(){this.set('date',null);}// needed since you cannot override setter only
},{key:"getAvailability",/**
     * This method returns the availability for this day. By default it will decode an array of strings '08:00-12:00' to
     * an array of objects like:
     * ```javascript
     * {
     *    startTime       : new Date(0, 0, 0, 8),
     *    endTime         : new Date(0, 0, 0, 12)
     * }
     * ```
     * You can pass the "asString" flag to disable that and just return strings.
     *
     * @param {Boolean} asString Whether to just return an array of strings, instead of objects.
     * @return {Object[]|String[]} Array of objects with "startTime", "endTime" properties.
     */value:function getAvailability(asString){var me=this;// Return the raw availability array with strings
if(asString)return me.get('availability');if(me.availabilityCache)return me.availabilityCache;var parsed=me.get('availability').map(function(value){return typeof value==='string'?me.parseInterval(value):value;});me.verifyAvailability(parsed);return me.availabilityCache=parsed;}},{key:"verifyAvailability",value:function verifyAvailability(intervals){var me=this;intervals.sort(function(a,b){return a.startTime-b.startTime;});intervals.forEach(function(interval,i){if(interval.startTime>interval.endTime){throw new Error("Start time ".concat(DateHelper.format(interval.startTime,'HH:mm')," is greater than end time ").concat(DateHelper.format(interval.endTime,'HH:mm')));}if(i>0&&intervals[i-1].endTime>interval.startTime){throw new Error("Availability intervals should not intersect: [".concat(me.stringifyInterval(intervals[i-1]),"] and [").concat(me.stringifyInterval(interval),"]"));}});}//prependZero(value) {
//    return value < 10 ? '0' + value : value;
//}
},{key:"stringifyInterval",value:function stringifyInterval(interval){var startTime=interval.startTime,endTime=interval.endTime;return DateHelper.format(startTime,'HH:mm')+'-'+DateHelper.format(endTime,'HH:mm');//return this.prependZero(startTime.getHours()) + ':' + this.prependZero(startTime.getMinutes()) + '-' +
//    (endTime.getDate() == 1 ? 24 : this.prependZero(endTime.getHours())) + ':' + this.prependZero(endTime.getMinutes());
}},{key:"stringifyIntervals",value:function stringifyIntervals(intervals){var me=this;return intervals.map(function(interval){return typeof interval==='string'?interval:me.stringifyInterval(interval);});}},{key:"parseInterval",value:function parseInterval(string){var match=/(\d\d):(\d\d)-(\d\d):(\d\d)/.exec(string);if(!match)throw new Error("Invalid format for availability string: ".concat(String,". It should have exact format: hh:mm-hh:mm"));return{startTime:new Date(0,0,0,match[1],match[2]),endTime:new Date(0,0,0,match[3],match[4])};}/**
     * Returns the total length of all availability intervals for this day in hours.
     *
     * @property {Number}
     * @readonly
     */},{key:"addAvailabilityInterval",/**
     * Adds a new availability interval to this day. Both arguments should have the same format.
     *
     * @param {Date|String} startTime Start time of the interval. Can be a Date object (new Date(0, 0, 0, 8)) or just a plain string: '08'
     * @param {Date|String} endTime End time of the interval. Can be a Date object (new Date(0, 0, 0, 12)) or just a plain string: '12'
     */value:function addAvailabilityInterval(startTime,endTime){var interval;if(startTime instanceof Date){interval={startTime:startTime,endTime:endTime};}else{interval=this.parseInterval(startTime+(endTime?'-'+endTime:''));}var intervals=this.getAvailability().concat(interval);this.verifyAvailability(intervals);this.setAvailability(intervals);}/**
     * Removes the availability interval by its index.
     *
     * @param {Number} index Ordinal position of the interval to be removed
     */},{key:"removeAvailabilityInterval",value:function removeAvailabilityInterval(index){var intervals=this.getAvailability();intervals.splice(index,1);this.setAvailability(intervals);}/**
     * Applies the availability intervals to a concrete day. For example the availability intervals [ '08:00-12:00', '13:00-17:00' ],
     * applied to a day 2012/01/01 will return the following result:
     * ```javascript
     * [
     * {
     *     startDate       : new Date(2012, 0, 1, 8),
     *     endDate         : new Date(2012, 0, 1, 12)
     * },
     * {
     *     startDate       : new Date(2012, 0, 1, 13),
     *     endDate         : new Date(2012, 0, 1, 17)
     * }
     * ]
     * ```
     * @param {Date} timeDate The date to apply the intervals to
     * @returns {Object[]} Array of objects with "startDate / endDate" properties.
     */},{key:"getAvailabilityIntervalsFor",value:function getAvailabilityIntervalsFor(timeDate){timeDate=typeof timeDate==='number'?new Date(timeDate):timeDate;var year=timeDate.getFullYear(),month=timeDate.getMonth(),date=timeDate.getDate();return this.getAvailability().map(function(interval){var endDate=interval.endTime.getDate();return{startDate:new Date(year,month,date,interval.startTime.getHours(),interval.startTime.getMinutes()),endDate:new Date(year,month,date+(endDate==1?1:0),interval.endTime.getHours(),interval.endTime.getMinutes())};});}/**
     * Returns the earliest available time for the given date. If this day has no availability intervals it returns `null`.
     *
     * @param {Date} timeDate The date to get the earliest availability time for.
     * @return {Date}
     */},{key:"getAvailabilityStartFor",value:function getAvailabilityStartFor(timeDate){var intervals=this.getAvailabilityIntervalsFor(timeDate);if(!intervals.length)return null;return intervals[0].startDate;}/**
     * Returns the latest available time for the given date. If this day has no availability intervals, it returns `null`.
     *
     * @param {Date} timeDate The date to get the latest availability time for.
     * @return {Date}
     */},{key:"getAvailabilityEndFor",value:function getAvailabilityEndFor(timeDate){var intervals=this.getAvailabilityIntervalsFor(timeDate);if(!intervals.length)return null;return intervals[intervals.length-1].endDate;}},{key:"date",set:function set(date){if(date)date=DateHelper.startOf(date,'day');this.set('date',date);},get:function get(){return this.get('date');}},{key:"availability",get:function get(){return this.get('availability');},set:function set(intervals){// clear cache
this.availabilityCache=null;this.set('availability',this.stringifyIntervals(intervals));// to trigger the `verifyAvailability`
this.getAvailability();}},{key:"totalHours",get:function get(){return this.getTotalMS()/1000/60/60;}/**
     * Returns the total length of all availability intervals for this day in milliseconds.
     *
     * @property {Number}
     * @readonly
     */},{key:"totalMS",get:function get(){return this.getAvailability().reduce(function(totalMS,interval){return totalMS+=interval.endTime-interval.startTime;},0);}}],[{key:"fields",get:function get(){return[/**
             * The id of the date. Can be an arbitrary unique value, assigned by the server
             * @field {String|Number} id
             */ /**
             * The date for this day in the ISO 8601 format. Any time information in this field will be cleared. If this
             * instance represents a weekday or week override, this field will be ignored.
             * @field {String|Date} date
             */{name:'date',type:'date',format:'YYYY-MM-DD',persist:true},/**
             * The index of the week day (0 - Sunday, 1 - Monday and so on) if this instance contains information about the week day (applicable for `WEEKDAY` and `WEEKDAYOVERRIDE`).
             * Should be set to -1 for the "main" instance of the week overrides.
             * @field {Number} weekday
             */{name:'weekday',type:'int'},/**
             * The start date of the timespan for week day override.
             * @field {Date} overrideStartDate
             */{name:'overrideStartDate',type:'date',dateFormat:'YYYY-MM-DD'},/**
             * The end date of the timespan for week day override.
             * @field {Date} overrideEndDate
             */{name:'overrideEndDate',type:'date',dateFormat:'YYYY-MM-DD'},/**
             * The type of this calendar day. Can be one of the following `DAY`, `WEEKDAY`, `WEEKDAYOVERRIDE`:
             * - Default value is `DAY` meaning this day represents a "real" day in the calendar (2012/01/01 for example) and contains availability information for that particular day only.
             * The date is stored in the `Date` field.
             * - The `WEEKDAY` value means calendar day contains information about all weekdays with the index, given in the `Weekday` field (0 - Sunday, 1 - Monday and so on).
             * For example - all Fridays. `Date` field is ignored.
             * - <p>The `WEEKDAYOVERRIDE` value means calendar day contains information about all weekdays within certain timespan. For example - all Fridays between 2012/01/01 - 2012/01/15.
             * Week day index should be stored in the `Weekday` field again, beginning of the timespan - in the `OverrideStartDate` field and the end of timespan - in the `OverrideEndDate`.
             * </p>
             * <p>
             * A single day instance contains the override for a single week day. So, to define overrides for several days (Monday and Tuesday for example) - add an additional instance
             * to the calendar with the same `Name/OverrideStartDate/OverrideEndDate` values. There's no need to define an override for every weekday - if some day is not defined - the
             * default availability will be used.
             * </p>
             * <p>
             * * **Note** Every week override should also have a "main" calendar day instance, representing the override itself. It should have the same
             * values for `Name/OverrideStartDate/OverrideEndDate` fields and -1 for `Weekday`. Also, the timespans of all week overrides should not intersect.
             * </p>
             * <p>
             * To avoid manual creation of week overrides you can use the calendar API (for example, {@link Scheduler.data.Calendar#function-addNonStandardWeek addNonStandardWeek},
             * {@link Scheduler.data.Calendar#function-removeNonStandardWeek removeNonStandardWeek} methods).
             * </p>
             * @field {String} type
             * @default 'DAY'
             */{name:'type',defaultValue:'DAY'// 'DAY', 'WEEKDAY', 'WEEKDAYOVERRIDE'
},/**
             * Optional boolean flag, allowing you to specify exceptions - working days which falls on weekends. Default value is `false`. **Please note**, that simply setting this
             * field to "true" is not enough - you also need to specify the exact hours that are available for work with the `Availability` field (see below).
             * @field {Boolean} isWorkingDay
             * @default false
             */{name:'isWorkingDay',type:'boolean',defaultValue:false},/**
             * Optional name of the CSS class, which can be used by various plugins working with weekends and holidays.
             * Default value is `gnt-holiday` If a holiday lasts for several days, then all days should have the same
             * `cls` value.
             * @field {String} cls
             */{name:'cls'//,
//defaultValue : 'b-sch-nonworkingtime'
},/**
             * Optional name of the day (holiday name for example)
             * @field {String} name
             */{name:'name'},/**
             * Availability information for this day. Should be an array of strings or objects, containing the hourly
             * availability for this day. Strings should have the following format:
             * ```javascript
             * // two working intervals
             * [ '08:00-12:00', '13:00-17:00' ]
             *
             * // whole 24 hours are available
             * [ '00:00-24:00' ]
             * ```
             * Objects:
             * ```
             * [{
             *    startTime       : new Date(0, 0, 0, 8),
             *    endTime         : new Date(0, 0, 0, 12)
             * }]
             * ```
             * **Please note**, that this field overrides `isWorkingDay` - for example, a day with
             * "isWorkingDay : false" and "Availability : [ '08:00-12:00' ]" - will be considered a working day.
             * @field {String[]|Object[]} availability
             */{name:'availability',persist:true//,
// convert : function(value, record) {
//     if (value) {
//         return typeof value === 'string' ? [value] : value;
//     } else {
//         return [];
//     }
// }
}];}}]);return CalendarDayModel;}(Model);exports.SchedulerCalendarDayModel=CalendarDayModel;CalendarDayModel._$name='CalendarDayModel';/**
 * @module Scheduler/model/TimeSpan
 */ /**
 * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.
 *
 * Its a subclass of  {@link Common.data.Model}.
 * Please refer to documentation of those classes to become familar with the base interface of this class.
 *
 * A TimeSpan has the following fields:
 *
 * - `startDate`    - start date of the task in the ISO 8601 format
 * - `endDate`      - end date of the task in the ISO 8601 format (not inclusive)
 * - `duration`     - duration, time between start date and end date
 * - `durationUnit` - unit used to express the duration
 * - `name`         - an optional name of the range
 * - `cls`          - an optional CSS class to be associated with the range.
 *
 * The data source of any field can be customized in the subclass. Please refer to {@link Common.data.Model} for details. To specify
 * another date format:
 *
 * ```javascript
 * class MyTimeSpan extends TimeSpan {
 *   static get fields() {
 *      { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }
 *   }
 * }
 * ```
 *
 * @extends Common/data/Model
 */var TimeSpan=/*#__PURE__*/function(_Model6){_inherits2(TimeSpan,_Model6);function TimeSpan(){_classCallCheck2(this,TimeSpan);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeSpan).apply(this,arguments));}_createClass2(TimeSpan,[{key:"afterConstruct",//endregion
//region Init
value:function afterConstruct(){_get2(_getPrototypeOf2(TimeSpan.prototype),"afterConstruct",this).call(this);// This should probably be a property setter of some mandatory config, then we would not need an afterConfigure implementation.
this.normalize();}},{key:"normalize",value:function normalize(){var me=this,startDate=me.startDate,endDate=me.endDate,duration=me.duration,durationUnit=me.durationUnit,hasDuration=duration!=null;// need to calculate duration (checking first since seemed most likely to happen)
if(startDate&&endDate&&!hasDuration){me.setData('duration',DateHelper.diff(startDate,endDate,durationUnit,true));}// need to calculate endDate?
else if(startDate&&!endDate&&hasDuration){me.setData('endDate',DateHelper.add(startDate,duration,durationUnit));}// need to calculate startDate
else if(!startDate&&endDate&&hasDuration){me.setData('startDate',DateHelper.add(endDate,-duration,durationUnit));}this.clearCachedValues();}//endregion
//region Getters & Setters
},{key:"setDuration",/**
     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is
     * readonly after creation
     * @param {Number} duration Duration value
     * @param {String} durationUnit Unit for specified duration value, see {@link #field-durationUnit} for valid values
     */value:function setDuration(duration){var durationUnit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.durationUnit;// Must be a number
duration=parseFloat(duration);var toSet={duration:duration,durationUnit:durationUnit};if(this.startDate){toSet.endDate=DateHelper.add(this.startDate,duration,durationUnit);}else if(this.endDate){toSet.startDate=DateHelper.add(this.endDate,-duration,durationUnit);}this.set(toSet);}/**
     * Property which encapsulates the duration's magnitude and units.
     */},{key:"setStartDate",/**
     * Sets the range start date
     *
     * @param {Date} date The new start date
     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event).
     * Defaults to `true`
     */value:function setStartDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,toSet={startDate:date};if(date){var calcEndDate;if(keepDuration){calcEndDate=me.duration!=null;}else{if(me.endDate){toSet.duration=DateHelper.diff(date,me.endDate,me.durationUnit,true);if(toSet.duration<0)throw new Error('Negative duration');}else{calcEndDate=this.duration!=null;}}if(calcEndDate){toSet.endDate=DateHelper.add(date,me.duration,me.durationUnit);}}else{toSet.duration=null;}me.set(toSet);}/**
     * Sets the range end date
     *
     * @param {Date} date The new end date
     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task ("move" the event), `false` to change the duration ("resize" the event).
     * Defaults to `false`
     */},{key:"setEndDate",value:function setEndDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,toSet={endDate:date};if(date){var calcStartDate;if(keepDuration===true){calcStartDate=me.duration!=null;}else{if(me.startDate){toSet.duration=DateHelper.diff(me.startDate,date,me.durationUnit,true);if(toSet.duration<0)throw new Error('Negative duration');}else{calcStartDate=this.duration!=null;}}if(calcStartDate){toSet.startDate=DateHelper.add(date,-me.duration,me.durationUnit);}}me.set(toSet);}/**
     * Sets the event start and end dates
     *
     * @param {Date} start The new start date
     * @param {Date} end The new end date
     */},{key:"setStartEndDate",value:function setStartEndDate(start,end){this.set({startDate:start,endDate:end});}/**
     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.
     * @return {Date[]}
     */},{key:"clearCachedValues",// Caching isMilestone, startDate and endDate ms conversion since it costs a bit during rendering
value:function clearCachedValues(){this._startDateMS=null;this._endDateMS=null;this._isMilestone=null;}},{key:"inSetNormalize",value:function inSetNormalize(field){if(typeof field!=='string'){// If user is updating multiple properties in one go using an object, we help out
// by filling out missing schedule related data
field=Object.assign({},field);if('duration'in field){if(field.startDate&&!field.endDate){field.endDate=DateHelper.add(field.startDate,field.duration,field.durationUnit||this.durationUnit,true,true);}if(!field.startDate&&field.endDate){field.startDate=DateHelper.add(field.endDate,-field.duration,field.durationUnit||this.durationUnit,true,true);}}else if(field.startDate&&field.endDate){field.duration=DateHelper.diff(field.startDate,field.endDate,field.durationUnit||this.durationUnit,true);}return field;}}},{key:"inSet",value:function inSet(field,value,silent,fromRelationUpdate){this.clearCachedValues();field=this.inSetNormalize(field)||field;return _get2(_getPrototypeOf2(TimeSpan.prototype),"inSet",this).call(this,field,value,silent,fromRelationUpdate);}//endregion
//region Iteration
/**
     * Iterates over the {@link #property-dates}
     * @param {Function} func The function to call for each date
     * @param {Object} thisObj `this` reference for the function
     */},{key:"forEachDate",value:function forEachDate(func,thisObj){return this.dates.forEach(func.bind(thisObj));}//endregion
/**
     * Checks if the range record has both start and end dates set and start <= end
     *
     * @return {Boolean}
     */},{key:"shift",/**
     * Shift the dates for the date range by the passed amount and unit
     * @param {String} unit The unit to shift by, see {@Common.helper.DateHelper} for more information on valid formats.
     * @param {Number} amount The amount to shift
     */value:function shift(amount){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.durationUnit;// TODO REMOVE FOR 2.0
if(typeof amount==='string'){var u=amount;amount=unit;unit=u;}this.setStartDate(DateHelper.add(this.startDate,amount,unit,true),true);}/**
     * Returns the WBS code of this model (only relevant when it's part of a tree store).
     * @return {String} The WBS code string
     * @private
     */},{key:"fullCopy",value:function fullCopy(){//NOT PORTED
return this.copy.apply(this,arguments);}},{key:"intersects",value:function intersects(timeSpan){return this.intersectsRange(timeSpan.startDate,timeSpan.endDate);}},{key:"intersectsRange",value:function intersectsRange(start,end){var myStart=this.startDate,myEnd=this.endDate;return myStart&&myEnd&&DateHelper.intersectSpans(myStart,myEnd,start,end);}/**
     * Splits this event into two pieces at the desired position.
     *
     * @param {Number} splitPoint A number greater than 0 and less than 1, indicating how this event will be split. 0.5 means cut it in half
     * @return {Scheduler.model.TimeSpan} The newly created split section of the timespan
     */},{key:"split",value:function split(){var splitPoint=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0.5;var me=this,clone=this.copy(),eventStore=me.firstStore,assignmentStore=eventStore&&eventStore.assignmentStore,ownNewDuration=me.duration*splitPoint,cloneDuration=me.duration-ownNewDuration;if(splitPoint<=0||splitPoint>=1){throw new Error('Split point must be > 0 and < 1');}me.duration=ownNewDuration;clone.startDate=me.endDate;clone.duration=cloneDuration;if(eventStore){eventStore.add(clone);}if(assignmentStore){assignmentStore.add(me.assignments.map(function(assignment){var clonedData=Object.assign({},assignment.data,{eventId:clone.id});delete clonedData.id;return clonedData;}));}return clone;}},{key:"cls",get:function get(){if(!this._cls){this._cls=new DomClassList(_get2(_getPrototypeOf2(TimeSpan.prototype),"get",this).call(this,'cls'));}return this._cls;},set:function set(cls){var me=this;if(me._cls){me._cls.value=cls;}else{me._cls=new DomClassList(cls);}me.set('cls',me._cls.value);}},{key:"startDate",get:function get(){return this.get('startDate');},set:function set(date){this.setStartDate(date);}},{key:"endDate",get:function get(){return this.get('endDate');},set:function set(date){this.setEndDate(date);}},{key:"duration",get:function get(){return this.get('duration');},set:function set(duration){this.setDuration(duration,this.durationUnit);}},{key:"durationUnit",get:function get(){return this.get('durationUnit');}},{key:"fullDuration",get:function get(){return{unit:this.durationUnit,magnitude:this.duration};},set:function set(duration){if(typeof duration==='string'){duration=DateHelper.parseDuration(duration,true,this.durationUnit);}this.setDuration(duration.magnitude,duration.unit);}},{key:"dates",get:function get(){var dates=[],startDate=DateHelper.startOf(this.startDate,'day'),endDate=this.endDate;for(var date=startDate;date<endDate;date=DateHelper.add(date,1,'day')){dates.push(date);}return dates;}/**
     * Returns the duration of this Event in milliseconds.
     * @private
     */},{key:"durationMS",get:function get(){if(this.endDate&&this.startDate){return this.endDateMS-this.startDateMS;}else{return DateHelper.asMilliseconds(this.duration||0,this.durationUnit);}}},{key:"endDateMS",get:function get(){var me=this;if(!me._endDateMS){me._endDateMS=me.endDate&&me.endDate.getTime();}return me._endDateMS;}},{key:"startDateMS",get:function get(){var me=this;if(!me._startDateMS){me._startDateMS=me.startDate&&me.startDate.getTime();}return me._startDateMS;}},{key:"isMilestone",get:function get(){var me=this;if(!me._isMilestone){me._isMilestone=me.endDateMS===me.startDateMS;}return me._isMilestone;}},{key:"isScheduled",get:function get(){var me=this;return Boolean(me.startDate&&me.endDate&&me.hasValidDates);}// Simple check if end date is greater than start date
},{key:"isValid",get:function get(){var me=this,result=true;//super.isValid(),
if(result){var start=me.startDate,end=me.endDate;result=!start||!end||end-start>=0;}return result;}// Simple check if just end date is greater than start date
},{key:"hasValidDates",get:function get(){var me=this,start=me.startDateMS,end=me.endDateMS;return!start||!end||end-start>=0;}},{key:"wbsCode",get:function get(){return this.indexPath.join('.');}}],[{key:"fields",//region Field definitions
get:function get(){return[/**
             * The start date of a time span (or Event / Task). Uses ISO 8601 date format by default (1962-06-17T09:21:34.125Z). To specify another
             * format, subclass TimeSpan and change the dateFormat
             * @field {String|Date} startDate
             */{name:'startDate',type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},/**
             * The end date of a time span (or Event / Task). Uses ISO 8601 date format by default (1962-06-17T09:21:34.125Z). To specify another
             * format, subclass TimeSpan and change the dateFormat
             * @field {String|Date} endDate
             */{name:'endDate',type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},/**
             * The numeric part of the timespans duration (the number of units).
             * @field {Number} duration
             */{name:'duration',type:'number',allowNull:true},/**
             * The unit part of the TimeSpan duration, defaults to "d" (days). Valid values are:
             *
             * - "ms" (milliseconds)
             * - "s" (seconds)
             * - "m" (minutes)
             * - "h" (hours)
             * - "d" (days)
             * - "w" (weeks)
             * - "M" (months)
             * - "y" (years)
             *
             * This field is readonly after creation, to change durationUnit use #setDuration().
             * @field {String} durationUnit
             */{name:'durationUnit',type:'string',defaultValue:'d'},{name:'fullDuration'},/**
             * An encapsulation of the CSS classes to add to the rendered time span element.
             * @field {Common.helper.util.DomClassList|String} cls
             *
             * This may be accessed as a string, but for granular control of adding and
             * removing individual classes, it is recommended to use the
             * {@link Common.helper.util.DomClassList DomClassList} API.
             */{name:'cls',defaultValue:''},/**
             * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
             * ```
             * record.style = 'color: red;font-weight: 800';
             * ```
             *
             * @field {String} style
             */{name:'style',type:'object'},/**
             * The name of the time span (or Event / Task)
             * @field {String} name
             */{name:'name',type:'string'}];}}]);return TimeSpan;}(Model);exports.TimeSpan=TimeSpan;TimeSpan._$name='TimeSpan';/**
 * @module Scheduler/data/Calendar
 */ /**
 * A class representing a customizable calendar with weekends, holidays and availability information for any day.
 * Internally, it's just a subclass of the AjaxStore class which should be loaded with a collection
 * of {@link Scheduler.model.CalendarDayModel} instances. Additionally, calendars may have parent-child relations,
 * allowing "child" calendars to "inherit" all special dates from its "parent" and add its own.
 * See {@link #property-parent} property for details.
 *
 * A calendar can be instantiated like this:
 * ```
 * let calendar = new Scheduler.data.Calendar({
 *     data : [
 *         {
 *             date            : new Date(2010, 0, 13),
 *             cls             : 'national-holiday'
 *         },
 *         {
 *             date            : new Date(2010, 1, 1),
 *             cls             : 'company-holiday'
 *         },
 *         {
 *             date            : new Date(2010, 0, 16),
 *             isWorkingDay    : true
 *         }
 *     ]
 * });
 * ```
 * Please refer to the {@link Scheduler.model.CalendarDayModel} class to learn the data model used for the calendar.
 */var Calendar=/*#__PURE__*/function(_AjaxStore2){_inherits2(Calendar,_AjaxStore2);function Calendar(){_classCallCheck2(this,Calendar);return _possibleConstructorReturn2(this,_getPrototypeOf2(Calendar).apply(this,arguments));}_createClass2(Calendar,[{key:"construct",value:function construct(config){var me=this;_get2(_getPrototypeOf2(Calendar.prototype),"construct",this).call(this,config);// TODO: This will be from static get properties() when https://app.assembla.com/spaces/bryntum/tickets/5165 is done
me.unitsInMs={MILLI:1,SECOND:1000,MINUTE:60*1000,HOUR:60*60*1000,DAY:me.hoursPerDay*60*60*1000,WEEK:me.daysPerWeek*me.hoursPerDay*60*60*1000,MONTH:me.daysPerMonth*me.hoursPerDay*60*60*1000,QUARTER:3*me.daysPerMonth*24*60*60*1000,YEAR:4*3*me.daysPerMonth*24*60*60*1000};me.defaultWeekAvailability=me.getDefaultWeekAvailability();// traditional "on-demand" caching seems to be not so efficient for calendar (in theory)
// calculating any cached property, like, "weekAvailability" or "nonStandardWeeksStartDates" will require full calendar scan each time
// so we update ALL cached values on any CRUD operations
me.on({// TODO ignore changes of "name/cls" field?
change:me.clearCache,thisObj:me});me.clearCache();}/**
     * Returns the registered calendar with the given id.
     *
     * @param {String} id The calendar id
     * @return {Scheduler.data.Calendar}
     */},{key:"getDefaultWeekAvailability",value:function getDefaultWeekAvailability(){var availability=this.defaultAvailability,weekendFirstDay=this.weekendFirstDay,weekendSecondDay=this.weekendSecondDay,res=[];for(var i=0;i<7;i++){res.push(this.weekendsAreWorkdays||i!=weekendFirstDay&&i!=weekendSecondDay?new this.modelClass({type:'WEEKDAY',weekday:i,availability:availability&&availability.slice()||[],isWorkingDay:true}):new this.modelClass({type:'WEEKDAY',weekday:i,availability:[]}));}return res;}/**
     * Destroys all registered calendars.
     *
     * @return {Scheduler.data.Calendar[]}
     */},{key:"removeAll",value:function removeAll(){Calendar.allCalendars.forEach(function(calendar){calendar.storeId=null;//unregisters from Store map
calendar.destroy();});}/**
     * Returns `true` or `false` depending whether the given time span intersects with one of the defined week day overrides.
     *
     * @param {Date} startDate The start date of the time span
     * @param {Date} endDate The end date of the time span
     *
     * @return {Boolean}
     */},{key:"intersectsWithCurrentWeeks",value:function intersectsWithCurrentWeeks(startDate,endDate){var result=false;this.forEachNonStandardWeek(function(week){var weekStartDate=week.startDate,weekEndDate=week.endDate;if(weekStartDate<=startDate&&startDate<weekEndDate||weekStartDate<endDate&&endDate<=weekEndDate){result=true;// stop the iteration
return false;}});return result;}// will scan through all calendar days in the store and save references to special ones to the properties, for speedup
},{key:"clearCache",value:function clearCache(){var me=this;if(me.suspendCacheUpdate>0)return;me.holidaysCache={};me.availabilityIntervalsCache={};var daysIndex=me.daysIndex={},weekAvailability=me.weekAvailability=[],nonStandardWeeksStartDates=me.nonStandardWeeksStartDates=[],nonStandardWeeksByStartDate=me.nonStandardWeeksByStartDate={};me.forEach(function(calendarDay){// backward compat
var id=calendarDay.id,overrideMatch=/^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/.exec(id),weekDayMatch=/^WEEKDAY:(\d+)$/.exec(id),type=calendarDay.type,weekDay=calendarDay.weekday;if(type=='WEEKDAYOVERRIDE'||overrideMatch){var _startDate,endDate;if(type=='WEEKDAYOVERRIDE'){_startDate=calendarDay.overrideStartDate;endDate=calendarDay.overrideEndDate;}// backward compat
if(overrideMatch){_startDate=DateHelper.parse(overrideMatch[2],'YYYY/MM/DD');endDate=DateHelper.parse(overrideMatch[3],'YYYY/MM/DD');weekDay=overrideMatch[1];}// allow partially defined days - they will not be included in calculations
if(_startDate&&endDate&&weekDay!=null){var startDateNum=_startDate-0;if(!nonStandardWeeksByStartDate[startDateNum]){nonStandardWeeksByStartDate[startDateNum]={startDate:new Date(_startDate),endDate:new Date(endDate),name:calendarDay.getName(),weekAvailability:[],// main day representing the week override itself - for example for overrides w/o any re-defined availability
mainDay:null};nonStandardWeeksStartDates.push(startDateNum);}if(weekDay>=0){nonStandardWeeksByStartDate[startDateNum].weekAvailability[weekDay]=calendarDay;}else{nonStandardWeeksByStartDate[startDateNum].mainDay=calendarDay;}}}else if(type=='WEEKDAY'||weekDayMatch){if(weekDayMatch)weekDay=weekDayMatch[1];// again - only fully defined records will be taken into account
if(weekDay!=null){if(weekDay<0||weekDay>6){throw new Error('Incorrect week day index');}weekAvailability[weekDay]=calendarDay;}}else{var date=calendarDay.date;if(date)daysIndex[date-0]=calendarDay;}});// Numeric sort, can't use default JS sort which is string based
nonStandardWeeksStartDates.sort(function(a,b){return a-b;});/**
         * Triggered on changes to the calendar.
         * @event calendarChange
         * @param {Scheduler.data.Calendar} source
         */me.trigger('calendarChange');}/**
     * Adds a week day override ("non-standard" week) to the calendar. As a reminder, week day override consists from up to 7 days,
     * that re-defines the default week days availability only within certain time span.
     *
     * @param {Date} startDate The start date of the time span
     * @param {Date} endDate The end date of the time span
     * @param {Scheduler.model.CalendarDayModel[]|String[]} weekAvailability The array indexed from 0 to 7, containing items for week days.
     * Index 0 corresponds to Sunday, 1 to Monday, etc. Some items can be not defined or set to `null`, indicating that override does not
     * change this week day. Item can be - an instance of {@link Scheduler.model.CalendarDayModel} (only `Availability` field needs to be set), or
     * an array of strings, defining the availability (see the description of the `Availability` field in the {@link Scheduler.model.CalendarDayModel}).
     * @param {String} name The name of this week day override
     */},{key:"addNonStandardWeek",value:function addNonStandardWeek(startDate,endDate,weekAvailability,name){startDate=DateHelper.clearTime(startDate);endDate=DateHelper.clearTime(endDate);if(this.intersectsWithCurrentWeeks(startDate,endDate)){throw new Error('Can not add intersecting week');}var DayModel=this.modelClass,days=[];weekAvailability.forEach(function(day,index){if(day instanceof CalendarDayModel){day.type='WEEKDAYOVERRIDE';day.overrideStartDate=startDate;day.overrideEndDate=endDate;day.weekday=index;day.name=name||'Week override';days.push(day);}else if(Array.isArray(day)){var newDay=new DayModel();newDay.type='WEEKDAYOVERRIDE';newDay.overrideStartDate=startDate;newDay.overrideEndDate=endDate;newDay.weekday=index;newDay.name=name||'Week override';newDay.setAvailability(day);days.push(newDay);}});var mainDay=new DayModel();mainDay.type='WEEKDAYOVERRIDE';mainDay.overrideStartDate=startDate;mainDay.overrideEndDate=endDate;mainDay.weekday=-1;mainDay.name=name||'Week override';days.push(mainDay);this.add(days);}/**
     * Returns an object describing a week day override ("non-standard" week), that starts at the given date or `null` if there's no any.
     *
     * @param {Date} startDate The start date of the week day override
     *
     * @return {Object} An object with the following properties
     * @return {Object} return.name A "Name" field of the week days in the override
     * @return {Date} return.startDate An "OverrideStartDate" field of the week days in the override
     * @return {Date} return.endDate An "OverrideEndDate" field of the week days in the override
     * @return {Scheduler.model.CalendarDayModel[]} return.weekAvailability An array with the week days, defined by this override. May be filled only partially if
     * week day override does not contain all days.
     * @return {Scheduler.model.CalendarDayModel} return.mainDay A "main" day instance for this override
     */},{key:"getNonStandardWeekByStartDate",value:function getNonStandardWeekByStartDate(startDate){return this.nonStandardWeeksByStartDate[DateHelper.clearTime(startDate)-0]||null;}/**
     * Removes all calendar day instances, that forms a week day override ("non-standard" week) with the given start date.
     *
     * @param {Date} startDate The start date of the week day override
     */},{key:"removeNonStandardWeek",value:function removeNonStandardWeek(startDate){startDate=DateHelper.clearTime(startDate)-0;var week=this.getNonStandardWeekByStartDate(startDate);if(!week)return;this.remove(ArrayHelper.clean(week.weekAvailability).concat(week.mainDay));}/**
     * Returns an object describing a week day override ("non-standard" week), that contains the given date or `null` if there's no any.
     *
     * @param {Date} timeDate The date that falls within some of the week day overrides
     *
     * @return {Object} An object describing week day override. See {@link #function-getNonStandardWeekByStartDate} method for details.
     */},{key:"getNonStandardWeekByDate",value:function getNonStandardWeekByDate(timeDate){timeDate=DateHelper.clearTime(timeDate)-0;var nonStandardWeeksStartDates=this.nonStandardWeeksStartDates,nonStandardWeeksByStartDate=this.nonStandardWeeksByStartDate;for(var i=0;i<nonStandardWeeksStartDates.length;i++){var week=nonStandardWeeksByStartDate[nonStandardWeeksStartDates[i]];// since `nonStandardWeeksStartDates` are sorted inc and week overrides do not intersect
// we can shorcut in this case
if(week.startDate>timeDate)break;if(week.startDate<=timeDate&&timeDate<=week.endDate){return week;}}return null;}/**
     * Updates the default availability information based on the value provided.
     *
     * @param {Boolean} value true if weekends should be regarded as working time.
     */},{key:"setWeekendsAreWorkDays",value:function setWeekendsAreWorkDays(value){var me=this;if(value!==me.weekendsAreWorkdays){me.weekendsAreWorkdays=value;// Must generate new defaultWeekAvailability
me.defaultWeekAvailability=me.getDefaultWeekAvailability();me.clearCache();}}/**
     * Returns true if weekends are regarded as working time.
     *
     * @return {Boolean} true if weekends should be regarded as working time.
     */},{key:"areWeekendsWorkDays",value:function areWeekendsWorkDays(){return this.weekendsAreWorkdays;}/**
     * Iterator for each week day override, defined in this calendar.
     *
     * @param {Function} func The function to call for each override. It will receive a single argument - object, describing the override.
     * See {@link #function-getNonStandardWeekByStartDate} for details. Returning `false` from the function stops the iterator.
     * @param {Object} thisObj `this` reference for the function
     *
     * @return {Boolean} `false` if any of the function calls have returned `false`
     */},{key:"forEachNonStandardWeek",value:function forEachNonStandardWeek(func,thisObj){var me=this,nonStandardWeeksStartDates=this.nonStandardWeeksStartDates,nonStandardWeeksByStartDate=this.nonStandardWeeksByStartDate;for(var i=0;i<nonStandardWeeksStartDates.length;i++){if(func.call(thisObj||me,nonStandardWeeksByStartDate[nonStandardWeeksStartDates[i]])===false)return false;}}/**
     * Returns a corresponding {@link Scheduler.model.CalendarDayModel} instance for the given date. First, this method checks for {@link #function-getOverrideDay day overrides}
     * (either in this or parent calendars), then for week days (again, in this or parent calendars) and finally fallbacks to the
     * calendar day with the {@link #config-defaultAvailability} availability.
     *
     * @param {Date} timeDate A date (can contain time portion which will be ignored)
     *
     * @return {Scheduler.model.CalendarDayModel}
     */},{key:"getCalendarDay",value:function getCalendarDay(timeDate){timeDate=typeof timeDate=='number'?new Date(timeDate):timeDate;return this.getOverrideDay(timeDate)||this.getWeekDay(timeDate.getDay(),timeDate)||this.getDefaultCalendarDay(timeDate.getDay());}/**
     * Returns a day override corresponding to the given date (possibly found in the parent calendars) or `null` if the given date
     * has no overrides in this calendar and all its parents.
     *
     * @param {Date} timeDate The date to check for day overrides for
     * @return {Scheduler.model.CalendarDayModel}
     */},{key:"getOverrideDay",value:function getOverrideDay(timeDate){return this.getOwnCalendarDay(timeDate)||this.parent&&this.parent.getOverrideDay(timeDate)||null;}/**
     * Returns an "own" day override corresponding to the given date. That is - day override defined in the current calendar only.
     *
     * @param {Date} timeDate The date to check for day overrides for
     * @return {Scheduler.model.CalendarDayModel}
     */},{key:"getOwnCalendarDay",value:function getOwnCalendarDay(timeDate){timeDate=typeof timeDate=='number'?new Date(timeDate):timeDate;return this.daysIndex[DateHelper.clearTime(timeDate)-0];}/**
     * Returns a "special" week day corresponding to the given date. Under "special" week day we mean a calendar day with the `Type = WEEKDAY` or `WEEKDAYOVERRIDE`.
     * See the {@link Scheduler.model.CalendarDayModel} class for details. If the concrete date is given as 2nd argument, this method will
     * first check for any week overrides passing on it.
     *
     * If not found in current calendar, this method will consult parent. If no "special" week day found neither in this calendar, no parents - it returns `null`.
     *
     * @param {Number} weekDayIndex The index of the week day to retrieve (0-Sunday, 1-Monday, etc)
     * @param {Date} [timeDate] The date for which the week day is being retrieved.
     * @return {Scheduler.model.CalendarDayModel}
     */},{key:"getWeekDay",value:function getWeekDay(weekDayIndex,timeDate){// if 2nd argument is provided then try to search in non-standard weeks first
if(timeDate){var week=this.getNonStandardWeekByDate(timeDate);if(week&&week.weekAvailability[weekDayIndex])return week.weekAvailability[weekDayIndex];}return this.weekAvailability[weekDayIndex]||this.parent&&this.parent.getWeekDay(weekDayIndex,timeDate)||null;}/**
     * Returns a boolean indicating whether a passed date falls on the weekend or holiday.
     *
     * @param {Date} timeDate A given date (can contain time portion)
     *
     * @return {Boolean}
     */},{key:"isHoliday",value:function isHoliday(timeDate){var secondsSinceEpoch=timeDate-0,holidaysCache=this.holidaysCache;if(holidaysCache[secondsSinceEpoch]!=null){return holidaysCache[secondsSinceEpoch];}timeDate=typeof timeDate=='number'?new Date(timeDate):timeDate;var day=this.getCalendarDay(timeDate);if(!day)throw new Error("Can't find day for "+timeDate);return holidaysCache[secondsSinceEpoch]=!day.isWorkingDay;}/**
     * Returns a "default" calendar day instance, corresponding to the one, generated from {@link #config-defaultAvailability}. By default all working days in the week
     * corresponds to the day with {@link #config-defaultAvailability} set in the `Availability` field and non-working days has empty `Availability`.
     *
     * @param {Number} weekDayIndex The index of the "default" week day to retrieve (0-Sunday, 1-Monday, etc)
     * @return {Scheduler.model.CalendarDayModel}
     */},{key:"getDefaultCalendarDay",value:function getDefaultCalendarDay(weekDayIndex){if(!this.hasOwnProperty('defaultAvailability')&&!this.hasOwnProperty('weekendsAreWorkdays')&&this.parent){return this.parent.getDefaultCalendarDay(weekDayIndex);}return this.defaultWeekAvailability[weekDayIndex];}/**
     * Returns a boolean indicating whether a passed date is a working day.
     *
     * @param {Date} date A given date (can contain time portion which will be ignored)
     *
     * @return {Boolean}
     */},{key:"isWorkingDay",value:function isWorkingDay(date){return!this.isHoliday(date);}/**
     * Returns `true` if given date passes on the weekend and `false` otherwise. Weekend days can be re-defined with the {@link #config-weekendFirstDay} and {@link #config-weekendSecondDay} options.
     *
     * @param {Date} timeDate The date to check
     * @return {Boolean}
     */},{key:"isWeekend",value:function isWeekend(timeDate){var dayIndex=timeDate.getDay();return dayIndex===this.weekendFirstDay||dayIndex===this.weekendSecondDay;}/**
     * Convert the duration given in milliseconds to a given unit. Uses the {@link #config-daysPerMonth} configuration option.
     *
     * @param {Number} durationInMs Duration in milliseconds
     * @param {String} unit Duration unit to which the duration should be converted
     *
     * @return {Number} converted value
     */},{key:"convertMSDurationToUnit",value:function convertMSDurationToUnit(durationInMs,unit){return durationInMs/this.unitsInMs[DateHelper.getUnitByName(unit)];}/**
     * Convert the duration given in some unit to milliseconds. Uses the {@link #config-daysPerMonth} configuration option.
     *
     * @param {Number} durationInMs
     * @param {String} unit
     *
     * @return {Number} converted value
     */},{key:"convertDurationToMs",value:function convertDurationToMs(duration,unit){return duration*this.unitsInMs[DateHelper.getUnitByName(unit)];}/**
     * This an iterator that passes through the all availability intervals (working time intervals) in the given date range.
     *
     * For example if the default availability in this calendar is [ '09:00-13:00', '14:00-18:00' ] and this function is called, like this:
     *
     *      calendar.forEachAvailabilityInterval(
     *           //             midnight  Friday                 midnight Tuesday
     *          { startDate : new Date(2013, 1, 8), endDate : new Date(2013, 1, 12) },
     *          function (startDate, endDate) { ... }
     *      )
     * then the provided function will be called 4 times with the following arguments:
     *
     *      startDate : new Date(2013, 1, 8, 9),    endDate : new Date(2013, 1, 8, 13)
     *      startDate : new Date(2013, 1, 8, 14),   endDate : new Date(2013, 1, 8, 18)
     *      startDate : new Date(2013, 1, 11, 9),   endDate : new Date(2013, 1, 11, 13)
     *      startDate : new Date(2013, 1, 11, 14),  endDate : new Date(2013, 1, 11, 18)
     *
     *
     * @param {Object} options An object with the following properties:
     * @param {Date} options.startDate A start date of the date range. Can be omitted, if `isForward` flag is set to `false`. In this case iterator
     * will not stop until the call to `func` will return `false`.
     * @param {Date} options.endDate An end date of the date range. Can be omitted, if `isForward` flag is set to `true`. In this case iterator
     * will not stop until the call to `func` will return `false`.
     * @param {Boolean} [options.isForward=true] A flag, defining the direction, this iterator advances in. If set to `true` iterations
     * will start from the `startDate` option and will advance in date increasing direction. If set to `false` iterations will start from the `endDate`
     * option and will advance in date decreasing direction.
     * @param {Function} func A function to call for each availability interval, in the given date range. It receives 2 arguments - the start date
     * of the availability interval and the end date.
     * @param {Object} thisObj `this` reference for the function
     *
     * @return {Boolean} `false` if any of the calls to `func` has returned `false`
     */},{key:"forEachAvailabilityInterval",value:function forEachAvailabilityInterval(options,func,thisObj){thisObj=thisObj||this;var me=this,startDate=options.startDate,endDate=options.endDate,// isForward by default
isForward=options.isForward!==false;if(isForward?!startDate:!endDate){throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');}var cursorDate=new Date(isForward?startDate:endDate),DATE=DateHelper;// if no boundary we still have to specify some limit
if(isForward){if(!endDate){endDate=DATE.add(startDate,options.availabilitySearchLimit||me.availabilitySearchLimit||5*365,'day');}}else{if(!startDate){startDate=DATE.add(endDate,-(options.availabilitySearchLimit||me.availabilitySearchLimit||5*365),'day');}}// the clearTime() method is called a lot during this method (like 200k times for 2k tasks project)
// sometimes w/o real need for it since we always advance to the next day's boundary
// this optimization brings it down to ~10k, ~10% speed up
var noNeedToClearTime=false;while(isForward?cursorDate<endDate:cursorDate>startDate){// - 1 for backward direction ensures that we are checking correct day,
// since the endDate is not inclusive - 02/10/2012 means the end of 02/09/2012
// for backward direction we always clear time, because intervals are cached by the beginning of the day
var intervals=me.getAvailabilityIntervalsFor(cursorDate-(isForward?0:1),isForward?noNeedToClearTime:false);// the order of processing is different for forward / backward processing
for(var i=isForward?0:intervals.length-1;isForward?i<intervals.length:i>=0;isForward?i++:i--){var interval=intervals[i],intervalStartDate=interval.startDate,intervalEndDate=interval.endDate;// availability interval is out of [ startDate, endDate )
if(intervalStartDate>=endDate||intervalEndDate<=startDate)continue;var countingFrom=intervalStartDate<startDate?startDate:intervalStartDate,countingTill=intervalEndDate>endDate?endDate:intervalEndDate;if(func.call(thisObj,countingFrom,countingTill)===false)return false;}cursorDate=isForward?DATE.getStartOfNextDay(cursorDate,false,noNeedToClearTime):DATE.getEndOfPreviousDay(cursorDate,noNeedToClearTime);noNeedToClearTime=true;}}/**
     * Calculate the duration in the given `unit` between 2 dates, taking into account the availability/holidays information (non-working time will be excluded from the duration).
     *
     * @param {Date} startDate The start date
     * @param {Date} endDate The end date
     * @param {String} unit One of the units used by DateHelper
     *
     * @return {Number} Working time duration between given dates.
     */},{key:"calculateDuration",value:function calculateDuration(startDate,endDate,unit){var duration=0;this.forEachAvailabilityInterval({startDate:startDate,endDate:endDate},function(intervalStartDate,intervalEndDate){var dstDiff=intervalStartDate.getTimezoneOffset()-intervalEndDate.getTimezoneOffset();duration+=intervalEndDate-intervalStartDate+dstDiff*60*1000;});return this.convertMSDurationToUnit(duration,unit);}/**
     * Returns an array of ranges for non-working days between `startDate` and `endDate`. For example normally, given a
     * full month, it will return an array of 4 `Scheduler.model.TimeSpan` instances, containing ranges for the
     * weekends. If a holiday lasts for several days and all {@link Scheduler.model.CalendarDayModel} instances have
     * the same `cls` value then all days will be combined into a single range.
     *
     * @param {Date} startDate - A start date of the timeframe to extract the holidays from
     * @param {Date} endDate - An end date of the timeframe to extract the holidays from
     *
     * @return {Scheduler.model.TimeSpan[]}
     */},{key:"getHolidaysRanges",value:function getHolidaysRanges(startDate,endDate,includeWeekends){if(startDate>endDate){throw new Error("startDate can't be bigger than endDate");}startDate=DateHelper.clearTime(startDate);endDate=DateHelper.clearTime(endDate);var ranges=[],currentRange,date;for(date=startDate;date<endDate;date=DateHelper.getNext(date,'day',1)){if(this.isHoliday(date)||this.weekendsAreWorkdays&&includeWeekends&&this.isWeekend(date)){var day=this.getCalendarDay(date),cssClass=day&&day.cls||this.defaultNonWorkingTimeCssCls,nextDate=DateHelper.getNext(date,'day',1);// starts new range
if(!currentRange){currentRange=new TimeSpan({startDate:date,endDate:nextDate,cls:cssClass});}else{// checks if the range is still the same
if(currentRange.cls.isEqual(cssClass)){currentRange.endDate=nextDate;}else{ranges.push(currentRange);currentRange=new TimeSpan({startDate:date,endDate:nextDate,cls:cssClass});}}}else{if(currentRange){ranges.push(currentRange);currentRange=null;}}}if(currentRange){ranges.push(currentRange);}return ranges;}/**
     * Calculate the end date for the given start date and duration, taking into account the availability/holidays information (non-working time will not be counted as duration).
     *
     * @param {Date} startDate The start date
     * @param {Number} duration The "pure" duration (w/o any non-working time).
     * @param {String} unit One of the units of the {@link Common.helper.DateHelper} class.
     *
     * @return {Date} The end date
     */},{key:"calculateEndDate",value:function calculateEndDate(startDate,duration,unit){// if duration is 0 - return the same date
if(!duration){return new Date(startDate);}var DATE=DateHelper,endDate;duration=this.convertDurationToMs(duration,unit);var startFrom=// milestone case, which we don't want to re-schedule to the next business days
// milestones should start/end in the same day as its incoming dependency
duration===0&&DATE.clearTime(startDate,true)-startDate===0?DATE.add(startDate,-1,'day'):startDate;this.forEachAvailabilityInterval({startDate:startFrom},function(intervalStartDate,intervalEndDate){var diff=intervalEndDate-intervalStartDate,dstDiff=intervalStartDate.getTimezoneOffset()-intervalEndDate.getTimezoneOffset();if(diff>=duration){endDate=new Date(intervalStartDate-0+duration);return false;}else{duration-=diff+dstDiff*60*1000;}});return endDate;}/**
     * This method starts from the given `date` and moves forward/backward in time (depending from the `isForward` flag) skiping the non-working time.
     * It returns the nearest edge of the first working time interval it encounters. If the given `date` falls on the working time, then `date` itself is returned.
     *
     * For example, if this function is called with some Saturday as `date` and `isForward` flag is set, it will return the earliest working hours on following Monday.
     * If `isForward` flag will be set to `false` - it will return the latest working hours on previous Friday.
     *
     * @param {Date} date A date (presumably falling on the non-working time).
     * @param {Boolean} isForward Pass `true` to skip the non-working time in forward direction, `false` - in backward
     *
     * @return {Date} Nearest working date.
     */},{key:"skipNonWorkingTime",value:function skipNonWorkingTime(date,isForward){var found=false;// reseting the date to the earliest availability interval
this.forEachAvailabilityInterval(isForward?{startDate:date}:{endDate:date,isForward:false},function(intervalStartDate,intervalEndDate){date=isForward?intervalStartDate:intervalEndDate;found=true;return false;});if(!found)throw new Error('skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified');return new Date(date);}/**
     * Calculate the start date for the given end date and duration, taking into account the availability/holidays information (non-working time will not be counted as duration).
     *
     * @param {Date} endDate The end date
     * @param {Number} duration The "pure" duration (w/o any non-working time).
     * @param {String} unit One of the units of the {@link Common.helper.DateHelper} class.
     *
     * @return {Date} The start date
     */},{key:"calculateStartDate",value:function calculateStartDate(endDate,duration,unit){// if duration is 0 - return the same date
if(!duration){return new Date(endDate);}var startDate;duration=this.convertDurationToMs(duration,unit);this.forEachAvailabilityInterval({endDate:endDate,isForward:false},function(intervalStartDate,intervalEndDate){var diff=intervalEndDate-intervalStartDate;if(diff>=duration){startDate=new Date(intervalEndDate-duration);return false;}else{duration-=diff;}});return startDate;}/**
     * This method starts from the given `date` and moves forward/backward in time (depending from the `duration` argument).
     * It stops as soon as it skips the amount of *working* time defined by the `duration` and `unit` arguments. Skipped non-working time simply will not
     * be counted.
     *
     * **Note** that this method behaves differently from the {@link #function-skipNonWorkingTime} - that method stops as soon as it encounters the non-working time.
     * This method stops as soon as it accumulate enough skipped working time.
     *
     * @param {Date} date A starting point
     * @param {Number} duration The duration of the working time. To skip working time in backward direction pass a negative value.
     * @param {String} unit One of the units of the {@link Common.helper.DateHelper} class.
     *
     * @return {Date}
     */},{key:"skipWorkingTime",value:function skipWorkingTime(date,duration,unit){return duration>=0?this.calculateEndDate(date,duration,unit):this.calculateStartDate(date,-duration,unit);}},{key:"isChildOf",value:function isChildOf(calendar){var parent=this,found=false;while(parent&&!found){found=parent===calendar;parent=parent.parent;}return found;}},{key:"getParentableCalendars",value:function getParentableCalendars(){var me=this,calendars=Calendar.getAllCalendars();return calendars.reduce(function(result,calendar){if(calendar!==me&&!calendar.isChildOf(me)){result.push({id:calendar.calendarId,name:calendar.name||calendar.calendarId});}return result;},[]);}},{key:"getAvailabilityIntervalsFor",/**
     * Returns the availability intervals of a specific day. Potentially can consult a parent calendar.
     *
     * @param {Date|Number} timeDate A date or timestamp
     * @return {Object[]} Array of objects, like:

     {
         startDate       : new Date(...),
         endDate         : new Date(...)
     }
     */value:function getAvailabilityIntervalsFor(timeDate,noNeedToClearTime){if(noNeedToClearTime){timeDate=timeDate.valueOf();}else if(timeDate instanceof Date){timeDate=new Date(timeDate.getFullYear(),timeDate.getMonth(),timeDate.getDate()).valueOf();}else{timeDate=DateHelper.clearTime(new Date(timeDate)).valueOf();}return this.availabilityIntervalsCache[timeDate]=this.availabilityIntervalsCache[timeDate]||this.getCalendarDay(timeDate).getAvailabilityIntervalsFor(timeDate);}},{key:"onParentDestroy",value:function onParentDestroy(){this.parent=null;}},{key:"isAvailabilityIntersected",value:function isAvailabilityIntersected(withCalendar,startDate,endDate){var ownWeekDay,ownAvailability,testWeekDay,testAvailability;// first let's try to find overlapping of weeks (check daily intervals)
// loop over week days
for(var i=0;i<7;i++){ownWeekDay=this.getWeekDay(i)||this.getDefaultCalendarDay(i);testWeekDay=withCalendar.getWeekDay(i)||withCalendar.getDefaultCalendarDay(i);if(!ownWeekDay||!testWeekDay)continue;// get daily intervals
ownAvailability=ownWeekDay.getAvailability();testAvailability=testWeekDay.getAvailability();// loop over intervals to find overlapping
for(var j=0,l=ownAvailability.length;j<l;j++){for(var k=0,ll=testAvailability.length;k<ll;k++){if(testAvailability[k].startTime<ownAvailability[j].endTime&&testAvailability[k].endTime>ownAvailability[j].startTime){return true;}}}}var result=false;this.forEachNonStandardWeek(function(week){if(week.startDate>=endDate)return false;if(startDate<week.endDate){result=true;// stop the iteration
return false;}});return result;}},{key:"calendarId",/**
     * Get/set the calendarId of the current calendar, also registers it in the calendar registry.
     * @property {String}
     */get:function get(){return this._calendarId;}/**
     * Sets the {@link #property-parent} for this calendar. Pass `null` to remove the parent.
     *
     * @param {String|Scheduler.data.Calendar} parentOrId String with {@link #config-calendarId} value or calendar instance itself.
     */,set:function set(id){var me=this;me._calendarId=id;if(id!=null){me.storeId='GNT_CALENDAR:'+id;}else{me.storeId=null;}me.params=Object.assign(me.params||{},{calendarId:id});}},{key:"parent",set:function set(parentOrId){var me=this,parent=Calendar.getCalendar(parentOrId);if(parentOrId&&!parent)throw new Error('Invalid parent specified for the calendar');if(me.parent!=parent){var _listeners3={calendarchange:me.clearCache,destroy:me.onParentDestroy,thisObj:me};var oldParent=me.parent;if(oldParent)oldParent.un(_listeners3);me._parent=parent;if(parent)parent.on(_listeners3);me.params=Object.assign(me.params||{},{parentId:parent?parent.calendarId:null});me.clearCache();/**
             * Triggered when a calender is assigned to a new parent calendar.
             * @event parentChange
             *
             * @param {Scheduler.data.Calendar} source The calendar which parent has changed
             * @param {Scheduler.data.Calendar} newParent The new parent of this calendar (can be `null` if parent is being removed)
             * @param {Scheduler.data.Calendar} oldParent The old parent of this calendar (can be `null` if there was no parent)
             */me.trigger('parentChange',{newParent:parent,oldParent:oldParent});}},get:function get(){return this._parent;}}],[{key:"getCalendar",value:function getCalendar(id){if(id instanceof Calendar)return id;return Store.getStore(id);}},{key:"defaultConfig",get:function get(){return{modelClass:CalendarDayModel,/**
             * Number of days per month. Will be used when converting the big duration units like month/year to days.
             *
             * @config {Number}
             * @default
             */daysPerMonth:30,/**
             * Number of days per week. Will be used when converting the duration in weeks to days.
             *
             * @config {Number}
             * @default
             */daysPerWeek:7,/**
             * Number of hours per day. Will be used when converting the duration in days to hours.
             *
             * **Please note**, that this config is used for duration conversion and not anything else. If you need to change
             * the number of working hours in the day, update the {@link #config-defaultAvailability}
             *
             * @config {Number}
             * @default
             */hoursPerDay:24,unitsInMs:null,defaultNonWorkingTimeCssCls:'b-nonworkingtime',/**
             * Setting this option to `true` will treat *all* days as working days. Default value is `false`.
             * @config {Boolean}
             * @default
             */weekendsAreWorkdays:false,/**
             * The index of the first day in a weekend, 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. '
             * Default value is 6 - Saturday
             * @config {Number}
             * @default
             */weekendFirstDay:6,/**
             * The index of the second day in weekend, 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
             * Default value is 0 - Sunday
             * @config {Number}
             * @default
             */weekendSecondDay:0,holidaysCache:null,availabilityIntervalsCache:null,daysIndex:null,// a "cached" array of WEEKDAY days
weekAvailability:null,// the "very default" availability array, calculated based on `defaultAvailability` property
defaultWeekAvailability:null,nonStandardWeeksByStartDate:null,nonStandardWeeksStartDates:null,/**
             * The unique id for the calendar. Providing a `calendarId` will register this calendar in the calendars
             * registry and it can be retrieved later with {@link #function-getCalendar-static}. Generally only required if want to use
             * {@link #property-parent parent-child relations} between the calendars, or assign this calendar to a particular
             * task or resource.
             *
             * @config {String}
             */calendarId:null,/**
             * The parent calendar. Can be provided as the calendar id or calendar instance itself. If this property is
             * provided or set with {@link #property-parent} property, this calendar becomes a "child" of the specified
             * calendar. This means that it will "inherit" all day overrides, week days and week day overrides from its
             * "parent". In the same time, special days, defined in this calendar take priority over the ones from the
             * "parent".
             *
             * You can use this feature if you'd like to create a single "main" calendar for the whole project, and then
             * allow some task or resource to have slightly different calendar (with an additional day off for example).
             * You will not have to re-create all special days in the calendar of such task/resource - just set the
             * "main" calendar as a "parent" for it.
             *
             * @config {String|Scheduler.data.Calendar}
             */parent:null,/**
             * The array of default availability intervals (in the format of the
             * `Availability` field in the {@link Scheduler.model.CalendarDayModel}) for each working weekday (Monday-Friday). Defaults
             * to whole day (00-24) for backward compatibility.
             * @config {String[]}
             * @default
             */defaultAvailability:['00:00-24:00'],/**
             * The name of this calendar
             * @config {String}
             */name:null,suspendCacheUpdate:0,/**
             * Maximum number of days to search for calendar availability intervals.
             * Used in various calculations requiring to respect working time.
             * In these cases the system iterates through the working time day by day. This option determines the maximum distance
             * to iterate. Prevents against infinite loop in case of wrong calendar configuration.
             * @config {Number}
             * @default
             */availabilitySearchLimit:1825//5*365
};}/**
     * Returns an array of all registered calendars.
     *
     * @return {Scheduler.data.Calendar[]}
     */},{key:"allCalendars",get:function get(){return(Store.stores||[]).filter(function(store){return store instanceof Calendar;});}}]);return Calendar;}(AjaxStore);exports.SchedulerCalendar=Calendar;Calendar._$name='Calendar';/**
 * @module Scheduler/crud/encoder/JsonEncoder
 */ /**
 * Implements data encoding functional that should be mixed to a {@link Scheduler.crud.AbstractCrudManager} sub-class.
 * Uses _JSON_ as an encoding system.
 *
 * @example
 * // create a new CrudManager using AJAX as a transport system and JSON for encoding
 * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}
 *
 * @mixin
 */var JsonEncoder=function JsonEncoder(Target){return(/*#__PURE__*/function(_ref196){_inherits2(JsonEncoder,_ref196);function JsonEncoder(){_classCallCheck2(this,JsonEncoder);return _possibleConstructorReturn2(this,_getPrototypeOf2(JsonEncoder).apply(this,arguments));}_createClass2(JsonEncoder,[{key:"encode",//format  : 'json',
/**
     * Encodes an request object to _JSON_ encoded string. If encoding fails (due to circular structure), it returns null.
     * @param {Object} request The request to encode.
     * @returns {String} The encoded request.
     */value:function encode(requestConfig){return StringHelper.safeJsonStringify(requestConfig);}/**
     * Decodes (parses) a _JSON_ response string to an object. If parsing fails, it returns null.
     * @param {String} responseText The response text to decode.
     * @returns {Object} The decoded response.
     */},{key:"decode",value:function decode(responseText){return StringHelper.safeJsonParse(responseText);}}]);return JsonEncoder;}(Target||Base));};/**
 * @module Scheduler/data/mixin/ResourceStoreMixin
 */ /**
 * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Scheduler.data.ResourceStore}.
 *
 * @mixin
 */var ResourceStoreMixin=function ResourceStoreMixin(Target){return(/*#__PURE__*/function(_ref197){_inherits2(ResourceStoreMixin,_ref197);function ResourceStoreMixin(){_classCallCheck2(this,ResourceStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceStoreMixin).apply(this,arguments));}_createClass2(ResourceStoreMixin,[{key:"getScheduledEventsInTimeSpan",value:function getScheduledEventsInTimeSpan(start,end){var eventStore=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.eventStore;// TODO: PORT check if correct
return this.reduce(function(events,resource){events.concat(eventStore.getEventsForResource(resource).reduce(function(events,event){if(event.intersectsRange(start,end))events.push(event);}));});}},{key:"eventStore",/**
     * Get/set the associated event store instance
     *
     * @property {Scheduler.data.EventStore}
     */get:function get(){return this._eventStore;},set:function set(eventStore){var me=this;if(me._eventStore!==eventStore){var oldStore=me._eventStore;me._eventStore=eventStore||null;if(eventStore&&!eventStore.resourceStore){eventStore.resourceStore=me;}/**
             * Fires when new event store is set via {@link #property-eventStore} method.
             * @event eventstorechange
             * @param {Scheduler.data.ResourceStore}   this
             * @param {Scheduler.data.EventStore} newEventStore
             * @param {Scheduler.data.EventStore} oldEventStore
             */me.trigger('eventStoreChange',{newEventStore:eventStore,oldEventStore:oldStore});}}}]);return ResourceStoreMixin;}(Target||Base));};/**
 * @module Scheduler/model/ResourceModel
 */ /**
 * This class represent a single Resource in the scheduler chart. It's a subclass of  {@link Common.data.Model}.
 * Please refer to the documentation for that class to become familiar with the base interface of the resource.
 *
 * A Resource has only 2 mandatory fields - `id` and `name`. If you want to add more fields with meta data describing your resources then you should subclass this class:
 *
 * ```javascript
 * class MyResource extends ResourceModel {
 *
 *   static get fields() {
 *     [
 *       // `Id` and `Name` fields are already provided by the superclass
 *       { name: 'company', type : 'string' }
 *     ];
 *   }
 *
 *   getCompany() {
 *     return this.company;
 *   }
 *   ...
 * });
 * ```
 * If you want to use other names in your data for the id and name fields you can configure them as seen below:
 * ```javascript
 * class MyResource extends ResourceModel {
 *
 *   static get fields() {
 *     return [
 *        { name: 'name', dataSource: 'userName' }
 *     ];
 *   },
 *   ...
 * });
 * ```
 * Please refer to {@link Common.data.Model} for details.
 *
 * @extends Grid/data/GridRowModel
 */var ResourceModel=/*#__PURE__*/function(_GridRowModel2){_inherits2(ResourceModel,_GridRowModel2);function ResourceModel(){_classCallCheck2(this,ResourceModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceModel).apply(this,arguments));}_createClass2(ResourceModel,[{key:"getEvents",// /**
//  * Returns all assignments for the resource. Resource must be part of the store for this method to work.
//  *
//  * @return {Scheduler.model.AssignmentModel[]}
//  * @readonly
//  */
// get assignments() {
//     const me         = this,
//         eventStore = me.eventStore;
//
//     return eventStore && eventStore.getAssignmentsForResource(me);
// }
/**
     * Returns an array of events, associated with this resource
     *
     * @param {Scheduler.data.EventStore} eventStore (optional) The event store to get events for (if a resource is bound to multiple stores)
     * @return {Scheduler.model.TimeSpan[]}
     */ // TODO: Needed?
value:function getEvents(){var eventStore=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.eventStore;return eventStore&&eventStore.getEventsForResource(this)||[];}/**
     * Returns true if the Resource can be persisted.
     * In a flat store resource is always considered to be persistable, in a tree store resource is considered to
     * be persitable if it's parent node is persistable.
     *
     * @return {Boolean} true if this model can be persisted to server.
     * @readonly
     */},{key:"isAbove",//endregion
/**
     * Returns true if this resource model is above the passed resource model
     * @param {Scheduler.model.ResourceModel} otherResource
     * @returns {Boolean}
     */value:function isAbove(otherResource){var me=this,store=me.resourceStore,current,myAncestors,otherAncestors,commonAncestorsLength,lastCommonAncestor;if(me===otherResource)return false;if(store.tree){//TODO: not ported
// Getting self ancestors this node including
current=me;myAncestors=[];while(current){myAncestors.push(current);current=current.parentNode;}// Getting other ancestors other node including
current=otherResource;otherAncestors=[];while(current){otherAncestors.push(current);current=current.parentNode;}// Getting common ancestors sequence length
commonAncestorsLength=0;while(commonAncestorsLength<myAncestors.length-1&&commonAncestorsLength<otherAncestors.length-1&&myAncestors[commonAncestorsLength]==otherAncestors[commonAncestorsLength]){++commonAncestorsLength;}// Getting last common ancesstor
lastCommonAncestor=myAncestors[commonAncestorsLength];// Here the next ancestor in myAncestors and next ancesstor in otherAncestors are siblings and
// thus designate which node is above
me=myAncestors[commonAncestorsLength+1];otherResource=otherAncestors[commonAncestorsLength+1];return lastCommonAncestor.indexOf(me)<lastCommonAncestor.indexOf(otherResource);}return store.indexOf(me)<store.indexOf(otherResource);}/**
     * Unassigns this Resource from all its Events
     */},{key:"unassignAll",value:function unassignAll(removingResource){var _this62=this;this.events&&this.events.slice().forEach(function(event){return event.unassign(_this62,removingResource);});}},{key:"resourceStore",// ResoureModel#assignments is created by a relation defined in AssignmentModel
/**
     * Returns all assignments for the resource. Resource must be part of the store for this method to work.
     * @member {Scheduler.model.AssignmentModel[]} assignments
     */ //endregion
//region Stores
/**
     * Returns a resource store this resource is part of. Resource must be part
     * of a resource store to be able to retrieve resource store.
     *
     * @return {Scheduler.data.ResourceStore}
     * @readonly
     */get:function get(){return this.stores&&this.stores[0];}/**
     * Returns an event store this resource uses as default. Resource must be part
     * of a resource store to be able to retrieve event store.
     *
     * @return {Scheduler.data.EventStore}
     * @readonly
     */},{key:"eventStore",get:function get(){var resourceStore=this.resourceStore;// TODO: this.parentNode... is not ported
return resourceStore&&resourceStore.eventStore||this.parentNode&&this.parentNode.eventStore;}/**
     * Returns as assignment store this resources uses as default. Resource must be part
     * of a resource store to be able to retrieve default assignment store.
     *
     * @return {Scheduler.data.AssignmentStore}
     * @readonly
     */},{key:"assignmentStore",get:function get(){var eventStore=this.eventStore;return eventStore&&eventStore.assignmentStore;}//endregion
//region Getters
/**
     * Get associated events
     * @returns {Scheduler.model.EventModel[]}
     * @readonly
     */},{key:"events",get:function get(){// Cannot use relation here, since it wont work in mult assignment
// TODO: Investigate making relations handle many-to-many using intermediate store? To have it cached
return this.eventStore&&this.eventStore.getEventsForResource(this);}},{key:"isPersistable",get:function get(){var parent=this.parentNode;// TODO: not ported yet
return!parent||!parent.phantom||parent.isRoot&&parent.isRoot();}}],[{key:"fields",//region Fields
get:function get(){return[/**
             * Unique identifier
             * @field {String|Number} id
             */ /**
             * Get or set resource name
             * @field {String} name
             */{name:'name',type:'string',persist:true},/**
             * Controls the primary color used for events assigned to this resource. Can be overridden per event using
             * {@link Scheduler/model/EventModel#field-eventColor}
             * @field {String} eventColor
             */'eventColor',/**
             * Controls the style used for events assigned to this resource. Can be overridden per event using
             * {@link Scheduler/model/EventModel#field-eventStyle}
             * @field {String} eventStyle
             */'eventStyle',/**
             * Image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
             * for the resource.
             * @field {String} imageUrl
             */'imageUrl'];}}]);return ResourceModel;}(GridRowModel);exports.SchedulerResourceModel=ResourceModel;ResourceModel.exposeProperties();ResourceModel._$name='ResourceModel';/**
 * @module Scheduler/data/ResourceStore
 */ /**
 * This is a class holding the collection the {@link Scheduler.model.ResourceModel resources} to be rendered into a
 * {@link Scheduler.view.Scheduler scheduler}.
 *
 * @mixes Scheduler/data/mixin/ResourceStoreMixin
 * @extends Common/data/AjaxStore
 */var ResourceStore=/*#__PURE__*/function(_ResourceStoreMixin){_inherits2(ResourceStore,_ResourceStoreMixin);function ResourceStore(){_classCallCheck2(this,ResourceStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceStore).apply(this,arguments));}_createClass2(ResourceStore,[{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(ResourceStore.prototype),"construct",this).call(this,config);if(this.modelClass!==ResourceModel&&!(this.modelClass.prototype instanceof ResourceModel)){throw new Error('Model for ResourceStore must subclass ResourceModel');}}},{key:"remove",value:function remove(recordsOrIds){recordsOrIds=Array.isArray(recordsOrIds)?recordsOrIds:[recordsOrIds];var _iteratorNormalCompletion52=true;var _didIteratorError52=false;var _iteratorError52=undefined;try{for(var _iterator52=recordsOrIds[Symbol.iterator](),_step52;!(_iteratorNormalCompletion52=(_step52=_iterator52.next()).done);_iteratorNormalCompletion52=true){var r=_step52.value;var record=this.getById(r);// Unassign flagged as part of removal, to let UI make intelligent (?) decisions about what to update
record.unassignAll(true);}}catch(err){_didIteratorError52=true;_iteratorError52=err;}finally{try{if(!_iteratorNormalCompletion52&&_iterator52.return!=null){_iterator52.return();}}finally{if(_didIteratorError52){throw _iteratorError52;}}}_get2(_getPrototypeOf2(ResourceStore.prototype),"remove",this).call(this,recordsOrIds);}},{key:"removeAll",value:function removeAll(){this.traverse(function(resourceRecord){return resourceRecord.unassignAll(true);});_get2(_getPrototypeOf2(ResourceStore.prototype),"removeAll",this).call(this);}}],[{key:"defaultConfig",get:function get(){return{/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:200,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:100,modelClass:ResourceModel,storeId:'resources',autoTree:true};}}]);return ResourceStore;}(ResourceStoreMixin(AjaxStore));exports.SchedulerResourceStore=ResourceStore;ResourceStore._$name='ResourceStore';/**
 * @module Scheduler/data/util/ModelPersistencyManager
 */ /**
 * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable
 * records from sync operation. The logic has meaning only for CRUD-less sync operations.
 *
 * @private
 */var ModelPersistencyManager=/*#__PURE__*/function(_Base6){_inherits2(ModelPersistencyManager,_Base6);function ModelPersistencyManager(){_classCallCheck2(this,ModelPersistencyManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(ModelPersistencyManager).apply(this,arguments));}_createClass2(ModelPersistencyManager,[{key:"onEventStoreBeforeSync",// endregion
// region Event handlers
value:function onEventStoreBeforeSync(_ref198){var changes=_ref198.changes;var me=this;me.removeNonPersistableRecordsToCreate(changes);return me.shallContinueSync(changes);}},{key:"onResourceStoreBeforeSync",value:function onResourceStoreBeforeSync(_ref199){var changes=_ref199.changes;var me=this;me.removeNonPersistableRecordsToCreate(changes);return me.shallContinueSync(changes);}},{key:"onAssignmentStoreBeforeSync",value:function onAssignmentStoreBeforeSync(_ref200){var changes=_ref200.changes;var me=this;me.removeNonPersistableRecordsToCreate(changes);return me.shallContinueSync(changes);}},{key:"onDependencyStoreBeforeSync",value:function onDependencyStoreBeforeSync(_ref201){var changes=_ref201.changes;var me=this;me.removeNonPersistableRecordsToCreate(changes);return me.shallContinueSync(changes);}// endregion
// region Management rules
},{key:"removeNonPersistableRecordsToCreate",value:function removeNonPersistableRecordsToCreate(changes){var recordsToCreate=changes.added||[],r,i;// We remove from the array we iterate thus we iterate from end to start
for(i=recordsToCreate.length-1;i>=0;--i){r=recordsToCreate[i];if(!r.isPersistable){recordsToCreate.splice(recordsToCreate.indexOf(r),1);}}// Prevent empty create request
if(recordsToCreate.length===0){changes.added.length=0;}}},{key:"shallContinueSync",value:function shallContinueSync(options){return Boolean(options.added&&options.added.length>0||options.modified&&options.modified.length>0||options.removed&&options.removed.length>0);}// endregion
},{key:"eventStore",// region Event attachers
set:function set(newEventStore){var me=this;me.eventStoreDetacher&&me.eventStoreDetacher();me._eventStore=newEventStore;if(newEventStore&&newEventStore.autoCommit){me.eventStoreDetacher=newEventStore.on({beforecommit:me.onEventStoreBeforeSync,thisObj:me,detachable:true,// Just in case
prio:100});}},get:function get(){return this._eventStore;}},{key:"resourceStore",set:function set(newResourceStore){var me=this;me.resourceStoreDetacher&&me.resourceStoreDetacher();me._resourceStore=newResourceStore;if(newResourceStore&&newResourceStore.autoCommit){me.resourceStoreDetacher=newResourceStore.on({beforecommit:me.onResourceStoreBeforeSync,thisObj:me,detachable:true,// Just in case
prio:100});}},get:function get(){return this._resourceStore;}},{key:"assignmentStore",set:function set(newAssignmentStore){var me=this;me.assignmentStoreDetacher&&me.assignmentStoreDetacher();me._assignmentStore=newAssignmentStore;if(newAssignmentStore&&newAssignmentStore.autoSync){me.assignmentStoreDetacher=newAssignmentStore.on({beforecommit:me.onAssignmentStoreBeforeSync,thisObj:me,detachable:true,// Just in case
prio:100});}},get:function get(){return this._assignmentStore;}},{key:"dependencyStore",set:function set(newDependencyStore){var me=this;me.dependencyStoreDetacher&&me.dependencyStoreDetacher();me._dependencyStore=newDependencyStore;if(newDependencyStore&&newDependencyStore.autoSync){me.dependencyStoreDetacher=newDependencyStore.on({beforecommit:me.onDependencyStoreBeforeSync,thisObj:me,detachable:true,// Just in case
prio:100});}},get:function get(){return this._dependencyStore;}}]);return ModelPersistencyManager;}(Base);ModelPersistencyManager._$name='ModelPersistencyManager';// TODO: PORT Make getters/setters?
/**
 * @module Scheduler/data/mixin/EventStoreMixin
 */var validResourceIdTypes={string:1,number:1};/**
 * This is a mixin, containing functionality related to managing events.
 *
 * It is consumed by the regular {@link Scheduler.data.EventStore} class and the Gantt `TaskStore` classes
 * to allow data sharing between a Gantt chart and a Scheduler.
 *
 * @mixin
 */var EventStoreMixin=function EventStoreMixin(Target){return(/*#__PURE__*/function(_ref202){_inherits2(EventStoreMixin,_ref202);function EventStoreMixin(){_classCallCheck2(this,EventStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventStoreMixin).apply(this,arguments));}_createClass2(EventStoreMixin,[{key:"construct",/**
     * Provide assignment store to enable multiple connections between events and resources
     * @config {Scheduler.data.AssignmentStore} assignmentStore
     */ //endregion
//region Init & destroy
value:function construct(config){var me=this;_get2(_getPrototypeOf2(EventStoreMixin.prototype),"construct",this).call(this,config);Object.assign(me,{isEventStore:true,autoTree:true,modelPersistencyManager:me.createModelPersistencyManager()});}/**
     * Creates and returns model persistency manager
     *
     * @return {Scheduler.data.util.ModelPersistencyManager}
     * @internal
     */},{key:"createModelPersistencyManager",value:function createModelPersistencyManager(){var me=this;return new ModelPersistencyManager({eventStore:me,resourceStore:me.resourceStore,assignmentStore:me.assignmentStore,dependencyStore:me.dependencyStore});}//endregion
//region Events records, iteration etc.
/**
     * Returns events between the supplied start and end date
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {Boolean} allowPartial false to only include events that start and end inside of the span
     * @param {Boolean} onlyAssigned true to only include events that are assigned to a resource
     * @return {Scheduler.model.EventModel[]} the events
     * @category Events
     */},{key:"getEventsInTimeSpan",value:function getEventsInTimeSpan(start,end){var allowPartial=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var onlyAssigned=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var events=[];this.forEachScheduledEvent(function(event,eventStart,eventEnd){if(allowPartial&&DateHelper.intersectSpans(eventStart,eventEnd,start,end)||!allowPartial&&eventStart-start>=0&&end-eventEnd>=0){if(!onlyAssigned||event.resources.length>0){events.push(event);}}});return events;}/**
     * Returns all events that starts on the specified day.
     * @param start Start date
     * @returns {Scheduler.model.EventModel[]} Events starting on specified day
     * @category Events
     */},{key:"getEventsByStartDate",value:function getEventsByStartDate(start){var events=[];this.forEachScheduledEvent(function(event,eventStart,eventEnd){if(DateHelper.isEqual(eventStart,start,'day')){events.push(event);}});return events;}/**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * - event : the event record
     * - startDate : the event start date
     * - endDate : the event end date
     *
     * Returning false cancels the iteration.
     *
     * @param {Function} fn iterator function
     * @param {Object} thisObj `this` reference for the function
     * @category Events
     */},{key:"forEachScheduledEvent",value:function forEachScheduledEvent(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;this.forEach(function(event){var eventStart=event.startDate,eventEnd=event.endDate;if(eventStart&&eventEnd)return fn.call(thisObj,event,eventStart,eventEnd);});}/**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     *
     * @return {Object} An object with 'start' and 'end' Date properties (or null values if data is missing).
     * @category Events
     */},{key:"getTotalTimeSpan",value:function getTotalTimeSpan(){var earliest=new Date(9999,0,1),latest=new Date(0);this.forEach(function(r){if(r.startDate)earliest=DateHelper.min(r.startDate,earliest);if(r.endDate)latest=DateHelper.max(r.endDate,latest);});// TODO: this will fail in programs designed to work with events in the past (after Jan 1, 1970)
earliest=earliest<new Date(9999,0,1)?earliest:null;latest=latest>new Date(0)?latest:null;// keep last calculated value to be able to track total timespan changes
return this.lastTotalTimeSpan={startDate:earliest||null,endDate:latest||earliest||null};}/**
     * Checks if given event record is persistable.
     * In case assignment store is used to assign events to resources and vise versa event is considered to be always
     * persistable. Otherwise backward compatible logic is used, i.e. event is considered to be persistable when
     * resources it's assigned to are not phantom.
     *
     * @param {Scheduler.model.EventModel} event
     * @return {Boolean}
     * @category Events
     */},{key:"isEventPersistable",value:function isEventPersistable(event){if(!this.assignmentStore){return!event.resource||!event.resource.hasGeneratedId;}return true;}//endregion
//region Resource
/**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {Scheduler.model.EventModel} excludeEvent An event to exclude from the check (or null)
     * @param {Scheduler.model.ResourceModel} resource The resource
     * @return {Boolean} True if the timespan is available for the resource
     * @category Resource
     */},{key:"isDateRangeAvailable",value:function isDateRangeAvailable(start,end,excludeEvent,resource){if(excludeEvent instanceof AssignmentModel){var currentEvent=excludeEvent.event,resources=currentEvent.resources,allEvents=new Set(resource.events);resources.forEach(function(resource){resource.events.forEach(function(e){return allEvents.add(e);});});allEvents.delete(currentEvent);return!Array.from(allEvents).some(function(ev){return DateHelper.intersectSpans(start,end,ev.startDate,ev.endDate);});}return!this.getEventsForResource(resource).some(function(ev){return!(excludeEvent===ev||!DateHelper.intersectSpans(start,end,ev.startDate,ev.endDate));});}/**
     * Filters the events associated with a resource, based on the function provided. An array will be returned for those
     * events where the passed function returns true.
     * @param {Scheduler.model.ResourceModel} resource
     * @param {Function} fn The function
     * @param {Object} [thisObj] `this` reference for the function
     * @return {Scheduler.model.EventModel[]} the events in the time span
     * @private
     * @category Resource
     */},{key:"filterEventsForResource",value:function filterEventsForResource(resource,fn){var thisObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;// `getEvents` method of the resource will use either `indexByResource` or perform a full scan of the event store
return resource.getEvents(this).filter(fn.bind(thisObj));}// This method provides a way for the store to append a new record, and the consuming class has to implement it
// since Store and TreeStore don't share the add API.
//append(record) {
//    throw 'Must be implemented by consuming class';
//}
/**
     * Returns all resources assigned to an event.
     *
     * @param {Scheduler.model.EventModel|String|Number} event
     * @return {Scheduler.model.ResourceModel[]}
     * @category Resource
     */},{key:"getResourcesForEvent",value:function getResourcesForEvent(event){if(this.assignmentStore){return this.assignmentStore.getResourcesForEvent(event);}event=this.getById(event);return event.resource&&!event.resource.placeHolder?[event.resource]:[];}/**
     * Returns all events assigned to a resource
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource or resource id
     * @return {Scheduler.model.EventModel[]}
     * @category Resource
     */},{key:"getEventsForResource",value:function getEventsForResource(resource){var me=this,assignmentStore=me.assignmentStore;if(assignmentStore){return assignmentStore.getEventsForResource(resource);}// *not* if (!['string', 'number'].includes(typeof resource))
// Always avoid array iteration. It was only two, but it's the principle.
// Also a constant expression should be declared at module level,
// otherwise it becomes collectable garbage on each invocation.
if(!validResourceIdTypes[_typeof(resource)]){resource=resource.id;}// Could be changed to use resource.events, but that would require getting model by id. This way is a bit faster
var cache=me.relationCache.resource&&me.relationCache.resource[resource];// Slice to be safe from outside manipulation of the array
return cache?cache.slice():[];}//endregion
//region Assignment
/**
     * Returns all assignments for a given event.
     * Works only if {@link #property-assignmentStore} is defined, otherwise returns an empty array.
     *
     * @param {Scheduler.model.EventModel|String|Number} event
     * @return {Scheduler.model.AssignmentModel[]}
     * @category Assignment
     */},{key:"getAssignmentsForEvent",value:function getAssignmentsForEvent(event){return this.assignmentStore&&this.assignmentStore.getAssignmentsForEvent(event)||[];}/**
     * Returns all assignments for a given resource.
     * Works only if {@link #property-assignmentStore} is defined, otherwise returns an empty array.
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource
     * @return {Scheduler.model.AssignmentModel[]}
     * @category Assignment
     */},{key:"getAssignmentsForResource",value:function getAssignmentsForResource(resource){return this.assignmentStore&&this.assignmentStore.getAssignmentsForResource(resource)||[];}/**
     * Creates and adds assignment record for a given event and a resource.
     *
     * @param {Scheduler.model.EventModel|String|number} event
     * @param {Scheduler.model.ResourceModel|String|number|Scheduler.model.ResourceModel[]|String[]|number[]} resource The resource(s) to assign to the event
     * @privateparam {Boolean} [removeExistingAssignments] true to first remove existing assignments
     * @category Assignment
     */},{key:"assignEventToResource",value:function assignEventToResource(event,resource){var removeExistingAssignments=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,assignmentStore=me.assignmentStore;if(assignmentStore){assignmentStore.assignEventToResource(event,resource,undefined,removeExistingAssignments);}else{event=me.getById(event);if(Array.isArray(resource)){resource=resource[0];}resource=resource instanceof ResourceModel?resource.id:resource;// resource id might be 0 thus we use ? operator
if(event){event.resourceId=resource;}}}/**
     * Removes assignment record for a given event and a resource.
     *
     * @param {Scheduler.model.EventModel|String|Number} event
     * @param {Scheduler.model.ResourceModel|String|Number} resource
     * @category Assignment
     */},{key:"unassignEventFromResource",value:function unassignEventFromResource(event,resource){var me=this,assignmentStore=me.assignmentStore;if(assignmentStore){assignmentStore.unassignEventFromResource(event,resource);}else{event=me.getById(event);resource=resource instanceof ResourceModel?resource.id:resource;// resource id might be 0 thus we use ? operator
if(event&&event.resourceId==resource){event.resourceId=null;}}}/**
     * Reassigns an event from an old resource to a new resource
     *
     * @param {Scheduler.model.EventModel}    event    An event or id of the event to reassign
     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} oldResource A resource or id to unassign from
     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} newResource A resource or id to assign to
     * @category Assignment
     */},{key:"reassignEventFromResourceToResource",value:function reassignEventFromResourceToResource(event,oldResource,newResource){var me=this,assignmentStore=me.assignmentStore,newResourceId=Model.asId(newResource),oldResourceId=Model.asId(oldResource);if(assignmentStore){var assignment=assignmentStore.getAssignmentForEventAndResource(event,oldResource);if(assignment){assignment.resourceId=newResourceId;}else{assignmentStore.assignEventToResource(event,newResource);}}else{event=me.getById(event);if(event.resourceId==oldResourceId){event.resourceId=newResourceId;}}}/**
     * Checks whether an event is assigned to a resource.
     *
     * @param {Scheduler.model.EventModel|String|Number} event
     * @param {Scheduler.model.ResourceModel|String|Number} resource
     * @return {Boolean}
     * @category Assignment
     */},{key:"isEventAssignedToResource",value:function isEventAssignedToResource(event,resource){var me=this,assignmentStore=me.assignmentStore;if(assignmentStore)return assignmentStore.isEventAssignedToResource(event,resource);event=me.getById(event);resource=Model.asId(resource);return event&&event.resourceId==resource||false;}/**
     * Removes all assignments for given event
     *
     * @param {Scheduler.model.EventModel|String|Number} event
     * @category Assignment
     */},{key:"removeAssignmentsForEvent",value:function removeAssignmentsForEvent(event){var me=this,assignmentStore=me.assignmentStore;if(assignmentStore){assignmentStore.removeAssignmentsForEvent(event);}else{event=me.getById(event);if(event)event.resourceId=null;// This will update resource events cache via 'update' event
}}/**
     * Removes all assignments for given resource
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource
     * @category Assignment
     */},{key:"removeAssignmentsForResource",value:function removeAssignmentsForResource(resource){var me=this,assignmentStore=me.assignmentStore,resourceStore=me.resourceStore;if(assignmentStore){assignmentStore.removeAssignmentsForResource(resource);}else if(resourceStore){resource=resourceStore.getById(resource);// TODO: change to use model cache
//resource && me.resourceEventsCache.get(resource).forEach(event => {
//    event.resourceId = null; // This will update resource events cache via 'update' event
//});
}else{resource=Model.asId(resource);// resource id might be 0 thus we use ? operator
me.forEach(function(event){return event.resourceId==resource&&(event.resourceId=null);});}}//endregion
},{key:"resourceStore",// doDestroy() {
//      this.modelPersistencyManager.destroy();
// }
//endregion
//region Connected stores (Resource, Assigment & Dependency)
/**
     * Get/set the resource store for this store
     * @property {Scheduler.data.ResourceStore}
     */get:function get(){return this._resourceStore;},set:function set(resourceStore){var me=this,oldStore=me._resourceStore;if(oldStore){oldStore.eventStore=null;if(me.modelPersistencyManager)me.modelPersistencyManager.resourceStore=null;}me._resourceStore=resourceStore||null;if(resourceStore){if(me.modelPersistencyManager)me.modelPersistencyManager.resourceStore=me._resourceStore;resourceStore.eventStore=me;}// If store is assigned after configuration we need to init relations
if(!me.isConfiguring){me.initRelations(true);}if((oldStore||resourceStore)&&oldStore!==resourceStore){/**
             * Fires when new resource store is set via {@link #property-resourceStore} setter.
             * @event resourcestorechange
             * @param {Scheduler.data.EventStore}         this
             * @param {Scheduler.data.ResourceStore} newResourceStore
             * @param {Scheduler.data.ResourceStore} oldResourceStore
             */me.trigger('resourceStoreChange',{newResourceStore:resourceStore,oldResourceStore:oldStore});}}/**
     * Get/set assignment store this event store is using by default
     * @property {Scheduler.data.AssignmentStore}
     */},{key:"assignmentStore",get:function get(){return this._assignmentStore;},set:function set(assignmentStore){var me=this,oldStore=me._assignmentStore;if(oldStore){oldStore.eventStore=null;if(me.modelPersistencyManager)me.modelPersistencyManager.assignmentStore=null;}me._assignmentStore=assignmentStore||null;if(assignmentStore){if(me.modelPersistencyManager)me.modelPersistencyManager.assignmentStore=me._assignmentStore;assignmentStore.eventStore=me;}// If store is assigned after configuration we need to init relations
if(!me.isConfiguring){me.initRelations(true);}if((oldStore||assignmentStore)&&oldStore!==assignmentStore){/**
             * Fires when new assignment store is set via {@link #property-assignmentStore} setter.
             * @event assignmentStoreChange
             * @param {Scheduler.data.EventStore}           this
             * @param {Scheduler.data.AssignmentStore} newAssignmentStore
             * @param {Scheduler.data.AssignmentStore} oldAssignmentStore
             */me.trigger('assignmentStoreChange',{newAssignmentStore:assignmentStore,oldAssignmentStore:oldStore});}}/**
     * Get/set a dependecy store instance this event store is associated with
     * Get/set a dependecy store instance this event store is associated with
     * @property {Scheduler.data.DependencyStore}
     */},{key:"dependencyStore",get:function get(){return this._dependencyStore;},set:function set(dependencyStore){var me=this,oldStore=me._dependencyStore;if(oldStore){oldStore.eventStore=null;if(me.modelPersistencyManager)me.modelPersistencyManager.dependencyStore=null;}me._dependencyStore=dependencyStore||null;if(me._dependencyStore){if(me.modelPersistencyManager)me.modelPersistencyManager.dependencyStore=me._dependencyStore;me._dependencyStore.eventStore=me;}if((oldStore||dependencyStore)&&oldStore!==dependencyStore){/**
             * Fires when new dependency store is set via {@link #property-dependencyStore} setter.
             * @event dependencystorechange
             * @param {Scheduler.data.EventStore}           this
             * @param {Scheduler.data.DependencyStore} newDependencyStore
             * @param {Scheduler.data.DependencyStore} oldDependencyStore
             */me.trigger('dependencyStoreChange',{newDependencyStore:dependencyStore,oldDependencyStore:oldStore});}}}]);return EventStoreMixin;}(Target||Base));};/**
 * @module Scheduler/model/EventModel
 */ /**
 * This class represent a single event in your schedule. It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Common.data.Model}.
 * Please refer to documentation of that class to become familiar with the base interface of the event.
 *
 * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,
 * you can do that by subclassing this class (see example below).
 *
 * Subclassing the Event model class
 * --------------------
 * ```
 * class MyEvent extends EventModel {
 *
 *     static get fields() {
 *         return [
 *            // Add new field
 *            { name: 'myField', type : 'number', defaultValue : 0 }
 *         ];
 *     },
 *
 *     myCheckMethod() {
 *         return this.myField > 0
 *     },
 *
 *     ...
 * });
 * ```
 * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure
 * them as seen below:
 * ```
 * class MyEvent extends EventModel {
 *
 *     static get fields() {
 *         return [
 *            { name: 'startDate', dataSource 'taskStart', type: 'date', format: 'YYYY-MM-DD' },
 *            { name: 'endDate', dataSource 'taskEnd', type: 'date', format: 'YYYY-MM-DD' },
 *            { name: 'resourceId', dataSource 'userId' },
 *            { name: 'name', dataSource 'taskTitle' },
 *         ];
 *     },
 *     ...
 * });
 * ```
 * Please refer to {@link Common.data.Model} for additional details.
 *
 * @extends Scheduler/model/TimeSpan
 */var EventModel=/*#__PURE__*/function(_TimeSpan){_inherits2(EventModel,_TimeSpan);function EventModel(){_classCallCheck2(this,EventModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventModel).apply(this,arguments));}_createClass2(EventModel,[{key:"forEachResource",/**
     * Iterate over all associated resources
     * @private
     */value:function forEachResource(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;var _iteratorNormalCompletion53=true;var _didIteratorError53=false;var _iteratorError53=undefined;try{for(var _iterator53=this.resources[Symbol.iterator](),_step53;!(_iteratorNormalCompletion53=(_step53=_iterator53.next()).done);_iteratorNormalCompletion53=true){var resource=_step53.value;if(fn.call(thisObj,resource)===false)return;}}catch(err){_didIteratorError53=true;_iteratorError53=err;}finally{try{if(!_iteratorNormalCompletion53&&_iterator53.return!=null){_iterator53.return();}}finally{if(_didIteratorError53){throw _iteratorError53;}}}}/**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     *
     * @param {String} resourceId (optional)
     * @return {Scheduler.model.ResourceModel}
     */},{key:"getResource",value:function getResource(){var resourceId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.resourceId;var me=this,eventStore=me.eventStore,resourceStore=eventStore&&eventStore.resourceStore;if(eventStore&&resourceId){var result=eventStore.getResourcesForEvent(me);if(result.length==1)return result[0];if(result.length>1)throw new Error('Event::getResource() is not applicable for events with multiple assignments, please use Event::resources instead.');return null;}if(resourceStore)return resourceStore?resourceStore.getById(resourceId):null;}/**
     * Sets the resource which the event should belong to.
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource The new resource
     */ // set resource(resource) {
//     const me         = this,
//           eventStore = me.eventStore;
//
//     eventStore && eventStore.removeAssignmentsForEvent(me);
//
//     me.assign(resource);
// }
//endregion
//region Is
// Used internally to differentiate between Event and ResourceTimeRange
},{key:"assign",//endregion
//region Assignment
/**'
     * Assigns this event to the specified resource.
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource A new resource for this event, either as a full Resource record or an id (or an array of such).
     */value:function assign(resource){var me=this,eventStore=me.eventStore;resource=Model.asId(resource);if(eventStore){eventStore.assignEventToResource(me,resource);}else{me.resourceId=resource;}}/**
     * Unassigns this event from the specified resource
     *
     * @param {Scheduler.model.ResourceModel|String|Number|Array} [resource] The resource to unassign from.
     */},{key:"unassign",value:function unassign(resource,removingResource){var me=this,eventStore=me.eventStore;resource=Model.asId(resource);// If unassigned is caused by removing the resource the UI should be able to find out to not do extra redraws etc.
me.meta.removingResource=removingResource;if(eventStore){eventStore.unassignEventFromResource(me,resource);}else if(me.resourceId==resource){me.resourceId=null;}me.meta.removingResource=null;}/**
     * Reassigns an event from an old resource to a new resource
     *
     * @param {Scheduler.model.ResourceModel|String|Number} oldResourceId A resource to unassign from or its id
     * @param {Scheduler.model.ResourceModel|String|Number} newResourceId A resource to assign to or its id
     */},{key:"reassign",value:function reassign(oldResourceId,newResourceId){var me=this,eventStore=me.eventStore;oldResourceId=Model.asId(oldResourceId);newResourceId=Model.asId(newResourceId);if(eventStore){eventStore.reassignEventFromResourceToResource(me,oldResourceId,newResourceId);}else{me.resourceId=newResourceId;}}/**
     * Returns true if this event is assigned to a certain resource.
     *
     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource to query for
     * @return {Boolean}
     */},{key:"isAssignedTo",value:function isAssignedTo(resource){var me=this,eventStore=me.eventStore;resource=Model.asId(resource);if(eventStore)return eventStore.isEventAssignedToResource(me,resource);return me.resourceId==resource;}//endregion
},{key:"eventStore",//endregion
//region Stores
/**
     * Returns the event store this event is part of.
     *
     * @return {Scheduler.data.EventStore}
     * @readonly
     */get:function get(){var me=this;if(!me._eventStore){me._eventStore=me.stores&&me.stores.find(function(s){return s.isEventStore;});}return me._eventStore;}/**
     * Returns the resource store this event uses as its default resource store. Event must be part
     * of an event store to be able to retrieve default resource store.
     *
     * @return {Scheduler.data.ResourceStore}
     * @readonly
     */},{key:"resourceStore",get:function get(){var eventStore=this.eventStore;return eventStore&&eventStore.resourceStore;}/**
     * Returns the assigment store this event uses as its default assignment store. Event must be part
     * of an event store to be able to retrieve default assignment store.
     *
     * @return {Scheduler.data.AssignmentStore}
     * @readonly
     */},{key:"assignmentStore",get:function get(){var eventStore=this.eventStore;return eventStore&&eventStore.assignmentStore;}//endregion
//region Resources
/**
     * Returns all resources assigned to an event.
     *
     * @return {Scheduler.model.ResourceModel[]}
     * @readonly
     */},{key:"resources",get:function get(){return this.eventStore&&this.eventStore.getResourcesForEvent(this)||[];}},{key:"isEvent",get:function get(){return true;}/**
     * Returns true if event can be drag and dropped
     * @return {Boolean} The draggable state for the event.
     * @readonly
     */},{key:"isDraggable",get:function get(){return this.draggable;}/**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can be resized.
     * @return {*} true, false, 'start' or 'end'
     * @readonly
     */},{key:"isResizable",get:function get(){return!this.isMilestone&&this.resizable;}/**
     * Returns false if a linked resource is a phantom record, i.e. it's not persisted in the database.
     *
     * @return {Boolean} true if persistable
     * @readonly
     */},{key:"isPersistable",get:function get(){var me=this,eventStore=me.eventStore;return eventStore&&eventStore.isEventPersistable(me);}}],[{key:"fields",//region Fields
// TODO: handle persist? defaultValue?
get:function get(){return[/**
             * The unique identifier of a task (mandatory)
             * @field {String|Number} id
             */ /**
             * CSS class specifying an icon to apply to the event
             * @field {String} iconCls
             */{name:'iconCls'},/**
             * Id of the resource this event is associated with (only usable for single assignments)
             * @field {String|Number} resourceId
             */{name:'resourceId'},/**
             * Specify false to prevent the event from being dragged (if EventDrag feature is used)
             * @field {Boolean} draggable
             * @default true
             */{name:'draggable',type:'boolean',persist:false,defaultValue:true},// true or false
/**
             * Specify false to prevent the event from being resized (if EventResize feature is used). You can also
             * specify 'start' or 'end' to only allow resizing in one direction
             * @field {boolean|String} resizable
             * @default true
             */{name:'resizable',persist:false,defaultValue:true},// true, false, 'start' or 'end'
/**
             * Controls this events appearance, see {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle} for available
             * options.
             * @field {String} eventStyle
             */'eventStyle',/**
             * Controls the primary color of the event, defaults to using current themes default event color. What the color
             * affects is decided by {@link #field-eventStyle}
             * @field {String} eventColor
             */'eventColor',/**
             * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
             * @field {Number} milestoneWidth
             */'milestoneWidth'];}// EventModel#assignments is created by a relation defined in AssignmentModel
/**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     * @member {Scheduler.model.AssignmentModel[]} assignments
     */ /**
     * Returns the assigned resource. Only valid when not using an AssignmentStore (single assignment)
     * @member {Scheduler.model.ResourceModel} resource
     */},{key:"relationConfig",get:function get(){return[{relationName:'resource',fieldName:'resourceId',store:'resourceStore',collectionName:'events'}];}}]);return EventModel;}(TimeSpan);exports.EventModel=EventModel;EventModel.exposeProperties();EventModel._$name='EventModel';/**
 * @module Scheduler/data/EventStore
 */ /**
 * This is a class holding all the {@link Scheduler.model.EventModel events} to be rendered into a {@link Scheduler.view.Scheduler Scheduler}.
 * This class only accepts a model class inheriting from {@link Scheduler.model.EventModel}.
 *
 * @mixes Scheduler/data/mixin/EventStoreMixin
 * @extends Common/data/AjaxStore
 */var EventStore=/*#__PURE__*/function(_EventStoreMixin){_inherits2(EventStore,_EventStoreMixin);function EventStore(){_classCallCheck2(this,EventStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventStore).apply(this,arguments));}_createClass2(EventStore,[{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(EventStore.prototype),"construct",this).call(this,config,true);if(this.modelClass!==EventModel&&!(this.modelClass.prototype instanceof EventModel)){throw new Error('The model for the EventStore must subclass EventModel');}}/**
     * Appends a new record to the store
     * @param {Scheduler.model.EventModel} record The record to append to the store
     */},{key:"append",value:function append(record){this.add(record);}}],[{key:"defaultConfig",get:function get(){return{/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:100,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:200,modelClass:EventModel,storeId:'events'};}}]);return EventStore;}(EventStoreMixin(AjaxStore));exports.EventStore=EventStore;EventStore._$name='EventStore';/**
 * @module Scheduler/model/DependencyBaseModel
 */var canonicalDependencyTypes=['SS','SF','FS','FF'];/**
 * Base class used for both Ext Scheduler and Ext Gantt. Not intended to be used directly
 *
 * @extends Common/data/Model
 */var DependencyBaseModel=/*#__PURE__*/function(_Model7){_inherits2(DependencyBaseModel,_Model7);function DependencyBaseModel(){_classCallCheck2(this,DependencyBaseModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyBaseModel).apply(this,arguments));}_createClass2(DependencyBaseModel,[{key:"construct",//endregion
//region Init
value:function construct(data){_get2(_getPrototypeOf2(DependencyBaseModel.prototype),"construct",this).apply(this,arguments);if(data){// Allow passing in event instances too
if(data.from&&data.from instanceof TimeSpan){this.setSourceEvent(data.from);delete data.from;}if(data.to&&data.to instanceof TimeSpan){this.setTargetEvent(data.to);delete data.to;}}}//endregion
},{key:"getHardType",/**
     * Returns dependency hard type, see {@link #property-hardType}.
     *
     * @return {Number}
     */value:function getHardType(){return this.get('type');}/**
     * Sets dependency {@link #field-type} and resets {@link #field-fromSide} and {@link #field-toSide} to null.
     *
     * @param {Number} type
     */},{key:"setHardType",value:function setHardType(type){var result;if(type!==this.getHardType()){result=this.set({type:type,fromSide:null,toSide:null});}return result;}},{key:"setLag",/**
     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is
     * readonly after creation
     * @param {Number|String|Object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'
     * @param {String} [lagUnit] Unit for numeric lag value, see {@link #field-lagUnit} for valid values
     */value:function setLag(lag,lagUnit){// Either they're only setting the magnitude
// or, if it's a string, parse the full duration.
if(arguments.length===1){if(typeof lag==='number'){this.lag=lag;}else{lag=DateHelper.parseDuration(lag);this.set({lag:lag.magnitude,lagUnit:lag.unit});}return;}// Must be a number
lag=parseFloat(lag);this.set({lag:lag,lagUnit:lagUnit});}},{key:"getLag",value:function getLag(){if(this.lag){return"".concat(this.lag<0?'-':'+').concat(Math.abs(this.lag)).concat(DateHelper.getShortNameOfUnit(this.lagUnit));}return'';}/**
     * Property which encapsulates the lag's magnitude and units.
     * An object which contains two properties:
     * - magnitude : [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The magnitude of the duration.
     * - unit : [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) The unit in which the duration is measured, eg `'d'` for days.
     * @property {Object}
     */},{key:"getSourceEvent",/**
     * Returns the source event of the dependency
     *
     * @return {Scheduler.model.EventModel} The source event of this dependency
     */value:function getSourceEvent(){var eventStore=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.eventStore;return eventStore.getById(this.from);}/**
     * Gets/sets the dependency type
     *
     * @property {Number}
     */ /**
     * Gets/sets the name of field holding the CSS class for each rendered dependency element
     *
     * @property {String} cls
     */ /**
     * Returns the target event of the dependency
     *
     * @return {Scheduler.model.EventModel} The target event of this dependency
     */},{key:"getTargetEvent",value:function getTargetEvent(){var eventStore=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.eventStore;return eventStore.getById(this.to);}},{key:"getDateRange",value:function getDateRange(){var doNotNormalize=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var sourceTask=this.sourceEvent,targetTask=this.targetEvent;if(sourceTask&&targetTask&&sourceTask.isScheduled&&targetTask.isScheduled){var Type=DependencyBaseModel.Type,sourceDate,targetDate;switch(this.type){case Type.StartToStart:sourceDate=sourceTask.startDate;targetDate=targetTask.startDate;break;case Type.StartToEnd:sourceDate=sourceTask.startDate;targetDate=targetTask.endDate;break;case Type.EndToEnd:sourceDate=sourceTask.endDate;targetDate=targetTask.endDate;break;case Type.EndToStart:sourceDate=sourceTask.endDate;targetDate=targetTask.startDate;break;}return{start:doNotNormalize?sourceDate:DateHelper.min(sourceDate,targetDate),end:doNotNormalize?targetDate:DateHelper.max(sourceDate,targetDate)};}return null;}/**
     * Applies given CSS class to dependency, the value doesn't persist
     *
     * @param {String} cls
     */},{key:"highlight",value:function highlight(cls){var me=this,h=me.highlighted?me.highlighted.split(' '):[];if(!h.includes(cls))me.highlighted=h.concat(cls).join(' ');}/**
     * Removes given CSS class from dependency if applied, the value doesn't persist
     *
     * @param {String} cls
     */},{key:"unhighlight",value:function unhighlight(cls){var me=this,highlighted=me.highlighted;if(highlighted){var h=highlighted.split(' '),idx=h.findIndex(function(i){return i===cls;});if(idx>=0){h.splice(idx,1);me.highlighted=h.join(' ');}}}/**
     * Checks if the given CSS class is applied to dependency.
     *
     * @param {String} cls
     * @return {Boolean}
     */},{key:"isHighlightedWith",value:function isHighlightedWith(cls){var me=this,highlighted=me.highlighted;return highlighted&&highlighted.split(' ').includes(cls);}},{key:"getConnectorString",value:function getConnectorString(raw){var rawValue=canonicalDependencyTypes[this.type];if(raw){return rawValue;}// FS => empty string; it's the default
if(this.type===DependencyBaseModel.Type.EndToStart){return'';}var locale=LocaleManagerSingelton.locale;// See if there is a local version of SS, SF or FF
if(locale){var localized=locale.Scheduler&&locale.Scheduler[rawValue];if(localized){return localized;}}return rawValue;}},{key:"toString",value:function toString(){return"".concat(this.from).concat(this.getConnectorString()).concat(this.getLag());}/**
     * Returns `true` if the dependency is valid. Has valid type and both source and target ids set and not links to itself.
     *
     * @return {Boolean}
     * @typings ignore
     */},{key:"isValid",value:function isValid(taskStore){var from=this.from,to=this.to,type=this.type;return typeof type==='number'&&from&&from!==''&&to!=null&&to!==''&&from!==to;}},{key:"eventStore",get:function get(){return this.stores[0].eventStore;}/**
     * Alias to dependency type, but when set resets {@link #field-fromSide} {@link #field-toSide} to null as well.
     *
     * @property {Number}
     */},{key:"hardType",get:function get(){return this.getHardType();},set:function set(type){this.setHardType(type);}},{key:"lag",get:function get(){return this.get('lag');},set:function set(lag){if(typeof lag==='number'){this.set({lag:lag});}else{this.setLag(lag);}}},{key:"fullLag",get:function get(){return{unit:this.lagUnit,magnitude:this.lag};},set:function set(lag){if(typeof lag==='string'){this.setLag(lag);}else{this.setLag(lag.magnitude,lag.unit);}}/**
     * Gets/sets the source event of the dependency
     *
     * @property {Scheduler.model.EventModel}
     */},{key:"sourceEvent",set:function set(event){this.from=event.id;}/**
     * Gets/sets the target event of the dependency
     *
     * @property {Scheduler.model.EventModel}
     */},{key:"targetEvent",set:function set(event){this.to=event.id;}/**
     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')
     *
     * @property {Boolean}
     * @readonly
     */},{key:"isPersistable",get:function get(){var me=this,source=me.getSourceEvent(),target=me.getTargetEvent();return source&&!source.hasGeneratedId&&target&&!target.hasGeneratedId;}}],[{key:"Type",//region Fields
/**
     * An enumerable object, containing names for the dependency types integer constants.
     * - 0 StartToStart
     * - 1 StartToEnd
     * - 2 EndToStart
     * - 3 EndToEnd
     * @property {Object}
     * @readonly
     */get:function get(){return{StartToStart:0,StartToEnd:1,EndToStart:2,EndToEnd:3};}},{key:"fields",get:function get(){return[// 3 mandatory fields
/**
             * From event, id of source event
             * @field {String|number} from
             */{name:'from'},/**
             * To event, id of target event
             * @field {String|number} to
             */{name:'to'},/**
             * Dependency type, see static property Type
             * @field {Number} type
             * @default 2
             */{name:'type',type:'int',defaultValue:2},/**
             * CSS class to apply to lines drawn for the dependency
             * @field {String} cls
             */{name:'cls',defaultValue:''},/**
             * Bidirectional, drawn with arrows in both directions
             * @field {Boolean} bidirectional
             */{name:'bidirectional',type:'boolean'},/**
             * Start side on source (top, left, bottom, right)
             * @field {String} fromSide
             */{name:'fromSide',type:'string'},/**
             * End side on target (top, left, bottom, right)
             * @field {String} toSide
             */{name:'toSide',type:'string'},/**
             * The magnitude of this dependency's lag (the number of units).
             * @field {Number} lag
             */{name:'lag',type:'number',allowNull:true,defaultValue:0},/**
             * The units of this dependency's lag, defaults to "d" (days). Valid values are:
             *
             * - "ms" (milliseconds)
             * - "s" (seconds)
             * - "m" (minutes)
             * - "h" (hours)
             * - "d" (days)
             * - "w" (weeks)
             * - "M" (months)
             * - "y" (years)
             *
             * This field is readonly after creation, to change lagUnit use #setlag().
             * @field {String} lagUnit
             */{name:'lagUnit',type:'string',defaultValue:'d'//{ name : 'highlighted', type : 'string', persist : false }
}];}},{key:"relationConfig",get:function get(){return[{relationName:'sourceEvent',fieldName:'from',store:'eventStore',collectionName:'successors'},{relationName:'targetEvent',fieldName:'to',store:'eventStore',collectionName:'predecessors'}];}}]);return DependencyBaseModel;}(Model);exports.DependencyBaseModel=DependencyBaseModel;DependencyBaseModel.exposeProperties();DependencyBaseModel._$name='DependencyBaseModel';/**
 * @module Scheduler/model/DependencyModel
 */ /**
 * This class represents a single Dependency between two events. It is a subclass of the {@link Scheduler.model.DependencyBaseModel}
 * class, which in its turn subclasses {@link Common.data.Model}.
 * Please refer to documentation of those classes to become familiar with the base interface of this class.
 *
 * A Dependency has the following fields:
 *
 * - `id` - The id of the dependency itself
 * - `from` - The id of the event at which the dependency starts
 * - `to` - The id of the event at which the dependency ends
 * - `cls` - A CSS class that will be applied to each rendered dependency DOM element
 * - `type` - An integer constant representing the type of the dependency:
 *   - 0 - start-to-start dependency
 *   - 1 - start-to-end dependency
 *   - 2 - end-to-start dependency
 *   - 3 - end-to-end dependency
 * - `bidirectional` - A boolean indicating if a dependency goes both directions (default false)
 *
 * Subclassing the Dependency class
 * --------------------
 *
 * The name of any fields data source can be customized in the subclass, see the example below. Please also refer to {@link Common.data.Model}
 * for details.
 * @example
 * class MyDependency extends DependencyModel {
 *       static get fields() {
 *           return [
 *               { name: 'to', dataSource: 'targetId' },
 *               { name: 'from', dataSource: 'sourceId' }
 *           ]);
 *       }
 *
 *       ...
 *  }
 *
 * @extends Scheduler/model/DependencyBaseModel
 */var DependencyModel=/*#__PURE__*/function(_DependencyBaseModel){_inherits2(DependencyModel,_DependencyBaseModel);function DependencyModel(){_classCallCheck2(this,DependencyModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyModel).apply(this,arguments));}_createClass2(DependencyModel,[{key:"getTypeFromSides",// Determines the type of dependency based on fromSide and toSide
// TODO: Check with vertical orientation
value:function getTypeFromSides(fromSide,toSide,rtl){var types=DependencyBaseModel.Type,startSide=rtl?'right':'left',endSide=rtl?'left':'right';if(fromSide===startSide){return toSide===startSide?types.StartToStart:types.StartToEnd;}return toSide===endSide?types.EndToEnd:types.EndToStart;}}]);return DependencyModel;}(DependencyBaseModel);exports.SchedulerDependencyModel=DependencyModel;DependencyModel.exposeProperties();DependencyModel._$name='DependencyModel';// @tag dependencies
/**
 * @module Scheduler/data/DependencyStore
 */ /**
 * A class representing a collection of dependencies between events in the {@link Scheduler.data.EventStore}.
 * Contains a collection of {@link Scheduler.model.DependencyModel} records.
 *
 * @extends Common/data/AjaxStore
 */var DependencyStore=/*#__PURE__*/function(_AjaxStore3){_inherits2(DependencyStore,_AjaxStore3);function DependencyStore(){_classCallCheck2(this,DependencyStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyStore).apply(this,arguments));}_createClass2(DependencyStore,[{key:"doDestroy",//region Init & destroy
value:function doDestroy(){var me=this;me.eventStoreDetacher&&me.eventStoreDetacher();_get2(_getPrototypeOf2(DependencyStore.prototype),"doDestroy",this).call(this);}//endregion
//region Stores
/**
     * Get/set the associated event store instance.
     *
     * @property {Scheduler.data.EventStore}
     */},{key:"attachToEventStore",value:function attachToEventStore(eventStore){var me=this;me.eventStoreDetacher&&me.eventStoreDetacher();me.eventStoreDetacher=eventStore.on({'remove':me.onEventRemove,thisObj:me,detachable:true});}//endregion
},{key:"onEventRemove",value:function onEventRemove(_ref203){var _this63=this;var records=_ref203.records,_ref203$isMove=_ref203.isMove,isMove=_ref203$isMove===void 0?false:_ref203$isMove,_ref203$isCollapse=_ref203.isCollapse,isCollapse=_ref203$isCollapse===void 0?false:_ref203$isCollapse;if(!isMove&&!isCollapse){records.forEach(function(record){// traversing in a flat structure will only call fn on self, no need to handle tree case differently
record.traverse(function(eventRecord){return _this63.removeEventDependencies(eventRecord,false);});});}}// TODO: document
},{key:"reduceEventDependencies",value:function reduceEventDependencies(event,reduceFn,result){var _this64=this;var flat=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var depsGetterFn=arguments.length>4?arguments[4]:undefined;// const me       = this,
//     relation = me.relationCache;
depsGetterFn=depsGetterFn||function(event){return _this64.getEventDependencies(event);// const eventId      = DependencyModel.asId(event),
//     sourceEvents = (relation.sourceEvent && relation.sourceEvent[eventId]) || [],
//     targetEvents = (relation.targetEvent && relation.targetEvent[eventId]) || [];
//
// return sourceEvents.concat(targetEvents);
// return me.eventDependencyCache.get(event, () =>
//     // Full scan, but cache makes everything possible to avoid it
//     me.records.filter(dependency =>
//         dependency.to == eventId || dependency.from == eventId
//     )
// );
};event=Array.isArray(event)?event:[event];event.reduce(function(result,event){if(event.children&&!flat){event.traverse(function(evt){result=depsGetterFn(evt).reduce(reduceFn,result);});}else{result=depsGetterFn(event).reduce(reduceFn,result);}},result);return result;}// TODO: document
},{key:"reduceEventPredecessors",value:function reduceEventPredecessors(event,reduceFn,result,flat){var me=this;return me.reduceEventDependencies(event,reduceFn,result,flat,function(evt){// const eventId = Model.asId(evt);
// return me.eventDependencyCache.getPredecessors(evt, () =>
//     // Full scan, but cache makes everything possible to avoid it
//     me.records.filter(dependency =>
//         dependency.to == eventId
//     )
// );
});}// TODO: document
},{key:"reduceEventSuccessors",value:function reduceEventSuccessors(event,reduceFn,result,flat){var me=this;return me.reduceEventDependencies(event,reduceFn,result,flat,function(evt){// const eventId = Model.asId(evt);
// return me.eventDependencyCache.getSuccessors(evt, () =>
//     // Full scan, but cache makes everything possible to avoid it
//     me.records.filter(dependency =>
//         dependency.getSourceId() == eventId
//     )
// );
});}// TODO: document
},{key:"mapEventDependencies",value:function mapEventDependencies(event,fn,filterFn,flat,depsGetterFn){return this.reduceEventDependencies(event,function(result,dependency){filterFn(dependency)&&result.push(dependency);return result;},[],flat,depsGetterFn);}// TODO: document
},{key:"mapEventPredecessors",value:function mapEventPredecessors(event,fn,filterFn,flat){return this.reduceEventPredecessors(event,function(result,dependency){filterFn(dependency)&&result.push(dependency);return result;},[],flat);}// TODO: document
},{key:"mapEventSuccessors",value:function mapEventSuccessors(event,fn,filterFn,flat){return this.reduceEventSuccessors(event,function(result,dependency){filterFn(dependency)&&result.push(dependency);return result;},[],flat);}/**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     *
     * @param {Scheduler.model.EventModel} event
     * @param {Boolean} [flat]
     * @return {Scheduler.model.DependencyModel[]}
     */},{key:"getEventDependencies",value:function getEventDependencies(event){var flat=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return[].concat(event.predecessors||[],event.successors||[]);}/**
     * Returns all incoming dependencies of the given event
     *
     * @param {Scheduler.model.EventModel} event
     * @param {Boolean} [flat]
     * @return {Scheduler.model.DependencyModel[]}
     */},{key:"getEventPredecessors",value:function getEventPredecessors(event){var flat=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;//return this.mapEventPredecessors(event, o => o, o => true, flat);
return event.predecessors;}/**
     * Returns all outcoming dependencies of a event
     *
     * @param {Scheduler.model.EventModel} event
     * @param {Boolean} [flat]
     * @return {Scheduler.model.DependencyModel[]}
     */},{key:"getEventSuccessors",value:function getEventSuccessors(event){var flat=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;//return this.mapEventSuccessors(event, o => o, o => true, flat);
return event.successors;}},{key:"getUnique",value:function getUnique(array){return _toConsumableArray(new Set(array));}// TODO: document
},{key:"removeEventDependencies",value:function removeEventDependencies(event,flat){var me=this,dependencies=me.getEventDependencies(event,flat);dependencies.length&&me.remove(me.getUnique(dependencies));}// TODO: document
},{key:"removeEventPredecessors",value:function removeEventPredecessors(event,flat){var me=this,dependencies=me.getEventPredecessors(event,flat);dependencies.length&&me.remove(me.getUnique(dependencies));}// TODO: document
},{key:"removeEventSuccessors",value:function removeEventSuccessors(event,flat){var me=this,dependencies=me.getEventSuccessors(event,flat);dependencies.length&&me.remove(me.getUnique(dependencies));}},{key:"getBySourceTargetId",value:function getBySourceTargetId(key){//TODO: in original code this uses a keymap
return this.records.find(function(r){return key=DependencyStore.makeDependencySourceTargetCompositeKey(r.from,r.to);});}/**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     *
     * @param {Scheduler.model.EventModel|String} sourceEvent 1st event
     * @param {Scheduler.model.EventModel|String} targetEvent 2nd event
     * @return {Scheduler.model.DependencyModel}
     */},{key:"getDependencyForSourceAndTargetEvents",value:function getDependencyForSourceAndTargetEvents(sourceEvent,targetEvent){// NOTE: In case this will not work switch to cache get and linear search
var me=this;sourceEvent=Model.asId(sourceEvent);targetEvent=Model.asId(targetEvent);return me.getBySourceTargetId(DependencyStore.makeDependencySourceTargetCompositeKey(sourceEvent,targetEvent));}/**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     *
     * @param {Scheduler.model.EventModel|String} sourceEvent
     * @param {Scheduler.model.EventModel|String} targetEvent
     * @return {Scheduler.model.DependencyModel}
     */},{key:"getEventsLinkingDependency",value:function getEventsLinkingDependency(sourceEvent,targetEvent){var me=this;return me.getDependencyForSourceAndTargetEvents(sourceEvent,targetEvent)||me.getDependencyForSourceAndTargetEvents(targetEvent,sourceEvent);}/**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency (or a new dependency being created) between two tasks is valid.
     *
     * @param {Scheduler.model.DependencyModel|Number|String} dependencyOrFromId The dependency model or from event id
     * @param {Number|String} [toId] To event id if the first parameter is not a dependency model instance
     * @param {Number} [type] Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static}  if the first parameter is not a dependency model instance.
     * @return {Boolean}
     */},{key:"isValidDependency",value:function isValidDependency(dependencyOrFromId,toId,type){if(arguments.length===1){type=dependencyOrFromId.type;toId=dependencyOrFromId.to;dependencyOrFromId=dependencyOrFromId.from;}return dependencyOrFromId!=null&&toId!=null&&dependencyOrFromId!==toId;}/**
     * Returns all dependencies highlighted with the given CSS class
     *
     * @param {String} cls
     * @return {Scheduler.model.DependencyBaseModel[]}
     */},{key:"getHighlightedDependencies",value:function getHighlightedDependencies(cls){return this.records.reduce(function(result,dep){if(dep.isHighlightedWith(cls))result.push(dep);return result;},[]);}},{key:"getTimeSpanDependencies",//region Product neutral
value:function getTimeSpanDependencies(record){return this.getEventDependencies(record);}//endregion
},{key:"eventStore",get:function get(){return this._eventStore;},set:function set(eventStore){var me=this,oldStore=me._eventStore;me._eventStore=eventStore;if(eventStore){me.attachToEventStore(eventStore);// If store is assigned after configuration we need to init relations
if(!me.isConfiguring){me.initRelations(true);}}if((oldStore||eventStore)&&oldStore!==eventStore){/**
             * Fires when a new event store is set via the {@link #property-eventStore} property.
             * @event eventstorechange
             * @param {Scheduler.data.DependencyStore} this
             * @param {Scheduler.data.EventStore} newEventStore
             * @param {Scheduler.data.EventStore} oldEventStore
             */me.trigger('eventStoreChange',{newEventStore:eventStore,oldEventStore:oldStore});}}}],[{key:"makeDependencySourceTargetCompositeKey",value:function makeDependencySourceTargetCompositeKey(from,to){return"source(".concat(from,")-target(").concat(to,")");}},{key:"defaultConfig",get:function get(){return{/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:400,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:400,modelClass:DependencyModel,storeId:'dependencies'};}}]);return DependencyStore;}(AjaxStore);exports.SchedulerDependencyStore=DependencyStore;DependencyStore._$name='DependencyStore';/**
 * @module Scheduler/data/CrudManager
 */ /**
 * The Crud Manager (or "CM") is a class implementing centralized loading and saving of data in multiple stores.
 * Loading the stores and saving all changes is done using one ajax request. This class uses AJAX as a transport
 * mechanism and JSON as the data encoding format.
 *
 * ## Scheduler stores
 *
 * The class supports Scheduler specific stores (namely: resource, event and assignment stores).
 * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},
 * {@link #config-assignmentStore}) to register them. The class can also grab them from the task store (this behavior
 * can be changed using {@link #config-addRelatedStores} config).
 *
 * ```javascript
 * let crudManager = new CrudManager({
 *   autoLoad        : true,
 *   resourceStore   : resourceStore,
 *   eventStore      : eventStore,
 *   assignmentStore : assignmentStore,
 *   transport       : {
 *     load    : {
 *       url     : 'php/read.php'
 *     },
 *     sync    : {
 *       url     : 'php/save.php'
 *     }
 *   }
 * });
 * ```
 *
 * ## AJAX request configuration
 *
 * To configure AJAX request parameters please take a look at the
 * {@link Scheduler.crud.transport.AjaxTransport AjaxTransport} docs.
 *
 * ```javascript
 * var crudManager = new CrudManager({
 *     autoLoad        : true,
 *     resourceStore   : resourceStore,
 *     eventStore      : eventStore,
 *     assignmentStore : assignmentStore,
 *     transport       : {
 *         load    : {
 *             url         : 'php/read.php',
 *             // use GET request
 *             method      : 'GET',
 *             // pass request JSON in "rq" parameter
 *             paramName   : 'rq',
 *             // extra HTTP request parameters
 *             params      : {
 *                 foo     : 'bar'
 *             },
 *             requestConfig : {
 *                 fetchOptions : {
 *                     credentials: 'include'
 *                 }
 *             }
 *         },
 *         sync    : {
 *             url     : 'php/save.php'
 *         }
 *     }
 * });
 * ```
 *
 * ## Load order
 *
 * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.
 * If you provide any extra stores (using {@link Scheduler.crud.AbstractCrudManager#config-stores} config) they will be
 * added to the start of collection before the Scheduler specific stores.
 * If you a different load order, you should use {@link Scheduler.crud.AbstractCrudManager#function-addStore} method to
 * register your store:
 *
 * ```javascript
 * var crudManager = new CrudManager({
 *   resourceStore   : resourceStore,
 *   eventStore      : eventStore,
 *   assignmentStore : assignmentStore,
 *   // extra user defined stores will get to the start of collection
 *   // so they will be loaded first
 *   stores          : [ store1, store2 ],
 *   transport       : {
 *     load    : {
 *       url     : 'php/read.php'
 *     },
 *     sync    : {
 *       url     : 'php/save.php'
 *     }
 *   }
 * });
 *
 * // append store3 to the end so it will be loaded last
 * crudManager.addStore(store3);
 *
 * // now when we registered all the stores let's load them
 * crudManager.load();
 * ```
 *
 * ## Features
 * The Crud Manager can automatically add Scheduler feature stores to the tracked collection.
 * For example, it tracks TimeRanges {@link Scheduler.feature.TimeRanges#config-store}.
 * You can receive a tracked store by its id:
 * ```javascript
 * let timeRangesStore = crudManager.getStore('timeRanges');
 * ```
 *
 * @mixes Scheduler/crud/encoder/JsonEncoder
 * @mixes Scheduler/crud/transport/AjaxTransport
 * @extends Scheduler/crud/AbstractCrudManager
 */var CrudManager=/*#__PURE__*/function(_JsonEncoder){_inherits2(CrudManager,_JsonEncoder);function CrudManager(){_classCallCheck2(this,CrudManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(CrudManager).apply(this,arguments));}_createClass2(CrudManager,[{key:"construct",//endregion
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(config.scheduler){this.scheduler=config.scheduler;// The effects of this class's initialization are so wide ranging that they may need to
// access the Scheduler's CrudManager, so ensure it's available immediately.
this.scheduler._crudManager=this;}_get2(_getPrototypeOf2(CrudManager.prototype),"construct",this).call(this,config);}},{key:"afterConstruct",value:function afterConstruct(){var me=this,scheduler=me.scheduler;if(scheduler){// Inject the scheduler stores into the Scheduler.
// The resourceStore becomes the primary store.
if(scheduler.isVertical||scheduler.isHorizontal&&!scheduler.store){scheduler.resourceStore=me.resourceStore;scheduler.eventStore=me.eventStore;}// Features self initialize if not already initialized.
// This must be done after the _crudManager is assigned because it may access this.crudManager
// to get its eventStore.
var _scheduler$features=scheduler.features,dependencies=_scheduler$features.dependencies,timeRanges=_scheduler$features.timeRanges,resourceTimeRanges=_scheduler$features.resourceTimeRanges;// Special handling of dependency store
if(dependencies){me.dependencyStore=dependencies.store;}if(timeRanges){me.addCrudStore(timeRanges.store);me._timeRangesStore=timeRanges.store;}if(resourceTimeRanges){me.addCrudStore(resourceTimeRanges.store);me._timeRangesStore=resourceTimeRanges.store;}}_get2(_getPrototypeOf2(CrudManager.prototype),"afterConstruct",this).call(this);}//region Stores
/**
     * Returns store associated with timeRanges feature, if feature is enabled.
     * @property {Common.data.Store}
     * @readonly
     */},{key:"addFeaturedStore",// Adds configured scheduler stores to the store collection ensuring correct order
// unless they're already registered.
value:function addFeaturedStore(store){this.addPrioritizedStore(store);}},{key:"setFeaturedStore",value:function setFeaturedStore(property,store,storeClass){var me=this,oldStore=me[property];store=Store.getStore(store,store&&store.storeClass||storeClass);if(oldStore){me.removeStore(oldStore);}me[property]=store&&{store:store}||null;me.addFeaturedStore(me[property]);return me[property];}//endregion
},{key:"timeRangesStore",get:function get(){return this._timeRangesStore;}},{key:"resourceStore",/**
     * Get/set the resource store bound to the CRUD manager.
     * @property {Scheduler.data.ResourceStore}
     */get:function get(){return this._resourceStore&&this._resourceStore.store;},set:function set(store){var me=this;me.setFeaturedStore('_resourceStore',store,me.resourceStoreClass);me.eventStore.resourceStore=me._resourceStore&&me._resourceStore.store;}/**
     * Get/set the event store bound to the CRUD manager.
     * @property {Scheduler.data.EventStore}
     */},{key:"eventStore",get:function get(){return this._eventStore&&this._eventStore.store;},set:function set(store){var me=this;me.setFeaturedStore('_eventStore',store,me.eventStoreClass);store=me._eventStore&&me._eventStore.store;// If we're configuring, retrieve stores registered on the provided taskStore
if(me.isConfiguring&&store&&me.addRelatedStores!==false){var extracted=CrudManager.getEventStoreInfo(store,me.initialConfig),assignmentStore=extracted.assignmentStore,resourceStore=extracted.resourceStore,dependencyStore=extracted.dependencyStore;if(assignmentStore){me.assignmentStore=assignmentStore;}if(resourceStore){me.resourceStore=resourceStore;}if(dependencyStore){me.dependencyStore=dependencyStore;}}}/**
     * Get/set the assignment store bound to the CRUD manager.
     * @property {Scheduler.data.AssignmentStore}
     */},{key:"assignmentStore",get:function get(){return this._assignmentStore&&this._assignmentStore.store;},set:function set(store){this.setFeaturedStore('_assignmentStore',store,this.assignmentStoreClass);}/**
     * Get/set the dependency store bound to the CRUD manager.
     * @property {Scheduler.data.DependencyStore}
     */},{key:"dependencyStore",get:function get(){return this._dependencyStore&&this._dependencyStore.store;},set:function set(store){this.setFeaturedStore('_dependencyStore',store,this.dependencyStoreClass);}}],[{key:"getEventStoreInfo",value:function getEventStoreInfo(eventStore,config){if(!(eventStore instanceof EventStore)){if(typeof eventStore==='string'){eventStore=Store.getStore(eventStore);}else{eventStore=eventStore.store;}}var result={},assignmentStore=config.assignmentStore,resourceStore=config.resourceStore,dependencyStore=config.dependencyStore;!assignmentStore&&(result.assignmentStore=eventStore.assignmentStore);!resourceStore&&(result.resourceStore=eventStore.resourceStore);!dependencyStore&&(result.dependencyStore=eventStore.dependencyStore);return result;}},{key:"defaultConfig",//region Config
get:function get(){return{resourceStoreClass:ResourceStore,eventStoreClass:EventStore,assignmentStoreClass:AssignmentStore,dependencyStoreClass:DependencyStore,/**
             * A store with resources (or its descriptor).
             * @config {Scheduler.data.ResourceStore|Object}
             */resourceStore:{},/**
             * A store with events (or its descriptor).
             *
             * ```
             * crudManager : {
             *      eventStore {
             *          storeClass : MyEventStore
             *      }
             * }
             * ```
             * @config {Scheduler.data.EventStore|Object}
             */eventStore:{},/**
             * A store with assignments (or its descriptor).
             * @config {Scheduler.data.AssignmentStore|Object}
             */assignmentStore:null,/**
             * A store with dependencies (or its descriptor).
             * @config {Scheduler.data.DependencyStore|Object}
             */dependencyStore:null,/**
             * When set to `true` this class will try to get the {@link #config-resourceStore} and {@link #config-assignmentStore} stores from
             * the specified {@link #config-eventStore} instance.
             * @config {Boolean}
             */addRelatedStores:true};}}]);return CrudManager;}(JsonEncoder(AjaxTransport(AbstractCrudManager)));exports.CrudManager=CrudManager;CrudManager._$name='CrudManager';var clonedConfigs=['rowHeight','tickWidth','tickHeight','displayDateFormat','shiftUnit','shiftIncrement','defaultSpan','timeResolution','columnLinesFor','headerConfig'];/**
 * @module Scheduler/preset/ViewPreset
 */ /**
 * Not used directly, but the properties below are rather provided inline as seen in the source of {@link Scheduler.preset.PresetManager}. This class is just provided for documentation purposes.
 *
 * A sample preset looks like:
 * ```javascript
 * hourAndDay : {
 *   tickWidth           : 60,       // Time column width in horizontal mode
 *   tickHeight          : 30,       // Time column height in vertical mode
 *
 *   displayDateFormat   : 'HH:mm',  // Controls how dates will be displayed in tooltips etc
 *
 *   shiftIncrement      : 1,        // Controls how much time to skip when calling shiftNext and shiftPrevious.
 *   shiftUnit           : 'day',    // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.
 *   defaultSpan         : 12,       // By default, if no end date is supplied to a view it will show 12 hours
 *
 *   timeResolution      : {         // Dates will be snapped to this resolution
 *     unit        : 'minute',       // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.
 *     increment   : 15
 *   },
 *
 *   headerConfig        : {         // This defines your header, you must include a 'middle' object, and top/bottom are optional.
 *     middle : {                    // For each row you can define 'unit', 'increment', 'dateFormat', 'renderer', 'align', and 'thisObj'
 *       unit        : 'hour',
 *       dateFormat  : 'HH:mm'
 *     },
 *     top    : {
 *       unit        : 'day',
 *       dateFormat  : 'ddd DD/MM'
 *     }
 *   },
 *
 *   columnLinesFor      : 'middle'  // Defines header level column lines will be drawn for
 * }
 * ```
 * See the {@link Scheduler.preset.PresetManager} for the list of available presets.
 *
 * ## Duration units
 *
 * There are a number of configs for duration units ({@link #config-shiftUnit} or `unit` in {@link #config-timeResolution}, {@link #config-headerConfig} configs).
 *
 * When registering a preset using {@link Scheduler.preset.PresetManager#function-registerPreset-static} method you can provide their values using short constants names ('day', 'week' etc.):
 * ```javascript
 * PresetManager.registerPreset('hour', {
 *   displayDateFormat : 'HH:mm',
 *   shiftIncrement    : 1,
 *   shiftUnit         : 'day',
 *   tickWidth         : 150,
 *   timeResolution    : {
 *     unit      : 'minute',
 *     increment : 5
 *   },
 *   headerConfig      : {
 *     middle : {
 *       unit       : 'hour',
 *       dateFormat : 'HH:mm'
 *     },
 *     top    : {
 *       unit       : 'day',
 *       dateFormat : 'ddd DD/MM'
 *     }
 *   }
 * });
 * ```
 */var ViewPreset=/*#__PURE__*/function(_Base7){_inherits2(ViewPreset,_Base7);function ViewPreset(){_classCallCheck2(this,ViewPreset);return _possibleConstructorReturn2(this,_getPrototypeOf2(ViewPreset).apply(this,arguments));}_createClass2(ViewPreset,[{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(ViewPreset.prototype),"construct",this).call(this,config);this.normalizeUnits();}},{key:"normalizeUnits",value:function normalizeUnits(){var me=this,timeResolution=me.timeResolution,headerConfig=me.headerConfig;// Make sure date "unit" constant specified in the preset are resolved
Object.keys(headerConfig).forEach(function(o){headerConfig[o].unit=DateHelper.normalizeUnit(headerConfig[o].unit);if(headerConfig[o].splitUnit){headerConfig[o].splitUnit=DateHelper.normalizeUnit(headerConfig[o].splitUnit);}});if(timeResolution){timeResolution.unit=DateHelper.normalizeUnit(timeResolution.unit);}if(me.shiftUnit){me.shiftUnit=DateHelper.normalizeUnit(me.shiftUnit);}}},{key:"clone",value:function clone(){var _this65=this;var config={};clonedConfigs.forEach(function(name){config[name]=_this65[name];});return new ViewPreset(config);}},{key:"headers",get:function get(){var me=this;if(!me._headers){var headers=me._headers=[],_me$headerConfig=me.headerConfig,top=_me$headerConfig.top,middle=_me$headerConfig.middle,bottom=_me$headerConfig.bottom;top&&headers.push(top);middle&&headers.push(middle);bottom&&headers.push(bottom);}return me._headers;}},{key:"mainHeader",get:function get(){return this.headerConfig.middle;}},{key:"bottomHeader",get:function get(){return this.headers[this.headers.length-1];}},{key:"isValid",get:function get(){var me=this,ownKeys={};var valid=true;// Make sure all date "unit" constants are valid
Object.keys(me.headerConfig).forEach(function(o){ownKeys[o]=true;valid=valid&&Boolean(DateHelper.normalizeUnit(me.headerConfig[o].unit));});if(!(me.columnLinesFor in ownKeys)){me.columnLinesFor='middle';}if(me.timeResolution){valid=valid&&DateHelper.normalizeUnit(me.timeResolution.unit);}if(me.shiftUnit){valid=valid&&DateHelper.normalizeUnit(me.shiftUnit);}return valid;}}],[{key:"defaultConfig",get:function get(){return{/**
             * The name of the preset by which it is registered in the Manager
             * @config {String}
             */name:null,/**
             * The height of the row in horizontal orientation
             * @config {Number}
             * @default
             */rowHeight:24,/**
             * The width of the time tick column in horizontal orientation
             * @config {Number}
             * @default
             */tickWidth:50,/**
             * The height of the time tick column in vertical orientation
             * @config {Number}
             * @default
             */tickHeight:50,/**
             * Defines how dates will be formatted in tooltips etc
             * @config {String}
             * @default
             */displayDateFormat:'HH:mm',/**
             * The unit to shift when calling shiftNext/shiftPrevious to navigate in the chart.
             * Valid values are "millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year".
             * @config {String}
             * @default
             */shiftUnit:'hour',/**
             * The amount to shift (in shiftUnits)
             * @config {Number}
             * @default
             */shiftIncrement:1,/**
             * The amount of time to show by default in a view (in the unit defined by the middle header)
             * @config {Number}
             * @default
             */defaultSpan:12,/**
             * An object containing a unit identifier and an increment variable. Example:
             * ```javascript
             * timeResolution : {
             *   unit      : "hour",  //Valid values are "millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year".
             *   increment : 1
             * }
             * ```
             * @config {Object}
             */timeResolution:null,/**
             * An object containing one or more {@link Scheduler.preset.ViewPresetHeaderRow} rows defining how your headers shall be composed.
             * Your 'main' unit should be the middle header unit. This object can contain "bottom", "middle" and "top" header definitions. The 'middle' header is mandatory.
             * @config {Object}
             */headerConfig:null,/**
             * Defines the header level that the column lines will be drawn for. See {@link Scheduler.feature.ColumnLines}
             * @config {String}
             * @default
             */columnLinesFor:'middle',// internal properties
_headers:null,/**
             * The viewPreset to use and extend when the preset is passed as a config object.
             * @config {String}
             */ptype:''};}}]);return ViewPreset;}(Base);exports.ViewPreset=ViewPreset;ViewPreset._$name='ViewPreset';// eslint-disable-next-line import/no-named-default
//TODO: break presets out to own files
/**
 * @module Scheduler/preset/PresetManager
 */ /**
 * Provides a registry of the possible view presets that any instance of Scheduler can use.
 *
 * See the {@link Scheduler.preset.ViewPreset} and {@link Scheduler.preset.ViewPresetHeaderRow} classes for a description of the view preset properties.
 *
 * Available presets are:
 *
 * - `secondAndMinute` - creates 2 level header - minute and seconds within it:
 * {@inlineexample scheduler/viewpresets/secondAndMinute.js}
 * - `minuteAndHour` - creates 2 level header - hour and minutes within it:
 * {@inlineexample scheduler/viewpresets/minuteAndHour.js}
 * - `hourAndDay` - creates 2 level header - day and hours within it:
 * {@inlineexample scheduler/viewpresets/hourAndDay.js}
 * - `dayAndWeek` - creates 2 level header - week and days within it:
 * {@inlineexample scheduler/viewpresets/dayAndWeek.js}
 * - `weekAndDay` - just like `dayAndWeek` but with different formatting:
 * {@inlineexample scheduler/viewpresets/weekAndDay.js}
 * - `weekAndDayLetter` - creates 2 level header - with weeks and day letters within it:
 * {@inlineexample scheduler/viewpresets/weekAndDayLetter.js}
 * - `weekAndMonth` - creates 2 level header - month and weeks within it:
 * {@inlineexample scheduler/viewpresets/weekAndMonth.js}
 * - `weekDateAndMonth` - creates 2 level header - month and weeks within it (weeks shown by first day only):
 * {@inlineexample scheduler/viewpresets/weekDateAndMonth.js}
 * - `monthAndYear` - creates 2 level header - year and months within it:
 * {@inlineexample scheduler/viewpresets/monthAndYear.js}
 * - `year` - creates 2 level header - year and quarters within it:
 * {@inlineexample scheduler/viewpresets/year.js}
 * - `manyYears` - creates 2 level header - 5-years and year within it:
 * {@inlineexample scheduler/viewpresets/manyYears.js}
 *
 * You can register your own preset with the {@link #function-registerPreset-static} call or pass a preset configuration in the scheduler panel.
 * @singleton
 */var PresetManager=/*#__PURE__*/function(_Localizable5){_inherits2(PresetManager,_Localizable5);function PresetManager(){_classCallCheck2(this,PresetManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(PresetManager).apply(this,arguments));}_createClass2(PresetManager,null,[{key:"onLocalized",value:function onLocalized(){var me=this;if(me.presets){Object.values(me.presets).forEach(function(preset){var locale=me.L(preset.name);if(locale){locale.displayDateFormat&&(preset.displayDateFormat=locale.displayDateFormat);locale.middleDateFormat&&(preset.headerConfig.middle.dateFormat=locale.middleDateFormat);locale.topDateFormat&&(preset.headerConfig.top.dateFormat=locale.topDateFormat);locale.bottomDateFormat&&(preset.headerConfig.bottom.dateFormat=locale.bottomDateFormat);}});}}/**
     * Registers a new view preset to be used by any scheduler grid or tree on the page.
     * @param {String} name The unique name identifying this preset
     * @param {Object} config The configuration properties of the view preset (see {@link Scheduler.preset.ViewPreset} for more information)
     */},{key:"registerPreset",value:function registerPreset(name,config){config.name=name;var preset=new ViewPreset(config);if(!this.presets)this.presets={};if(preset.isValid){//if (this.containsKey(name)) this.removeAtKey(name);
//this.add(name, preset);
this.presets[name]=preset;}else{throw new Error('Invalid preset, please check your configuration');}}/**
     * Fetches a view preset from the global cache
     * @param {String|Object} preset The preset of the preset or a preset config object
     * @return {Object} The view preset, see {@link Scheduler.preset.ViewPreset} for more information
     */},{key:"getPreset",value:function getPreset(preset){if(typeof preset==='string'){preset=this.presets[preset];}else if(!(preset instanceof ViewPreset)){preset=new ViewPreset(preset);}return preset;}/**
     * Applies preset customizations or fetches a preset view preset using its name.
     * @param {String|Object} presetOrName Name of a predefined preset or a preset config object
     * @returns {Scheduler.preset.ViewPreset} Resulting ViewPreset instance
     */},{key:"normalizePreset",value:function normalizePreset(presetOrName){var me=this,preset=presetOrName;if(!(preset instanceof ViewPreset)){if(typeof preset==='string'){preset=me.getPreset(preset);if(!preset){throw new Error('You must define a valid view preset. See PresetManager for reference');}}else if(_typeof(preset)==='object'){var registeredPreset=preset.name&&me.getPreset(preset.name);if(registeredPreset){// TODO: detangle this
preset=new ViewPreset(Object.assign(registeredPreset.config,preset));}else{var name=preset.name||'preset'+Object.keys(me.presets).length;me.registerPreset(name,preset);preset=me.getPreset(name);}}else{throw new Error('Invalid preset, specify a preset name or config object');}}return preset;}/**
     * Deletes a view preset
     * @param {String} name The name of the preset
     */},{key:"deletePreset",value:function deletePreset(name){delete this.presets[name];//this.removeAtKey(name);
}},{key:"registerDefaults",value:function registerDefaults(){var me=this,presets=me.defaultPresets;for(var presetName in presets){me.registerPreset(presetName,presets[presetName]);}}},{key:"defaultPresets",get:function get(){return{secondAndMinute:{tickWidth:30,// Time column width
tickHeight:40,displayDateFormat:'ll LTS',// Controls how dates will be displayed in tooltips etc
shiftIncrement:10,// Controls how much time to skip when calling shiftNext and shiftPrevious.
shiftUnit:'minute',// Valid values are "millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year".
defaultSpan:24,// By default, if no end date is supplied to a view it will show 24 hours
timeResolution:{// Dates will be snapped to this resolution
unit:'second',// Valid values are "millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year".
increment:5},// This defines your header, you must include a "middle" object, top/bottom are optional.
// For each row you can define "unit", "increment", "dateFormat", "renderer", "align", and "thisObj"
headerConfig:{middle:{unit:'second',increment:10,dateFormat:'ss'},top:{unit:'minute',dateFormat:'llll'}}},minuteAndHour:{tickWidth:100,// Time column width
tickHeight:60,displayDateFormat:'ll LT',// Controls how dates will be displayed in tooltips etc
shiftIncrement:1,// Controls how much time to skip when calling shiftNext and shiftPrevious.
shiftUnit:'hour',// Valid values are "MILLI", "SECOND", "minute", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
defaultSpan:24,// By default, if no end date is supplied to a view it will show 24 hours
timeResolution:{// Dates will be snapped to this resolution
unit:'minute',// Valid values are "MILLI", "SECOND", "minute", "HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR".
increment:30},// This defines your header, you must include a "middle" object, top/bottom are optional.
// For each row you can define "unit", "increment", "dateFormat", "renderer", "align", and "thisObj"
headerConfig:{middle:{unit:'minute',increment:'30',dateFormat:'mm'},top:{unit:'hour',dateFormat:'ddd MM/DD, hA'}}},hourAndDay:{tickWidth:70,tickHeight:40,displayDateFormat:'ll LT',shiftIncrement:1,shiftUnit:'day',defaultSpan:24,timeResolution:{unit:'minute',increment:30},headerConfig:{middle:{unit:'hour',dateFormat:'LT'},top:{unit:'day',dateFormat:'ddd DD/MM'//Mon 01/10
}}},dayAndWeek:{tickWidth:100,tickHeight:80,displayDateFormat:'ll LT',shiftUnit:'day',shiftIncrement:1,defaultSpan:5,timeResolution:{unit:'hour',increment:1},headerConfig:{middle:{unit:'day',dateFormat:'dd DD'},top:{unit:'week',renderer:function renderer(start){return DateHelper.getShortNameOfUnit('week')+'.'+DateHelper.format(start,'WW MMM YYYY');}}}},weekAndDay:{tickWidth:100,tickHeight:80,displayDateFormat:'ll hh:mm A',shiftUnit:'week',shiftIncrement:1,defaultSpan:1,timeResolution:{unit:'day',increment:1},columnLinesFor:'bottom',headerConfig:{bottom:{unit:'day',increment:1,dateFormat:'DD MMM'},middle:{unit:'week',dateFormat:'YYYY MMMM DD'// 2017 January 01
}}},weekAndMonth:{tickWidth:100,tickHeight:105,displayDateFormat:'ll',shiftUnit:'week',shiftIncrement:5,defaultSpan:6,timeResolution:{unit:'day',increment:1},headerConfig:{middle:{unit:'week',dateFormat:'DD MMM'},top:{unit:'month',dateFormat:'MMM YYYY'//Jan 2017
}}},monthAndYear:{tickWidth:110,tickHeight:110,displayDateFormat:'ll',shiftIncrement:3,shiftUnit:'month',defaultSpan:12,timeResolution:{unit:'day',increment:1},headerConfig:{middle:{unit:'month',dateFormat:'MMM YYYY'//Jan 2017
},top:{unit:'year',dateFormat:'YYYY'//2017
}}},year:{tickWidth:100,tickHeight:100,resourceColumnWidth:100,displayDateFormat:'ll',shiftUnit:'year',shiftIncrement:1,defaultSpan:1,timeResolution:{unit:'month',increment:1},headerConfig:{middle:{unit:'quarter',renderer:function renderer(start,end,cfg){return DateHelper.getShortNameOfUnit('quarter').toUpperCase()+(Math.floor(start.getMonth()/3)+1);}},top:{unit:'year',dateFormat:'YYYY'}}},manyYears:{tickWidth:50,tickHeight:50,displayDateFormat:'ll',shiftUnit:'year',shiftIncrement:1,defaultSpan:1,timeResolution:{unit:'year',increment:1},columnLinesFor:'bottom',headerConfig:{middle:{unit:'year',dateFormat:'YYYY',increment:5},// smallest zoom level looked back
// we have to specify increments here since 'increment' in zoomLevel affects only bottom header
bottom:{unit:'year',dateFormat:'YY',increment:1}}},weekAndDayLetter:{tickWidth:20,tickHeight:50,displayDateFormat:'ll',shiftUnit:'week',shiftIncrement:1,defaultSpan:10,timeResolution:{unit:'day',increment:1},columnLinesFor:'bottom',headerConfig:{bottom:{unit:'day',renderer:function renderer(start){return DateHelper.format(start,'dd').substring(0,1);},verticalColumnWidth:25},middle:{unit:'week',dateFormat:'ddd DD MMM YYYY',// Mon 01 Jan 2017
verticalColumnWidth:115}}},weekDateAndMonth:{tickWidth:30,tickHeight:40,displayDateFormat:'ll',shiftUnit:'week',shiftIncrement:1,defaultSpan:10,timeResolution:{unit:'day',increment:1},headerConfig:{middle:{unit:'week',dateFormat:'DD'},top:{unit:'month',dateFormat:'YYYY MMMM'}}},day:{displayDateFormat:'LT',shiftIncrement:1,shiftUnit:'day',defaultSpan:1,timeResolution:{unit:'minute',increment:30},columnLinesFor:'bottom',headerConfig:{bottom:{unit:'hour',renderer:function renderer(value){return"\n                                <div class=\"b-sch-calendarcolumn-ct\"><span class=\"b-sch-calendarcolumn-hours\">".concat(DateHelper.format(value,'HH'),"</span>\n                                <span class=\"b-sch-calendarcolumn-minutes\">").concat(DateHelper.format(value,'mm'),"</span></div>\n                            ");}},middle:{unit:'day',dateFormat:'ddd DD/MM',// Mon 01/02
splitUnit:'day'}}},week:{displayDateFormat:'LT',shiftIncrement:1,shiftUnit:'week',defaultSpan:24,timeResolution:{unit:'minute',increment:30},columnLinesFor:'bottom',headerConfig:{bottom:{unit:'hour',dateFormat:'LT',// will be overridden by renderer
renderer:function renderer(value){return"\n                                <div class=\"sch-calendarcolumn-ct\">\n                                <span class=\"sch-calendarcolumn-hours\">".concat(DateHelper.format(value,'HH'),"</span>\n                                <span class=\"sch-calendarcolumn-minutes\">").concat(DateHelper.format(value,'mm'),"</span>\n                                </div>\n                            ");}},middle:{unit:'week',dateFormat:'D d',splitUnit:'day'}}}};}}]);return PresetManager;}(Localizable());exports.PresetManager=PresetManager;LocaleManagerSingelton.on('locale',PresetManager.onLocalized.bind(PresetManager));PresetManager.registerDefaults();// Apply any already loaded locale
PresetManager.onLocalized();PresetManager._$name='PresetManager';/**
 * @module Scheduler/data/TimeAxis
 */ /**
 * A class representing the time axis of the scheduler. The scheduler timescale is based on the ticks generated by this class.
 * This is a pure "data" (model) representation of the time axis and has no UI elements.
 *
 * The time axis can be {@link #config-continuous} or not. In continuous mode, each timespan starts where the previous ended, and in non-continuous mode
 * there can be gaps between the ticks.
 * A non-continuous time axis can be used when want to filter out certain periods of time (like weekends) from the time axis.
 *
 * To create a non-continuos time axis you have 2 options. First, you can create a time axis containing only the time spans of interest.
 * To do that, subclass this class and override the {@link #function-generateTicks} method.
 *
 * The other alternative is to call the {@link #function-filterBy} method, passing a function to it which should return `false` if the time tick should be filtered out.
 * Calling {@link Common.data.mixin.StoreFilter#function-clearFilters} will return you to a full time axis.
 *
 * @extends Common/data/Store
 */var TimeAxis=/*#__PURE__*/function(_Store2){_inherits2(TimeAxis,_Store2);function TimeAxis(){_classCallCheck2(this,TimeAxis);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeAxis).apply(this,arguments));}_createClass2(TimeAxis,[{key:"construct",//endregion
//region Init
// private
value:function construct(config){var me=this;// TODO: maybe not needed
me.generateTicksValidatorFn=function(){return true;};_get2(_getPrototypeOf2(TimeAxis.prototype),"construct",this).call(this,config);me.originalContinuous=me.continuous;me.on({change:function change(_ref204){var action=_ref204.action;// If the change was due to filtering, there will be a refresh event
// arriving next, so do not reconfigure
if(action!=='filter'){me.trigger('reconfigure',{supressRefresh:false});}},refresh:function refresh(){return me.trigger('reconfigure',{supressRefresh:false});},endreconfigure:function endreconfigure(event){return me.trigger('reconfigure',event);}});if(me.startDate){me.internalOnReconfigure();me.trigger('reconfigure');}else if(me.viewPreset){var range=me.getAdjustedDates(new Date());me.startDate=range.startDate;me.endDate=range.endDate;}}//endregion
//region Configuration (reconfigure & consumePreset)
/**
     * Reconfigures the time axis based on the config object supplied and generates the new 'ticks'.
     * @param {Object} config
     * @param {Boolean} [suppressRefresh]
     * @private
     */},{key:"reconfigure",value:function reconfigure(config){var suppressRefresh=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var preventThrow=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,normalized=me.getAdjustedDates(config.startDate,config.endDate);if(me.trigger('beforeReconfigure',{startDate:normalized.startDate,endDate:normalized.endDate,config:config})!==false){me.trigger('beginReconfigure');me._configuredStartDate=config.startDate;me._configuredEndDate=config.endDate;Object.assign(me,config);if(me.internalOnReconfigure(preventThrow)===false){return false;}me.trigger('endReconfigure',{suppressRefresh:suppressRefresh,config:config});}}},{key:"internalOnReconfigure",value:function internalOnReconfigure(){var preventThrow=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;me.isConfigured=true;var adjusted=me.getAdjustedDates(me.startDate,me.endDate,true),normalized=me.getAdjustedDates(me.startDate,me.endDate),start=normalized.startDate,end=normalized.endDate;if(start>=end){throw new Error("Invalid start/end dates. Start date must less than end date. Start date: ".concat(start,". End date: ").concat(end,"."));}var unit=me.unit,increment=me.increment||1,ticks=me.generateTicks(start,end,unit,increment);// Suspending to be able to detect an invalid filter
me.suspendEvents();me.data=ticks;var count=me.count;if(count===0){if(preventThrow){me.resumeEvents();return false;}throw new Error('Invalid time axis configuration or filter, please check your input data.');}// start date is cached, update it to fill after generated ticks
me.startDate=me.first.startDate;me.resumeEvents();var checkEnd=me.last.endDate;if(me.isContinuous){me.adjustedStart=adjusted.startDate;me.adjustedEnd=DateHelper.getNext(count>1?ticks[count-1].startDate:adjusted.startDate,unit,increment,me.weekStartDay);}else{me.adjustedStart=me.startDate;me.adjustedEnd=checkEnd;}// if visibleTickStart > 1 this means some tick is fully outside of the view - we are not interested in it and want to
// drop it and adjust "adjustedStart" accordingly
do{// TODO this has to use more sophisticated formula to take into account that months for example can be expressed in ms consistenly
me.visibleTickStart=(me.startDate-me.adjustedStart)/(DateHelper.asMilliseconds(unit)*increment);// TODO: Changed from round to floor which seems to work, but this is not needed in ExtScheduler. Need to step and see what is different
if(me.autoAdjust)me.visibleTickStart=Math.floor(me.visibleTickStart);if(me.visibleTickStart>=1)me.adjustedStart=DateHelper.getNext(me.adjustedStart,unit,increment,me.weekStartDay);}while(me.visibleTickStart>=1);do{me.visibleTickEnd=count-(me.adjustedEnd-checkEnd)/(DateHelper.asMilliseconds(unit)*increment);if(count-me.visibleTickEnd>=1)me.adjustedEnd=DateHelper.getNext(me.adjustedEnd,unit,-1,me.weekStartDay);}while(count-me.visibleTickEnd>=1);me.updateTickCache(true);}/**
     * Get/set currently used preset
     * @property {Scheduler.preset.ViewPreset}
     */},{key:"setTimeSpan",//endregion
//region Timespan & resolution
/**
     * Changes the time axis timespan to the supplied start and end dates.
     * @param {Date} newStartDate The new start date
     * @param {Date} newEndDate The new end date
     */value:function setTimeSpan(newStartDate,newEndDate){var preventThrow=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,_me$getAdjustedDates=me.getAdjustedDates(newStartDate,newEndDate),startDate=_me$getAdjustedDates.startDate,endDate=_me$getAdjustedDates.endDate;if(me.startDate-startDate!==0||me.endDate-endDate!==0){return me.reconfigure({startDate:startDate,endDate:endDate},false,preventThrow);}}/**
     * Moves the time axis by the passed amount and unit.
     *
     * NOTE: When using a filtered TimeAxis the result of `shift()` cannot be guaranteed, it might shift into a
     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.
     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly
     * instead.
     *
     * @param {Number} amount The number of units to jump
     * @param {String} [unit] The unit (Day, Week etc)
     */},{key:"shift",value:function shift(amount){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.shiftUnit;var me=this;var startDate=me.startDate,endDate=me.endDate;// Use unfiltered start and end dates when shifting a filtered time axis, to lessen risk of messing it up.
// Still not guaranteed to work though
if(me.isFiltered){startDate=me.allRecords[0].startDate;endDate=me.allRecords[me.allCount-1].endDate;}// Hack for filtered time axis, for example if weekend is filtered out and you shiftPrev() day from monday
var tries=0;do{startDate=DateHelper.add(startDate,amount,unit);endDate=DateHelper.add(endDate,amount,unit);}while(tries++<100&&me.setTimeSpan(startDate,endDate,true)===false);}/**
     * Moves the time axis forward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement`
     * config of the current view preset.
     *
     * NOTE: When using a filtered TimeAxis the result of `shiftNext()` cannot be guaranteed, it might shift into a
     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.
     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly
     * instead.

     *
     * @param {Number} [amount] The number of units to jump forward
     */},{key:"shiftNext",value:function shiftNext(){var amount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.shiftIncrement;this.shift(amount);}/**
     * Moves the time axis backward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement` config of the current view preset.
     *
     * NOTE: When using a filtered TimeAxis the result of `shiftPrev()` cannot be guaranteed, it might shift into a
     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.
     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly
     * instead.

     *
     * @param {Number} [amount] The number of units to jump backward
     */},{key:"shiftPrevious",value:function shiftPrevious(){var amount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.shiftIncrement;this.shift(-amount);}//endregion
//region Filter & continous
/**
     * Filter the time axis by a function. The passed function will be called with each tick in time axis.
     * If the function returns true, the 'tick' is included otherwise it is filtered. If all ticks are filtered out
     * the time axis is considered invalid, triggering `invalidFilter` and then removing the filter.
     * @param {Function} fn The function to be called, it will receive an object with startDate/endDate properties, and 'index' of the tick.
     * @param {Object} [thisObj] `this` reference for the function
     */},{key:"filterBy",value:function filterBy(fn){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;var me=this;me.filters.clear();_get2(_getPrototypeOf2(TimeAxis.prototype),"filterBy",this).call(this,function(tick,index){return fn.call(thisObj,tick.data,index);});if(me.count===0){me.trigger('invalidFilter');me.clearFilters();}}},{key:"triggerFilterEvent",value:function triggerFilterEvent(event){var me=this;if(!event.filters.count){me.continuous=me.originalContinuous;}else{me.continuous=false;}// Filters has been applied (or cleared) but listeners are not informed yet, update tick cache to have start and
// end dates correct when later redrawing events & header
me.updateTickCache();_get2(_getPrototypeOf2(TimeAxis.prototype),"triggerFilterEvent",this).call(this,event);}/**
     * Returns `true` if the time axis is continuous (will return `false` when filtered)
     * @return {Boolean}
     */},{key:"getAdjustedDates",//endregion
//region Dates
value:function getAdjustedDates(startDate,endDate){var forceAdjust=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this;startDate=startDate||me.startDate;endDate=endDate||DateHelper.add(startDate,me.defaultSpan,me.mainUnit);return me.autoAdjust||forceAdjust?{startDate:me.floorDate(startDate,false,me.autoAdjust?me.mainUnit:me.unit,1),endDate:me.ceilDate(endDate,false,me.autoAdjust?me.mainUnit:me.unit,1)}:{startDate:startDate,endDate:endDate};}/**
     * Method to get the current start date of the time axis.
     * @property {Date}
     */},{key:"floorDate",// Floors a date and optionally snaps it to one of the following resolutions:
// 1. 'resolutionUnit'. If param 'resolutionUnit' is passed, the date will simply be floored to this unit.
// 2. If resolutionUnit is not passed: If date should be snapped relative to the timeaxis start date,
// the resolutionUnit of the timeAxis will be used, or the timeAxis 'mainUnit' will be used to snap the date
//
// returns a copy of the original date
// private
value:function floorDate(date,relativeToStart,resolutionUnit,incr){relativeToStart=relativeToStart!==false;var me=this,relativeTo=relativeToStart?DateHelper.clone(me.startDate):null,increment=incr||me.resolutionIncrement,unit=resolutionUnit||(relativeToStart?me.resolutionUnit:me.mainUnit),snap=function snap(value,increment){return Math.floor(value/increment)*increment;};if(relativeToStart){var snappedDuration=snap(DateHelper.diff(relativeTo,date,unit),increment);// TODO: used to be small unit multipled with factor (minute = seconds, minutes * 60)
return DateHelper.add(relativeTo,snappedDuration,unit);}var dt=DateHelper.clone(date);if(unit==='week'){var day=dt.getDay()||7,startDay=me.weekStartDay||7;dt=DateHelper.add(DateHelper.startOf(dt,'day'),day>=startDay?startDay-day:-(7-startDay+day),'day');// Watch out for Brazil DST craziness (see test 028_timeaxis_dst.t.js)
if(dt.getDay()!==startDay&&dt.getHours()===23){dt=DateHelper.add(dt,1,'hour');}}else{// removes "smaller" units from date (for example minutes; removes seconds and milliseconds)
dt=DateHelper.startOf(dt,unit);// day and year are 1-based so need to make additional adjustments
var modifier=['day','year'].includes(unit)?1:0,useUnit=unit==='day'?'date':unit,snappedValue=snap(DateHelper.get(dt,useUnit)-modifier,increment)+modifier;dt=DateHelper.set(dt,useUnit,snappedValue);}return dt;}/**
     * Rounds the date to nearest unit increment
     * @private
     */},{key:"roundDate",value:function roundDate(date,relativeTo){var me=this,dt=DateHelper.clone(date),increment=me.resolutionIncrement||1;relativeTo=DateHelper.clone(relativeTo||me.startDate);switch(me.resolutionUnit){case'week':DateHelper.startOf(dt,'day');var distanceToWeekStartDay=dt.getDay()-me.weekStartDay,toAdd;if(distanceToWeekStartDay<0){distanceToWeekStartDay=7+distanceToWeekStartDay;}if(Math.round(distanceToWeekStartDay/7)===1){toAdd=7-distanceToWeekStartDay;}else{toAdd=-distanceToWeekStartDay;}return DateHelper.add(dt,toAdd,'day');case'month':var nbrMonths=DateHelper.diff(relativeTo,dt,'month')+DateHelper.as('month',dt.getDay()/DateHelper.daysInMonth(dt)),//*/DH.as('month', DH.diff(relativeTo, dt)) + (dt.getDay() / DH.daysInMonth(dt)),
snappedMonths=Math.round(nbrMonths/increment)*increment;return DateHelper.add(relativeTo,snappedMonths,'month');case'quarter':DateHelper.startOf(dt,'month');return DateHelper.add(dt,'month',3-dt.getMonth()%3);default:var duration=DateHelper.as(me.resolutionUnit,DateHelper.diff(relativeTo,dt)),// Need to find the difference of timezone offsets between relativeTo and original dates. 0 if timezone offsets are the same.
offset=DateHelper.as(me.resolutionUnit,relativeTo.getTimezoneOffset()-dt.getTimezoneOffset(),'minute'),// Need to add the offset to the whole duration, so the divided value will take DST into account
snappedDuration=Math.round((duration+offset)/increment)*increment;// TODO: used to add one res unit lower * factor, minutes = add seconds, minutes * 60
// Now when the round is done, we need to subtract the offset, so the result also will take DST into account
return DateHelper.add(relativeTo,snappedDuration-offset,me.resolutionUnit);}}// private
},{key:"ceilDate",value:function ceilDate(date,relativeToStart,resolutionUnit,increment){var me=this;relativeToStart=relativeToStart!==false;increment=increment||(relativeToStart?this.resolutionIncrement:1);var dt=DateHelper.clone(date),doCall=false,unit=resolutionUnit||(relativeToStart?me.resolutionUnit:me.mainUnit);switch(unit){case'minute':doCall=!DateHelper.isStartOf(dt,'minute');break;case'hour':doCall=!DateHelper.isStartOf(dt,'hour');break;case'day':case'date':doCall=!DateHelper.isStartOf(dt,'day');break;case'week':dt=DateHelper.startOf(dt,'day');doCall=dt.getDay()!==me.weekStartDay||!DateHelper.isEqual(dt,date);break;case'month':dt=DateHelper.startOf(dt,'day');doCall=dt.getDate()!==1||!DateHelper.isEqual(dt,date);break;case'quarter':dt=DateHelper.startOf(dt,'day');doCall=dt.getMonth()%3!==0||dt.getDate()!==1||!DateHelper.isEqual(dt,date);break;case'year':dt=DateHelper.startOf(dt,'day');doCall=dt.getMonth()!==0||dt.getDate()!==1||!DateHelper.isEqual(dt,date);break;}if(doCall)return DateHelper.getNext(dt,unit,increment,me.weekStartDay);return dt;}//endregion
//region Ticks
},{key:"processExclusion",// Check if a certain date is included based on timeAxis.include rules
value:function processExclusion(startDate,endDate,unit){var include=this.include;if(include){return Object.entries(include).some(function(_ref205){var _ref206=_slicedToArray(_ref205,2),includeUnit=_ref206[0],rule=_ref206[1];if(!rule){return false;}var from=rule.from,to=rule.to;// Including the closest smaller unit with a { from, to} rule should affect start & end of the
// generated tick. Currently only works for days or smaller.
if(DateHelper.compareUnits('day',unit)>=0&&DateHelper.getLargerUnit(includeUnit)===unit){if(from){DateHelper.set(startDate,includeUnit,from);}if(to){var _DateHelper$set;var stepUnit=unit;// Stepping back base on date, not day
if(unit==='day'){stepUnit='date';}// Since endDate is not inclusive it points to the next day etc.
// Turns for example 2019-01-10T00:00 -> 2019-01-09T18:00
DateHelper.set(endDate,(_DateHelper$set={},_defineProperty(_DateHelper$set,stepUnit,DateHelper.get(endDate,stepUnit)-1),_defineProperty(_DateHelper$set,includeUnit,to),_DateHelper$set));}}// "Greater" unit being included? Then we need to care about it
// (for example excluding day will also affect hour, minute etc)
if(DateHelper.compareUnits(includeUnit,unit)>=0){var datePart=includeUnit==='day'?startDate.getDay():DateHelper.get(startDate,includeUnit);if(from&&datePart<from||to&&datePart>=to){return true;}}});}return false;}// Calculate constants used for exclusion when scaling within larger ticks
},{key:"initExclusion",value:function initExclusion(){Object.entries(this.include).forEach(function(_ref207){var _ref208=_slicedToArray(_ref207,2),unit=_ref208[0],rule=_ref208[1];if(rule){var from=rule.from,to=rule.to;// For example for hour:
// 1. Get the next bigger unit -> day, get ratio -> 24
// 2. to 20 - from 8 = 12 hours visible each day. lengthFactor 24 / 12 = 2 means that each hour used
// needs to represent 2 hours when drawn (to stretch)
// |    ████    | -> |  ████████  |
rule.lengthFactor=DateHelper.getUnitToBaseUnitRatio(unit,DateHelper.getLargerUnit(unit))/(to-from);// TODO: Since `to` is exclusive this should be the correct one... but cannot get it to work throughout
rule.lengthFactorExcl=DateHelper.getUnitToBaseUnitRatio(unit,DateHelper.getLargerUnit(unit))/(to-from-1);// Calculate weighted center to stretch around |   ██x█ |
rule.center=from+from/(rule.lengthFactor-1);}});}/**
     * Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:
     * ```
     * {
     *    startDate : ..., // start date
     *    endDate   : ...  // end date
     * }
     * ```
     * Take notice, that this function either has to be called with `start`/`end` parameters, or create those variables.
     *
     * @param {Date} axisStartDate The start date of the interval
     * @param {Date} axisEndDate The end date of the interval
     * @param {String} unit The unit of the time axis
     * @param {Number} increment The increment for the unit specified.
     * @return {Array} ticks The ticks representing the time axis
     */},{key:"generateTicks",value:function generateTicks(axisStartDate,axisEndDate){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.unit;var increment=arguments.length>3&&arguments[3]!==undefined?arguments[3]:this.increment;var me=this,ticks=[],usesExclusion=Boolean(me.include);var intervalEnd,tickEnd,isExcluded,dstDiff=0,_me$getAdjustedDates2=me.getAdjustedDates(axisStartDate,axisEndDate),startDate=_me$getAdjustedDates2.startDate,endDate=_me$getAdjustedDates2.endDate;me.tickCache={};if(usesExclusion){me.initExclusion();}while(startDate<endDate){intervalEnd=DateHelper.getNext(startDate,unit,increment,me.weekStartDay);if(!me.autoAdjust&&intervalEnd>endDate){intervalEnd=endDate;}// Handle hourly increments crossing DST boundaries to keep the timescale looking correct
// Only do this for HOUR resolution currently, and only handle it once per tick generation.
if(unit==='hour'&&increment>1&&ticks.length>0&&dstDiff===0){var prev=ticks[ticks.length-1];dstDiff=(prev.startDate.getHours()+increment)%24-prev.endDate.getHours();if(dstDiff!==0){// A DST boundary was crossed in previous tick, adjust this tick to keep timeaxis "symmetric".
intervalEnd=DateHelper.add(intervalEnd,dstDiff,'hour');}}isExcluded=false;if(usesExclusion){tickEnd=new Date(intervalEnd.getTime());isExcluded=me.processExclusion(startDate,intervalEnd,unit);}else{tickEnd=intervalEnd;}if(me.generateTicksValidatorFn(startDate)&&!isExcluded){ticks.push({startDate:startDate,endDate:intervalEnd});me.tickCache[startDate.getTime()]=ticks.length-1;}startDate=tickEnd;}return ticks;}},{key:"getTickFromDate",/**
     * Gets a tick "coordinate" representing the date position on the time scale. Returns -1 if the date is not part of the time axis.
     * @param {Date} date the date
     * @return {Number} the tick position on the scale or -1 if the date is not part of the time axis
     */value:function getTickFromDate(date){var me=this,ticks=me.records;var begin=0,end=ticks.length-1,middle,tick,tickStart,tickEnd;// Quickly eliminate out of range dates or if we have not been set up with a time range yet
if(!ticks.length||date<ticks[0].startDate||date>ticks[end].endDate){return-1;}if(me.isContinuous){// TODO: This is the code from ExtScheduler, it is a calculation without iteration so it should perform better,
//  we should consider using it...
// if (date - ticks[0].startDate === 0) return this.visibleTickStart;
// if (date - ticks[end].endDate === 0) return this.visibleTickEnd;
//
// const { adjustedStart, adjustedEnd }     = this;
//
// let tickIndex       = Math.floor(ticks.length * (date - adjustedStart) / (adjustedEnd - adjustedStart));
//
// // for the date == adjustedEnd case
// if (tickIndex > end) {
//     tickIndex = end;
// }
//
// const tickStart           = tickIndex === 0 ? adjustedStart : ticks[tickIndex].startDate;
// const tickEnd             = tickIndex === end ? adjustedEnd : ticks[tickIndex].endDate;
//
// tick                = tickIndex + (date - tickStart) / (tickEnd - tickStart);
//
// // in case of `autoAdjust : false` the actual visible timespan starts not from 0 tick coordinate, but
// // from `visibleTickStart` coordinate, this check generally repeats the "quick bailout" check in the begining of the method,
// // but still
// if (tick < this.visibleTickStart || tick > this.visibleTickEnd) {
//     return -1;
// }
//
// return tick;
// Chop tick cache in half until we find a match
while(begin<end){middle=begin+end+1>>1;if(date>ticks[middle].endDate){begin=middle+1;}else if(date<ticks[middle].startDate){end=middle-1;}else{begin=middle;}}tick=ticks[begin];tickStart=tick.startDate;tickEnd=tick.endDate;// Part way though, calculate the fraction
if(date>tickStart){begin+=(date-tickStart)/(tickEnd-tickStart);}return Math.min(Math.max(begin,me.visibleTickStart),me.visibleTickEnd);}else{for(var i=0;i<=end;i++){tickEnd=ticks[i].endDate;if(date<=tickEnd){tickStart=ticks[i].startDate;// date < tickStart can occur in filtered case
tick=i+(date>tickStart?(date-tickStart)/(tickEnd-tickStart):0);return tick;}}}}/**
     * Gets the time represented by a tick "coordinate".
     * @param {Number} tick the tick "coordinate"
     * @param {String} [roundingMethod] The rounding method to use
     * @return {Date} The date to represented by the tick "coordinate", or null if invalid.
     */},{key:"getDateFromTick",value:function getDateFromTick(tick,roundingMethod){var me=this;if(tick===me.visibleTickEnd){return me.endDate;}var wholeTick=Math.floor(tick),fraction=tick-wholeTick,t=me.getAt(wholeTick);if(!t){return null;}var start=wholeTick===0?me.adjustedStart:t.startDate,// if we've filtered timeaxis using filterBy, then we cannot trust to adjustedEnd property and should use tick end
end=wholeTick===me.count-1&&me.isContinuous?me.adjustedEnd:t.endDate,date=DateHelper.add(start,fraction*(end-start),'millisecond');if(roundingMethod){date=me[roundingMethod+'Date'](date);}return date;}/**
     * Returns the ticks of the timeaxis in an array of objects with a "start" and "end" date.
     * @return {Object[]} the ticks on the scale
     */},{key:"updateTickCache",/**
     * Caches ticks and start/end dates for faster processing during rendering of events.
     * @private
     */value:function updateTickCache(){var onlyStartEnd=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;if(me.count){me._start=me.first.startDate;me._end=me.last.endDate;me._startMS=me.startDate.getTime();me._endMS=me.endDate.getTime();}else{me._start=me._end=me._startMs=me._endMS=null;}// onlyStartEnd is true prior to clearing filters, to get start and end dates correctly during that process.
// No point in filling tickCache yet in that case, it will be done after the filters are cleared
if(!onlyStartEnd){me.tickCache={};me.forEach(function(tick,i){return me.tickCache[tick.startDate.getTime()]=i;});}}//endregion
//region Axis
/**
     * Returns true if the passed date is inside the span of the current time axis.
     * @param {Date} date The date to query for
     * @return {Boolean} true if the date is part of the timeaxis
     */},{key:"dateInAxis",value:function dateInAxis(date){var inclusiveEnd=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,axisStart=me.startDate,axisEnd=me.endDate;// Date is between axis start/end and axis is not continuous - need to perform better lookup
if(me.isContinuous){return inclusiveEnd?DateHelper.betweenLesserEqual(date,axisStart,axisEnd):DateHelper.betweenLesser(date,axisStart,axisEnd);}else{var length=me.getCount(),tickStart,tickEnd,tick;for(var i=0;i<length;i++){tick=me.getAt(i);tickStart=tick.startDate;tickEnd=tick.endDate;if(inclusiveEnd&&date<=tickEnd||!inclusiveEnd&&date<tickEnd){return date>=tickStart;}}}return false;}/**
     * Returns true if the passed timespan is part of the current time axis (in whole or partially).
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @return {Boolean} true if the timespan is part of the timeaxis
     */},{key:"timeSpanInAxis",value:function timeSpanInAxis(start,end){var me=this;if(end.getTime()===start.getTime()){return this.dateInAxis(start,true);}if(me.isContinuous){return DateHelper.intersectSpans(start,end,me.startDate,me.endDate);}return start<me.startDate&&end>me.endDate||me.getTickFromDate(start)!==me.getTickFromDate(end);}// Accepts a TimeSpan model (uses its cached MS values to be a bit faster during rendering)
},{key:"isTimeSpanInAxis",value:function isTimeSpanInAxis(timeSpan){var me=this,startMS=timeSpan.startDateMS,endMS=timeSpan.endDateMS;// only consider fully scheduled ranges
if(!startMS||!endMS)return false;if(endMS===startMS){return this.dateInAxis(timeSpan.startDate,true);}if(me.isContinuous){return endMS>me.startMS&&startMS<me.endMS;}return startMS<me.startMS&&endMS>me.endMS||me.getTickFromDate(timeSpan.startDate)!==me.getTickFromDate(timeSpan.endDate);}//endregion
//region Iteration
/**
     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
     * @internal
     * @param {String} unit The unit to use when iterating over the timespan
     * @param {Number} increment The increment to use when iterating over the timespan
     * @param {Function} iteratorFn The function to call
     * @param {Object} [thisObj] `this` reference for the function
     */},{key:"forEachAuxInterval",value:function forEachAuxInterval(unit){var increment=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var iteratorFn=arguments.length>2?arguments[2]:undefined;var thisObj=arguments.length>3&&arguments[3]!==undefined?arguments[3]:this;var end=this.endDate,dt=this.startDate,i=0,intervalEnd;if(dt>end)throw new Error('Invalid time axis configuration');while(dt<end){intervalEnd=DateHelper.min(DateHelper.getNext(dt,unit,increment,this.weekStartDay),end);iteratorFn.call(thisObj,dt,intervalEnd,i);dt=intervalEnd;i++;}}//endregion
},{key:"viewPreset",get:function get(){return this._viewPreset;},set:function set(viewPreset){var me=this,preset=PresetManager.getPreset(viewPreset);me._viewPreset=preset;Object.assign(me,{unit:preset.bottomHeader.unit,increment:preset.bottomHeader.increment||1,resolutionUnit:preset.timeResolution.unit,resolutionIncrement:preset.timeResolution.increment,mainUnit:preset.mainHeader.unit,shiftUnit:preset.shiftUnit,shiftIncrement:preset.shiftIncrement||1,defaultSpan:preset.defaultSpan||1,presetName:preset.name,// Weekview columns are updated upon 'datachanged' event on this object.
// We have to pass headerConfig in order to render them correctly (timeAxisViewModel is incorrect in required time)
headerConfig:preset.headerConfig});}//endregion
//region Getters & setters
// private
},{key:"resolution",get:function get(){return{unit:this.resolutionUnit,increment:this.resolutionIncrement};}// private
,set:function set(resolution){this.resolutionUnit=resolution.unit;this.resolutionIncrement=resolution.increment;}},{key:"resolutionUnit",get:function get(){return this._resolutionUnit;},set:function set(resolutionUnit){this._resolutionUnit=resolutionUnit;}},{key:"resolutionIncrement",get:function get(){return this._resolutionIncrement;},set:function set(resolutionIncrement){this._resolutionIncrement=resolutionIncrement||1;}},{key:"mainUnit",set:function set(mainUnit){this._mainUnit=mainUnit;},get:function get(){return this._mainUnit;}},{key:"shiftUnit",set:function set(shiftUnit){this._shiftUnit=shiftUnit;}// private
,get:function get(){return this._shiftUnit||this._mainUnit;}},{key:"shiftIncrement",set:function set(shiftIncrement){this._shiftIncrement=shiftIncrement;}// private
,get:function get(){return this._shiftIncrement||1;}},{key:"unit",set:function set(unit){this._unit=unit;}// private
,get:function get(){return this._unit;}},{key:"increment",set:function set(increment){this._increment=increment;}// private
,get:function get(){return this._increment;}},{key:"defaultSpan",get:function get(){return this._defaultSpan;},set:function set(defaultSpan){this._defaultSpan=defaultSpan;}},{key:"isContinuous",get:function get(){return this.continuous!==false&&!this.filtered;}},{key:"startDate",get:function get(){// TODO: added _start as caching, might mess something up when reconfiguring? change here if tests fail
return this._start||(this.first?new Date(this.first.startDate):null);},set:function set(start){this._start=DateHelper.parse(start);}/**
     * Method to get a the current end date of the time axis
     * @property {Date}
     */},{key:"endDate",get:function get(){return this._end||(this.last?new Date(this.last.endDate):null);},set:function set(end){if(end)this._end=DateHelper.parse(end);}// used in performance critical code for comparisons
},{key:"startMS",get:function get(){return this._startMS;}// used in performance critical code for comparisons
},{key:"endMS",get:function get(){return this._endMS;}},{key:"include",get:function get(){return this._include;},set:function set(include){var me=this;me._include=include;me.continuous=!include;if(!me.isConfiguring){me.startDate=me._configuredStartDate;me.endDate=me._configuredEndDate;me.internalOnReconfigure();me.trigger('includeChange');}}},{key:"visibleTickTimeSpan",get:function get(){var me=this;return me.isContinuous?me.visibleTickEnd-me.visibleTickStart:me.count;}},{key:"ticks",get:function get(){return this.records;}}],[{key:"defaultConfig",//region Events
/**
     * Fires before the timeaxis is about to be reconfigured (e.g. new start/end date or unit/increment). Return false to abort the operation.
     * @event beforereconfigure
     * @param {Scheduler.data.TimeAxis} source The time axis instance
     * @param {Date} startDate The new time axis start date
     * @param {Date} endDate The new time axis end date
     */ /**
     * Event that is triggered when we end reconfiguring and everything UI-related should be done
     * @event endreconfigure
     * @private
     */ /**
     * Fires when the timeaxis has been reconfigured (e.g. new start/end date or unit/increment)
     * @event reconfigure
     * @param {Scheduler.data.TimeAxis} source The time axis instance
     */ /**
     * Fires if all the ticks in the timeaxis are filtered out. After firing the filter is cleared to return the time
     * axis to a valid state.
     * @event invalidFilter
     * @param {Scheduler.data.TimeAxis} source The time axis instance
     */ //endregion
//region Default config
get:function get(){return{modelClass:TimeSpan,/**
             * Set to false if the timeline is not continuous, e.g. the next timespan does not start where the previous ended (for example skipping weekends etc).
             * @config {Boolean}
             * @default
             */continuous:true,originalContinuous:null,/**
             * Include only certain hours or days in the time axis (makes it `continuous : false`). Accepts and object
             * with `day` and `hour` properties:
             * ```
             * const scheduler = new Scheduler({
             *     timeAxis : {
             *         include : {
             *              // Do not display hours after 17 or before 9 (only display 9 - 17). The `to´ value is not
             *              // included in the time axis
             *              hour : {
             *                  from : 9,
             *                  to   : 17
             *              },
             *              // Do not display sunday or saturday
             *              day : [0, 6]
             *         }
             *     }
             * }
             * ```
             * In most cases we recommend that you use Scheduler's workingTime config instead. It is easier to use and
             * makes sure all parts of the Scheduler gets updated.
             * @config {Object}
             */include:null,/**
             * Automatically adjust the timespan when generating ticks with {@link #function-generateTicks} according to
             * the `viewPreset` configuration. Setting this to false may lead to shifting time/date of ticks.
             * @config {Boolean}
             * @default
             */autoAdjust:true,unit:null,increment:null,resolutionUnit:null,resolutionIncrement:null,weekStartDay:null,mainUnit:null,shiftUnit:null,shiftIncrement:1,//isConfigured : false,
// in case of `autoAdjust : false`, the 1st and last ticks can be truncated, containing only part of the normal tick
// these dates will contain adjusted start/end (like if the tick has not been truncated)
adjustedStart:null,adjustedEnd:null,// the visible position in the first tick, can actually be > 1 because the adjustment is done by the `mainUnit`
visibleTickStart:null,// the visible position in the first tick, is always ticks count - 1 < value <= ticks count, in case of autoAdjust, always = ticks count
visibleTickEnd:null,// name of the current preset
//_presetName : null,
defaultSpan:1,tickCache:{},viewPreset:null};}}]);return TimeAxis;}(Store);exports.TimeAxis=TimeAxis;TimeAxis._$name='TimeAxis';/**
 * @module Scheduler/feature/ColumnLines
 */ /**
 * Displays column lines for ticks, with a thicker line for each major tick. If this feature is disabled, no lines are shown.
 * If it's enabled, line are shown for the tick level which is set in current ViewPreset. Please see {@link Scheduler.preset.ViewPreset#config-columnLinesFor} config for details.
 *
 * The lines are drawn to a canvas,
 * converted to an image and used as background in the schedulers background canvas. In certain scenarios, major column
 * lines are drawn as divs.
 *
 * The color and style of the lines are determined by extracting the values for `border-left-color` and
 * `border-left-style` (solid, dashed or dotted are supported) from the css rules for `.b-column-line` and
 * `.b-column-line-major`.
 *
 * This feature is **enabled** by default
 *
 * @extends Common/mixin/InstancePlugin
 * @demo basic
 * @externalexample scheduler/ColumnLines.js
 */var ColumnLines=/*#__PURE__*/function(_InstancePlugin14){_inherits2(ColumnLines,_InstancePlugin14);function ColumnLines(){_classCallCheck2(this,ColumnLines);return _possibleConstructorReturn2(this,_getPrototypeOf2(ColumnLines).apply(this,arguments));}_createClass2(ColumnLines,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var me=this;client.useBackgroundCanvas=true;_get2(_getPrototypeOf2(ColumnLines.prototype),"construct",this).call(this,client,config);me.timeAxisViewModel=client.timeAxisViewModel;client.on({theme:'onThemeChange',thisObj:me});}},{key:"doDestroy",value:function doDestroy(){this.timeAxisViewModelDetatcher&&this.timeAxisViewModelDetatcher();_get2(_getPrototypeOf2(ColumnLines.prototype),"doDestroy",this).call(this);}//endregion
//region Draw
/**
     * Reads lines colors from temporary element
     * @private
     */},{key:"getColorsFromCSS",value:function getColorsFromCSS(){var me=this;// Create two fake column lines. But only do it once per app.
if(!me.GotColors){var element=DomHelper.createElement({style:'position: absolute; visibility: hidden',html:'<div class="b-column-line"></div><div class="b-column-line-major"></div>',parent:document.body}),tickColor=DomHelper.getStyleValue(element.firstElementChild,'border-left-color'),majorColor=DomHelper.getStyleValue(element.lastElementChild,'border-left-color'),tickStyle=DomHelper.getStyleValue(element.firstElementChild,'border-left-style'),majorTickStyle=DomHelper.getStyleValue(element.lastElementChild,'border-left-style');if(tickColor){me.tickColor=tickColor;}if(majorColor){me.majorTickColor=majorColor;}if(tickStyle){me.tickStyle=tickStyle;}if(majorTickStyle){me.majorTickStyle=majorTickStyle;}element.remove();me.GotColors=true;}}},{key:"onThemeChange",value:function onThemeChange(){this.GotColors=false;this.render();}/**
     * Draw lines when scheduler/gantt is rendered.
     * @private
     */},{key:"render",value:function render(){this.getColorsFromCSS();this.drawLines();}/**
     * Draw column lines to a offscreen canvas, convert to base64 and use as background image.
     * @private
     */},{key:"drawLines",value:function drawLines(){// Early bailout for timeaxis without start date
if(!this.client.timeAxis.startDate){return;}// We cannot rely on timeAxisViewModel because rendered header may not include full top header.
// This means we should generate whole top level tick and then iterate over ticks, calculating lines position
// depending on header config
var me=this,client=me.client,timeAxis=client.timeAxis,axisStart=timeAxis.startDate,viewModel=client.timeAxisViewModel,tickSize=viewModel.tickSize,element=client.backgroundCanvas,canvas=document.createElement('canvas'),ctx=canvas.getContext('2d'),linesForLevel=viewModel.columnLinesFor,targetHeader=viewModel.headerConfig[linesForLevel],headers=viewModel.headers,upperHeader=headers[headers.indexOf(targetHeader)-1]||headers[0],lowerHeader=headers[headers.length-1],startDate=timeAxis.floorDate(axisStart,false,upperHeader.unit,upperHeader.unit==='year'?1:upperHeader.increment||1),endDate=DateHelper.getNext(startDate,upperHeader.unit,upperHeader.increment||1,timeAxis.weekStartDay),ticksInHeader=Math.round(DateHelper.getDurationInUnit(startDate,endDate,lowerHeader.unit))/(lowerHeader.increment||1),nbrLinesToDraw=Math.round(DateHelper.getDurationInUnit(startDate,endDate,targetHeader.unit))/(targetHeader.increment||1),ratio=ticksInHeader/nbrLinesToDraw;if(client.isHorizontal){if(axisStart){var doUnitsAlign=headers.length>1&&DateHelper.doesUnitsAlign(upperHeader.unit,targetHeader.unit),offsetDate=doUnitsAlign?startDate:timeAxis.floorDate(axisStart,false,targetHeader.unit,targetHeader.increment),// TODO: isContinuous check solved the issue I was seeing but not very generic
offset=!timeAxis.isContinuous?0:DateHelper.getDurationInUnit(offsetDate,axisStart,lowerHeader.unit,true)/timeAxis.increment*tickSize,// this is position from left side of the canvas to draw first line, otherwi
startPos=10,height=20;DomHelper.removeEachSelector(element,'.b-column-line-major');var isMajor=false,majorHeaderIsRegular=true;if(targetHeader!==upperHeader&&doUnitsAlign&&lowerHeader.unit==='day'&&DateHelper.compareUnits(upperHeader.unit,'month')!==-1){// This condition means, that major lines are irregular, e.g. when lower level is days and upper is
// months. Since months have different duration, we cannot safely repeat images
majorHeaderIsRegular=false;timeAxis.forEachAuxInterval(upperHeader.unit,upperHeader.increment,function(start,end){DomHelper.append(element,{tag:'div',className:'b-column-line-major',style:"left:".concat(viewModel.getPositionFromDate(end)-1,"px;")});});}// hack for FF to not crash when trying to create too wide canvas.
canvas.width=Math.min(ticksInHeader*2*tickSize,32767);canvas.height=height;ctx.translate(-0.5,-0.5);ctx.lineWidth=2;for(var i=0;i<nbrLinesToDraw;i++){// Only first interval may be major
if(i===0){// Filtered time axis should not have any major lines
isMajor=upperHeader!==targetHeader&&doUnitsAlign&&majorHeaderIsRegular&&timeAxis.isContinuous;}else{isMajor=false;}var tickStyle=isMajor&&me.majorTickStyle||!isMajor&&me.tickStyle;if(tickStyle!=='solid'){switch(tickStyle){case'dashed':ctx.setLineDash([6,4]);break;case'dotted':ctx.setLineDash([2,3]);break;}}ctx.beginPath();ctx.strokeStyle=isMajor?me.majorTickColor:me.tickColor;// draw ticks
ctx.moveTo(i*ratio*tickSize*2+startPos-1,0);ctx.lineTo(i*ratio*tickSize*2+startPos-1,height+2);ctx.stroke();}// use as background image
element.style.backgroundImage="url(".concat(canvas.toDataURL(),")");element.style.backgroundSize="".concat(canvas.width/2,"px");element.style.backgroundPositionX="".concat(-(startPos/2+offset),"px");}}else{// hack for FF to not crash when trying to create too wide canvas.
canvas.width=client.timeAxisColumn.resourceColumns.columnWidth*2;canvas.height=2;ctx.translate(-0.5,-0.5);ctx.lineWidth=2;if(axisStart){DomHelper.removeEachSelector(element,'.b-column-line-major');// Major lines always as divs to not get so large image
if(targetHeader!==upperHeader){timeAxis.forEachAuxInterval(upperHeader.unit,upperHeader.increment,function(start,end){DomHelper.append(element,{tag:'div',className:'b-column-line-major',style:"top:".concat(viewModel.getPositionFromDate(end)-1,"px;")});});}if(me.tickStyle!=='solid'){switch(me.tickStyle){case'dashed':ctx.setLineDash([6,4]);break;case'dotted':ctx.setLineDash([2,3]);break;}}var _height=ratio*tickSize*2;canvas.height=_height;ctx.beginPath();ctx.strokeStyle=me.tickColor;ctx.lineWidth=2;// draw ticks
ctx.moveTo(0,_height-1);ctx.lineTo(canvas.width+2,_height-1);ctx.stroke();}ctx.beginPath();ctx.strokeStyle=me.tickColor;// draw ticks
ctx.moveTo(canvas.width-1,0);ctx.lineTo(canvas.width-1,canvas.height+2);ctx.stroke();// use as background image
element.style.backgroundImage="url(".concat(canvas.toDataURL(),")");element.style.backgroundSize="".concat(canvas.width/2,"px");element.style.backgroundPositionX='0';}}//endregion
//region Events
/**
     * Redraw lines when time axis changes.
     * @private
     */},{key:"updateCanvasSize",value:function updateCanvasSize(){this.drawLines();}//endregion
}],[{key:"properties",//region Config
get:function get(){return{tickColor:'#e6e6e6',majorTickColor:'#999',tickStyle:'solid',majorTickStyle:'solid'};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{after:['render','updateCanvasSize']};}}]);return ColumnLines;}(InstancePlugin);exports.ColumnLines=ColumnLines;ColumnLines._$name='ColumnLines';GridFeatureManager.registerFeature(ColumnLines,true,['Scheduler','Gantt']);/**
 * @module Scheduler/feature/mixin/DependencyCreation
 */ /**
 * Mixin for Dependencies feature that handles dependency creation (drag & drop from terminals which are shown on hover).
 * @mixin
 */var DependencyCreation=function DependencyCreation(Target){return(/*#__PURE__*/function(_Delayable14){_inherits2(DependencyCreation,_Delayable14);function DependencyCreation(){_classCallCheck2(this,DependencyCreation);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyCreation).apply(this,arguments));}_createClass2(DependencyCreation,[{key:"construct",//endregion
//region Init & destroy
value:function construct(view,config){_get2(_getPrototypeOf2(DependencyCreation.prototype),"construct",this).call(this,view,config);var me=this;me.view=view;me.eventName=view.scheduledEventName;me.view.on('readOnly',function(){return me.updateCreateListeners();});me.updateCreateListeners();}},{key:"doDestroy",value:function doDestroy(){var me=this;me.listenersDetacher&&me.listenersDetacher();me.abort();me.creationTooltip&&me.creationTooltip.destroy();_get2(_getPrototypeOf2(DependencyCreation.prototype),"doDestroy",this).call(this);}},{key:"updateCreateListeners",value:function updateCreateListeners(){var me=this;if(!me.view){return;}me.listenersDetacher&&me.listenersDetacher();me.listenersDetacher=null;if(me.isCreateAllowed){var _me$view$on;me.listenersDetacher=me.view.on((_me$view$on={},_defineProperty(_me$view$on,"".concat(me.eventName,"mouseenter"),me.onTimeSpanMouseEnter),_defineProperty(_me$view$on,"".concat(me.eventName,"mouseleave"),me.onTimeSpanMouseLeave),_defineProperty(_me$view$on,"thisObj",me),_me$view$on));}}},{key:"onTimeSpanMouseEnter",//endregion
//region Events
/**
     * Show terminals when mouse enters event/task element
     * @private
     */value:function onTimeSpanMouseEnter(event){var record=event["".concat(this.eventName,"Record")],element=event["".concat(this.eventName,"Element")];this.showTerminals(record,DomHelper.down(element,event.source.eventInnerSelector));}/**
     * Hide terminals when mouse leaves event/task element
     * @private
     */},{key:"onTimeSpanMouseLeave",value:function onTimeSpanMouseLeave(event){var me=this,element=event["".concat(me.eventName,"Element")];if(!me.creationData||!DomHelper.isDescendant(element,me.creationData.sourceTerminal.parentElement)){me.hideTerminals(element);}}/**
     * Remove hover styling when mouse leaves terminal. Also hides terminals when mouse leaves one it and not creating a dependency.
     * @private
     */},{key:"onTerminalMouseOut",value:function onTerminalMouseOut(event){var me=this,el=DomHelper.up(event.target,me.view.eventSelector);if(!DomHelper.isDescendant(el,me.showingTerminalsFor)&&(!me.creationData||el!==me.creationData.sourceTerminal.parentElement)){me.hideTerminals(el);me.view.unhover(event);}}/**
     * Start creating a dependency when mouse is pressed over terminal
     * @private
     */},{key:"onTerminalMouseDown",value:function onTerminalMouseDown(event){// ignore non-left button clicks
if(event.button===0){var me=this,view=me.view,timeAxisSubGridElement=view.timeAxisSubGridElement,terminal=event.target,element=terminal.parentElement.closest(view.eventSelector),viewBounds=Rectangle.from(view.element,document.body);event.preventDefault();event.stopPropagation();me.creationData={source:view.resolveTimeSpanRecord(element),sourceTerminal:terminal,startPoint:Rectangle.from(terminal,timeAxisSubGridElement).center,startX:event.pageX-viewBounds.x+view.scrollLeft,startY:event.pageY-viewBounds.y+view.scrollTop,valid:false};if(view.resolveResourceRecord){me.creationData.sourceResource=view.resolveResourceRecord(element);}me.mouseDetacher=EventHelper.on({mouseup:{element:document.body,handler:'onMouseUp'},mousemove:{element:timeAxisSubGridElement,handler:'onMouseMove'},thisObj:me});}}/**
     * Update connector line showing dependency between source and target when mouse moves. Also check if mouse is over a valid
     * target terminal
     * @private
     */},{key:"onMouseMove",value:function onMouseMove(event){var me=this,view=me.view,data=me.creationData,viewBounds=Rectangle.from(view.element,document.body),deltaX=event.pageX-viewBounds.x+view.scrollLeft-data.startX,deltaY=event.pageY-viewBounds.y+view.scrollTop-data.startY,length=Math.round(Math.sqrt(deltaX*deltaX+deltaY*deltaY))-3,angle=Math.atan2(deltaY,deltaX);if(!me.connector){/**
             * Fired on the owning Scheduler/Gantt before a dependency creation drag operation starts. Return false to prevent it
             * @event beforeDependencyCreateDrag
             * @param {object} data
             */if(view.trigger('beforeDependencyCreateDrag',{data:me.creationData})===false){me.abort();return;}me.createConnector(data.startPoint.x,data.startPoint.y);/**
             * Fired on the owning Scheduler/Gantt when a dependency creation drag operation starts
             * @event dependencyCreateDragStart
             * @param {object} data
             */view.trigger('dependencyCreateDragStart',{data:me.creationData});}me.connector.style.width="".concat(length,"px");me.connector.style.transform="rotate(".concat(angle,"rad)");if(event.target.matches(".".concat(me.terminalCls))&&event.target!==data.sourceTerminal){data.targetTerminal=event.target;data.target=view.resolveTimeSpanRecord(event.target);if(view.resolveResourceRecord){data.targetResource=view.resolveResourceRecord(event.target);}var fromSide=data.sourceTerminal.dataset.side,toSide=data.targetTerminal.dataset.side,updateValidity=function updateValidity(valid){data.valid=valid;event.target.classList.add(valid?'b-valid':'b-invalid');me.connector.classList.add(valid?'b-valid':'b-invalid');};var type;// NOTE: Top/Bottom sides are not taken into account due to
//       scheduler doesn't check for type value anyway, whereas
//       gantt will reject any other dependency types undefined in
//       DependencyBaseModel.Type enumeration.
switch(true){case fromSide==='left'&&toSide==='left':type=DependencyBaseModel.Type.StartToStart;break;case fromSide==='left'&&toSide==='right':type=DependencyBaseModel.Type.StartToEnd;break;case fromSide==='right'&&toSide==='left':type=DependencyBaseModel.Type.EndToStart;break;case fromSide==='right'&&toSide==='right':type=DependencyBaseModel.Type.EndToEnd;break;}data.valid=view.dependencyStore.isValidDependency(data.source.id,data.target.id,type);// Promise is returned when using the engine
if(data.valid instanceof Promise){data.valid.then(updateValidity);}else{updateValidity(data.valid);}}else{data.target=data.targetTerminal=null;data.valid=false;me.connector.classList.remove('b-valid');me.connector.classList.remove('b-invalid');}me.lastMouseMoveEvent=event;}/**
     * Create a new dependency if mouse release over valid terminal. Hides connector
     * @private
     */},{key:"onMouseUp",value:function onMouseUp(event){var me=this,data=me.creationData,target=event.target;// TODO: should call finalize and allow user to hook it (as in EventDrag, EventResize)
if(data.valid&&target.matches(".".concat(me.terminalCls))){data.targetTerminal=target;me.createDependency();data.valid=true;/**
             * Fired on the owning Scheduler/Gantt when a dependency drag creation operation succeeds
             * @event dependencyCreateDrop
             * @param {object} data
             */me.view.trigger('dependencyCreateDrop',{data:data});}else{data.valid=false;}/**
         * Fired on the owning Scheduler/Gantt after a dependency drag creation operation finished, no matter to outcome
         * @event afterDependencyCreateDrop
         * @param {object} data
         */me.view.trigger('afterDependencyCreateDrop',{data:data});me.abort();}/**
     * Aborts dependency creation, removes proxy and cleans up listeners
     */},{key:"abort",value:function abort(){var me=this,view=me.view,creationData=me.creationData;// Remove terminals from source and target events.
if(creationData){var source=creationData.source,sourceResource=creationData.sourceResource,target=creationData.target,targetResource=creationData.targetResource;if(source){var el=view.getElementFromEventRecord(source,sourceResource);if(el){me.hideTerminals(el);}}if(target){var _el=view.getElementFromEventRecord(target,targetResource);if(_el){me.hideTerminals(_el);}}}me.creationData=null;me.mouseDetacher&&me.mouseDetacher();me.removeConnector();}//endregion
//region Connector
/**
     * Creates a connector line that visualizes dependency source & target
     * @private
     */},{key:"createConnector",value:function createConnector(x,y){var me=this,view=me.view;me.connector=DomHelper.createElement({parent:view.timeAxisSubGridElement,className:"".concat(me.baseCls,"-connector"),style:"left:".concat(x,"px;top:").concat(y,"px")});view.element.classList.add('b-creating-dependency');if(me.showCreationTooltip){if(me.creationTooltip){me.creationTooltip.show();}else{me.creationTooltip=new Tooltip(Object.assign({id:"".concat(view.id,"-dependency-drag-tip"),cls:'b-sch-dependency-creation-tooltip',autoShow:true,anchorToTarget:false,trackMouse:true,// Do not constrain at all, want it to be able to go outside of the viewport to not get in the way
constrainTo:null,onBeforeAlign:function onBeforeAlign(e){return me.updateTipContent(e.source,me.creationData);},header:{dock:'right'}},me.creationTooltip||{}));}}view.scrollManager.startMonitoring({element:view.timeAxisSubGridElement,callback:function callback(){return me.creationData&&me.lastMouseMoveEvent&&me.onMouseMove(me.lastMouseMoveEvent);},thisObj:me});}/**
     * Remove connector
     * @private
     */},{key:"removeConnector",value:function removeConnector(callback){var me=this,connector=me.connector,view=me.view;if(connector){connector.classList.add('b-removing');connector.style.width='0';me.setTimeout(function(){connector.remove();me.connector=null;if(callback){callback.call(me);}},200);}view.element.classList.remove('b-creating-dependency');me.creationTooltip&&me.creationTooltip.hide();view.scrollManager.stopMonitoring(view.timeAxisSubGridElement);}//endregion
//region Terminals
/**
     * Show terminals for specified event at sides defined in #terminalSides.
     * @param {Scheduler.model.TimeSpan} timeSpanRecord Event/task to show terminals for
     * @param {HTMLElement} element Event/task element
     */},{key:"showTerminals",value:function showTerminals(timeSpanRecord,element){var me=this;if(!me.isCreateAllowed){return;}var cls=me.terminalCls,terminalsVisibleCls="".concat(cls,"s-visible");// We operate on the event bar, not the wrap
element=DomHelper.down(element,me.view.eventInnerSelector);// bail out if terminals already shown or if view is readonly
// do not draw new terminals if we are resizing event
if(element.classList.contains(terminalsVisibleCls)||this.view.element.classList.contains('b-resizing-event')||me.view.readOnly)return;// create terminals for desired sides
me.terminalSides.forEach(function(side){var terminal=DomHelper.createElement({parent:element,className:"".concat(cls," ").concat(cls,"-").concat(side),dataset:{side:side,feature:true}});terminal.detacher=EventHelper.on({element:terminal,mouseout:'onTerminalMouseOut',mousedown:{handler:'onTerminalMouseDown',capture:true},thisObj:me});});element.classList.add(terminalsVisibleCls);timeSpanRecord.cls.add(terminalsVisibleCls);me.showingTerminalsFor=element;}/**
     * Hide terminals for specified event
     * @param {HTMLElement} eventElement Event element
     */},{key:"hideTerminals",value:function hideTerminals(eventElement){// remove all terminals
var me=this,eventParams=me.client.getTimeSpanMouseEventParams(eventElement),timeSpanRecord=eventParams["".concat(this.eventName,"Record")],terminalsVisibleCls="".concat(me.terminalCls,"s-visible");DomHelper.forEachSelector(eventElement,".".concat(me.terminalCls),function(terminal){terminal.detacher&&terminal.detacher();terminal.remove();});DomHelper.down(eventElement,me.view.eventInnerSelector).classList.remove(terminalsVisibleCls);timeSpanRecord.cls.remove(terminalsVisibleCls);me.showingTerminalsFor=null;}//endregion
//region Dependency creation
/**
     * Create a new dependency from source terminal to target terminal
     * @internal
     */},{key:"createDependency",value:function createDependency(){var me=this,data=me.creationData,source=data.source,target=data.target,fromSide=data.sourceTerminal.dataset.side,toSide=data.targetTerminal.dataset.side,type=(fromSide==='left'?0:2)+(toSide==='right'?1:0);me.store.add({from:source.id,to:target.id,type:type,fromSide:fromSide,toSide:toSide});}//endregion
//region Tooltip
/**
     * Update dependency creation tooltip
     * @private
     */},{key:"updateTipContent",value:function updateTipContent(tip,data){var me=this;var valid=data.valid;Object.assign(data,{fromText:data.source.name,toText:data.target?data.target.name:'',fromSide:data.sourceTerminal.dataset.side,toSide:data.targetTerminal?data.targetTerminal.dataset.side:''});var tipTitleIconClsSuffix,tipTitleText;// Promise, when using engine
if(valid instanceof Promise){tip.element.classList.remove('b-invalid');tip.element.classList.add('b-checking');tipTitleIconClsSuffix='checking';tipTitleText=me.L('Checking');valid.then(function(valid){data.valid=valid;if(!tip.isDestroyed){me.updateTipContent(tip,data);}});}// Valid
else if(valid===true){tip.element.classList.remove('b-invalid');tip.element.classList.remove('b-checking');tipTitleIconClsSuffix='valid';tipTitleText=me.L('valid');}// Invalid
else{tip.element.classList.remove('b-checking');tip.element.classList.add('b-invalid');tipTitleIconClsSuffix='invalid';tipTitleText=me.L('invalid');}tip.titleElement.innerHTML="<i class=\"b-icon b-icon-".concat(tipTitleIconClsSuffix,"\"></i>").concat(tipTitleText);tip.html="<table class=\"b-sch-dependency-creation-tooltip\">\n                        <tr><td>".concat(me.L('from'),": </td><td>").concat(data.fromText,"</td><td><div class=\"b-sch-box b-").concat(data.fromSide,"\"></div></td></tr>\n                        <tr><td>").concat(me.L('to'),": </td><td>").concat(data.toText,"</td><td><div class=\"b-sch-box b-").concat(data.toSide,"\"></div></td></tr>\n                    </table>");}//endregion
},{key:"allowCreate",set:function set(value){this._allowCreate=value;this.updateCreateListeners();},get:function get(){return this._allowCreate;}},{key:"isCreateAllowed",get:function get(){return this.allowCreate&&!this.view.readOnly&&!this.disabled;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * `false` to not show a tooltip while creating a dependency
             * @config {Boolean}
             * @default
             */showCreationTooltip:true,/**
             * A tooltip config object that will be applied to the dependency creation tooltip
             * @config {Object}
             */creationTooltip:null,/**
             * CSS class used for terminals
             * @config {String}
             * @default
             */terminalCls:'b-sch-terminal',/**
             * Where (at events borders) to display terminals
             * @config {String[]}
             * @default
             */terminalSides:['left','top','right','bottom'],/**
             * Set to `false` to not allow creating dependencies
             * @config {Boolean}
             * @default
             */allowCreate:true};}}]);return DependencyCreation;}(Delayable(Target||Base)));};/**
 * @module Common/helper/WalkHelper
 */ /**
 * Tree walking helper
 * @internal
 */var WalkHelper=/*#__PURE__*/function(){function WalkHelper(){_classCallCheck2(this,WalkHelper);}_createClass2(WalkHelper,null,[{key:"preWalk",/**
     * Pre-walks any hierarchical data structure
     *
     * @param data Walking starting point
     * @param {Function} childrenFn Function to return `data` children entries in an array
     *                   or null if no children exists for the entry
     * @param {Function} fn Function to call on each entry
     */value:function preWalk(data,childrenFn,fn){var walkStack=[data],node,children;while(walkStack.length){node=walkStack.pop();fn(node);children=childrenFn(node);if(children){walkStack=walkStack.concat(children.slice().reverse());}}}/**
     * Pre-walk unordered.
     *
     * Like {@link #function-preWalk-static preWalk} but doesn't reverses children before walk,
     * thus children will be walked last child first - first child last
     *
     * @param data Walking starting point
     * @param {Function} childrenFn Function to return `data` children entries in an array
     *                   or null if no children exists for the entry
     * @param {Function} fn Function to call on each entry
     */},{key:"preWalkUnordered",value:function preWalkUnordered(data,childrenFn,fn){var walkStack=[data],node,children;while(walkStack.length){node=walkStack[walkStack.length-1];fn(node);children=childrenFn(node);if(children){walkStack.splice.apply(walkStack,[walkStack.length-1,1].concat(_toConsumableArray(children)));}else{walkStack.length=walkStack.length-1;}}}/**
     * Post-walks any hierarchical data structure
     *
     * @param data Walking starting point
     * @param {Function} childrenFn Function to return `data` children entries in an array
     *                   or null if no children exists for the entry
     * @param {Function} fn Function to call on each entry
     */},{key:"postWalk",value:function postWalk(data,childrenFn,fn){var visited=new Map(),walkStack=[data],node,children;while(walkStack.length){node=walkStack[walkStack.length-1];if(visited.has(node)){fn(node);walkStack.pop();}else{children=childrenFn(node);if(children){walkStack=walkStack.concat(children.slice().reverse());}visited.set(node,node);}}}/**
     * Pre/Post-walks any hierarchical data structure calling inFn each node when it walks in,
     * and outFn when it walks out.
     *
     * @param data Walking starting point
     * @param {Function} childrenFn Function to return `data` children entries in an array
     *                   or null if no children exists for the entry
     * @param {Function} inFn  Function to call on each entry upon enter
     * @param {Function} outFn Function to call on each entry upon exit
     */},{key:"prePostWalk",value:function prePostWalk(data,childrenFn,inFn,outFn){var visited=new Map(),walkStack=[data],node,children;while(walkStack.length){node=walkStack[walkStack.length-1];if(visited.has(node)){outFn(node);walkStack.pop();}else{inFn(node);children=childrenFn(node);if(children){walkStack=walkStack.concat(children.slice().reverse());}visited.set(node,node);}}}}]);return WalkHelper;}();WalkHelper._$name='WalkHelper';/**
 * @module Scheduler/util/RectangularPathFinder
 */ /**
 * Class which finds rectangular path, i.e. path with 90 degrees turns, between two boxes.
 * @private
 */var RectangularPathFinder=/*#__PURE__*/function(_Base8){_inherits2(RectangularPathFinder,_Base8);function RectangularPathFinder(){_classCallCheck2(this,RectangularPathFinder);return _possibleConstructorReturn2(this,_getPrototypeOf2(RectangularPathFinder).apply(this,arguments));}_createClass2(RectangularPathFinder,[{key:"findPath",/**
     * Returns list of horizontal and vertical segments connecting two boxes
     * <pre>
     *    |    | |  |    |       |
     *  --+----+----+----*-------*---
     *  --+=>Start  +----*-------*--
     *  --+----+----+----*-------*--
     *    |    | |  |    |       |
     *    |    | |  |    |       |
     *  --*----*-+-------+-------+--
     *  --*----*-+         End <=+--
     *  --*----*-+-------+-------+--
     *    |    | |  |    |       |
     * </pre>
     * Path goes by lines (-=) and turns at intersections (+), boxes depicted are adjusted by horizontal/vertical
     * margin and arrow margin, original boxes are smaller (path can't go at original box borders). Algorithm finds
     * the shortest path with minimum amount of turns. In short it's mix of "Lee" and "Dijkstra pathfinding"
     * with turns amount taken into account for distance calculation.
     *
     * The algorithm is not very performant though, it's O(N^2), where N is amount of
     * points in the grid, but since the maximum amount of points in the grid might be up to 34 (not 36 since
     * two box middle points are not permitted) that might be ok for now.
     *
     * @param {Object} lineDef An object containing any of the class configuration option overrides as well
     *                         as `startBox`, `endBox`, `startHorizontalMargin`, `startVerticalMargin`,
     *                         `endHorizontalMargin`, `endVerticalMargin` properties
     * @param {Object} lineDef.startBox An object containing `start`, `end`, `top`, `bottom` properties
     * @param {Object} lineDef.endBox   An object containing `start`, `end`, `top`, `bottom` properties
     * @param {Number} lineDef.startHorizontalMargin Horizontal margin override for start box
     * @param {Number} lineDef.startVerticalMargin   Vertical margin override for start box
     * @param {Number} lineDef.endHorizontalMargin   Horizontal margin override for end box
     * @param {Number} lineDef.endVerticalMargin     Vertical margin override for end box
     *
     *
     * @return {Object[]|Boolean} Array of line segments or false if path cannot be found
     * @return {Number} return.x1
     * @return {Number} return.y1
     * @return {Number} return.x2
     * @return {Number} return.y2
     */ //
//@ignore
//@privateparam {Function[]|Function} noPathFallbackFn
//     A function or array of functions which will be tried in case a path can't be found
//     Each function will be given a line definition it might try to adjust somehow and return.
//     The new line definition returned will be tried to find a path.
//     If a function returns false, then next function will be called if any.
//
value:function findPath(lineDef,noPathFallbackFn){var me=this,lineDefFull,startBox,endBox,startShift,endShift,startSide,endSide,startArrowSize,endArrowSize,startArrowMargin,endArrowMargin,horizontalMargin,verticalMargin,startHorizontalMargin,startVerticalMargin,endHorizontalMargin,endVerticalMargin,otherHorizontalMargin,otherVerticalMargin,otherBoxes,connStartPoint,connEndPoint,pathStartPoint,pathEndPoint,gridStartPoint,gridEndPoint,startGridBox,endGridBox,grid,path,tryNum;if(noPathFallbackFn&&!Array.isArray(noPathFallbackFn)){noPathFallbackFn=[noPathFallbackFn];}for(tryNum=0;lineDef&&!path;){lineDefFull=Object.assign(me.config,lineDef);startBox=lineDefFull.startBox;endBox=lineDefFull.endBox;startShift=lineDefFull.startShift;endShift=lineDefFull.endShift;startSide=lineDefFull.startSide;endSide=lineDefFull.endSide;startArrowSize=lineDefFull.startArrowSize;endArrowSize=lineDefFull.endArrowSize;startArrowMargin=lineDefFull.startArrowMargin;endArrowMargin=lineDefFull.endArrowMargin;horizontalMargin=lineDefFull.horizontalMargin;verticalMargin=lineDefFull.verticalMargin;startHorizontalMargin=lineDefFull.hasOwnProperty('startHorizontalMargin')?lineDefFull.startHorizontalMargin:horizontalMargin;startVerticalMargin=lineDefFull.hasOwnProperty('startVerticalMargin')?lineDefFull.startVerticalMargin:verticalMargin;endHorizontalMargin=lineDefFull.hasOwnProperty('endHorizontalMargin')?lineDefFull.endHorizontalMargin:horizontalMargin;endVerticalMargin=lineDefFull.hasOwnProperty('endVerticalMargin')?lineDefFull.endVerticalMargin:verticalMargin;otherHorizontalMargin=lineDefFull.hasOwnProperty('otherHorizontalMargin')?lineDefFull.otherHorizontalMargin:horizontalMargin;otherVerticalMargin=lineDefFull.hasOwnProperty('otherVerticalMargin')?lineDefFull.otherVerticalMargin:verticalMargin;otherBoxes=lineDefFull.otherBoxes;startSide=me.normalizeSide(startSide);endSide=me.normalizeSide(endSide);connStartPoint=me.getConnectionCoordinatesFromBoxSideShift(startBox,startSide,startShift);connEndPoint=me.getConnectionCoordinatesFromBoxSideShift(endBox,endSide,endShift);startGridBox=me.calcGridBaseBoxFromBoxAndDrawParams(startBox,startSide,startArrowSize,startArrowMargin,startHorizontalMargin,startVerticalMargin);endGridBox=me.calcGridBaseBoxFromBoxAndDrawParams(endBox,endSide,endArrowSize,endArrowMargin,endHorizontalMargin,endVerticalMargin);otherBoxes=otherBoxes&&otherBoxes.map(function(box){return me.calcGridBaseBoxFromBoxAndDrawParams(box,false,0,0,otherHorizontalMargin,otherVerticalMargin);});pathStartPoint=me.getConnectionCoordinatesFromBoxSideShift(startGridBox,startSide,startShift);pathEndPoint=me.getConnectionCoordinatesFromBoxSideShift(endGridBox,endSide,endShift);grid=me.buildPathGrid(startGridBox,endGridBox,pathStartPoint,pathEndPoint,startSide,endSide,otherBoxes);gridStartPoint=me.convertDecartPointToGridPoint(grid,pathStartPoint);gridEndPoint=me.convertDecartPointToGridPoint(grid,pathEndPoint);path=me.findPathOnGrid(grid,gridStartPoint,gridEndPoint,startSide,endSide);// Loop if
// - path is still not found
// - have no next line definition (which should be obtained from call to one of the functions from noPathFallbackFn array
// - have noPathFallBackFn array
// - current try number is less then noPathFallBackFn array length
for(lineDef=false;!path&&!lineDef&&noPathFallbackFn&&tryNum<noPathFallbackFn.length;tryNum++){lineDef=noPathFallbackFn[tryNum](lineDefFull);}}if(path){path=me.prependPathWithArrowStaffSegment(path,connStartPoint,startArrowSize,startSide);path=me.appendPathWithArrowStaffSegment(path,connEndPoint,endArrowSize,endSide);path=me.optimizePath(path);}return path;}},{key:"getConnectionCoordinatesFromBoxSideShift",value:function getConnectionCoordinatesFromBoxSideShift(box,side,shift){var coords;switch(side){case'left':coords={x:box.start,y:(box.top+box.bottom)/2+shift};break;case'right':coords={x:box.end,y:(box.top+box.bottom)/2+shift};break;case'top':coords={x:(box.start+box.end)/2+shift,y:box.top};break;case'bottom':coords={x:(box.start+box.end)/2+shift,y:box.bottom};break;}return coords;}},{key:"calcGridBaseBoxFromBoxAndDrawParams",value:function calcGridBaseBoxFromBoxAndDrawParams(box,side,arrowSize,arrowMargin,horizontalMargin,verticalMargin){var gridBox;switch(side){case'left':gridBox={start:box.start-Math.max(arrowSize+arrowMargin,horizontalMargin),end:box.end+horizontalMargin,top:box.top-verticalMargin,bottom:box.bottom+verticalMargin};break;case'right':gridBox={start:box.start-horizontalMargin,end:box.end+Math.max(arrowSize+arrowMargin,horizontalMargin),top:box.top-verticalMargin,bottom:box.bottom+verticalMargin};break;case'top':gridBox={start:box.start-horizontalMargin,end:box.end+horizontalMargin,top:box.top-Math.max(arrowSize+arrowMargin,verticalMargin),bottom:box.bottom+verticalMargin};break;case'bottom':gridBox={start:box.start-horizontalMargin,end:box.end+horizontalMargin,top:box.top-verticalMargin,bottom:box.bottom+Math.max(arrowSize+arrowMargin,verticalMargin)};break;default:gridBox={start:box.start-horizontalMargin,end:box.end+horizontalMargin,top:box.top-verticalMargin,bottom:box.bottom+verticalMargin};}return gridBox;}},{key:"buildPathGrid",value:function buildPathGrid(startGridBox,endGridBox,pathStartPoint,pathEndPoint,startSide,endSide,otherGridBoxes){var xs,ys,y,x,ix,iy,xslen,yslen,ib,blen,box,permitted,point,points={},linearPoints=[];xs=[startGridBox.start,startSide==='left'||startSide==='right'?(startGridBox.start+startGridBox.end)/2:pathStartPoint.x,startGridBox.end,endGridBox.start,endSide==='left'||endSide==='right'?(endGridBox.start+endGridBox.end)/2:pathEndPoint.x,endGridBox.end];ys=[startGridBox.top,startSide==='top'||startSide==='bottom'?(startGridBox.top+startGridBox.bottom)/2:pathStartPoint.y,startGridBox.bottom,endGridBox.top,endSide==='top'||endSide==='bottom'?(endGridBox.top+endGridBox.bottom)/2:pathEndPoint.y,endGridBox.bottom];if(otherGridBoxes){otherGridBoxes.forEach(function(box){xs.push(box.start,(box.start+box.end)/2,box.end);ys.push(box.top,(box.top+box.bottom)/2,box.bottom);});}xs=_toConsumableArray(new Set(xs.sort(function(a,b){return a-b;})));ys=_toConsumableArray(new Set(ys.sort(function(a,b){return a-b;})));// TODO: fastest way to make unique, Set is slower
// for ( let i = 0, I = array.length; i < I; i++ ) {
//     if ( ~array.indexOf( array[ i ], i + 1 ) ) {
//         array.splice( i, 1 );
//         i--;
//         I--;
//     }
// }
for(iy=0,yslen=ys.length;iy<yslen;++iy){points[iy]=points[iy]||{};y=ys[iy];for(ix=0,xslen=xs.length;ix<xslen;++ix){x=xs[ix];permitted=(x<=startGridBox.start||x>=startGridBox.end||y<=startGridBox.top||y>=startGridBox.bottom)&&(x<=endGridBox.start||x>=endGridBox.end||y<=endGridBox.top||y>=endGridBox.bottom);if(otherGridBoxes){for(ib=0,blen=otherGridBoxes.length;permitted&&ib<blen;++ib){box=otherGridBoxes[ib];permitted=x<=box.start||x>=box.end||y<=box.top||y>=box.bottom||// Allow point if it is a path start/end even if point is inside any box
x===pathStartPoint.x&&y===pathStartPoint.y||x===pathEndPoint.x&&y===pathEndPoint.y;}}point={distance:Math.pow(2,53)-1,// Number.MAX_SAFE_INTEGER (not supported in Opera/IE)
permitted:permitted,x:x,y:y,ix:ix,iy:iy};points[iy][ix]=point;linearPoints.push(point);}}return{width:xs.length,height:ys.length,xs:xs,ys:ys,points:points,linearPoints:linearPoints};}},{key:"convertDecartPointToGridPoint",value:function convertDecartPointToGridPoint(grid,point){var x=grid.xs.indexOf(point.x),y=grid.ys.indexOf(point.y);return grid.points[y][x];}},{key:"findPathOnGrid",value:function findPathOnGrid(grid,gridStartPoint,gridEndPoint,startSide,endSide){var me=this,path=false;if(gridStartPoint.permitted&&gridEndPoint.permitted){grid=me.waveForward(grid,gridStartPoint,0);path=me.collectPath(grid,gridEndPoint,endSide);}return path;}// Returns neighbors from Von Neiman ambit (see Lee pathfinding algorithm description)
},{key:"getGridPointNeighbors",value:function getGridPointNeighbors(grid,gridPoint,predicateFn){var ix=gridPoint.ix,iy=gridPoint.iy,result=[],neighbor;// NOTE:
// It's important to push bottom neighbors first since this method is used
// in collectPath(), which reversively collects path from end to start node
// and if bottom neighbors are pushed first in result array then collectPath()
// will produce a line which is more suitable (pleasant looking) for our purposes.
if(iy<grid.height-1){neighbor=grid.points[iy+1][ix];(!predicateFn||predicateFn(neighbor))&&result.push(neighbor);}if(iy>0){neighbor=grid.points[iy-1][ix];(!predicateFn||predicateFn(neighbor))&&result.push(neighbor);}if(ix<grid.width-1){neighbor=grid.points[iy][ix+1];(!predicateFn||predicateFn(neighbor))&&result.push(neighbor);}if(ix>0){neighbor=grid.points[iy][ix-1];(!predicateFn||predicateFn(neighbor))&&result.push(neighbor);}return result;}},{key:"waveForward",value:function waveForward(grid,gridStartPoint,distance){var me=this;// I use the WalkHelper here because a point on a grid and it's neighbors might be considered as a hierarchy.
// The point is the parent node, and it's neighbors are the children nodes. Thus the grid here is hierarchical
// data structure which can be walked. WalkHelper walks non-recursivelly which is exactly what I need as well.
WalkHelper.preWalkUnordered(// Walk starting point - a node is a grid point and it's distance from the starting point
[gridStartPoint,distance],// Children query function
// NOTE: It's important to fix neighbor distance first, before waving to a neighbor, otherwise waving might
//       get through a neighbor point setting it's distance to a value more then (distance + 1) whereas we,
//       at the children quering moment in time, already know that the possibly optimal distance is (distance + 1)
function(_ref209){var _ref210=_slicedToArray(_ref209,2),point=_ref210[0],distance=_ref210[1];return me.getGridPointNeighbors(grid,point,function(neighborPoint){return neighborPoint.permitted&&neighborPoint.distance>distance+1;}).map(function(neighborPoint){return[neighborPoint,distance+1];}// Neighbor distance fixation
);},// Walk step iterator function
function(_ref211){var _ref212=_slicedToArray(_ref211,2),point=_ref212[0],distance=_ref212[1];return point.distance=distance;}// Neighbor distance applying
);return grid;}},{key:"collectPath",value:function collectPath(grid,gridEndPoint,endSide){var me=this,pathFound=true,neighbors,lowestDistanceNeighbor,xDiff,yDiff,path=[];while(pathFound&&gridEndPoint.distance){neighbors=me.getGridPointNeighbors(grid,gridEndPoint,function(point){return point.permitted&&point.distance==gridEndPoint.distance-1;});pathFound=neighbors.length>0;if(pathFound){// Prefer turnless neighbors first
neighbors=neighbors.sort(function(a,b){var xDiff,yDiff;xDiff=a.ix-gridEndPoint.ix;yDiff=a.iy-gridEndPoint.iy;var resultA=(endSide==='left'||endSide==='right')&&yDiff===0||(endSide==='top'||endSide==='bottom')&&xDiff===0?-1:1;xDiff=b.ix-gridEndPoint.ix;yDiff=b.iy-gridEndPoint.iy;var resultB=(endSide==='left'||endSide==='right')&&yDiff===0||(endSide==='top'||endSide==='bottom')&&xDiff===0?-1:1;if(resultA>resultB)return 1;if(resultA<resultB)return-1;// apply additional sorting to be sure to pick bottom path in IE
if(resultA===resultB)return a.y>b.y?-1:1;});lowestDistanceNeighbor=neighbors[0];path.push({x1:lowestDistanceNeighbor.x,y1:lowestDistanceNeighbor.y,x2:gridEndPoint.x,y2:gridEndPoint.y});// Detecting new side, either xDiff or yDiff must be 0 (but not both)
xDiff=lowestDistanceNeighbor.ix-gridEndPoint.ix;yDiff=lowestDistanceNeighbor.iy-gridEndPoint.iy;switch(true){case!yDiff&&xDiff>0:endSide='left';break;case!yDiff&&xDiff<0:endSide='right';break;case!xDiff&&yDiff>0:endSide='top';break;case!xDiff&&yDiff<0:endSide='bottom';break;}gridEndPoint=lowestDistanceNeighbor;}}return pathFound&&path.reverse()||false;}},{key:"prependPathWithArrowStaffSegment",value:function prependPathWithArrowStaffSegment(path,connStartPoint,startArrowSize,startSide){var prependSegment,firstSegment;if(path.length>0){firstSegment=path[0];prependSegment={x2:firstSegment.x1,y2:firstSegment.y1};switch(startSide){case'left':prependSegment.x1=connStartPoint.x-startArrowSize;prependSegment.y1=firstSegment.y1;break;case'right':prependSegment.x1=connStartPoint.x+startArrowSize;prependSegment.y1=firstSegment.y1;break;case'top':prependSegment.x1=firstSegment.x1;prependSegment.y1=connStartPoint.y-startArrowSize;break;case'bottom':prependSegment.x1=firstSegment.x1;prependSegment.y1=connStartPoint.y+startArrowSize;break;}path.unshift(prependSegment);}return path;}},{key:"appendPathWithArrowStaffSegment",value:function appendPathWithArrowStaffSegment(path,connEndPoint,endArrowSize,endSide){var appendSegment,lastSegment;if(path.length>0){lastSegment=path[path.length-1];appendSegment={x1:lastSegment.x2,y1:lastSegment.y2};switch(endSide){case'left':appendSegment.x2=connEndPoint.x-endArrowSize;appendSegment.y2=lastSegment.y2;break;case'right':appendSegment.x2=connEndPoint.x+endArrowSize;appendSegment.y2=lastSegment.y2;break;case'top':appendSegment.x2=lastSegment.x2;appendSegment.y2=connEndPoint.y-endArrowSize;break;case'bottom':appendSegment.x2=lastSegment.x2;appendSegment.y2=connEndPoint.y+endArrowSize;break;}path.push(appendSegment);}return path;}},{key:"optimizePath",value:function optimizePath(path){var optPath=[],prevSegment,curSegment;if(path.length>0){prevSegment=path.shift();optPath.push(prevSegment);while(path.length>0){curSegment=path.shift();// both segments are equal
if(prevSegment.x1==curSegment.x1&&prevSegment.y1==curSegment.y1&&prevSegment.x2==curSegment.x2&&prevSegment.y2==curSegment.y2){prevSegment=curSegment;}// both segments are horizontal
else if(prevSegment.y1-prevSegment.y2===0&&curSegment.y1-curSegment.y2===0){prevSegment.x2=curSegment.x2;}// both segments are vertical
else if(prevSegment.x1-prevSegment.x2===0&&curSegment.x1-curSegment.x2===0){prevSegment.y2=curSegment.y2;}// segments has different orientation (path turn)
else{optPath.push(curSegment);prevSegment=curSegment;}}}return optPath;}},{key:"normalizeSide",value:function normalizeSide(side){return RectangularPathFinder.sideToSide[side]||side;}}],[{key:"defaultConfig",get:function get(){return{/**
             * Default start connection side: 'left', 'right', 'top', 'bottom'
             * @config {String|Boolean}
             * @default
             */startSide:'right',/**
             * Default start arrow size in pixels
             * @config {Number}
             * @default
             */startArrowSize:0,/**
             * Default start arrow staff size in pixels
             * @config {Number}
             * @default
             */startArrowMargin:12,/**
             * Default starting connection point shift from box's arrow pointing side middle point
             * @config {Number}
             * @default
             */startShift:0,/**
             * Default end arrow pointing direction, possible values are: 'left', 'right', 'top', 'bottom'
             * @config {String|Boolean}
             * @default
             */endSide:'left',/**
             * Default end arrow size in pixels
             * @config {Number}
             * @default
             */endArrowSize:0,/**
             * Default end arrow staff size in pixels
             * @config {Number}
             * @default
             */endArrowMargin:12,/**
             * Default ending connection point shift from box's arrow pointing side middle point
             * @config {Number}
             * @default
             */endShift:0,/**
             * Start / End box vertical margin, the amount of pixels from top and bottom line of a box where drawing
             * is prohibited
             * @config {Number}
             * @default
             */verticalMargin:2,/**
             * Start / End box horizontal margin, the amount of pixels from left and right line of a box where drawing
             * @config {Number}
             * @default
             */horizontalMargin:5,/**
             * Other rectangular areas (obstacles) to search path through
             * @config {Object[]}
             * @default
             */otherBoxes:null};}},{key:"sideToSide",get:function get(){return{'l':'left','r':'right','t':'top','b':'bottom'};}}]);return RectangularPathFinder;}(Base);exports.RectangularPathFinder=RectangularPathFinder;RectangularPathFinder._$name='RectangularPathFinder';/**
 * @module Scheduler/feature/Dependencies
 */var fromBoxSide=['left','left','right','right'],toBoxSide=['left','right','left','right'];/**
 * Feature that draws dependencies between events Uses a {@link Scheduler.data.DependencyStore DependencyStore} to determine which dependencies to draw, if
 * none is defined one will be created automatically. Dependencies can also be specified as Scheduler#dependencies, see
 * example below.
 *
 * This feature is **disabled** by default. It is **not** supported in vertical mode.
 *
 * @mixes Scheduler/feature/mixin/DependencyCreation
 *
 * @extends Common/mixin/InstancePlugin
 * @demo dependencies
 * @externalexample scheduler/Dependencies.js
 */var Dependencies=/*#__PURE__*/function(_DependencyCreation){_inherits2(Dependencies,_DependencyCreation);function Dependencies(){_classCallCheck2(this,Dependencies);return _possibleConstructorReturn2(this,_getPrototypeOf2(Dependencies).apply(this,arguments));}_createClass2(Dependencies,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;me.scheduler=client;if(client.isVertical){throw new Error('Dependencies feature is not supported in vertical mode');}// Many things may schedule a draw. Ensure it only happens once, on the next frame.
// And Ensure it really is on the *next* frame after invocation by passing
// the cancelOutstanding flag.
me.doScheduleDraw=me.createOnFrame('draw',[],me,true);// use scheduler's/gantt's DependencyStore if available
if(client.dependencyStore){config.store=client.dependencyStore;}_get2(_getPrototypeOf2(Dependencies.prototype),"construct",this).call(this,client,config);client.store.on({refresh:me.onRowStoreRefresh,thisObj:me});client.rowManager.on({// TODO: check if these are needed, might be enough with chained renderContents
translaterow:me.onTranslateRow,refresh:me.onRowsRefresh,rerender:me.onRowsRerender,changetotalheight:me.onChangeTotalHeight,thisObj:me});// dependencies are drawn on scroll, both horizontal and vertical
client.on({horizontalscroll:me.onHorizontalScroll,svgcanvascreated:me.createMarkers,togglenode:me.onToggleNode,scroll:me.onVerticalScroll,//            eventlayout      : me.onEventLayout,
timelineviewportresize:me.onViewportResize,thisObj:me});me.bindEventStoreListeners();me.pathFinder=new RectangularPathFinder(me.pathFinderConfig);delete me.pathFinderConfig;me.lineDefAdjusters=me.createLineDefAdjusters();// expose getter/setter for dependencies on scheduler
Object.defineProperty(client,'dependencies',{configurable:true,get:function get(){return me.store.records;},set:function set(dependencies){return me.store.data=dependencies;}});}},{key:"doDestroy",value:function doDestroy(){this.tooltip&&this.tooltip.destroy();_get2(_getPrototypeOf2(Dependencies.prototype),"doDestroy",this).call(this);}},{key:"createMarkers",value:function createMarkers(){var me=this,svg=me.client.svgCanvas,endMarker=me.endMarker=me.initMarkerElement('arrowEnd','8','M0,0 L0,6 L9,3 z');// Edge and IE11 do not support required svg 2.0 orient value
if(BrowserHelper.isEdge||BrowserHelper.isIE11){var startMarker=me.startMarker=me.initMarkerElement('arrowStart','1','M0,3 L9,6 L9,0 z');svg.appendChild(startMarker);}else{endMarker.setAttribute('orient','auto-start-reverse');}svg.appendChild(endMarker);}/**
     * Creates SVG marker element (arrow) which is used for all dependency lines
     * @private
     * @param {String} id Id of the marker element
     * @param {String} refX
     * @param {String} arrowPath Path defining arrow
     */},{key:"initMarkerElement",value:function initMarkerElement(id,refX,arrowPath){return DomHelper.createElement({id:id,tag:'marker',ns:'http://www.w3.org/2000/svg',markerHeight:9,markerWidth:9,refX:refX,refY:3,viewBox:'0 0 9 6',orient:'auto',markerUnits:'userSpaceOnUse',children:[{tag:'path',ns:'http://www.w3.org/2000/svg',d:arrowPath}]});}/**
     * Returns an array of functions used to alter path config when no path found.
     * It first tries to shrink arrow margins and secondly hides arrows entirely
     * @private
     * @returns {Function[]}
     */},{key:"createLineDefAdjusters",value:function createLineDefAdjusters(){var client=this.client;function shrinkArrowMargins(lineDef){var adjusted=false;if(lineDef.startArrowMargin>client.barMargin||lineDef.endArrowMargin>client.barMargin){lineDef.startArrowMargin=lineDef.endArrowMargin=client.barMargin;adjusted=true;}return adjusted?lineDef:adjusted;}function resetArrowMargins(lineDef){var adjusted=false;if(lineDef.startArrowMargin>0||lineDef.endArrowMargin>0){lineDef.startArrowMargin=lineDef.endArrowMargin=0;adjusted=true;}return adjusted?lineDef:adjusted;}// function shrinkStartEndMarginsBy2(lineDef) {
//     let adjusted = false;
//
//     if (lineDef.hasOwnProperty('startHorizontalMargin') && lineDef.startHorizontalMargin > 2) {
//         lineDef.startHorizontalMargin = Math.round(lineDef.startHorizontalMargin / 2);
//         adjusted = true;
//     }
//     if (lineDef.hasOwnProperty('startVerticalMargin') && lineDef.startVerticalMargin > 2) {
//         lineDef.startVerticalMargin = Math.round(lineDef.startVerticalMargin / 2);
//         adjusted = true;
//     }
//     if (lineDef.hasOwnProperty('endHorizontalMargin') && lineDef.endHorizontalMargin > 2) {
//         lineDef.endHorizontalMargin = Math.round(lineDef.endHorizontalMargin / 2);
//         adjusted = true;
//     }
//     if (lineDef.hasOwnProperty('endVerticalMargin') && lineDef.endVerticalMargin > 2) {
//         lineDef.endVerticalMargin = Math.round(lineDef.endVerticalMargin / 2);
//         adjusted = true;
//     }
//
//     return adjusted ? lineDef : adjusted;
// }
//
// function resetArrowSizes(lineDef) {
//     let adjusted = false;
//
//     if (lineDef.startArrowSize > 0 || lineDef.endArrowSize > 0) {
//         lineDef.startArrowSize = lineDef.endArrowSize = 0;
//         adjusted = true;
//     }
//
//     return adjusted ? lineDef : adjusted;
// }
return[shrinkArrowMargins,resetArrowMargins//,
// shrinkStartEndMarginsBy2,
// shrinkStartEndMarginsBy2,
// shrinkStartEndMarginsBy2,
// resetArrowSizes
];}//endregion
//region Elements
},{key:"getElementForDependency",value:function getElementForDependency(dependency){var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var selector="[depId=\"".concat(dependency.id,"\"]");if(assignmentData){selector+="[fromId=\"".concat(assignmentData.from.id,"\"][toId=\"").concat(assignmentData.to.id,"\"]");}return this.client.svgCanvas.querySelector(selector);}},{key:"getDependencyForElement",value:function getDependencyForElement(element){var id=typeof element==='string'?element:element.getAttribute('depId');return this.store.getById(id);}//endregion
//region Events
//region Events that triggers redraw
},{key:"onToggleNode",value:function onToggleNode(){// Need to repopulate grid cache
this.dependencyGridCache=null;// node toggled in tree, can affect resources both above and below, need to redraw all.
this.scheduleDraw(true);}// onEventLayout() {
//     this.scheduleDraw(true);
// }
},{key:"onViewportResize",value:function onViewportResize(){this.scheduleDraw(true);}/**
     * Flags for redrawing if a rows height has changed
     * @private
     */},{key:"onTranslateRow",value:function onTranslateRow(_ref213){var row=_ref213.row;// a changetotalheight event is fired after translations, if a rowHeight change is detected here it will redraw
// all dependencies
if(row.lastTop>=0&&row.top!==row.lastTop){this.scheduleDraw(true);}}/**
     * Redraws all dependencies if a rows height changed, as detected in onTranslateRow
     * @private
     */},{key:"onChangeTotalHeight",value:function onChangeTotalHeight(){// redraw all dependencies if the height changes. Could be caused by resource add/remove.
// in reality not all deps needs to be redrawn, those fully above the row which changed height could be left
// as is, but determining that would likely require more processing than redrawing
this.scheduleDraw(true);}/**
     * Draws dependencies on horizontal scroll
     * @private
     */},{key:"onHorizontalScroll",value:function onHorizontalScroll(){// ResizeMonitor triggers scroll during render, make sure we have been drawn some other way before redrawing
if(this.isDrawn){this.scheduleDraw(false);}}/**
     * Draws dependencies on vertical scroll
     * @private
     */},{key:"onVerticalScroll",value:function onVerticalScroll(){// ResizeMonitor triggers scroll during render, make sure render is done
if(this.isDrawn){// Do not invalidate on scroll, if height changes it will be invalidated anyway
this.scheduleDraw(false);}}},{key:"onRowsRefresh",value:function onRowsRefresh(){this.scheduleDraw(true);}/**
     * When rows are rerendered, better redraw dependencies (might have been collapsed etc).
     * @private
     */},{key:"onRowsRerender",value:function onRowsRerender(){this.scheduleDraw(true);}/**
     * Redraws dependencies when a row has changed
     * @private
     */},{key:"onRowStoreRefresh",value:function onRowStoreRefresh(_ref214){var action=_ref214.action;switch(action){case'sort':case'filter':case'batch':// Will need to recreate grid cache after sort, filter, and any unspecified
// set of operations encapsulated by a batch, and redraw everything
this.dependencyGridCache=null;return this.scheduleDraw(true);}}/**
     * Redraws dependencies when a dependency has changed
     * @private
     */},{key:"onDependencyChange",value:function onDependencyChange(_ref215){var action=_ref215.action,record=_ref215.record,records=_ref215.records;var me=this;if(!me.scheduler.rendered||me.disabled){return;}switch(action){case'dataset':me.dependencyGridCache={};// dataset should fall through to add after clearing the cache
// eslint disable no-fallthrough
case'add':// dependency added, draw it
// Check if there is a cache exists. If it does - use it,
// if not - create one after all records are drawn, this will cache all existing records
var cache=me._dependencyGridCache;records.forEach(function(dependency){// Previously this code would draw added dependencies here, no matter if in view or not. To not have
// to have the logic for determining whats in view or not here also, simply do a full draw below.
// Old approach was especially costly when using CrudManager, which adds on load
cache&&me.addToGridCache(dependency);});if(!cache){me._thisIsAUsedExpression(me.dependencyGridCache);}me.scheduleDraw();return;case'update':// Dependency updated. Might have changed source or target, redraw it completely
return me.scheduleRefreshDependency(record);case'remove':// dependencies removed, release elements and remove from cache
records.forEach(function(dependency){me.releaseDependency(dependency,true);me.removeFromCache(dependency);});me.client.trigger('dependenciesDrawn');return;// Removing all or filtering -> full redraw
case'removeall':case'filter':me.dependencyGridCache=null;// continue to schedule draw
break;}// other changes (removeall, dataset, filter) trigger full redraw
me.scheduleDraw(true);}/**
     * Attaches listeners to related event store, clears old listener if one exists
     * @private
     */},{key:"bindEventStoreListeners",value:function bindEventStoreListeners(){var me=this;me._eventStoreListenersDetacher&&me._eventStoreListenersDetacher();// Maps to taskStore for Gantt
me._eventStoreListenersDetacher=me.store.eventStore.on({change:me.onEventChange,thisObj:me});}/**
     * Redraws dependencies when an event has changed
     * @private
     */},{key:"onEventChange",value:function onEventChange(_ref216){var action=_ref216.action,record=_ref216.record;switch(action){case'filter':// filtering events, need to redraw all dependencies
return this.scheduleDraw(true);case'update':// event updated, redraw its dependencies
return this.drawForTimeSpan(record,true);case'removeall':this.resetGridCache();return this.scheduleDraw(true);}// adding event has no effect on dependencies, unless it changes row height. in which case it will be handled
// by onTranslateRow().
// updating an event might also change row height, handled the same way.
// removing events will also remove dependencies, thus handled in onDependencyChange
}},{key:"onAssignmentRefresh",value:function onAssignmentRefresh(_ref217){var action=_ref217.action;if(action==='dataset'){// Assigning using EventEdit replaces all assignments. Taking the easy way out, throwing cache away
this.resetGridCache();this.scheduleDraw(true);}}},{key:"onAssignmentChange",value:function onAssignmentChange(_ref218){var action=_ref218.action,record=_ref218.record,records=_ref218.records;var me=this;if(record){records=[record];}if(action==='add'||action==='remove'||action==='update'){records.forEach(function(assignment){var dependencies=assignment.event?me.store.getEventDependencies(assignment.event):[];dependencies.forEach(function(dependency){// New assignment added by other means than EventEdit
if(action==='add'){me.scheduleRefreshDependency(dependency);}// Event unassigned, remove dep line
else if(action==='remove'){var assignments;// Removed source?
if(dependency.from===assignment.eventId){// Might point to a multi assigned event, need to remove all lines
assignments=dependency.targetEvent.assignments.map(function(to){return{from:assignment,to:to};});}// Nope, target
else{// Might point to a multi assigned event, need to remove all lines
assignments=dependency.sourceEvent.assignments.map(function(from){return{from:from,to:assignment};});}assignments.forEach(function(assignmentData){me.releaseDependency(dependency,assignmentData);me.removeFromCache(dependency,assignmentData);});}// Single assignment updated, redraw lines for it
else if(action==='update'){var _assignments=me.getDependencyAssignments(dependency).filter(function(a){return a&&(a.from===record||a.to===record);});_assignments.forEach(function(assignmentData){me.scheduleRefreshDependency(dependency,assignmentData);});}});});}}//endregion
},{key:"onElementClick",value:function onElementClick(event){var me=this;if(event.target.matches('.'+me.baseCls)){var dependency=DomDataStore.get(event.target).dependency,eventName=event.type==='click'?'Click':'DblClick';/**
             * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
             * @event dependencyClick
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.model.DependencyModel} dependency
             * @param {MouseEvent} event
             */ /**
             * Fires on the owning Scheduler/Gantt when a click is registered on a dependency line.
             * @event dependencyDblClick
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.model.DependencyModel} dependency
             * @param {MouseEvent} event
             */me.client.trigger("dependency".concat(eventName),{dependency:dependency,event:event});}}},{key:"onElementDblClick",value:function onElementDblClick(event){return this.onElementClick(event);}},{key:"onElementMouseOver",value:function onElementMouseOver(event){var me=this;if(event.target.matches('.'+me.baseCls)){var dependency=DomDataStore.get(event.target).dependency;/**
             * Fires on the owning Scheduler/Gantt when the mouse moves over a dependency line.
             * @event dependencyMouseOver
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.model.DependencyModel} dependency
             * @param {MouseEvent} event
             */me.client.trigger('dependencyMouseOver',{dependency:dependency,event:event});if(me.overCls)me.highlight(dependency,me.overCls);}}},{key:"onElementMouseOut",value:function onElementMouseOut(event){var me=this;if(event.target.matches('.'+me.baseCls)){var dependency=DomDataStore.get(event.target).dependency;/**
             * Fires on the owning Scheduler/Gantt when the mouse moves out of a dependency line.
             * @event dependencyMouseOut
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.model.DependencyModel} dependency
             * @param {MouseEvent} event
             */me.client.trigger('dependencyMouseOut',{dependency:dependency,event:event});if(me.overCls&&!dependency.meta.removed)me.unhighlight(dependency);}}//endregion
//region Highlight
},{key:"highlight",value:function highlight(dependency){var cls=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.overCls;var element=this.getElementForDependency(dependency);element&&element.classList.add(cls);dependency.highlight(cls);}},{key:"unhighlight",value:function unhighlight(dependency){var cls=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.overCls;var element=this.getElementForDependency(dependency);element&&element.classList.remove(cls);dependency.unhighlight(cls);}},{key:"highlightEventDependencies",value:function highlightEventDependencies(timespan){var _this66=this;timespan.allDependencies.forEach(function(dep){return _this66.highlight(dep);});}},{key:"unhighlightEventDependencies",value:function unhighlightEventDependencies(timespan){var _this67=this;timespan.allDependencies.forEach(function(dep){return _this67.unhighlight(dep);});}//endregion
//region Determining dependencies to draw
// Neither resource can be hidden for a dependency to be considered visible
},{key:"isDependencyVisible",value:function isDependencyVisible(dependency){var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var from=dependency.sourceEvent,to=dependency.targetEvent;// Bail out early in case source or target doesn't exist
if(!(from&&to)){return false;}var fromResource,toResource;// Using multi-assignment, resource obtained from assignment
if(assignmentData){fromResource=assignmentData.from.resource;toResource=assignmentData.to.resource;var eventStore=this.client.eventStore;// Filtering EventStore does not filter AssignmentStore, determine if Event is available in this case
if(eventStore.isFiltered&&(eventStore.indexOf(from)===-1||eventStore.indexOf(to)===-1)){return false;}}// Not using assignments, resource obtained from event
else{fromResource=from.resource;toResource=to.resource;}return from instanceof Model&&// Verify these are real existing Resources and not placeholders (resource not existing in resource store)
fromResource instanceof ResourceModel&&toResource instanceof ResourceModel&&!fromResource.instanceMeta(this.scheduler.store).hidden&&!toResource.instanceMeta(this.scheduler.store).hidden;}// Get the bounding box for either the source or the target event
},{key:"getBox",value:function getBox(dependency,source){var assignmentData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var eventRecord=this.getTimeSpanRecordFromDependency(dependency,source);var resource;// Multi-assignment, get resource from assignment
if(assignmentData){resource=assignmentData[source?'from':'to'].resource;}// Single, get resource from event
else{resource=eventRecord.resource;}// TODO: change getResourceEventBox to use Rectangle
return this.scheduler.getResourceEventBox(eventRecord,resource,true);}// Get source or target events resource
},{key:"getRowRecordFromDependency",value:function getRowRecordFromDependency(dependency,source,assignmentData){// Multi-assigned, use assignments resource
if(assignmentData){return assignmentData[source?'from':'to'].resource;}// Not multi-assigned, get events resource
return this.getTimeSpanRecordFromDependency(dependency,source).resource;}// Get source or target event
},{key:"getTimeSpanRecordFromDependency",value:function getTimeSpanRecordFromDependency(dependency){var source=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return dependency["".concat(source?'source':'target',"Event")];}},{key:"getMetaId",value:function getMetaId(){var assignmentData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return assignmentData?"".concat(this.client.id,"-ass").concat(assignmentData.from.id,"-ass").concat(assignmentData.to.id):this.client.id;}// Gets the source and target events bounds and unions them to determine the dependency bounds
},{key:"getDependencyBounds",value:function getDependencyBounds(dependency){var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var me=this,client=me.client,ddr=dependency.getDateRange();// quick bailout for hidden rows
if(!client.rowManager.rowCount||!me.isDependencyVisible(dependency,assignmentData)){return null;}// quick bailout in case dependency dates and view dates do not intersect
if(!(ddr&&DateHelper.intersectSpans(ddr.start,ddr.end,client.startDate,client.endDate))){return null;}var metaId=me.getMetaId(assignmentData),instanceMeta=dependency.instanceMeta(metaId);// If we are forcing recalculation of dep bounds, or there are no calculated bounds for this dependency
// or the calculated bounds were based on a "best guess", then recalculate the bounds.
if(me._resetBoundsCache||!instanceMeta.bounds||!instanceMeta.bounds.layout){var startBox=me.getBox(dependency,true,assignmentData),endBox=me.getBox(dependency,false,assignmentData);// cant draw dependency if either start or end is in collapsed row
if(!startBox||!endBox){return null;}var from=me.getTimeSpanRecordFromDependency(dependency,true),to=me.getTimeSpanRecordFromDependency(dependency,false),startRectangle=new Rectangle(startBox.start,startBox.top,startBox.end-startBox.start,startBox.bottom-startBox.top),endRectangle=new Rectangle(endBox.start,endBox.top,endBox.end-endBox.start,endBox.bottom-endBox.top),bounds=Rectangle.union(startRectangle,endRectangle);[[from,startRectangle,startBox],[to,endRectangle,endBox]].map(function(_ref219){var _ref220=_slicedToArray(_ref219,3),record=_ref220[0],rectangle=_ref220[1],eventBox=_ref220[2];// When using other milestoneLayoutMode than default milestones should be treated as normal events.
// Milestones are zero width by default, so we must measure the milestone el's height
// (or icon el width) and use that as the width. We cannot use the event's calculated height because
// if there are labels, the milestone diamond will be smaller.
// If the event doesn't have an element, then it's outside of the rendered block and the exact
// width doesn't matter.
if(client.milestoneLayoutMode==='default'&&record.isMilestone){if(!client.milestoneWidth&&eventBox.eventEl){client.milestoneWidth=record.iconCls?eventBox.eventEl.firstElementChild.offsetWidth:parseInt(window.getComputedStyle(eventBox.eventEl,':before').fontSize);}// If it could not be measured due to the event being outside of the rendered block
// we have to use the calculated height.
var milestoneWidth=client.milestoneWidth||rectangle.height;rectangle.left-=milestoneWidth/2;rectangle.right+=milestoneWidth/2;}});instanceMeta.bounds={bounds:bounds,startRectangle:startRectangle,endRectangle:endRectangle,// Cache whether both rectangles are based on the true layout
// or a best guess approximation to be recalculated
// next time through.
layout:startBox.layout&&endBox.layout};}return dependency.instanceMeta(metaId).bounds;}// Grid cache is a virtual grid holding info on which dependencies intersects its virtual cells.
// Used to determine which dependencies should be considered for drawing, iterating over all dependencies each update
// gets too costly when count increases (>10000).
//
// Illustration shows entire schedule area, dddd is a dependency line, vvv is viewport, xxx virtual cell border:
//
// ----------------------------------
// |     vvvvvxvvvvv                |
// |     v    x    v                |
// |     v d  x    v                |
// |     v d  x    v                |
// |xxxxxvxdxxx    v                |
// |     vvdvvxvvvvv                |
// |       d  x                     |
// |       d  x                     |
// |       d  x                     |
// |xxxxxxxdxxxxxxx                 |
// |       d  x                     |
// |       d  x                     |
// |          x                     |
// |          x                     |
// |xxxxxxxxxxxxxxx                 |
// ----------------------------------
//
// The dependency crosses three virtual grid cells [0,0], [0,1] and [0,2]. Stored in a map in cache:
// {
//    0 : {
//      0 : [ d, ... ],
//      1 : [ d, ... ],
//      2 : [ d, ... ]
//    }
// }
//
// Viewport crosses four virtual grid cells [0,0], [1,0], [0,1], [1,1]. Those cells are checked in the cached map to
// find out which rows should be considered for drawing.
//
// This approach minimizes the amount of iteration needed
},{key:"getDependencyAssignments",// With multi-assign each dependency might be drawn several times
value:function getDependencyAssignments(dependency){if(!this.client.assignmentStore){return[null];// On purpose, to be iterable
}var fromAssignments=dependency.sourceEvent&&dependency.sourceEvent.assignments,toAssignments=dependency.targetEvent&&dependency.targetEvent.assignments,assignments=[];// flatMap could be used, but not in Edge yet
fromAssignments&&fromAssignments.forEach(function(from){return toAssignments&&toAssignments.forEach(function(to){assignments.push({from:from,to:to});});});return assignments;}},{key:"addToGridCache",value:function addToGridCache(dependency){var me=this,dependencyGridCache=me.dependencyGridCache,cacheGridSize=me.cacheGridSize,rowStore=me.client.store,assignments=me.getDependencyAssignments(dependency);assignments.forEach(function(assignmentData){var dependencyBounds=me.getDependencyBounds(dependency,assignmentData);if(dependencyBounds){var metaId=me.getMetaId(assignmentData),meta=dependency.instanceMeta(metaId),metaGridCache=meta.gridCache=[],// Using index vertically rather than y for reliability with variable row height
fromIndex=rowStore.indexOf(me.getRowRecordFromDependency(dependency,true,assignmentData)),toIndex=rowStore.indexOf(me.getRowRecordFromDependency(dependency,false,assignmentData)),topIndex=Math.min(fromIndex,toIndex),bottomIndex=Math.max(fromIndex,toIndex),// Convert dependency bounds/index into virtual grid cells
box=dependencyBounds.bounds,boxLeft=Math.floor(Math.max(box.x,0)/cacheGridSize.x),boxRight=Math.floor(box.right/cacheGridSize.x),boxTop=Math.floor(topIndex/cacheGridSize.index),boxBottom=Math.floor(bottomIndex/cacheGridSize.index);var cacheX,cacheY,x,y;// Store the dependency in the virtual cells which it intersects
for(x=boxLeft;x<=boxRight;x++){cacheX=dependencyGridCache[x]||(dependencyGridCache[x]={});for(y=boxTop;y<=boxBottom;y++){cacheY=cacheX[y]||(cacheX[y]=[]);cacheY.push({dependency:dependency,assignmentData:assignmentData,metaId:metaId});metaGridCache.push([x,y]);}}}});}},{key:"removeFromCache",value:function removeFromCache(dependency){var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var me=this,assignments=assignmentData?[assignmentData]:me.getDependencyAssignments(dependency);assignments.forEach(function(assignmentData){var metaId=me.getMetaId(assignmentData),meta=dependency.instanceMeta(metaId);meta.gridCache&&me._dependencyGridCache&&meta.gridCache.forEach(function(_ref221){var _ref222=_slicedToArray(_ref221,2),x=_ref222[0],y=_ref222[1];if(me._dependencyGridCache.hasOwnProperty(x)&&me._dependencyGridCache[x].hasOwnProperty(y)){var entries=me._dependencyGridCache[x][y],index=entries.findIndex(function(d){return d.dependency===dependency&&(d.assignmentData===assignmentData||d.assignmentData.from===assignmentData.from&&d.assignmentData.to===assignmentData.to);});// Cannot use ArrayHelper#remove since it cannot compare deeply
if(index>-1){entries.splice(index,1);}}});meta.bounds=null;meta.gridCache=null;});}},{key:"resetBoundsCache",// Reset cached bounds, not grid cache since it is expensive to create. It is so coarse anyway so should be fine
// with most changes, except for sorting and similar. Reset on demand instead
value:function resetBoundsCache(){// Not actually resetting here, would just be costly to iterate and reset per dependency, instead flagging to
// force cached value to be updated
this._resetBoundsCache=true;}// In some cases we do need to reset cache, like when time axis is reconfigured
},{key:"resetGridCache",value:function resetGridCache(){this.dependencyGridCache=null;}//endregion
//region Draw & render
//region Lines
},{key:"prepareLineDef",value:function prepareLineDef(dependency,dependencyDrawData){var assignmentData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this,source=me.getTimeSpanRecordFromDependency(dependency,true),target=me.getTimeSpanRecordFromDependency(dependency,false),type=dependency.type;var startSide=dependency.fromSide,endSide=dependency.toSide;// Fallback to view trait if dependency start side is not given
if(!startSide){switch(true){case type===DependencyModel.Type.StartToEnd:startSide=me.getConnectorStartSide(source);break;case type===DependencyModel.Type.StartToStart:startSide=me.getConnectorStartSide(source);break;case type===DependencyModel.Type.EndToStart:startSide=me.getConnectorEndSide(source);break;case type===DependencyModel.Type.EndToEnd:startSide=me.getConnectorEndSide(source);break;default:throw new Error('Invalid dependency type: '+type);}}// Fallback to view trait if dependency end side is not given /*or can be obtained from type*/
if(!endSide){switch(true){case type===DependencyModel.Type.StartToEnd:endSide=me.getConnectorEndSide(target);break;case type===DependencyModel.Type.StartToStart:endSide=me.getConnectorStartSide(target);break;case type===DependencyModel.Type.EndToStart:endSide=me.getConnectorStartSide(target);break;case type===DependencyModel.Type.EndToEnd:endSide=me.getConnectorEndSide(target);break;default:throw new Error('Invalid dependency type: '+type);}}var startRectangle=dependencyDrawData.startRectangle,endRectangle=dependencyDrawData.endRectangle;return{startBox:{start:startRectangle.x,end:startRectangle.right,top:startRectangle.y,bottom:startRectangle.bottom},endBox:{start:endRectangle.x,end:endRectangle.right,top:endRectangle.y,bottom:endRectangle.bottom},startSide:startSide,endSide:endSide};}// Draws a single SVG line that represents the dependency
},{key:"drawLine",value:function drawLine(canvas,dependency,points){var assignmentData=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;var client=this.client,metaId=this.getMetaId(assignmentData);// Reuse existing element if possible
var line=dependency.instanceMeta(metaId).lineElement;if(!line){line=dependency.instanceMeta(metaId).lineElement=document.createElementNS('http://www.w3.org/2000/svg','polyline');line.setAttribute('depId',dependency.id);if(assignmentData){line.setAttribute('fromId',assignmentData.from.id);line.setAttribute('toId',assignmentData.to.id);}canvas.appendChild(line);}// TODO: Use DomHelper.syncClassList
// className is SVGAnimatedString for svg elements, reading attribute instead
line.classList.length&&line.classList.remove.apply(line.classList,line.getAttribute('class').split(' '));line.classList.add(this.baseCls);if(dependency.cls){line.classList.add(dependency.cls);}if(dependency.bidirectional){line.classList.add('b-sch-bidirectional-line');}if(dependency.highlighted){var _line$classList;(_line$classList=line.classList).add.apply(_line$classList,_toConsumableArray(dependency.highlighted.split(' ')));}if(BrowserHelper.isIE11){var ddr=dependency.getDateRange(true),viewStart=client.startDate;if(ddr.start<viewStart){line.classList.add('b-no-start-marker');}if(ddr.end<viewStart){line.classList.add('b-no-end-marker');}}line.setAttribute('points',!points?'':points.map(function(p,i){return i!==points.length-1?"".concat(p.x1,",").concat(p.y1):"".concat(p.x1,",").concat(p.y1," ").concat(p.x2,",").concat(p.y2);}).join(' '));DomDataStore.set(line,{dependency:dependency});}//endregion
/**
     * Re-caches and redraws a dependency, for all assignments.
     * @param {Scheduler.model.DependencyModel} dependency Dependency to refresh
     */},{key:"refreshDependency",value:function refreshDependency(dependency){var me=this,assignments=me.getDependencyAssignments(dependency);// Release dependency element, for all assignments if using AssignmentStore
me.releaseDependency(dependency,assignments[0]!==null);// Remove it from grid & bounds cache
me.removeFromCache(dependency);// Re-add it to grid cache
me.addToGridCache(dependency);// Draw all assignments
assignments.forEach(function(assignmentData){return me.drawDependency(dependency,null,assignmentData);});}/**
     * Re-caches and redraws a dependency for given assignment.
     * @param {Scheduler.model.DependencyModel} dependency Dependency to refresh
     * @param {Object} assignmentData
     * @param {Scheduler.model.AssignmentModel} assignmentData.from Source assignment
     * @param {Scheduler.model.AssignmentModel} assignmentData.to Target assignment
     * @private
     */},{key:"refreshDependencyAssignment",value:function refreshDependencyAssignment(dependency,assignmentData){var me=this;// In case it was assigned to something not in view/timeline, release the line
me.releaseDependency(dependency,assignmentData);// Update cache to only contain whats left of it
me.removeFromCache(dependency,assignmentData);me.addToGridCache(dependency);// Draw lines
me.drawDependency(dependency,null,assignmentData);}/**
     * Stores all dependencies/assignments that were requested to refresh and schedules repaint on next animation frame
     * @param {Scheduler.model.DependencyModel} dependency Dependency model to refresh
     * @param {Object} [assignmentData] Assignment data
     * @param {Scheduler.model.AssignmentModel} [assignmentData.from] Source assignment
     * @param {Scheduler.model.AssignmentModel} [assignmentData.to] Target assignment
     * @private
     */},{key:"scheduleRefreshDependency",value:function scheduleRefreshDependency(dependency){var _this68=this;var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var map=this.dependenciesToRefresh;// If this method was called once without assignment data - all lines releated should be repainted
if(!assignmentData){map.set(dependency,true);}else if(map.has(dependency)){if(map.get(dependency)!==true){map.get(dependency).add(assignmentData);}}else{map.set(dependency,new Set([assignmentData]));}if(map.size===1){this.requestAnimationFrame(function(){_this68.refreshDependencyOnFrame();});}}/**
     * Repaints scheduled dependencies/assignments
     * @private
     */},{key:"refreshDependencyOnFrame",value:function refreshDependencyOnFrame(){var me=this,map=me.dependenciesToRefresh;// First clear cache and release dependencies. This will modify DOM
map.forEach(function(assignments,dependency){if(assignments===true){var _assignments2=me.getDependencyAssignments(dependency);// Release dependency element, for all assignments if using AssignmentStore
me.releaseDependency(dependency,_assignments2[0]!==null);// Remove it from grid & bounds cache
me.removeFromCache(dependency);}else{assignments.forEach(function(assignment){// In case it was assigned to something not in view/timeline, release the line
me.releaseDependency(dependency,assignment);// Update cache to only contain whats left of it
me.removeFromCache(dependency,assignment);});}});// Then fill cache before drawing dependencies. This will read the DOM forcing reflow
map.forEach(function(assignments,dependency){// Re-add it to grid cache
me.addToGridCache(dependency);});// Finally append elements to the DOM
map.forEach(function(assignments,dependency){if(assignments===true){assignments=me.getDependencyAssignments(dependency);}assignments.forEach(function(assignmentData){me.drawDependency(dependency,null,assignmentData);});});map.clear();me.client.trigger('dependenciesDrawn',{partial:true});}/**
     * Draws a single dependency (for a single assignment if using multiple), if in view.
     * @param {Scheduler.model.DependencyModel} dependency Dependency to draw
     */},{key:"drawDependency",value:function drawDependency(dependency){var drawData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var assignmentData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this,canvas=me.client.svgCanvas,drawnDependencies=me.drawnDependencies,oldDrawnDependencies=me.oldDrawnDependencies,dependencyDrawData=drawData||me.getDependencyBounds(dependency,assignmentData),lookup=function lookup(d){return d.dependency===dependency&&(d.assignmentData===assignmentData||d.assignmentData.from===assignmentData.from&&d.assignmentData.to===assignmentData.to);};if(!me.disabled&&dependencyDrawData){// Build line defs
var lineDef=me.prepareLineDef(dependency,dependencyDrawData),lines=me.pathFinder.findPath(lineDef,me.lineDefAdjusters);me.drawLine(canvas,dependency,lines,assignmentData);// Cannot use ArrayHelper#include since object wont be the same, only its contents
if(!drawnDependencies.some(lookup)){drawnDependencies.push({dependency:dependency,assignmentData:assignmentData});}}// Remove from oldDrawnDeps, to not have element removed. Cannot use ArrayHelper#remove as stated above
var oldIndex=oldDrawnDependencies&&oldDrawnDependencies.findIndex(lookup);if(oldIndex>=0){oldDrawnDependencies.splice(oldIndex,1);}}/**
     * Draws multiple dependencies, called from drawForEvent() or drawFromTask().
     * @private
     */},{key:"drawForTimeSpan",value:function drawForTimeSpan(timeSpanRecord){var async=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this;// If the client is doing an animated update, we must update at end.
// That will be asynchronous relative to now, so do not pass on the async flag.
if(me.client.isAnimating){me.client.on({transitionend:function transitionend(){me.drawForTimeSpan(timeSpanRecord,true);},once:true});}// Otherwise, schedule the draw for the next frame.
else{me.store.getTimeSpanDependencies(timeSpanRecord).forEach(function(dependency){if(async){me.scheduleRefreshDependency(dependency);}else{me.refreshDependency(dependency);}});}}/**
     * Draws all dependencies for the specified event.
     */},{key:"drawForEvent",value:function drawForEvent(eventRecord){this.drawForTimeSpan(eventRecord);}// Redraw all dependencies for a particular eventRecord, using its current element instead of calculating a box
// Used to do live redraw while resizing or dragging events
},{key:"updateDependenciesForTimeSpan",value:function updateDependenciesForTimeSpan(timeSpanRecord,element){var me=this,eventRecord=timeSpanRecord.isAssignment?timeSpanRecord.event:timeSpanRecord,deps=me.store.getTimeSpanDependencies(eventRecord),metaId=me.getMetaId(),client=me.client,originalTaskRect=Rectangle.from(element,client.timeAxisSubGridElement);var bounds;deps.forEach(function(dep){var assignments=me.getDependencyAssignments(dep);assignments.forEach(function(assignmentData){var taskRect=originalTaskRect.clone();var startRectangle,endRectangle,box;// If dragging one multi assigned event the others wont move until it is dropped. Prevent their dep
// lines from updating by bailing out
if(assignmentData&&assignmentData.from!==timeSpanRecord&&assignmentData.to!==timeSpanRecord){return;}// Bail out if dependency is not visible (other end might be collapsed)
if(!me.isDependencyVisible(dep,assignmentData)){return;}if(me.getTimeSpanRecordFromDependency(dep,true)===eventRecord){startRectangle=taskRect;// try to look into dependency cache first
if(bounds=dep.instanceMeta(metaId).bounds){endRectangle=bounds.endRectangle;}else{box=me.getBox(dep,false,assignmentData);// Row might be in collapsed node, in which case we get no box
if(box){endRectangle=new Rectangle(box.start,box.top,box.end-box.start,box.bottom-box.top);}}}else{// try to look into dependency cache first
if(bounds=dep.instanceMeta(metaId).bounds){startRectangle=bounds.startRectangle;}else{box=me.getBox(dep,true,assignmentData);// Row might be in collapsed node, in which case we get no box
if(box){startRectangle=new Rectangle(box.start,box.top,box.end-box.start,box.bottom-box.top);}}endRectangle=taskRect;}if(startRectangle&&endRectangle){me.drawDependency(dep,{startRectangle:startRectangle,endRectangle:endRectangle},assignmentData);}});});}},{key:"scheduleDraw",value:function scheduleDraw(){var relayout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;// There way be number of concurrent calls to this method, we need to reset cache if at least
// once it was called with relayout = true
if(relayout){me.resetBoundsCache();}// If the scheduler/gantt is doing an animated update, schedule the draw
// for when that's done so that we get correct element boxes.
if(me.client.isAnimating){if(!me.clientTransitionRemover){me.clientTransitionRemover=me.client.on({transitionend:function transitionend(){me.clientTransitionRemover();me.clientTransitionRemover=null;me.draw();},once:true});}}// Otherwise, schedule the draw for the next frame.
else{me.doScheduleDraw();}}/**
     * Draws all dependencies that overlap the current viewport
     */},{key:"draw",value:function draw(){var reLayout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this,client=me.client;// Early bailout if we get here before we have any deps
if(!me.oldDrawnDependencies&&!me.store.count){return;}// if animation is in progress, schedule drawing and skip current one
if(client.isAnimating){client.on({transitionend:function transitionend(){me.scheduleDraw(true);},once:true});return;}// viewBox is the bounds of the current viewport, used to determine which dependencies to draw
var viewBox=me.client.timeAxisSubGrid.viewRectangle;if(reLayout){me.resetBoundsCache();}me.oldDrawnDependencies=me.drawnDependencies;me.drawnDependencies=[];// too early
if(!viewBox.width||!viewBox.height)return[];// expand viewBox with buffer size
viewBox.inflate(me.bufferSize);// Do not draw if no rows
if(!me.disabled&&client.store.count&&client.rowManager.rowCount){var consideredDependencies={},dependencyGridCache=me.dependencyGridCache,cacheGridSize=me.cacheGridSize,viewLeft=Math.floor(Math.max(viewBox.left,0)/cacheGridSize.x),viewRight=Math.floor(viewBox.right/cacheGridSize.x),topIndex=Math.floor(client.rowManager.topRow.dataIndex/cacheGridSize.index),bottomIndex=Math.floor(client.rowManager.bottomRow.dataIndex/cacheGridSize.index),dependenciesToDraw=[];var x,rowIndex,i;// Iterate over virtual dependency grid cells, pushing each dependency that intersects that cell
for(x=viewLeft;x<=viewRight;x++){for(rowIndex=topIndex;rowIndex<=bottomIndex;rowIndex++){var cacheX=dependencyGridCache[x],deps=cacheX&&cacheX[rowIndex];for(i=0;deps&&i<deps.length;i++){var _deps$i=deps[i],dependency=_deps$i.dependency,assignmentData=_deps$i.assignmentData,metaId=_deps$i.metaId,flagId=dependency.id+'-'+metaId;if(!consideredDependencies[flagId]){// Only draw those actually in view
var bounds=me.getDependencyBounds(dependency,assignmentData);if(bounds&&bounds.bounds.intersect(viewBox,true)){dependenciesToDraw.push([dependency,bounds,assignmentData]);}consideredDependencies[flagId]=true;}}}}// Append dependencies to the DOM only after all have been calculated
dependenciesToDraw.forEach(function(_ref223){var _ref224=_slicedToArray(_ref223,3),dependency=_ref224[0],bounds=_ref224[1],assignmentData=_ref224[2];me.drawDependency(dependency,bounds,assignmentData);});}// Stop forcing recalculation of bounds
me._resetBoundsCache=false;// Release elements for any dependencies that wasn't drawn
me.oldDrawnDependencies.forEach(function(data){return me.releaseDependency(data.dependency,data.assignmentData);});client.trigger('dependenciesDrawn');this.isDrawn=true;}/**
     * Release a dependency that is determined to be no longer visible
     * @param {Scheduler.model.DependencyModel} dependency
     */},{key:"releaseDependency",value:function releaseDependency(dependency){var _this69=this;var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// Remove for all assignments (related to this client, store might be shared)
if(assignmentData===true){Object.keys(dependency.meta.map||{}).filter(function(key){return key.startsWith(_this69.client.id);}).forEach(function(key){var data=dependency.meta.map[key];if(data.lineElement){data.lineElement.remove();data.lineElement=null;}});}// Remove specific
else{var metaId=this.getMetaId(assignmentData),lineElement=dependency.instanceMeta(metaId).lineElement;if(lineElement){dependency.instanceMeta(metaId).lineElement=null;// Not reusing elements for other lines currently
lineElement.remove();}}}},{key:"render",value:function render(){var me=this,client=me.scheduler;me.draw();if(me.showTooltip){me.tooltip=me.createTooltip();}client.timeAxis.on({endreconfigure:me.resetGridCache,thisObj:me});client.assignmentStore&&client.assignmentStore.on({change:me.onAssignmentChange,refresh:me.onAssignmentRefresh,thisObj:me});if(me.highlightDependenciesOnEventHover){client.on(client.scheduledEventName+'MouseEnter',function(params){return me.highlightEventDependencies(params.eventRecord||params.taskRecord);});client.on(client.scheduledEventName+'MouseLeave',function(params){return me.unhighlightEventDependencies(params.eventRecord||params.taskRecord);});}}},{key:"renderContents",value:function renderContents(){this.draw();}//endregion
//region Connector sides
/**
     * Gets displaying item start side
     *
     * @param {Scheduler.model.TimeSpan} timeSpanRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorStartSide",value:function getConnectorStartSide(timeSpanRecord){return this.client.currentOrientation.getConnectorStartSide(timeSpanRecord);}/**
     * Gets displaying item end side
     *getRowRecordFromDependency
     * @param {Scheduler.model.TimeSpan} timeSpanRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorEndSide",value:function getConnectorEndSide(timeSpanRecord){return this.client.currentOrientation.getConnectorEndSide(timeSpanRecord);}//endregion
//region Tooltip
},{key:"createTooltip",value:function createTooltip(){var me=this;return new Tooltip(Object.assign({align:'b-t',id:"".concat(me.client.id,"-dependency-tip"),//TODO: need some way better to specify this. maybe each feature should be queried?
forSelector:".b-timelinebase:not(.b-eventeditor-editing):not(.b-resizing-event):not(.b-dragcreating):not(.b-dragging-event):not(.b-creating-dependency) .".concat(me.baseCls),clippedBy:[me.client.timeAxisSubGridElement,me.client.bodyContainer],forElement:me.client.timeAxisSubGridElement,showOnHover:true,hoverDelay:0,hideDelay:0,anchorToTarget:false,trackMouse:false,getHtml:me.getHoverTipHtml.bind(me)},me.tooltip||{}));}/**
     * Generates html for the tooltip shown when hovering a dependency
     * @param {Object} tooltipConfig
     * @returns {string} Html to display in the tooltip
     * @private
     */},{key:"getHoverTipHtml",value:function getHoverTipHtml(_ref225){var tip=_ref225.tip,forElement=_ref225.forElement;var me=this,dependencyModel=me.getDependencyForElement(forElement),fromEvent=dependencyModel.sourceEvent,toEvent=dependencyModel.targetEvent;return TemplateHelper.tpl(_templateObject27(),me.L('from'),fromEvent.name,fromBoxSide[dependencyModel.type],me.L('to'),toEvent.name,toBoxSide[dependencyModel.type]);}//endregion
/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"store",set:function set(store){var me=this,client=me.client;if(store!==me._store){// Create new store if none assigned through config
me._store=store||(store=new this.storeClass());me._detachStoreEvents&&me._detachStoreEvents();if(!client.dependencyStore){client._dependencyStore=store;}if(store){// dependencies can be set on scheduler or feature, for convenience
if(client.dependencies){store.add(client.dependencies);delete client.dependencies;}if(me.dependencies){store.add(me.dependencies);delete me.dependencies;}// used to store meta per scheduler on models, in case they are used in multiple schedulers
store.metaMapId=client.id;// Ask the client for its eventStore after we set our store.
// Its eventStore getter attempts to read our store.
store.eventStore=client.eventStore;me._detachStoreEvents=store.on({change:me.onDependencyChange,eventstorechange:me.bindEventStoreListeners,detachable:true,thisObj:me});}}},get:function get(){return this._store;}},{key:"dependencyGridCache",get:function get(){var me=this;if(!me._dependencyGridCache){me._dependencyGridCache={};me.store.forEach(function(dependency){return me.addToGridCache(dependency);});}return me._dependencyGridCache;},set:function set(cache){this._dependencyGridCache=cache;}},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;this.updateCreateListeners();if(this.client.rendered){this.draw();}}}],[{key:"defaultConfig",/**
     * Fired when dependencies are rendered
     * @event dependenciesDrawn
     * @param {Boolean} [partial] Optional event parameter. `true` when subset of dependencies is repainted, omitted
     * when all lines were repainted.
     */ //region Config
get:function get(){return{/**
             * Path finder instance configuration
             * @config {Object}
             */pathFinderConfig:null,/**
             * The CSS class to add to a dependency line when hovering over it
             * @config {String}
             * @default
             * @private
             */overCls:'b-sch-dependency-over',/**
             * The CSS class applied to dependency lines
             * @config {String}
             * @default
             * @private
             */baseCls:'b-sch-dependency',/**
             * Store that holds dependencies (using DependencyModel or subclass thereof). A store will be automatically
             * created if none is specified
             * @config {Scheduler.data.DependencyStore}
             */store:false,// Force invocation of setter, null bypasses the setter
/**
             * Dependency definitions (data to DependencyModels). Will be added to store. Can also be specified on
             * Scheduler for convenience
             * @config {DependencyModel[]|Object[]}
             */dependencies:null,highlightDependenciesOnEventHover:false,/**
             * Set to true to show a tooltip when hovering a dependency line
             * @config {Boolean}
             */showTooltip:true,/**
             * A tooltip config object that will be applied to the dependency hover tooltip. Can be used to for example
             * customize delay
             * @config {Object}
             */tooltip:null,bufferSize:50,cacheGridSize:{x:500,index:25},drawnDependencies:[],drawnLines:[],dependenciesToRefresh:new Map(),storeClass:DependencyStore};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['render','renderContents','onElementClick','onElementDblClick','onElementMouseOver','onElementMouseOut'],assign:['getElementForDependency','getDependencyForElement']};}}]);return Dependencies;}(DependencyCreation(Delayable(InstancePlugin)));exports.SchedulerDependencies=Dependencies;Dependencies._$name='Dependencies';GridFeatureManager.registerFeature(Dependencies,false,'Scheduler');// region polyfills
// from https://github.com/eligrey/classList.js
if(document.createElementNS&&!('classList'in document.createElementNS('http://www.w3.org/2000/svg','g'))){(function(view){if(!('Element'in view))return;var classListProp='classList',protoProp='prototype',elemCtrProto=view.Element[protoProp],objCtr=Object,strTrim=String[protoProp].trim||function(){return this.replace(/^\s+|\s+$/g,'');},arrIndexOf=Array[protoProp].indexOf||function(item){for(var i=0,len=this.length;i<len;i++){if(i in this&&this[i]===item){return i;}}return-1;},// Vendors: please allow content code to instantiate DOMExceptions
DOMEx=function DOMEx(type,message){this.name=type;this.code=DOMException[type];// eslint-disable-line no-undef
this.message=message;},checkTokenAndGetIndex=function checkTokenAndGetIndex(classList,token){if(token===''){throw new DOMEx('SYNTAX_ERR','The token must not be empty.');}if(/\s/.test(token)){throw new DOMEx('INVALID_CHARACTER_ERR','The token must not contain space characters.');}return arrIndexOf.call(classList,token);},ClassList=function ClassList(elem){var trimmedClasses=strTrim.call(elem.getAttribute('class')||''),classes=trimmedClasses?trimmedClasses.split(/\s+/):[];for(var i=0,len=classes.length;i<len;i++){this.push(classes[i]);}this._updateClassName=function(){elem.setAttribute('class',this.toString());};},classListProto=ClassList[protoProp]=[],classListGetter=function classListGetter(){return new ClassList(this);};// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp]=Error[protoProp];classListProto.item=function(i){return this[i]||null;};classListProto.contains=function(token){return~checkTokenAndGetIndex(this,token+'');};classListProto.add=function(){var tokens=arguments,i=0,l=tokens.length,token,updated=false;do{token=tokens[i]+'';if(!~checkTokenAndGetIndex(this,token)){this.push(token);updated=true;}}while(++i<l);if(updated){this._updateClassName();}};classListProto.remove=function(){var tokens=arguments,i=0,l=tokens.length,token,updated=false,index;do{token=tokens[i]+'';index=checkTokenAndGetIndex(this,token);while(~index){this.splice(index,1);updated=true;index=checkTokenAndGetIndex(this,token);}}while(++i<l);if(updated){this._updateClassName();}};classListProto.toggle=function(token,force){var result=this.contains(token),method=result?force!==true&&'remove':force!==false&&'add';if(method){this[method](token);}if(force===true||force===false){return force;}else{return!result;}};classListProto.replace=function(token,replacementToken){var index=checkTokenAndGetIndex(token+'');if(~index){this.splice(index,1,replacementToken);this._updateClassName();}};classListProto.toString=function(){return this.join(' ');};if(objCtr.defineProperty){var classListPropDesc={get:classListGetter,enumerable:true,configurable:true};try{objCtr.defineProperty(elemCtrProto,classListProp,classListPropDesc);}catch(ex){// IE 8 doesn't support enumerable:true
// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
if(ex.number===undefined||ex.number===-0x7FF5EC54){classListPropDesc.enumerable=false;objCtr.defineProperty(elemCtrProto,classListProp,classListPropDesc);}}}else if(objCtr[protoProp].__defineGetter__){elemCtrProto.__defineGetter__(classListProp,classListGetter);}})(window);}// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.
(function(){var testElement=document.createElement('_');testElement.classList.add('c1','c2');// Polyfill for IE 10/11 and Firefox <26, where classList.add and
// classList.remove exist but support only one argument at a time.
if(!testElement.classList.contains('c2')){var createMethod=function createMethod(method){var original=DOMTokenList.prototype[method];// eslint-disable-line no-undef
DOMTokenList.prototype[method]=function(token){// eslint-disable-line no-undef
for(var i=0,len=arguments.length;i<len;i++){token=arguments[i];original.call(this,token);}};};createMethod('add');createMethod('remove');}testElement.classList.toggle('c3',false);// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
// support the second argument.
if(testElement.classList.contains('c3')){var _toggle=DOMTokenList.prototype.toggle;// eslint-disable-line no-undef
DOMTokenList.prototype.toggle=function(token,force){// eslint-disable-line no-undef
if(1 in arguments&&!this.contains(token)===!force){return force;}else{return _toggle.call(this,token);}};}// replace() polyfill
if(!('replace'in document.createElement('_').classList)){DOMTokenList.prototype.replace=function(token,replacementToken){// eslint-disable-line no-undef
var tokens=this.toString().split(' '),index=tokens.indexOf(token+'');if(~index){tokens=tokens.slice(index);this.remove.apply(this,tokens);this.add(replacementToken);this.add.apply(this,tokens.slice(1));}};}testElement=null;})();// endregion
/**
 * @module Scheduler/feature/base/TimeSpanRecordContextMenuBase
 */ // This is a version of what Containers do, except that we have to apply our namedItems
// all the way down any configured menu hierarchy, and the resulting structure must
// be available *before* menu instantiation for the processItems method to interrogate.
var applyNamedItems=function applyNamedItems(items,namedItems){for(var ref in items){var item=items[ref];if(item){if(ref in namedItems){item=items[ref]=_typeof(item)==='object'?ObjectHelper.merge(ObjectHelper.clone(namedItems[ref]),item):namedItems[ref];}// Our namedItems must apply all the way down any descendant menus.
// Extract menu here because it may have been applied by a namedItem.
var menu=item.menu;if(menu){applyNamedItems('items'in menu?menu.items:menu,namedItems);}}}};/**
 * Abstract base class used by other context menu features such as {@link Scheduler/feature/EventContextMenu EventContextMenu} and
 * {@link Scheduler/feature/ScheduleContextMenu ScheduleContextMenu}.
 * @extends Common/mixin/InstancePlugin
 * @abstract
 */var TimeSpanRecordContextMenuBase=/*#__PURE__*/function(_InstancePlugin15){_inherits2(TimeSpanRecordContextMenuBase,_InstancePlugin15);function TimeSpanRecordContextMenuBase(){_classCallCheck2(this,TimeSpanRecordContextMenuBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeSpanRecordContextMenuBase).apply(this,arguments));}_createClass2(TimeSpanRecordContextMenuBase,[{key:"doDestroy",//endregion
//region Init
value:function doDestroy(){if(this.menu){this.menu.destroy();}}//endregion
//region Events
},{key:"onElementContextMenu",value:function onElementContextMenu(event){this.triggerEvent==='contextmenu'&&this.showEventContextMenu(event);}},{key:"onElementClick",value:function onElementClick(event){this.triggerEvent==='click'&&this.showEventContextMenu(event);}},{key:"onElementDblClick",value:function onElementDblClick(event){this.triggerEvent==='dblclick'&&this.showEventContextMenu(event);}// chained from EventNavigation
},{key:"onEventSpaceKey",value:function onEventSpaceKey(keyEvent){var targetPoint=Rectangle.from(keyEvent.target).center,contextmenuEvent=new MouseEvent('contextmenu',Object.assign({clientX:targetPoint.x,clientY:targetPoint.y},keyEvent));Object.defineProperty(contextmenuEvent,'target',{get:function get(){return keyEvent.target;}});this.showEventContextMenu(contextmenuEvent);}//endregion
//region Menu handlers
/**
     * Show event context menu.
     * @param event
     * @fires eventContextMenuItem
     * @internal
     */},{key:"showEventContextMenu",value:function showEventContextMenu(event){var me=this,client=me.client,target=event.target,eventElement=DomHelper.up(target,client.eventSelector)||target;if(eventElement){event.preventDefault();var record=me.resolveRecord(eventElement);if(record){me.showContextMenuFor(record,{targetElement:eventElement,event:event});}}}/**
     * Shows context menu for the provided record. If record is not rendered (outside of time span, or collapsed)
     * menu won't appear.
     * @param {Scheduler.model.TimeSpan} record
     * @param {Object} [options]
     * @param {HTMLElement} options.targetElement Element to align context menu to
     * @param {Event} options.event Browser event. If provided menu will be aligned according to clientX/clientY coordinates.
     * If omitted, context menu will be centered to targetElement
     */},{key:"showContextMenuFor",value:function showContextMenuFor(record,options){}// Implement in subclasses to massage options or veto show.
},{key:"beforeContextMenuShow",value:function beforeContextMenuShow(){}//endregion
//region Show/Hide
/**
     * @param {Object} eventParams
     * @param {Object[]} items
     * @protected
     * @internal
     */},{key:"showContextMenu",value:function showContextMenu(eventParams){var me=this,event=eventParams.event,menuType=eventParams.menuType.toLowerCase(),eventType=StringHelper.lowercaseFirstLetter(menuType),clientGetItemsMethod="get".concat(StringHelper.capitalizeFirstLetter(menuType),"MenuItems"),client=me.client,processItems=me.processItems,defaultItems=me.defaultItems,namedItems=me.namedItems,point=event?[event.clientX+1,event.clientY+1]:Rectangle.from(eventParams.targetElement).center,items=eventParams.items=ObjectHelper.isEmpty(me.items)?ObjectHelper.clone(defaultItems):ObjectHelper.merge(ObjectHelper.clone(defaultItems),me.items);eventParams.namedItems=namedItems;eventParams.selection=client.selectedRecords;// Apply the named items prior to Container's item processing.
// Our namedItems must cascade to all descendant Menu levels.
// And they MUST have all been converted prior to the processItems call.
applyNamedItems(items,namedItems);// Call the chainable method which other features use to add their own menu items.
// For example getEventMenuItems
if(client[clientGetItemsMethod]){client[clientGetItemsMethod](eventParams,items);}// Allow user a chance at processing the items and preventing the menu from showing
if((!processItems||processItems(eventParams)!==false)&&!ObjectHelper.isEmpty(eventParams.items)){// beforeContextMenuShow is a lifecycle method which may be implemented in subclasses to
// preprocess the event.
if(me.beforeContextMenuShow(eventParams)!==false){// Trigger event that allows preventing menu or manipulating its items
if(client.trigger("".concat(eventType,"ContextMenuBeforeShow"),eventParams)!==false){me.menu=WidgetHelper.showContextMenu(point,{owner:client,scrollAction:'hide',clippedBy:[client.timeAxisSubGridElement,client.bodyContainer],constrainTo:window,items:items,onDestroy:function onDestroy(){me.menu=null;},// Load up the item event with the contextual info
onBeforeItem:function onBeforeItem(itemEvent){Object.assign(itemEvent,eventParams);},onItem:function onItem(itemEvent){return client.trigger("".concat(eventType,"ContextMenuItem"),itemEvent);},listeners:{show:function show(_ref226){var menu=_ref226.source;eventParams.menu=menu;client.trigger("".concat(eventType,"ContextMenuShow"),eventParams);}}});}}}}/**
     * Hides the context menu
     * @protected
     * @internal
     */},{key:"hideContextMenu",value:function hideContextMenu(animate){this.menu&&this.menu.hide(animate);}//endregion
//region Getters/Setters
/**
     * Provides the default configuration of the context menu.
     *
     * Concrete classes must all provide their own defaultItems value in their defaultConfig blocks
     * @private
     */},{key:"defaultItems",set:function set(defaultItems){this._defaultItems=defaultItems;},get:function get(){var result=ObjectHelper.clone(this._defaultItems);// Read-only client should have no default items enabled
if(this.client.readOnly){for(var item in result){result[item]=false;}}return result;}},{key:"triggerEvent",get:function get(){return this._triggerEvent||this.client.contextMenuTriggerEvent;},set:function set(value){this._triggerEvent=value;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * This is a preconfigured set of {@link Common.widget.Container#config-namedItems} used to create the default
             * context menu.
             * @config {Object}
             */defaultItems:null,/**
             * An {@link Common.widget.Menu Menu} items object containing named child menu items
             * to apply to the feature's provided context menu, see {@link #config-defaultItems}.
             *
             * This may add extra items as below, but may also remove any of the {@link #config-defaultItems}
             * by configuring the name of the item as `false`
             *
             * ```javascript
             * features : {
             *     taskContextMenu : { // use eventContextMenu in the Scheduler product
             *         // This object is applied to the Feature's predefined defaultItems object
             *         items : {
             *             switchToDog : {
             *                 text : 'Dog',
             *                 icon : 'b-fa b-fa-fw b-fa-dog',
             *                 onItem({contextRecord}) {
             *                     contextRecord.dog = true;
             *                     contextRecord.cat = false;
             *                 },
             *                 weight : 500     // Make this second from end
             *             },
             *             switchToCat : {
             *                 text : 'Cat',
             *                 icon : 'b-fa b-fa-fw b-fa-cat',
             *                 onItem({contextRecord}) {
             *                     contextRecord.dog = false;
             *                     contextRecord.cat = true;
             *                 },
             *                 weight : 510     // Make this sink to end
             *             },
             *             add : false // We do not want the "Add" submenu to be available
             *         }
             *     }
             * }
             * ```
             *
             * @config {Object|Object[]}
             */items:null,/**
             * A function called before displaying the menu that allows manipulations of its items. Called with a
             * single parameter with format { contextRecord, eventElement, items }. Returning `false`
             * from this function prevents the menu from being shown.
             *
             * ```javascript
             * features : {
             *     taskContextMenu : {
             *         processItems({contextRecord, items}) {
             *             // Add or remove items here as needed
             *             if (contextRecord.type === 'Meeting') {
             *                 items.cancel = {
             *                     text   : 'Cancel',
             *                     icon   : 'b-fa b-fa-fw b-fa-ban',
             *                     weight : 200 // Move to end
             *                 };
             *             }
             *
             *             // Hide delete for parents
             *             items.deleteTask.hidden = contextRecord.isParent;
             *         }
             *     }
             * }
             * ```
             *
             * @config {Function}
             */processItems:null,/**
             * Event which is used to show context menu.
             * Available options are: 'contextmenu', 'click', 'dblclick'.
             * Default value is used from {@link Grid/view/Grid#config-contextMenuTriggerEvent}
             * @config {String}
             */triggerEvent:null};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{assign:['showEventContextMenu'],chain:['onElementContextMenu','onElementClick','onElementDblClick','onEventSpaceKey']};}}]);return TimeSpanRecordContextMenuBase;}(InstancePlugin);TimeSpanRecordContextMenuBase._$name='TimeSpanRecordContextMenuBase';/**
 * @module Scheduler/feature/EventContextMenu
 */ /**
 * Displays a context menu for events. Items are populated by other features and/or application code.
 *
 * To add extra items for all events (Array notation):
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         eventContextMenu : {
 *             // Extra items for all events
 *             items : [
 *                 {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem({eventRecord}) {
 *                         eventRecord.flagged = true;
 *                     }
 *                 }
 *             ]
 *         }
 *     }
 * });
 * ```
 *
 * To add extra items for all events (Object notation):
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         eventContextMenu : {
 *             // Extra items for all events
 *             items : {
 *                 extraItems : {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem({eventRecord}) {
 *                         eventRecord.flagged = true;
 *                     }
 *                 }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * To remove existing items:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         eventContextMenu : {
 *             items : {
 *                 deleteEvent   : false,
 *                 unassignEvent : false
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * Manipulate existing items for all events or specific events:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         eventContextMenu : {
 *             // Process items before menu is shown
 *             processItems({eventRecord, items}) {
 *                  // Push an extra item for conferences
 *                  if (eventRecord.type === 'conference') {
 *                      items.showSessionItem = {
 *                          text : 'Show sessions',
 *                          onItem({eventRecord}) {
 *                              // ...
 *                          }
 *                      };
 *                  }
 *
 *                  // Do not show menu for secret events
 *                  if (eventRecord.type === 'secret') {
 *                      return false;
 *                  }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/TimeSpanRecordContextMenuBase
 * @demo eventcontextmenu
 */var EventContextMenu=/*#__PURE__*/function(_TimeSpanRecordContex){_inherits2(EventContextMenu,_TimeSpanRecordContex);function EventContextMenu(){_classCallCheck2(this,EventContextMenu);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventContextMenu).apply(this,arguments));}_createClass2(EventContextMenu,[{key:"resolveRecord",//endregion
//region Events
/**
     * Fired from scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @event eventContextMenuBeforeShow
     * @preventable
     * @param {Scheduler.view.Scheduler} source
     * @param {Object} items Menu item configs
     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ /**
     * Fired from scheduler when an item is selected in the context menu.
     * @event eventContextMenuItem
     * @param {Scheduler.view.Scheduler} source
     * @param {Common.widget.MenuItem} item
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ /**
     * Fired from scheduler after showing the context menu for an event
     * @event eventContextMenuShow
     * @preventable
     * @param {Scheduler.view.Scheduler} source
     * @param {Common.widget.Menu} menu The menu
     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ //endregion
//region Events
value:function resolveRecord(element){return this.client.resolveEventRecord(element);}//endregion
/**
     * Shows context menu for the provided event. If record is not rendered (outside of time span/filtered)
     * menu won't appear.
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Object} [options]
     * @param {HTMLElement} options.targetElement Element to align context menu to
     * @param {Event} options.event Browser event. If provided menu will be aligned according to clientX/clientY coordinates.
     * If omitted, context menu will be centered to taskElement
     */},{key:"showContextMenuFor",value:function showContextMenuFor(eventRecord){var _ref227=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},targetElement=_ref227.targetElement,event=_ref227.event;var me=this,client=me.client;if(!targetElement){targetElement=client.getElementsFromEventRecord(eventRecord)[0];// If record is not rendered, do nothing
if(!targetElement){return;}}me.showContextMenu({menuType:'event',eventElement:targetElement,targetElement:targetElement,eventRecord:eventRecord,resourceRecord:client.resolveResourceRecord(targetElement),assignmentRecord:client.resolveAssignmentRecord(targetElement),event:event});}},{key:"defaultItems",set:function set(defaultItems){this._defaultItems=defaultItems;},get:function get(){var result=_get2(_getPrototypeOf2(EventContextMenu.prototype),"defaultItems",this);if(!this.client.assignmentStore){result.unassignEvent=false;}return result;}},{key:"namedItems",get:function get(){var me=this,client=me.client;if(!me._namedItems){me._namedItems={deleteEvent:{text:client.L('Delete event'),icon:'b-icon b-icon-trash',weight:-160,onItem:function onItem(_ref228){var menu=_ref228.menu,eventRecord=_ref228.eventRecord;// We must synchronously push focus back into the menu's triggering
// event so that the our beforeRemove handlers can move focus onwards
// to the closest remaining event.
// Otherwise, the menu's default hide processing on hide will attempt
// to move focus back to the menu's triggering event which will
// by then have been deleted.
var revertTarget=menu.focusInEvent&&menu.focusInEvent.relatedTarget;if(revertTarget){revertTarget.focus();client.navigator.activeItem=revertTarget;}client.removeRecords([eventRecord]);}},unassignEvent:{text:client.L('Unassign event'),icon:'b-icon b-icon-unassign',weight:-150,name:'unassignEvent',onItem:function onItem(_ref229){var menu=_ref229.menu,eventRecord=_ref229.eventRecord,resourceRecord=_ref229.resourceRecord;// We must synchronously push focus back into the menu's triggering
// event so that the our beforeRemove handlers can move focus onwards
// to the closest remaining event.
// Otherwise, the menu's default hide processing on hide will attempt
// to move focus back to the menu's triggering event which will
// by then have been deleted.
var revertTarget=menu.focusInEvent&&menu.focusInEvent.relatedTarget;if(revertTarget){revertTarget.focus();client.navigator.activeItem=revertTarget;}eventRecord.unassign(resourceRecord);}}};}return me._namedItems;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * An array of extra menu items to add to the context menu
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         eventContextMenu : {
             *             // Extra items for all events
             *             items : [
             *                 {
             *                     text : 'Extra',
             *                     icon : 'b-fa b-fa-fw b-fa-flag',
             *                     onItem({eventRecord}) {
             *                         eventRecord.flagged = true;
             *                     }
             *                 }
             *             ]
             *         }
             *     }
             * });
             * ```
             *
             * or items config to add extra items to the context menu or hide default items
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         eventContextMenu : {
             *             items : {
             *                 // Add custom 'Extra' item
             *                 extra : {
             *                     text : 'Extra',
             *                     icon : 'b-fa b-fa-fw b-fa-flag',
             *                     onItem({eventRecord}) {
             *                         eventRecord.flagged = true;
             *                     }
             *                 },
             *                 // Hide default 'Delete event' and 'Unassign event' items
             *                 deleteEvent   : false,
             *                 unassignEvent : false
             *             }
             *         }
             *     }
             * });
             * ```
             *
             * @config {Object|Object[]}
             */items:null,/**
             * A function called before displaying the menu that allows manipulations of its items.
             * Called with a single parameter with format { date, resourceRecord, items }.
             * Returning `false` from this function prevents the menu from being shown.
             *
             * ```javascript
             * features : {
             *     eventContextMenu : {
             *         // Process items before menu is shown
             *         processItems({eventRecord, items}) {
             *              // Push an extra item for conferences
             *              if (eventRecord.type === 'conference') {
             *                  items.showSessionItem = {
             *                      text : 'Show sessions',
             *                      onItem({eventRecord}) {
             *                          // ...
             *                      }
             *                  };
             *              }
             *
             *              // Do not show menu for secret events
             *              if (eventRecord.type === 'secret') {
             *                  return false;
             *              }
             *         }
             *     }
             * }
             * ```
             *
             * @config {Function}
             */processItems:null,/**
             * This is a preconfigured set of {@link Common.widget.Container#config-namedItems} used to create the default context menu.
             *
             * The provided defaultItems setting is
             *
             *```javascript
             *    {
             *        deleteEvent   : true,
             *        unassignEvent : true
             *    }
             *```
             *
             * The `namedItems` provided by this feature are listed below. These are the property
             * names which you may configure in the feature's {@link #config-items} config:
             *
             * - `deleteEvent` Deletes the context event.
             * - `unassignEvent` Unassigns the context event from the context resource.
             *
             * To remove existing items, set corresponding keys to `false`
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         eventContextMenu : {
             *             items : {
             *                 deleteEvent   : false,
             *                 unassignEvent : false
             *             }
             *         }
             *     }
             * });
             * ```
             *
             * See the feature config in the above example for details.
             * @config {Object}
             */defaultItems:{deleteEvent:true,unassignEvent:true}};}}]);return EventContextMenu;}(TimeSpanRecordContextMenuBase);exports.EventContextMenu=EventContextMenu;EventContextMenu.featureClass='';EventContextMenu._$name='EventContextMenu';GridFeatureManager.registerFeature(EventContextMenu,true,'Scheduler');//import styles from '../../../resources/sass/tooltip/clocktemplate.scss';
/**
 * @module Scheduler/tooltip/ClockTemplate
 */ /**
 * A template showing a clock, it consumes an object containing a date and a text
 * @private
 */var ClockTemplate=/*#__PURE__*/function(_Base9){_inherits2(ClockTemplate,_Base9);function ClockTemplate(){_classCallCheck2(this,ClockTemplate);return _possibleConstructorReturn2(this,_getPrototypeOf2(ClockTemplate).apply(this,arguments));}_createClass2(ClockTemplate,[{key:"construct",value:function construct(config){_get2(_getPrototypeOf2(ClockTemplate.prototype),"construct",this).call(this,config);this.timeAxisViewModelDetacher=this.timeAxisViewModel.on({update:this.onTimeAxisViewModelUpdate,thisObj:this});}},{key:"doDestroy",value:function doDestroy(){this.timeAxisViewModelDetacher&&this.timeAxisViewModelDetacher();}},{key:"onTimeAxisViewModelUpdate",value:function onTimeAxisViewModelUpdate(){delete this._mode;}},{key:"updateDateIndicator",value:function updateDateIndicator(tipEl,date){var me=this,hourIndicatorEl=tipEl.querySelector('.b-sch-hour-indicator'),minuteIndicatorEl=tipEl.querySelector('.b-sch-minute-indicator');if(date&&hourIndicatorEl&&minuteIndicatorEl){if(me.mode==='hour'){hourIndicatorEl.style.transform="rotate(".concat(date.getHours()%12*30,"deg)");minuteIndicatorEl.style.transform="rotate(".concat(date.getMinutes()*6,"deg)");}else{hourIndicatorEl.style.transform='none';minuteIndicatorEl.style.transform='none';}}}},{key:"mode",get:function get(){// 'hour' for a clock view or 'day' for a calendar view
return this._mode||(this._mode=DateHelper.compareUnits(this.timeAxisViewModel.timeResolution.unit,'day')>=0?'day':'hour');}},{key:"template",set:function set(template){this._template=template;}/**
     * Get the clock template, which accepts an object of format { date, text }
     * @returns {function(*): string}
     */,get:function get(){return this._template;}}],[{key:"defaultConfig",get:function get(){return{minuteHeight:8,minuteTop:2,hourHeight:8,hourTop:2,handLeft:10,timeAxisViewModel:null,template:function template(data){return"<div class=\"b-sch-clockwrap b-sch-clock-".concat(this.mode," ").concat(data.cls||'',"\">\n                    <div class=\"b-sch-clock\">\n                        <div class=\"b-sch-hour-indicator\">").concat(DateHelper.format(data.date,'MMM'),"</div>\n                        <div class=\"b-sch-minute-indicator\">").concat(DateHelper.format(data.date,'D'),"</div>\n                        <div class=\"b-sch-clock-dot\"></div>\n                    </div>\n                    <span class=\"b-sch-clock-text\">").concat(data.text,"</span>\n                </div>");}};}}]);return ClockTemplate;}(Base);ClockTemplate._$name='ClockTemplate';/**
 * @module Scheduler/feature/base/DragBase
 */ //TODO: shift to copy
//TODO: dragging of event that starts & ends outside of view
/**
 * Base class for EventDrag (Scheduler) and TaskDrag (Gantt) features. Contains shared code. Not to be used directly.
 *
 * @extends Common/mixin/InstancePlugin
 * @abstract
 */var DragBase=/*#__PURE__*/function(_InstancePlugin16){_inherits2(DragBase,_InstancePlugin16);function DragBase(){_classCallCheck2(this,DragBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(DragBase).apply(this,arguments));}_createClass2(DragBase,[{key:"render",//endregion
//region Init
/**
     * Called when scheduler is rendered. Sets up drag and drop and hover tooltip.
     * @private
     */value:function render(){var me=this,view=me.client;if(me.drag){me.drag.destroy();}me.drag=new DragHelper({name:me.constructor.name,// usefull when debugging with multiple draggers
mode:'translateXY',lockY:me.constrainDragToResource,minX:true,// Allows dropping before time axis
constrain:false,cloneTarget:!me.constrainDragToTimeline,dragWithin:me.constrainDragToTimeline?null:document.body,hideOriginalElement:true,outerElement:view.timeAxisSubGridElement,targetSelector:view.eventSelector,isElementDraggable:function isElementDraggable(el,event){return!view.readOnly&&me.isElementDraggable(el,event);},scrollManager:me.constrainDragToTimeline?view.scrollManager:null,listeners:{beforedragstart:'onBeforeDragStart',dragstart:'onDragStart',drag:'onDrag',drop:'onDrop',abort:'onDragAbort',reset:'onDragReset',thisObj:me}});if(!me.constrainDragToResource){view.rowManager.on({changeTotalHeight:'updateYConstraint',thisObj:me});}if(me.showTooltip){me.clockTemplate=new ClockTemplate({timeAxisViewModel:view.timeAxisViewModel});}}},{key:"doDestroy",value:function doDestroy(){var me=this;me.drag&&me.drag.destroy();me.clockTemplate&&me.clockTemplate.destroy();me.tip&&me.tip.destroy();_get2(_getPrototypeOf2(DragBase.prototype),"doDestroy",this).call(this);}//endregion
//region Drag events
},{key:"onBeforeDragStart",value:function onBeforeDragStart(_ref230){var context=_ref230.context,event=_ref230.event;var me=this,client=me.client,name=client.scheduledEventName,eventRecord=client.resolveEventRecord(context.element);if(me.disabled||!eventRecord||!eventRecord.isDraggable){return false;}return client.trigger("before".concat(name,"Drag"),{eventRecord:eventRecord,context:me.dragData})!==false;}/**
     * Triggered when dragging of an event starts. Initializes drag data associated with the event being dragged.
     * @private
     */},{key:"onDragStart",value:function onDragStart(_ref231){var _client$trigger;var context=_ref231.context,event=_ref231.event;var me=this,client=me.client,name=client.scheduledEventName;me.currentOverClient=client;me.scrollClients={};me.onMouseOverNewTimeline(client);var dragData=me.dragData=me.getDragData(context,event);if(me.showTooltip){var tipTarget=dragData.context.dragProxy?dragData.context.dragProxy.firstChild:context.element;if(!me.tip){me.tip=new Tooltip({id:"".concat(client.id,"-event-drag-tip"),align:'b-t',autoShow:true,clippedBy:me.constrainDragToTimeline?[client.timeAxisSubGridElement,client.bodyContainer]:null,forElement:tipTarget,getHtml:me.getTipHtml.bind(me),// During drag, it must be impossible for the mouse to be over the tip.
style:'pointer-events:none',cls:me.tooltipCls});me.tip.on('innerhtmlupdate',me.updateDateIndicator,me);}else{me.tip.showBy(tipTarget);}}// me.copyKeyPressed = me.isCopyKeyPressed();
//
// if (me.copyKeyPressed) {
//     dragData.refElements.addCls('sch-event-copy');
//     dragData.originalHidden = true;
// }
// Trigger eventDragStart or taskDragStart depending on product
client.trigger("".concat(name,"DragStart"),(_client$trigger={},_defineProperty(_client$trigger,"".concat(name,"Records"),dragData.draggedRecords),_defineProperty(_client$trigger,"context",dragData),_client$trigger));}},{key:"updateDateIndicator",value:function updateDateIndicator(){var _this$dragData=this.dragData,startDate=_this$dragData.startDate,endDate=_this$dragData.endDate,tip=this.tip,endDateElement=tip.element.querySelector('.b-sch-tooltip-enddate');this.clockTemplate.updateDateIndicator(tip.element,startDate);endDateElement&&this.clockTemplate.updateDateIndicator(endDateElement,endDate);}/**
     * Triggered while dragging an event. Updates drag data, validation etc.
     * @private
     */},{key:"onDrag",value:function onDrag(_ref232){var context=_ref232.context,event=_ref232.event;var me=this,dd=me.dragData,start=dd.startDate;var client;if(me.constrainToTimeline){client=me.client;}else{var target=event.target;// Can't detect target under a touch event
if(/^touch/.test(event.type)){var center=Rectangle.from(dd.context.element,null,true).center;target=DomHelper.elementFromPoint(center.x,center.y);}client=IdHelper.fromElement(target,'timelinebase');}var depFeature=me.client.features.dependencies,x=context.newX,y=context.newY;if(!client){if(depFeature){depFeature.updateDependenciesForTimeSpan(dd.draggedRecords[0],dd.context.element);}return;}if(client!==me.currentOverClient){me.onMouseOverNewTimeline(client);}//this.checkShiftChange();
me.updateDragContext(context,event);// Snapping not supported when dragging outside a scheduler
if(me.constrainDragToTimeline&&(me.showExactDropPosition||me.client.timeAxisViewModel.snap)){var newDate=client.getDateFromCoordinate(me.getCoordinate(dd.draggedRecords[0],context.element,[x,y])),timeDiff=newDate-dd.sourceDate,realStart=new Date(dd.origStart-0+timeDiff),offset=client.timeAxisViewModel.getDistanceBetweenDates(realStart,dd.startDate);if(dd.startDate>=client.timeAxis.startDate&&offset!=null){DomHelper.addTranslateX(context.element,offset);}}// Let product specific implementations trigger drag event (eventDrag, taskDrag)
me.triggerEventDrag(dd,start);var valid=me.checkDragValidity(dd,event);if(valid&&typeof valid!=='boolean'){context.message=valid.message||'';valid=valid.valid;}context.valid=valid!==false;if(me.showTooltip){me.tip.realign();}if(depFeature){depFeature.updateDependenciesForTimeSpan(dd.draggedRecords[0],dd.context.element.querySelector(client.eventInnerSelector));}}},{key:"onMouseOverNewTimeline",value:function onMouseOverNewTimeline(newTimeline){var me=this,scrollClients=me.scrollClients;me.currentOverClient.element.classList.remove('b-dragging-'+me.currentOverClient.scheduledEventName);newTimeline.element.classList.add('b-dragging-'+newTimeline.scheduledEventName);if(!(newTimeline.id in scrollClients)){var scrollManager=newTimeline.scrollManager;scrollManager.startMonitoring({element:newTimeline.timeAxisSubGridElement});scrollClients[newTimeline.id]=newTimeline;}me.currentOverClient=newTimeline;}/**
     * Triggered when dropping an event. Finalizes the operation.
     * @private
     */},{key:"onDrop",value:function onDrop(_ref233){var context=_ref233.context,event=_ref233.event;var me=this,currentOverClient=me.currentOverClient,dragData=me.dragData;if(!context.valid){return me.onInvalidDrop({context:context,event:event});}var modified=false;me.updateDragContext(context,event);if(me.tip){me.tip.hide();}if(context.valid&&dragData.startDate&&dragData.endDate){dragData.finalize=function(){me.finalize.apply(me,arguments);context.finalize.apply(context,arguments);};// Allow implementer to take control of the flow, by returning false from this listener,
// to show a confirmation popup etc. This event is documented in EventDrag and TaskDrag
currentOverClient.trigger("before".concat(currentOverClient.capitalizedEventName,"DropFinalize"),{context:dragData,event:event});context.async=dragData.async;// Internal validation, making sure all dragged records fit inside the view
if(!context.async&&me.isValidDrop(dragData)){modified=dragData.startDate-dragData.origStart!==0||dragData.newResource!==dragData.resourceRecord;}}if(!context.async){me.finalize(dragData.valid&&context.valid&&modified);}}},{key:"onDragAbort",value:function onDragAbort(_ref234){var context=_ref234.context;this.client.currentOrientation.onDragAbort(context);if(this.tip){this.tip.hide();}}/**
     * Triggered by drag handler on invalid drop, cleans up.
     * @private
     */},{key:"onInvalidDrop",value:function onInvalidDrop(){var me=this;me.dragData.draggedRecords.forEach(function(record){return record.instanceMeta(me.currentOverClient).retainElement=false;});if(me.tip){me.tip.hide();}}// For the drag across multiple schedulers, tell all involved scroll managers to stop monitoring
},{key:"onDragReset",value:function onDragReset(_ref235){var dragHelper=_ref235.source;var me=this;for(var managerId in me.scrollClients||{}){me.scrollClients[managerId].scrollManager.stopMonitoring(me.scrollClients[managerId].timeAxisSubGridElement);}if(dragHelper.context&&dragHelper.context.started){var eventBarEls=me.dragData.eventBarEls;eventBarEls[0].classList.remove('b-drag-main');}me.scrollClients=null;if(me.currentOverClient){me.currentOverClient.element.classList.remove('b-dragging-'+me.currentOverClient.scheduledEventName);}// Dependencies are updated dynamically during drag, so ensure they are redrawn
// if the event snaps back with no change after abort or an invalid drop.
if(me.dragData&&!me.dragData.context.valid){var dependencies=me.currentOverClient.features.dependencies;if(dependencies){dependencies.scheduleDraw(true);}}// TODO we should clean this up, requires review of the flow first
// me.dragData = null;
}/**
     * Triggered internally on invalid drop.
     * @private
     */},{key:"onInternalInvalidDrop",value:function onInternalInvalidDrop(){var _currentOverClient$tr;var me=this,currentOverClient=me.currentOverClient;if(me.tip){me.tip.hide();}me.drag.abort();// Documented on EventDrag & TaskDrag features
currentOverClient.trigger("after".concat(currentOverClient.capitalizedEventName,"Drop"),(_currentOverClient$tr={},_defineProperty(_currentOverClient$tr,currentOverClient.scheduledEventName+'Records',me.dragData.draggedRecords),_defineProperty(_currentOverClient$tr,"valid",false),_defineProperty(_currentOverClient$tr,"context",me.dragData),_currentOverClient$tr));}//endregion
//region Finalization & validation
/**
     * Called on drop to update the record of the event being dropped.
     * @private
     * @param {Boolean} updateRecords Specify true to update the record, false to treat as invalid
     */},{key:"finalize",value:function(){var _finalize=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee24(updateRecords){var me,client,dragData,context,draggedRecords,result,_client$trigger2;return regeneratorRuntime.wrap(function _callee24$(_context25){while(1){switch(_context25.prev=_context25.next){case 0:me=this,client=me.currentOverClient,dragData=me.dragData,context=dragData.context,draggedRecords=dragData.draggedRecords;draggedRecords.forEach(function(record,i){// Clear flag which makes the event not rerender
record.instanceMeta(client).retainElement=false;// Ensure the dragged elements are available from the EventMapper's cache
// It won't return an event that is in use by dragging.
dragData.eventBarEls[i].classList.remove(me.drag.draggingCls);});if(!updateRecords){_context25.next=11;break;}// updateRecords may or may not be async.
// We see if it returns a Promise.
result=me.updateRecords(dragData);// If updateRecords is async, the calling DragHelper must know this and
// go into a awaitingFinalization state.
if(!(result instanceof Promise)){_context25.next=8;break;}context.async=true;_context25.next=8;return result;case 8:// If the finalize handler decided to change the dragData's validity...
if(!dragData.valid){me.onInternalInvalidDrop();}else{me.drag.reset();// Trigger afterEventDrop or afterTaskDrop depending on product
client.trigger("after".concat(client.capitalizedEventName,"Drop"),(_client$trigger2={},_defineProperty(_client$trigger2,"".concat(client.scheduledEventName,"Records"),draggedRecords),_defineProperty(_client$trigger2,"valid",true),_defineProperty(_client$trigger2,"context",dragData),_client$trigger2));}_context25.next=12;break;case 11:me.onInternalInvalidDrop();case 12:return _context25.abrupt("return",result);case 13:case"end":return _context25.stop();}}},_callee24,this);}));function finalize(_x46){return _finalize.apply(this,arguments);}return finalize;}()//endregion
//region Drag data
/**
     * Updates drag datas dates and validity (calls #validatorFn if specified)
     * @private
     */},{key:"updateDragContext",value:function updateDragContext(info,event){var me=this,dd=me.dragData,client=me.currentOverClient,x=info.newX,y=info.newY,cx=info.clientX,cy=info.clientY,element=info.element,proxyRegion=Rectangle.from(element,client.timeAxisSubGridElement),record=dd.draggedRecords[0],eventRecord=record.isAssignment?record.event:record;dd.browserEvent=event;if(client.timeAxis.isContinuous){var newDate=client.getDateFromCoordinate(me.getCoordinate(eventRecord,element,[cx,cy]),null,false);// Date not found if mouse outside of schedule
if(!newDate){// Date at right edge (endDate), using local coords
newDate=client.getDateFromCoordinate(me.getCoordinate(eventRecord,element,[x+element.offsetWidth,y]));// Also out of time axis? Flag as invalid
if(!newDate){dd.context.valid=false;return;}// Subtract duration to get startDate
newDate=DateHelper.add(newDate,-eventRecord.duration,eventRecord.durationUnit);dd.timeDiff=newDate-dd.sourceDate;}else{dd.timeDiff=newDate-dd.screenSourceDate;}// calculate and round new startDate based on actual dd.timeDiff
dd.startDate=me.adjustStartDate(dd.origStart,dd.timeDiff);dd.endDate=new Date(dd.startDate-0+dd.duration);}else{var range=me.resolveStartEndDates(proxyRegion);dd.startDate=range.startDate;dd.endDate=range.endDate;dd.timeDiff=dd.startDate-dd.origStart;}Object.assign(dd,me.getProductDragContext(dd));if(dd.valid&&dd.endDate>client.timeAxis.startDate&&dd.startDate<client.timeAxis.endDate){var result=!event||me.checkDragValidity(dd,event);if(!result||typeof result==='boolean'){dd.context.valid=result!==false;dd.context.message='';}else{dd.context.valid=result.valid!==false;dd.context.message=result.message;}}else{dd.context.valid=false;}}/**
     * Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.
     * @private
     * @param info
     * @param event
     * @returns {*}
     */},{key:"getDragData",value:function getDragData(info,event){var me=this,client=me.client,_me$setupProductDragD=me.setupProductDragData(info),record=_me$setupProductDragD.record,dateConstraints=_me$setupProductDragD.dateConstraints,eventBarEls=_me$setupProductDragD.eventBarEls,draggedRecords=_me$setupProductDragD.draggedRecords;var origStart=record.startDate,origEnd=record.endDate,timeAxis=client.timeAxis,startsOutsideView=origStart<timeAxis.startDate,endsOutsideView=origEnd>timeAxis.endDate;var coordinate=me.getCoordinate(record,info.element,[info.elementStartX,info.elementStartY]),clientCoordinate=me.getCoordinate(record,info.element,[info.startClientX,info.startClientY]);// prevent elements from being released when out of view
draggedRecords.forEach(function(record){return record.instanceMeta(client).retainElement=true;});// Select current without deselecting other events if Ctrl key is pressed
if(me.drag.startEvent.ctrlKey){me.client.selectEvent(draggedRecords[0],true);}var dragData={context:info,dateConstraints:dateConstraints,eventBarEls:eventBarEls,record:record,draggedRecords:draggedRecords,sourceDate:startsOutsideView?origStart:client.getDateFromCoordinate(coordinate),screenSourceDate:client.getDateFromCoordinate(clientCoordinate,null,false),origStart:origStart,origEnd:origEnd,startDate:origStart,endDate:origEnd,timeDiff:0,startsOutsideView:startsOutsideView,endsOutsideView:endsOutsideView,duration:origEnd-origStart,browserEvent:event// So we can know if SHIFT/CTRL was pressed
};eventBarEls.forEach(function(el,i){el.classList.add(me.drag.draggingCls);el.classList.remove('b-sch-event-hover');el.classList.remove('b-active');el.classList.remove('b-first-render');});if(eventBarEls.length>1){// RelatedElements are secondary elements moved by the same delta as the grabbed element
info.relatedElements=eventBarEls.slice(1);info.relatedElStartPos=[];info.relatedElDragFromPos=[];// Move the selected events into a unified cascade.
if(me.unifiedDrag){// EventBarEls should animate into the cascade
me.client.isAnimating=true;EventHelper.on({element:eventBarEls[1],transitionend:function transitionend(e){me.client.isAnimating=false;},once:true});// Main dragged element should not look different. The relatedElements do.
eventBarEls[0].classList.add('b-drag-main');var _DomHelper$getTransla11=DomHelper.getTranslateXY(info.element),_DomHelper$getTransla12=_slicedToArray(_DomHelper$getTransla11,2),x=_DomHelper$getTransla12[0],y=_DomHelper$getTransla12[1];info.relatedElements.forEach(function(el,i){// Cache the start pos for reversion in case of invalid drag
info.relatedElStartPos[i]=DomHelper.getTranslateXY(el);// Move into cascade and cache the dragFrom pos
x+=10;y+=10;DomHelper.setTranslateXY(el,x,y);info.relatedElDragFromPos[i]=[x,y];});}else{// Start pos and dragFrom pos are the same for non-unified
info.relatedElements.forEach(function(el,i){info.relatedElStartPos[i]=info.relatedElDragFromPos[i]=DomHelper.getTranslateXY(el);});}}return dragData;}// Provide your custom implementation of this to allow additional selected records to be dragged together with the original one.
},{key:"getRelatedRecords",value:function getRelatedRecords(record){return[];}//endregion
//region Constraints
// private
},{key:"setupConstraints",value:function setupConstraints(constrainRegion,elRegion,tickSize,constrained){var me=this,xTickSize=!me.showExactDropPosition&&tickSize>1?tickSize:0,yTickSize=0;// if `constrained` is false then we haven't specified getDateConstraint method and should constrain mouse position to scheduling area
// else we have specified date constraints and so we should limit mouse position to smaller region inside of constrained region using offsets and width.
if(constrained){me.setXConstraint(constrainRegion.left,constrainRegion.right-elRegion.width,xTickSize);}me.setYConstraint(constrainRegion.top,constrainRegion.bottom-elRegion.height,yTickSize);}},{key:"updateYConstraint",value:function updateYConstraint(){var me=this,dragData=me.dragData,context=me.drag.context;// If we're dragging when the vertical size is recalculated by the host grid,
// we must update our Y constraint
if(context){var constrainRegion=me.scheduler.getScheduleRegion(null,dragData.record);me.setYConstraint(constrainRegion.top,constrainRegion.bottom-context.grabbed.offsetHeight,0);}}},{key:"setXConstraint",value:function setXConstraint(iLeft,iRight,iTickSize){var me=this,drag=me.drag;drag.leftConstraint=iLeft;drag.rightConstraint=iRight;drag.minX=iLeft;drag.maxX=iRight;}},{key:"setYConstraint",value:function setYConstraint(iUp,iDown,iTickSize){var me=this,drag=me.drag;drag.topConstraint=iUp;drag.bottomConstraint=iDown;drag.minY=iUp;drag.maxY=iDown;}//endregion
//region Other stuff
},{key:"adjustStartDate",value:function adjustStartDate(startDate,timeDiff){return this.client.timeAxis.roundDate(new Date(startDate-0+timeDiff),this.client.snapRelativeToEventStartDate?startDate:false);}},{key:"resolveStartEndDates",value:function resolveStartEndDates(proxyRect){var dd=this.dragData,startEnd,start=dd.origStart,end=dd.origEnd;if(!dd.startsOutsideView){startEnd=this.client.getStartEndDatesFromRectangle(proxyRect,'round');if(startEnd){start=startEnd.start||dd.startDate;end=DateHelper.add(start,dd.duration,'ms');}}else if(!dd.endsOutsideView){startEnd=this.client.getStartEndDatesFromRectangle(proxyRect,'round');if(startEnd){end=startEnd.end||dd.endDate;start=DateHelper.add(end,-dd.duration,'ms');}}return{startDate:start,endDate:end};}//endregion
//region Dragtip
/**
     * Gets html to display in tooltip while dragging event. Uses clockTemplate to display start & end dates.
     */},{key:"getTipHtml",value:function getTipHtml(){var _me$dragTipTemplate;var me=this,_me$dragData=me.dragData,startDate=_me$dragData.startDate,endDate=_me$dragData.endDate,draggedRecords=_me$dragData.draggedRecords,startText=me.client.getFormattedDate(startDate),endText=me.client.getFormattedEndDate(endDate,startDate),_me$dragData$context=me.dragData.context,valid=_me$dragData$context.valid,message=_me$dragData$context.message;return me.dragTipTemplate((_me$dragTipTemplate={valid:valid,startDate:startDate,endDate:endDate,startText:startText,endText:endText,message:message||''},_defineProperty(_me$dragTipTemplate,me.client.scheduledEventName+'Record',draggedRecords[0]),_defineProperty(_me$dragTipTemplate,"dragData",me.dragData),_defineProperty(_me$dragTipTemplate,"startClockHtml",me.clockTemplate.template({date:startDate,text:startText,cls:'b-sch-tooltip-startdate'})),_defineProperty(_me$dragTipTemplate,"endClockHtml",draggedRecords[0].isMilestone?'':me.clockTemplate.template({date:endDate,text:endText,cls:'b-sch-tooltip-enddate'})),_me$dragTipTemplate));}//endregion
/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"isValidDrop",//region Product specific, implemented in subclasses
// Check if element can be dropped at desired location
value:function isValidDrop(dragData){throw new Error('Implement in subclass');}// Similar to the fn above but also calls validatorFn
},{key:"checkDragValidity",value:function checkDragValidity(dragData){throw new Error('Implement in subclass');}// Update records being dragged
},{key:"updateRecords",value:function updateRecords(context){throw new Error('Implement in subclass');}// Determine if an element can be dragged
},{key:"isElementDraggable",value:function isElementDraggable(el,event){throw new Error('Implement in subclass');}// Get coordinate for correct axis
},{key:"getCoordinate",value:function getCoordinate(record,element,coord){throw new Error('Implement in subclass');}// Product specific drag data
},{key:"setupProductDragData",value:function setupProductDragData(info){throw new Error('Implement in subclass');}// Product specific data in drag context
},{key:"getProductDragContext",value:function getProductDragContext(dd){throw new Error('Implement in subclass');}//endregion
},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;}}],[{key:"defaultConfig",//region Config
get:function get(){return{// documented on Schedulers EventDrag feature and Gantts TaskDrag
dragTipTemplate:function dragTipTemplate(data){return"\n                <div class=\"b-sch-tip-".concat(data.valid?'valid':'invalid',"\">\n                    ").concat(data.startClockHtml,"\n                    ").concat(data.endClockHtml,"\n                    <div class=\"b-sch-tip-message\">").concat(data.message,"</div>\n                </div>\n            ");},// documented on Schedulers EventDrag feature, not used for Gantt
constrainDragToResource:true,/**
             * Specifies whether or not to show tooltip while dragging event
             * @config {Boolean}
             * @default
             */showTooltip:true,/**
             * When enabled, the event being dragged always "snaps" to the exact start date that it will have after drop.
             * @config {Boolean}
             * @default
             */showExactDropPosition:false,/**
             * Set to false to allow dragging tasks freely on the page, useful when you want to drag tasks between multiple Scheduler instances
             * @config {Boolean}
             * @default
             */constrainDragToTimeline:true,/*
            * The store from which the dragged items are mapped to the UI.
            * In Scheduler's implementation of this base class, this will be
            * an EventStore, in Gantt's implementations, this will be a TaskStore.
            * Because both derive from this base, we must refer to it as this.store.
            * @private
            */store:null,tooltipCls:null};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return DragBase;}(InstancePlugin);DragBase._$name='DragBase';/**
 * @module Scheduler/feature/EventDrag
 */var nullResourceArray=[null];//TODO: relay events as in Dependencies. (drag -> eventdrag etc)
//TODO: shift to copy
//TODO: dragging of event that starts & ends outside of view
/**
 * Allows user to drag and drop events within the scheduler, to change startDate or resource assignment.
 *
 * This feature is **enabled** by default
 *
 * @example
 * // constrain drag to current resource
 * let scheduler = new Scheduler({
 *   features: {
 *     eventDrag: {
 *       constrainDragToResource: true
 *     }
 *   }
 * });
 *
 * @extends Scheduler/feature/base/DragBase
 * @demo basic
 * @externalexample scheduler/EventDrag.js
 */var EventDrag=/*#__PURE__*/function(_DragBase){_inherits2(EventDrag,_DragBase);function EventDrag(){_classCallCheck2(this,EventDrag);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventDrag).apply(this,arguments));}_createClass2(EventDrag,[{key:"construct",//endregion
//region Events
/**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  scheduler.on('beforeeventdropfinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeEventDropFinalize
     * @param {Scheduler.view.Scheduler} source Scheduler instance
     * @param {Object} context
     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user
     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target
     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target
     * confirmation)
     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fired on the owning Scheduler after event drop
     * @event afterEventDrop
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel[]} eventRecords
     * @param {Boolean} valid
     * @param {Object} context
     */ /**
     * Fired on the owning Scheduler when an event is dropped
     * @event eventDrop
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel[]} eventRecords
     * @param {Boolean} isCopy
     * @param {Object} context
     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target
     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target
     */ /**
     * Fired on the owning Scheduler before event dragging starts. Return false to prevent the action
     * @event beforeEventDrag
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Object} context
     */ /**
     * Fired on the owning Scheduler when event dragging starts
     * @event eventDragStart
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel[]} eventRecords
     * @param {Object} context
     */ /**
     * Fired on the owning Scheduler when event is dragged
     * @event eventDrag
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel[]} eventRecords
     * @param {Date} startDate
     * @param {Date} endDate
     * @param {Scheduler.model.ResourceModel} newResource
     * @param {Object} context
     */ //endregion
//region Init
value:function construct(scheduler,config){this.scheduler=scheduler;this.store=scheduler.eventStore;_get2(_getPrototypeOf2(EventDrag.prototype),"construct",this).call(this,scheduler,config);}//endregion
//region Drag events
},{key:"isElementDraggable",value:function isElementDraggable(el,event){var scheduler=this.scheduler,eventElement=DomHelper.up(el,scheduler.eventSelector),eventResize=scheduler.features.eventResize;if(!eventElement){return false;}// displaying something resizable within the event?
if(el.matches('[class$="-handle"]')){return false;}var eventRecord=scheduler.resolveEventRecord(eventElement);// using EventResize and over a virtual handle?
// Milestones cannot be resized
if(eventResize&&!eventRecord.isMilestone&&eventResize.resize.overAnyHandle(event,eventElement)){return false;}return true;}},{key:"triggerEventDrag",value:function triggerEventDrag(dd,start){// If there has been a change...
if(dd.startDate-start!==0||dd.newResource!==dd.resourceRecord){this.scheduler.trigger('eventDrag',{eventRecords:dd.draggedRecords,startDate:dd.startDate,endDate:dd.endDate,newResource:dd.newResource,context:dd});}}},{key:"onDragStart",value:function onDragStart(_ref236){var context=_ref236.context,event=_ref236.event;var eventContextMenuFeature=this.client.features.eventContextMenu;_get2(_getPrototypeOf2(EventDrag.prototype),"onDragStart",this).call(this,{context:context,event:event});// If this is a touch action, hide the context menu which may have shown
if(eventContextMenuFeature){eventContextMenuFeature.hideContextMenu(false);}}//endregion
//region Finalization & validation
/**
     * Checks if an event can be dropped on the specified resource.
     * @private
     * @returns {Boolean} Valid (true) or invalid (false)
     */},{key:"isValidDrop",value:function isValidDrop(dragData){var newResource=dragData.newResource,resourceRecord=dragData.resourceRecord;var sourceRecord=dragData.draggedRecords[0];// Not allowed to drop an event to group header
if(newResource.meta.specialRow){return false;}// Not allowed to assign an event twice to the same resource -
// which might happen when we deal with an assignment store
if(resourceRecord!==newResource){// if we operate assignments
if(sourceRecord instanceof AssignmentModel){sourceRecord=sourceRecord.event;}return!sourceRecord.isAssignedTo(newResource);}return true;}},{key:"checkDragValidity",value:function checkDragValidity(dragData,event){var me=this,scheduler=this.currentOverClient;// First make sure DragHelper thinks it's a valid drag, then scheduler domain checks
return me.dragData.context.valid&&(scheduler.allowOverlap||scheduler.isDateRangeAvailable(dragData.startDate,dragData.endDate,dragData.draggedRecords[0],dragData.newResource))&&me.validatorFn.call(me.validatorFnThisObj||me,dragData,event);}//endregion
//region Update records
/**
     * Update events being dragged.
     * @private
     * @param context Drag data.
     */},{key:"updateRecords",value:function updateRecords(context){var me=this,fromScheduler=me.scheduler,toScheduler=me.currentOverClient,copyKeyPressed=false,assignmentStore=fromScheduler.assignmentStore,draggedRecords=context.draggedRecords;// Multiple assignment mode
if(assignmentStore){if(toScheduler!==fromScheduler){throw new Error('Assignments cannot be dragged cross-scheduler');}me.updateRecordsMultipleAssignmentMode(fromScheduler,toScheduler,context,copyKeyPressed);}// Single assignment mode
else{me.updateRecordsSingleAssignmentMode(fromScheduler,toScheduler,context,copyKeyPressed);}// Tell the world there was a successful drop
toScheduler.trigger('eventDrop',{eventRecords:draggedRecords,isCopy:copyKeyPressed,event:context.browserEvent,targetEventRecord:context.targetEventRecord,targetResourceRecord:context.newResource,context:context});}/**
     * Update records being dragged, gantt mode. Sets resource and start date.
     * @private
     */},{key:"updateRecordsSingleAssignmentMode",value:function updateRecordsSingleAssignmentMode(fromScheduler,toScheduler,context,copy){// The code is written to emit as few store events as possible
var me=this,isCrossScheduler=fromScheduler!==toScheduler,fromEventStore=fromScheduler.eventStore,resourceStore=fromScheduler.resourceStore,draggedRecords=context.draggedRecords,timeDiff=context.timeDiff,fromResource=context.resourceRecord,toResource=context.newResource,unifiedDrag=me.unifiedDrag||isCrossScheduler&&draggedRecords.length>1,toAdd=[],indexDiff=me.constrainDragToResource?0:resourceStore.indexOf(fromResource)-resourceStore.indexOf(toResource),event1Date=me.adjustStartDate(draggedRecords[0].startDate,timeDiff);var updated;draggedRecords.forEach(function(draggedEvent,i){var eventBar=context.eventBarEls[i],oldGeneration=draggedEvent.generation,// grabbing resources early, since after ".copy()" the record won't belong to any store
// and ".getResources()" won't work. If it's a move to another scheduler, ensure the
// array still has a length. The process function will do an assign as opposed
// to a reassign
relatedResources=isCrossScheduler?nullResourceArray:draggedEvent.resources;// If changing resource, the element wont be found in SchedulerStores#onEventBeforeCommit and thus the
// committing cls wont be applied. Apply it here, in case we are using a backend. If we are not, it will be
// replaced anyway on the immediate redraw
eventBar.querySelector(fromScheduler.eventInnerSelector).classList.add(fromScheduler.committingCls);if(copy){draggedEvent=draggedEvent.fullCopy(null);toAdd.push(draggedEvent);}else if(fromEventStore!==toScheduler.eventStore){// Removing deassigns events from their resources
fromEventStore.remove(draggedRecords);// This will not affect the UI because the events are not assigned to any resource
toScheduler.eventStore.add(draggedRecords);// Make the event mapper reuse this element
draggedEvent.instanceMeta(toScheduler).fromDragProxy=true;}// Process original dragged record
draggedEvent.beginBatch();// calculate new startDate (and round it) based on timeDiff
var newStartDate=unifiedDrag?event1Date:me.adjustStartDate(draggedEvent.startDate,timeDiff);(indexDiff!==0||unifiedDrag||isCrossScheduler)&&relatedResources.length&&relatedResources.forEach(function(r){var newResource=toResource;// If not dragging events as a unified block, distribute each to a new resource
// using the same offset as the dragged event.
if(!unifiedDrag&&!isCrossScheduler){var newIndex=resourceStore.indexOf(r)-indexDiff;if(newIndex<0){newIndex=0;}else if(newIndex>=resourceStore.getCount()){newIndex=resourceStore.getCount()-1;}newResource=resourceStore.getAt(newIndex);}if(r){draggedEvent.reassign(r,newResource);}else{draggedEvent.assign(newResource);}if(toScheduler.mode!=='vertical'){var isRendered=toScheduler.rowManager.getRowFor(newResource)&&toScheduler.isInTimeAxis(draggedEvent),newId=isRendered?toScheduler.getEventRenderId(draggedEvent,newResource):null;// Ensure the element gets preferentially reused for its own new render
// when batching of its changes is ended and it fires events through its eventStore
if(newId){// If it's cross-scheduler, the element has to be moved into the element
// recycling cache of the toScheduler, and positioned in its foregroundCanvas
if(isCrossScheduler){var elRect=Rectangle.from(context.context.element,toScheduler.foregroundCanvas,true),clone=context.context.element.cloneNode(true);// Ensure that after inserting the dragged element clone into the toScheduler's foregoundCanvas
// it's at the same visual position that it was dragged to.
DomHelper.setTranslateXY(clone,elRect.x,elRect.y);clone.classList.remove('b-first-render');clone.classList.remove('b-active');clone.classList.remove('b-drag-proxy');clone.classList.remove('b-dragging');// This puts a clone of the dragged element into the toScheduler's recycling cache
// *AND* inserts it into the toScheduler's foregroundCanvas.
toScheduler.currentOrientation.cacheTimeSpanElement(draggedEvent,newResource,clone);}else{toScheduler.currentOrientation.releaseTimeSpanDiv(eventBar,true);toScheduler.currentOrientation.updateElementId(eventBar,newId);}}// If the event has been moved out of rendering, just discard the element
else{eventBar.remove();}}});draggedEvent.setStartDate(newStartDate,true,fromEventStore.skipWeekendsDuringDragDrop);draggedEvent.endBatch();// We need to know whether we have successfully made an update in order to
// sync the dragContext's valid flag.
if(draggedEvent.generation!==oldGeneration){updated=true;}});if(toAdd.length){var count=fromEventStore.count;fromEventStore.add(toAdd);if(fromEventStore.count!==count){updated=true;}}if(!updated){context.valid=false;}}/**
     * Update records being dragged, scheduler mode. Sets resource and start date.
     * @private
     */},{key:"updateRecordsMultipleAssignmentMode",value:function updateRecordsMultipleAssignmentMode(fromScheduler,toScheduler,context,copy){var me=this,isCrosScheduler=fromScheduler!==toScheduler,eventStore=fromScheduler.eventStore,draggedRecords=context.draggedRecords,timeDiff=context.timeDiff,fromResource=context.resourceRecord,toResource=context.newResource,handledEventsMap={};var updated;draggedRecords.forEach(function(assignment,i){var event=assignment.event,eventBar=context.eventBarEls[i],oldGeneration=event.generation,newId=fromScheduler.getEventRenderId(assignment.event,toResource);if(handledEventsMap[event.id]){return;}handledEventsMap[event.id]=true;// Ensure the element gets preferentially reused for its own new render
if(newId){// If it's cross-scheduler, the element has to be moved into the element
// recycling cache of the toScheduler, and positioned in its foregroundCanvas
if(isCrosScheduler){toScheduler.currentOrientation.cacheTimeSpanElement(event,eventBar);}else{toScheduler.currentOrientation.updateElementId(eventBar,newId);}}event.setStartDate(me.adjustStartDate(event.startDate,timeDiff),true,eventStore.skipWeekendsDuringDragDrop);// if we dragged the event to a different resource
if(fromResource!==toResource){if(copy){event.assign(toResource);}else if(!event.isAssignedTo(toResource)){event.reassign(assignment.resource,toResource);}else{event.unassign(assignment.resource);}}// We need to know whether we have successfully made an update in order to
// sync the dragContext's valid flag.
updated=updated||assignment.resource!==fromResource||event.generation!==oldGeneration;});if(!updated){context.valid=false;}}//endregion
//region Drag data
},{key:"getProductDragContext",value:function getProductDragContext(dd){var targetEventRecord=this.scheduler.resolveEventRecord(dd.browserEvent.target);var newResource;if(this.constrainDragToResource){newResource=dd.resourceRecord;}else if(!this.constrainDragToTimeline){// If we're dragging freely on the page, require to drag onto a resource row always
newResource=this.resolveResource();}else{newResource=this.resolveResource()||dd.newResource||dd.resourceRecord;}return{valid:Boolean(newResource),newResource:newResource,targetEventRecord:targetEventRecord};}},{key:"setupProductDragData",value:function setupProductDragData(info){var me=this,scheduler=me.scheduler,element=info.grabbed,eventRecord=scheduler.resolveEventRecord(element),resourceRecord=scheduler.resolveResourceRecord(element),assignmentRecord=scheduler.resolveAssignmentRecord(element),eventRegion=Rectangle.from(element),draggedRecords=[assignmentRecord||eventRecord],eventBarEls=[];if(me.constrainDragToResource&&!resourceRecord){throw new Error('Resource could not be resolved for event: '+eventRecord.id);}var dateConstraints=scheduler.getDateConstraints(me.constrainDragToResource?resourceRecord:null,eventRecord);if(me.constrainDragToTimeline){me.setupConstraints(scheduler.getScheduleRegion(me.constrainDragToResource?resourceRecord:null,eventRecord),eventRegion,scheduler.timeAxisViewModel.snapPixelAmount,Boolean(dateConstraints));}// We multi drag other selected events if multiEventSelect is set and
// (the dragged event is already selected, or the ctrl key is pressed)
if(scheduler.multiEventSelect&&(scheduler.isEventSelected(draggedRecords[0])||me.drag.startEvent.ctrlKey)){draggedRecords.push.apply(draggedRecords,me.getRelatedRecords(assignmentRecord||eventRecord));}// Collecting all elements to drag
draggedRecords.forEach(function(r){var eventBarEl;if(r instanceof AssignmentModel){eventBarEl=scheduler.getElementFromEventRecord(r.event,r.resource);}else{eventBarEl=scheduler.getElementFromEventRecord(r,r.resource);}// It's selected but unrendered. This happens when multi-selected events are dragged such
// that on drop, they are outside of the timeline or the rendered block, and become unrendered.
// Users will expect the event to be "there" so we have to bring it into existence
// just for the drag.
if(!eventBarEl){var rd=scheduler.generateTplData(r,r.resource,{timeAxis:true,viewport:true});rd.top=rd.row?rd.top+rd.row.top:scheduler.getResourceEventBox(r,r.resource,true).top;eventBarEl=scheduler.currentOrientation.renderTimeSpan(rd,{},null,true);// Make it be reused after drag
scheduler.currentOrientation.availableDivs.add(eventBarEl);eventBarEl=eventBarEl.innerElement;}eventBarEls.push(eventBarEl);});// What is dragged is the wrapper.
eventBarEls.forEach(function(el,i){return eventBarEls[i]=el.parentNode;});return{record:eventRecord,dateConstraints:dateConstraints,eventBarEls:eventBarEls,draggedRecords:draggedRecords};}/**
     * Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.
     * @private
     * @param info
     * @param event
     * @returns {*}
     */},{key:"getDragData",value:function getDragData(info,event){return Object.assign(_get2(_getPrototypeOf2(EventDrag.prototype),"getDragData",this).call(this,info,event),{resourceRecord:this.scheduler.resolveResourceRecord(info.grabbed)});}/**
     * Provide your custom implementation of this to allow additional selected records to be dragged together with the original one.
     * @param {Scheduler.model.EventModel} eventRecord The eventRecord about to be dragged
     * @return {Scheduler.model.EventModel[]} An array of event records to drag together with the original event
     */},{key:"getRelatedRecords",value:function getRelatedRecords(eventRecord){return this.scheduler.selectedEvents.filter(function(selectedRecord){return selectedRecord!==eventRecord;});}/**
     * Get correct axis coordinate depending on schedulers mode (horizontal -> x, vertical -> y). Also takes milestone
     * layout into account.
     * @private
     * @param {Scheduler.model.EventModel} eventRecord Record being dragged
     * @param {HTMLElement} element Element being dragged
     * @param {Number[]} coord XY coordinates
     * @returns {Number|Number[]} X,Y or XY
     */},{key:"getCoordinate",value:function getCoordinate(eventRecord,element,coord){var scheduler=this.currentOverClient;if(scheduler.isHorizontal){var x=coord[0];// Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events
if(scheduler.milestoneLayoutMode!=='default'&&eventRecord.isMilestone){switch(scheduler.milestoneAlign){case'center':x+=element.offsetWidth/2;break;case'end':x+=element.offsetWidth;break;}}return x;}else{var y=coord[1];// Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events
if(scheduler.milestoneLayoutMode!=='default'&&eventRecord.isMilestone){switch(scheduler.milestoneAlign){case'center':y+=element.offsetHeight/2;break;case'end':y+=element.offsetHeight;break;}}return y;}}/**
     * Get resource record occluded by the drag proxy.
     * @private
     * @returns {Scheduler.model.ResourceModel}
     */},{key:"resolveResource",value:function resolveResource(){var me=this,client=me.currentOverClient,isHorizontal=client.isHorizontal,context=me.dragData.context,element=context.dragProxy||context.element,scrollerElement=client.timeAxisSubGrid.virtualScrollerElement,pageRect=Rectangle.from(element,null,true),x=isHorizontal?context.clientX:pageRect.center.x,y=client.isVertical||me.unifiedDrag?context.clientY:pageRect.center.y,localRect=Rectangle.from(element,me.currentOverClient.timeAxisSubGridElement,true),_localRect$center=localRect.center,lx=_localRect$center.x,ly=_localRect$center.y;// This is benchmarked as the fastest way to find a Grid Row from a viewport Y coordinate
// so use it in preference to elementFromPoint (which causes a forced synchonous layout) in horiontal mode.
if(isHorizontal){var row=client.rowManager.getRowAt(y);if(row){return client.resourceStore.getAt(row.dataIndex);}}// Do not find the drag element at the x, y position.
element.style.pointerEvents='none';// Do not find the horizontal scrollbar either
if(scrollerElement){scrollerElement.style.display='none';}var node=DomHelper.elementFromPoint(x,y);element.style.pointerEvents='';if(scrollerElement){scrollerElement.style.display='';}// If we found an element there, and it can be used to resolve a resourceRecord, use that
return node&&client.resolveResourceRecord(node,[lx,ly]);}//endregion
//region Other stuff
},{key:"adjustStartDate",value:function adjustStartDate(startDate,timeDiff){var scheduler=this.currentOverClient;return scheduler.timeAxis.roundDate(new Date(startDate-0+timeDiff),scheduler.snapRelativeToEventStartDate?startDate:false);}},{key:"resolveStartEndDates",value:function resolveStartEndDates(proxyRect){var scheduler=this.currentOverClient,dd=this.dragData;var startEnd,start=dd.origStart,end=dd.origEnd;if(!dd.startsOutsideView){startEnd=scheduler.getStartEndDatesFromRectangle(proxyRect,'round');if(startEnd){// Make sure we didn't target a start date that is filtered out, if we target last hour cell (e.g. 21:00) of
// the time axis, and the next tick is 08:00 following day. Trying to drop at end of 21:00 cell should target start of next cell
if(startEnd.start&&!scheduler.timeAxis.dateInAxis(startEnd.start,false)){var tick=scheduler.timeAxis.getTickFromDate(startEnd.start);if(tick){startEnd.start=scheduler.timeAxis.getDateFromTick(tick);}}start=startEnd.start||dd.startDate;end=DateHelper.add(start,dd.duration,'ms');}}else if(!dd.endsOutsideView){startEnd=scheduler.getStartEndDatesFromRectangle(proxyRect,'round');if(startEnd){end=startEnd.end||dd.endDate;start=DateHelper.add(end,-dd.duration,'ms');}}return{startDate:start,endDate:end};}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Template used to generate drag tooltip contents.
             * ```
             * const scheduler = new Scheduler({
             *   features : {
             *     eventDrag : {
             *       dragTipTemplate({eventRecord, startText}) {
             *         return `${eventRecord.name}: ${startText}`
             *       }
             *     }
             *   }
             * });
             * ```
             * @config {Function} dragTipTemplate
             * @param {Object} data Tooltip data
             * @param {Scheduler.model.EventModel} data.eventRecord
             * @param {Boolean} data.valid Currently over a valid drop target or not
             * @param {Date} data.startDate New start date
             * @param {Date} data.endDate New end date
             * @param {String} data.startText Formatted new start date
             * @param {String} data.endText Formatted new end date
             * @param {String} data.startClockHtml Pre-generated HTML to display startDate as clock/calendar
             * @param {String} data.endClockHtml Pre-generated HTML to display endDate as clock/calendar
             * @param {Object} data.dragData Detailed drag context
             * @returns {String}
             */ /**
             * Set to true to only allow dragging events within the same resource.
             * @config {Boolean}
             * @default
             */constrainDragToResource:false,/**
             * An empty function by default, but provided so that you can perform custom validation on
             * the item being dragged. This function is called during the drag and drop process and also after the drop is made.
             * Return true if the new position is valid, false to prevent the drag.
             * @param {Object} context A drag drop context object containing { draggedRecords, startDate, endDate, newResource }
             * @param {Event} e The event object
             * @return {Boolean}
             * @config {Function}
             */validatorFn:function validatorFn(){},/**
             * The `this` reference for the validatorFn
             * @config {Object}
             */validatorFnThisObj:null,/**
             * When the host Scheduler is `{@link Scheduler.view.mixin.EventSelection#config-multiEventSelect multiEventSelect}: true`
             * then, there are two modes of dragging *within the same Scheduler*.
             *
             * Non unified means that all selected events are dragged by the same number of resource rows.
             *
             * Unified means that all selected events are collected together and dragged as one, and are all dropped
             * on the same targeted resource row at the same targeted time.
             * @config {Boolean}
             * @default false
             */unifiedDrag:null};}}]);return EventDrag;}(DragBase);exports.EventDrag=EventDrag;EventDrag._$name='EventDrag';GridFeatureManager.registerFeature(EventDrag,true,'Scheduler');/**
 * @module Scheduler/feature/base/DragCreateBase
 */ // TODO: add hovertip if EvenDrag feature not used
// TODO: some of the code here could be shared with EventResize. make common base class?
// TODO: touch support
// TODO: mouse up outside not working as it should
/**
 * Base class for EventDragCreate (Scheduler) and TaskDragCreate (Gantt) features. Contains shared code. Not to be used directly.
 *
 * @extends Common/mixin/InstancePlugin
 */var DragCreateBase=/*#__PURE__*/function(_InstancePlugin17){_inherits2(DragCreateBase,_InstancePlugin17);function DragCreateBase(){_classCallCheck2(this,DragCreateBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(DragCreateBase).apply(this,arguments));}_createClass2(DragCreateBase,[{key:"doDestroy",value:function doDestroy(){this.tip&&this.tip.destroy();this.resize&&this.resize.destroy();_get2(_getPrototypeOf2(DragCreateBase.prototype),"doDestroy",this).call(this);}//endregion
//region Proxy element & resizing
/**
     * Adds a proxy element to illustrate the timespan that might be created
     * @param config
     * @param {Common.data.Model} config.rowRecord  The row for which an event proxy element is being created.
     * @param {Number} config.startX the position along the time axis at which to display the proxy element.
     * @param {Number} [config.width] the width of the proxy element.
     */},{key:"addProxy",value:function addProxy(config){var me=this,client=me.client,barMargin=client.barMargin,region=client.currentOrientation.getRowRegion(config.rowRecord);var width,height,proxyX,proxyY;if(client.isHorizontal){proxyX='currentX'in config?Math.min(config.startX,config.currentX+1):config.startX;proxyY=region.y+barMargin;width=config.width||me.dragTolerance;height=region.height-barMargin*2;}else{proxyX=region.x+barMargin;proxyY='currentY'in config?Math.min(config.startY,config.currentY+1):config.startY;width=region.width-barMargin*2;height=config.height||me.dragTolerance;}// This CSS class is to block further drag creates when one is in progress (like awaiting async finalization)
client.element.classList.add('b-dragcreating');// This CSS class is to block hover for other events during actually dragging the proxy
client.element.classList.add('b-dragcreating-proxy-sizing');// We are dragging to size element from nothing. Its size on drag is calculated by its *initial size*, plus the
// mouse movement delta, so it MUST start at zero for that to yield the correct result.
return me.proxy=DomHelper.createElement({parent:client.foregroundCanvas,className:me.proxyCls,style:"transform:translate(".concat(proxyX,"px, ").concat(proxyY,"px);width:").concat(width,"px;height:").concat(height,"px"),// Prevent element from being recycled by DomHelper.sync()
retainElement:true});}/**
     * Remove proxy element and clean up related stuff
     * @private
     */},{key:"removeProxy",value:function removeProxy(){var me=this;if(me.proxy){me.proxy.remove();me.resize.destroy();me.proxy=me.resize=null;// This CSS class is to block further drag creates when one is in progress (like awaiting async finalization)
me.client.element.classList.remove('b-dragcreating');// This CSS class is to block hover for other events during actually dragging the proxy
me.client.element.classList.remove('b-dragcreating-proxy-sizing');me.tip&&me.tip.hide();}}/**
     * Creates an instance of ResizeHelper used to resize the proxy element
     * @param event
     * @param data
     */},{key:"initResizer",value:function initResizer(event,data){var me=this;var edge;if(me.client.isHorizontal){edge=data.currentX>data.startX?'right':'left';}else{edge=data.currentY>data.startY?'bottom':'top';}me.resize&&me.resize.destroy();me.resize=new ResizeHelper({name:me.constructor.name,// For debugging
direction:me.client.isVertical?'vertical':'horizontal',isTouch:event.type.startsWith('touch'),grab:{element:me.proxy,edge:edge,event:data.startEvent},allowEdgeSwitch:true,// Means that they can switch edges; the mouse can cross the zero point and drag the other way
outerElement:me.client.timeAxisSubGridElement,// Constrain resize to view
scrollManager:me.client.scrollManager,scroller:me.client.timeAxisSubGrid.scrollable,// Scroll in both directions
listeners:{resizing:me.onResizing,resize:me.onResize,cancel:me.onCancel,thisObj:me}});me.resize.context.resource=data.resource;}//endregion
//region Tooltip
/**
     * Creates a tooltip that displays start & end dates. Anchored to the proxy element
     */},{key:"initTooltip",value:function initTooltip(){var me=this,client=me.client;if(me.showTooltip){if(me.tip){me.tip.showBy(me.getTooltipTarget());}else{me.clockTemplate=new ClockTemplate({timeAxisViewModel:client.timeAxisViewModel});me.tip=new Tooltip({id:"".concat(client.id,"-drag-create-tip"),autoShow:true,trackMouse:false,getHtml:me.getTipHtml.bind(me),align:client.isVertical?'t-b':'b100-t100',hideDelay:0,axisLock:true// Don't want it flipping to the side where we are dragging
});me.tip.on('innerhtmlupdate',me.updateDateIndicator,me);}}}},{key:"updateDateIndicator",value:function updateDateIndicator(){var me=this,_me$createContext=me.createContext,startDate=_me$createContext.startDate,endDate=_me$createContext.endDate,tip=me.tip,endDateElement=tip.element.querySelector('.b-sch-tooltip-enddate');if(startDate&&endDate){me.clockTemplate.updateDateIndicator(tip.element,startDate);endDateElement&&me.clockTemplate.updateDateIndicator(endDateElement,endDate);}}/**
     * Updates tooltips contents
     * @returns {*}
     */},{key:"getTipHtml",value:function getTipHtml(){if(!this.resize.context)return;// keeping this on separate row to not mess up look of other declarations
var me=this,client=me.client,_me$resize$context=me.resize.context,edge=_me$resize$context.edge,newX=_me$resize$context.newX,newY=_me$resize$context.newY,elementStartX=_me$resize$context.elementStartX,elementStartY=_me$resize$context.elementStartY,elementWidth=_me$resize$context.elementWidth,elementHeight=_me$resize$context.elementHeight,newWidth=_me$resize$context.newWidth,newHeight=_me$resize$context.newHeight,valid=_me$resize$context.valid,message=_me$resize$context.message;var start,end;if(client.isHorizontal){var x=edge==='left'?newX:elementStartX,// Coordinates are 0 based, widths are not so subtracting 1 from the widths
endX=Math.min(Math.max(x+(newWidth||elementWidth)-1,0),client.timeAxisViewModel.totalSize-1);start=client.getDateFromCoordinate(x,'round',true);end=client.getDateFromCoordinate(endX,'round',true);}else{var y=edge==='top'?newY:elementStartY,// Coordinates are 0 based, widths are not so subtracting 1 from the widths
endY=Math.min(Math.max(y+(newHeight||elementHeight)-1,0),client.timeAxisViewModel.totalSize-1);start=client.getDateFromCoordinate(y,'round',true);end=client.getDateFromCoordinate(endY,'round',true);}var first=DateHelper.min(start,end),last=DateHelper.max(start,end),startText=first&&client.getFormattedDate(first),endText=last&&end&&client.getFormattedEndDate(last,first);return me.tipTemplate({valid:valid,startDate:first,endDate:last,startText:startText,endText:endText,message:message,startClockHtml:me.clockTemplate.template({date:first,text:startText,cls:'b-sch-tooltip-startdate'}),endClockHtml:me.clockTemplate.template({// actual end date and display date may differ
date:client.getDisplayEndDate(last,first),text:endText,cls:'b-sch-tooltip-enddate'})});}//endregion
//region Finalize (create EventModel)
},{key:"finalize",value:function finalize(doCreate){var me=this;if(doCreate){// Call product specific implementation
me.finalizeDragCreate(me.createContext);}me.proxy.retainElement=false;me.client.trigger('afterDragCreate',{proxyElement:me.proxy});me.reset();}//endregion
//region Events
},{key:"onElementMouseDown",value:function onElementMouseDown(event){var me=this,client=me.client;// detect mouse down directly in scheduler cell
if(event.button===0&&event.target.matches('.b-sch-timeaxis-cell')&&!me.disabled&&!client.readOnly){var rowRecord=client.isVertical?client.resolveResourceRecord(event):client.getRecordFromElement(event.target);// no drag creation in group headers etc.
if(rowRecord.meta.specialRow){return;}if(me.preventMultiple&&!me.isRowEmpty(rowRecord)){return;}me.monitorMove=true;me.createContext={startEvent:event,startScreenX:event.screenX,startScreenY:event.screenY,startX:event.offsetX,startY:event.offsetY,cellElement:event.target,rowRecord:rowRecord};me.mouseUpDetacher=EventHelper.on({element:document.body,mouseup:'onMouseUp',once:true,thisObj:this});}}},{key:"onElementMouseMove",value:function onElementMouseMove(event){var me=this;if(me.monitorMove){var createContext=me.createContext,client=me.client,delta=me.client.isVertical?createContext.startScreenY-event.screenY:createContext.startScreenX-event.screenX;if(Math.abs(delta)>me.dragTolerance){var dateTime=client.getDateFromDomEvent(event),region=Rectangle.from(client.timeAxisSubGridElement,null,true);if(me.handleBeforeDragCreate(dateTime,event)===false){me.monitorMove=false;return;}// Math.max with 0 because if the mousedown is within dragTolerance of
// the left edge and then drag goes left, dragging can begin with
// the X in negative territory.
createContext.currentX=Math.max(event.clientX-region.x+client.timeAxisSubGrid.scrollable.x,0);createContext.currentY=Math.max(event.clientY-region.y+client.timeAxisSubGrid.scrollable.y,0);me.addProxy(me.createContext);me.initResizer(event,me.createContext);me.initTooltip();me.monitorMove=false;client.trigger('dragCreateStart',{proxyElement:me.proxy});}}// If dragcreate is async, resizer was already reset and we should not
// align tooltip anymore
if(me.proxy&&me.showTooltip&&me.resize.context){me.tip.alignTo(me.getTooltipTarget());}}},{key:"getTooltipTarget",value:function getTooltipTarget(){var me=this,target=Rectangle.from(me.proxy,null,true);if(me.client.isVertical){// Align to the dragged edge of the proxy, and then bump bottom so that the anchor aligns perfectly.
if(me.resize.context.edge==='bottom'){target.y=target.bottom-1;}target.height=me.tip.anchorSize[1]/2;}else{// Align to the dragged edge of the proxy, and then bump right so that the anchor aligns perfectly.
if(me.resize.context.edge==='right'){target.x=target.right-1;}target.width=me.tip.anchorSize[0]/2;}return{target:target};}},{key:"onMouseUp",value:function onMouseUp(){var me=this;me.client.element.classList.remove('b-dragcreating-proxy-sizing');me.monitorMove=false;}/**
     * Prevent right click when drag creating
     * @returns {Boolean}
     * @internal
     */},{key:"onElementContextMenu",value:function onElementContextMenu(){if(this.proxy)return false;}},{key:"onResizing",value:function onResizing(_ref237){var context=_ref237.context,event=_ref237.event;var me=this,client=me.client,x=context.edge==='left'?context.newX:context.elementStartX,y=context.edge==='top'?context.newY:context.elementStartY,// Coordinates are 0 based, widths are not so subtracting 1 from the widths
endX=Math.min(x+Math.max((context.newWidth||context.elementWidth)-1,0),client.timeAxisViewModel.totalSize-1),endY=Math.min(y+Math.max((context.newHeight||context.elementHeight)-1,0),client.timeAxisViewModel.totalSize-1),startCoord=client.isVertical?y:x,endCoord=client.isVertical?endY:endX,first=client.getDateFromCoordinate(startCoord,'round',true),last=client.getDateFromCoordinate(endCoord,'round',true),dc=me.dateConstraints;var start=DateHelper.min(first,last),end=DateHelper.max(first,last);if(dc){end=DateHelper.constrain(end,dc.start,dc.end);start=DateHelper.constrain(start,dc.start,dc.end);}Object.assign(me.createContext,{startDate:start,endDate:end});context.valid=me.checkValidity(me.createContext,event);context.message='';if(context.valid&&typeof context.valid!=='boolean'){context.message=context.valid.message;context.valid=context.valid.valid;}// If users returns nothing, that's interpreted as valid
context.valid=context.valid!==false;}},{key:"onResize",value:function onResize(_ref238){var valid=_ref238.context.valid,event=_ref238.event;var me=this,_me$createContext2=me.createContext,startDate=_me$createContext2.startDate,endDate=_me$createContext2.endDate;if(!startDate||!endDate||endDate-startDate<=0)valid=false;Object.assign(me.createContext,{event:event,async:false,finalize:function finalize(doCreate){return me.finalize(doCreate);}});if(valid){me.client.trigger('beforeDragCreateFinalize',{context:me.createContext,event:event,proxyElement:me.proxy});}// Drag create could be finalized immediately
if(me.createContext){// OMG, how not to confuse those contexts?
me.resize.context.async=me.createContext.async;if(!me.createContext.async){me.finalize(valid);}else{// We do not want to remove resizer yet, because it will also remove context and proxy element (or resize to 0 width)
// Instead we blindfold resize helper to prevent event resize from starting parallel drag create
me.resize.removeListeners();}}}},{key:"onCancel",value:function onCancel(){this.cancel();}},{key:"cancel",value:function cancel(){this.reset();this.mouseUpDetacher&&this.mouseUpDetacher();}},{key:"reset",value:function reset(){var me=this;me.removeProxy();me.createContext=null;me.monitorMove=false;}//endregion
//region Product specific, implemented in subclasses
},{key:"checkValidity",value:function checkValidity(context,event){throw new Error('Implement in subclass');}},{key:"triggerDragCreateEnd",value:function triggerDragCreateEnd(newRecord,context){throw new Error('Implement in subclass');}},{key:"handleBeforeDragCreate",value:function handleBeforeDragCreate(dateTime,event){throw new Error('Implement in subclass');}},{key:"isRowEmpty",value:function isRowEmpty(rowRecord){throw new Error('Implement in subclass');}//endregion
},{key:"dragging",get:function get(){return this.resize;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * true to start disabled
             * @config {Boolean}
             * @default
             */disabled:false,/**
             * true to show a time tooltip when dragging to create a new event
             * @config {Boolean}
             * @default
             */showTooltip:true,/**
             * Number of pixels the drag target must be moved before dragging is considered to have started. Defaults to 2.
             * @config {Number}
             * @default
             */dragTolerance:2,// used by gantt to only allow one task per row
preventMultiple:false,validatorFn:function validatorFn(){},/**
             * `this` reference for the validatorFn
             * @config {Object}
             */validatorFnThisObj:null,/**
             * CSS class to add to proxy used when creating a new event
             * @config {String}
             * @default
             * @private
             */proxyCls:'b-sch-dragcreator-proxy',tipTemplate:function tipTemplate(data){return"\n                <div class=\"b-sch-tip-".concat(data.valid?'valid':'invalid',"\">\n                    ").concat(data.startClockHtml,"\n                    ").concat(data.endClockHtml,"\n                    <div class=\"b-sch-tip-message\">").concat(data.message,"</div>\n                </div>\n            ");}};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['onElementMouseDown','onElementMouseMove'],before:['onElementContextMenu']};}}]);return DragCreateBase;}(InstancePlugin);DragCreateBase._$name='DragCreateBase';/**
 * @module Scheduler/feature/EventDragCreate
 */ // TODO: add hovertip if EventDrag feature not used
// TODO: some of the code here could be shared with EventResize. make common base class?
// TODO: touch support
// TODO: mouse up outside not working as it should
/**
 * Feature that allows the user to create new events by dragging in empty parts of the scheduler rows.
 *
 * This feature is **enabled** by default
 *
 * **NOTE:** Incompatible with {@link Scheduler.feature.Pan Pan} feature.
 *
 * @extends Scheduler/feature/base/DragCreateBase
 * @demo basic
 * @externalexample scheduler/EventDragCreate.js
 */var EventDragCreate=/*#__PURE__*/function(_DragCreateBase){_inherits2(EventDragCreate,_DragCreateBase);function EventDragCreate(){_classCallCheck2(this,EventDragCreate);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventDragCreate).apply(this,arguments));}_createClass2(EventDragCreate,[{key:"construct",//endregion
//region Events
/**
     * Fires on the owning Scheduler after the new event has been created.
     * @event dragCreateEnd
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.EventModel} newEventRecord
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @param {MouseEvent} event The ending mouseup event.
     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.
     */ /**
     * Fires on the owning Scheduler at the beginning of the drag gesture
     * @event beforeDragCreate
     * @param {Scheduler.view.Scheduler} source
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @param {Date} date The datetime associated with the drag start point.
     */ /**
     * Fires on the owning Scheduler after the drag start has created a proxy element.
     * @event dragCreateStart
     * @param {Scheduler.view.Scheduler} source
     * @param {HTMLElement} proxyElement The proxy representing the new event.
     */ /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  scheduler.on('beforedragcreatefinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeDragCreateFinalize
     * @param {Scheduler.view.Scheduler} source Scheduler instance
     * @param {HTMLElement} proxyElement Proxy element, representing future event
     * @param {Object} context
     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user
     * confirmation)
     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fires on the owning Scheduler at the end of the drag create gesture whether or not
     * a new event was created by the gesture.
     * @event afterDragCreate
     * @param {Scheduler.view.Scheduler} source
     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.
     */ //endregion
//region Init
value:function construct(scheduler,config){var me=this;me.scheduler=scheduler;// Assign eventStore as store, it is used when drag creating by shared code
me.store=scheduler.eventStore;_get2(_getPrototypeOf2(EventDragCreate.prototype),"construct",this).call(this,scheduler,config);}//endregion
//region Scheduler specific implementation
},{key:"finalizeDragCreate",value:function finalizeDragCreate(context){var newEventRecord=new this.store.modelClass({startDate:context.startDate,endDate:context.endDate});this.proxy.dataset.eventId=newEventRecord.id;this.scheduler.trigger('dragCreateEnd',{newEventRecord:newEventRecord,resourceRecord:context.rowRecord,event:context.event,proxyElement:this.proxy});}},{key:"handleBeforeDragCreate",value:function handleBeforeDragCreate(dateTime,event){var me=this,result=me.scheduler.trigger('beforeDragCreate',{resourceRecord:me.createContext.rowRecord,date:dateTime,event:event});if(result){// Tooltip will not be activated while drag is in progress,
// but we need to hide it deliberately on drag start
var tipFeature=me.scheduler.features.scheduleTooltip;if(tipFeature){tipFeature.hoverTip&&tipFeature.hoverTip.hide();}}// Save date constraints
me.dateConstraints=me.scheduler.getDateConstraints(me.createContext.rowRecord,dateTime);return result;}},{key:"checkValidity",value:function checkValidity(context,event){var me=this,client=me.client;// Nicer for users of validatorFn
context.resourceRecord=context.rowRecord;return(client.allowOverlap||client.isDateRangeAvailable(context.startDate,context.endDate,null,context.resourceRecord))&&me.validatorFn.call(me.validatorFnThisObj||me,context,event);}// Determine if resource already has events or not
},{key:"isRowEmpty",value:function isRowEmpty(resourceRecord){var events=this.store.getEventsForResource(resourceRecord);return!events||!events.length;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{// used by gantt to only allow one task per row
preventMultiple:false,/**
             * An empty function by default, but provided so that you can perform custom validation on the event being created.
             * Return true if the new event is valid, false to prevent an event being created.
             * @param {Object} context A drag create context, containing at least { startDate, endDate, resourceRecord }
             * @param {Event} event The event object
             * @return {Boolean} isValid
             * @config {function}
             */validatorFn:function validatorFn(){}};}}]);return EventDragCreate;}(DragCreateBase);exports.EventDragCreate=EventDragCreate;EventDragCreate._$name='EventDragCreate';GridFeatureManager.registerFeature(EventDragCreate,true,'Scheduler');/**
 * @module Scheduler/feature/base/EditBase
 */var DH=DateHelper,makeDate=function makeDate(fields){// single field, update record directly
if(fields.length===1)return fields[0].value;// two fields, date + time
else if(fields.length===2){var _ref239=fields[0]instanceof DateField?fields:fields.reverse(),_ref240=_slicedToArray(_ref239,2),date=_ref240[0],time=_ref240[1],dateValue=DH.parse(date.value);dateValue.setHours(time.value.getHours(),time.value.getMinutes(),time.value.getSeconds(),time.value.getMilliseconds());return dateValue;}// shouldn't happen...
return null;},copyTime=function copyTime(dateTo,dateFrom){var d=new Date(dateTo.getTime());d.setHours(dateFrom.getHours(),dateFrom.getMinutes());return d;},adjustEndDate=function adjustEndDate(startDate,startTime,me){// The end datetime just moves in response to the changed start datetime, keeping the same duration.
if(startDate&&startTime){var newEndDate=DH.add(copyTime(me.startDateField.value,me.startTimeField.value),me.eventRecord.durationMS,'milliseconds');me.endDateField.value=newEndDate;me.endTimeField.value=DH.clone(newEndDate);}};/**
 * Base class for EventEdit (Scheduler) and TaskEdit (Gantt) features. Contains shared code. Not to be used directly.
 *
 * @extends Common/mixin/InstancePlugin
 */var EditBase=/*#__PURE__*/function(_InstancePlugin18){_inherits2(EditBase,_InstancePlugin18);function EditBase(){_classCallCheck2(this,EditBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(EditBase).apply(this,arguments));}_createClass2(EditBase,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var _client$on;var me=this;client.eventEdit=me;_get2(_getPrototypeOf2(EditBase.prototype),"construct",this).call(this,client,config);me.clientListenersDetacher=client.on((_client$on={},_defineProperty(_client$on,me.triggerEvent,me.onActivateEditor),_defineProperty(_client$on,"dragcreateend",me.onDragCreateEnd),_defineProperty(_client$on,"thisObj",me),_client$on));}},{key:"doDestroy",value:function doDestroy(){this.clientListenersDetacher();this.editor&&this.editor.destroy();_get2(_getPrototypeOf2(EditBase.prototype),"doDestroy",this).call(this);}//endregion
//region Editing
},{key:"insertExtraWidgetsIntoDefaultWidgets",/**
     * Insert extra fields into default Editor fields according to specific rules:
     * - If no index provided insert them into `extraItems` placeholder (or at the end if not);
     * - If index provided sort ASC and insert one by one, but only after no-index fields are inserted;
     * - If `extraItems` placeholder exists, don't take widgets that go after it into account;
     * @private
     */value:function insertExtraWidgetsIntoDefaultWidgets(editorConfig){var me=this;if(!me.extraItems||!me.extraItems.length){return;}// Find default extra widgets position
var index=editorConfig.items.findIndex(function(widget){return widget.type==='extraItems';}),tail;// If extra widgets placeholder exists
if(index>-1){// Remove extra widgets placeholder from its position
editorConfig.items.splice(index,1);// Backup everything that goes after extra widgets placeholder, like Save/Delete/Cancel buttons
tail=editorConfig.items.splice(index);}// Split extra widgets on 2 parts: those which have index and those which haven't
var withIndex=me.extraItems.filter(function(widget){return widget.index>=0;}),withoutIndex=me.extraItems.filter(function(widget){return!(widget.index>=0);});// Add those without index to the end of the default widgets
editorConfig.items=editorConfig.items.concat(withoutIndex);// Sort those which have index in ASC order, so we insert fields in series
withIndex.sort(function(widgetA,widgetB){return widgetA.index-widgetB.index;});// And now insert extra widgets at their individually specified index
withIndex.forEach(function(widget){return editorConfig.items.splice(widget.index,0,widget);});if(tail&&tail.length){// Return backuped fields to the end of the widgets
editorConfig.items=editorConfig.items.concat(tail);}}},{key:"onDatesChange",value:function onDatesChange(params){var me=this,field=params.source,value=params.value;switch(field.ref){case'startDateField':me.startTimeField&&adjustEndDate(value,me.startTimeField.value,me);break;case'startTimeField':me.startDateField&&adjustEndDate(me.startDateField.value,value,me);break;}if(me.endTimeField){// If the event starts and ends on the same day, the time fields need
// to have their min and max set against each other.
if(DH.isEqual(DH.clearTime(me.startDateField.value),DH.clearTime(me.endDateField.value))){me.endTimeField.min=me.startTimeField.value;}else{me.endTimeField.min=null;}}}//endregion
//region Save
},{key:"save",value:function save(){throw new Error('Implement in subclass');}},{key:"onBeforeSave",/**
     * Template method, intended to be overridden. Called before the event record has been updated.
     * @param {Scheduler.model.EventModel} eventRecord The event record
     *
     **/value:function onBeforeSave(eventRecord){}/**
     * Template method, intended to be overridden. Called after the event record has been updated.
     * @param {Scheduler.model.EventModel} eventRecord The event record
     *
     **/},{key:"onAfterSave",value:function onAfterSave(eventRecord){}/**
     * Updates record being edited with values from the editor
     * @private
     */},{key:"updateRecord",value:function updateRecord(record){var values=this.values;// Clean resourceId / resources out of values when using assignment store, it will handle the assignment
if(this.scheduler.assignmentStore){delete values.resource;}record.set(values);}//endregion
//region Events
},{key:"onPopupBeforeHide",value:function onPopupBeforeHide(){var me=this;me.client.element.classList.remove('b-eventeditor-editing');me.dragProxyElement&&me.dragProxyElement.remove();me.dragProxyElement=null;}},{key:"onPopupKeyDown",value:function onPopupKeyDown(_ref241){var event=_ref241.event;if(event.key==='Enter'&&this.saveAndCloseOnEnter&&event.target.tagName.toLowerCase()==='input'){// Need to prevent this key events from being fired on whatever receives focus after the editor is hidden
event.preventDefault();// If enter key was hit in an input element of a start field, need to adjust end date fields (the same way as if #onDatesChange handler was called)
if(event.target.name==='startDate'){adjustEndDate(this.startDateField.value,this.startTimeField.value,this);}this.onSaveClick();}}},{key:"onSaveClick",value:function onSaveClick(){if(this.save()){this.editor.close();}}},{key:"onDeleteClick",value:function onDeleteClick(){if(this.deleteEvent()){// We expect deleteEvent will trigger close if autoClose is true and focus has moved out,
// otherwise need to call it manually
if(!this.editor.autoClose||this.editor.containsFocus){this.editor.close();}}}},{key:"onCancelClick",value:function onCancelClick(){this.editor.close();}//endregion
},{key:"editorConfig",get:function get(){return this._editorConfig;},set:function set(editorConfig){var me=this,defaultEditorConfig=me.getDefaultConfiguration().editorConfig;// Apply editorConfig to the default editorConfig, allowing users to manipulate for example only bbar
editorConfig=ObjectHelper.assign({},defaultEditorConfig,editorConfig);editorConfig.items=editorConfig.items||[];// Massage the incoming widgets according to our needs before caching the configuration for use in getEditor.
me.insertExtraWidgetsIntoDefaultWidgets(editorConfig);me._editorConfig=editorConfig;}},{key:"extraWidgets",get:function get(){if(!this._skipWarn){console.warn('`extraWidgets` was deprecated in 2.1, please change your code to use `extraItems`');}return this._extraItems;},set:function set(widgets){console.warn('`extraWidgets` was deprecated in 2.1, please change your code to use `extraItems`');this._extraItems=widgets;}// TODO: When removing extraWidgets above, these can also be removed
},{key:"extraItems",get:function get(){var me=this;// Pull in extraWidgets, for compatibility
me._skipWarn=true;me._thisIsAUsedExpression(me.extraWidgets);me._skipWarn=false;return me._extraItems;},set:function set(items){this._extraItems=items;}},{key:"isValid",get:function get(){var me=this;return Object.values(me.editor.widgetMap).every(function(field){if(!field.name||field.hidden){return true;}return field.isValid!==false;});}},{key:"values",get:function get(){var me=this,startFields=[],endFields=[],values={};me.editor.eachWidget(function(widget){var name=widget.name;if(!name||widget.hidden)return;if(name==='startDate'){startFields.push(widget);}else if(name==='endDate'){endFields.push(widget);}else{values[name]=widget.value;}},true);values.startDate=makeDate(startFields);values.endDate=makeDate(endFields);// Since there is no duration field in the editor,
// we don't need to recalc duration value on each date change.
// It's enough to return correct duration value in `values`,
// so the record will get updated with the correct data.
values.duration=DH.diff(values.startDate,values.endDate,me.editor.record.durationUnit,true);return values;}}],[{key:"defaultConfig",//region Config
// TODO: check which configs are actually used
get:function get(){return{/**
             * True to hide this editor if a click is detected outside it (defaults to true)
             * @config {Boolean}
             * @default
             * @category Editor
             */autoClose:true,/**
             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
             * @config {Boolean}
             * @default
             * @category Editor
             */saveAndCloseOnEnter:true,triggerEvent:null,/**
             * True to show a delete button in the form.
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showDeleteButton:true,/**
             * True to show a text field for entering event name
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showNameField:true,/**
             * Config for the `startTimeField` constructor.
             * @config {Object}
             * @category Editor widgets
             */startTimeConfig:null,/**
             * Config for the `startDateField` constructor.
             * @config {Object}
             * @category Editor widgets
             */startDateConfig:null,/**
             * Config for the `endTimeField` constructor.
             * @config {Object}
             * @category Editor widgets
             */endTimeConfig:null,/**
             * Config for the `endDateField` constructor.
             * @config {Object}
             * @category Editor widgets
             */endDateConfig:null,/**
             * This config parameter is passed to the `startDateField` and `endDateField` constructor.
             * @config {String}
             * @default
             * @category Editor widgets
             */dateFormat:'L',// date format that uses browser locale
/**
             * This config parameter is passed to the `startTimeField` and `endTimeField` constructor.
             * @config {String}
             * @default
             * @category Editor widgets
             */timeFormat:'LT',// date format that uses browser locale
/**
             * Default editor configuration, which widgets it shows etc.
             * @config {Object}
             * @category Editor
             */editorConfig:null,/**
             * Array of widgets. Will be inserted above buttons unless an index is
             * specified for the widget:
             * ```
             * new Grid({
             *   features : {
             *     eventEdit : {
             *       extraItems : [
             *         { type : 'text', index : 1 },
             *         ...
             *       ]
             *     }
             *   }
             * });
             * ```
             * @config {String|Object[]}
             * @category Editor widgets
             */extraItems:null,/**
             * This config has been deprecated in favour of {@link #config-extraItems}.
             * @deprecated 2.1
             * @config {String|Object[]}
             * @category Editor widgets
             */extraWidgets:null};}}]);return EditBase;}(InstancePlugin);EditBase._$name='EditBase';/**
 * @module Scheduler/view/EventEditor
 */ /**
 * Provided event editor dialog.
 *
 * @extends Common/widget/Popup
 * @private
 */var EventEditor=/*#__PURE__*/function(_Popup4){_inherits2(EventEditor,_Popup4);function EventEditor(){_classCallCheck2(this,EventEditor);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventEditor).apply(this,arguments));}_createClass2(EventEditor,[{key:"processWidgetConfig",value:function processWidgetConfig(widget){var me=this,eventEditFeature=me.eventEditFeature;if(widget.type==='extraItems'){return false;}var fieldConfig={};if(widget.ref==='resourceField'){if(!eventEditFeature.showResourceField)return false;// Can't use store directly since it may be grouped and then contains irrelevant group records
me.resourceStore=widget.store=new eventEditFeature.resourceStore.constructor({chained:true,chainAllRecords:true,// By default it chains processedRecords, leading to only "expanded" resources showing up in editor
masterStore:eventEditFeature.resourceStore,chainedFilterFn:function chainedFilterFn(record){return!record.meta.specialRow;}});widget.multiSelect=Boolean(eventEditFeature.scheduler.assignmentStore);if(eventEditFeature.resourceFieldConfig)fieldConfig=eventEditFeature.resourceFieldConfig;}if(widget.ref==='nameField'&&!eventEditFeature.showNameField)return false;if(widget.ref==='deleteButton'&&!eventEditFeature.showDeleteButton)return false;if((widget.name==='startDate'||widget.name==='endDate')&&widget.type==='date'){fieldConfig.format=eventEditFeature.dateFormat;}if((widget.name==='startDate'||widget.name==='endDate')&&widget.type==='time'){fieldConfig.format=eventEditFeature.timeFormat;}if(eventEditFeature.startDateConfig&&widget.name==='startDate'&&widget.type==='date'){fieldConfig=eventEditFeature.startDateConfig;}if(eventEditFeature.startTimeConfig&&widget.name==='startDate'&&widget.type==='time'){fieldConfig=eventEditFeature.startTimeConfig;}if(eventEditFeature.endDateConfig&&widget.name==='endDate'&&widget.type==='date'){fieldConfig=eventEditFeature.endDateConfig;}if(eventEditFeature.endTimeConfig&&widget.name==='endDate'&&widget.type==='time'){fieldConfig=eventEditFeature.endTimeConfig;}Object.assign(widget,fieldConfig);return _get2(_getPrototypeOf2(EventEditor.prototype),"processWidgetConfig",this).call(this,widget);}},{key:"show",value:function show(){var _get20;// Updated chained store. It is not done automatically for grouping/trees.
if(this.resourceStore){this.resourceStore.fillFromMaster();}for(var _len61=arguments.length,args=new Array(_len61),_key60=0;_key60<_len61;_key60++){args[_key60]=arguments[_key60];}(_get20=_get2(_getPrototypeOf2(EventEditor.prototype),"show",this)).call.apply(_get20,[this].concat(args));}},{key:"afterShow",value:function afterShow(){var _get21;var deleteButton=this.widgetMap.deleteButton;// Only show delete button if the event belongs to a store
if(deleteButton){deleteButton.hidden=this.readOnly||!this.record.stores.length;}for(var _len62=arguments.length,args=new Array(_len62),_key61=0;_key61<_len62;_key61++){args[_key61]=arguments[_key61];}(_get21=_get2(_getPrototypeOf2(EventEditor.prototype),"afterShow",this)).call.apply(_get21,[this].concat(args));}},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){this.trigger('keyDown',{event:event});_get2(_getPrototypeOf2(EventEditor.prototype),"onInternalKeyDown",this).call(this,event);}},{key:"readOnly",set:function set(readOnly){var _this$widgetMap=this.widgetMap,deleteButton=_this$widgetMap.deleteButton,saveButton=_this$widgetMap.saveButton,cancelButton=_this$widgetMap.cancelButton;this._readOnly=readOnly;this.element.classList[readOnly?'add':'remove']('b-readonly');this.eachWidget(function(widget){widget.readOnly=readOnly;});if(deleteButton){deleteButton.hidden=readOnly;}if(saveButton){saveButton.hidden=readOnly;}if(cancelButton){cancelButton.hidden=readOnly;}},get:function get(){return this._readOnly;}}],[{key:"defaultConfig",get:function get(){return{items:[],draggable:{handleSelector:':not(button,.b-field-inner)'// blacklist buttons and field inners
},axisLock:'flexible'};}}]);return EventEditor;}(Popup);EventEditor._$name='EventEditor';/**
 * @module Scheduler/feature/EventEdit
 */ /**
 * Feature that displays a popup containing fields for editing event data.
 *
 * To customize its contents you can:
 *
 * * Toggle visibility of some built in widgets: `showResourceField`, `showNameField` and `showDeleteButton`
 * * Change the date format of the date & time fields: `dateFormat` and `timeFormat`
 * * Configure date & time fields: `startDateConfig`, `startTimeConfig`, `endDateConfig` and `endTimeConfig`
 * * Configure the resource field: `resourceFieldConfig`
 * * Append additional fields: `extraItems`
 * * Advanced: Replace entire contents using `editorConfig`
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/EditBase
 * @demo eventeditor
 * @externalexample scheduler/EventEdit.js
 */var EventEdit=/*#__PURE__*/function(_EditBase){_inherits2(EventEdit,_EditBase);function EventEdit(){_classCallCheck2(this,EventEdit);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventEdit).apply(this,arguments));}_createClass2(EventEdit,[{key:"construct",//endregion
//region Init & destroy
value:function construct(scheduler,config){var me=this;me.scheduler=scheduler;me.eventStore=scheduler.eventStore;me.resourceStore=scheduler.resourceStore;_get2(_getPrototypeOf2(EventEdit.prototype),"construct",this).call(this,scheduler,config);}//endregion
//region Editing
/**
     * Get/set readonly state
     * @property {Boolean}
     */},{key:"getEditor",/**
     * Gets an editor instance. Creates on first call, reuses on consecutive
     * @internal
     * @returns {Common.widget.Popup} Editor popup
     */value:function getEditor(){var me=this;var editor=me.editor;if(editor){return editor;}editor=me.editor=new EventEditor(ObjectHelper.assign({eventEditFeature:me,align:'b-t',id:"".concat(me.scheduler.id,"-event-editor"),autoShow:false,anchor:true,scrollAction:'realign',clippedBy:[me.scheduler.timeAxisSubGridElement,me.scheduler.bodyContainer],constrainTo:window,autoClose:me.autoClose,cls:me.cls,readOnly:me.readOnly},me.editorConfig));if(editor.items.length===0){console.warn('Event Editor configured without any `items`');}// add listeners programmatically so users cannot override them accidentally
editor.on({beforehide:me.onPopupBeforeHide,keydown:me.onPopupKeyDown,thisObj:me});// assign widget variables, using widget name: startDate -> me.startDateField
// widgets with id set use that instead, id -> me.idField
Object.values(editor.widgetMap).forEach(function(widget){var ref=widget.ref||widget.id;// don't overwrite if already defined
if(ref&&!me[ref]){me[ref]=widget;switch(widget.name){case'startDate':case'endDate':widget.on('change',me.onDatesChange,me);break;}}});me.eventTypeField&&me.eventTypeField.on('change',me.onEventTypeChange,me);me.saveButton&&me.saveButton.on('click',me.onSaveClick,me);me.deleteButton&&me.deleteButton.on('click',me.onDeleteClick,me);me.cancelButton&&me.cancelButton.on('click',me.onCancelClick,me);return me.editor;}// Called from editEvent() to actually show the editor
},{key:"internalShowEditor",value:function internalShowEditor(eventRecord,resourceRecord){var element=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this,scheduler=me.scheduler,// Align to the element (b-sch-event) and not the wrapper
eventElement=element||DomHelper.down(scheduler.getElementFromEventRecord(eventRecord,resourceRecord),scheduler.eventInnerSelector);// Event not in current TimeAxis - cannot be edited without extending the TimeAxis.
// If there's no event element and the eventRecord is not in the store, we still
// edit centered on the Scheduler - we're adding a new event
if(eventElement||!eventRecord.isPartOfStore(scheduler.eventStore)){/**
             * Fires on the owning Scheduler before an event is displayed in an editor.
             * This may be listened for to allow an application to take over event editing duties. Returning `false`
             * stops the default editing UI from being shown.
             * @event beforeEventEdit
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature
             * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.
             * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event
             * is being created, it will not contain a resource, so this parameter specifies the resource the
             * event is being created for.
             * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.
             * @preventable
             */if(scheduler.trigger('beforeEventEdit',{eventEdit:me,eventRecord:eventRecord,resourceRecord:resourceRecord,eventElement:eventElement})===false){scheduler.element.classList.remove('b-eventeditor-editing');me.dragProxyElement&&me.dragProxyElement.remove();me.dragProxyElement=null;return;}me.resourceRecord=resourceRecord;var editor=me.getEditor(eventRecord);if(me.typeField){me.toggleEventType(eventRecord.get(me.typeField));}/**
             * Fires on the owning Scheduler when the editor for an event is available but before it is populated with
             * data and shown. Allows manipulating fields etc.
             * @event beforeEventEditShow
             * @param {Scheduler.view.Scheduler} source The scheduler
             * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature
             * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.
             * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event
             * is being created, it will not contain a resource, so this parameter specifies the resource the
             * event is being created for.
             * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.
             * @param {Common.widget.Popup} editor The editor
             */scheduler.trigger('beforeEventEditShow',{eventEdit:me,eventRecord:eventRecord,resourceRecord:resourceRecord,eventElement:eventElement,editor:editor});me.loadRecord(eventRecord,resourceRecord);if(eventElement){eventElement.classList.add('b-editing');editor.anchor=true;editor.showBy(eventElement);}// We are adding a new event. Display the editor centered in the Scheduler
else{editor.anchor=false;editor.showBy({target:scheduler.element,align:'c-c'});}// Adjust time field step increment based on timeAxis resolution
var timeResolution=scheduler.timeAxisViewModel.timeResolution;if(timeResolution.unit==='hour'||timeResolution.unit==='minute'){me.startTimeField.step=me.endTimeField.step="".concat(timeResolution.increment).concat(timeResolution.unit);}}}/**
     * Opens an editor for the passed event. This function is exposed on Scheduler and can be called as
     * `scheduler.editEvent()`.
     * @param {Scheduler.model.EventModel} eventRecord Event to edit
     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.
     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using
     * multi assignment.
     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)
     */},{key:"editEvent",value:function editEvent(eventRecord,resourceRecord){var element=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this,scheduler=me.scheduler;if(scheduler.readOnly)return;// The Promise being async allows a mouseover to trigger the event tip
// unless we add the editing class immediately.
scheduler.element.classList.add('b-eventeditor-editing');if(!resourceRecord){if(eventRecord.resource){resourceRecord=eventRecord.resource;}// New event not yet in store has not got the relation set up, use id if available
else if(eventRecord.resourceId){resourceRecord=scheduler.resourceStore.getById(eventRecord.resourceId);}}// If element is specified (call triggered by EventDragCreate)
// Then we can align to that, and no scrolling is necessary.
// If we are simply being asked to edit a new event which is not
// yet added, the editor is centered, and no scroll is necessary
if(element||scheduler.eventStore.indexOf(eventRecord)<0){me.internalShowEditor(eventRecord,resourceRecord,element);}else{// Ensure event is in view before showing the editor.
// Note that we first need to extend the time axis to include
// currently out of range events.
scheduler.scrollResourceEventIntoView(resourceRecord,eventRecord,null,{animate:true,edgeOffset:0,extendTimeAxis:false}).then(function(){return me.internalShowEditor(eventRecord,resourceRecord);},function(){return scheduler.element.classList.remove('b-eventeditor-editing');});}}/**
     * Sets fields values from record being edited
     * @private
     */},{key:"loadRecord",value:function loadRecord(eventRecord,resourceRecord){var me=this,eventStore=me.client.eventStore;me.eventRecord=eventRecord;me.resourceRecord=resourceRecord;me.editor.record=eventRecord;if(me.resourceField){var resources=eventStore.getResourcesForEvent(eventRecord);// If this is an unassigned event, select the resource we've been provided
if(!eventStore.storage.includes(eventRecord,true)&&me.resourceRecord){me.resourceField.value=me.resourceRecord[me.resourceField.valueField];}else if(me.scheduler.assignmentStore){me.resourceField.value=resources.map(function(resource){return resource[me.resourceField.valueField];});}}}},{key:"toggleEventType",value:function toggleEventType(eventType){// expose eventType in dataset, for querying and styling
this.editor.element.dataset.eventType=eventType||'';// toggle visibility of widgets belonging to eventTypes
this.editor.eachWidget(function(widget){return widget.dataset&&widget.dataset.eventType&&(widget.hidden=widget.dataset.eventType!==eventType);});}//endregion
//region Save
// Override of EditBase get values, to exclude resourceId when using an AssignmentStore. Without this
// event.resourceId would end up as [r1, r2] etc. Which in turn breaks the event -> resource relation
},{key:"save",/**
     * Saves the changes (applies them to record if valid, if invalid editor stays open)
     * @private
     * @fires beforeeventsave
     * @fires beforeeventadd
     * @fires aftereventsave
     * @returns {*}
     */value:function save(){var me=this,scheduler=me.scheduler,eventRecord=me.eventRecord;if(!eventRecord||!me.isValid){return;}var eventStore=me.eventStore,values=me.values,resourceRecords=me.resourceField&&me.resourceField.records||[me.resourceRecord];// Check for potential overlap scenarios before saving. TODO needs to be indicated in the UI
if(!me.scheduler.allowOverlap&&eventStore){var abort=resourceRecords.some(function(resource){return!eventStore.isDateRangeAvailable(values.startDate,values.endDate,eventRecord,resource);});if(abort){return;}}/**
         * Fires on the owning Scheduler before an event is saved
         * @event beforeeventsave
         * @param {Scheduler.view.Scheduler} source The scheduler instance
         * @param {Scheduler.model.EventModel} eventRecord The record about to be saved
         * @param {Scheduler.model.ResourceModel} resourceRecord [DEPRECATED IN FAVOR OF `resourceRecords`] The resource to which the event is assigned
         * @param {Scheduler.model.ResourceModel[]} resourceRecords The resources to which the event is assigned
         * @param {Object} values The new values
         * @preventable
         */if(scheduler.trigger('beforeEventSave',{eventRecord:eventRecord,resourceRecords:resourceRecords,resourceRecord:resourceRecords[0],values:values})!==false){me.onBeforeSave(eventRecord);eventRecord.beginBatch();me.updateRecord(eventRecord);eventRecord.endBatch();// Check if this is a new record
if(eventStore&&!eventRecord.stores.length){/**
                 * Fires on the owning Scheduler before an event is added
                 * @event beforeEventAdd
                 * @param {Scheduler.view.Scheduler} source The Scheduler instance.
                 * @param {Scheduler.model.EventModel} eventRecord The record about to be added
                 * @param {Scheduler.model.ResourceModel[]} resources **Deprecated** Use `resourceRecords` instead
                 * @param {Scheduler.model.ResourceModel[]} resourceRecords Resources that the record is assigned to
                 * @preventable
                 */if(scheduler.trigger('beforeEventAdd',{eventRecord:eventRecord,resourceRecords:resourceRecords,resources:resourceRecords})!==false){// Hand over the proxy element to be used by the new event
if(me.dragProxyElement){var eventTpl=scheduler.generateTplData(eventRecord,resourceRecords[0]);// Adopt the proxy as an event element.
if(eventTpl){DomHelper.syncClassList(me.dragProxyElement,eventTpl.wrapperCls);DomHelper.createElement({tag:'div',parent:me.dragProxyElement,className:eventTpl.cls.toString()});// This is a signal that it's from a drag-create, so needs to stay
me.dragProxyElement.classList.add('b-sch-dragcreator-proxy');me.dragProxyElement.id=eventTpl.id;scheduler.isHorizontal&&scheduler.currentOrientation.releaseTimeSpanDiv(me.dragProxyElement,true);me.dragProxyElement=null;// Flag to let HorizontalEventMapper know that it should reuse the element even though the
// event is new
eventRecord.instanceMeta(scheduler).fromDragProxy=true;}}// Add to eventStore first, then assign the resource. Order is necessary since assigning might
// involve an AssignmentStore
me.eventStore.add(eventRecord);me.eventStore.assignEventToResource(eventRecord,resourceRecords);// If a filter was reapplied and filtered out the newly added event we need to clean up the drag proxy...
if(!me.eventStore.includes(eventRecord)){// Feels a bit strange having that responsibility here, but since it is already handled
var proxyElement=scheduler.element.querySelector('.b-sch-dragcreator-proxy');if(proxyElement){scheduler.currentOrientation.availableDivs.remove(proxyElement);proxyElement.remove();}}}else{return;}}else if(scheduler.assignmentStore){me.eventStore.assignEventToResource(eventRecord,resourceRecords,true);}/**
             * Fires on the owning Scheduler after an event is successfully saved
             * @event afterEventSave
             * @param {Scheduler.view.Scheduler} source The scheduler instance
             * @param {Scheduler.model.EventModel} eventRecord The record about to be saved
             */scheduler.trigger('afterEventSave',{eventRecord:eventRecord});me.onAfterSave(eventRecord);}return eventRecord;}//endregion
//region Delete
/**
     * Delete event being edited
     * @private
     * @fires beforeeventdelete
     */},{key:"deleteEvent",value:function deleteEvent(){var me=this,eventRecord=me.eventRecord;/**
         * Fires on the owning Scheduler before an event is deleted
         * @event beforeeventdelete
         * @param {Scheduler.view.Scheduler} source The Scheduler instance.
         * @param {Scheduler.model.EventModel} eventRecord The record about to be deleted
         * @preventable
         */if(me.scheduler.trigger('beforeEventDelete',{eventRecord:eventRecord})!==false){// The reason it does it here is to move focus *before* it gets deleted,
// and then there's code in the delete to see that it's deleting the focused one,
// and jump forwards or backwards to move to the next or previous event
// See 'Should allow key activation' test in tests/view/mixins/EventNavigation.t.js
if(me.editor.containsFocus){me.editor.revertFocus();}me.scheduler.removeRecords([eventRecord]);return true;}return false;}//endregion
//region Stores
},{key:"onActivateEditor",//endregion
//region Events
value:function onActivateEditor(_ref242){var eventRecord=_ref242.eventRecord,resourceRecord=_ref242.resourceRecord;this.editEvent(eventRecord,resourceRecord);}},{key:"onDragCreateEnd",value:function onDragCreateEnd(_ref243){var newEventRecord=_ref243.newEventRecord,resourceRecord=_ref243.resourceRecord,proxyElement=_ref243.proxyElement;var me=this;// Call scheduler template method
me.scheduler.onEventCreated(newEventRecord);// Clone proxy after showing editor so it's not deleted
var dragProxyElement=proxyElement.cloneNode(true);dragProxyElement.removeAttribute('id');proxyElement.parentElement.appendChild(dragProxyElement);me.dragProxyElement=dragProxyElement;me.editEvent(newEventRecord,resourceRecord,dragProxyElement);}// chained from EventNavigation
},{key:"onEventEnterKey",value:function onEventEnterKey(_ref244){var assignmentRecord=_ref244.assignmentRecord,eventRecord=_ref244.eventRecord;if(assignmentRecord){this.editEvent(eventRecord,assignmentRecord.resource);}else if(eventRecord){this.editEvent(eventRecord,eventRecord.resource);}}// Toggle fields visibility when changing eventType
},{key:"onEventTypeChange",value:function onEventTypeChange(_ref245){var value=_ref245.value;this.toggleEventType(value);}//endregion
//region Context menu
},{key:"getEventMenuItems",value:function getEventMenuItems(_ref246){var _this70=this;var eventRecord=_ref246.eventRecord,resourceRecord=_ref246.resourceRecord,items=_ref246.items;if(!this.scheduler.readOnly){items.editEvent={text:this.L('Edit Event'),icon:'b-icon b-icon-edit',weight:-200,onItem:function onItem(){_this70.editEvent(eventRecord,resourceRecord);}};}}//endregion
},{key:"readOnly",get:function get(){return this.editor?this.editor.readOnly:this._readOnly;},set:function set(readOnly){this._readOnly=readOnly;if(this.editor){this.editor.readOnly=readOnly;}}},{key:"values",get:function get(){var values=_get2(_getPrototypeOf2(EventEdit.prototype),"values",this);if(this.scheduler.assignmentStore){// Not used with AssignmentStore
delete values.resourceId;}return values;}},{key:"resourceStore",get:function get(){return this._resourceStore;},set:function set(store){this._resourceStore=store;if(this.resourceField){this.resourceField.store=store;}}}],[{key:"defaultConfig",//region Config
// TODO: check which configs are actually used
get:function get(){return{/**
             * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `` or null to disable editing of existing events.
             * @config {String}
             * @default
             * @category Editor
             */triggerEvent:'eventdblclick',/**
             * True to show a combo for picking resource
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showResourceField:true,// TODO remove this config?
/**
             * Config for the resourceField constructor.
             * @config {Object}
             * @category Editor widgets
             */resourceFieldConfig:null,/**
             * The data field in the model that defines the eventType.
             * Applied as class (b-eventtype-xx) to the editors element, to allow showing/hiding fields depending on
             * eventType. Dynamic toggling of fields in the editor is activated by using `ref: 'eventTypeField'` on
             * your widget:
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *    features : {
             *       eventEdit  : {
             *           extraItems : [
             *               {
             *                   type  : 'combo',
             *                   name  : 'eventType',
             *                   ref   : 'eventTypeField',
             *                   label : 'Type',
             *                   items : ['Appointment', 'Internal', 'Meeting']
             *               }
             *           ]
             *        }
             *     }
             * });
             * ```
             *
             * @config {String}
             * @default
             * @category Editor
             */typeField:'eventType',/**
             * The current {@link Scheduler.model.EventModel} record, which is being edited by the event editor.
             * @property {Scheduler.model.EventModel}
             * @readonly
             */eventRecord:null,/**
             * Specify `true` to put the editor in read only mode.
             * @config {Boolean}
             * @default false
             */readOnly:null,/**
             * Default editor configuration, which widgets it shows etc.
             * @config {Object}
             * @category Editor
             */editorConfig:{title:'L{Edit Event}',localeClass:this,closable:true,items:[/**
                     * Reference to the name field, if used
                     * @member {Common.widget.TextField} nameField
                     * @readonly
                     */{type:'text',localeClass:this,label:'L{Name}',clearable:true,name:'name',ref:'nameField'},/**
                     * Reference to the resource field, if used
                     * @member {Common.widget.Combo} resourceField
                     * @readonly
                     */{type:'combo',localeClass:this,label:'L{Resource}',name:'resource',ref:'resourceField',editable:false,valueField:'id',displayField:'name'},/**
                     * Reference to the start date field, if used
                     * @member {Common.widget.DateField} startDateField
                     * @readonly
                     */{type:'date',cls:'b-inline',clearable:false,required:true,localeClass:this,label:'L{Start}',name:'startDate',ref:'startDateField',flex:'1 0 60%'},/**
                     * Reference to the start time field, if used
                     * @member {Common.widget.TimeField} startTimeField
                     * @readonly
                     */{type:'time',clearable:false,required:true,name:'startDate',ref:'startTimeField',cls:'b-match-label',flex:'1 0 40%'},/**
                     * Reference to the end date field, if used
                     * @member {Common.widget.DateField} endDateField
                     * @readonly
                     */{type:'date',cls:'b-inline',clearable:false,required:true,localeClass:this,label:'L{End}',name:'endDate',ref:'endDateField',flex:'1 0 60%'},/**
                     * Reference to the end time field, if used
                     * @member {Common.widget.TimeField} endTimeField
                     * @readonly
                     */{type:'time',clearable:false,required:true,name:'endDate',ref:'endTimeField',cls:'b-match-label',flex:'1 0 40%'},{// widgets specified in extraItems will be inserted here
type:'extraItems'}],bbar:[{type:'widget',cls:'b-label-filler'},/**
                     * Reference to the save button, if used
                     * @member {Common.widget.Button} saveButton
                     * @readonly
                     */{color:'b-green',localeClass:this,text:'L{Save}',ref:'saveButton'},/**
                     * Reference to the delete button, if used
                     * @member {Common.widget.Button} deleteButton
                     * @readonly
                     */{color:'b-gray',localeClass:this,text:'L{Delete}',ref:'deleteButton'},/**
                     * Reference to the cancel button, if used
                     * @member {Common.widget.Button} cancelButton
                     * @readonly
                     */{color:'b-gray',localeClass:this,text:'L{Cancel}',ref:'cancelButton'}]}};}},{key:"pluginConfig",get:function get(){return{chain:['getEventMenuItems','onEventEnterKey'],assign:['editEvent']};}}]);return EventEdit;}(EditBase);exports.EventEdit=EventEdit;EventEdit._$name='EventEdit';GridFeatureManager.registerFeature(EventEdit,true,'Scheduler');/**
 * @module Scheduler/feature/EventFilter
 */ /**
 * Adds event filter menu items to the timeline header context menu.
 *
 * This feature is **enabled** by default
 *
 * @extends Common/mixin/InstancePlugin
 */var EventFilter=/*#__PURE__*/function(_InstancePlugin19){_inherits2(EventFilter,_InstancePlugin19);function EventFilter(){_classCallCheck2(this,EventFilter);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventFilter).apply(this,arguments));}_createClass2(EventFilter,[{key:"construct",value:function construct(scheduler,config){_get2(_getPrototypeOf2(EventFilter.prototype),"construct",this).call(this,scheduler,config);this.scheduler=scheduler;}/**
     * Populates the header context menu items.
     * @param {Grid.column.Column} column Column for which the menu will be shown
     * @param {Object[]} items Array of menu items
     * @internal
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this;if(column.type!=='timeAxis')return;items.push({text:me.L('filterEvents'),icon:'b-fw-icon b-icon-filter',menu:{type:'popup',items:[{type:'textfield',cls:'b-eventfilter b-last-row',clearable:true,keyStrokeChangeDelay:300,label:me.L('byName'),width:200,listeners:{change:me.onEventFilterChange,thisObj:me}}],onBeforeShow:function onBeforeShow(_ref247){var menu=_ref247.source;var _menu$items=_slicedToArray(menu.items,1),filterByName=_menu$items[0],filter=me.scheduler.eventStore.filters.getBy('property','name');filterByName.value=filter&&filter.value;}}});}},{key:"onEventFilterChange",value:function onEventFilterChange(_ref248){var value=_ref248.value;var me=this;if(value!==''){me.scheduler.eventStore.filter('name',value);}else{me.scheduler.eventStore.removeFieldFilter('name');}}}],[{key:"pluginConfig",// Plugin configuration. This plugin chains some of the functions in Grid.
get:function get(){return{chain:['getHeaderMenuItems']};}}]);return EventFilter;}(InstancePlugin);exports.EventFilter=EventFilter;EventFilter.featureClass='b-event-filter';EventFilter._$name='EventFilter';GridFeatureManager.registerFeature(EventFilter,true,['Scheduler','Gantt']);//TODO: Prevent right click while resizing (do it in ResizeHelper?)
/**
 * @module Scheduler/feature/base/ResizeBase
 */var tipAlign={'top':'b-t','right':'b100-t100','bottom':'t-b','left':'b0-t0'};/**
 * Base class for EventResize (Scheduler) and TaskResize (Gantt) features. Contains shared code. Not to be used directly.
 *
 * @extends Common/mixin/InstancePlugin
 * @abstract
 */var ResizeBase=/*#__PURE__*/function(_InstancePlugin20){_inherits2(ResizeBase,_InstancePlugin20);function ResizeBase(){_classCallCheck2(this,ResizeBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResizeBase).apply(this,arguments));}_createClass2(ResizeBase,[{key:"render",//endregion
//region Init & destroy
value:function render(){var me=this,client=me.client;me.resize&&me.resize.destroy();me.resize=me.createResizeHelper();if(me.showTooltip){me.clockTemplate=new ClockTemplate({timeAxisViewModel:client.timeAxisViewModel});}}},{key:"doDestroy",value:function doDestroy(){var me=this;me.tip&&me.tip.destroy();me.clockTemplate&&me.clockTemplate.destroy();me.resize&&me.resize.destroy();_get2(_getPrototypeOf2(ResizeBase.prototype),"doDestroy",this).call(this);}//endregion
//region Events
},{key:"isElementResizable",value:function isElementResizable(element,event){var client=this.client,resize=this.resize,timespanRecord=client.resolveTimeSpanRecord(element);if(client.readOnly){return false;}var resizable=timespanRecord&&timespanRecord.isResizable;// go up from "handle" to resizable element
element=DomHelper.up(event.target,client.eventSelector);// Not resizable if the mousedown is on a resizing handle of
// a percent bar.
var handleHoldingElement=element?element.firstElementChild:element,handleEl=event.target.closest('[class$="-handle"]');if(!resizable||handleEl&&handleEl!==handleHoldingElement){return false;}var startsOutside=element.classList.contains('b-sch-event-startsoutside'),endsOutside=element.classList.contains('b-sch-event-endsoutside');if(resizable===true){if(startsOutside&&endsOutside){return false;}else if(startsOutside){resizable='end';}else if(endsOutside){resizable='start';}else{return resize.overStartHandle(event,element)||resize.overEndHandle(event,element);}}if(startsOutside&&resizable==='start'||endsOutside&&resizable==='end'){return false;}if(resize.overStartHandle(event,element)&&resizable==='start'||resize.overEndHandle(event,element)&&resizable==='end'){return true;}return false;}},{key:"onBeforeResizeStart",value:function onBeforeResizeStart(_ref249){var _client$trigger3;var element=_ref249.element,event=_ref249.event;var client=this.client,name=client.scheduledEventName,timespanRecord=client.resolveTimeSpanRecord(element);// trigger beforeEventResize or beforeTaskResize depending on product
return client.trigger("before".concat(client.capitalizedEventName,"Resize"),(_client$trigger3={},_defineProperty(_client$trigger3,name+'Record',timespanRecord),_defineProperty(_client$trigger3,"event",event),_client$trigger3))!==false;}},{key:"onResizeStart",value:function onResizeStart(_ref250){var _client$trigger4;var context=_ref250.context,event=_ref250.event;var me=this,client=me.client,timespanRecord=client.resolveTimeSpanRecord(context.element),name=client.scheduledEventName;client.element.classList.add('b-resizing-event');// Let products to their specific stuff
me.setupProductResizeContext(context,event);if(me.showTooltip){if(me.tip){me.tip.align=tipAlign[context.edge];me.tip.showBy(me.getTooltipTarget());}else{me.tip=new Tooltip({id:"".concat(client.id,"-event-resize-tip"),autoShow:true,axisLock:true,trackMouse:false,getHtml:me.getTipHtml.bind(me),align:tipAlign[context.edge],hideDelay:0});me.tip.on('innerhtmlupdate',me.updateDateIndicator,me);}}// flag to not allow release of element when scrolling
timespanRecord.instanceMeta(client).retainElement=true;// Trigger eventResizeStart or taskResizeStart depending on product
client.trigger("".concat(name,"ResizeStart"),(_client$trigger4={},_defineProperty(_client$trigger4,"".concat(name,"Record"),timespanRecord),_defineProperty(_client$trigger4,"event",event),_client$trigger4));}},{key:"updateDateIndicator",value:function updateDateIndicator(){var _this$resize$context=this.resize.context,edge=_this$resize$context.edge,startDate=_this$resize$context.startDate,endDate=_this$resize$context.endDate,element=this.tip.element;if(startDate||endDate){if(edge==='right'||edge==='bottom'){this.clockTemplate.updateDateIndicator(element.querySelector('.b-sch-tooltip-enddate'),endDate);}else{this.clockTemplate.updateDateIndicator(element,startDate);}}}},{key:"getTooltipTarget",value:function getTooltipTarget(){var me=this,target=Rectangle.from(me.resize.context.element,null,true);if(me.resize.direction==='horizontal'){// Align to the dragged edge of the proxy, and then bump right so that the anchor aligns perfectly.
if(me.resize.context.edge==='right'){target.x=target.right-1;}target.width=me.tip.anchorSize[0]/2;}else{// Align to the dragged edge of the proxy, and then bump bottom so that the anchor aligns perfectly.
if(me.resize.context.edge==='bottom'){target.y=target.bottom-1;}target.height=me.tip.anchorSize[1]/2;}return{target:target};}},{key:"onResizing",value:function onResizing(_ref251){var _client$trigger5;var context=_ref251.context,event=_ref251.event;var me=this,client=me.client,depFeature=client.features.dependencies,timespanRecord=me.getTimespanRecord(context),name=client.scheduledEventName,element=context.element,edge=context.edge,xy=DomHelper.getTranslateXY(element);var start,end;if(edge==='top'||edge==='left'){end=timespanRecord.endDate;if(client.snapRelativeToEventStartDate){start=client.getDateFromXY(xy,null,true);start=client.timeAxis.roundDate(start,timespanRecord.startDate);}else{start=client.getDateFromXY(xy,'round',true);}}// bottom || right
else{xy[0]+=element.offsetWidth;xy[1]+=element.offsetHeight;start=timespanRecord&&timespanRecord.startDate;if(client.snapRelativeToEventStartDate){end=client.getDateFromXY(xy,null,true);end=client.timeAxis.roundDate(end,timespanRecord.endDate);}else{end=client.getDateFromXY(xy,'round',true);}}start=start||context.startDate;end=end||context.endDate;if(context.dateConstraints){start=DateHelper.constrain(start,context.dateConstraints.start,context.dateConstraints.end);end=DateHelper.constrain(end,context.dateConstraints.start,context.dateConstraints.end);}if(me.showExactResizePosition||client.timeAxisViewModel.snap){var exactSize=edge==='top'||edge==='left'?client.timeAxisViewModel.getDistanceBetweenDates(start,timespanRecord.endDate):client.timeAxisViewModel.getDistanceBetweenDates(timespanRecord.startDate,end);switch(edge){case'top':DomHelper.setTranslateY(element,context.elementStartY+context.elementWidth-exactSize);element.style.height=exactSize+'px';break;case'right':element.style.width=exactSize+'px';break;case'bottom':element.style.height=exactSize+'px';break;case'left':DomHelper.setTranslateX(element,context.elementStartX+context.elementWidth-exactSize);element.style.width=exactSize+'px';break;}}var dateChanged=context.endDate-end!==0||context.startDate-start!==0;context.endDate=end;context.startDate=start;// No need to query on every pixel of mouse move
if(dateChanged){context.valid=me.checkValidity(context,event);}// Trigger eventPartialResize or taskPartialResize depending on product
client.trigger("".concat(name,"PartialResize"),(_client$trigger5={},_defineProperty(_client$trigger5,"".concat(name,"Record"),timespanRecord),_defineProperty(_client$trigger5,"startDate",start),_defineProperty(_client$trigger5,"endDate",end),_defineProperty(_client$trigger5,"element",element),_defineProperty(_client$trigger5,"context",context),_client$trigger5));if(depFeature){depFeature.updateDependenciesForTimeSpan(timespanRecord,element);}if(me.showTooltip){me.tip.alignTo(me.getTooltipTarget());}}},{key:"checkValidity",value:function checkValidity(context,event){var valid=context.startDate&&context.endDate>context.startDate&&this.validatorFn.call(this.validatorFnThisObj||this,context,event);if(valid&&typeof valid!=='boolean'){context.message=valid.message||'';valid=valid.valid;}return valid!==false;}},{key:"onFinishResize",value:function onFinishResize(_ref252){var drag=_ref252.source,context=_ref252.context,event=_ref252.event;var me=this,timespanRecord=me.getTimespanRecord(context),oldStart=timespanRecord.startDate,oldEnd=timespanRecord.endDate,start=context.startDate||oldStart,end=context.endDate||oldEnd,client=me.client;var modified=false;// allow release of element again
timespanRecord.instanceMeta(client).retainElement=false;var old=context.finalize;context.finalize=function(){for(var _len63=arguments.length,params=new Array(_len63),_key62=0;_key62<_len63;_key62++){params[_key62]=arguments[_key62];}// We are overriding context of the resize helper. It is finalized automatically on sync resize. Which means,
// we should only call finalize if context is async.
context.async&&me.finalize.apply(me,params);old.call(context,params);};context.valid=start&&end&&end-start>0&&(// Input sanity check
start-oldStart!==0||end-oldEnd!==0)&&// Make sure start OR end changed
context.valid!==false;if(context.valid){// Seems to be a valid resize operation, ask outside world if anyone wants to take control over the finalizing,
// to show a confirm dialog prior to applying the new values. Triggers beforeEventResizeFinalize or
// beforeTaskResizeFinalize depending on product
client.trigger("before".concat(client.scheduledEventName,"ResizeFinalize"),{context:context,event:event});modified=true;}if(!context.async){me.finalize(modified);}}},{key:"onCancelResize",value:function onCancelResize(_ref253){var context=_ref253.context;var timespanRecord=this.getTimespanRecord(context);// resizing may not have started at all (just clicking a resize handle)
if(timespanRecord){timespanRecord.instanceMeta(this.client).retainElement=false;}this.finalize(false);}},{key:"finalize",value:function finalize(updateRecord){var me=this,client=me.client,context=me.resize.context,timespanRecord=me.getTimespanRecord(context),name=client.scheduledEventName;var wasChanged=false;if(me.tip){me.tip.hide();}if(context.started){if(updateRecord){// Scheduler and gantt updates the record differently
wasChanged=me.internalUpdateRecord(context,timespanRecord);}if(!updateRecord||!wasChanged){var dependencies=client.features.dependencies;// Dependencies are updated dynamically during resize, so ensure they are redrawn
// if the event snaps back with no change.
if(dependencies){dependencies.scheduleDraw(true);}client.repaintEventsForResource(me.getRowRecord(context));}}client.element.classList.remove('b-resizing-event');// Triggers eventResizeEnd or taskResizeEnd depending on product
client.trigger("".concat(name,"ResizeEnd"),_defineProperty({changed:wasChanged},"".concat(name,"Record"),timespanRecord||client.resolveEventRecord(context.element)));}//endregion
//region Tooltip
},{key:"getTipHtml",value:function getTipHtml(_ref254){var tip=_ref254.tip;var me=this;var _me$resize$context2=me.resize.context,startDate=_me$resize$context2.startDate,endDate=_me$resize$context2.endDate,valid=_me$resize$context2.valid,message=_me$resize$context2.message;// Empty string hides the tip - we get called before the Resizer, so first call will be empty
if(!startDate||!endDate){return tip.html;}if(message===undefined)message='';endDate=me.client.getDisplayEndDate(endDate,startDate);var startText=me.client.getFormattedDate(startDate),endText=me.client.getFormattedDate(endDate);return me.tipTemplate({valid:valid,startDate:startDate,endDate:endDate,startText:startText,endText:endText,message:message,startClockHtml:me.clockTemplate.template({date:startDate,text:startText,cls:'b-sch-tooltip-startdate'}),endClockHtml:me.clockTemplate.template({date:endDate,text:endText,cls:'b-sch-tooltip-enddate'})});}//endregion
//region Product specific, implemented in subclasses
},{key:"getRowRecord",value:function getRowRecord(context){throw new Error('Implement in subclass');}},{key:"getTimespanRecord",value:function getTimespanRecord(context){throw new Error('Implement in subclass');}},{key:"setupProductResizeContext",value:function setupProductResizeContext(context,event){throw new Error('Implement in subclass');}// Store containing the timespan record being resized
},{key:"store",get:function get(){throw new Error('Implement in subclass');}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * `false` to not show a tooltip while resizing
             * @config {Boolean}
             * @default
             */showTooltip:true,/**
             * true to see exact event length during resizing
             * @config {Boolean}
             * @default
             */showExactResizePosition:false,/**
             * An empty function by default, but provided so that you can perform custom validation on
             * the item being resized. Return true if the new duration is valid, false to signal that it is not.
             * @param {Object} context The resize context, contains the record & dates.
             * @param {Event} e The browser Event object
             * @return {Boolean}
             * @config {Function}
             */validatorFn:function validatorFn(){},/**
             * `this` reference for the validatorFn
             * @config {Object}
             */validatorFnThisObj:null,/**
             * The tooltip instance to show while resizing an event or a configuration object for the {@link Common.widget.Tooltip}.
             * @config {Common.widget.Tooltip}
             */tip:null,tipTemplate:function tipTemplate(data){return"\n                <div class=\"b-sch-tip-".concat(data.valid?'valid':'invalid',"\">\n                    ").concat(data.startClockHtml,"\n                    ").concat(data.endClockHtml,"\n                    <div class=\"b-sch-tip-message\">").concat(data.message,"</div>\n                </div>\n            ");}};}},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return ResizeBase;}(InstancePlugin);ResizeBase._$name='ResizeBase';//TODO: Prevent right click while resizing (do it in ResizeHelper?)
/**
 * @module Scheduler/feature/EventResize
 */ /**
 * Feature that allows resizing an event by dragging its end.
 *
 * By default it displays a tooltip with the new start and end dates, formatted using
 * {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat}.
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/ResizeBase
 * @demo basic
 * @externalexample scheduler/EventResize.js
 */var EventResize=/*#__PURE__*/function(_ResizeBase){_inherits2(EventResize,_ResizeBase);function EventResize(){_classCallCheck2(this,EventResize);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventResize).apply(this,arguments));}_createClass2(EventResize,[{key:"createResizeHelper",//region Events
/**
     * Fired on the owning Scheduler before resizing starts. Return false to prevent operation
     * @event beforeEventResize
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Event} event
     */ /**
     * Fires on the owning Scheduler when event resizing starts
     * @event eventResizeStart
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Event} event
     */ /**
     * Fires on the owning Scheduler on each resize move event
     * @event eventPartialResize
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Date} startDate
     * @param {Date} endDate
     * @param {HTMLElement} element
     */ /**
     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  scheduler.on('beforeeventresizefinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeEventResizeFinalize
     * @param {Object} data
     * @param {Scheduler.view.Scheduler} data.source Scheduler instance
     * @param {Object} data.context
     * @param {Boolean} data.context.async Set true to handle resize asynchronously (e.g. to wait for user
     * confirmation)
     * @param {Function} data.context.finalize Call this method to finalize resize. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fires on the owning Scheduler after the resizing gesture has finished.
     * @event eventResizeEnd
     * @param {Boolean} wasChanged
     * @param {Scheduler.model.EventModel} eventRecord
     */ //endregion
//region Scheduler specifics
value:function createResizeHelper(){var me=this,client=me.client;return new ResizeHelper({direction:client.isVertical?'vertical':'horizontal',name:me.constructor.$name,// for debugging
isElementResizable:function isElementResizable(el,event){return me.isElementResizable(el,event);},targetSelector:client.eventSelector,handleContainerSelector:client.eventInnerSelector,resizingCls:'b-sch-event-wrap-resizing',allowResize:me.isElementResizable.bind(me),outerElement:client.timeAxisSubGridElement,// constrain resize to view
scrollManager:client.scrollManager,dragThreshold:0,scroller:client.timeAxisSubGrid.scrollable,// allow reading correct x & y scroll
listeners:{beforeresizestart:me.onBeforeResizeStart,resizestart:me.onResizeStart,resizing:me.onResizing,resize:me.onFinishResize,cancel:me.onCancelResize,thisObj:me}});}// Store used by ResizeBase to detect updates on dropped record
},{key:"getTimespanRecord",// Used by ResizeBase to get an eventRecord from the drag context
value:function getTimespanRecord(context){return context.eventRecord;}},{key:"getRowRecord",value:function getRowRecord(context){return context.resourceRecord;}// Injects Scheduler specific data into the drag context
},{key:"setupProductResizeContext",value:function setupProductResizeContext(context,event){var scheduler=this.client,eventRecord=scheduler.resolveEventRecord(context.element),resourceRecord=scheduler.resolveResourceRecord(context.element);Object.assign(context,{eventRecord:eventRecord,resourceRecord:resourceRecord,dateConstraints:scheduler.getDateConstraints(resourceRecord,eventRecord)});}},{key:"onResizeStart",value:function onResizeStart(_ref255){var context=_ref255.context,event=_ref255.event;_get2(_getPrototypeOf2(EventResize.prototype),"onResizeStart",this).call(this,{context:context,event:event});// Hide terminals when resizing starts
if(this.client.features.dependencies){this.client.features.dependencies.hideTerminals(context.element);}// Add resizing cls to inner element, as expected by styling
context.element.querySelector('.b-sch-event').classList.add('b-sch-event-resizing');}},{key:"checkValidity",value:function checkValidity(context,event){return(this.client.allowOverlap||this.client.isDateRangeAvailable(context.startDate,context.endDate,context.eventRecord,context.resourceRecord))&&_get2(_getPrototypeOf2(EventResize.prototype),"checkValidity",this).call(this,context,event);}},{key:"onFinishResize",value:function onFinishResize(_ref256){var source=_ref256.source,context=_ref256.context,event=_ref256.event;_get2(_getPrototypeOf2(EventResize.prototype),"onFinishResize",this).call(this,{source:source,context:context,event:event});// When resizing is done successfully, mouse should be over element, so we show terminals
if(this.client.features.dependencies){this.client.features.dependencies.showTerminals(context.eventRecord,context.element);}}},{key:"internalUpdateRecord",value:function internalUpdateRecord(context,timespanRecord){var store=this.store,generation=timespanRecord.generation;if(context.edge==='left'||context.edge==='top'){timespanRecord.setStartDate(context.startDate,false,store.skipWeekendsDuringDragDrop);}else{timespanRecord.setEndDate(context.endDate,false,store.skipWeekendsDuringDragDrop);}// The record has been changed
if(timespanRecord.generation!==generation){return true;}// The record has not been changed
this.client.repaintEventsForResource(context.resourceRecord);return false;}},{key:"finalize",value:function finalize(updateRecord){this.resize.context.element.querySelector('.b-sch-event').classList.remove('b-sch-event-resizing');_get2(_getPrototypeOf2(EventResize.prototype),"finalize",this).call(this,updateRecord);}//endregion
},{key:"store",get:function get(){return this.client.eventStore;}}]);return EventResize;}(ResizeBase);exports.EventResize=EventResize;EventResize._$name='EventResize';GridFeatureManager.registerFeature(EventResize,true,'Scheduler');/**
 * @module Scheduler/feature/base/TooltipBase
 */ /**
 * Base class for EventTooltip (Scheduler) and TaskTooltip (Gantt) features. Contains shared code. Not to be used directly.
 *
 * @extends Common/mixin/InstancePlugin
 */var TooltipBase=/*#__PURE__*/function(_InstancePlugin21){_inherits2(TooltipBase,_InstancePlugin21);function TooltipBase(){_classCallCheck2(this,TooltipBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(TooltipBase).apply(this,arguments));}_createClass2(TooltipBase,[{key:"construct",//endregion
//region Init
value:function construct(client,config){var me=this;// process initial config into an actual config object
config=me.processConfig(config);_get2(_getPrototypeOf2(TooltipBase.prototype),"construct",this).call(this,client,config);// Default triggering selector is the client's inner element selector
if(!me.forSelector){me.forSelector="".concat(client.eventInnerSelector,":not(.b-dragproxy)");}me.clockTemplate=new ClockTemplate({timeAxisViewModel:client.timeAxisViewModel});client.on(_defineProperty({},"before".concat(client.scheduledEventName,"drag"),function beforedrag(){me.tooltip&&me.tooltip.hide();}));}// TooltipBase feature handles special config cases, where user can supply a function to use as template
// instead of a normal config object
},{key:"processConfig",value:function processConfig(config){if(typeof config==='function'){return{template:config};}return config;}// override setConfig to process config before applying it (used mainly from ReactScheduler)
},{key:"setConfig",value:function setConfig(config){_get2(_getPrototypeOf2(TooltipBase.prototype),"setConfig",this).call(this,this.processConfig(config));}},{key:"doDestroy",value:function doDestroy(){this.clockTemplate&&this.clockTemplate.destroy();this.tooltip&&this.tooltip.destroy();_get2(_getPrototypeOf2(TooltipBase.prototype),"doDestroy",this).call(this);}//endregion
},{key:"render",value:function render(){var me=this,client=me.client,ignoreSelector=['.b-dragselecting','.b-eventeditor-editing','.b-resizing-event','.b-dragcreating',".b-dragging-".concat(client.scheduledEventName),'.b-creating-dependency','.b-dragproxy'].map(function(cls){return":not(".concat(cls,")");}).join('');if(me.tooltip)me.tooltip.destroy();/**
         * A reference to the tooltip instance, which will have a special `eventRecord` property that
         * you can use to get data from the contextual event record to which this tooltip is related.
         * @member {Common.widget.Tooltip} tooltip
         * @readonly
         */me.tooltip=new Tooltip(Object.assign({axisLock:'flexible',id:me.tipId||"".concat(me.client.id,"-event-tip"),cls:me.tipCls,forSelector:".b-timelinebase".concat(ignoreSelector," ").concat(me.forSelector),scrollAction:'realign',clippedBy:[client.timeAxisSubGridElement,client.bodyContainer],forElement:client.timeAxisSubGridElement,showOnHover:true,hoverDelay:0,hideDelay:100,anchorToTarget:true,allowOver:true,getHtml:me.getTipHtml.bind(me)},me.config));me.tooltip.on('innerhtmlupdate',me.updateDateIndicator,me);}},{key:"updateDateIndicator",value:function updateDateIndicator(){var me=this,client=me.client,tip=me.tooltip,timeSpanRecord=tip.activeTarget&&client.resolveTimeSpanRecord(tip.activeTarget),endDateElement=tip.element.querySelector('.b-sch-tooltip-enddate');if(!timeSpanRecord)return;me.clockTemplate.updateDateIndicator(tip.element,timeSpanRecord.startDate);endDateElement&&me.clockTemplate.updateDateIndicator(endDateElement,timeSpanRecord.endDate);}},{key:"resolveTimeSpanRecord",value:function resolveTimeSpanRecord(forElement){return this.client.resolveTimeSpanRecord(forElement);}},{key:"getTipHtml",value:function getTipHtml(_ref257){var tip=_ref257.tip,forElement=_ref257.forElement;var me=this,client=me.client,recordProp=me.recordType||"".concat(client.scheduledEventName,"Record"),timeSpanRecord=me.resolveTimeSpanRecord(forElement);// If user has mouseovered a fading away element of a deleted event,
// an event record will not be found. In this case the tip must hide.
if(timeSpanRecord){var _me$template;var _startDate2=timeSpanRecord.startDate,endDate=timeSpanRecord.endDate,startText=client.getFormattedDate(_startDate2),endDateValue=client.getDisplayEndDate(endDate,_startDate2),endText=client.getFormattedDate(endDateValue);tip.eventRecord=timeSpanRecord;tip.title=timeSpanRecord.name;return me.template((_me$template={tip:tip},_defineProperty(_me$template,"".concat(recordProp),timeSpanRecord),_defineProperty(_me$template,"startDate",_startDate2),_defineProperty(_me$template,"endDate",endDate),_defineProperty(_me$template,"startText",startText),_defineProperty(_me$template,"endText",endText),_defineProperty(_me$template,"startClockHtml",me.clockTemplate.template({date:_startDate2,text:startText,cls:'b-sch-tooltip-startdate'})),_defineProperty(_me$template,"endClockHtml",timeSpanRecord.isMilestone?'':me.clockTemplate.template({date:endDateValue,text:endText,cls:'b-sch-tooltip-enddate'})),_me$template));}else{tip.hide();return'';}}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Specify true to have tooltip updated when mouse moves, if you for example want to display date at mouse
             * position.
             * @config {Boolean}
             * @default
             */autoUpdate:false,template:null,cls:null,align:'b-t',clockTemplate:null};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return TooltipBase;}(InstancePlugin);TooltipBase._$name='TooltipBase';/**
 * @module Scheduler/feature/EventTooltip
 */ /**
 * Displays a tooltip when hovering events. The template used to render the tooltip can be customized, see {@link #config-template}.
 * Config options are also applied to the tooltip shown, see {@link Common.widget.Tooltip} for available options.
 *
 * ```javascript
 * new Scheduler({
 *   features : {
 *     eventTooltip : {
 *         // Tooltip configs can be used here
 *         align : 'l-r' // Align left to right
 *     }
 *   }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/TooltipBase
 * @demo basic
 * @externalexample scheduler/EventTooltip.js
 */var EventTooltip=/*#__PURE__*/function(_TooltipBase){_inherits2(EventTooltip,_TooltipBase);function EventTooltip(){_classCallCheck2(this,EventTooltip);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventTooltip).apply(this,arguments));}_createClass2(EventTooltip,null,[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Template (a function accepting event data and returning a string) used to display info in the tooltip.
             * The template will be called with an object containing the fields below
             * @param {Object} data
             * @param {Scheduler.model.EventModel} data.eventRecord
             * @param {Date} data.startDate
             * @param {Date} data.endDate
             * @param {String} data.startText
             * @param {String} data.endText
             * @config {Function} template
             */template:function template(data){return"\n                ".concat(data.eventRecord.name?"<div class=\"b-sch-event-title\">".concat(data.eventRecord.name,"</div>"):'',"\n                ").concat(data.startClockHtml,"\n                ").concat(data.endClockHtml);},cls:'b-sch-event-tooltip'};}//endregion
}]);return EventTooltip;}(TooltipBase);exports.EventTooltip=EventTooltip;EventTooltip._$name='EventTooltip';GridFeatureManager.registerFeature(EventTooltip,true,'Scheduler');/**
 * @module Scheduler/feature/HeaderContextMenu
 */ /**
 * Adds scheduler specific menu items to the timeline header context menu.
 * By default the menu has the following items:
 * * Filter tasks (if {@link Scheduler.feature.EventFilter EventFilter} is enabled)
 * * Zoom
 * * Date range
 * Can be populated by other features.
 *
 *  * To add extra items to the menu:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         headerContextMenu : {
 *             // Extra items
 *             extraItems : [
 *                 {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem() {
 *                         ...
 *                     }
 *                 }
 *             ]
 *         }
 *     }
 * });
 * ```
 *
 * Manipulate existing menu items in the timeaxis header menu:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         headerContextMenu : {
 *             // Process items before menu is shown
 *             processItems({ items }) {
 *                  // Push an extra item
 *                 items.push({
 *                     text : 'Cool action',
 *                     onItem() {
 *                           // ...
 *                     }
 *                  }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * To disable header context menu for locked grid, but leave it for normal grid:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         contextMenu : {
 *             // to disable menu for headers except timeline header
 *             processHeaderItems : ({ column }) => column instanceof TimeAxisColumn,
 *             // to disable menu for cells
 *             processCellItems   : () => false
 *         }
 *     }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Common/mixin/InstancePlugin
 * @externalexample scheduler/HeaderContextMenu.js
 * @demo basic
 */var HeaderContextMenu=/*#__PURE__*/function(_InstancePlugin22){_inherits2(HeaderContextMenu,_InstancePlugin22);function HeaderContextMenu(){_classCallCheck2(this,HeaderContextMenu);return _possibleConstructorReturn2(this,_getPrototypeOf2(HeaderContextMenu).apply(this,arguments));}_createClass2(HeaderContextMenu,[{key:"construct",value:function construct(scheduler,config){_get2(_getPrototypeOf2(HeaderContextMenu.prototype),"construct",this).call(this,scheduler,config);this.scheduler=scheduler;}/**
     * Populates the header context menu items.
     * @param column Column for which the menu will be shown
     * @param items Array of menu items
     * @internal
     */},{key:"getHeaderMenuItems",value:function getHeaderMenuItems(column,items){var me=this,scheduler=me.scheduler,timeAxis=scheduler.timeAxis,dateStep={magnitude:timeAxis.shiftIncrement,unit:timeAxis.shiftUnit};if(column.type!=='timeAxis'){return;}items.push({text:me.L('pickZoomLevel'),icon:'b-fw-icon b-icon-search-plus',disabled:!scheduler.zoomLevels.length,menu:{type:'popup',items:[{type:'slider',showValue:false,listeners:{input:me.onZoomSliderChange,thisObj:me},// set width for IE11
minWidth:130}],onBeforeShow:function onBeforeShow(_ref258){var menu=_ref258.source;var _menu$items2=_slicedToArray(menu.items,1),zoom=_menu$items2[0];zoom.min=scheduler.minZoomLevel;zoom.max=scheduler.maxZoomLevel;zoom.value=scheduler.zoomLevel;}}});me.startDateField=new DateField({label:me.L('startText'),labelWidth:'6em',required:true,step:dateStep,listeners:{change:me.onRangeDateFieldChange,thisObj:me}});me.endDateField=new DateField({label:me.L('endText'),labelWidth:'6em',required:true,step:dateStep,listeners:{change:me.onRangeDateFieldChange,thisObj:me}});items.push({text:me.L('activeDateRange'),icon:'b-fw-icon b-icon-calendar',menu:{type:'popup',width:'20em',items:[me.startDateField,me.endDateField,{type:'button',cls:'b-left-nav-btn',icon:'b-icon b-icon-prev',color:'b-blue b-raised',flex:1,margin:0,listeners:{click:me.onLeftShiftBtnClick,thisObj:me}},{type:'button',cls:'b-today-nav-btn',color:'b-blue b-raised',text:me.L('todayText'),flex:4,margin:'0 8',listeners:{click:me.onTodayBtnClick,thisObj:me}},{type:'button',cls:'b-right-nav-btn',icon:'b-icon b-icon-next',color:'b-blue b-raised',flex:1,listeners:{click:me.onRightShiftBtnClick,thisObj:me}}],onBeforeShow:function onBeforeShow(){return me.initDates();}}});if(me.extraItems){items.push.apply(items,me.extraItems);}var context={items:items},processItems=me.processItems;// Allow user to process the items
if(processItems){processItems(context);}}},{key:"onZoomSliderChange",value:function onZoomSliderChange(_ref259){var value=_ref259.value;this.scheduler.zoomLevel=value;}},{key:"initDates",value:function initDates(){var me=this;me.startDateField.suspendEvents();me.endDateField.suspendEvents();// The actual scheduler start dates may include time, but our Date field cannot currently handle
// a time portion and throws it away, so when we need the value from an unchanged field, we need
// to use the initialValue set from the timeAxis values.
// Until our DateField can optionally include a time value, this is the solution.
me.startDateField.value=me.startDateFieldInitialValue=me.scheduler.startDate;me.endDateField.value=me.endDateFieldInitialValue=me.scheduler.endDate;me.startDateField.resumeEvents();me.endDateField.resumeEvents();}},{key:"onRangeDateFieldChange",value:function onRangeDateFieldChange(_ref260){var source=_ref260.source;var me=this,startDateChanged=source===me.startDateField,client=me.client,timeResolution=client.timeResolution,scrollable=client.timeAxisSubGrid.scrollable,startDate=me.startDateFieldInitialValue&&!startDateChanged?me.startDateFieldInitialValue:me.startDateField.value,viewportStartDate=client.getDateFromX(scrollable.x);var endDate=me.endDateFieldInitialValue&&startDateChanged?me.endDateFieldInitialValue:me.endDateField.value;// When either of the fields is changed, we no longer use its initialValue from the timeAxis start or end
// so that gets nulled to indicate that it's unavailable and the real field value is to be used.
if(startDateChanged){me.startDateFieldInitialValue=null;}else{me.endDateFieldInitialValue=null;}// Because the start and end dates are exclusive, avoid a zero
// length time axis by incrementing the end by one tick unit
// if they are the same.
if(!(endDate-startDate)){endDate=DateHelper.add(endDate,timeResolution.increment,timeResolution.unit);}// if start date got bigger than end date set end date to start date plus one tick
else if(endDate<startDate){endDate=DateHelper.add(startDate,timeResolution.increment,timeResolution.unit);}me.scheduler.timeAxis.setTimeSpan(startDate,endDate);// Keep the visual start time the same
scrollable.x=client.getCoordinateFromDate(viewportStartDate,true);me.initDates();}},{key:"onLeftShiftBtnClick",value:function onLeftShiftBtnClick(){var me=this;me.scheduler.timeAxis.shiftPrevious();me.initDates();}},{key:"onTodayBtnClick",value:function onTodayBtnClick(){var me=this,today=DateHelper.clearTime(new Date());me.scheduler.timeAxis.setTimeSpan(today,DateHelper.add(today,1,'day'));me.initDates();}},{key:"onRightShiftBtnClick",value:function onRightShiftBtnClick(){var me=this;me.scheduler.timeAxis.shiftNext();me.initDates();}}],[{key:"defaultConfig",get:function get(){return{/**
             * An array of additional items to add to the menu
             * @config {Object[]}
             * @default
             */extraItems:null,/**
             * A function called before displaying the menu that allows manipulations of its items. Called with a
             * single parameter with format { eventRecord, resourceRecord, eventElement, items }.
             *
             * ```javascript
             * features : {
             *     headerContextMenu : {
             *         processItems({ items }) {
             *             // Add or remove items here as needed
             *             items.push({ text: 'Some action', icon : 'b-fa b-fa-fw b-fa-ban' })
             *         }
             *     }
             * }
             * ```
             *
             * @config {Function}
             */processItems:null};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['getHeaderMenuItems']};}}]);return HeaderContextMenu;}(InstancePlugin);exports.HeaderContextMenu=HeaderContextMenu;HeaderContextMenu.featureClass='';HeaderContextMenu._$name='HeaderContextMenu';GridFeatureManager.registerFeature(HeaderContextMenu,true,['Scheduler','Gantt']);/**
 * @module Scheduler/feature/Labels
 */var sides=['top','left','right','bottom'],editorAlign={top:'b-b',right:'l-l',bottom:'t-t',left:'r-r'},topBottom={top:1,bottom:1};/**
 * Displays labels at positions {@link #config-top}, {@link #config-right}, {@link #config-bottom} and {@link #config-left}.
 *
 * Text in labels can be set from a field on the {@link Scheduler.model.EventModel EventModel}
 * or the {@link Scheduler.model.ResourceModel ResourceModel} or using a custom renderer.
 *
 * Since `top` and `bottom` labels occupy space that would otherwise be used by the event we recommend using bigger rowHeights
 * (>55px for both labels with default styling) and zero barMargins because `top`/`bottom` labels give space around events anyway.
 *
 * This feature is **disabled** by default. It is **not** supported in vertical mode.
 *
 * @extends Common/mixin/InstancePlugin
 * @demo labels
 * @externalexample scheduler/Labels.js
 */var Labels=/*#__PURE__*/function(_InstancePlugin23){_inherits2(Labels,_InstancePlugin23);function Labels(){_classCallCheck2(this,Labels);return _possibleConstructorReturn2(this,_getPrototypeOf2(Labels).apply(this,arguments));}_createClass2(Labels,[{key:"construct",//endregion
//region Init & destroy
value:function construct(scheduler,config){var me=this;if(scheduler.isVertical){throw new Error('Labels feature is not supported in vertical mode');}me.scheduler=scheduler;me.labelElements={};_get2(_getPrototypeOf2(Labels.prototype),"construct",this).call(this,scheduler,config);var top=me.top,bottom=me.bottom,left=me.left,right=me.right;if(top||bottom||left||right){me.schedulerDetatcher=scheduler.on({eventpaint:'onEventPaint',eventrepaint:'onEventPaint',taskpaint:'onEventPaint',taskrepaint:'onEventPaint',thisObj:me});me.updateHostClasslist();// rowHeight warning, not in use
//const labelCount = !!me.topLabel + !!me.bottomLabel;
//if (scheduler.rowHeight < 60 - labelCount * 12) console.log('')
}}},{key:"updateHostClasslist",value:function updateHostClasslist(){var top=this.top,bottom=this.bottom,classList=this.scheduler.element.classList;classList.remove('b-labels-topbottom');classList.remove('b-labels-top');classList.remove('b-labels-bottom');// OR is correct. This means that there are labels above OR below.
if(top||bottom){classList.add('b-labels-topbottom');if(top){classList.add('b-labels-top');}if(bottom){classList.add('b-labels-bottom');}}}},{key:"onEventDblClick",value:function onEventDblClick(eventDblclick){var me=this,event=eventDblclick.event,target=event.target.closest('.b-sch-label');if(target&&!me.scheduler.readOnly){var side=target.dataset.side,labelConfig=me[side],editor=labelConfig.editor,_field4=labelConfig.field,recordType=labelConfig.recordType;if(editor){if(!(editor instanceof Editor)){labelConfig.editor=new Editor({appendTo:me.scheduler.element,blurAction:me.blurAction,inputField:editor,scrollAction:'realign'});}labelConfig.editor.startEdit({target:target,align:editorAlign[side],matchSize:false,record:eventDblclick["".concat(recordType,"Record")],field:_field4});event.stopImmediatePropagation();return false;}}}},{key:"processLabelSpec",value:function processLabelSpec(labelSpec,side){if(typeof labelSpec==='function'){labelSpec={renderer:labelSpec};}else if(typeof labelSpec==='string'){labelSpec={field:labelSpec};}// Allow us to mutate ownProperties in the labelSpec without mutating outside object
else if(labelSpec){labelSpec=Object.setPrototypeOf({},labelSpec);}else{return;}var scheduler=this.scheduler,eventStore=scheduler.eventStore,resourceStore=scheduler.resourceStore,taskStore=scheduler.taskStore,id=scheduler.id,_labelSpec=labelSpec,field=_labelSpec.field,editor=_labelSpec.editor;// If there are milestones, and we are changing the available height
// either by adding a top/bottom label, or adding a top/bottom label
// then during the next dependency refresh, milestone width must be recalculated.
if(topBottom[side]){scheduler.milestoneWidth=null;}// Find the field definition or property from whichever store and cache the type.
if(field){var fieldDef;if(eventStore&&!taskStore){fieldDef=eventStore.modelClass.fieldMap[field];if(fieldDef){labelSpec.fieldDef=fieldDef;labelSpec.recordType='event';}// Check if it references a property
else if(Reflect.has(eventStore.modelClass.prototype,field)){labelSpec.recordType='event';}}if(!fieldDef&&taskStore){fieldDef=taskStore.modelClass.fieldMap[field];if(fieldDef){labelSpec.fieldDef=fieldDef;labelSpec.recordType='task';}// Check if it references a property
else if(Reflect.has(resourceStore.modelClass.prototype,field)){labelSpec.recordType='task';}}if(!fieldDef&&resourceStore){fieldDef=resourceStore.modelClass.fieldMap[field];if(fieldDef){labelSpec.fieldDef=fieldDef;labelSpec.recordType='resource';}// Check if it references a property
else if(Reflect.has(resourceStore.modelClass.prototype,field)){labelSpec.recordType='resource';}}if(editor){if(typeof editor==='boolean'){scheduler.editor={type:'textfield'};}else if(typeof editor==='string'){scheduler.editor={type:editor};}scheduler.on({eventdblclick:'onEventDblClick',taskdblclick:'onEventDblClick',thisObj:this});}}return labelSpec;}},{key:"doDestroy",value:function doDestroy(){this.schedulerDetatcher&&this.schedulerDetatcher();_get2(_getPrototypeOf2(Labels.prototype),"doDestroy",this).call(this);}/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"onEventPaint",//endregion
//region Events
/**
     * Called when a new event element is created or updated. Make correct label state.
     * @private
     */value:function onEventPaint(paintEvent){// Tear down old label setup (we may have been reconfigured)
DomHelper.removeEachSelector(paintEvent.element,'.b-sch-label');if(!this.disabled){// Insert all configured labels
for(var _i23=0,_sides=sides;_i23<_sides.length;_i23++){var side=_sides[_i23];if(this[side]){this.appendLabel(side,paintEvent.element,paintEvent);}}}}//endregion
//region Labels
/**
     * Appends a label to a wrapping element
     * @private
     * @param side
     * @param appendTo
     * @param eventRecord
     */},{key:"appendLabel",value:function appendLabel(side,appendTo,paintEvent){this.labelElements[side]=DomHelper.createElement({tag:'label',dataset:{side:side},parent:appendTo});this.updateLabel(side,paintEvent);}/**
     * Updates a labels content
     * @private
     * @param side
     * @param eventRecord
     */},{key:"updateLabel",value:function updateLabel(side,paintEvent){var me=this,_me$side=me[side],field=_me$side.field,fieldDef=_me$side.fieldDef,recordType=_me$side.recordType,renderer=_me$side.renderer,thisObj=_me$side.thisObj,labelElement=me.labelElements[side];var value;// Correct class name in case of element recycling from another render condition.
labelElement.className="".concat(me.labelCls," ").concat(me.labelCls,"-").concat(side);// If there's a renderer, use that by preference
if(renderer){value=renderer.call(thisObj||me.thisObj||me,Object.assign({labelElement:labelElement},paintEvent));}else{value=paintEvent["".concat(recordType,"Record")][field];// If it's a date, format it according to the Scheduler's defaults
if(fieldDef&&fieldDef.type==='date'&&!renderer){value=DateHelper.format(value,me.scheduler.displayDateFormat);}}labelElement.innerHTML=value||'\xa0';}//endregion
},{key:"top",set:function set(top){this._top=this.processLabelSpec(top,'top');this.updateHostClasslist();},get:function get(){return this._top;}},{key:"right",set:function set(right){this._right=this.processLabelSpec(right,'right');this.updateHostClasslist();},get:function get(){return this._right;}},{key:"bottom",set:function set(bottom){this._bottom=this.processLabelSpec(bottom,'bottom');this.updateHostClasslist();},get:function get(){return this._bottom;}},{key:"left",set:function set(left){this._left=this.processLabelSpec(left,'left');this.updateHostClasslist();},get:function get(){return this._left;}},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;if(this.client.rendered){this.client.refresh();}}}],[{key:"defaultConfig",//region Config
// Default configuration.
get:function get(){return{/**
             * CSS class to apply to label elements
             * @config {String}
             * @default
             */labelCls:'b-sch-label',/**
             * Top label configuration object. May contain the following properties:
             * - field : [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) The name of a field in one of the associated records,  {@link Scheduler.model.EventModel EventModel} or  {@link Scheduler.model.ResourceModel ResourceModel}. The record from which the field value is drawn will be ascertained by checking for field definitions by the specified name.<br>
             * - renderer : [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) A function, which when passed an object containing `eventRecord`, `resourceRecord` and `labelElement` properties, returns the HTML to display as the label.<br>
             * - thisObj : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) The `this` reference to use in the `renderer`.
             * - editor : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) / {@link Common.widget.Field Field} If the label is to be editable, a field configuration object with a `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.
             * @config {Object}
             * @default
             */top:null,/**
             * Right label configuration object. May contain the following properties:
             * - field : [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) The name of a field in one of the associated records,  {@link Scheduler.model.EventModel EventModel} or  {@link Scheduler.model.ResourceModel ResourceModel}. The record from which the field value is drawn will be ascertained by checking for field definitions by the specified name.<br>
             * - renderer : [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) A function, which when passed an object containing `eventRecord`, `resourceRecord` and `labelElement` properties, returns the HTML to display as the label.<br>
             * - thisObj : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) The `this` reference to use in the `renderer`.
             * - editor : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) / {@link Common.widget.Field Field} If the label is to be editable, a field configuration object with a `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.
             * @config {Object}
             * @default
             */right:null,/**
             * Bottom label configuration object. May contain the following properties:
             * - field : [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) The name of a field in one of the associated records,  {@link Scheduler.model.EventModel EventModel} or  {@link Scheduler.model.ResourceModel ResourceModel}. The record from which the field value is drawn will be ascertained by checking for field definitions by the specified name.<br>
             * - renderer : [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) A function, which when passed an object containing `eventRecord`, `resourceRecord` and `labelElement` properties, returns the HTML to display as the label.<br>
             * - thisObj : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) The `this` reference to use in the `renderer`.
             * - editor : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) / {@link Common.widget.Field Field} If the label is to be editable, a field configuration object with a `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.
             * @config {Object}
             * @default
             */bottom:null,/**
             * Left label configuration object. May contain the following properties:
             * - field : [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) The name of a field in one of the associated records,  {@link Scheduler.model.EventModel EventModel} or  {@link Scheduler.model.ResourceModel ResourceModel}. The record from which the field value is drawn will be ascertained by checking for field definitions by the specified name.<br>
             * - renderer : [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) A function, which when passed an object containing `eventRecord`, `resourceRecord` and `labelElement` properties, returns the HTML to display as the label.<br>
             * - thisObj : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) The `this` reference to use in the `renderer`.
             * - editor : [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) / {@link Common.widget.Field Field} If the label is to be editable, a field configuration object with a `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.
             * @config {Object}
             * @default
             */left:null,thisObj:null,/**
             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.
             * May be `'complete'` or `'cancel`'.
             * @config {String}
             * @default
             */blurAction:'cancel'};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{};}}]);return Labels;}(InstancePlugin);// TODO: Refactor the SASS, so that the auto-generated class name of ''b-' + cls.name.toLowerCase() can be used.
exports.Labels=Labels;Labels.featureClass='b-sch-labels';Labels._$name='Labels';GridFeatureManager.registerFeature(Labels,false,['Scheduler','Gantt']);/**
 * @module Scheduler/feature/AbstractTimeRanges
 */ /**
 * Abstract base class, you should not use this class directly.
 * @abstract
 * @mixes Common/mixin/Delayable
 * @extends Common/mixin/InstancePlugin
 */var AbstractTimeRanges=/*#__PURE__*/function(_Delayable15){_inherits2(AbstractTimeRanges,_Delayable15);function AbstractTimeRanges(){_classCallCheck2(this,AbstractTimeRanges);return _possibleConstructorReturn2(this,_getPrototypeOf2(AbstractTimeRanges).apply(this,arguments));}_createClass2(AbstractTimeRanges,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var me=this;_get2(_getPrototypeOf2(AbstractTimeRanges.prototype),"construct",this).call(this,client,config);// Add a unique cls used by subclasses to get custom styling of the elements rendered
// This makes sure that each class only removed its own elements from the DOM
me.cls=me.cls||"b-timerange-".concat(me.constructor.$name);me.baseSelector=".".concat(me.baseCls,".").concat(me.cls);// header elements are required for interaction
if(me.enableResizing){me.showHeaderElements=true;}}},{key:"doDestroy",value:function doDestroy(){var me=this;me.storeDetacher&&me.storeDetacher();me.timeAxisViewModelDetacher&&me.timeAxisViewModelDetacher();me.timeAxisDetacher&&me.timeAxisDetacher();me.clockTemplate&&me.clockTemplate.destroy();me.tip&&me.tip.destroy();me.drag&&me.drag.destroy();me.resize&&me.resize.destroy();_get2(_getPrototypeOf2(AbstractTimeRanges.prototype),"doDestroy",this).call(this);}//endregion
//region Draw
},{key:"render",value:function render(){var me=this;me.timeAxisViewModel=me.client.timeAxisViewModel;me.timeAxisViewModelDetacher=me.timeAxisViewModel.on({reconfigure:me.onTimeAxisViewModelUpdate,update:me.onTimeAxisViewModelUpdate,thisObj:me});me.timeAxisDetacher=me.client.timeAxis.on({includeChange:me.onTimeAxisViewModelUpdate,thisObj:me});if(me.enableResizing){me.drag=new DragHelper({name:'rangeDrag',mode:me.client.isVertical?'translateY':'translateX',constrain:true,outerElement:me.headerContainerElement,targetSelector:"".concat(me.baseSelector),isElementDraggable:function isElementDraggable(el,event){return!me.client.readOnly&&me.isElementDraggable(el,event);},listeners:{dragstart:me.onDragStart,drag:me.onDrag,drop:me.onDrop,abort:me.onInvalidDrop,thisObj:me}});me.resize=new ResizeHelper({direction:me.client.mode,targetSelector:"".concat(me.baseSelector,".b-sch-range"),outerElement:me.headerContainerElement,listeners:{resizestart:me.onResizeStart,resizing:me.onResizeDrag,resize:me.onResize,thisObj:me}});}me.renderRanges();}},{key:"renderRanges",value:function renderRanges(){var me=this,element=me.client.foregroundCanvas;// Scheduler/Gantt might not yet be rendered
if(element){var headerContainerElement=me.headerContainerElement,store=me.store;// remove existing timeRanges
DomHelper.removeEachSelector(element,me.baseSelector);DomHelper.removeEachSelector(headerContainerElement,me.baseSelector);if(!me.disabled){// add timeRanges
var _iteratorNormalCompletion54=true;var _didIteratorError54=false;var _iteratorError54=undefined;try{for(var _iterator54=store[Symbol.iterator](),_step54;!(_iteratorNormalCompletion54=(_step54=_iterator54.next()).done);_iteratorNormalCompletion54=true){var range=_step54.value;me.renderRange(range,true);}}catch(err){_didIteratorError54=true;_iteratorError54=err;}finally{try{if(!_iteratorNormalCompletion54&&_iterator54.return!=null){_iterator54.return();}}finally{if(_didIteratorError54){throw _iteratorError54;}}}}}}},{key:"renderRange",value:function renderRange(range,injectIntoDom){var me=this,client=me.client;if(!client.rendered){return;}if(range.duration&&client.timeAxis.timeSpanInAxis(range.startDate,range.endDate)||range.startDate&&client.timeAxis.dateInAxis(range.startDate)){var startPos=client.getCoordinateFromDate(DateHelper.max(range.startDate,client.timeAxis.startDate),{respectExclusion:true}),endPos=range.duration&&client.getCoordinateFromDate(DateHelper.min(range.endDate,client.timeAxis.endDate),{respectExclusion:true,isEnd:true}),labelTpl="<label>".concat(range.name||'&nbsp;',"</label>"),config={className:"".concat(me.baseCls," ").concat(me.cls," ").concat(endPos?me.rangeCls:me.lineCls," ").concat(range.cls||''),dataset:{id:range.id},style:client.isVertical?"transform: translateY(".concat(startPos,"px); ").concat(endPos?"height:".concat(endPos-startPos,"px"):'',";"):"transform: translateX(".concat(startPos,"px); ").concat(endPos?"width:".concat(endPos-startPos,"px"):'',";"),retainElement:true// To prevent DomHelper.sync from reusing the element
},bodyElement=DomHelper.createElement(Object.assign({},config,{parent:injectIntoDom&&client.foregroundCanvas,style:config.style+(range.style||''),html:me.showHeaderElements?'':labelTpl}));var headerElement;if(me.showHeaderElements){headerElement=DomHelper.createElement(Object.assign({parent:injectIntoDom&&me.headerContainerElement,html:range.name?labelTpl:''},config));}var result={bodyElement:bodyElement,headerElement:headerElement};if(injectIntoDom){// Make the label run vertically if it overflows the width
me.rotateLabel(result);}return result;}}},{key:"rotateLabel",value:function rotateLabel(_ref261){var bodyElement=_ref261.bodyElement;var label=bodyElement.firstChild;// Lines have no label
if(!label){return;}// Remove any rotation so with can be measured.
label.classList.remove('b-vertical');var rotate=this.client.isVertical?label.offsetHeight<bodyElement.offsetHeight:label.offsetWidth>bodyElement.offsetWidth;// If it overflows, rotate it.
label.classList[rotate?'add':'remove']('b-vertical');}// returns one body el (+ optionally one header el) that represents a time range, or null if timeRanges is not currently rendered
},{key:"getElementsByRecord",value:function getElementsByRecord(idOrRecord){var id=typeof idOrRecord==='string'?idOrRecord:idOrRecord.id,bodyElement=this.client.foregroundCanvas.querySelector("".concat(this.baseSelector,"[data-id=\"").concat(id,"\"]")),headerElement=this.headerContainerElement.querySelector("".concat(this.baseSelector,"[data-id=\"").concat(id,"\"]"));return bodyElement?{bodyElement:bodyElement,headerElement:headerElement}:null;}},{key:"getBodyElementByRecord",value:function getBodyElementByRecord(idOrRecord){var id=typeof idOrRecord==='string'?idOrRecord:idOrRecord.id;return this.client.foregroundCanvas.querySelector("".concat(this.baseSelector,"[data-id=\"").concat(id,"\"]"));}},{key:"getRecordByElement",value:function getRecordByElement(el){return this.store.getById(el.dataset.id);}},{key:"getHeaderMenuItems",//endregion
//region Menu items
/**
     * @private
     */value:function getHeaderMenuItems(column,items){return[];}//endregion
//region Disable
/**
     * Get/set the features disabled state
     * @property {Boolean}
     */},{key:"onTimeAxisViewModelUpdate",//endregion
//region Events
value:function onTimeAxisViewModelUpdate(){this.renderRanges();}},{key:"onStoreChanged",value:function onStoreChanged(event){var me=this;if(me.isConfiguring){return;}// Only animate changes that happen as a result of a pure data change, i.e. not after a drag drop
if(event.action==='update'){var existingElements=me.getElementsByRecord(event.record),redrawnElements=me.renderRange(event.record,!existingElements);if(existingElements&&!redrawnElements){existingElements.bodyElement.remove();existingElements.headerElement&&existingElements.headerElement.remove();}if(!existingElements||!redrawnElements)return;me.client.runWithTransition(function(){DomHelper.sync(redrawnElements.bodyElement,existingElements.bodyElement);if(me.showHeaderElements){DomHelper.sync(redrawnElements.headerElement,existingElements.headerElement);}// Make the label run vertically if it overflows the width
me.rotateLabel(existingElements);});}else{me.renderRanges();}}//endregion
//region Drag drop
},{key:"showTip",value:function showTip(context){var me=this;if(me.showTooltip){me.clockTemplate=new ClockTemplate({timeAxisViewModel:me.client.timeAxisViewModel});me.tip=new Tooltip({cls:'b-interaction-tooltip',align:'b-t',autoShow:true,forElement:context.element,getHtml:function getHtml(){return me.getTipHtml(context.record,context.element);}});}}},{key:"isElementDraggable",value:function isElementDraggable(el){el=el.closest(this.baseSelector);return el&&!el.classList.contains('b-over-resize-handle');}},{key:"onDragStart",value:function onDragStart(_ref262){var context=_ref262.context;var me=this,record=me.getRecordByElement(context.element.closest(me.baseSelector)),rangeBodyEl=me.getBodyElementByRecord(record),drag=me.drag;Object.assign(context,{record:record,rangeBodyEl:rangeBodyEl,originRangeX:DomHelper.getTranslateX(rangeBodyEl),originRangeY:DomHelper.getTranslateY(rangeBodyEl)});if(me.client.isVertical){drag.minY=0;// Moving the range, you can drag the start marker down until the end of the range hits the time axis end
drag.maxY=me.timeAxisViewModel.totalSize-context.rangeBodyEl.offsetHeight;}else{drag.minX=0;// Moving the range, you can drag the start marker right until the end of the range hits the time axis end
drag.maxX=me.timeAxisViewModel.totalSize-context.rangeBodyEl.offsetWidth;}me.showTip(context);}},{key:"onDrag",value:function onDrag(_ref263){var context=_ref263.context;// sync body element with header element (x + width)
if(this.client.isVertical){DomHelper.setTranslateY(context.rangeBodyEl,DomHelper.getTranslateY(context.element));}else{DomHelper.setTranslateX(context.rangeBodyEl,DomHelper.getTranslateX(context.element));}if(this.showTooltip){this.tip.realign();}}},{key:"onDrop",value:function onDrop(_ref264){var context=_ref264.context;if(!context.valid){return this.onInvalidDrop({context:context});}var me=this,record=context.record,box=context.rangeBodyEl.getBoundingClientRect(),newStart=me.client.getDateFromCoordinate(me.client.isVertical?box.top:box.left,'round',false),wasModified=record.startDate-newStart!==0;if(wasModified){record.setStartDate(newStart);}else{me.onInvalidDrop();}if(me.tip){me.tip.destroy();me.tip=null;}}},{key:"onInvalidDrop",value:function onInvalidDrop(){var me=this;me.drag.reset();me.renderRanges();if(me.tip){me.tip.destroy();me.tip=null;}}// endregion
// region resize
},{key:"onResizeStart",value:function onResizeStart(_ref265){var context=_ref265.context;var me=this,record=me.getRecordByElement(context.element.closest(me.baseSelector)),rangeBodyEl=me.getBodyElementByRecord(record);Object.assign(context,{record:record,rangeBodyEl:rangeBodyEl});me.showTip(context);}},{key:"onResizeDrag",value:function onResizeDrag(_ref266){var context=_ref266.context;var me=this;if(me.client.isVertical){if(context.edge==='top'){DomHelper.setTranslateY(context.rangeBodyEl,context.newY);}context.rangeBodyEl.style.height=context.newHeight+'px';}else{if(context.edge==='left'){DomHelper.setTranslateX(context.rangeBodyEl,context.newX);}context.rangeBodyEl.style.width=context.newWidth+'px';}if(me.showTooltip){me.tip.realign();}}},{key:"onResize",value:function onResize(_ref267){var context=_ref267.context;if(!context.valid)return this.onInvalidDrop({context:context});var me=this,client=me.client,record=context.record,box=context.element.getBoundingClientRect(),startPos=client.isVertical?box.top:box.left,endPos=client.isVertical?box.bottom:box.right,newStart=client.getDateFromCoordinate(startPos,'round',false),isStart=context.edge==='left'||context.edge==='top',newEnd=client.getDateFromCoordinate(endPos,'round',false),wasModified=isStart&&record.startDate-newStart!==0||newEnd&&record.endDate-newEnd!==0;if(wasModified&&newEnd>newStart){if(isStart){// could be that the drag operation placed the range with start/end outside the axis
record.setStartDate(newStart,false);}else{record.setEndDate(newEnd,false);}}else{me.onInvalidResize();}if(me.tip){me.tip.destroy();me.tip=null;}}},{key:"onInvalidResize",value:function onInvalidResize(){var me=this;me.resize.reset();me.renderRanges();if(me.tip){me.tip.destroy();me.tip=null;}}/**
     * Gets html to display in tooltip during drag drop.
     */},{key:"getTipHtml",value:function getTipHtml(record,element){var me=this,client=me.client,box=element.getBoundingClientRect(),startPos=client.isVertical?box.top:box.left,endPos=client.isVertical?box.bottom:box.right,startDate=client.getDateFromCoordinate(startPos,'round',false),endDate=record.endDate&&client.getDateFromCoordinate(endPos,'round',false),startText=client.getFormattedDate(startDate),endText=endDate&&client.getFormattedEndDate(endDate,startDate);return me.dragTipTemplate({name:record.name||'',startDate:startDate,endDate:endDate,startText:startText,endText:endText,startClockHtml:me.clockTemplate.template({date:startDate,text:startText,cls:'b-sch-tooltip-startdate'}),endClockHtml:endText&&me.clockTemplate.template({date:endDate,text:endText,cls:'b-sch-tooltip-enddate'})});}//endregion
},{key:"headerContainerElement",get:function get(){// Render into the subGrid´s header element or the vertical timeaxis depending on mode
return this.client.isVertical?this.client.timeView.element.parentElement:this.client.timeAxisColumn.element.parentElement;}//endregion
/**
     * Get/set if header elements should be rendered
     * @property {boolean}
     */},{key:"showHeaderElements",get:function get(){return this._showHeaderElements;},set:function set(show){this._showHeaderElements=show;if(!this.client.element)return;if(show){this.client.element.classList.add('b-sch-timeranges-with-headerelements');}else{this.client.element.classList.remove('b-sch-timeranges-with-headerelements');}this.renderRanges();}},{key:"disabled",get:function get(){return _get2(_getPrototypeOf2(AbstractTimeRanges.prototype),"disabled",this);},set:function set(disabled){_set(_getPrototypeOf2(AbstractTimeRanges.prototype),"disabled",disabled,this,true);this.renderRanges();}/**
     * Returns the {@link Common.data.Store store} used by this feature
     * @property {Common.data.Store}
     */},{key:"store",get:function get(){return this._store;},set:function set(store){var me=this;me._store=Store.getStore(store,Store);var renderRanges=false;// if we had some store assigned before we need to detach it
if(me.storeDetacher){me.storeDetacher();// then we'll need to render ranges provided by the new store
renderRanges=true;}me.storeDetacher=me._store.on({change:me.onStoreChanged,thisObj:me});// render ranges if needed
renderRanges&&this.renderRanges();}}],[{key:"defaultConfig",//region Config
get:function get(){return{// CSS class to apply to range elements
rangeCls:'b-sch-range',// CSS class to apply to line elements (0-duration time range)
lineCls:'b-sch-line',/**
             * Store that holds timeRanges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof).
             * A store will be automatically created if none is specified
             * @config {Object|Common.data.Store}
             */store:{modelClass:TimeSpan},/**
             * Set to `true` to enable dragging and resizing of range elements in the header. Only relevant when {@link #config-showHeaderElements} is true.
             * @config {Boolean}
             * @defaultValue
             */enableResizing:false,/**
             * Specifies whether or not to show tooltip while resizing range elements
             * @config {Boolean}
             * @default
             */showTooltip:true,/**
             * `true` to render range elements into the time axis header
             * @config {Boolean}
             * @default
             */showHeaderElements:true,dragTipTemplate:function dragTipTemplate(data){return"\n                <div class=\"b-sch-tip-".concat(data.valid?'valid':'invalid',"\">\n                    <div class=\"b-sch-tip-name\">").concat(data.name||'',"</div>\n                    ").concat(data.startClockHtml,"\n                    ").concat(data.endClockHtml||'',"\n                </div>\n            ");},baseCls:'b-sch-timerange',// a unique cls used by subclasses to get custom styling of the elements rendered
cls:''};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['render','getHeaderMenuItems']};}}]);return AbstractTimeRanges;}(Delayable(InstancePlugin));AbstractTimeRanges._$name='AbstractTimeRanges';/**
 * @module Scheduler/feature/NonWorkingTime
 */ /**
 * Feature that allows styling of weekends (and other non working time) by adding timeRanges for those days.
 *
 * This feature is **disabled** by default
 *
 * @extends Scheduler/feature/AbstractTimeRanges
 * @demo configuration
 * @externalexample scheduler/NonWorkingTime.js
 */var NonWorkingTime=/*#__PURE__*/function(_AbstractTimeRanges){_inherits2(NonWorkingTime,_AbstractTimeRanges);function NonWorkingTime(){_classCallCheck2(this,NonWorkingTime);return _possibleConstructorReturn2(this,_getPrototypeOf2(NonWorkingTime).apply(this,arguments));}_createClass2(NonWorkingTime,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var me=this;_get2(_getPrototypeOf2(NonWorkingTime.prototype),"construct",this).call(this,client,config);if(!me.calendar||!client.calendar){me.calendar=new Calendar();}me.bindCalendar(me.calendar);}},{key:"doDestroy",value:function doDestroy(){this.bindCalendar(null);_get2(_getPrototypeOf2(NonWorkingTime.prototype),"doDestroy",this).call(this);}//endregion
//region Calendar
},{key:"bindCalendar",value:function bindCalendar(calendar){var me=this;if(me.calendarDetacher)me.calendarDetacher();if(calendar){me.calendarDetacher=calendar.on({change:me.renderRanges,thisObj:me,delay:1});}me.calendar=calendar;me.renderRanges();}//endregion
//region Draw
},{key:"renderRanges",value:function renderRanges(){var me=this;if(me.store&&!me.store.isDestroyed){var shouldPaint=DateHelper.as(me.client.timeAxis.unit,1,'week')>=1;me.store.removeAll(true);if(me.calendar&&me.highlightWeekends&&shouldPaint){me.store.add(me.calendar.getHolidaysRanges(me.client.timeAxis.startDate,me.client.timeAxis.endDate,true),true);}}_get2(_getPrototypeOf2(NonWorkingTime.prototype),"renderRanges",this).call(this);}//endregion
}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * Highlight weekends
             * @config {Boolean}
             * @default
             */highlightWeekends:true,showHeaderElements:true,cls:'b-sch-nonworkingtime'};}}]);return NonWorkingTime;}(AbstractTimeRanges);exports.NonWorkingTime=NonWorkingTime;NonWorkingTime._$name='NonWorkingTime';GridFeatureManager.registerFeature(NonWorkingTime,false,['Scheduler','Gantt']);/**
 * @module Scheduler/feature/Pan
 */ /**
 * Makes the scheduler's timeline pannable by dragging with the mouses.
 *
 * This feature is **disabled** by default.
 *
 * **NOTE:** Incompatible with {@link Scheduler.feature.EventDragCreate EventDragCreate} feature.
 *
 * @extends Common/mixin/InstancePlugin
 *
 * @example
 * // enable Pan
 * let scheduler = new Scheduler({
 *   features : {
 *     pan : true,
 *     eventDragCreate : false
 *   }
 * });
 *
 * @classtype pan
 */var Pan=/*#__PURE__*/function(_InstancePlugin24){_inherits2(Pan,_InstancePlugin24);function Pan(){_classCallCheck2(this,Pan);return _possibleConstructorReturn2(this,_getPrototypeOf2(Pan).apply(this,arguments));}_createClass2(Pan,[{key:"construct",value:function construct(timeline,config){this.timeline=timeline;if(timeline.features.eventDragCreate)throw new Error('Cannot combine Pan and eventDragCreate features');var targetSelectors=['.b-grid-cell','.b-timeline-subgrid'];this.targetSelector=targetSelectors.join(',');_get2(_getPrototypeOf2(Pan.prototype),"construct",this).call(this,timeline,config);}//endregion
//region Plugin config
// Plugin configuration. This plugin chains some of the functions in Scheduler.
},{key:"onElementMouseDown",//endregion
value:function onElementMouseDown(event){var me=this,timeline=me.timeline,dragFeature=Object.values(timeline.features).find(function(feature){return feature instanceof DragBase;}),enablePanOnEvents=timeline.readOnly||!dragFeature||dragFeature.disabled;// only react to mouse input, and left button
if(event.touches||event.button!==0){return;}// only react to mousedown directly on grid cell, subgrid element or if drag is disabled - the events too
if(event.target.matches(me.targetSelector)||enablePanOnEvents&&event.target.closest(timeline.eventSelector)){me.mouseX=event.clientX;me.mouseY=event.clientY;}}},{key:"onElementMouseMove",value:function onElementMouseMove(event){var me=this;// Synthetic mousemove event has no button for IE11
// Detect if a mouseup happened outside our element (or browser window for that matter). Note 'buttons' is not supported by Safari
if(event.buttons===0&&!BrowserHelper.isSafari&&(!BrowserHelper.isIE11||event.isTrusted)){me.onElementMouseUp();return;}if(typeof me.mouseX==='number'){var xScroller=me.timeline.subGrids.normal.scrollable,yScroller=me.timeline.scrollable,x=event.clientX,y=event.clientY;event.preventDefault();if(me.vertical){yScroller.scrollBy(0,me.mouseY-y);}xScroller.scrollBy(me.mouseX-x);me.mouseX=x;me.mouseY=y;}}},{key:"onElementMouseUp",value:function onElementMouseUp(event){this.mouseX=this.mouseY=null;}//endregion
}],[{key:"defaultConfig",// region Init
get:function get(){return{/**
             * Set to false to only pan horizontally
             * @config {Boolean}
             * @default
             */vertical:true};}},{key:"pluginConfig",get:function get(){return{chain:['onElementMouseDown','onElementMouseMove','onElementMouseUp']};}}]);return Pan;}(InstancePlugin);exports.Pan=Pan;Pan._$name='Pan';GridFeatureManager.registerFeature(Pan,false,['Scheduler','Gantt']);/**
 * @module Scheduler/model/ResourceTimeRangeModel
 */ /**
 * This class represent a single resource time range in your schedule. To style
 * the rendered elements, use the {@link Scheduler.model.TimeSpan#field-cls cls} field of the `TimeSpan` class, or use the {@link #field-timeRangeColor} field.
 *
 * @extends Scheduler/model/TimeSpan
 */var ResourceTimeRangeModel=/*#__PURE__*/function(_TimeSpan2){_inherits2(ResourceTimeRangeModel,_TimeSpan2);function ResourceTimeRangeModel(){_classCallCheck2(this,ResourceTimeRangeModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceTimeRangeModel).apply(this,arguments));}_createClass2(ResourceTimeRangeModel,[{key:"isResourceTimeRange",//endregion
// Used internally to differentiate between Event and ResourceTimeRange
get:function get(){return true;}// To match EventModel API
},{key:"resources",get:function get(){return[this.resource];}}],[{key:"fields",//region Fields
get:function get(){return[/**
             * Id of the resource this time range is associated with
             * @field {String|Number} resourceId
             */'resourceId',/**
             * Controls this time ranges primary color, defaults to using current themes default time range color.
             * @field {String} timeRangeColor
             */'timeRangeColor'];}},{key:"relationConfig",get:function get(){return[/**
             * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned
             * to `resourceId`. The relation also lets you access all time ranges on a resource through
             * `ResourceModel#timeRanges`.
             * @property {Scheduler.model.ResourceModel} resource
             */{relationName:'resource',fieldName:'resourceId',store:'resourceStore',collectionName:'timeRanges',nullFieldOnRemove:true}];}}]);return ResourceTimeRangeModel;}(TimeSpan);ResourceTimeRangeModel._$name='ResourceTimeRangeModel';/**
 * @module Scheduler/data/ResourceTimeRangeStore
 */ /**
 * A class representing a collection of resource time ranges.
 * Contains a collection of {@link Scheduler.model.ResourceTimeRangeModel} records.
 *
 * @extends Common/data/AjaxStore
 */var ResourceTimeRangeStore=/*#__PURE__*/function(_AjaxStore4){_inherits2(ResourceTimeRangeStore,_AjaxStore4);function ResourceTimeRangeStore(){_classCallCheck2(this,ResourceTimeRangeStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceTimeRangeStore).apply(this,arguments));}_createClass2(ResourceTimeRangeStore,[{key:"getResourcesForEvent",// Matching signature in EventStore to allow reusage of SchedulerStores#onInternalEventStoreChange()
value:function getResourcesForEvent(resourceTimeRange){return[resourceTimeRange.resource];}},{key:"resourceStore",set:function set(store){this._resourceStore=store;// If store is assigned after configuration we need to init relations
if(!this.isConfiguring){this.initRelations(true);}},get:function get(){return this._resourceStore;}}],[{key:"defaultConfig",get:function get(){return{/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:500,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:500,/**
             * This store should be linked to a ResourceStore to link the time ranges to resources
             * @config {Scheduler.data.ResourceStore}
             */resourceStore:null,modelClass:ResourceTimeRangeModel,storeId:'resourceTimeRanges'};}}]);return ResourceTimeRangeStore;}(AjaxStore);ResourceTimeRangeStore._$name='ResourceTimeRangeStore';/**
 * @module Scheduler/feature/ResourceTimeRanges
 */ /**
 * Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in
 * that they have a start and end date but different in that they do not take part in the event layout and they always
 * occupy full row height.
 *
 * Each time range is represented by an instances of {@link Scheduler.model.ResourceTimeRangeModel}, held in a
 * {@link Scheduler.data.ResourceTimeRangeStore}. Currently the they are readonly UI-wise, but can be manipulated on
 * the data level. To style the rendered elements, use the {@link Scheduler.model.TimeSpan#field-cls cls} field or use the {@link Scheduler.model.ResourceTimeRangeModel#field-timeRangeColor} field.
 *
 * Data can be provided either using the {@link #config-store} config:
 *
 * ```javascript
 * new Scheduler({
 *   features :  {
 *       resourceTimeRanges : {
 *          store : new Scheduler.data.ResourceTimeRangeStore({
 *              readUrl : './resourceTimeRanges/'
 *          })
 *       }
 *   }
 * })
 * ```
 *
 * or the `resourceTimeRanges` config on the Scheduler config object:
 *
 * ```javascript
 * new Scheduler({
 *   features :  {
 *       resourceTimeRanges : true
 *   },
 *
 *   // Data specified directly on the Scheduler instance
 *   resourceTimeRanges : [
 *     // Either specify startDate & endDate or startDate & duration when defining a range
 *     { startDate : new Date(2019,0,1), endDate : new Date(2019,0,3), name : 'Occupied', timeRangeColor : 'red' },
 *     { startDate : new Date(2019,0,3), duration : 2, durationUnit : 'd', name : 'Available' },
 *   ]
 * })
 * ```
 *
 * This feature is **disabled** by default
 *
 * @extends Common/mixin/InstancePlugin
 * @demo resourcetimeranges
 * @externalexample scheduler/ResourceTimeRanges.js
 */var ResourceTimeRanges=/*#__PURE__*/function(_InstancePlugin25){_inherits2(ResourceTimeRanges,_InstancePlugin25);function ResourceTimeRanges(){_classCallCheck2(this,ResourceTimeRanges);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceTimeRanges).apply(this,arguments));}_createClass2(ResourceTimeRanges,[{key:"noFeatureElementsInAxis",// Let Scheduler know if we have ResourceTimeRanges in view or not
value:function noFeatureElementsInAxis(){var timeAxis=this.scheduler.timeAxis;return!this.store.storage.values.some(function(t){return timeAxis.isTimeSpanInAxis(t);});}//endregion
//region Init
},{key:"construct",value:function construct(scheduler,config){var me=this;me.scheduler=scheduler;_get2(_getPrototypeOf2(ResourceTimeRanges.prototype),"construct",this).call(this,scheduler,config);// expose getter/setter for resourceTimeRanges on scheduler
Object.defineProperty(scheduler,'resourceTimeRanges',{get:function get(){return me.store.records;},set:function set(resourceTimeRanges){return me.store.data=resourceTimeRanges;}});}/**
     * Called during construction to do product specific store setup
     * @private
     */},{key:"getEventsToRender",//endregion
// Called on render of resources events to get events to render. Add any ranges
// (chained function from Scheduler)
value:function getEventsToRender(resource,events){if(resource.timeRanges&&resource.timeRanges.length){events.push.apply(events,_toConsumableArray(resource.timeRanges));}return events;}// Called for each event during render, allows manipulation of render data. Adjust any resource time ranges
// (chained function from Scheduler)
},{key:"onEventDataGenerated",value:function onEventDataGenerated(renderData){var me=this,record=renderData.event||renderData.eventRecord;// Differs by mode
if(record.isResourceTimeRange){if(me.scheduler.isVertical){renderData.width=me.scheduler.resourceColumnWidth;}else{renderData.top=0;// Avoid colliding ids by using a prefix
renderData.id="".concat(me.scheduler.id,"-").concat(me.idPrefix,"-").concat(record.id);}// Flag that we should fill entire row/col
renderData.fillSize=true;// Needed for caching
renderData.eventId="".concat(me.idPrefix,"-").concat(record.id);// Add our own cls
renderData.wrapperCls[me.rangeCls]=1;renderData.wrapperCls["b-sch-color-".concat(record.timeRangeColor)]=record.timeRangeColor;// Add label
renderData.body=document.createDocumentFragment();renderData.body.textContent=record.name;}}// Called when a ResourceTimeRangeModel is manipulated, relays to Scheduler#onInternalEventStoreChange which updates to UI
},{key:"onStoreChange",value:function onStoreChange(event){this.scheduler.onInternalEventStoreChange(event);}},{key:"store",set:function set(store){var me=this,scheduler=me.scheduler;me._store=store=store||new ResourceTimeRangeStore();if(!scheduler.resourceTimeRangeStore){scheduler.resourceTimeRangeStore=store;}// ResourceZones can be set on scheduler or feature, for convenience
if(scheduler.resourceTimeRanges){store.add(scheduler.resourceTimeRanges);delete scheduler.resourceTimeRanges;}// Link to schedulers resourceStore if not already linked to one
if(!store.resourceStore){store.resourceStore=scheduler.resourceStore;}me.storeDetacher&&me.storeDetacher();me.storeDetacher=me.store.on({change:me.onStoreChange,thisObj:me});},get:function get(){return this._store;}}],[{key:"defaultConfig",//region Config
get:function get(){return{idPrefix:'resourcetimerange',rangeCls:'b-sch-resourcetimerange',/**
             * Store that holds resource time ranges (using ResourceTimeRangeModel or subclass thereof). A store will be
             * automatically created if none is specified
             * @config {Scheduler.data.ResourceTimeRangeStore}
             */store:false,/**
             * Time range definitions (data to ResourceTimeRangeModels). Will be added to store. Can also be specified
             * on Scheduler for convenience
             * @config {Scheduler.model.ResourceTimeRangeModel[]|Object[]}
             */resourceTimeRanges:null};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['getEventsToRender','onEventDataGenerated','noFeatureElementsInAxis']};}}]);return ResourceTimeRanges;}(InstancePlugin);// No feature based styling needed, do not add a cls to Scheduler
exports.ResourceTimeRanges=ResourceTimeRanges;ResourceTimeRanges.featureClass='';ResourceTimeRanges._$name='ResourceTimeRanges';GridFeatureManager.registerFeature(ResourceTimeRanges,false,'Scheduler');/**
 * @module Scheduler/feature/TimeRanges
 */ /**
 * Feature that renders global ranges of time in the timeline. Use this feature to visualize a `range` like a 1 hr lunch or some important point in time
 * (a `line`, i.e. a range with 0 duration). This feature can also show a current time indicator if you set {@link #config-showCurrentTimeLine} to true. To style
 * the rendered elements, use the {@link Scheduler.model.TimeSpan#field-cls cls} field of the `TimeSpan` class.
 *
 * Each time range is represented by an instances of {@link Scheduler.model.TimeSpan}, held in a simple {@link Common.data.Store}.
 * If {@link Scheduler.data.CrudManager} is specified for the scheduler, the {@link #config-store} will be added at the end of the CrudManager
 * {@link Scheduler.crud.AbstractCrudManager#property-stores} collection.
 *
 * This feature is **disabled** by default
 *
 * @extends Scheduler/feature/AbstractTimeRanges
 * @classtype timeRanges
 * @demo timeranges
 * @externalexample scheduler/TimeRanges.js
 */var TimeRanges=/*#__PURE__*/function(_AbstractTimeRanges2){_inherits2(TimeRanges,_AbstractTimeRanges2);function TimeRanges(){_classCallCheck2(this,TimeRanges);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeRanges).apply(this,arguments));}_createClass2(TimeRanges,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var me=this;_get2(_getPrototypeOf2(TimeRanges.prototype),"construct",this).call(this,client,config);if(!client._timeRangesExposed){// expose getter/setter for timeRanges on scheduler/gantt
Object.defineProperty(client,'timeRanges',{get:function get(){return me.store.records;},set:function set(timeRanges){return me.store.data=timeRanges;}});client._timeRangesExposed=true;}}},{key:"startConfigure",value:function startConfigure(config){var client=this.client;// If the client's project has a timeRangeStore, we must use that
if(client.project){var store=client.project.timeRangeStore;if(store){config.store=store;}}}//endregion
//region Current time line
},{key:"initCurrentTimeLine",value:function initCurrentTimeLine(){var me=this,now=new Date();if(me.currentTimeLine||!me.showCurrentTimeLine){return;}me.currentTimeLine=new me.store.modelClass({'id':'currentTime',cls:'b-sch-current-time',startDate:now,name:DateHelper.format(now,me.currentDateFormat)});me.currentTimeInterval=me.setInterval(function(){me.currentTimeLine.startDate=new Date();me.currentTimeLine.name=DateHelper.format(me.currentTimeLine.startDate,me.currentDateFormat);me.onStoreChanged({action:'update',record:me.currentTimeLine});},me.updateCurrentTimeLineInterval);if(me.client.rendered){me.renderRanges();}}},{key:"hideCurrentTimeLine",value:function hideCurrentTimeLine(){var me=this;if(!me.currentTimeLine){return;}me.clearInterval(me.currentTimeInterval);me.currentTimeLine=null;if(me.client.rendered){me.renderRanges();}}},{key:"renderRanges",value:function renderRanges(){var me=this;_get2(_getPrototypeOf2(TimeRanges.prototype),"renderRanges",this).call(this);if(me.showCurrentTimeLine&&!me.disabled){me.renderRange(me.currentTimeLine,true);}}/**
     * Get/set the current time line display state
     * @property {boolean}
     */},{key:"getHeaderMenuItems",//endregion
//region Menu items
/**
     * Adds a menu item to show/hide current time line.
     * @param column Column
     * @param items Menu items
     * @returns {Object[]} Menu items
     * @private
     */value:function getHeaderMenuItems(column,items){var me=this;if(!items.some(function(item){return item.isCurrentTimeline;})&&column.type==='timeAxis'){items.push({isCurrentTimeline:true,text:me.L('showCurrentTimeLine'),checked:me.showCurrentTimeLine,onToggle:function onToggle(_ref268){var checked=_ref268.checked;me.showCurrentTimeLine=checked;}});}}//endregion
//region Disable
/**
     * Get/set the features disabled state
     * @property {Boolean}
     */},{key:"showCurrentTimeLine",get:function get(){return this._showCurrentTimeLine;},set:function set(show){this._showCurrentTimeLine=show;if(show){this.initCurrentTimeLine();}else{this.hideCurrentTimeLine();}}},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;if(this.client.rendered){this.renderRanges();}}/**
     * Returns the {@link Common.data.Store store} used by this feature
     * @property {Common.data.Store}
     */},{key:"store",get:function get(){return this._store;},set:function set(store){var me=this,client=me.client;if(!store.storeId){store.storeId='timeRanges';}_set(_getPrototypeOf2(TimeRanges.prototype),"store",store,this,true);// timeRanges can be set on scheduler/gantt or feature, for convenience. Should only be processed by the TimeRanges
// and not any subclasses
if(client.timeRanges&&!client._timeRangesExposed){me._store.add(client.timeRanges);delete client.timeRanges;}if(me.timeRanges){me._store.add(me.timeRanges);delete me.timeRanges;}}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Store that holds timeRanges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof).
             * A store will be automatically created if none is specified
             * @config {Object|Common.data.Store}
             */store:{modelClass:TimeSpan,storeId:'timeRanges'},updateCurrentTimeLineInterval:10000,/**
             * The date format to show in the header for the current time line, see {@link #config-showCurrentTimeLine}
             * @config {String}
             * @default
             */currentDateFormat:'HH:mm',/**
             * Range definitions (data to {@link Scheduler.model.TimeSpan} models). Will be added to store.
             * @config {Scheduler.model.TimeSpan[]|Object[]}
             */timeRanges:null,/**
             * Show a line indicating current time
             * @config {Boolean}
             * @default
             */showCurrentTimeLine:false};}}]);return TimeRanges;}(AbstractTimeRanges);exports.TimeRanges=TimeRanges;TimeRanges._$name='TimeRanges';GridFeatureManager.registerFeature(TimeRanges,false,['Scheduler','Gantt']);var tpl=TemplateHelper.tpl;/**
 * @module Scheduler/view/HorizontalTimeAxis
 */ /**
 * A visual representation of the time axis described in the {@link Scheduler.preset.ViewPreset#config-headerConfig headerConfig}.
 * Normally you should not interact with this class directly.
 *
 * @mixes Common/mixin/Events
 * @private
 */var HorizontalTimeAxis=/*#__PURE__*/function(_Base10){_inherits2(HorizontalTimeAxis,_Base10);function HorizontalTimeAxis(){_classCallCheck2(this,HorizontalTimeAxis);return _possibleConstructorReturn2(this,_getPrototypeOf2(HorizontalTimeAxis).apply(this,arguments));}_createClass2(HorizontalTimeAxis,[{key:"headerHtmlRowTpl",//endregion
//region Init
value:function headerHtmlRowTpl(data){return tpl(_templateObject28(),data.levels.map(function(level){return tpl(_templateObject29(),level.position,level.position,level.cells.map(function(cell,i){return"<div class=\"b-sch-header-timeaxis-cell ".concat(cell.headerCellCls,"  ").concat(cell.align?'b-align-'+cell.align:'',"\">").concat(cell.value,"</div>\n                ");}));}));}//Needed to be CSP compliant
},{key:"fixHtmlHeaderStyles",value:function fixHtmlHeaderStyles(element,levels){levels.forEach(function(level){var nodes=DomHelper.children(element,'[headerPosition='+level.position+'] .b-sch-header-timeaxis-cell');nodes.forEach(function(node,index){node.style.width=node.style.minWidth="".concat(level.cells[index].width,"px");});});}//endregion
//region Html & rendering
// Produces the tables and cells based on the header row config in the active viewPreset
},{key:"renderTo",value:function renderTo(element){var me=this,columnConfig=me.model.columnConfig,levels=[];if(columnConfig.top){levels.push({position:'top',cells:columnConfig.top});}if(columnConfig.middle){levels.push({position:'middle',cells:columnConfig.middle,cls:!columnConfig.bottom&&me.model.tickSize<=me.compactCellWidthThreshold?'b-sch-header-row-compact':''});}if(columnConfig.bottom){levels.push({position:'bottom',cells:columnConfig.bottom,cls:me.model.tickSize<=me.compactCellWidthThreshold?'b-sch-header-row-compact':''});}element.innerHTML=me.headerHtmlRowTpl({levels:levels});// TODO clean up when this is fixed: https://app.assembla.com/spaces/bryntum/tickets/8413-horizontaltimeaxis-should-not-completely-overwrite-contents-of-column-el/details#
var parentEl=element.parentElement;[1,2,3].forEach(function(i){return parentEl.classList.remove("b-sch-timeaxiscolumn-levels-".concat(i));});parentEl.classList.add("b-sch-timeaxiscolumn-levels-".concat(levels.length));me.fixHtmlHeaderStyles(element,levels);}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * The minimum width for a bottom row header cell to be considered 'compact', which adds a special CSS class
             * to the row (for special styling).
             * @config {Number}
             * @default
             */compactCellWidthThreshold:15};}}]);return HorizontalTimeAxis;}(Base);exports.HorizontalTimeAxis=HorizontalTimeAxis;HorizontalTimeAxis._$name='HorizontalTimeAxis';/**
 * @module Scheduler/view/ResourceHeader
 */ /**
 * Header widget that renders resource column headers and acts as the interaction point for resource columns in vertical
 * mode. Note that it uses virtual rendering and element reusage to gain performance, only headers in view are available
 * in DOM. Because of this you should avoid direct element manipulation, any such changes can be discarded at any time.
 *
 * By default it displays resources `name` and also applies its `iconCls` if any, like this:
 *
 * ```
 * <i class="iconCls">name</i>
 * ```
 *
 * If Scheduler is configured with a {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath} the
 * header will render miniatures for the resources, using {@link Scheduler.model.ResourceModel#field-imageUrl} with
 * fallback to {@link Scheduler.model.ResourceModel#field-name} + .jpg for unset values.
 *
 * The contents and styling of the resource cells in the header can be customized using {@link #config-headerRenderer}:
 *
 * ```
 * new Scheduler({
 *     mode            : 'vertical',
 *     resourceColumns : {
 *         headerRenderer : ({ resourceRecord }) => `Hello ${resourceRecord.name}`
 *     }
 * }
 *```
 *
 * The width of the resource columns is determined by the {@link #config-columnWidth} config.
 *
 * @extends Common/widget/Widget
 */var ResourceHeader=/*#__PURE__*/function(_Widget11){_inherits2(ResourceHeader,_Widget11);function ResourceHeader(){_classCallCheck2(this,ResourceHeader);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceHeader).apply(this,arguments));}_createClass2(ResourceHeader,[{key:"construct",//endregion
//region Init
value:function construct(config){_get2(_getPrototypeOf2(ResourceHeader.prototype),"construct",this).call(this,config);var me=this;if(me.imagePath!=null){var missingImgUrl=me.missingImgUrl="".concat(me.imagePath).concat(me.defaultImageName);// Apply default image on load errors
EventHelper.on({element:me.element,delegate:'.b-resource-image',capture:true,error:function error(event){var target=event.target;if(target.src!==target._lastMissingUrl){target._lastMissingUrl=target.src;target.src=missingImgUrl;}}});// Need to gain some height when displaying images
me.element.classList.add('b-has-images');}}//endregion
//region ResourceStore
},{key:"onResourceStoreDataChange",// Redraw resource headers on any data change
value:function onResourceStoreDataChange(_ref269){var action=_ref269.action;var me=this,width=me.resourceStore.count*me.columnWidth;if(width!==me.width){me.element.style.width=width+'px';// During setup, silently set the width. It will then render correctly. After setup, let the world know...
me.column.set('width',width,me.column.grid.isConfiguring);}if(action==='removeall'){// Keep nothing
me.element.innerHTML='';}if(action==='remove'||action==='add'||action==='filter'){me.refreshWidths();}}//endregion
//region Properties
},{key:"refreshWidths",// Updates the column widths according to fill and fit settings
value:function refreshWidths(){var me=this,availableWidth=me.availableWidth,_originalColumnWidth=me._originalColumnWidth,count=me.resourceStore&&me.resourceStore.count;// Bail out if availableWidth not yet set or resource store not assigned/loaded
if(!availableWidth||!count){return;}me.refreshingWidths=true;var// Fit width if configured to do so or if configured to fill and used width is less than available width
fit=me.fitWidth||me.fillWidth&&_originalColumnWidth*count<availableWidth,useWidth=fit?Math.floor(availableWidth/count):_originalColumnWidth,shouldAnimate=me.column.grid.enableEventAnimations&&Math.abs(me._columnWidth-useWidth)>30;DomHelper.addTemporaryClass(me.element,'b-animating',shouldAnimate?300:0);me.columnWidth=useWidth;me.refreshingWidths=false;}//endregion
//region Rendering
// Visual resource range, set by VerticalEventMapper
},{key:"refresh",/**
     * Refreshes the visible headers
     */value:function refresh(){var me=this,firstResource=me.firstResource,lastResource=me.lastResource;// Bail out if we are configuring or have no resources to show
if(me.column.grid.isConfiguring||firstResource===-1||lastResource===-1||lastResource>=me.resourceStore.count){return;}var configs=[];// Gather element configs for resource headers in view
for(var i=firstResource;i<=lastResource;i++){var resourceRecord=me.resourceStore.getAt(i),elementConfig={// Might look like overkill to use DomClassList here, but can be used in headerRenderer
className:new DomClassList({'b-resourceheader-cell':1}),dataset:{resourceId:resourceRecord.id},style:{left:i*me.columnWidth,width:me.columnWidth},children:[]};// Let a configured headerRenderer have a go at it before applying
if(me.headerRenderer){var value=me.headerRenderer({elementConfig:elementConfig,resourceRecord:resourceRecord});if(value!=null){elementConfig.html=value;}}// No headerRenderer, apply default markup
else{// Optionally displaying a miniature image
if(me.imagePath!=null){var imgSrc=resourceRecord.name?me.imagePath+(resourceRecord.imageUrl||resourceRecord.name.toLowerCase()+'.jpg'):me.missingImgUrl;elementConfig.children.push({tag:'img',className:'b-resource-image',src:imgSrc});}// Optionally displaying an icon
if(resourceRecord.iconCls){elementConfig.children.push({tag:'i',className:resourceRecord.iconCls});}// By default showing resource name
elementConfig.children.push({tag:'span',className:'b-resource-name',html:resourceRecord.name});}configs.push(elementConfig);}// Sync changes to the header
DomHelper.sync({elementConfig:{onlyChildren:true,children:configs},targetElement:me.element,useSyncId:'resourceId'// TODO: Add callback here to trigger events when rendering/derendering header cells. Sooner or later
//  someone is going to ask for a way to render JSX or what not to the header
});}//endregion
},{key:"resourceStore",set:function set(store){var me=this;if(store!==me._resourceStore){me.resourceStoreDetacher&&me.resourceStoreDetacher();me._resourceStore=store;me.resourceStoreDatacher=store.on({change:'onResourceStoreDataChange',thisObj:me});}},get:function get(){return this._resourceStore;}},{key:"columnWidth",get:function get(){return this._columnWidth;},set:function set(width){var me=this;if(width!==me._columnWidth){var oldWidth=me._columnWidth;me._columnWidth=width;// Flag set in refreshWidths, do not want to create a loop
if(!me.refreshingWidths){me._originalColumnWidth=width;me.refreshWidths();}if(!me.isConfiguring){me.refresh();// Cannot trigger with requested width, might have changed because of fit/fill
me.trigger('columnWidthChange',{width:me._columnWidth,oldWidth:oldWidth});}}}/**
     * Assign to toggle resource columns **fill* mode. `true` means they will stretch (grow) to fill viewport, `false`
     * that they will respect their configured `columnWidth`.
     * @property {Boolean}
     */},{key:"fillWidth",get:function get(){return this._fillWidth;},set:function set(fill){this._fillWidth=fill;this.refreshWidths();}/**
     * Assign to toggle resource columns **fit* mode. `true` means they will grow or shrink to always fit viewport,
     * `false` that they will respect their configured `columnWidth`.
     * @property {Boolean}
     */},{key:"fitWidth",get:function get(){return this._fitWidth;},set:function set(fit){this._fitWidth=fit;this.refreshWidths();}},{key:"imagePath",get:function get(){return this._imagePath;},set:function set(path){this._imagePath=path;this.refresh();}//endregion
//region Fit to width
},{key:"availableWidth",get:function get(){return this._availableWidth;},set:function set(width){this._availableWidth=width;this.refreshWidths();}},{key:"range",set:function set(range){var me=this;me.firstResource=range.firstResource;me.lastResource=range.lastResource;me.refresh();}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Resource store used to render resource headers. Assigned from Scheduler.
             * @config {Scheduler.data.ResourceStore}
             * @private
             */resourceStore:null,// TODO: Read this value from CSS as we do with rowHeight?
/**
             * Width for each resource column
             * @config {Number}
             */columnWidth:150,/**
             * Custom header renderer function. Can be used to manipulate the element config used to create the element
             * for the header:
             *
             * ```
             * new Scheduler({
             *   resourceColumns : {
             *     headerRenderer({ elementConfig, resourceRecord }) {
             *       elementConfig.dataset.myExtraData = 'extra';
             *       elementConfig.style.fontWeight = 'bold';
             *     }
             *   }
             * });
             * ```
             *
             * See {@link Common.helper.DomHelper#function-createElement-static DomHelper#createElement()} for more information.
             * Please take care to not break the default configs :)
             *
             * Or as a template by returning HTML from the function:
             *
             * ```
             * new Scheduler({
             *   resourceColumns : {
             *     headerRenderer : ({ resourceRecord }) => `
             *       <div class="my-custom-template">
             *       ${resourceRecord.firstName} {resourceRecord.surname}
             *       </div>
             *     `
             *   }
             * });
             * ```
             *
             * NOTE: When using `headerRenderer` no default internal markup is applied to the resource header cell,
             * `iconCls` and `imageUrl` will have no effect unless you supply custom markup for them.
             *
             * @config {Function}
             * @param {Object} params Object containing the params below
             * @param {Scheduler.model.ResourceModel} resourceRecord Resource whose header is being rendered
             * @param {Object} elementConfig A {@link Common.helper.DomHelper#function-createElement-static} config object used to create the element for the resource
             */headerRenderer:null,/**
             * Automatically resize resource columns to **fill** available width. Set to `false` to always respect the
             * configured `columnWidth`
             * @config {Boolean}
             * @default
             */fillWidth:true,/**
             * Automatically resize resource columns to always **fit** available width
             * @config {Boolean}
             * @default
             */fitWidth:false,// Copied from Scheduler#resourceImagePath on creation in TimeAxisColumn.js
imagePath:null,// Copied from Scheduler#resourceImagePath on creation in TimeAxisColumn.js
defaultImageName:null};}},{key:"properties",get:function get(){return{firstResource:-1,lastResource:-1};}}]);return ResourceHeader;}(Widget);ResourceHeader._$name='ResourceHeader';/**
 * @module Scheduler/column/TimeAxisColumn
 */ /**
 * A column containing the timeline "viewport", in which events, dependencies etc are drawn. Normally you do not need
 * to interact with or create this column, it is handled by Scheduler/Gantt.
 *
 * @extends Grid/column/Column
 */var TimeAxisColumn=/*#__PURE__*/function(_Events9){_inherits2(TimeAxisColumn,_Events9);// region Events
/**
     * Fires after a click on a time axis cell
     * @event timeAxisHeaderClick
     * @param {Scheduler.column.TimeAxisColumn} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Event} event The event object
     */ /**
     * Fires after a double click on a time axis cell
     * @event timeAxisHeaderDblClick
     * @param {Scheduler.column.TimeAxisColumn} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The end date of the header cell
     * @param {Event} event The event object
     */ /**
     * Fires after a right click on a time axis cell
     * @event timeAxisHeaderContextMenu
     * @param {Scheduler.column.TimeAxisColumn} column The column object
     * @param {Date} startDate The start date of the header cell
     * @param {Date} endDate The start date of the header cell
     * @param {Event} event The event object
     */ //endregion
//region Init
function TimeAxisColumn(data,store){var _this71;_classCallCheck2(this,TimeAxisColumn);_this71=_possibleConstructorReturn2(this,_getPrototypeOf2(TimeAxisColumn).apply(this,arguments));var me=_assertThisInitialized2(_this71);me.initialRender=true;me.thisObj=me;me.timeAxisViewModel=me.timeline.timeAxisViewModel;// A bit hacky, because mode is a field and not a config
// eslint-disable-next-line no-self-assign
me.mode=me.mode;return _this71;}_createClass2(TimeAxisColumn,[{key:"onViewModelUpdate",//endregion
//region Events
value:function onViewModelUpdate(_ref270){var viewModel=_ref270.source;var me=this;if(me.mode==='horizontal'){// render the time axis view into the column header element
me.refreshHeader(true);me.width=viewModel.totalSize;if(!me.isPainting){me.timeline.refresh();}}else if(me.mode==='vertical'){if(!me.isPainting){// Refresh to rerender cells, in the process updating the vertical timeaxis to reflect view model changes
me.timeline.refreshRows();}}}// Called on paint. SubGrid has its width so this is the earliest time to configure the TimeAxisViewModel with
// correct width
},{key:"onTimelinePaint",value:function onTimelinePaint(){var me=this;if(!me.subGrid.insertRowsBefore){return;}me.isPainting=true;me.timeAxisViewModel.on({update:me.onViewModelUpdate,thisObj:me});// Upon paint we need to pass the forceUpdate flag in case we are sharing the TimAxisViewModel
// with another Timeline which will already have done this.
if(BrowserHelper.isIE11){// subGrid in IE11 doesn't have height at this point, but container element does so we take it from there
// TODO: make flex element inherit height from parent (min-height: 100% doesn't work)
me.timeAxisViewModel.update(me.mode==='vertical'?me.subGrid.element.parentElement.offsetHeight:me.subGrid.width,false,true);}else{me.timeAxisViewModel.update(me.mode==='vertical'?me.subGrid.height:me.subGrid.width,false,true);}me.subGridElement.classList.add('b-timeline-subgrid');EventHelper.on({element:me.element,thisObj:me,click:'onContainerElementClick',dblclick:'onContainerElementClick',contextmenu:'onContainerElementClick'});if(me.mode==='vertical'){me.refreshHeader();}me.isPainting=false;}//endregion
//region Rendering
/**
     * Refreshes the columns header contents (which is either a HorizontalTimeAxis or a ResourceHeader). Useful if you
     * have rendered some extra meta data that depends on external data such as the EventStore or ResourceStore.
     */},{key:"refreshHeader",value:function refreshHeader(internal){var me=this,element=me.element;if(element){if(me.mode==='horizontal'){// Force timeAxisViewModel to regenerate its column config, which calls header renderers etc.
!internal&&me.timeAxisViewModel.update(null,true);me.timeAxisView.renderTo(element);}else if(me.mode==='vertical'){if(!me.resourceColumns.currentElement){// Do not need the normal header markup
element.innerHTML='';me.resourceColumns.render(element);}// Vertical's resourceColumns is redrawn with the events, no need here
}}}},{key:"renderer",value:function renderer(renderData){return this.timeline.currentOrientation.renderer(renderData);}//endregion
// region DOM events
},{key:"onContainerElementClick",value:function onContainerElementClick(event){var target=event.target;if(target.matches('.b-sch-header-timeaxis-cell')){var index=Array.from(target.parentElement.children).indexOf(target),position=target.parentElement.getAttribute('headerPosition'),headerConfig=this.timeAxisViewModel.columnConfig[position][index];// Skip same events with Grid context menu triggerEvent
var contextMenu=this.grid.features.contextMenu;if(!contextMenu||event.type!==contextMenu.triggerEvent){this.trigger('timeAxisHeader'+StringHelper.capitalizeFirstLetter(event.type),{startDate:headerConfig.start,endDate:headerConfig.end,event:event});}}}// endregion
},{key:"mode",set:function set(mode){var me=this,timeline=me.timeline;me.set('mode',mode);// In horizontal mode this column has a time axis header on top, with timeline ticks
if(mode==='horizontal'){me.timeAxisView=new HorizontalTimeAxis({model:me.timeAxisViewModel,timeAxis:timeline.timeAxis,compactCellWidthThreshold:me.compactCellWidthThreshold});}// In vertical mode, it instead displays resources at top
else if(mode==='vertical'){// TODO: Most other vertical stuff is handled in VerticalEventMapper, move there?
me.resourceColumns=new ResourceHeader(Object.assign({column:me,resourceStore:timeline.resourceStore,imagePath:timeline.resourceImagePath,defaultImageName:timeline.defaultResourceImageName},timeline.resourceColumns||{}));}},get:function get(){return this.get('mode');}// TODO: define all configs as fields and set below to false...
/**
     * Get the SubGrid to which this column belongs
     * @property {Grid.view.SubGrid}
     * @private
     */},{key:"subGrid",set:function set(subGrid){var me=this;me._subGrid=subGrid;subGrid.on({paint:me.onTimelinePaint,thisObj:me,once:true});},get:function get(){return this._subGrid;}/**
     * Get the element for the SubGrid to which this column belongs
     * @property {HTMLElement}
     * @readonly
     * @private
     */},{key:"subGridElement",get:function get(){return this.subGrid.element;}}],[{key:"autoExposeFields",get:function get(){return true;}// endregion
//region Config
},{key:"fields",get:function get(){return['mode'];}},{key:"defaults",get:function get(){return{/**
             * Set to false to prevent this column header from being dragged.
             * @config {Boolean} draggable
             * @category Interaction
             * @default false
             */draggable:false,/**
             * Set to false to prevent grouping by this column.
             * @config {Boolean} groupable
             * @category Interaction
             * @default false
             */groupable:false,/**
             * Allow column visibility to be toggled through UI.
             * @config {Boolean} hideable
             * @default false
             * @category Interaction
             */hideable:false,/**
             * Show column picker for the column.
             * @config {Boolean} showColumnPicker
             * @default false
             * @category Menu
             */showColumnPicker:false,/**
             * Allow filtering data in the column (if Filter feature is enabled)
             * @config {Boolean} filterable
             * @default false
             * @category Interaction
             */filterable:false,/**
             * Allow sorting of data in the column
             * @config {Boolean} sortable
             * @category Interaction
             * @default false
             */sortable:false,/**
             * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
             * @config {Boolean} resizable
             * @default false
             * @category Interaction
             */resizable:false,/**
             * Allow searching in the column (respected by QuickFind and Search features)
             * @config {Boolean} searchable
             * @default false
             * @category Interaction
             */searchable:false,/**
             * Specifies if this column should be editable, and define which editor to use for editing cells in the column (if CellEdit feature is enabled)
             * @config {String} editor
             * @default false
             * @category Interaction
             */editor:false,/**
             * false to prevent showing a context menu on the cell elements in this column
             * @config {Boolean} enableCellContextMenu
             * @default false
             * @category Menu
             */enableCellContextMenu:false,/**
             * Renderer function for cell tooltips header (used with CellTooltip feature). Specify false to prevent
             * tooltip for that column.
             * @param {HTMLElement} cellElement Cell element
             * @param {Common.data.Model} record Record for cell row
             * @param {Grid.column.Column} column Cell column
             * @param {CellTooltip} cellTooltip Feature instance, used to set tooltip content async
             * @param {MouseEvent} event The event that triggered the tooltip
             * @config {Function} tooltipRenderer
             * @category Rendering
             * @default false
             */tooltipRenderer:false,/**
             * CSS class added to the header of this column
             * @config {String} cls
             * @category Rendering
             * @default 'b-sch-timeaxiscolumn'
             */cls:'b-sch-timeaxiscolumn',// needs to have width specified, flex-basis messes measurements up
needWidth:true,mode:null,region:'normal'};}},{key:"type",get:function get(){return'timeAxis';}}]);return TimeAxisColumn;}(Events(Column));exports.TimeAxisColumn=TimeAxisColumn;ColumnStore.registerColumnType(TimeAxisColumn);TimeAxisColumn._$name='TimeAxisColumn';/**
 * @module Scheduler/column/ResourceInfoColumn
 */ /**
 * Displays resource information. Defaults to showing image + name + event count, but what to show is configurable.
 * Be sure to specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath} to instruct the
 * column where to look for the images.
 * @externalexample scheduler/ResourceInfoColumn.js
 * @classType resourceInfo
 * @extends Grid/column/Column
 */var ResourceInfoColumn=/*#__PURE__*/function(_Column9){_inherits2(ResourceInfoColumn,_Column9);function ResourceInfoColumn(){_classCallCheck2(this,ResourceInfoColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceInfoColumn).apply(this,arguments));}_createClass2(ResourceInfoColumn,[{key:"construct",value:function construct(){var me=this;_get2(_getPrototypeOf2(ResourceInfoColumn.prototype),"construct",this).apply(this,arguments);if(me.grid.element){me.addErrorListener();}else{me.grid.on({paint:me.addErrorListener,thisObj:me,once:true});}}},{key:"addErrorListener",value:function addErrorListener(){var missingImgUrl="".concat(this.imagePath).concat(this.defaultImageName);EventHelper.on({element:this.grid.element,delegate:'.b-resource-image',error:function error(event){return event.target.src=missingImgUrl;},capture:true});}},{key:"template",value:function template(record){var me=this,showImage=me.showImage,showRole=me.showRole,showEventCount=me.showEventCount,roleField=typeof showRole==='string'?showRole:'role',role=record[roleField],count=record.events.length,value=record.get(me.field);var imageUrl;if(showImage){if(record.imageUrl){imageUrl=record.imageUrl;}else{// record.image supposed to be a file name, located at imagePath
var imageName=typeof showImage==='string'?showImage:record.image||value&&value.toLowerCase()||me.defaultImageName;imageUrl=me.imagePath+imageName;// Image name supposed to have an extension
if(!imageName.includes('.')){// If validNames is specified, check that imageName is valid
if(!me.validNames||me.validNames.includes(imageName)){imageUrl+='.jpg';}// If name is not valid, use generic image
else{imageUrl=me.imagePath+me.defaultImageName;}}}}return" \n            <div class=\"b-resource-info\">\n                ".concat(imageUrl?"<img class=\"b-resource-image\" draggable=\"false\" src=\"".concat(imageUrl,"\">"):'',"\n                <dl>\n                <dt>").concat(value,"</dt>\n                ").concat(showRole?"<dd class=\"b-resource-role\">".concat(role,"</dd>"):'',"\n                ").concat(showEventCount?"<dd class=\"b-resource-events\">".concat(me.L('eventCountText',count),"</dd>"):'',"\n                </dl>\n            </div>\n        ");}},{key:"renderer",value:function renderer(_ref271){var grid=_ref271.grid,record=_ref271.record,cellElement=_ref271.cellElement;if(record.meta.specialRow){return'';}if(this.autoScaleThreshold&&grid.rowHeight<this.autoScaleThreshold){cellElement.style.fontSize=grid.rowHeight/40+'em';}else{cellElement.style.fontSize='';}return this.template(record);}},{key:"imagePath",set:function set(path){this.set('imagePath',path);},get:function get(){return this.get('imagePath')||this.grid.resourceImagePath;}},{key:"defaultImageName",set:function set(name){this.set('defaultImageName',name);},get:function get(){return this.get('defaultImageName')||this.grid.defaultResourceImageName;}}],[{key:"type",get:function get(){return'resourceInfo';}},{key:"fields",get:function get(){return['showEventCount','showRole','showImage','imagePath','validNames','defaultImageName','autoScaleThreshold'];}},{key:"defaults",get:function get(){return{/**
             * Show image. Looks for image name in fields on the resource in the following order: 'imageUrl', 'image', 'name'.
             * Set `showImage` to a field name to use a custom field. Set `imagePath` to specify where to load
             * images from. If no extension found, defaults to .jpg.
             * @config {Boolean}
             * @default
             */showImage:true,/**
             * Show number of events assigned to the resource below the name.
             * @config {Boolean}
             * @default
             */showEventCount:true,/**
             * Show resource role below the name. Specify `true` to display data from the `role` field, or specify a field
             * name to read this value from.
             * @config {Boolean|String}
             * @default
             */showRole:false,/**
             * Path to load images from. Defaults to using the value of {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath}
             * @config {String}
             * @deprecated 2.2
             */imagePath:null,/**
             * Valid image names. Set to `null` to allow all names.
             * @config {String[]}
             * @default
             */validNames:['amit','angelo','arcady','arnold','celia','chang','dan','dave','emilia','george','gloria','henrik','hitomi','jong','kate','lee','linda','lisa','lola','macy','madison','malik','mark','maxim','mike','rob','steve'],/**
             * Generic user image, used when an invalid name is specified
             * @config {String}
             * @deprecated 2.2
             */defaultImageName:null,/**
             * Specify 0 to prevent the column from adapting its content according to the used row height, or specify a
             * a threshold (row height) at which scaling should start.
             * @config {Number}
             * @default
             */autoScaleThreshold:40,field:'name',htmlEncode:false,width:140,autoSyncHtml:true};}}]);return ResourceInfoColumn;}(Column);exports.ResourceInfoColumn=ResourceInfoColumn;ColumnStore.registerColumnType(ResourceInfoColumn);ResourceInfoColumn._$name='ResourceInfoColumn';/**
 * @module Scheduler/view/model/TimeAxisViewModel
 */ /**
 * This class is an internal view model class, describing the visual representation of a {@link Scheduler.data.TimeAxis}.
 * The config for the header rows is described in the {@link Scheduler.preset.ViewPreset#config-headerConfig headerConfig}.
 * To calculate the size of each cell in the time axis, this class requires:
 *
 * - availableSpace  - The total width or height available for the rendering
 * - tickSize       - The fixed width or height of each cell in the lowest header row. This value is normally read from the
 * {@link Scheduler.preset.ViewPreset viewPreset} but this can also be updated programmatically using the {@link #property-tickSize} setter
 *
 * Normally you should not interact with this class directly.
 *
 * @extends Common/mixin/Events
 */var TimeAxisViewModel=/*#__PURE__*/function(_Events10){_inherits2(TimeAxisViewModel,_Events10);function TimeAxisViewModel(){_classCallCheck2(this,TimeAxisViewModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimeAxisViewModel).apply(this,arguments));}_createClass2(TimeAxisViewModel,[{key:"construct",//endregion
//region Init & destroy
value:function construct(config){var me=this;// getSingleUnitInPixels results are memoized because of frequent calls during rendering.
me.unitToPixelsCache={};_get2(_getPrototypeOf2(TimeAxisViewModel.prototype),"construct",this).call(this,config);var viewPreset=me.timeAxis.viewPreset||me.viewPreset;if(viewPreset){if(viewPreset instanceof ViewPreset){me.consumeViewPreset(viewPreset);}else{var preset=PresetManager.getPreset(viewPreset);preset&&me.consumeViewPreset(preset);}}// When time axis is changed, reconfigure the model
me.timeAxis.on('reconfigure',me.onTimeAxisReconfigure,me);me.configured=true;}},{key:"doDestroy",value:function doDestroy(){this.timeAxis.un('reconfigure',this.onTimeAxisReconfigure,this);}/**
     * Returns a model object of the current timeAxis, containing an array representing the cells for each level in the header.
     * This object will always contain a 'middle' array, and depending on the {@link Scheduler.preset.ViewPreset#config-headerConfig} it can also contain a 'top' and 'bottom' property.
     * @return {Object} The model representing each cell (with start date and end date) in the timeline representation.
     * @internal
     */},{key:"reconfigure",//endregion
//region Reconfigure & update
value:function reconfigure(config){// clear the cached headers
var me=this;me._headers=null;Object.assign(me,config);me.trigger('reconfigure');}},{key:"onTimeAxisReconfigure",value:function onTimeAxisReconfigure(_ref272){var timeAxis=_ref272.source,suppressRefresh=_ref272.suppressRefresh;if(this.viewPreset!==timeAxis.viewPreset){this.consumeViewPreset(timeAxis.viewPreset);}if(!suppressRefresh){this.update();}}/**
     * Updates the view model current timeAxis configuration and available space.
     * @param {Number} [availableSpace] The available space for the rendering of the axis (used in forceFit mode)
     * @param {Boolean} [silent] Pass `true` to suppress the firing of the `update` event.
     * @param {Boolean} [forceUpdate] Pass `true` to fire the `update` event even if the size has not changed.
     * @internal
     */},{key:"update",value:function update(availableSpace){var silent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var forceUpdate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,timeAxis=me.timeAxis,headerConfig=me.headerConfig;// We're in configuration, or no change, quit
if(me.isConfiguring||me._availableSpace===availableSpace){if(forceUpdate){me.trigger('update');}return;}me._availableSpace=Math.max(availableSpace||me.availableSpace||0,0);if(typeof me.availableSpace!=='number'){throw new Error('Invalid available space provided to TimeAxisModel');}// Despite available space is 0, we still should generate column config in order for scheduler to render
if(me.availableSpace<=0){console.warn('No available space provided for time axis. Make sure you have set width for horizontal mode and height for vertical');}me.columnConfig={};// The "column width" is considered to be the width of each tick in the lowest header row and this width
// has to be same for all cells in the lowest row.
var tickSize=me._tickSize=me.calculateTickSize(me.originalTickSize);if(typeof tickSize!=='number'||tickSize<=0){throw new Error('Invalid timeAxis tick size');}// getSingleUnitInPixels results are memoized because of frequent calls during rendering.
me.unitToPixelsCache={};// totalSize is cached because of frequent calls which calculate it.
me._totalSize=null;// Generate the underlying date ranges for each header row, which will provide input to the cell rendering
for(var pos in headerConfig){if(headerConfig[pos].cellGenerator){me.columnConfig[pos]=headerConfig[pos].cellGenerator.call(me,timeAxis.startDate,timeAxis.endDate);}else{me.columnConfig[pos]=me.createHeaderRow(pos,headerConfig[pos]);}}if(!silent){me.trigger('update');}}//endregion
//region CalendarColumn
// /**
//  * Will update columns start/end dates to perform date/coordinate lookups
//  * @param {Object[]} columns Array of column configs including start/end dates
//  * @private
//  */
// updateCalendarColumnDates(columns) {
//     this.calendarColumnDates = [];
//
//     for (let i = 0; i < columns.length; i++) {
//         let obj = columns[i];
//         this.calendarColumnDates.push([obj.start, obj.end]);
//     }
// }
// // TODO: make getter
// /**
//  * Returns current column start/end dates array
//  * @returns {Date[]}
//  * @private
//  */
// getCalendarColumnDates() {
//     return this.calendarColumnDates;
// }
//endregion
//region Date / position mapping
/**
     * Returns the distance in pixels for a timespan with the given start and end date.
     * @param {Date} start start date
     * @param {Date} end end date
     * @return {Number} The length of the time span
     * @category Date mapping
     */},{key:"getDistanceBetweenDates",value:function getDistanceBetweenDates(start,end){return Math.round(this.getPositionFromDate(end)-this.getPositionFromDate(start));}/**
     * Returns the distance in pixels for a time span
     * @param {Number} durationMS Time span duration in ms
     * @return {Number} The length of the time span
     * @category Date mapping
     */},{key:"getDistanceForDuration",value:function getDistanceForDuration(durationMs){var me=this,tick=this.timeAxis.getAt(0),pxPerMs=me.tickSize/(tick.endDate-tick.startDate);return pxPerMs*durationMs;}/**
     * Gets the position of a date on the projected time axis or -1 if the date is not in the timeAxis.
     * @param {Date} date the date to query for.
     * @returns {Number} the coordinate representing the date
     * @category Date mapping
     */},{key:"getPositionFromDate",value:function getPositionFromDate(date){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this,tick=me.getScaledTick(date,options);if(tick===-1){return-1;}return Math.round(me.tickSize*(tick-me.timeAxis.visibleTickStart));}// Translates a tick along the time axis to facilitate scaling events when excluding certain days or hours
},{key:"getScaledTick",value:function getScaledTick(date,_ref273){var respectExclusion=_ref273.respectExclusion,snapToNextIncluded=_ref273.snapToNextIncluded,isEnd=_ref273.isEnd,min=_ref273.min,max=_ref273.max;var timeAxis=this.timeAxis,include=timeAxis.include,unit=timeAxis.unit,weekStartDay=timeAxis.weekStartDay;var tick=timeAxis.getTickFromDate(date);if(tick!==-1&&respectExclusion&&include){var tickChanged=false;// Stretch if we are using a larger unit than 'hour', except if it is 'day'. If so, it is already handled
// by a cheaper reconfiguration of the ticks in `generateTicks`
if(include.hour&&DateHelper.compareUnits(unit,'hour')>0&&unit!=='day'){var _include$hour=include.hour,from=_include$hour.from,to=_include$hour.to,lengthFactor=_include$hour.lengthFactor,center=_include$hour.center,originalHours=date.getHours(),croppedHours=Math.min(Math.max(originalHours,from),to);// If we are not asked to snap (when other part of span is not included) any cropped away hour
// should be considered excluded
if(!snapToNextIncluded&&croppedHours!==originalHours){return-1;}var// Should scale hour and smaller units (seconds will hardly affect visible result...)
fractionalHours=croppedHours+date.getMinutes()/60,// Number of hours from the center    |xxxx|123c----|xxx|
hoursFromCenter=center-fractionalHours,// Step from center to stretch event  |x|112233c----|xxx|
newHours=center-hoursFromCenter*lengthFactor;// Adding instead of setting to get a clone of the date, to not affect the original
date=DateHelper.add(date,newHours-originalHours,'h');tickChanged=true;}if(include.day&&DateHelper.compareUnits(unit,'day')>0){var _include$day=include.day,_from=_include$day.from,_to=_include$day.to,_lengthFactor=_include$day.lengthFactor,_center=_include$day.center;//region Crop
var checkDay=date.getDay();// End date is exclusive, check the day before if at 00:00
if(isEnd&&date.getHours()===0&&date.getMinutes()===0&&date.getSeconds()===0&&date.getMilliseconds()===0){if(--checkDay<0){checkDay=6;}}var addDays=0;if(checkDay<_from||checkDay>=_to){// If end date is in view but start date is excluded, snap to next included day
if(snapToNextIncluded){// Step back to "to-1" (not inclusive) for end date
if(isEnd){addDays=(_to-checkDay-8)%7;}// Step forward to "from" for start date
else{addDays=(_from-checkDay+7)%7;}date=DateHelper.add(date,addDays,'d');date=DateHelper.startOf(date,'d',false);// Keep end after start and vice versa
if(max&&date.getTime()>=max||min&&date.getTime()<=min){return-1;}}else{// day excluded at not snapping to next
return-1;}}//endregion
var// Center to stretch around, for some reason pre-calculated cannot be used for sundays :)
fixedCenter=date.getDay()===0?0:_center,// Should scale day and smaller units (minutes will hardly affect visible result...)
fractionalDay=date.getDay()+date.getHours()/24,//+ dateClone.getMinutes() / (24 * 1440),
// Number of days from the calculated center
daysFromCenter=fixedCenter-fractionalDay,// Step from center to stretch event
newDay=fixedCenter-daysFromCenter*_lengthFactor;// Adding instead of setting to get a clone of the date, to not affect the original
date=DateHelper.add(date,newDay-fractionalDay+weekStartDay,'d');tickChanged=true;}// Now the date might start somewhere else (fraction of ticks)
if(tickChanged){// When stretching date might end up outside of time axis, making it invalid to use. Clip it to time axis
// to circumvent this
date=DateHelper.constrain(date,timeAxis.startDate,timeAxis.endDate);// Get a new tick based on the "scaled" date
tick=timeAxis.getTickFromDate(date);}}return tick;}/**
     * Gets the date for a position on the time axis
     * @param {Number} position The page X or Y coordinate
     * @param {String} [roundingMethod] The rounding method to use
     * @returns {Date} the Date corresponding to the xy coordinate
     * @category Date mapping
     */},{key:"getDateFromPosition",value:function getDateFromPosition(position,roundingMethod){var me=this,timeAxis=me.timeAxis,tick=me.getScaledPosition(position)/me.tickSize+timeAxis.visibleTickStart;if(tick<0||tick>timeAxis.count){return null;}return timeAxis.getDateFromTick(tick,roundingMethod);}// Translates a position along the time axis to facilitate scaling events when excluding certain days or hours
},{key:"getScaledPosition",value:function getScaledPosition(position){var _this$timeAxis=this.timeAxis,include=_this$timeAxis.include,unit=_this$timeAxis.unit,weekStartDay=_this$timeAxis.weekStartDay;// Calculations are
if(include){var dayWidth=this.getSingleUnitInPixels('day');// Have to calculate day before hour to get end result correct
if(include.day&&DateHelper.compareUnits(unit,'day')>0){var _include$day2=include.day,from=_include$day2.from,lengthFactor=_include$day2.lengthFactor,positionInWeek=position%(dayWidth*7),weekStartPosition=position-positionInWeek;// Scale position using calculated length per day factor, adding the width of excluded days
position=positionInWeek/lengthFactor+(from-weekStartDay)*dayWidth+weekStartPosition;}// Hours are not taken into account when viewing days, since the day ticks are reconfigured in
// `generateTicks` instead
if(include.hour&&DateHelper.compareUnits(unit,'hour')>0&&unit!=='day'){var _include$hour2=include.hour,_from2=_include$hour2.from,lengthFactorExcl=_include$hour2.lengthFactorExcl,hourWidth=this.getSingleUnitInPixels('hour'),positionInDay=position%dayWidth,dayStartPosition=position-positionInDay;// Scale position using calculated length per day factor, adding the width of excluded hours
position=positionInDay/lengthFactorExcl+_from2*hourWidth+dayStartPosition;}}return position;}/**
     * Returns the amount of pixels for a single unit
     * @internal
     * @return {Number} The unit in pixel
     */},{key:"getSingleUnitInPixels",value:function getSingleUnitInPixels(unit){var me=this;return me.unitToPixelsCache[unit]||(me.unitToPixelsCache[unit]=DateHelper.getUnitToBaseUnitRatio(me.timeAxis.unit,unit,true)*me.tickSize/me.timeAxis.increment);}/**
     * [Experimental] Returns the pixel increment for the current view resolution.
     * @internal
     * @return {Number} The increment
     */},{key:"setTickSize",value:function setTickSize(size,suppressEvent){this._tickSize=this.originalTickSize=size;this.update(undefined,suppressEvent);}},{key:"calculateTickSize",// Calculates the time column width/height based on the value defined viewPreset "tickWidth/tickHeight". It also
// checks for the forceFit view option and the snap, both of which impose constraints on the time column width
// configuration.
value:function calculateTickSize(proposedSize){var me=this,forceFit=me.forceFit,timeAxis=me.timeAxis,timelineUnit=timeAxis.unit;var size=0,ratio=1;//Number.MAX_VALUE;
if(me.snap){var resolution=timeAxis.resolution;ratio=DateHelper.getUnitToBaseUnitRatio(timelineUnit,resolution.unit)*resolution.increment;}// else {
//     const measuringUnit = DH.getMeasuringUnit(timelineUnit);
//     Math.min(ratio, DH.getUnitToBaseUnitRatio(timelineUnit, measuringUnit));
// }
if(!me.suppressFit){var ticks=timeAxis.visibleTickTimeSpan,// TODO: change this to always floor if we want to prevent scheduler scroll when not really needed
fittingSize=Math[forceFit?'floor':'round'](me.availableSpace/ticks);size=forceFit||proposedSize<fittingSize?fittingSize:proposedSize;if(ratio>0&&(!forceFit||ratio<1)){// For touch, make sure we always fill the available space with forceFit (to not show edges of side-time-pickers)
var method=forceFit?'floor':'round';size=Math.round(Math.max(1,Math[method](ratio*size))/ratio);}}else{size=proposedSize;}return size;}/**
     * Returns the total width/height of the time axis representation, depending on mode.
     * @return {Number} The width or height
     * @internal
     * @readonly
     */},{key:"getDates",//endregion
//region Fitting & snapping
/**
     * Returns start dates for ticks at the specified level in format { date, isMajor }.
     * @param {String} level Level in headerConfig (top, bottom, middle)
     * @param {Boolean} useLowestHeader Use lowest level
     * @param getEnd
     * @returns {Array}
     * @internal
     */value:function getDates(){var level=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.columnLinesFor;var useLowestHeader=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var getEnd=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,ticks=[],linesForLevel=useLowestHeader?me.lowestHeader:level,majorLevel=me.majorHeaderName,levelUnit=me.headerConfig&&me.headerConfig[level].unit,majorUnit=majorLevel&&me.headerConfig&&me.headerConfig[majorLevel].unit,validMajor=majorLevel&&DateHelper.doesUnitsAlign(majorUnit,levelUnit),hasGenerator=!!(me.headerConfig&&me.headerConfig[linesForLevel].cellGenerator);if(hasGenerator){var cells=me.columnConfig[linesForLevel];for(var i=1,l=cells.length;i<l;i++){ticks.push({date:cells[i].startDate});}}else{me.forEachInterval(linesForLevel,function(start,end){ticks.push({date:getEnd?end:start,// do not want to consider tick to be major tick, hence the check for majorHeaderName
isMajor:majorLevel!==level&&validMajor&&me.isMajorTick(getEnd?end:start)});});}return ticks;}},{key:"fitToAvailableSpace",/**
     * This function fits the time columns into the available space in the time axis column.
     * @param {Boolean} suppressEvent `true` to skip firing the 'update' event.
     * @internal
     */value:function fitToAvailableSpace(suppressEvent){var proposedSize=Math.floor(this.availableSpace/this.timeAxis.visibleTickTimeSpan);this.setTickSize(proposedSize,suppressEvent);}},{key:"createHeaderRow",//endregion
//region Headers
// private
value:function createHeaderRow(position,headerRowConfig){var _this72=this;var me=this,cells=[],align=headerRowConfig.align,today=DateHelper.clearTime(new Date()),headerCellCls=headerRowConfig.headerCellCls||'';var size=0;me.headersDatesCache[position]={};me.forEachInterval(position,function(start,end,i){var value=DateHelper.format(start,headerRowConfig.dateFormat),cellData={align:align,start:start,end:end,value:value,headerCellCls:headerCellCls,width:_this72.getDistanceBetweenDates(start,end),index:i};if(cellData.width===0){return;}// Vertical mode uses absolute positioning for header cells
cellData.coord=size;size+=cellData.width;me.headersDatesCache[position][start.getTime()]=1;if(headerRowConfig.renderer){value=headerRowConfig.renderer.call(headerRowConfig.thisObj||me,start,end,cellData,i,me.eventStore);cellData.value=value==null?'':value;}// To be able to style individual day cells, weekends or other important days
if(headerRowConfig.unit==='day'&&(!headerRowConfig.increment||headerRowConfig.increment===1)){cellData.headerCellCls+=' b-sch-dayheadercell-'+start.getDay();if(me.calendar&&me.calendar.isWeekend(start)){cellData.headerCellCls+=' b-sch-dayheadercell-nonworking';}if(DateHelper.clearTime(start,true)-today===0){cellData.headerCellCls+=' b-sch-dayheadercell-today';}}cells.push(cellData);});return cells;}},{key:"isMajorTick",//endregion
//region Ticks
/**
     * For vertical view (and column lines plugin) we sometimes want to know if current tick starts along with the
     * upper header level.
     * @param {Date} date
     * @return {Boolean}
     * @private
     */value:function isMajorTick(date){var nextLevel=this.majorHeaderName;// if forceFit is used headersDatesCache won´t have been generated yet on the first call here,
// since no size is set yet
return nextLevel&&this.headersDatesCache[nextLevel]&&this.headersDatesCache[nextLevel][date.getTime()]||false;}/**
     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
     * Return false to break the iteration.
     * @param {String} position 'main' (middle), 'top' or 'bottom'
     * @param {Function} iteratorFn The function to call, will be called with start date, end date and "tick index"
     * @param {Object} [thisObj] `this` reference for the function
     * @internal
     */},{key:"forEachInterval",value:function forEachInterval(position,iteratorFn){var thisObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this;var headerConfig=this.headerConfig;if(!headerConfig)return;// Not initialized
if(position==='top'||position==='middle'&&headerConfig.bottom){var header=headerConfig[position];this.timeAxis.forEachAuxInterval(header.unit,header.increment,iteratorFn,thisObj);}else{// This is the lowest header row, which should be fed the data in the tickStore (or a row above using same unit)
this.timeAxis.forEach(function(r,index){return iteratorFn.call(thisObj,r.startDate,r.endDate,index);});}}/**
     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.
     * Return false to break the iteration.
     * @internal
     * @param {Function} iteratorFn The function to call
     * @param {Object} [thisObj] `this` reference for the function
     */},{key:"forEachMainInterval",value:function forEachMainInterval(iteratorFn,thisObj){this.forEachInterval('middle',iteratorFn,thisObj);}//endregion
//region ViewPreset
},{key:"consumeViewPreset",value:function consumeViewPreset(preset){var me=this;// clear the cached headers
me._headers=null;me._thisIsAUsedExpression(me.tickSize);// Since we are bypassing the tickSize setter below, ensure that
// the config initial setter has been removed by referencing the property.
// We only do this to avoid multiple updates from this. TODO: Fix this issue,
// and do not bypass setters.
me._viewPreset=preset;Object.assign(me,{headerConfig:preset.headerConfig,columnLinesFor:preset.columnLinesFor||'middle',_tickSize:me.isHorizontal?preset.tickWidth:preset.tickHeight});me.originalTickSize=me.tickSize;}//endregion
// //region Calendar
//
// setCalendar(cal) {
//     if (cal !== this.calendar) {
//         this.calendar = cal;
//
//         if (cal) {
//             this.update();
//         }
//     }
// }
//
// //endregion
},{key:"columnConfig",get:function get(){return this._columnConfig;},set:function set(config){this._columnConfig=config;}//endregion
//region Events
/**
     * Fires after the model has been updated.
     * @event update
     * @param {Scheduler.view.model.TimeAxisViewModel} source The model instance
     */ /**
     * Fires after the model has been reconfigured.
     * @event reconfigure
     * @param {Scheduler.view.model.TimeAxisViewModel} source The model instance
     */ //endregion
//region Mode
/**
     * Using horizontal mode?
     * @returns {Boolean}
     * @readonly
     * @internal
     */},{key:"isHorizontal",get:function get(){return this.mode!=='vertical';}/**
     * Using vertical mode?
     * @returns {Boolean}
     * @readonly
     * @internal
     */},{key:"isVertical",get:function get(){return this.mode==='vertical';}/**
     * Gets/sets the forceFit value for the model. Setting it will cause it to update its contents and fire the
     * {@link #event-update} event.
     * @property {Boolean}
     * @internal
     */},{key:"forceFit",set:function set(value){if(value!==this._forceFit){this._forceFit=value;this.update();}},get:function get(){return this._forceFit;}},{key:"snapPixelAmount",get:function get(){if(this.snap){var resolution=this.timeAxis.resolution;return(resolution.increment||1)*this.getSingleUnitInPixels(resolution.unit);}else{return 1;}}//endregion
//region Sizes
/**
     * Get/set the current time column size (the width or height of a cell in the bottom-most time axis header row,
     * depending on mode)
     * @internal
     * @property {Number}
     */},{key:"tickSize",get:function get(){return this._tickSize;},set:function set(size){this.setTickSize(size,false);}},{key:"timeResolution",get:function get(){return this.timeAxis.resolution;}},{key:"totalSize",get:function get(){return this._totalSize||(this._totalSize=Math.round(this.tickSize*this.timeAxis.visibleTickTimeSpan));}/**
     * Get/set the available space for the time axis representation. If size changes it will cause it to update its
     * contents and fire the {@link #event-update} event.
     * @internal
     * @property {Number}
     */},{key:"availableSpace",get:function get(){return this._availableSpace;},set:function set(space){var me=this;// We should only need to repaint fully if the tick width has changed (which will happen if forceFit is set, or if the full size of the time axis doesn't
// occupy the available space - and gets stretched
me._availableSpace=Math.max(0,space);if(me._availableSpace>0){var newTickSize=me.calculateTickSize(me.originalTickSize);if(newTickSize>0&&newTickSize!==me.tickSize){me.update();}}}},{key:"snap",get:function get(){return this._snap;}/**
     * Gets/sets the snap value for the model. Setting it will cause it to update its contents and fire the
     * {@link #event-update} event.
     * @property {Boolean}
     * @internal
     */,set:function set(value){if(value!==this._snap){this._snap=value;if(this.configured)this.update();}}},{key:"headers",get:function get(){var me=this;if(!me._headers){var headers=me._headers=[],_me$headerConfig2=me.headerConfig,top=_me$headerConfig2.top,middle=_me$headerConfig2.middle,bottom=_me$headerConfig2.bottom;top&&headers.push(top);middle&&headers.push(middle);bottom&&headers.push(bottom);}return me._headers;}},{key:"mainHeader",get:function get(){// main header is always `middle` (which is always requires to present in `headerConfig`)
return this.headerConfig.middle;}},{key:"bottomHeader",get:function get(){return this.headers[this.headers.length-1];}},{key:"lowestHeader",get:function get(){return'bottom'in this.headerConfig?'bottom':'middle';}/**
     * This method is meant to return name of the header which 2nd lowest. It is used for {@link #function-isMajorTick} method
     * @return {String}
     * @private
     */},{key:"majorHeaderName",get:function get(){var headerConfig=this.headerConfig;// If there's a bottom header - return middle one as it's required
if(headerConfig.bottom){return'middle';}// if there is a top header - return that, because middle is required and we do not have bottom for sure
if(headerConfig.top){return'top';}return null;}}],[{key:"defaultConfig",//region Default config
// TODO: replace _availableSpace etc with availableSpace in config and make setters work during config phase
get:function get(){return{/**
             * The time axis providing the underlying data to be visualized
             * @config {Scheduler.data.TimeAxis}
             * @internal
             */timeAxis:null,/**
             * The available width/height, this is normally not known by the consuming UI component using this model
             * class until it has been fully rendered. The consumer of this model should set
             * {@link #property-availableSpace} when its width has changed.
             * @config {Number}
             * @internal
             */availableSpace:null,/**
             * The "tick width" for horizontal mode or "tick height" for vertical mode, to use for the cells in the
             * bottom most header row.
             * This value is normally read from the {@link Scheduler.preset.ViewPreset viewPreset}
             * @config {Number}
             * @default
             * @internal
             */tickSize:100,/**
             * true if there is a requirement to be able to snap events to a certain view resolution.
             * This has implications of the {@link #config-tickSize} that can be used, since all widths must be in even pixels.
             * @config {Boolean}
             * @default
             * @internal
             */snap:false,/**
             * true if cells in the bottom-most row should be fitted to the {@link #property-availableSpace available space}.
             * @config {Boolean}
             * @default
             * @internal
             */forceFit:false,headerConfig:null,calendar:null,mode:'horizontal',// or 'vertical'
//used for Exporting. Make sure the tick columns are not recalculated when resizing.
suppressFit:false,// cache of the config currently used.
columnConfig:{},// the view preset name to apply initially
viewPreset:null,// The default header level to draw column lines for
columnLinesFor:'middle',// To give a link to the eventStore inside the header renderer if provided
eventStore:null,originalTickSize:null,headersDatesCache:{}};}}]);return TimeAxisViewModel;}(Events());exports.TimeAxisViewModel=TimeAxisViewModel;TimeAxisViewModel._$name='TimeAxisViewModel';/**
 * @module Scheduler/view/Header
 */ /**
 * Custom header subclass which handles the existence of the special TimeAxisColumn
 *
 * @extends Grid/view/Header
 * @private
 */var Header$1=/*#__PURE__*/function(_Header){_inherits2(Header$1,_Header);function Header$1(){_classCallCheck2(this,Header$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(Header$1).apply(this,arguments));}_createClass2(Header$1,[{key:"refreshContent",value:function refreshContent(){// Only render contents into the header once as it contains the special rendering of the TimeAxisColumn
if(this.headersElement&&this.headersElement.childNodes.length===0){_get2(_getPrototypeOf2(Header$1.prototype),"refreshContent",this).call(this);}}}]);return Header$1;}(Header);Header$1._$name='Header';// Used to avoid having to create huge amounts of Date objects
var tempDate=new Date();/**
 * @module Scheduler/view/mixin/TimelineDateMapper
 */ /**
 * Mixin that contains functionality to convert between coordinates and dates etc.
 *
 * @mixin
 */var TimelineDateMapper=function TimelineDateMapper(Target){return(/*#__PURE__*/function(_ref274){_inherits2(TimelineDateMapper,_ref274);function TimelineDateMapper(){_classCallCheck2(this,TimelineDateMapper);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineDateMapper).apply(this,arguments));}_createClass2(TimelineDateMapper,[{key:"getDateFromCoordinate",//region Coordinate <-> Date
/**
     * Gets the date for an X or Y coordinate, either local to the view element or the page based on the 3rd argument.
     * @param {Number} coordinate The X or Y coordinate
     * @param {String} [roundingMethod] The rounding method to use
     * @param {Boolean} [local], true if the coordinate is local to the scheduler view element
     * @returns {Date} the Date corresponding to the xy coordinate
     * @category Dates
     */value:function getDateFromCoordinate(coordinate,roundingMethod){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!local){coordinate=this.currentOrientation.translateToScheduleCoordinate(coordinate);}return this.timeAxisViewModel.getDateFromPosition(coordinate,roundingMethod);}/**
     * Gets the date for the passed X coordinate.
     * If the coordinate is not in the currently rendered view, -1 will be returned.
     * @param {Number} x The X coordinate
     * @param {String} roundingMethod The rounding method to use
     * @returns {Date} the Date corresponding to the x coordinate
     * @param {Boolean} [local] true if the coordinate is local to the scheduler element
     * @category Dates
     */},{key:"getDateFromX",value:function getDateFromX(x,roundingMethod){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return this.getDateFromCoordinate(x,roundingMethod,local);}/**
     * Gets the date for an XY coordinate
     * @param {Array} xy The page X and Y coordinates
     * @param {String} [roundingMethod] Optional, 'floor' to floor the value or 'round' to round the value to nearest increment
     * @param {Boolean} [local] true if the coordinate is local to the scheduler element
     * @returns {Date} the Date corresponding to the xy coordinate
     * @category Dates
     */},{key:"getDateFromXY",value:function getDateFromXY(xy,roundingMethod){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return this.currentOrientation.getDateFromXY(xy,roundingMethod,local);}//endregion
//region Date display
/**
     * Get/set format to use when displaying dates. Usually set by specifying a view preset
     * @property {String}
     * @category Dates
     */},{key:"getFormattedDate",/**
     * Method to get a formatted display date
     * @private
     * @param {Date} date The date
     * @return {String} The formatted date
     */value:function getFormattedDate(date){return DateHelper.format(date,this.displayDateFormat);}/**
     * Method to get a displayed end date value, see {@link #function-getFormattedEndDate} for more info.
     * @private
     * @param {Date} endDate The date to format
     * @param {Date} startDate The start date
     * @return {Date} The date value to display
     */},{key:"getDisplayEndDate",value:function getDisplayEndDate(endDate,startDate){var format=this.displayDateFormat,stripEscapeRe=/(\\.)/g,hourInfoRe=/([gGhHisucUOPZ]|MS)/;// TODO: PORT!
if(// If time is midnight,
endDate.getHours()===0&&endDate.getMinutes()===0&&(// and end date is greater then start date
!startDate||!(endDate.getYear()===startDate.getYear()&&endDate.getMonth()===startDate.getMonth()&&endDate.getDate()===startDate.getDate()))&&// and UI display format doesn't contain hour info (in this case we'll just display the exact date)
!hourInfoRe.test(format.replace(stripEscapeRe,''))){// format the date inclusively as 'the whole previous day'.
endDate=DateHelper.add(endDate,-1,'day');}return endDate;}/**
     * Method to get a formatted end date for a scheduled event, the grid uses the "displayDateFormat" property defined in the current view preset.
     * End dates are formatted as 'inclusive', meaning when an end date falls on midnight and the date format doesn't involve any hour/minute information,
     * 1ms will be subtracted (e.g. 2010-01-08T00:00:00 will first be modified to 2010-01-07 before being formatted).
     * @private
     * @param {Date} endDate The date to format
     * @param {Date} startDate The start date
     * @return {String} The formatted date
     */},{key:"getFormattedEndDate",value:function getFormattedEndDate(endDate,startDate){return this.getFormattedDate(this.getDisplayEndDate(endDate,startDate));}//endregion
//region Other date functions
/**
     * Gets the x or y coordinate relative to the scheduler element, or page coordinate (based on the 'local' flag)
     * If the coordinate is not in the currently rendered view, -1 will be returned.
     * @param {Date|Number} date the date to query for (or a date as ms)
     * @param {Boolean|Object} options true to return a coordinate local to the scheduler view element (defaults to true),
     * also accepts a config object like { local : true }.
     * @returns {Number} the x or y position representing the date on the time axis
     * @category Dates
     */},{key:"getCoordinateFromDate",value:function getCoordinateFromDate(date){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,timeAxisViewModel=me.timeAxisViewModel,_me$timeAxis=me.timeAxis,isContinuous=_me$timeAxis.isContinuous,startMS=_me$timeAxis.startMS,endMS=_me$timeAxis.endMS,startDate=_me$timeAxis.startDate,unit=_me$timeAxis.unit,dateMS=date.valueOf();// Avoiding to break the API while allowing passing options through to getPositionFromDate()
if(options===true){options={local:true};}else if(!options){options={local:false};}else if(!('local'in options)){options.local=true;}var pos;// TODO for 2.0 try to normalize and just use dates as input for this method,
// then this if-statement would not be needed
if(!(date instanceof Date)){tempDate.setTime(date);date=tempDate;}// Shortcut for continuous time axis that is using a unit that can be reliably translated to days (or smaller)
if(isContinuous&&date.getTimezoneOffset()===startDate.getTimezoneOffset()&&DateHelper.getUnitToBaseUnitRatio(unit,'day')!==-1){if(dateMS<startMS||dateMS>endMS){return-1;}pos=Math.round((dateMS-startMS)/(endMS-startMS)*timeAxisViewModel.totalSize);}// Non-continuous or using for example months (vary in length)
else{pos=timeAxisViewModel.getPositionFromDate(date,options);}if(!options.local){pos=me.currentOrientation.translateToPageCoordinate(pos);}return pos;}/**
     * Gets the time for a DOM event such as 'mousemove' or 'click'
     * @param {Event} e the Event instance
     * @param {String} [roundingMethod] Optional, 'floor' to floor the value or 'round' to round the value to nearest increment
     * @param {Boolean} [local], true if the event is local to the scheduler element
     * @returns {Date} The date corresponding to the EventObject x coordinate
     * @category Dates
     */},{key:"getDateFromDomEvent",value:function getDateFromDomEvent(e,roundingMethod){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var x=local?e.offsetX:e.x,y=local?e.offsetY:e.y;return this.getDateFromXY([x,y],roundingMethod,local);}/**
     * Returns the distance in pixels for the time span in the view.
     * @param {Date} startDate The start date of the span
     * @param {Date} endDate The end date of the span
     * @return {Number} The distance in pixels
     * @category Dates
     */},{key:"getTimeSpanDistance",value:function getTimeSpanDistance(startDate,endDate){return this.timeAxisViewModel.getDistanceBetweenDates(startDate,endDate);}/**
     * Returns the center date of the currently visible timespan of scheduler.
     *
     * @return {Date} date Center date for the viewport.
     * @readonly
     * @category Dates
     */},{key:"onSchedulerHorizontalScroll",//endregion
value:function onSchedulerHorizontalScroll(_ref275){var subGrid=_ref275.subGrid,scrollLeft=_ref275.scrollLeft;// Invalidate cached center date unless we are scrolling to center on it.
if(!this.scrollingToCenter){this.cachedCenterDate=null;}}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"displayDateFormat",get:function get(){return this._displayDateFormat;},set:function set(format){this._displayDateFormat=format;// Start/EndDateColumn listens for this to change their format to match
this.trigger('displayDateFormatChange',{format:format});}},{key:"viewportCenterDate",get:function get(){var me=this,timeAxis=me.timeAxis,subGrid=me.timeAxisSubGrid,scroller=subGrid.scrollable,centerX=scroller.x+subGrid.width/2,centerY=scroller.y+subGrid.height/2;if(timeAxis.isContinuous){// Calculate center pixel in the viewport.
// Then Calculate how far through the axis range that is.
var scrollCenter=me.isHorizontal?centerX/scroller.scrollWidth:centerY/scroller.scrollHeight,centerMilli=timeAxis.startMS+(timeAxis.endMS-timeAxis.startMS)*scrollCenter;return new Date(centerMilli);}else{var xy=me.isHorizontal?[centerX,0]:[0,centerY];return me.getDateFromXY(xy,null,true);}}},{key:"viewportCenterDateCached",get:function get(){return this.cachedCenterDate||(this.cachedCenterDate=this.viewportCenterDate);}//endregion
//region TimeAxis getters/setters
/**
     * Gets/sets the current time resolution object, which contains a unit identifier and an increment count { unit, increment}
     * @property {Object}
     * @category Dates
     */},{key:"timeResolution",get:function get(){return this.timeAxis.resolution;},set:function set(increment){this.timeAxis.resolution={increment:increment,unit:this.timeAxis.resolution.unit};}//endregion
//region Snap
/**
     * Controls whether the scheduler should snap to the resolution when interacting with it
     * @property {Boolean}
     * @category Dates
     */},{key:"snap",set:function set(enabled){// timeAxisViewModel is not created yet during configuration
if(!this.isConfiguring){this.timeAxisViewModel.snap=enabled;}else{this._snap=enabled;}},get:function get(){// timeAxisViewModel is not created yet during configuration
if(this.isConfiguring){return this._snap;}return this.timeAxisViewModel.snap;}},{key:"widgetClass",get:function get(){}}]);return TimelineDateMapper;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TimelineDomEvents
 */var eventNameMap={mousedown:'MouseDown',mouseup:'MouseUp',click:'Click',dblclick:'DblClick',contextmenu:'ContextMenu',mouseover:'MouseOver',mouseout:'MouseOut'};/**
 * Mixin that handles dom events (click etc) for scheduler and rendered events.
 *
 * @mixin
 */var TimelineDomEvents=function TimelineDomEvents(Target){return(/*#__PURE__*/function(_ref276){_inherits2(TimelineDomEvents,_ref276);function TimelineDomEvents(){_classCallCheck2(this,TimelineDomEvents);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineDomEvents).apply(this,arguments));}_createClass2(TimelineDomEvents,[{key:"initDomEvents",//endregion
//region Init
/**
     * Adds listeners for DOM events for the scheduler and its events.
     * Which events is specified in Scheduler#scheduledBarEvents and Scheduler#schedulerEvents.
     * @private
     */value:function initDomEvents(){var me=this;// Set thisObj and element of the configured listener specs.
me.scheduledBarEvents.element=me.schedulerEvents.element=me.timeAxisSubGridElement;me.scheduledBarEvents.thisObj=me.schedulerEvents.thisObj=me;// same listener used for different events
EventHelper.on(me.scheduledBarEvents);EventHelper.on(me.schedulerEvents);}//endregion
//region Event handling
},{key:"getTimeSpanMouseEventParams",value:function getTimeSpanMouseEventParams(eventElement,event){throw new Error('Implement in subclass');}},{key:"getScheduleMouseEventParams",value:function getScheduleMouseEventParams(cellData,event){throw new Error('Implement in subclass');}/**
     * Wraps dom Events for rendered scheduler EventModels and fires prefixed as our events.
     * For example click -> eventclick
     * @private
     * @param event
     */},{key:"handleScheduledBarEvent",value:function handleScheduledBarEvent(event){var me=this,eventElement=DomHelper.up(event.target,me.eventSelector),eventName=eventNameMap[event.type]||StringHelper.capitalizeFirstLetter(event.type);if(eventElement){me.trigger(me.scheduledEventName+eventName,me.getTimeSpanMouseEventParams(eventElement,event));}}/**
     * Wraps dom Events for the scheduler and fires as our events.
     * For example click -> scheduleClick
     * @private
     * @param event
     */},{key:"handleScheduleEvent",value:function handleScheduleEvent(event){var me=this,eventElement=DomHelper.up(event.target,me.eventSelector),cellElement=!eventElement&&DomHelper.up(event.target,'.'+me.timeCellCls),eventName=eventNameMap[event.type]||StringHelper.capitalizeFirstLetter(event.type);if(cellElement){var clickedDate=me.getDateFromDomEvent(event,'floor'),cellData=DomDataStore.get(cellElement),index=cellData.row.dataIndex;// TODO: PORT vertical later
// } else {
//     const cellNode = event.getTarget(me.timeCellSelector, 5);
//
//     if (cellNode) {
//         const cellIndex = typeof cellNode.cellIndex == 'number' ? cellNode.cellIndex : cellNode.getAttribute('data-cellIndex'),
//               header    = me.headerCt.getGridColumns()[cellIndex];
//
//         resource = header && header.model;
//     }
// }
// TODO: PORT pinch event
//if (event.type.indexOf('pinch') >= 0) {
//    me.fireEvent('schedule' + event.type, me, event);
//} else {
me.trigger('schedule'+eventName,Object.assign({date:clickedDate,row:cellData.row,index:index,event:event},me.getScheduleMouseEventParams(cellData,event)));//}
}}/**
     * Relays mouseover events as eventmouseenter if over rendered event.
     * Also adds Scheduler#overScheduledEventClass to the hovered element.
     * @private
     */},{key:"onElementMouseOver",value:function onElementMouseOver(event){_get2(_getPrototypeOf2(TimelineDomEvents.prototype),"onElementMouseOver",this).call(this,event);var me=this,target=event.target;// We must be over the event bar
if(target.closest(me.eventInnerSelector)){var eventElement=target.closest(me.eventSelector);eventElement.classList.add(me.overScheduledEventClass);if(eventElement!==me.hoveredEventNode&&!me.preventOverCls){me.hoveredEventNode=eventElement;var params=me.getTimeSpanMouseEventParams(eventElement,event);if(params){// do not fire this event if model cannot be found
// this can be the case for "b-sch-dragcreator-proxy" elements for example
me.trigger(me.scheduledEventName+'MouseEnter',params);}}}else{me.hoveredEventNode=null;}}/**
     * Relays mouseout events as eventmouseleave if out from rendered event.
     * Also removes Scheduler#overScheduledEventClass from the hovered element.
     * @private
     */},{key:"onElementMouseOut",value:function onElementMouseOut(event){_get2(_getPrototypeOf2(TimelineDomEvents.prototype),"onElementMouseOut",this).call(this,event);var me=this;// We must be over the event bar
if(event.target.closest(me.eventInnerSelector)&&me.resolveTimeSpanRecord(event.target)&&me.hoveredEventNode){// out to child shouldn't count...
if(event.relatedTarget&&DomHelper.isDescendant(event.target.closest(me.eventInnerSelector),event.relatedTarget))return;me.unhover(event);}}},{key:"unhover",value:function unhover(event){var me=this,eventElement=me.hoveredEventNode;if(eventElement){eventElement.classList.remove(me.overScheduledEventClass);me.trigger(me.scheduledEventName+'MouseLeave',me.getTimeSpanMouseEventParams(eventElement,event));me.hoveredEventNode=null;}}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){return{// TODO: PORT longpress missing
scheduledBarEvents:{mousedown:'handleScheduledBarEvent',mouseup:'handleScheduledBarEvent',click:'handleScheduledBarEvent',dblclick:'handleScheduledBarEvent',contextmenu:'handleScheduledBarEvent',mouseover:'handleScheduledBarEvent',mouseout:'handleScheduledBarEvent'},// TODO: PORT pinch, pinchstart, pinchend missing
schedulerEvents:{click:'handleScheduleEvent',dblclick:'handleScheduleEvent',contextmenu:'handleScheduleEvent'}};}}]);return TimelineDomEvents;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TimelineViewPresets
 */ /**
 * View preset handling
 *
 * @mixin
 */var TimelineViewPresets=function TimelineViewPresets(Target){return(/*#__PURE__*/function(_ref277){_inherits2(TimelineViewPresets,_ref277);function TimelineViewPresets(){_classCallCheck2(this,TimelineViewPresets);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineViewPresets).apply(this,arguments));}_createClass2(TimelineViewPresets,[{key:"setViewPreset",/**
     * Sets the current view preset. See the {@link Scheduler.preset.PresetManager} class for details.
     *
     * @param {String|Object|Scheduler.preset.ViewPreset} preset The id of the new preset (see {@link Scheduler.preset.PresetManager} for details)
     * @param {Date} [startDate] A new start date for the time axis
     * @param {Date} [endDate] A new end date for the time axis
     * @private
     */value:function setViewPreset(preset,startDate,endDate,initial){var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};var me=this;// This is set if the object is inside the Base constructor's configure method.
initial=initial||me.isConfiguring;var centerDate=options.centerDate,timeAxis=me._timeAxis;// Do not tickle the getter, we are just peeking to see if it's there yet.
// normalize preset (applies preset customizations or gets a predefined preset)
preset=PresetManager.normalizePreset(preset);if(initial||me.trigger('beforePresetChange',{preset:preset,startDate:startDate,endDate:endDate})!==false){me._viewPreset=preset;// prefer to use displayDateFormat configured on the panel
me.displayDateFormat=me.config.displayDateFormat||preset.displayDateFormat;var isHorizontal=me.isHorizontal;if(timeAxis){// None of this reconfiguring should cause a refresh
me.suspendRefresh();// Timeaxis may already be configured (in case of sharing with the timeline partner), no need to reconfigure it
if(!(initial&&timeAxis.isConfigured)){var timeAxisCfg={weekStartDay:me.weekStartDay,startTime:me.startTime,endTime:me.endTime};if(initial){if(timeAxis.count===0||startDate){timeAxisCfg.startDate=startDate||new Date();timeAxisCfg.endDate=endDate;}}else{// if startDate is provided we use it and the provided endDate
if(startDate){timeAxisCfg.startDate=startDate;timeAxisCfg.endDate=endDate;// if both dates are provided we can calculate centerDate for the viewport
if(!centerDate&&endDate){// TODO: PORT infitieScroll stuff
// if (me.infiniteScroll && view.cachedScrollDate && view.cachedScrollDateIsCentered) {
//     centerDate = view.cachedScrollDate;
// } else {
centerDate=new Date((startDate.getTime()+endDate.getTime())/2);//}
}// when no start/end dates are provided we use the current timespan
}else{timeAxisCfg.startDate=timeAxis.startDate;timeAxisCfg.endDate=endDate||timeAxis.endDate;if(!centerDate){// TODO: PORT inifiteScroll stuff
// if (me.infiniteScroll && view.cachedScrollDate && view.cachedScrollDateIsCentered) {
//     centerDate = view.cachedScrollDate;
// } else {
// TODO: PORT needed?
//centerDate = me.getViewportCenterDateCached();
centerDate=me.viewportCenterDate;//}
}}}timeAxis.isConfigured=false;timeAxis.viewPreset=preset;timeAxis.reconfigure(timeAxisCfg,true);me.timeAxisViewModel.reconfigure({// update preset name in viewmodel to simplify zooming sync for partner panels
viewPreset:me.viewPreset,headerConfig:preset.headerConfig,columnLinesFor:preset.columnLinesFor||'middle',// TODO: PORT rowHeightHorizontal??
rowHeightHorizontal:me.readRowHeightFromPreset?preset.rowHeight:me.rowHeight,tickSize:isHorizontal?preset.tickWidth:preset.tickHeight||preset.tickWidth||60});// Allow refresh to run after the reconfiguring
me.resumeRefresh();}// TODO: PORT vertical later
// if (isVertical) {
//     me.setColumnWidth(me.resourceColumnWidth || preset.resourceColumnWidth || 100, true);
// }
me.refresh();// if view is rendered and scroll is not disabled by "notScroll" option
if(!options.notScroll&&me.rendered){// and we have centerDate to scroll to
if(centerDate){// remember the central date we scroll to (it gets reset after user scroll)
me.cachedCenterDate=centerDate;var x=null;// TODO: PORT vertical later
// if (isVertical) {
//     y = Math.max(Math.floor(view.getCoordinateFromDate(centerDate, true) - view.getViewContainerHeight() / 2), 0);
//     me.viewPresetActiveScroll = { top : y };
//     view.scrollVerticallyTo(y);
// } else {
x=Math.max(Math.floor(me.getCoordinateFromDate(centerDate,true)-me.timeAxisSubGrid.width/2),0);me.viewPresetActiveScroll={left:x};// The horizontal scroll handler must not invalidate the cached center
// when this scroll event rolls round on the next frame.
me.scrollingToCenter=true;me.scrollHorizontallyTo(x,false);// Release the lock on scrolling invalidating the cached center.
me.setTimeout(function(){me.scrollingToCenter=false;},100);//}
// if we don't have a central date to scroll at we reset scroll (this is bw compatible behavior)
}else{// TODO: PORT vertical later
// if (isHorizontal) {
me.scrollHorizontallyTo(0,false);//} else {
//    view.scrollVerticallyTo(0);
//}
}}me.trigger('presetChange',{preset:preset,startDate:startDate,endDate:endDate,centerDate:centerDate});}}}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"viewPreset",//endregion
//region Get/set
/**
     * Get/set the current view preset
     * @property {Scheduler.preset.ViewPreset|String}
     * @category Common
    */get:function get(){return this._viewPreset;},set:function set(preset){if(this._viewPreset!==preset){this.setViewPreset(preset);}}},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){//if (!PresetManager.presets) PresetManager.registerDefaults();
return{/**
             * A string key used to lookup a predefined {@link Scheduler.preset.ViewPreset} (e.g. 'weekAndDay', 'hourAndDay'),
             * managed by {@link Scheduler.preset.PresetManager}. See {@link Scheduler.preset.PresetManager} for more information.
             * Or a config object for a viewPreset.
             *
             * Options:
             * - 'secondAndMinute'
             * - 'minuteAndHour'
             * - 'hourAndDay'
             * - 'dayAndWeek'
             * - 'weekAndDay'
             * - 'weekAndMonth',
             * - 'monthAndYear'
             * - 'year'
             * - 'manyYears'
             * - 'weekAndDayLetter'
             * - 'weekDateAndMonth'
             * - 'day'
             * - 'week'
             *
             * If passed as a config object, the settings from the viewPreset with the provided 'name' property will be used along
             * with any overridden values in your object.
             *
             * To override:
             * ```javascript
             * viewPreset       : {
             *   name                : 'hourAndDay',
             *   headerConfig        : {
             *       middle          : {
             *           unit       : "hour",
             *           increment  : 12,
             *           renderer   : (startDate, endDate, headerConfig, cellIdx) => {
             *               return "";
             *           }
             *       }
             *   }
             * }
             * ```
             * or set a new valid preset config if the preset is not registered in the {@link Scheduler.preset.PresetManager}.
             *
             * When you use scheduler in weekview mode, this config is used to pick view preset. If passed view preset is not
             * supported by weekview (only 2 supported by default - 'day' and 'week') default preset will be used - 'week'.
             * @config {String|Object}
             * @default
             * @category Common
             */viewPreset:'weekAndDayLetter',/**
             * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the
             * view preset. For allowed values see {@link Common.helper.DateHelper##function-format-static}.
             * @config {String}
             * @category Scheduled events
             */displayDateFormat:null};}}]);return TimelineViewPresets;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TimelineZoomable
 */ /**
 * Mixin providing "zooming" functionality.
 *
 * The zooming feature works by reconfiguring the time axis with the current zoom level values selected from the {@link #config-zoomLevels} array.
 * Zoom levels can be added and removed from the array to change the amount of available steps. Range of zooming in/out can be also
 * modified with {@link #config-maxZoomLevel} / {@link #config-minZoomLevel} properties.
 *
 * This mixin adds additional methods to the column : {@link #property-maxZoomLevel}, {@link #property-minZoomLevel}, {@link #function-zoomToLevel}, {@link #function-zoomIn},
 * {@link #function-zoomOut}, {@link #function-zoomInFull}, {@link #function-zoomOutFull}.
 *
 * **Notice**: Zooming doesn't work properly when `forceFit` option is set to true for the column or for filtered timeaxis.
 *
 * @mixin
 */var TimelineZoomable=function TimelineZoomable(Target){return(/*#__PURE__*/function(_ref278){_inherits2(TimelineZoomable,_ref278);function TimelineZoomable(){_classCallCheck2(this,TimelineZoomable);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineZoomable).apply(this,arguments));}_createClass2(TimelineZoomable,[{key:"construct",value:function construct(config){var me=this;_get2(_getPrototypeOf2(TimelineZoomable.prototype),"construct",this).call(this,config);if(me.zoomOnMouseWheel){EventHelper.on({element:me.timeAxisSubGridElement,wheel:'onWheel',thisObj:me,capture:true,passive:false});}if(me.zoomOnTimeAxisDoubleClick){me.on('timeaxisheaderdblclick',function(_ref279){var startDate=_ref279.startDate,endDate=_ref279.endDate;if(!me.isVertical){me.zoomToSpan({startDate:startDate,endDate:endDate});}});}}},{key:"getZoomLevelUnit",value:function getZoomLevelUnit(zoomLevel){return PresetManager.getPreset(zoomLevel.preset).bottomHeader.unit;}},{key:"presetToZoomLevel",value:function presetToZoomLevel(presetName){var preset=PresetManager.getPreset(presetName);return{preset:presetName,increment:preset.bottomHeader.increment||1,resolution:preset.timeResolution.increment,resolutionUnit:preset.timeResolution.unit,width:preset.tickWidth};}},{key:"calculateCurrentZoomLevel",value:function calculateCurrentZoomLevel(){var me=this,zoomLevel=me.presetToZoomLevel(me.viewPreset.name),min=Number.MAX_VALUE,viewModel=me.timeAxisViewModel,actualWidth=viewModel.tickSize;zoomLevel.width=actualWidth;zoomLevel.increment=viewModel.bottomHeader.increment||1;// when calculating current zoom level we should use tick width from defined zoomLevels
// otherwise levels might be skipped
for(var i=0,l=me.zoomLevels.length;i<l;i++){var curentLevel=me.zoomLevels[i];// search for a zoom level having the same preset...
if(curentLevel.preset!==zoomLevel.preset)continue;// and the most close column width to the actual one
var delta=Math.abs(curentLevel.width-actualWidth);if(delta<min){min=delta;zoomLevel.actualWidth=curentLevel.actualWidth;zoomLevel.width=curentLevel.width;}}return zoomLevel;}/**
     * Get/set current zoom level
     * @property {Number}
     * @category Zoom
     */},{key:"getMilliSecondsPerPixelForZoomLevel",/*
     * @private
     * Returns number of milliseconds per pixel.
     * @param {Object} level Element from array of {@link #config-zoomLevels}.
     * @param {Boolean} ignoreActualWidth If true, then density will be calculated using default zoom level settings.
     * Otherwise density will be calculated for actual tick width.
     * @return {Number} Return number of milliseconds per pixel.
     */value:function getMilliSecondsPerPixelForZoomLevel(level,ignoreActualWidth){// trying to convert the unit + increment to a number of milliseconds
// this number is not fixed (month can be 28, 30 or 31 day), but at least this conversion
// will be consistent (should be no DST changes at year 1)
return Math.round((DateHelper.add(new Date(1,0,1),level.increment,this.getZoomLevelUnit(level))-new Date(1,0,1))/(// `actualWidth` is a column width after view adjustments applied to it (see `calculateTickWidth`)
// we use it if available to return the precise index value from `getCurrentZoomLevelIndex`
ignoreActualWidth?level.width:level.actualWidth||level.width));}/**
     * Zooms to passed view preset, saving center date. Method accepts config object as a first argument, which can be
     * reduced to primitive type (string,number) when no additional options required. e.g.:
     * ```
     * // zooming to preset
     * scheduler.zoomTo({ preset : 'hourAndDay' })
     * // shorthand
     * scheduler.zoomTo('hourAndDay')
     *
     * // zooming to level
     * scheduler.zoomTo({ level : 0 })
     * // shorthand
     * scheduler.zoomTo(0)
     * ```
     *
     * It is also possible to zoom to a time span by omitting `preset` and `level` configs, in which case scheduler sets
     * the time frame to a specified range and applies zoom level which allows to fit all columns to this range. The
     * given time span will be centered in the scheduling view (unless `centerDate` config provided). In the same time,
     * the start/end date of the whole time axis will be extended to allow scrolling for user.
     * ```
     * // zooming to time span
     * scheduler.zoomTo({ startDate : new Date(..), endDate : new Date(...) })
     *
     * ```
     *
     * @param {Object|String|Number} config Config object, preset name or zoom level index.
     * @param {String} config.preset Preset name to zoom to. Ignores level config in this case
     * @param {Number} config.level Zoom level to zoom to. Is ignored, if preset config is provided
     * @param {Date} config.startDate New time frame start. If provided along with end, view will be centered in this time
     * interval (unless `centerDate` is present)
     * @param {Date} config.endDate New time frame end
     * @param {Date} config.centerDate Date that should be kept in the center. Has priority over start and end params
     * @param {Number} config.width Lowest tick width. Might be increased automatically
     * @param {Number} [config.leftMargin] Amount of pixels to extend span start on (used, when zooming to span)
     * @param {Number} [config.rightMargin] Amount of pixels to extend span end on (used, when zooming to span)
     * @param {Number} [config.adjustStart] Amount of units to extend span start on (used, when zooming to span)
     * @param {Number} [config.adjustEnd] Amount of units to extend span end on (used, when zooming to span)
     * @category Zoom
     */},{key:"zoomTo",value:function zoomTo(config){var me=this;if(_typeof(config)==='object'){if(config.preset){var zoomLevel=me.presetToZoomLevel(config.preset);this.internalZoomToLevel(zoomLevel,config);}else if(config.level!=null){me.zoomToLevel(config.level,config);}else{me.zoomToSpan(config);}}else if(typeof config==='number'){me.zoomToLevel(config);}else{var _zoomLevel=me.presetToZoomLevel(config);this.internalZoomToLevel(_zoomLevel);}}/**
     * Allows zooming to certain level of {@link #config-zoomLevels} array. Automatically limits zooming between {@link #config-maxZoomLevel}
     * and {@link #config-minZoomLevel}. Can also set time axis timespan to the supplied start and end dates.
     *
     * @param {Number} level Level to zoom to.
     * @param {Object} [options] Object, containing options for this method
     * @param {Date} options.startDate New time frame start. If provided along with end, view will be centered in this time
     * interval, ignoring centerDate config.
     * @param {Date} options.endDate New time frame end.
     * @param {Date} options.centerDate Date that should be kept in center. Is ignored when start and end are provided.
     * @param {Number} options.width Lowest tick width. Might be increased automatically
     * @return {Number} level Current zoom level or null if it hasn't changed.
     * @category Zoom
     * @internal
     */},{key:"zoomToLevel",value:function zoomToLevel(level){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;level=Math.min(Math.max(level,me.minZoomLevel),me.maxZoomLevel);var currentZoomLevel=me.calculateCurrentZoomLevel(),currentFactor=me.getMilliSecondsPerPixelForZoomLevel(currentZoomLevel),nextZoomLevel=me.zoomLevels[level],nextFactor=me.getMilliSecondsPerPixelForZoomLevel(nextZoomLevel);if(currentFactor===nextFactor&&!(options.startDate||options.endDate)){// already at requested zoom level
return null;}me.internalZoomToLevel(nextZoomLevel,options);return level;}/**
     * @param {Object} level Zoom level configuration
     * @param {String} level.preset View preset to zoom to
     * @param {Number} [level.width] Tick width for preset
     * @param {Number} [level.increment] Preset increment
     * @param {String} [level.resolutionUnit] Preset resolution unit
     * @param {Number} [level.resolution] Preset resolution unit increment
     * @param {Object} [options] Additional options
     * @param {Date} options.startDate New time frame start. If provided along with end, view will be centered in this time
     * interval (unless centerDate is present)
     * @param {Date} options.endDate New time frame end.
     * @param {Date} options.centerDate Date that should be kept in center. Has priority over start and end params.
     * @param {Number} options.width Lowest tick width. Might be increased automatically
     * @private
     */},{key:"internalZoomToLevel",value:function internalZoomToLevel(level){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;// this event is used to prevent sync suspend during zooming
me.trigger('beforeZoomChange',{level:level});var isVertical=me.isVertical,startDate=options.startDate,endDate=options.endDate,span=startDate&&endDate?{startDate:startDate,endDate:endDate}:null,centerDate=options.centerDate||(span?new Date((startDate.getTime()+endDate.getTime())/2):me.viewportCenterDateCached),// // eslint-disable-next-line no-undef
panelSize=me.timeAxisSubGrid.width,presetCopy=PresetManager.getPreset(level.preset).clone(),bottomHeader=presetCopy.bottomHeader;span=span||me.calculateOptimalDateRange(centerDate,panelSize,level);// clone doesn't copy the preset name
presetCopy.name=level.preset;presetCopy[isVertical?'tickHeight':'tickWidth']=options.width||level.width;bottomHeader.increment=level.increment;me.isZooming=true;presetCopy.increment=level.increment;presetCopy.timeResolution.unit=DateHelper.getUnitByName(level.resolutionUnit||presetCopy.timeResolution.unit||bottomHeader.unit);presetCopy.timeResolution.increment=level.resolution;me.setViewPreset(presetCopy,span.startDate||me.startDate,span.endDate||me.endDate,false,{centerDate:centerDate});// after switching the view preset the `width` config of the zoom level may change, because of adjustments
// we will save the real value in the `actualWidth` property, so that `getCurrentZoomLevelIndex` method
// will return the exact level index after zooming
level.actualWidth=me.timeAxisViewModel.tickSize;me.isZooming=false;/**
         * Fires after zoom level change
         * @event zoomChange
         * @param {Scheduler.view.Scheduler} source The TimeAxisColumn object
         * @param {Number} level The index of the new zoom level
         * @param {Object} levelConfig An object containing the configuration properties of the new zoom level
         */me.trigger('zoomChange',{level:me.zoomLevels.indexOf(level),levelConfig:level});}/**
     * Changes the range of the scheduling chart to fit all the events in its event store.
     * @param {Object} [options] Options object for the zooming operation.
     * @param {Number} [options.leftMargin] Defines margin in pixel between the first event start date and first visible date
     * @param {Number} [options.rightMargin] Defines margin in pixel between the last event end date and last visible date
     */},{key:"zoomToFit",value:function zoomToFit(options){var eventStore=this.eventStore,span=eventStore.getTotalTimeSpan();options=Object.assign({leftMargin:0,rightMargin:0},options,span);// Make sure we received a time span, event store might be empty
if(options.startDate&&options.endDate){this.zoomToSpan(options);}}/**
     * Sets time frame to specified range and applies zoom level which allows to fit all columns to this range.
     *
     * The given time span will be centered in the scheduling view, in the same time, the start/end date of the whole time axis
     * will be extended in the same way as {@link #function-zoomToLevel} method does, to allow scrolling for user.
     *
     * @param {Object} config The time frame.
     * @param {Date} config.startDate The time frame start.
     * @param {Date} config.endDate The time frame end.
     * @param {Date} [config.centerDate] Date that should be kept in the center. Has priority over start and end params
     * @param {Number} [config.leftMargin] Amount of pixels to extend span start on
     * @param {Number} [config.rightMargin] Amount of pixels to extend span end on
     * @param {Number} [config.adjustStart] Amount of units to extend span start on
     * @param {Number} [config.adjustEnd] Amount of units to extend span end on
     *
     * @return {Number} level Current zoom level or null if it hasn't changed.
     * @category Zoom
     * @internal
     */},{key:"zoomToSpan",value:function zoomToSpan(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(config.leftMargin||config.rightMargin){config.adjustStart=0;config.adjustEnd=0;}if(!config.leftMargin)config.leftMargin=0;if(!config.rightMargin)config.rightMargin=0;if(!config.startDate||!config.endDate)throw new Error('zoomToSpan: must provide startDate + endDate dates');var me=this,startDate=config.startDate,endDate=config.endDate,// this config enables old zoomToSpan behavior which we want to use for zoomToFit in Gantt
needToAdjust=config.adjustStart>=0||config.adjustEnd>=0;if(needToAdjust){startDate=DateHelper.add(startDate,-config.adjustStart,me.timeAxis.mainUnit);endDate=DateHelper.add(endDate,config.adjustEnd,me.timeAxis.mainUnit);}if(startDate<=endDate){// get scheduling view width
var availableSpace=me.timeAxisViewModel.availableSpace;// if potential width of col is less than col width provided by zoom level
//   - we'll zoom out panel until col width fit into width from zoom level
// and if width of column is more than width from zoom level
//   - we'll zoom in until col width fit won't fit into width from zoom level
var currLevel=Math.floor(me.zoomLevel);// if we zoomed out even more than the highest zoom level - limit it to the highest zoom level
if(currLevel===-1)currLevel=0;var zoomLevels=me.zoomLevels;var diffMS=endDate-startDate||1,msPerPixel=me.getMilliSecondsPerPixelForZoomLevel(zoomLevels[currLevel],true),// increment to get next zoom level:
// -1 means that given timespan won't fit the available width in the current zoom level, we need to zoom out,
// so that more content will "fit" into 1 px
//
// +1 mean that given timespan will already fit into available width in the current zoom level, but,
// perhaps if we'll zoom in a bit more, the fitting will be better
inc=diffMS/msPerPixel+config.leftMargin+config.rightMargin>availableSpace?-1:1,candidateLevel=currLevel+inc,zoomLevel,levelToZoom=null;// loop over zoom levels
while(candidateLevel>=0&&candidateLevel<=zoomLevels.length-1){// get zoom level
zoomLevel=zoomLevels[candidateLevel];msPerPixel=me.getMilliSecondsPerPixelForZoomLevel(zoomLevel,true);var spanWidth=diffMS/msPerPixel+config.leftMargin+config.rightMargin;// if zooming out
if(inc===-1){// if columns fit into available space, then all is fine, we've found appropriate zoom level
if(spanWidth<=availableSpace){levelToZoom=candidateLevel;// stop searching
break;}// if zooming in
}else{// if columns still fits into available space, we need to remember the candidate zoom level as a potential
// resulting zoom level, the indication that we've found correct zoom level will be that timespan won't fit
// into available view
if(spanWidth<=availableSpace){// if it's not currently active level
if(currLevel!==candidateLevel-inc){// remember this level as applicable
levelToZoom=candidateLevel;}}else{// Sanity check to find the following case:
// If we're already zoomed in at the appropriate level, but the current zoomLevel is "too small" to fit and had to be expanded,
// there is an edge case where we should actually just stop and use the currently selected zoomLevel
break;}}candidateLevel+=inc;}// If we didn't find a large/small enough zoom level, use the lowest/highest level
levelToZoom=levelToZoom!=null?levelToZoom:candidateLevel-inc;zoomLevel=zoomLevels[levelToZoom];var unitToZoom=PresetManager.getPreset(zoomLevel.preset).bottomHeader.unit;if(config.leftMargin||config.rightMargin){// time axis doesn't yet know about new view preset (zoom level) so it cannot round/ceil date correctly
startDate=new Date(startDate.getTime()-msPerPixel*config.leftMargin);endDate=new Date(endDate.getTime()+msPerPixel*config.rightMargin);}var tickCount=DateHelper.getDurationInUnit(startDate,endDate,unitToZoom,true)/zoomLevel.increment;if(tickCount===0){return null;}var customWidth=Math.floor(availableSpace/tickCount),centerDate=config.centerDate||new Date((startDate.getTime()+endDate.getTime())/2),range;if(needToAdjust){range={startDate:startDate,endDate:endDate};}else{range=me.calculateOptimalDateRange(centerDate,availableSpace,zoomLevel);}return me.zoomToLevel(levelToZoom,Object.assign(range,{width:customWidth,centerDate:centerDate}));}return null;}/**
     * Zooms in the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom in by this value.
     * Otherwise a value of `1` will be used.
     *
     * @param {Number} levels (optional) amount of levels to zoom in
     *
     * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
     * @category Zoom
     */},{key:"zoomIn",value:function zoomIn(){var levels=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var currentZoomLevelIndex=this.zoomLevel;if(currentZoomLevelIndex>=this.zoomLevels.length-1)return null;return this.zoomToLevel(Math.floor(currentZoomLevelIndex)+levels);}/**
     * Zooms out the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view will zoom out by this value.
     * Otherwise a value of `1` will be used.
     *
     * @param {Number} levels (optional) amount of levels to zoom out
     *
     * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
     * @category Zoom
     */},{key:"zoomOut",value:function zoomOut(){var levels=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var currentZoomLevelIndex=this.zoomLevel;if(currentZoomLevelIndex<=0)return null;return this.zoomToLevel(Math.ceil(currentZoomLevelIndex)-levels);}/**
     * Zooms in the timeline to the {@link #config-maxZoomLevel} according to the array of zoom levels.
     *
     * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
     * @category Zoom
     */},{key:"zoomInFull",value:function zoomInFull(){return this.zoomToLevel(this.maxZoomLevel);}/**
     * Zooms out the timeline to the {@link #config-minZoomLevel} according to the array of zoom levels.
     *
     * @return {Number} currentLevel New zoom level of the panel or null if level hasn't changed.
     * @category Zoom
     */},{key:"zoomOutFull",value:function zoomOutFull(){return this.zoomToLevel(this.minZoomLevel);}/*
     * Adjusts the timespan of the panel to the new zoom level. Used for performance reasons,
     * as rendering too many columns takes noticeable amount of time so their number is limited.
     * @category Zoom
     * @private
     */},{key:"calculateOptimalDateRange",value:function calculateOptimalDateRange(centerDate,panelSize,zoomLevel,userProvidedSpan){// this line allows us to always use the `calculateOptimalDateRange` method when calculating date range for zooming
// (even in case when user has provided own interval)
// other methods may override/hook into `calculateOptimalDateRange` to insert own processing
// (infinite scrolling feature does)
if(userProvidedSpan)return userProvidedSpan;var timeAxis=this.timeAxis;if(this.zoomKeepsOriginalTimespan){return{startDate:timeAxis.startDate,endDate:timeAxis.endDate};}var unit=this.getZoomLevelUnit(zoomLevel),difference=Math.ceil(panelSize/zoomLevel.width*zoomLevel.increment*this.visibleZoomFactor/2),startDate=DateHelper.add(centerDate,-difference,unit),endDate=DateHelper.add(centerDate,difference,unit);return{startDate:timeAxis.floorDate(startDate,false,unit,zoomLevel.increment),endDate:timeAxis.ceilDate(endDate,false,unit,zoomLevel.increment)};}},{key:"onWheel",value:function onWheel(event){var me=this;if(event.ctrlKey){event.preventDefault();if(!me.preventScrollZoom){if(event.deltaY>0){me.zoomOut();}else if(event.deltaY<0){me.zoomIn();}me.preventScrollZoom=true;me.setTimeout(function(){return me.preventScrollZoom=false;},30);}}}/**
     * Changes the time axis timespan to the supplied start and end dates.
     * @param {Date} startDate The new start date
     * @param {Date} endDate The new end date. If not supplied, the {@link Scheduler.preset.ViewPreset#config-defaultSpan} property of the current view preset will be used to calculate the new end date.
     */},{key:"setTimeSpan",value:function setTimeSpan(startDate,endDate){this.timeAxis.setTimeSpan(startDate,endDate);}/**
     * Moves the time axis by the passed amount and unit.
     *
     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shift} for more information.
     *
     * @param {Number} amount The number of units to jump
     * @param {String} [unit] The unit (Day, Week etc)
     */},{key:"shift",value:function shift(amount,unit){this.timeAxis.shift(amount,unit);}/**
     * Moves the time axis forward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement`
     * config of the current view preset.
     *
     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shiftNext} for more information.
     *
     * @param {Number} [amount] The number of units to jump forward
     */},{key:"shiftNext",value:function shiftNext(amount){this.timeAxis.shiftNext(amount);}/**
     * Moves the time axis backward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement` config of the current view preset.
     *
     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shiftPrevious} for more information.
     *
     * @param {Number} [amount] The number of units to jump backward
     */},{key:"shiftPrevious",value:function shiftPrevious(amount){this.timeAxis.shiftPrevious(amount);}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"maxZoomLevel",get:function get(){return this._maxZoomLevel;}/**
     * Get/set the {@link #config-maxZoomLevel} value
     * @property {Number}
     * @category Zoom
     */,set:function set(level){if(typeof level!=='number'){level=this.zoomLevels.length-1;}if(level<0||level>=this.zoomLevels.length){throw new Error('Invalid range for `setMinZoomLevel`');}this._maxZoomLevel=level;}},{key:"minZoomLevel",get:function get(){return this._minZoomLevel;}/**
     * Sets the {@link #config-minZoomLevel} value
     * @property {Number}
     * @category Zoom
     */,set:function set(level){if(typeof level!=='number'){level=0;}if(level<0||level>=this.zoomLevels.length){throw new Error('Invalid range for `minZoomLevel`');}this._minZoomLevel=level;}},{key:"zoomLevel",get:function get(){var me=this,currentZoomLevel=me.calculateCurrentZoomLevel(),currentFactor=me.getMilliSecondsPerPixelForZoomLevel(currentZoomLevel),zoomLevels=me.zoomLevels;for(var i=0;i<zoomLevels.length;i++){var zoomLevelFactor=me.getMilliSecondsPerPixelForZoomLevel(zoomLevels[i]);if(zoomLevelFactor===currentFactor)return i;// current zoom level is outside of pre-defined zoom levels
if(i===0&&currentFactor>zoomLevelFactor)return-0.5;if(i===zoomLevels.length-1&&currentFactor<zoomLevelFactor)return zoomLevels.length-1+0.5;var nextLevelFactor=me.getMilliSecondsPerPixelForZoomLevel(zoomLevels[i+1]);if(zoomLevelFactor>currentFactor&&currentFactor>nextLevelFactor)return i+0.5;}throw new Error("Can't find current zoom level index");}// noinspection JSAnnotator
,set:function set(level){this.zoomToLevel(level);}},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",get:function get(){return{/**
             * If true, you can zoom in and out on the the time axis using CTRL-key + mouse wheel.
             * @config {Boolean}
             * @default
             * @category Zoom
             */zoomOnMouseWheel:true,/**
             * True to zoom to time span when double clicking a time axis cell.
             * @config {Boolean}
             * @category Zoom
             */zoomOnTimeAxisDoubleClick:true,preventScrollZoom:false,/**
             * Predefined map of zoom levels for each preset in the ascending order. Zoom level is basically a
             * {@link Scheduler.preset.ViewPreset view preset}, which is based on another preset, with some values
             * overridden.
             *
             * Each element is an {Object} with the following parameters :
             *
             * - `preset` (String)      - {@link Scheduler.preset.ViewPreset} to be used for this zoom level. This must be a valid preset name registered in {@link Scheduler.preset.PresetManager preset manager}.
             * - `width` (Int)          - {@link Scheduler.preset.ViewPreset#config-tickWidth tickWidth} time column width value from the preset
             * - `increment` (Int)      - {@link Scheduler.preset.ViewPresetHeaderRow#config-increment increment} value from the bottom header row of the preset
             * - `resolution` (Int)     - {@link Scheduler.preset.ViewPreset#config-timeResolution increment} part of the `timeResolution` object in the preset
             * - `resolutionUnit` (String) (Optional) - {@link Scheduler.preset.ViewPreset#config-timeResolution unit} part of the `timeResolution` object in the preset
             *
             *  The `zoomLevels` config can be set in the scheduler like this:
             * ```javascript
             * let scheduler = new Scheduler({
             *   resourceStore : resourceStore,
             *   eventStore    : eventStore,
             *   viewPreset    : 'hourAndDay',
             *   zoomLevels: [
             *       { width: 50,    increment: 4,   resolution: 60, preset: 'hourAndDay', resolutionUnit: 'minute' },
             *       { width: 60,    increment: 3,   resolution: 60, preset: 'hourAndDay', resolutionUnit: 'minute' },
             *       { width: 80,    increment: 2,   resolution: 30, preset: 'hourAndDay', resolutionUnit: 'minute' },
             *       { width: 100,   increment: 1,   resolution: 15, preset: 'hourAndDay', resolutionUnit: 'minute' }
             *   ]
             * });
             * ```
             * In the case above:
             *
             * - The `width` specifies the amount of space in pixels for the bottom cell.
             * - The `increment` specifies the number of hours between each bottom cell.
             * - The `resolution` specifies the size of the slots in the bottom cell accordingly to the defined `resolutionUnit`.
             *
             * In the case above we have four zoomlevel steps within the `hourAndDay` preset. When zooming in we go up
             * in the zoomlevel array, when zooming out we go down in the zoomlevel array. In this case the zoomlevel
             * with `increment` set to 1 and `width` set to 100 is the most detailed level, the max level. While the
             * first item in the array is the minimal zoomlevel. In a higher zoomlevel the `resolution` can be set lower
             * to make the granularity of the cell smaller. That means smaller slots for the events to fit in.
             * @config {Object[]}
             * @category Zoom
             */zoomLevels:[//YEAR
{width:40,increment:1,resolution:1,preset:'manyYears',resolutionUnit:'YEAR'},{width:80,increment:1,resolution:1,preset:'manyYears',resolutionUnit:'YEAR'},{width:30,increment:1,resolution:1,preset:'year',resolutionUnit:'MONTH'},{width:50,increment:1,resolution:1,preset:'year',resolutionUnit:'MONTH'},{width:100,increment:1,resolution:1,preset:'year',resolutionUnit:'MONTH'},{width:200,increment:1,resolution:1,preset:'year',resolutionUnit:'MONTH'},//MONTH
{width:100,increment:1,resolution:7,preset:'monthAndYear',resolutionUnit:'DAY'},{width:30,increment:1,resolution:1,preset:'weekDateAndMonth',resolutionUnit:'DAY'},//WEEK
{width:50,increment:1,resolution:1,preset:'weekAndMonth',resolutionUnit:'DAY'},{width:20,increment:1,resolution:1,preset:'weekAndDayLetter'},//DAY
{width:54,increment:1,resolution:1,preset:'weekAndDay',resolutionUnit:'HOUR'},{width:100,increment:1,resolution:1,preset:'weekAndDay',resolutionUnit:'HOUR'},//HOUR
{width:64,increment:6,resolution:30,preset:'hourAndDay',resolutionUnit:'MINUTE'},{width:100,increment:6,resolution:30,preset:'hourAndDay',resolutionUnit:'MINUTE'},{width:64,increment:2,resolution:30,preset:'hourAndDay',resolutionUnit:'MINUTE'},{width:64,increment:1,resolution:30,preset:'hourAndDay',resolutionUnit:'MINUTE'},//MINUTE
{width:30,increment:15,resolution:5,preset:'minuteAndHour'},{width:60,increment:15,resolution:5,preset:'minuteAndHour'},{width:130,increment:15,resolution:5,preset:'minuteAndHour'},{width:60,increment:5,resolution:5,preset:'minuteAndHour'},{width:100,increment:5,resolution:5,preset:'minuteAndHour'},//SECOND
{width:30,increment:10,resolution:5,preset:'secondAndMinute'},{width:60,increment:10,resolution:5,preset:'secondAndMinute'},{width:130,increment:5,resolution:5,preset:'secondAndMinute'}],/**
             * Minimal zoom level to which {@link #function-zoomOut} will work
             * @config {Number}
             * @category Zoom
             */minZoomLevel:true,/**
             * Maximal zoom level to which {@link #function-zoomIn} will work
             * @config {Number}
             * @category Zoom
             */maxZoomLevel:true,/**
             * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make the scrolling area `visibleZoomFactor` times
             * wider than the timeline area itself. Used in {@link #function-zoomToSpan} and {@link #function-zoomToLevel} functions.
             * @config {Number}
             * @default
             * @category Zoom
             */visibleZoomFactor:5,/**
             * Whether the originally rendered timespan should be preserved while zooming. By default it is set to `false`,
             * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to render. When setting this option
             * to `true`, be careful not to allow to zoom a big timespan in seconds resolution for example. That will cause **a lot** of HTML content
             * to be rendered and affect performance. You can use {@link #config-minZoomLevel} and {@link #config-maxZoomLevel} config options for that.
             * @config {Boolean}
             * @default
             * @category Zoom
             */zoomKeepsOriginalTimespan:false};}}]);return TimelineZoomable;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TimelineEventRendering
 */ /**
 * Functions to handle event rendering (EventModel -> dom elements).
 *
 * @mixin
 */var TimelineEventRendering=function TimelineEventRendering(Target){return(/*#__PURE__*/function(_ref280){_inherits2(TimelineEventRendering,_ref280);function TimelineEventRendering(){_classCallCheck2(this,TimelineEventRendering);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineEventRendering).apply(this,arguments));}_createClass2(TimelineEventRendering,[{key:"barMargin",//endregion
//region Settings
/**
     * Control how much space to leave between stacked event bars in px. Value will be constrained by half the row height.
     * @property {Number}
     * @category Scheduled events
     */get:function get(){return this._barMargin;},set:function set(margin){var me=this;ObjectHelper.assertNumber(margin,'barMargin');// bar margin should not exceed half of the row height
if(me.isHorizontal&&me.rowHeight){margin=Math.min(Math.ceil(me.rowHeight/2),margin);}if(me._barMargin!==margin){me._barMargin=margin;if(me.rendered){me.currentOrientation.onBeforeRowHeightChange();me.refreshWithTransition();}}}// Documented in SchedulerEventRendering to not show up in Gantt docs
},{key:"resourceMargin",get:function get(){return this._resourceMargin==null?this.barMargin:this._resourceMargin;},set:function set(margin){var me=this;ObjectHelper.assertNumber(margin,'resourceMargin');// bar margin should not exceed half of the row height
if(me.isHorizontal&&me.rowHeight){margin=Math.min(Math.ceil(me.rowHeight/2),margin);}if(me._resourceMargin!==margin){me._resourceMargin=margin;if(me.rendered){me.currentOrientation.onBeforeRowHeightChange();me.refreshWithTransition();}}}// /**
//  * Distance between bars when using eventLayout pack
//  * @property {Number}
//  */
// get barPackMargin() {
//     return this._barPackMargin;
// }
//
// set barPackMargin(margin) {
//     if (this._barPackMargin !== margin) {
//         this._barPackMargin = margin;
//         this.refresh();
//     }
// }
/**
     * Get/set the widths of all the time columns to the supplied value. Only applicable when {@link Scheduler.view.TimelineBase#config-forceFit} is set to false.
     * Deprecated in favor of {@link #property-tickSize}
     * @property {Number}
     * @deprecated 2.2
     * @category Scheduled events
     */},{key:"tickWidth",set:function set(width){this.tickSize=width;},get:function get(){return this.tickSize;}/**
     * Get/set the width/height (depending on mode) of all the time columns to the supplied value. Only applicable when
     * {@link Scheduler.view.TimelineBase#config-forceFit} is set to false.
     * @property {Number}
     * @category Scheduled events
     */},{key:"tickSize",set:function set(width){ObjectHelper.assertNumber(width,'tickSize');this.timeAxisViewModel.tickSize=width;},get:function get(){return this.timeAxisViewModel.tickSize;}/**
     * Predefined event colors, useful in combos etc.
     * @type {String}
     * @category Scheduled events
     */},{key:"widgetClass",//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * Controls how much space to leave between stacked event bars in px
             * @config {Number}
             * @default
             * @category Scheduled events
             */barMargin:10,resourceMargin:null,/**
             * True to size events based on the rowHeight and barMargin settings. Set this to false if you want to
             * control height and top properties via CSS instead.
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */managedEventSizing:true,/**
             * The CSS class added to an event/assignment when it is newly created
             * in the UI and unsynced with the server.
             * @config {String}
             * @default
             * @private
             * @category CSS
             */generatedIdCls:'b-sch-dirty-new',/**
             * The CSS class added to an event when it has unsaved modifications
             * @config {String}
             * @default
             * @private
             * @category CSS
             */dirtyCls:'b-sch-dirty',/**
             * The CSS class added to an event when it is currently committing changes
             * @config {String}
             * @default
             * @private
             * @category CSS
             */committingCls:'b-sch-committing',/**
             * The CSS class added to an event/assignment when it ends outside of the visible time range.
             * @config {String}
             * @default
             * @private
             * @category CSS
             */endsOutsideViewCls:'b-sch-event-endsoutside',/**
             * The CSS class added to an event/assignment when it starts outside of the visible time range.
             * @config {String}
             * @default
             * @private
             * @category CSS
             */startsOutsideViewCls:'b-sch-event-startsoutside',/**
             * The CSS class added to an event/assignment when it is not draggable.
             * @config {String}
             * @default
             * @private
             * @category CSS
             */fixedEventCls:'b-sch-event-fixed',/**
             * Event style used by default. Events and resources can specify their own style, with priority order being:
             * Event -> Resource -> Scheduler default. Determines the appearance of the event by assigning a CSS class
             * to it. Available styles are:
             * * plain (default), flat look
             * * border, has border in darker shade of events color
             * * colored, has colored text and wide left border in same color
             * * hollow, only border + text until hovered
             * * line, as a line with the text below it
             * * dashed, as a dashed line with the text below it
             * * minimal, as a thin line with small text above it
             * @config {String}
             * @default
             * @category Scheduled events
             */eventStyle:'plain',/**
             * Event color used by default. Events and resources can specify their own color, with priority order being:
             * Event -> Resource -> Scheduler default. Available colors are:
             * * red
             * * pink
             * * purple
             * * violet
             * * indigo
             * * blue
             * * cyan
             * * teal
             * * green
             * * lime
             * * yellow
             * * orange
             * * gray
             * @config {String}
             * @default
             * @category Scheduled events
             */eventColor:'green'};}},{key:"eventColors",get:function get(){return['red','pink','purple','violet','indigo','blue','cyan','teal','green','lime','yellow','orange','gray'];}/**
     * Predefined event styles , useful in combos etc.
     * @type {String}
     * @category Scheduled events
     */},{key:"eventStyles",get:function get(){return['plain','border','hollow','colored','line','dashed','minimal'];}}]);return TimelineEventRendering;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TimelineScroll
 */ /**
 * Functions for scrolling to events, dates etc.
 *
 * @mixin
 */var TimelineScroll=function TimelineScroll(Target){return(/*#__PURE__*/function(_ref281){_inherits2(TimelineScroll,_ref281);function TimelineScroll(){_classCallCheck2(this,TimelineScroll);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineScroll).apply(this,arguments));}_createClass2(TimelineScroll,[{key:"scrollToDate",//region Scroll to date
/**
     * Scrolls the time line "tick" encapsulating the passed `Date` into view according to the passed options.
     * @param {Date} date The date to which to scroll the time line
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the tick: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset=20] edgeOffset A margin *in pixels* around the tick to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     */value:function scrollToDate(date){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this,scroller=me.timeAxisSubGrid.scrollable,scrollerViewport=scroller.viewport,localCoordinate=me.getCoordinateFromDate(date,true),target=me.isHorizontal?new Rectangle(me.getCoordinateFromDate(date,false),scrollerViewport.y,me.timeAxisViewModel.tickSize,scrollerViewport.height):new Rectangle(scrollerViewport.x,me.getCoordinateFromDate(date,false),scrollerViewport.width,me.timeAxisViewModel.tickSize);return me.scrollToCoordinate(localCoordinate,target,date,options);}/**
     * Scrolls to current time.
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the tick: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset=20] edgeOffset A margin *in pixels* around the tick to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     */},{key:"scrollToNow",value:function scrollToNow(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return this.scrollToDate(new Date(),options);}/**
     * Used by {@link #function-scrollToDate} to scroll to correct coordinate.
     * @param {Number} localCoordinate Coordinate to scroll to
     * @param {Date} date Date to scroll to, used for reconfiguring the time axis
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the tick: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin *in pixels* around the tick to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     * @private
     */},{key:"scrollToCoordinate",value:function scrollToCoordinate(localCoordinate,target,date){var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var me=this;// Not currently have this date in a timeaxis. Ignore negative scroll in weekview, it can be just 'filtered' with
// startTime/endTime config
if(localCoordinate<0){// adjust the timeaxis first
var halfVisibleSpan=(me.timeAxis.endDate-me.timeAxis.startDate)/2,newStartDate=new Date(date.getTime()-halfVisibleSpan),newEndDate=new Date(date.getTime()+halfVisibleSpan);// We're trying to reconfigure time span to current dates, which means we are as close to center as it
// could be. Do nothing then.
// covered by 1102_panel_api
if(newStartDate-me.startDate!==0&&newEndDate-me.endDate!==0){me.setTimeSpan(newStartDate,newEndDate);return me.scrollToDate(date,options);}return;}return me.timeAxisSubGrid.scrollable.scrollIntoView(target,options);}//endregion
//region Relative scrolling
// These methods are important to users because although they are mixed into the top level Grid/Scheduler,
// for X scrolling the explicitly target the SubGrid that holds the scheduler.
/**
     * Get/set horizontal scroll. Applies to the SubGrid that holds the scheduler
     * @property {Number}
     * @category Scrolling
     */},{key:"scrollHorizontallyTo",/**
     * Horizontal scrolling. Applies to the SubGrid that holds the scheduler
     * @param {Number} x
     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @returns {Promise} A promise which is resolved when the scrolling has finished.
     */value:function scrollHorizontallyTo(coordinate){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return this.timeAxisSubGrid.scrollable.scrollTo(coordinate,null,options);}/**
     * Vertical scrolling
     * @param {Number} y
     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @returns {Promise} A promise which is resolved when the scrolling has finished.
     */},{key:"scrollVerticallyTo",value:function scrollVerticallyTo(y){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return this.scrollable.scrollTo(null,y,options);}/**
     * Scrolls the subgrid that contains the scheduler
     * @param {Number} x
     * @param {Object|Boolean} [options] How to scroll. May be passed as `true` to animate.
     * @param {Object|Boolean|Number} [options.animate] Set to `true` to animate the scroll by 300ms,
     * or the number of milliseconds to animate over, or an animation config object.
     * @param {Number} [options.animate.duration] The number of milliseconds to animate over.
     * @param {String} [options.animate.easing] The name of an easing function.
     * @returns {Promise} A promise which is resolved when the scrolling has finished.
     */},{key:"scrollTo",value:function scrollTo(x){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return this.timeAxisSubGrid.scrollable.scrollTo(x,null,options);}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"scrollLeft",set:function set(left){this.timeAxisSubGrid.scrollable.x=left;}/**
     * Get/set vertical scroll
     * @property {Number}
     * @category Scrolling
     */,get:function get(){return this.timeAxisSubGrid.scrollable.x;}},{key:"scrollTop",set:function set(top){this.scrollable.y=top;},get:function get(){return this.scrollable.y;}},{key:"widgetClass",get:function get(){}}]);return TimelineScroll;}(Target||Base));};var timeAxisColumnConfigs=['viewPreset','eventBarTextField','eventRenderer','eventRendererThisObj','eventBodyTemplate'],exitTransition={fn:'exitTransition',delay:0,cancelOutstanding:true};/**
 * @module Scheduler/view/TimelineBase
 */ /**
 * Abstract base class used by timeline based components such as Scheduler and Gantt. Based on Grid, supplies a "locked"
 * region for columns and a "normal" for rendering of events etc.
 * @abstract
 *
 * @mixes Scheduler/view/mixin/TimelineDateMapper
 * @mixes Scheduler/view/mixin/TimelineDomEvents
 * @mixes Scheduler/view/mixin/TimelineEventRendering
 * @mixes Scheduler/view/mixin/TimelineScroll
 * @mixes Scheduler/view/mixin/TimelineViewPresets
 * @mixes Scheduler/view/mixin/TimelineZoomable
 *
 * @extends Grid/view/Grid
 */var TimelineBase=/*#__PURE__*/function(_base$mixes4){_inherits2(TimelineBase,_base$mixes4);function TimelineBase(){_classCallCheck2(this,TimelineBase);return _possibleConstructorReturn2(this,_getPrototypeOf2(TimelineBase).apply(this,arguments));}_createClass2(TimelineBase,[{key:"construct",//endregion
//region Init
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this,region=config.schedulerRegion||'normal',_config$subGridConfig=config.subGridConfigs,subGridConfigs=_config$subGridConfig===void 0?{}:_config$subGridConfig;config.subGridConfigs=subGridConfigs;subGridConfigs[region]=subGridConfigs[region]||{};subGridConfigs[region].headerClass=Header$1;// If user have not specified a width or flex for scheduler region, default to flex=1
if(!('flex'in subGridConfigs[region]||'width'in subGridConfigs[region])){subGridConfigs[region].flex=1;}_get2(_getPrototypeOf2(TimelineBase.prototype),"construct",this).call(this,config);// Buffer resize, since resize does full redraw it is costly
me.onSchedulerViewportResize=me.throttle(me.onSchedulerViewportResize,250);me.initDomEvents();me.currentOrientation.init();me.rowManager.on('refresh',function(){me.forceLayout=false;});if(me.loadMask&&me.crudManager&&me.crudManager.isLoading){// Show loadmask if crud manager is already loading
me.maskBody(me.loadMask);}}},{key:"doDestroy",value:function doDestroy(){var me=this,currentOrientation=this.currentOrientation;if(currentOrientation){currentOrientation.destroy();}// Break links between this TimeLine and any partners.
if(me.partneredWith){me.partneredWith.forEach(function(p){me.removePartner(p);});me.partneredWith.destroy();}_get2(_getPrototypeOf2(TimelineBase.prototype),"doDestroy",this).call(this);}},{key:"startConfigure",value:function startConfigure(config){_get2(_getPrototypeOf2(TimelineBase.prototype),"startConfigure",this).call(this,config);// partner needs to be initialized first so that the various shared
// configs are assigned first before we default them in.
this._thisIsAUsedExpression(this.partner);}},{key:"initSubGrids",value:function initSubGrids(){_get2(_getPrototypeOf2(TimelineBase.prototype),"initSubGrids",this).call(this);var me=this,timeAxisSubGrid=me.timeAxisSubGrid=me.timeAxisColumn.subGrid=me.subGrids[me.timeAxisColumn.region];// Scheduler SubGrid doesn't accept external columns moving in
timeAxisSubGrid.sealedColumns=true;timeAxisSubGrid.on({resize:me.onTimeAxisSubGridResize,thisObj:me});}/**
     * Overrides initScroll from Grid, listens for horizontal scroll to do virtual event rendering
     * @private
     */},{key:"initScroll",value:function initScroll(){var me=this,frameCount=0;_get2(_getPrototypeOf2(TimelineBase.prototype),"initScroll",this).call(this);me.on('horizontalscroll',function(_ref282){var subGrid=_ref282.subGrid,scrollLeft=_ref282.scrollLeft;if(me.rendered&&subGrid===me.timeAxisSubGrid){me.onSchedulerHorizontalScroll(subGrid,scrollLeft);}frameCount++;});if(me.testPerformance==='horizontal'){setTimeout(function(){var start=performance.now(),// eslint-disable-line no-undef
scrollSpeed=5,direction=1;var scrollInterval=setInterval(function(){scrollSpeed=scrollSpeed+5;me.scrollLeft+=(10+Math.floor(scrollSpeed))*direction;if(direction===1&&me.scrollLeft>5500){direction=-1;scrollSpeed=5;}if(direction===-1&&me.scrollLeft<=0){var done=performance.now(),// eslint-disable-line no-undef
elapsed=done-start;var timePerFrame=elapsed/frameCount,fps=1000/timePerFrame;fps=Math.round(fps*10)/10;clearInterval(scrollInterval);console.log(me.eventPositionMode,me.eventScrollMode,fps+'fps');}},0);},500);}}//endregion
//region Config getters/setters
/**
     * Returns `true` if any of the events/tasks or feature injected elements (such as ResourceTimeRanges) are within
     * the {@link #config-timeAxis}
     * @property {Boolean}
     * @readonly
     */},{key:"noFeatureElementsInAxis",// Template function to be chained in features to determine if any elements are in time axis (needed since we cannot
// currently chain getters). Negated to not break chain. First feature that has elements visible returns false,
// which prevents other features from being queried.
value:function noFeatureElementsInAxis(){}// Private getter used to piece togheter event names such as beforeEventDrag / beforeTaskDrag. Could also be used
// in templates.
},{key:"removePartner",value:function removePartner(partner){var me=this,partneredWith=me.partneredWith;if(partneredWith&&partneredWith.includes(partner)){partneredWith.remove(partner);partner.partneredWith.remove(me);partner.scrollable.removePartner(me.scrollable);partner.un({presetchange:'onPartnerPresetChange',thisObj:me});me.un({presetchange:'onPartnerPresetChange',thisObj:partner});}}},{key:"onPartnerPresetChange",value:function onPartnerPresetChange(_ref283){var preset=_ref283.preset,startDate=_ref283.startDate,endDate=_ref283.endDate,centerDate=_ref283.centerDate;if(this.viewPreset!==preset){// Passing more params directly to make zoom behave identically. See #8764
this.setViewPreset(preset,startDate,endDate,false,{centerDate:centerDate});}}},{key:"applyWorkingTime",// Translates the workingTime configs into TimeAxis#include rules, applies them and then refreshes the header and
// redraws the events
value:function applyWorkingTime(timeAxis){var me=this,config=me._workingTime;if(config){var hour=null;// Only use valid values
if(config.fromHour>=0&&config.fromHour<24&&config.toHour>config.fromHour&&config.toHour<=24&&config.toHour-config.fromHour<24){hour={from:config.fromHour,to:config.toHour};}var day=null;// Only use valid values
if(config.fromDay>=0&&config.fromDay<7&&config.toDay>config.fromDay&&config.toDay<=7&&config.toDay-config.fromDay<7){day={from:config.fromDay,to:config.toDay};}if(hour||day){timeAxis.include={hour:hour,day:day};}else{// No valid rules, restore timeAxis
timeAxis.include=null;}}else{// No rules, restore timeAxis
timeAxis.include=null;}if(me.rendered){// Refreshing header, which also recalculate tickSize and header data
me.timeAxisColumn.refreshHeader();// Update column lines
if(me.features.columnLines){me.features.columnLines.drawLines();}// Animate event changes
me.refreshWithTransition();}}/**
     * Get/set startDate. Defaults to current date if none specified.
     *
     * **Note:** If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
     * @property {Date}
     * @category Common
     */},{key:"setStartDate",/**
     * Sets the timeline start date.
     *
     * **Note:**
     * - If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
     * - If keepDuration is false and new start date is greater than end date, it will throw an exception.
     *
     * @param {Date} date The new start date
     * @param {Boolean} keepDuration Pass `true` to keep the duration of the timeline ("move" the timeline),
     * `false` to change the duration ("resize" the timeline). Defaults to `true`.
     */value:function setStartDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this,ta=me._timeAxis||{},startDate=ta.startDate,endDate=ta.endDate,mainUnit=ta.mainUnit;if(me._timeAxis&&endDate){if(date){var calcEndDate=endDate;if(keepDuration&&startDate){var diff=DateHelper.diff(startDate,endDate,mainUnit,true);calcEndDate=DateHelper.add(date,diff,mainUnit);}ta.setTimeSpan(date,calcEndDate);}}else{me._tempStartDate=date;}}},{key:"setEndDate",/**
     * Sets the timeline end date
     *
     * **Note:**
     * - If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
     * - If keepDuration is false and new end date is less than start date, it will throw an exception.
     *
     * @param {Date} date The new end date
     * @param {Boolean} keepDuration Pass `true` to keep the duration of the timeline ("move" the timeline),
     * `false` to change the duration ("resize" the timeline). Defaults to `false`.
     */value:function setEndDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,ta=me._timeAxis||{},startDate=ta.startDate,endDate=ta.endDate,mainUnit=ta.mainUnit;if(me._timeAxis&&startDate){if(date){var calcStartDate=startDate;if(keepDuration&&endDate){var diff=DateHelper.diff(startDate,endDate,mainUnit,true);calcStartDate=DateHelper.add(date,-diff,mainUnit);}ta.setTimeSpan(calcStartDate,date);}}else{me._tempEndDate=date;}}},{key:"onLocaleChange",//endregion
//region Event handlers
value:function onLocaleChange(){// Clear events in case they use date as part of displayed info
//        this.currentOrientation.cache.clear();
_get2(_getPrototypeOf2(TimelineBase.prototype),"onLocaleChange",this).call(this);this.timeAxisColumn.refreshHeader();}/**
     * This is a template method called by Widget when the encapsulating Scheduler SubGrid size.
     * Width changes *might* affect the Scheduler SubGrid, and *that* will trigger its
     * handler below, if that is the case. Here, we are only interested in the height changing because the
     * encapsulating grid is what dictates the scrolling viewport height.
     * @param {HTMLElement} element
     * @param {Number} width
     * @param {Number} height
     * @param {Number} oldWidth
     * @param {Number} oldHeight
     * @private
     */},{key:"onInternalResize",value:function onInternalResize(element,width,height,oldWidth,oldHeight){// Cache before its updated by super call.
var oldSchedulerBodyRect=this._bodyRectangle;_get2(_getPrototypeOf2(TimelineBase.prototype),"onInternalResize",this).call(this,element,width,height,oldWidth,oldHeight);// The Scheduler (The Grid) dictates the viewport height.
if(oldSchedulerBodyRect&&height!==oldHeight){this.onSchedulerViewportResize(oldSchedulerBodyRect.width,this.bodyContainer.offsetHeight,oldSchedulerBodyRect.width,oldSchedulerBodyRect.height);}}/**
     * This is an event handler triggered when the Scheduler SubGrid changes size.
     * Its height changes when content height changes, and that is not what we are
     * interested in here. If the *width* changes, that means the visible viewport
     * has changed size.
     * @param {HTMLElement} element
     * @param {Number} width
     * @param {Number} height
     * @param {Number} oldWidth
     * @param {Number} oldHeight
     * @private
     */},{key:"onTimeAxisSubGridResize",value:function onTimeAxisSubGridResize(_ref284){var width=_ref284.width,height=_ref284.height,oldWidth=_ref284.oldWidth,oldHeight=_ref284.oldHeight;// The timeAxisSubGrid dictates the viewport width.
if(width!==oldWidth){var schedulerBodyRect=this._bodyRectangle;this.onSchedulerViewportResize(width,schedulerBodyRect.height,oldWidth,schedulerBodyRect.height);}}// Note: This function is throttled in construct(), since it will do a full redraw per call
},{key:"onSchedulerViewportResize",value:function onSchedulerViewportResize(width,height,oldWidth,oldHeight){var me=this,subGrid=me.timeAxisSubGrid;if(me.rendered){me.currentOrientation.onViewportResize(width,height,oldWidth,oldHeight);// Ignore resize caused by toggling vertical scrollbar visibility, since those might otherwise lead to an
// infinite loop when the difference between on/off causes horizontal scrolling to also toggle
if(me._lastOverflow==null||me._lastOverflow===subGrid.overflowingHorizontally){// Responding by triggering a layout in the same frame seems to trigger an infinite resize
// loop when using ResizeObserver, so push the response out into the next frame.
me.setTimeout(function(){me.timeAxisViewModel.availableSpace=me.isHorizontal?subGrid.width:subGrid.height;},0);me.partneredWith&&!me.isSyncingFromPartner&&me.partneredWith.forEach(function(p){if(!p.isSyncingFromPartner){p.isSyncingFromPartner=true;me.eachSubGrid(function(subGrid){var partnerSubGrid=p.subGrids[subGrid.region];// If there is a difference, sync the partner SubGrid state
if(partnerSubGrid.width!==subGrid.width){if(subGrid.collapsed){partnerSubGrid.collapse();}else{if(partnerSubGrid.collapsed){partnerSubGrid.expand();}// When using flexed subgrid, make sure flex values has prio over width
if(subGrid.flex){// If flex values match, resize should be fine without changing anything
if(subGrid.flex!==partnerSubGrid.flex){partnerSubGrid.flex=subGrid.flex;}}else{partnerSubGrid.width=subGrid.width;}}}});p.isSyncingFromPartner=false;}});}// NOTE: Moved out of the if-statement above since that prevented event from being triggered in all
// scenarios where size has changed
/**
             * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.
             * This happens when the grid changes height, or when the subgrid which encapsulates the
             * scheduler column changes width.
             * @event timelineViewportResize
             * @param {Common.widget.Widget} source - This Scheduler
             * @param {Number} width The new width
             * @param {Number} height The new height
             * @param {Number} oldWidth The old width
             * @param {Number} oldHeight The old height
             */me.trigger('timelineViewportResize',{width:width,height:height,oldWidth:oldWidth,oldHeight:oldHeight});me._lastOverflow=subGrid.overflowingHorizontally;}}},{key:"onTimeAxisViewModelUpdate",value:function onTimeAxisViewModelUpdate(){this.updateCanvasSize();if(this.isHorizontal){// might also have changed total width of timeaxiscolumn, make sure scrollers are in sync
// TODO: should this be detected by resizeobserver instead? but it is the actual column changing size and not the subgrid so might not make sense
this.callEachSubGrid('refreshFakeScroll');this.refreshVirtualScrollbars();}}//endregion
//region Mode
},{key:"updateCanvasSize",value:function updateCanvasSize(){var me=this;if(me.isHorizontal){if(me.backgroundCanvas){me.backgroundCanvas.style.width="".concat(me.timeAxisViewModel.totalSize,"px");}me.foregroundCanvas.style.width="".concat(me.timeAxisViewModel.totalSize,"px");}else{if(me.backgroundCanvas){me.backgroundCanvas.style.width=DomHelper.setLength(me.timeAxisColumn.width);}me.foregroundCanvas.style.width=DomHelper.setLength(me.timeAxisColumn.width);}}//endregion
//region Grid overrides
},{key:"refresh",value:function refresh(){var forceLayout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var refreshMoreFn=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var me=this;if(me.rendered&&!me.refreshSuspended){if(me.hasVisibleEvents){me.refreshRows(false,forceLayout);if(refreshMoreFn){refreshMoreFn();}}// Even if there are no events in our timeline, Features
// assume there will be a refresh event from the RowManager
// after a refresh request so fire it here.
else{me.rowManager.trigger('refresh');}}}},{key:"render",value:function render(element){var me=this,schedulerEl=me.timeAxisSubGridElement;if(me.useBackgroundCanvas){me._backgroundCanvas=DomHelper.createElement({className:'b-sch-background-canvas',parent:schedulerEl,nextSibling:schedulerEl.firstElementChild});}var fgCanvas=me._foregroundCanvas=DomHelper.createElement({className:'b-sch-foreground-canvas',style:"font-size:".concat(me.rowHeight-me.barMargin*2,"px"),parent:schedulerEl});me.timeAxisSubGrid.insertRowsBefore=fgCanvas;_get2(_getPrototypeOf2(TimelineBase.prototype),"render",this).call(this,element);}// TODO: refreshRows -> refresh in grid?
},{key:"refreshRows",value:function refreshRows(){var returnToTop=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var reLayoutEvents=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var me=this;if(me.isConfiguring){return;}me.currentOrientation.refreshRows(reLayoutEvents);_get2(_getPrototypeOf2(TimelineBase.prototype),"refreshRows",this).call(this,returnToTop);}// TODO: Dont think we have this in grid any longer??
},{key:"reRender",value:function reRender(){var skipPreRenderRefresh=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.refreshFromRerender=true;_get2(_getPrototypeOf2(TimelineBase.prototype),"reRender",this).call(this,skipPreRenderRefresh);this.initDomEvents();}//endregion
//region Other
},{key:"getDateConstraints",value:function getDateConstraints(){}// duration = false prevents transition
},{key:"runWithTransition",value:function runWithTransition(fn,duration){var me=this;// Do not attempt to enter animating state if we are not visible
if(me.isVisible){// Allow calling with true/false to keep code simpler in other places
if(duration==null||duration===true){duration=me.transitionDuration;}// Ask Grid superclass to enter the animated state if requested and enabled.
if(duration&&me.enableEventAnimations){me.isAnimating=true;// Exit animating state in duration milliseconds.
// Cancel any previous outstanding exit timer.
exitTransition.delay=duration;me.setTimeout(exitTransition);}}fn();}},{key:"exitTransition",value:function exitTransition(){this.isAnimating=false;this.trigger('transitionend');}/**
     * Refreshes the grid with transitions enabled.
     */},{key:"refreshWithTransition",value:function refreshWithTransition(forceLayout){var _this73=this;this.runWithTransition(function(){return _this73.refresh(forceLayout);});}/**
     * Returns an object representing the visible date range, with `startDate` and `endDate` properties
     * @return {Object} The date range
     * @return {Date} return.startDate Start date
     * @return {Date} return.endDate End date
     */},{key:"getVisibleDateRange",value:function getVisibleDateRange(){return this.currentOrientation.getVisibleDateRange();}//endregion
},{key:"hasVisibleEvents",get:function get(){var _this74=this;return!this.noFeatureElementsInAxis()||this.eventStore.storage.values.some(function(t){return _this74.timeAxis.isTimeSpanInAxis(t);});}},{key:"capitalizedEventName",get:function get(){if(!this._capitalizedEventName){this._capitalizedEventName=StringHelper.capitalizeFirstLetter(this.scheduledEventName);}return this._capitalizedEventName;}},{key:"partner",set:function set(partner){var me=this,partneredWith=me.partneredWith||(me.partneredWith=new Collection());me._partner=partner;if(!partneredWith.includes(partner)){// Each must know about the other so that they can sync others upon region resize
partneredWith.add(partner);(partner.partneredWith||(partner.partneredWith=new Collection())).add(me);partner.on({presetchange:'onPartnerPresetChange',thisObj:me});me.on({presetchange:'onPartnerPresetChange',thisObj:partner});me.setConfig({viewPreset:partner.viewPreset,timeAxis:partner.timeAxis,timeAxisViewModel:partner.timeAxisViewModel});// When initScroll comes round, make sure it syncs with the partner
me.initScroll=FunctionHelper.createSequence(me.initScroll,function(){me.scrollable.addPartner(partner.scrollable,'x');},me);}},get:function get(){return this._partner;}},{key:"timeAxisColumn",get:function get(){return this.columns&&this._timeAxisColumn;}},{key:"columns",get:function get(){// Maintainer. If we do not implement a getter to go along with our setter, this
// property becomes unreadable at this class level.
return _get2(_getPrototypeOf2(TimelineBase.prototype),"columns",this);},set:function set(columns){var me=this;var timeAxisColumnIndex=columns&&columns.length,timeAxisColumnConfig={},timeAxisColumn,value;// No columns means destroy
if(columns){columns.forEach(function(col,index){if(col.type==='timeAxis'){timeAxisColumnIndex=index;timeAxisColumnConfig=col;}});// TODO : This is scheduler specific, override `set columns` instead
// No additional columns allowed in vertical mode, but store the specified set in case we toggle mode later
if(me.isVertical){me._horizontalColumns=columns;columns=[{type:'verticalTimeAxis',locked:true,timeline:me},columns[timeAxisColumnIndex]];timeAxisColumnIndex=1;}else{// We're going to mutate this array which we do not own, so copy it first.
columns=columns.slice();}// Fix up the timeAxisColumn config in place
timeAxisColumnConfig=columns[timeAxisColumnIndex]=Object.assign({type:'timeAxis',locked:false,timeline:me,cellCls:me.timeCellCls,mode:me.mode},timeAxisColumnConfig);// Pass these configs into the timeAxisColumnConfig
timeAxisColumnConfigs.forEach(function(configName){value=me[configName];if(value!=null){timeAxisColumnConfig[configName]=value;}});}// Invoke Grid's setter. Will create a ColumnStore which is returned by the columns setter.
_set(_getPrototypeOf2(TimelineBase.prototype),"columns",columns,this,true);if(columns){timeAxisColumn=me._timeAxisColumn=me.columns.getAt(timeAxisColumnIndex);// Set up event relaying early
timeAxisColumn.relayAll(me);}}},{key:"eventCls",set:function set(eventCls){var me=this;me._eventCls=eventCls;if(!me.eventSelector){me.eventSelector=".".concat(eventCls,"-wrap");me.unreleasedEventSelector="".concat(me.eventSelector,":not(.b-sch-released)");}if(!me.eventInnerSelector){me.eventInnerSelector='.'+eventCls;}},get:function get(){return this._eventCls;}},{key:"timeAxisViewModel",set:function set(timeAxisViewModel){var me=this,tavmListeners={update:'onTimeAxisViewModelUpdate',prio:100,thisObj:me};if(me.partner&&!timeAxisViewModel){return;}if(timeAxisViewModel instanceof TimeAxisViewModel){timeAxisViewModel.on(tavmListeners);}else{timeAxisViewModel=Object.assign({mode:me._mode,snap:me.snap,forceFit:me.forceFit,timeAxis:me.timeAxis,listeners:tavmListeners},timeAxisViewModel);timeAxisViewModel=new TimeAxisViewModel(timeAxisViewModel);}me._timeAxisViewModel=timeAxisViewModel;}/**
     * The internal view model, describing the visual representation of the time axis.
     * @property {Scheduler.view.model.TimeAxisViewModel}
     * @readonly
     */,get:function get(){if(!this._timeAxisViewModel){this.timeAxisViewModel=null;}return this._timeAxisViewModel;}},{key:"timeAxis",set:function set(timeAxis){var me=this;if(me.partner&&!timeAxis){return;}me.timeAxisDetacher&&me.timeAxisDetacher();if(!(timeAxis instanceof TimeAxis)){timeAxis=ObjectHelper.assign({viewPreset:me.viewPreset,autoAdjust:me.autoAdjustTimeAxis,mode:'plain',weekStartDay:me.weekStartDay},timeAxis);if(me.startDate){timeAxis.startDate=me.startDate;}if(me.endDate){timeAxis.endDate=me.endDate;}if(me.workingTime){me.applyWorkingTime(timeAxis);}timeAxis=new TimeAxis(timeAxis);}// Inform about reconfiguring the timeaxis, to allow users to react to start & end date changes
me.timeAxisDetacher=timeAxis.on({thisObj:me,reconfigure:function reconfigure(_ref285){var config=_ref285.config;/**
                 * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.
                 * @event timeAxisChange
                 * @param {Scheduler.view.Scheduler} source - This Scheduler
                 * @param {Object} config Config object used to reconfigure the time axis.
                 * @param {Date} config.start New start date (if supplied)
                 * @param {Date} config.end New end date (if supplied)
                 */me.trigger('timeAxisChange',{config:config});}});me._timeAxis=timeAxis;},get:function get(){if(!this._timeAxis){this.timeAxis=null;}return this._timeAxis;}/**
     * Get/set working time. Assign `null` to stop using working time. See {@link #config-workingTime} config for details.
     * @property {Object}
     */},{key:"workingTime",set:function set(config){this._workingTime=config;if(!this.isConfiguring){this.applyWorkingTime(this.timeAxis);}},get:function get(){return this._workingTime;}},{key:"startDate",set:function set(date){this.setStartDate(date);},get:function get(){var me=this;if(me._timeAxis){return me._timeAxis.startDate;}return me._tempStartDate||new Date();}/**
     * Get/set endDate. Defaults to startDate + default span of the used ViewPreset.
     *
     * **Note:** If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
     * @property {Date}
     * @category Common
     */},{key:"endDate",set:function set(date){this.setEndDate(date);},get:function get(){var me=this;if(me._timeAxis){return me._timeAxis.endDate;}return me._tempEndDate||DateHelper.add(me.startDate,me.viewPreset.defaultSpan,me.viewPreset.mainHeader.unit);}},{key:"features",get:function get(){return _get2(_getPrototypeOf2(TimelineBase.prototype),"features",this);}// add region resize by default
,set:function set(features){features=features===true?{}:features;if(!('regionResize'in features)){features.regionResize=true;}_set(_getPrototypeOf2(TimelineBase.prototype),"features",features,this,true);}},{key:"eventStyle",get:function get(){return this._eventStyle;},set:function set(style){var me=this;me._eventStyle=style;if(me.rendered){me.refreshWithTransition();}}},{key:"eventColor",get:function get(){return this._eventColor;},set:function set(color){var me=this;me._eventColor=color;if(me.rendered){me.refreshWithTransition();}}},{key:"currentOrientation",get:function get(){throw new Error('Implement in subclass');}// Horizontal is the default, overridden in scheduler
},{key:"isHorizontal",get:function get(){return true;}//endregion
//region Canvases and elements
},{key:"backgroundCanvas",get:function get(){return this._backgroundCanvas;}},{key:"foregroundCanvas",get:function get(){return this._foregroundCanvas;}},{key:"svgCanvas",get:function get(){var me=this;if(!me._svgCanvas){var svg=me._svgCanvas=document.createElementNS('http://www.w3.org/2000/svg','svg');me.foregroundCanvas.appendChild(svg);me.trigger('svgCanvasCreated');}return me._svgCanvas;}},{key:"timeAxisSubGridElement",get:function get(){return this.timeAxisColumn&&this.timeAxisColumn.subGridElement;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.
             * When omitted, the week start day is retrieved from the active locale class.
             * @config {Number}
             * @category Time axis
             */weekStartDay:DateHelper.weekStartDay,/**
             * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.
             * This object will be used to populate TimeAxis {@link Scheduler.data.TimeAxis#config-include} property.
             *
             * Using it results in a non-continuous time axis. Any ticks not covered by the working days and hours will
             * be excluded. Events within larger ticks (for example if using week as the unit for ticks) will be
             * stretched to fill the gap otherwise left by the non working hours.
             *
             * As with end dates, `toDay` and `toHour` are exclusive. Thus `toDay : 6` means that day 6 (saturday) will
             * not be included.
             *
             *
             * **NOTE:** When this feature is enabled {@link Scheduler.view.mixin.TimelineZoomable Zooming feature} is not supported. It's recommended to disable zooming controls:
             *
             * ```javascript
             * new Scheduler({
             *     zoomOnMouseWheel          : false,
             *     zoomOnTimeAxisDoubleClick : false,
             *     ...
             * });
             * ```
             *
             * @config {Object}
             * @category Time axis
             */workingTime:null,/**
             * The backing store providing the input date data for the timeline panel. Created automatically if none
             * supplied.
             * @config {Scheduler.data.TimeAxis}
             * @category Time axis
             */timeAxis:null,/**
             * The backing view model for the visual representation of the time axis.
             * Either a real instance or a simple config object.
             * @private
             * @config {Scheduler.view.model.TimeAxisViewModel|Object}
             * @category Time axis
             */timeAxisViewModel:null,/**
             * You can set this option to `false` to make the timeline panel start and end on the exact provided
             * {@link #config-startDate}/{@link #config-endDate} w/o adjusting them.
             * @config {Boolean}
             * @default
             * @category Time axis
             */autoAdjustTimeAxis:true,/**
             * The start date of the timeline. If omitted, and a TimeAxis has been set, the start date of the provided {@link Scheduler.data.TimeAxis} will be used.
             * If no TimeAxis has been configured, it'll use the start/end dates of the loaded event dataset. If no date information exists in the event data
             * set, it defaults to the current date and time.
             *
             * **Note:** If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
             * @config {Date}
             * @category Common
             */startDate:null,/**
             * The end date of the timeline. If omitted, it will be calculated based on the {@link #config-startDate} setting and
             * the 'defaultSpan' property of the current {@link Scheduler.view.mixin.TimelineViewPresets#config-viewPreset}.
             *
             * **Note:** If you need to set start and end date at the same time, use {@link Scheduler.view.mixin.TimelineZoomable#function-setTimeSpan} method.
             * @config {Date}
             * @category Common
             */endDate:null,/**
             * true to snap to resolution increment while interacting with scheduled events.
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */snap:false,/**
             * Affects drag drop and resizing of events when {@link #config-snap} is enabled. If set to `true`, dates will be snapped relative to event start.
             * e.g. for a zoom level with timeResolution = { unit: "s", increment: "20" }, an event that starts at 10:00:03 and is dragged would snap its start date to 10:00:23, 10:00:43 etc.
             * When set to `false`, dates will be snapped relative to the timeAxis startDate (tick start) - 10:00:03, 10:00:20, 10:00:40 etc.
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */snapRelativeToEventStartDate:false,/**
             * Set to true to force the time columns to fit to the available horizontal space.
             * @config {Boolean}
             * @default
             * @category Time axis
             */forceFit:false,/**
             * CSS class to add to rendered events
             * @config {String}
             * @category CSS
             * @private
             */eventCls:null,/**
             * Returns dates that will constrain resize and drag operations. The method will be called with the Resource, and
             * for operations on existing events - the event. For drag create operation, the mousedown date will be passed as the second parameter
             * @return {Object} Constraining object
             * @return {Date} return.start Start date
             * @return {Date} return.end End date
             * @config {Number}
             * @category Scheduled events
             */getDateConstraints:null,/**
             * CSS class to add to cells in the timeaxis column
             * @config {String}
             * @category CSS
             * @private
             */timeCellCls:null,timeCellSelector:null,scheduledEventName:null,/**
             * Create event on double click if scheduler is not in read only mode.
             * Set to false to turn creating off.
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */createEventOnDblClick:true,//dblClickTime : 200,
/**
             * A CSS class to apply to each event in the view on mouseover.
             * @config {String}
             * @category CSS
             * @private
             */overScheduledEventClass:null,// allow the panel to prevent adding the hover CSS class in some cases - during drag drop operations
preventOverCls:false,// The last hovered over event bar HTML node
hoveredEventNode:null,// This setting is set to true by features that need it
useBackgroundCanvas:false,/**
             * Set to `false` if you don't want event bar DOM updates to animate. Animations are disabled in IE11 by default.
             * @config {Boolean}
             * @default true
             * @category Scheduled events
             */enableEventAnimations:!BrowserHelper.isIE11,disableGridRowModelWarning:true,// does not look good with locked columns and also interferes with event animations
animateRemovingRows:false,/**
             * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),
             * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.
             * @config {Scheduler.view.TimelineBase}
             * @category Time axis
             */partner:null,schedulerRegion:'normal',transitionDuration:200,// internal timer id reference
animationTimeout:null,/**
             * How to handle milestones during event layout. Options are:
             * * default - Milestones do not affect event layout
             * * estimate - Milestone width is estimated by multiplying text length with Scheduler#milestoneCharWidth
             * * data - Milestone width is determined by checking EventModel#milestoneWidth
             * * measure - Milestone width is determined by measuring label width
             * Please note that currently text width is always determined using EventModel#name.
             * Also note that only 'default' is supported by eventStyles line, dashed and minimal.
             * @config {String}
             * @default
             * @category Scheduled events
             */milestoneLayoutMode:'default',/**
             * Region to which columns are added when they have none specified
             * @config {string}
             * @default
             * @category Misc
             */defaultRegion:'locked'};}}]);return TimelineBase;}(base(Grid).mixes(TimelineDateMapper,TimelineDomEvents,TimelineEventRendering,TimelineScroll,TimelineViewPresets,TimelineZoomable));TimelineBase._$name='TimelineBase';// extends locale from grid
//const locale = Object.assign(gridLocale, {
var locale$2={ExcelExporter:{'No resource assigned':'No resource assigned'},ResourceInfoColumn:{eventCountText:function eventCountText(data){return data+' event'+(data!==1?'s':'');}},Dependencies:{from:'From',to:'To',valid:'Valid',invalid:'Invalid',Checking:'Checking…'},DependencyEdit:{From:'From',To:'To',Type:'Type',Lag:'Lag','Edit dependency':'Edit dependency',Save:'Save',Delete:'Delete',Cancel:'Cancel',StartToStart:'Start to Start',StartToEnd:'Start to End',EndToStart:'End to Start',EndToEnd:'End to End'},EventEdit:{Name:'Name',Resource:'Resource',Start:'Start',End:'End',Save:'Save',Delete:'Delete',Cancel:'Cancel','Edit Event':'Edit event'},Scheduler:{'Add event':'Add event','Delete event':'Delete event','Unassign event':'Unassign event'},HeaderContextMenu:{pickZoomLevel:'Zoom',activeDateRange:'Date range',startText:'Start date',endText:'End date',todayText:'Today'},EventFilter:{filterEvents:'Filter tasks',byName:'By name'},TimeRanges:{showCurrentTimeLine:'Show current timeline'},PresetManager:{minuteAndHour:{topDateFormat:'ddd MM/DD, hA'},hourAndDay:{topDateFormat:'ddd MM/DD'},weekAndDay:{displayDateFormat:'hh:mm A'}}};// cannot use Object.assign above in IE11. also dont want to have polyfill in locale
for(var i in locale$1){locale$2[i]=locale$1[i];}LocaleManagerSingelton.registerLocale('En',{desc:'English',locale:locale$2});/**
 * @module Scheduler/view/mixin/SchedulerDom
 */ /**
 * Mixin with EventModel and ResourceModel <-> HTMLElement mapping functions
 *
 * @mixin
 */var SchedulerDom=function SchedulerDom(Target){return(/*#__PURE__*/function(_ref286){_inherits2(SchedulerDom,_ref286);function SchedulerDom(){_classCallCheck2(this,SchedulerDom);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerDom).apply(this,arguments));}_createClass2(SchedulerDom,[{key:"getElementFromAssignmentRecord",//region Get
/**
     * Returns a single HTMLElement representing an event record assigned to a specific resource.
     * @param {Scheduler.model.AssignmentModel} assignmentRecord An assignment record
     * @return {HTMLElement} The element representing the event record
     */value:function getElementFromAssignmentRecord(assignmentRecord){return this.currentOrientation.getElementFromEventRecord(assignmentRecord.event,assignmentRecord.resource);}/**
     * Returns a single HTMLElement representing an event record assigned to a specific resource.
     * @param {Scheduler.model.EventModel} eventRecord An event record
     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record
     * @return {HTMLElement} The element representing the event record
     */},{key:"getElementFromEventRecord",value:function getElementFromEventRecord(eventRecord,resourceRecord){return this.currentOrientation.getElementFromEventRecord(eventRecord,resourceRecord);}/**
     * Returns all the HTMLElements representing an event record.
     *
     * @param {Scheduler.model.EventModel} eventRecord An event record
     * @param {Scheduler.model.ResourceModel} [resourceRecord] A resource record
     *
     * @return {HTMLElement[]} The element(s) representing the event record
     */},{key:"getElementsFromEventRecord",value:function getElementsFromEventRecord(eventRecord,resourceRecord){return this.currentOrientation.getElementsFromEventRecord(eventRecord,resourceRecord);}/**
     * Returns the event id for a DOM id
     * @private
     * @param {String} id The id of the DOM node
     * @return {String} An event record (internal) id
     */},{key:"getEventIdFromDomNodeId",value:function getEventIdFromDomNodeId(id){var eventId=id.substring(this.eventPrefix.length).split('-')[0];// id format is "PREFIX"-eventid-resourceid[-part]
// do not want - from other sources in it, replace with ._.
// TODO: come up with something risk free
return eventId&&eventId.replace(/\._\./g,'-');}/**
     * Returns the event record for a DOM id
     * @param {String} id The id of the DOM node
     * @return {Scheduler.model.EventModel} The event record
     */},{key:"getEventRecordFromDomId",value:function getEventRecordFromDomId(id){id=this.getEventIdFromDomNodeId(id);return this.eventStore.getById(id);}/**
     * Returns a resource id for a DOM id
     * @private
     * @param {String} id An id of an event DOM node
     * @return {String} A resource record (internal) id
     */},{key:"getResourceIdFromDomNodeId",value:function getResourceIdFromDomNodeId(id){var resourceId=id.substring(this.eventPrefix.length).split('-')[1];// id format is "PREFIX"-eventid-resourceid[-part]
// do not want - from other sources in it, replace with ._.
// TODO: come up with something risk free
return resourceId&&resourceId.replace(/\._\./g,'-');}/**
     * Returns a resource record for a DOM id
     * @param {String} id An id of an event DOM node
     * @return {Scheduler.model.ResourceModel} A resource record
     */},{key:"getResourceRecordFromDomId",value:function getResourceRecordFromDomId(id){id=this.getResourceIdFromDomNodeId(id);return this.resourceStore.getById(id);}//endregion
//region Resolve
/**
     * Resolves the resource based on a dom element or event. In vertical mode, if resolving from an element higher up in
     * the hierarchy than event elements, then it is required to supply an coordinates since resources are virtual
     * columns.
     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a resource from
     * @param {Number[]} [xy] X and Y coordinates, required in some cases in vertical mode, disregarded in horizontal
     * @return {Scheduler.model.ResourceModel} The resource corresponding to the element, or null if not found.
     */},{key:"resolveResourceRecord",value:function resolveResourceRecord(elementOrEvent,xy){return this.currentOrientation.resolveRowRecord(elementOrEvent,xy);}/**
     * Returns the event record for a DOM element
     * @param {HTMLElement} element The DOM node to lookup
     * @return {Scheduler.model.EventModel} The event record
     */},{key:"resolveEventRecord",value:function resolveEventRecord(element){element=DomHelper.up(element,this.eventSelector);if(element){if(element.dataset.eventId){return this.eventStore.getById(element.dataset.eventId);}if(element.dataset.assignmentId){return this.assignmentStore.getById(element.dataset.assignmentId).event;}}return null;}// Used by shared features to resolve an event or task
},{key:"resolveTimeSpanRecord",value:function resolveTimeSpanRecord(element){return this.resolveEventRecord(element);}/**
     * Returns an assignment record for a DOM element
     * @param {HTMLElement} element The DOM node to lookup
     * @return {Scheduler.model.AssignmentModel} The assignment record
     */},{key:"resolveAssignmentRecord",value:function resolveAssignmentRecord(element){var assignmentStore=this.eventStore.assignmentStore;var assignment=null;if(assignmentStore){var eventElement=DomHelper.up(element,this.eventSelector),event=this.resolveEventRecord(eventElement),resource=this.resolveResourceRecord(eventElement);if(event&&resource){assignment=assignmentStore.getAssignmentForEventAndResource(event,resource);}}return assignment;}//endregion
// Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)
},{key:"isRowVisible",value:function isRowVisible(resourceRecord){// records in collapsed groups/brances etc are removed from processedRecords
return this.store.indexOf(resourceRecord)>=0;}/**
     * Determines width of a milestones label. How width is determined is decided by configuring Scheduler#milestoneLayoutMode.
     * Please note that currently text width is always determined using EventModel#name.
     * @param {Scheduler.model.EventModel} eventRecord
     * @returns {Number}
     */},{key:"getMilestoneLabelWidth",value:function getMilestoneLabelWidth(eventRecord){var me=this,mode=me.milestoneLayoutMode;if(mode==='measure'){var element=me.milestoneMeasureElement||(me.milestoneMeasureElement=DomHelper.createElement({className:'b-sch-event-wrap b-milestone-wrap b-measure',children:[{className:'b-sch-event b-milestone',html:"<label></label>"}],parent:me.foregroundCanvas}));element.firstElementChild.firstElementChild.innerHTML=eventRecord.name;return element.offsetWidth;}if(mode==='estimate'){return Math.max(eventRecord.name.length*me.milestoneCharWidth,me.milestoneMinWidth);}if(mode==='data'){return Math.max(eventRecord.milestoneWidth,me.milestoneMinWidth);}return 0;}},{key:"milestoneLayoutMode",set:function set(mode){var me=this;me._milestoneLayoutMode=mode;me.element.classList[mode!=='default'?'add':'remove']('b-sch-layout-milestones');me.refresh();},get:function get(){return this._milestoneLayoutMode;}},{key:"milestoneAlign",set:function set(align){this._milestoneAlign=align;this.refresh();},get:function get(){return this._milestoneAlign;}},{key:"milestoneCharWidth",set:function set(width){this._milestoneCharWidth=width;this.refresh();},get:function get(){return this._milestoneCharWidth;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerDom;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerDomEvents
 */ /**
 * Mixin that handles dom events (click etc) for scheduler and rendered events.
 *
 * @mixin
 */var SchedulerDomEvents=function SchedulerDomEvents(Target){return(/*#__PURE__*/function(_ref287){_inherits2(SchedulerDomEvents,_ref287);function SchedulerDomEvents(){_classCallCheck2(this,SchedulerDomEvents);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerDomEvents).apply(this,arguments));}_createClass2(SchedulerDomEvents,[{key:"getTimeSpanMouseEventParams",//region Events
/**
     * Triggered when user clicks an empty area in the schedule.
     * @event scheduleClick
     * @param {Scheduler.view.TimelineBase} source This TimelineBase
     * @param {Date} date Date at mouse position
     * @param {Grid.row.Row} row Clicked row
     * @param {Number} index Index of clicked resource
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered when user clicks an empty area in the schedule.
     * @event scheduleDblClick
     * @param {Scheduler.view.TimelineBase} source This TimelineBase
     * @param {Date} date Date at mouse position
     * @param {Grid.row.Row} row Double clicked row
     * @param {Number} index Index of double clicked resource
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered when user right clicks an empty area in the schedule.
     * @event scheduleContextMenu
     * @param {Scheduler.view.TimelineBase} source This TimelineBase
     * @param {Date} date Date at mouse position
     * @param {Grid.row.Row} row Clicked row
     * @param {Number} index Index of clicked resource
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for mouse down on an event.
     * @event eventMouseDown
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for mouse up on an event.
     * @event eventMouseUp
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for click on an event.
     * @event eventClick
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for double click on an event.
     * @event eventDblClick
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for right click on an event.
     * @event eventContextMenu
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for mouse over on an event.
     * @event eventMouseOver
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ /**
     * Triggered for mouse out from an event.
     * @event eventMouseOut
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord Event record
     * @param {MouseEvent} event Browser event
     */ //endregion
//region Event handling
value:function getTimeSpanMouseEventParams(eventElement,event){return{eventRecord:this.resolveEventRecord(eventElement),resourceRecord:this.resolveResourceRecord(eventElement),assignmentRecord:this.resolveAssignmentRecord(eventElement),eventElement:eventElement,event:event};}},{key:"getScheduleMouseEventParams",value:function getScheduleMouseEventParams(cellData,event){var resourceRecord=this.isVertical?this.resolveResourceRecord(event):this.store.getById(cellData.id);return{resourceRecord:resourceRecord};}/**
     * Relays keydown events as eventkeydown if we have a selected task.
     * @private
     */},{key:"onElementKeyDown",value:function onElementKeyDown(event){_get2(_getPrototypeOf2(SchedulerDomEvents.prototype),"onElementKeyDown",this).call(this,event);var me=this;if(me.selectedEvents.length){me.trigger(me.scheduledEventName+'KeyDown',{eventRecord:me.selectedEvents});}}/**
     * Relays keyup events as eventkeyup if we have a selected task.
     * @private
     */},{key:"onElementKeyUp",value:function onElementKeyUp(event){_get2(_getPrototypeOf2(SchedulerDomEvents.prototype),"onElementKeyUp",this).call(this,event);var me=this;if(me.selectedEvents.length){me.trigger(me.scheduledEventName+'KeyUp',{eventRecord:me.selectedEvents});}}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerDomEvents;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerDragResize
 */ /**
 * Mixin for triggering event editor on drag creation etc.
 * @private
 * @mixin
 */var SchedulerDragResize=function SchedulerDragResize(Target){return(/*#__PURE__*/function(_ref288){_inherits2(SchedulerDragResize,_ref288);function SchedulerDragResize(){_classCallCheck2(this,SchedulerDragResize);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerDragResize).apply(this,arguments));}_createClass2(SchedulerDragResize,[{key:"construct",value:function construct(config){var me=this;_get2(_getPrototypeOf2(SchedulerDragResize.prototype),"construct",this).call(this,config);if(me.hasFeature('eventDragCreate')){me.on({dragcreateend:me.internalOnDragCreateEnd,thisObj:me});}}},{key:"internalOnDragCreateEnd",value:function internalOnDragCreateEnd(_ref289){var eventRecord=_ref289.newEventRecord,resourceRecord=_ref289.resourceRecord;var me=this;// If an event editor is defined, it has to manage how/if/when the event is added to the event store
if(!me.eventEdit){var resourceRecords=resourceRecord?[resourceRecord]:[];// resources **Deprecated** Use `resourceRecords` instead
if(me.trigger('beforeEventAdd',{eventRecord:eventRecord,resourceRecords:resourceRecords,resources:resourceRecords})!==false){me.onEventCreated(eventRecord);me.eventStore.add(eventRecord);eventRecord.assign(resourceRecord);}}}},{key:"eventEditor",get:function get(){return this._eventEditor;},set:function set(editor){this._eventEditor=editor;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerDragResize;}(Target||Base));};/**
 * @module Scheduler/eventlayout/HorizontalLayout
 */ /**
 * Base class for HorizontalLayoutPack & HorizontalLayoutStack. Should not be used directly, instead specify
 * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in Scheduler config (stack, pack or none):
 * @example
 * let scheduler = new Scheduler({
 *   eventLayout: 'stack'
 * });
 * @abstract
 * @private
 */var HorizontalLayout=/*#__PURE__*/function(_Base11){_inherits2(HorizontalLayout,_Base11);function HorizontalLayout(){_classCallCheck2(this,HorizontalLayout);return _possibleConstructorReturn2(this,_getPrototypeOf2(HorizontalLayout).apply(this,arguments));}_createClass2(HorizontalLayout,[{key:"clearCache",value:function clearCache(resource){if(resource){delete this.nbrOfBandsByResource[resource.id];}else{this.nbrOfBandsByResource={};}}// Input:
// 1. Resource record
// 2. Array of Event models, or a function to call to receive such event records lazily
},{key:"getNumberOfBands",value:function getNumberOfBands(resource,resourceEventsOrFn){var nbrOfBandsByResource=this.nbrOfBandsByResource;if(nbrOfBandsByResource.hasOwnProperty(resource.id)){return nbrOfBandsByResource[resource.id];}var resourceEvents=typeof resourceEventsOrFn==='function'?resourceEventsOrFn():resourceEventsOrFn,eventsData=resourceEvents.map(function(event){return{start:event.startDate,end:event.endDate,event:event};});return this.applyLayout(eventsData,resource);}// TODO DOC
},{key:"applyLayout",value:function applyLayout(events,resource){var rowEvents=events.slice(),// return a number of bands required
newNbrBands=this.layoutEventsInBands(rowEvents);return this.nbrOfBandsByResource[resource.id]=newNbrBands;}}],[{key:"defaultConfig",get:function get(){return{nbrOfBandsByResource:{},bandIndexToPxConvertFn:null,bandIndexToPxConvertThisObj:null};}}]);return HorizontalLayout;}(Base);HorizontalLayout._$name='HorizontalLayout';/**
 * @module Scheduler/eventlayout/HorizontalLayoutStack
 */ /**
 * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height when to fit
 * all overlapping events.
 *
 * This layout is used by default in horizontal mode.
 *
 * @extends Scheduler/eventlayout/HorizontalLayout
 * @private
 */var HorizontalLayoutStack=/*#__PURE__*/function(_HorizontalLayout){_inherits2(HorizontalLayoutStack,_HorizontalLayout);function HorizontalLayoutStack(){_classCallCheck2(this,HorizontalLayoutStack);return _possibleConstructorReturn2(this,_getPrototypeOf2(HorizontalLayoutStack).apply(this,arguments));}_createClass2(HorizontalLayoutStack,[{key:"layoutEventsInBands",// Input: Array of event layout data
value:function layoutEventsInBands(events){var verticalPosition=0;do{var event=events[0];while(event){// Apply band height to the event cfg
event.top=this.bandIndexToPxConvertFn.call(this.bandIndexToPxConvertThisObj||this,verticalPosition,event.event);// Remove it from the array and continue searching
events.splice(events.indexOf(event),1);event=this.findClosestSuccessor(event,events);}verticalPosition++;}while(events.length>0);// Done!
return verticalPosition;}// TODO: optimize this for better performance with many events per resource
},{key:"findClosestSuccessor",value:function findClosestSuccessor(eventRenderData,events){var minGap=Infinity,closest,eventEnd=eventRenderData.endMs,gap,isMilestone=eventRenderData.event.duration===0,evt;for(var _i24=0,l=events.length;_i24<l;_i24++){evt=events[_i24];gap=evt.startMs-eventEnd;if(gap>=0&&gap<minGap&&(// Two milestones should not overlap
gap>0||evt.endMs-evt.startMs>0||!isMilestone)){closest=evt;minGap=gap;}}return closest;}}]);return HorizontalLayoutStack;}(HorizontalLayout);HorizontalLayoutStack._$name='HorizontalLayoutStack';/**
 * @module Scheduler/eventlayout/PackMixin
 */ /**
 * Mixin holding functionality shared between HorizontalLayoutPack and VerticalLayout.
 *
 * @mixin
 * @private
 */var PackMixin=function PackMixin(Target){return(/*#__PURE__*/function(_ref290){_inherits2(PackMixin,_ref290);function PackMixin(){_classCallCheck2(this,PackMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(PackMixin).apply(this,arguments));}_createClass2(PackMixin,[{key:"applyLayout",// Packs the events to consume as little space as possible
value:function applyLayout(events,applyClusterFn){var me=this,coordProp=me.coordProp,sizeProp=me.sizeProp;var slot,firstInCluster,cluster,j;for(var _i25=0,l=events.length;_i25<l;_i25++){firstInCluster=events[_i25];slot=me.findStartSlot(events,firstInCluster);cluster=me.getCluster(events,_i25);if(cluster.length>1){firstInCluster[coordProp]=slot.start;firstInCluster[sizeProp]=slot.end-slot.start;// If there are multiple slots and events in the cluster have multiple start dates, group all same-start events into first slot
j=1;while(j<cluster.length-1&&cluster[j+1].start-firstInCluster.start===0){j++;}// See if there's more than 1 slot available for this cluster, if so - first group in cluster consumes the entire first slot
var nextSlot=me.findStartSlot(events,cluster[j]);if(nextSlot&&nextSlot.start<0.8){cluster.length=j;}}var clusterSize=cluster.length,slotSize=(slot.end-slot.start)/clusterSize;// Apply fraction values
for(j=0;j<clusterSize;j++){applyClusterFn(cluster[j],j,slot,slotSize);}_i25+=clusterSize-1;}}},{key:"findStartSlot",value:function findStartSlot(events,event){var sizeProp=this.sizeProp,coordProp=this.coordProp,priorOverlappers=this.getPriorOverlappingEvents(events,event);var i;if(priorOverlappers.length===0){return{start:0,end:1};}for(i=0;i<priorOverlappers.length;i++){if(i===0&&priorOverlappers[0][coordProp]>0){return{start:0,end:priorOverlappers[0][coordProp]};}else if(priorOverlappers[i][coordProp]+priorOverlappers[i][sizeProp]<(i<priorOverlappers.length-1?priorOverlappers[i+1][coordProp]:1)){return{start:priorOverlappers[i][coordProp]+priorOverlappers[i][sizeProp],end:i<priorOverlappers.length-1?priorOverlappers[i+1][coordProp]:1};}}return false;}},{key:"getPriorOverlappingEvents",value:function getPriorOverlappingEvents(events,event){var start=event.start,end=event.end,overlappers=[];for(var _i26=0,l=events.indexOf(event);_i26<l;_i26++){if(DateHelper.intersectSpans(start,end,events[_i26].start,events[_i26].end)){overlappers.push(events[_i26]);}}overlappers.sort(this.sortOverlappers.bind(this));return overlappers;}},{key:"sortOverlappers",value:function sortOverlappers(e1,e2){return e1[this.coordProp]<e2[this.coordProp]?-1:1;}},{key:"getCluster",value:function getCluster(events,startIndex){var startEvent=events[startIndex];if(startIndex>=events.length-1){return[startEvent];}var evts=[startEvent],l=events.length;var start=startEvent.start,end=startEvent.end,i=startIndex+1;while(i<l&&DateHelper.intersectSpans(start,end,events[i].start,events[i].end)){evts.push(events[i]);start=DateHelper.max(start,events[i].start);end=DateHelper.min(events[i].end,end);i++;}return evts;}}],[{key:"defaultConfig",get:function get(){return{coordProp:'top',sizeProp:'height'};}}]);return PackMixin;}(Target||Base));};/**
 * @module Scheduler/eventlayout/HorizontalLayoutPack
 */ /**
 * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit
 * available row height
 *
 * @extends Scheduler/eventlayout/HorizontalLayout
 * @mixes Scheduler/eventlayout/PackMixin
 * @private
 */var HorizontalLayoutPack=/*#__PURE__*/function(_PackMixin){_inherits2(HorizontalLayoutPack,_PackMixin);function HorizontalLayoutPack(){_classCallCheck2(this,HorizontalLayoutPack);return _possibleConstructorReturn2(this,_getPrototypeOf2(HorizontalLayoutPack).apply(this,arguments));}_createClass2(HorizontalLayoutPack,[{key:"applyLayout",// Packs the events to consume as little space as possible
value:function applyLayout(events){var _this75=this;_get2(_getPrototypeOf2(HorizontalLayoutPack.prototype),"applyLayout",this).call(this,events,function(event,j,slot,slotSize){event.height=slotSize;event.top=slot.start+j*slotSize;});events.forEach(function(event){Object.assign(event,_this75.bandIndexToPxConvertFn.call(_this75.bandIndexToPxConvertThisObj||_this75,event.top,event.height,null,event.event));});}}]);return HorizontalLayoutPack;}(PackMixin(HorizontalLayout));HorizontalLayoutPack._$name='HorizontalLayoutPack';/**
 * @module Scheduler/view/mixin/SchedulerEventRendering
 */var hyphenRe=/-/g;/**
 * Functions to handle event rendering (EventModel -> dom elements).
 *
 * @mixin
 */var SchedulerEventRendering=function SchedulerEventRendering(Target){return(/*#__PURE__*/function(_ref291){_inherits2(SchedulerEventRendering,_ref291);function SchedulerEventRendering(){_classCallCheck2(this,SchedulerEventRendering);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerEventRendering).apply(this,arguments));}_createClass2(SchedulerEventRendering,[{key:"getEventsToRender",//endregion
//region Event rendering
// Chainable function called with the events to render for a specific resource. Allows features to add/remove.
// Chained by ResourceTimeRanges
value:function getEventsToRender(resource,events){return events;}/**
     * Rerenders events for specified resource (by rerendering the entire row).
     * @param {Scheduler.model.ResourceModel} resourceRecord
     */},{key:"repaintEventsForResource",value:function repaintEventsForResource(resourceRecord/*, refreshSelections*/){var me=this;if(me.isHorizontal){me.currentOrientation.cache.clearRow(resourceRecord.id);var row=me.getRowFor(resourceRecord);if(row){// Update the affected row, if it changes height RowManger will take care of translating the rest of the rows
row.render();}}// TODO: PORT selection model not ported yet
// if (refreshSelections) {
//     const sm     = me.getEventSelectionModel(),
//           events = me.getEventStore().getEventsForResource(resourceRecord);
//
//     events.forEach(ev =>
//         sm.forEachEventRelatedSelection(ev, selectedRecord =>
//             me.onEventBarSelect(selectedRecord, true)
//         )
//     );
// }
}/**
     * Rerenders the events for all resources connected to the specified event
     * @param {Scheduler.model.EventModel} eventRecord
     * @private
     */},{key:"repaintEvent",value:function repaintEvent(eventRecord){var _this76=this;var resources=this.eventStore.getResourcesForEvent(eventRecord);resources.forEach(function(resourceRecord){return _this76.repaintEventsForResource(resourceRecord);});}//endregion
//region Template
/**
     * Generates data used in the template when rendering an event. For example which css classes to use. Also applies
     * #eventBodyTemplate and calls the {@link #config-eventRenderer}.
     * @private
     * @param {Scheduler.model.EventModel} eventRecord Event to generate data for
     * @param {Scheduler.model.ResourceModel} resourceRecord Events resource
     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside of the rendered zone in both
     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans
     * which may be outside the rendered zone.
     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside of the TimeAxis's bounds
     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside of the vertical timespan viewport's bounds.
     * @returns {Object} Data to use in event template, or `undefined` if the event is outside of the rendered zone.
     */},{key:"generateTplData",value:function generateTplData(eventRecord,resourceRecord){var includeOutside=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{viewport:true};var me=this,// generateTplData calculates layout for events which are outside of the vertical viewport
// because the RowManager needs to know a row height.
renderData=me.currentOrientation.getTimeSpanRenderData(eventRecord,resourceRecord,includeOutside);var eventContent='';if(renderData){var _Object$assign5;var resizable=eventRecord.isResizable;if(renderData.startsOutsideView){if(resizable===true)resizable='end';else if(resizable==='start')resizable=false;}if(renderData.endsOutsideView){if(resizable===true)resizable='start';else if(resizable==='end')resizable=false;}// Event record cls properties are now DomClassList instances, so clone them
// so that they can be manipulated here and by renderers.
// Truthy value means the key will be added as a class name.
// ResourceTimeRanges applies custom cls to wrapper.
var clsList=eventRecord.isResourceTimeRange?new DomClassList():eventRecord.cls.clone(),wrapperClsList=eventRecord.isResourceTimeRange?eventRecord.cls.clone():new DomClassList();Object.assign(clsList,(_Object$assign5={},_defineProperty(_Object$assign5,resourceRecord.cls,resourceRecord.cls),_defineProperty(_Object$assign5,me.generatedIdCls,eventRecord.hasGeneratedId),_defineProperty(_Object$assign5,me.dirtyCls,eventRecord.modifications),_defineProperty(_Object$assign5,me.committingCls,eventRecord.isCommitting),_defineProperty(_Object$assign5,me.endsOutsideViewCls,renderData.endsOutsideView),_defineProperty(_Object$assign5,me.startsOutsideViewCls,renderData.startsOutsideView),_defineProperty(_Object$assign5,'b-clipped-start',renderData.clippedStart),_defineProperty(_Object$assign5,'b-clipped-end',renderData.clippedEnd),_Object$assign5));Object.assign(wrapperClsList,_defineProperty({},"".concat(me.eventCls,"-parent"),resourceRecord.isParent));// Event specifics, things that do not apply to ResourceTimeRanges
if(eventRecord.isEvent||eventRecord.isTask){var _Object$assign7,_Object$assign8;Object.assign(clsList,(_Object$assign7={},_defineProperty(_Object$assign7,me.eventCls,1),_defineProperty(_Object$assign7,'b-milestone',eventRecord.isMilestone),_defineProperty(_Object$assign7,'b-sch-event-narrow',renderData.width<10),_defineProperty(_Object$assign7,me.fixedEventCls,eventRecord.isDraggable===false),_defineProperty(_Object$assign7,"b-sch-event-resizable-".concat(resizable),Boolean(me.features.eventResize)),_defineProperty(_Object$assign7,me.eventSelectedCls,me.isEventSelected(eventRecord)),_Object$assign7));renderData.eventId=eventRecord.id;// this is important for getElement(s)FromEventRecord()
renderData.id=me.getEventRenderId(eventRecord,resourceRecord);// If id has changed we want to reuse the element for the old id, to not steal some other events element
// and to allow any other changes from the server to be animated
if('id'in eventRecord.meta.modified){renderData.oldId=me.getEventRenderId(eventRecord.meta.modified.id,resourceRecord);}Object.assign(wrapperClsList,(_Object$assign8={},_defineProperty(_Object$assign8,"".concat(me.eventCls,"-wrap"),1),_defineProperty(_Object$assign8,'b-milestone-wrap',eventRecord.isMilestone),_Object$assign8));var eventStyle=eventRecord.eventStyle||resourceRecord.eventStyle||me.eventStyle,eventColor=eventRecord.eventColor||resourceRecord.eventColor||me.eventColor;renderData.eventColor=eventColor;renderData.eventStyle=eventStyle;// Using multi assignment? Supply AssignmentModel to rendering process also. Might not be available
// if adding a new event and using EventEdit, since it might be converting a dragproxy prior to adding
// to store. Not needed in that case anyway
if(me.assignmentStore&&eventRecord.assignments){renderData.assignment=eventRecord.assignments.find(function(a){return a.resourceId===resourceRecord.id;});}}// If not using a wrapping div, this cls will be added to event div for correct rendering
renderData.wrapperCls=wrapperClsList;renderData.cls=clsList;renderData.iconCls=new DomClassList(eventRecord.get(me.eventBarIconClsField)||eventRecord.iconCls);// ResourceTimeRanges applies custom style to the wrapper
if(eventRecord.isResourceTimeRange){renderData.style='';renderData.wrapperStyle=eventRecord.style||'';}// Others to inner
else{renderData.style=eventRecord.style||'';}renderData.resource=resourceRecord;renderData.resourceId=renderData.rowId;if(eventRecord.isEvent||eventRecord.isTask){if(me.eventRenderer){// User has specified a renderer fn, either to return a simple string, or an object intended for the eventBodyTemplate
var value=me.eventRenderer.call(me.eventRendererThisObj||me,{eventRecord:eventRecord,resourceRecord:resourceRecord,assignmentRecord:renderData.assignment,tplData:renderData});// If the user's renderer coerced it into a string, recreate a DomClassList.
if(typeof renderData.cls==='string'){renderData.cls=new DomClassList(renderData.cls);}if(typeof renderData.wrapperCls==='string'){renderData.wrapperCls=new DomClassList(renderData.wrapperCls);}// Same goes for iconCls
if(typeof renderData.iconCls==='string'){renderData.iconCls=new DomClassList(renderData.iconCls);}eventContent=me.eventBodyTemplate&&me.eventBodyTemplate(value)||(value==null?'':String(value));}else if(me.eventBodyTemplate){// User has specified an eventBodyTemplate, but no renderer - just apply the entire event record data.
eventContent=me.eventBodyTemplate(eventRecord);}else if(me.eventBarTextField){// User has specified a field in the data model to read from
eventContent=eventRecord.data[me.eventBarTextField]||'';}if(!me.eventBodyTemplate){// Give milestone a dedicated label element so we can use padding
if(eventRecord.isMilestone&&eventContent){eventContent="<label>".concat(eventContent,"</label>");}if(renderData.iconCls&&renderData.iconCls.length){eventContent="<i class=\"".concat(renderData.iconCls,"\"></i>").concat(eventContent);}}// renderers have last say on style & color
renderData.wrapperCls["b-sch-style-".concat(renderData.eventStyle)]=renderData.eventStyle;if(renderData.eventColor&&renderData.eventColor.startsWith('#')){renderData.style="background-color:".concat(renderData.eventColor,";")+renderData.style;}else{renderData.wrapperCls["b-sch-color-".concat(renderData.eventColor)]=renderData.eventColor;}}// If there are any iconCls entries...
renderData.cls['b-sch-event-withicon']=renderData.iconCls.length;// html, use templates fragment
if(eventContent.includes('<')){// Create content as a DocumentFragment which may now be exposed to Features.
renderData.body=DomHelper.createElementFromTemplate(eventContent,{fragment:true});}// plain text, create fragment with the text in it
else{renderData.body=document.createDocumentFragment();renderData.body.textContent=eventContent;}// For comparison in sync, cheaper than comparing DocumentFragments
renderData.eventContent=eventContent;// Method which features may chain in to
me.onEventDataGenerated(renderData);}return renderData;}/**
     * A method which may be chained by features. It is called when an event's render
     * data is calculated so that features may update the style, class list or body.
     * @param {Object} eventData
     */},{key:"onEventDataGenerated",value:function onEventDataGenerated(eventData){}/**
     * Generates the element `id` for an event element. This is used when
     * recycling an event div which has been moved from one resource to
     * another. The event is assigned its new render id *before* being
     * returned to the free pool, so that when the render engine requests
     * a div from the free pool, the same div will be returned.
     * @param {Scheduler.model.EventModel|String|Number} eventRecord Event record or id
     * @param {Scheduler.model.ResourceModel|String|Number} resourceRecord Resource record or id
     * @private
     */},{key:"getEventRenderId",value:function getEventRenderId(eventRecord,resourceRecord){// Replacing and - in the id with ._. to not break `getResourceIdFromDomNodeId()`
var eventId=eventRecord instanceof TimeSpan?eventRecord.id:eventRecord,eventIdWithoutDash=eventId.toString().replace(hyphenRe,'._.'),resourceId=resourceRecord instanceof ResourceModel?resourceRecord.id:resourceRecord,resourceIdWithoutDash=resourceId.toString().replace(hyphenRe,'._.');return this.eventPrefix+"".concat(eventIdWithoutDash,"-").concat(resourceIdWithoutDash,"-x");}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"eventPrefix",//endregion
//region Init
get:function get(){return this._eventPrefix;},set:function set(eventPrefix){this._eventPrefix=eventPrefix||this.id+'-';}//endregion
//region Settings
},{key:"layouts",get:function get(){var me=this;if(!me._eventLayout){me._eventLayout={};// pack, fit all events in available height by adjusting their height
if(me.horizontalLayoutPackClass){me._eventLayout.horizontalPack=new me.horizontalLayoutPackClass(Object.assign(// this is required for table layout
{scheduler:me,timeAxisViewModel:me.timeAxisViewModel,bandIndexToPxConvertFn:me.horizontal.layoutEventVerticallyPack,bandIndexToPxConvertThisObj:me.horizontal},me.horizontalEventSorterFn?{sortEvents:this.horizontalEventSorterFn}:{}));}// stack, adjust row height to fit all events
if(me.horizontalLayoutStackClass){me._eventLayout.horizontalStack=new me.horizontalLayoutStackClass(Object.assign(// this is required for table layout
{scheduler:me,timeAxisViewModel:me.timeAxisViewModel,bandIndexToPxConvertFn:me.horizontal.layoutEventVerticallyStack,bandIndexToPxConvertThisObj:me.horizontal},me.horizontalEventSorterFn?{sortEvents:this.horizontalEventSorterFn}:{}));}}return me._eventLayout;}/**
     * Get/set overlap mode. See config, valid values are stack (horizontal), pack, mixed (vertical) and none
     * @property {String}
     * @category Scheduled events
     */},{key:"eventLayout",get:function get(){return this._overlapMode;},set:function set(eventLayout){var me=this;if(eventLayout!=me._overlapMode){me.element.classList.remove("b-eventlayout-".concat(me._overlapMode));me._overlapMode=eventLayout;me.runWithTransition(function(){me.element.classList.add("b-eventlayout-".concat(me._overlapMode));me.refresh();});}}/**
     * Get/set fillTicks setting. If set to true it forces the rendered events to fill entire ticks.
     * @property {String}
     * @category Scheduled events
     */},{key:"fillTicks",get:function get(){return this._fillTicks;},set:function set(fill){var me=this;if(fill!=me._fillTicks){me._fillTicks=fill;me.refreshWithTransition();}}/**
     * Control how much space to leave between the first event/last event and the resources edge (top/bottom margin within
     * the resource row in horizontal mode, left/right margin within the resource column in vertical mode),
     * in px. Defaults to the value of {@link Scheduler.view.mixin.TimelineEventRendering#config-barMargin}.
     * @member {Number} resourceMargin
     * @category Scheduled events
     */ /**
     * Gets currently used event layout class. The event layout class decides the vertical placement of the events
     * within a resource. Returns null if no eventLayout is used (if Scheduler#eventLayout is set to "none")
     * @internal
     * @returns {*}
     * @readonly
     * @category Scheduled events
     */},{key:"currentEventLayout",get:function get(){var me=this;if(!me.isHorizontal)return null;switch(me.eventLayout){case'stack':return me.layouts.horizontalStack;case'pack':return me.layouts.horizontalPack;default:return null;}}},{key:"useInitialAnimation",get:function get(){return this._useInitialAnimation;},set:function set(name){var me=this;if(me._useInitialAnimation){me.element.classList.remove("b-initial-".concat(me._useInitialAnimation));}me._useInitialAnimation=name===true?'fade-in':name;if(name){me.element.classList.add("b-initial-".concat(me._useInitialAnimation));}}},{key:"isFirstRender",set:function set(value){var me=this;me._isFirstRender=value;if(!me._firstRenderDone&&value){me._firstRenderDone=me.createOnFrame(function(){me._isFirstRender=false;me._firstRenderDone=null;});}},get:function get(){return this._isFirstRender;}//endregion
//region Resource header/columns
// NOTE: The configs below are initially applied to the resource header in `TimeAxisColumn#set mode`
},{key:"resourceColumns",set:function set(config){this._resourceColumns=config;}/**
     * Use it to manipulate resource column properties at runtime.
     * @property {Scheduler.view.ResourceHeader}
     * @readonly
     */,get:function get(){return this.timeAxisColumn&&this.timeAxisColumn.resourceColumns||this._resourceColumns;}/**
     * Get resource column width. Only applies to vertical mode. To set it, assign to
     * `scheduler.resourceColumns.columnWidth`.
     * @property {Number}
     * @readonly
     */},{key:"resourceColumnWidth",get:function get(){return this.resourceColumns?this.resourceColumns.columnWidth:null;}},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * An empty function by default, but provided so that you can override it. This function is called each time
             * an event is rendered into the schedule to render the contents of the event. It's called with the event,
             * its resource and a tplData object which allows you to populate data placeholders inside the event
             * template. **IMPORTANT** You should never modify any data on the EventModel inside this method.
             * By default, the DOM markup of an event bar includes placeholders for 'cls' and 'style'. The cls property is a
             * {@link Common.helper.util.DomClassList} which will be added to the event element. The style property is an inline style declaration for
             * the event element.
             *
             * ```javascript
             * eventRenderer({eventRecord, resourceRecord, tplData}) {
             *   tplData.style = 'color:white';                 // You can use inline styles too.
             *
             *   // Property names with truthy values are added to the resulting elements CSS class.
             *   tplData.cls.isImportant = this.isImportant(eventRecord);
             *   tplData.cls.isModified = eventRecord.isModified;
             *
             *   // Remove a class name by setting the property to false
             *   tplData.cls[scheduler.generatedIdCls] = false;
             *
             *   // Or, you can treat it as a string, but this is less efficient, especially
             *   // if your renderer wants to *remove* classes that may be there.
             *   tplData.cls += ' extra-class'
             *
             *   return DateHelper.format(eventRecord.startDate, 'YYYY-MM-DD') + ': ' + eventRecord.name;
             * }
             * ```
             *
             * @param {Object} detail An object containing the information needed to render an Event.
             * @param {Scheduler.model.EventModel} detail.eventRecord The event record.
             * @param {Scheduler.model.ResourceModel} detail.resourceRecord The resource record.
             * @param {Scheduler.model.AssignmentModel} detail.assignmentRecord The assignment record, if using an AssignmentStore.
             * @param {Object} detail.tplData An object containing details about the event rendering.
             * @param {Scheduler.model.EventModel} detail.tplData.event The event record.
             * @param {Common.helper.util.DomClassList|String} detail.tplData.cls An object whose property names represent the CSS class names
             * to be added to the event bar element. Set a property's value to truthy or falsy to add or remove the class
             * name based on the property name. Using this technique, you do not have to know whether the class is already
             * there, or deal with concatenation.
             * @param {Common.helper.util.DomClassList|String} detail.tplData.wrapperCls An object whose property names represent the CSS class names
             * to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class
             * name based on the property name. Using this technique, you do not have to know whether the class is already
             * there, or deal with concatenation.
             * @param {Common.helper.util.DomClassList|String} detail.tplData.iconCls An object whose property names represent the CSS class
             * names to be added to an event icon element.
             * @param {Number} detail.tplData.left Vertical offset position (in pixels) on the time axis.
             * @param {Number} detail.tplData.width Width in pixels of the event element.
             * @param {Number} detail.tplData.height Height in pixels of the event element.
             * @param {String} detail.tplData.eventStyle The `eventStyle` of the event. Use this to apply custom styles to the event DOM element
             * @param {String} detail.tplData.eventColor The `eventColor` of the event. Use this to set a custom color for the rendererd event
             * @returns {String|Object} A simple string, or a custom object which will be applied to the {@link #config-eventBodyTemplate}, creating the actual HTML
             * @config {function}
             * @category Scheduled events
             */eventRenderer:null,/**
             * `this` reference for the {@link #config-eventRenderer} function
             * @config {Object}
             * @category Scheduled events
             */eventRendererThisObj:null,eventPrefix:'',/**
             * How to handle overlapping events. Valid values are:
             * - stack, adjusts row height (only horizontal)
             * - pack, adjusts event height
             * - mixed, allows two events to overlap, more packs (only vertical)
             * - none, allows events to overlap
             * @config {String}
             * @default
             * @category Scheduled events
             */eventLayout:'stack',/**
             * The class responsible for the packing horizontal event layout process.
             * Override this to take control over the layout process.
             * @config {Scheduler.eventlayout.HorizontalLayout}
             * @default
             * @private
             * @category Misc
             */horizontalLayoutPackClass:HorizontalLayoutPack,/**
             * The class name responsible for the stacking horizontal event layout process.
             * Override this to take control over the layout process.
             * @config {Scheduler.eventlayout.HorizontalLayout}
             * @default
             * @private
             * @category Misc
             */horizontalLayoutStackClass:HorizontalLayoutStack,/**
             * Override this method to provide a custom sort function to sort any overlapping events. By default,
             * overlapping events are laid out based on the start date. If the start date is equal, events with earlier
             * end date go first.
             *
             * Here's a sample sort function, sorting on start- and end date. If this function returns -1, then event a
             * is placed above event b.
             * ```javascript
             * horizontalEventSorterFn(a, b) {
             *
             *   let startA = a.startDate, endA = a.endDate;
             *   let startB = b.startDate, endB = b.endDate;
             *
             *   let sameStart = (startA - startB === 0);
             *
             *   if (sameStart) {
             *     return endA > endB ? -1 : 1;
             *   } else {
             *     return (startA < startB) ? -1 : 1;
             *   }
             * }
             * ```
             * @param  {Scheduler.model.EventModel} a
             * @param  {Scheduler.model.EventModel} b
             * @return {Number}
             * @config {function}
             * @category Misc
             */horizontalEventSorterFn:null,/**
             * Field from EventModel displayed as text in the bar when rendering
             * @config {String}
             * @default
             * @category Scheduled events
             */eventBarTextField:'name',/**
             * The template used to generate the markup of your events in the scheduler. To 'populate' the
             * eventBodyTemplate with data, use the {@link #config-eventRenderer} method
             * @config {Function}
             * @category Scheduled events
             */eventBodyTemplate:null,eventPositionMode:'translate',eventScrollMode:'move',/**
             * Specify `true` to force rendered events to fill entire ticks. This only affects rendering, events retain
             * their set start and end dates on the data level. When enabling this config you should probably also
             * disable EventDrag and EventResize, otherwise their behaviour will not be what a user expects.
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */fillTicks:false,/**
             * By default scheduler fades events in on load. Specify `false` to prevent this animation or specify one
             * of the available animation types to use it (`true` equals `'fade-in'`):
             * * fade-in (default)
             * * slide-from-left
             * * slide-from-top
             * ```
             * // Slide events in from the left on load
             * scheduler = new Scheduler({
             *     useInitialAnimation : 'slide-from-left'
             * });
             * ```
             * @config {Boolean|String}
             * @default
             * @category Misc
             */useInitialAnimation:true,/**
             * A config object used to configure the resource columns in vertical mode.
             * See {@link Scheduler.view.ResourceHeader} for more details on available properties.
             *
             * ```
             * new Scheduler({
             *   resourceColumns : {
             *     columnWidth : 100,
             *     headerRenderer({ resourceRecord }) => `${resourceRecord.id} - ${resourceRecord.name}`
             *   }
             * })
             * ```
             * @config {Object}
             * @category Resources
             */resourceColumns:null,/**
             * Path to load resource images from. Used by the resource header in vertical mode and the
             * {@link Scheduler.column.ResourceInfoColumn} in horizontal mode. Set this to display miniature
             * images for each resource using their 'imageUrl` field. If set and a resource has not `imageUrl` specified
             * it will try using the resources name with `.jpg` appended.
             *
             * **NOTE**: The path should end with a `/`:
             *
             * ```
             * new Scheduler({
             *   resourceImagePath : 'images/resources/'
             * });
             * ```
             * @config {String}
             * @category Resources
             */resourceImagePath:null,/**
             * Generic resource image, used when `imageUrl` or `name.jpg` for a resource is invalid
             * @config {String}
             * @category Resources
             */defaultResourceImageName:'none.png',/**
             * Control how much space to leave between the first event/last event and the resources edge (top/bottom
             * margin within the resource row in horizontal mode, left/right margin within the resource column in
             * vertical mode), in px. Defaults to the value of {@link Scheduler.view.mixin.TimelineEventRendering#config-barMargin}.
             * @config {Number}
             * @category Scheduled events
             */resourceMargin:null,// Used to animate events on first render
isFirstRender:true};}}]);return SchedulerEventRendering;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerStores
 */var MAX_VALUE=Math.MAX_SAFE_INTEGER||Math.pow(2,53)-1,checkResources={add:1,update:1,remove:1,filter:1};/**
 * Functions for store assignment and store event listeners
 *
 * @mixin
 */var SchedulerStores=function SchedulerStores(Target){return(/*#__PURE__*/function(_ref292){_inherits2(SchedulerStores,_ref292);function SchedulerStores(){_classCallCheck2(this,SchedulerStores);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerStores).apply(this,arguments));}_createClass2(SchedulerStores,[{key:"onStoreDataChange",//endregion
value:function onStoreDataChange(_ref293){var store=_ref293.source,action=_ref293.action;this.currentOrientation.clearEvents();_get2(_getPrototypeOf2(SchedulerStores.prototype),"onStoreDataChange",this).apply(this,arguments);}// Wrap w/ transition refreshFromRowOnStoreAdd() inherited from Grid
},{key:"refreshFromRowOnStoreAdd",value:function refreshFromRowOnStoreAdd(row,_ref294){var _this77=this;var isExpand=_ref294.isExpand;var args=arguments;this.runWithTransition(function(){var _get22;return(_get22=_get2(_getPrototypeOf2(SchedulerStores.prototype),"refreshFromRowOnStoreAdd",_this77)).call.apply(_get22,[_this77,row].concat(_toConsumableArray(args)));},!isExpand);}},{key:"onStoreAdd",value:function onStoreAdd(_ref295){var store=_ref295.source,records=_ref295.records,isChild=_ref295.isChild;var me=this,rowManager=me.rowManager;// If it was an appendChild to a parent that is not expanded,
// do nothing
if(isChild&&!records[0].parent.isExpanded(me)){return;}rowManager.calculateRowCount(false,true,true);var endIndex=Math.max(rowManager.topIndex+rowManager.rowCount,Math.min(rowManager.visibleRowCount,store.count));// Need to find topmost resource because we have to update from there downwards
records=records.sort(function(lhs,rhs){return store.indexOf(lhs)-store.indexOf(rhs);});var firstUpdatedIndex=store.indexOf(records[0]);// If the update is below the rendered block, ignore it
if(firstUpdatedIndex<endIndex){// Start updating from the first affected record, or the rendered block
// top if the record is above the rendered block.
firstUpdatedIndex=Math.max(firstUpdatedIndex,rowManager.topIndex);// Clear events on every row below the first record
for(var _i27=firstUpdatedIndex;_i27<endIndex;_i27++){me.currentOrientation.onRowRecordUpdate({record:store.getAt(_i27)});}}else{// Still might have changed total height
rowManager.estimateTotalHeight();}_get2(_getPrototypeOf2(SchedulerStores.prototype),"onStoreAdd",this).apply(this,arguments);}/**
     * Overrides event handler in Grid, to pass on to current orientation class
     * @private
     */},{key:"onStoreUpdateRecord",value:function onStoreUpdateRecord(){// need to update events when resource changes (might use data in renderers, templates)
if(!this.suspendStoreRedraw){var _this$currentOrientat;(_this$currentOrientat=this.currentOrientation).onRowRecordUpdate.apply(_this$currentOrientat,arguments);_get2(_getPrototypeOf2(SchedulerStores.prototype),"onStoreUpdateRecord",this).apply(this,arguments);}}},{key:"onStoreRemove",value:function onStoreRemove(){var _this$currentOrientat2;(_this$currentOrientat2=this.currentOrientation).onRowRecordRemove.apply(_this$currentOrientat2,arguments);_get2(_getPrototypeOf2(SchedulerStores.prototype),"onStoreRemove",this).apply(this,arguments);}},{key:"onStoreRemoveAll",value:function onStoreRemoveAll(){this.currentOrientation.clearEvents();_get2(_getPrototypeOf2(SchedulerStores.prototype),"onStoreRemoveAll",this).call(this);}//region destroy
// Cleanup, destroys stores if Scheduler.destroyStores is true.
},{key:"doDestroy",value:function doDestroy(){_get2(_getPrototypeOf2(SchedulerStores.prototype),"doDestroy",this).call(this);var me=this;if(me.destroyStores){// TODO: Use me.destroyMembers when available.
if(me.assignmentStore)me.assignmentStore.destroy();if(me.resourceStore)me.resourceStore.destroy();if(me.dependencyStore)me.dependencyStore.destroy();if(me.eventStore)me.eventStore.destroy();}}//endregion
//region Row store
},{key:"onEventIdChange",//endregion
//region Events
value:function onEventIdChange(params){this.currentOrientation.onEventStoreIdChange&&this.currentOrientation.onEventStoreIdChange(params);}/**
     * Calls appropriate functions for current event layout when the event store is modified.
     * @private
     */ // Named as Internal to avoid naming collision with wrappers that relay events
},{key:"onInternalEventStoreChange",value:function onInternalEventStoreChange(params){var me=this;// Too early, bail out
if(!me._mode){return;}if(me.isVertical){me.currentOrientation.onEventStoreChange(params);}else{var _ret=function(){// TODO: Move this to horizontal
var layout=me.currentOrientation,eventStore=params.source,rowManager=me.rowManager,resourceStore=me.resourceStore,action=params.action,changes=params.changes,isCollapse=params.isCollapse,events=params.records||(params.record?[params.record]:null),resources=[];var rows=new Set(),useTransition=false,len,i;if(!me.rendered){return{v:void 0};}// Ignore update caused by collapse or removing associated resource, will be handled by resource removal code
if(isCollapse||action==='update'&&events.length&&events[0].meta.removingResource){return{v:void 0};}// resource timeranges feature embeds into regular events drawing procedure
// which means in some cases we should repaint all rows
var skipRows=action==='filter'&&me.hasFeature('resourceTimeRanges');// If events were changed
if(!skipRows&&checkResources[action]&&events){// For event resource change, the "from" resource is part of the changed resource set.
if(changes&&'resourceId'in changes&&changes.resourceId.oldValue!=null){var prevResource=resourceStore.getById(changes.resourceId.oldValue),prevRow=prevResource&&rowManager.getRowFor(prevResource);// Old resource might not exist in store, https://app.assembla.com/spaces/bryntum/tickets/7070.
// Happens for example when dropping from another scheduler.
if(prevRow){resources.push(prevResource);rows.add(prevRow);}}// We are only interested in associated resources which exist in the store and are in the rendered block.
for(i=0,len=events.length;i<len;i++){resources.push.apply(resources,_toConsumableArray(eventStore.getResourcesForEvent(events[i]).filter(function(resource){if(resource){var row=rowManager.getRowFor(resource);if(row){rows.add(row);return true;}}return false;})));}if(resources.length){// Sort rows if more than one
if(rows.size>1){rows=new Set(_toConsumableArray(rows).sort(function(a,b){return a.dataIndex-b.dataIndex;}));}// If all affected rows are outside of the rendered range, do nothing
else if(!rows.size){return{v:void 0};}}// No resources in the rendered block were visible (or all events filtered out, in which case a full redraw
// is performed). Nothing to update in the UI, but the dataset height might have changed.
else if(!(action==='filter'&&!events.length)){rowManager.estimateTotalHeight();return{v:void 0};}params.resources=resources;}switch(action){case'dataset':layout.onEventDataset();break;case'add':layout.onEventAdd(params);useTransition=true;break;case'update':layout.onEventUpdate(params);useTransition=true;break;case'remove':layout.onEventRemove(params);useTransition=true;break;case'removeall':layout.onEventRemoveAll();break;case'filter':layout.onEventFilter(params);break;case'clearchanges':layout.onEventClearChanges(params);break;}me.runWithTransition(function(){if(rows.size){// Render the affected rows.
rowManager.renderRows(rows);}// No specific rows affected, for example a dataset. Draw all
else{// TODO: change to refresh() when merged to master
rowManager.renderFromRow();}},useTransition);}();if(_typeof(_ret)==="object")return _ret.v;}}/**
     * If events are changed in batch, endBatch fires refresh, so we must refresh the view
     * @private
     */},{key:"onEventStoreRefresh",value:function onEventStoreRefresh(_ref296){var action=_ref296.action;if(action==='batch'&&this.rowManager.rowCount){this.currentOrientation.onEventDataset&&this.currentOrientation.onEventDataset();// TODO: Run with transition?
this.refresh();}}/**
     * Moves focus before the currently active event is removed.
     * @private
     */},{key:"onBeforeEventRemove",value:function onBeforeEventRemove(_ref297){var records=_ref297.records;var me=this;// Active event is being removed.
if(me.activeEvent&&records.includes(me.activeEvent)){var moveTo;// If being done by a keyboard gesture then look for a close target
// until we find an existing record, not scheduled for removal.
// Otherwise, per Mats, push focus outside of the Scheduler.
if(GlobalEvents.lastInteractionType==='key'){for(var _i28=0,l=records.length;_i28<l&&(!moveTo||records.includes(moveTo));_i28++){if(me.eventStore.getResourcesForEvent(records[_i28]).length){var event=records[_i28],from=event.assignments&&event.assignments.length?event.assignments[0]:event;moveTo=me.getNext(from,true)||me.getPrevious(from,true);}}}// Move focus away from the element which will soon have no
// backing data.
if(moveTo){me.navigateTo(moveTo);}// Focus must exit the Scheduler's subgrid, otherwise, if a navigation
// key gesture is delivered before the outgoing event's element has faded
// out and been removed, navigation will be attempted from a deleted
// event. Animated hiding is problematic.
//
// We cannot just revertFocus() because that might move focus back to an
// element in a floating EventEditor which is not yet faded out and
// been removed. Animated hiding is problematic.
//
// We cannot focus scheduler.timeAxisColumn.element because the browser
// would scroll it in some way if we have horizontal overflow.
//
// The only thing we can know about to focus here is the Scheduler itself.
else{me.element.focus();}}}/**
     * Refreshes committed events, to remove dirty/committing flag.
     * CSS is added
     * @private
     */},{key:"onEventCommit",value:function onEventCommit(_ref298){var _this78=this;var changes=_ref298.changes;[].concat(_toConsumableArray(changes.added),_toConsumableArray(changes.modified)).forEach(function(eventRecord){return _this78.repaintEvent(eventRecord);});}/**
     * Adds the committing flag to changed events before commit.
     * @private
     */},{key:"onEventBeforeCommit",value:function onEventBeforeCommit(_ref299){var _this79=this;var changes=_ref299.changes;// Committing sets a flag in meta that during eventrendering applies a CSS class. But to not mess up drag and
// drop between resources no redraw is performed before committing, so class is never applied to the element(s).
// Applying here instead
[].concat(_toConsumableArray(changes.added),_toConsumableArray(changes.modified)).forEach(function(eventRecord){return _this79.getElementsFromEventRecord(eventRecord).forEach(function(element){return element.classList.add(_this79.committingCls);});});}// Clear committing flag
},{key:"onEventException",value:function onEventException(_ref300){var _this80=this;var action=_ref300.action;if(action==='commit'){var changes=this.eventStore.changes;[].concat(_toConsumableArray(changes.added),_toConsumableArray(changes.modified),_toConsumableArray(changes.removed)).forEach(function(eventRecord){return _this80.repaintEvent(eventRecord);});}}/**
     * Refreshes scheduler when event changes are cleared.
     * @private
     */},{key:"onEventClearChanges",value:function onEventClearChanges(){this.refresh();}/**
     * Refreshes scheduler when data is assigned to the assigment store
     * @private
     */},{key:"onAssignmentRefresh",value:function onAssignmentRefresh(event){if(this.isHorizontal&&(event.action==='dataset'||event.action==='batch')){this.refresh();}}/**
     * Repaints affected resources when assignments are added.
     * @private
     */},{key:"onAssignmentAdd",value:function onAssignmentAdd(_ref301){var _this81=this;var records=_ref301.records;if(this.isHorizontal){records.forEach(function(assignment){var resource=assignment.resource;resource&&_this81.repaintEventsForResource(resource);});}}/**
     * Repaints affected resources when assignments are updated.
     * @private
     */},{key:"onAssignmentUpdate",value:function onAssignmentUpdate(_ref302){var record=_ref302.record,changes=_ref302.changes;if(this.isHorizontal){// TODO: Move to HorizontalEventMapper
var rowManager=this.rowManager,layoutCache=this.currentOrientation.cache,oldResourceId='resourceId'in changes&&changes.resourceId.oldValue,newResourceId=record.resourceId;var row,fromRow=MAX_VALUE;if(oldResourceId!=null&&(row=rowManager.getRowFor(oldResourceId))){layoutCache.clearRow(oldResourceId);fromRow=Math.min(fromRow,row.index);}if(newResourceId&&(row=rowManager.getRowFor(newResourceId))){layoutCache.clearRow(newResourceId);fromRow=Math.min(fromRow,row.index);}// Render from the first mutated row in the rendered block;
if(fromRow!==MAX_VALUE){rowManager.renderFromRow(rowManager.rows[fromRow]);}}}},{key:"onBeforeAssignmentRemove",value:function onBeforeAssignmentRemove(_ref303){var source=_ref303.source,records=_ref303.records;// Bail out if caused by the remove below
if(source.isRemovingEvent){return;}var me=this,events=records.reduce(function(result,assignment){var event=assignment.event;if(event&&!event.placeHolder&&!result.includes(event)){result.push(event);}return result;},[]);var moveTo;// Deassigning the active assignment
if(me.activeEvent&&events.includes(me.activeEvent)){// If being done by a keyboard gesture then look for a close target
// until we find an existing record, not scheduled for removal.
// Otherwise, per Mats, push focus outside of the Scheduler.
if(GlobalEvents.lastInteractionType==='key'){// Look for a close target until we find an existing record, not scheduled for removal
for(var _i29=0,l=records.length;_i29<l&&(!moveTo||records.includes(moveTo));_i29++){if(me.eventStore.getResourcesForEvent(records[_i29].event).length){var event=records[_i29],from=event.assignments&&event.assignments.length?event.assignments[0]:event;moveTo=me.getNext(from)||me.getPrevious(from);}}}// Move focus away from the element which will soon have no
// backing data.
if(moveTo){me.navigateTo(moveTo);}// Focus must exit the Scheduler's subgrid, otherwise, if a navigation
// key gesture is delivered before the outgoing event's element has faded
// out and been removed, navigation will be attempted from a deleted
// event. Animated hiding is problematic.
//
// We cannot just revertFocus() because that might move focus back to an
// element in a floating EventEditor which is not yet faded out and
// been removed. Animated hiding is problematic.
//
// We cannot focus scheduler.timeAxisColumn.element because the browser
// would scroll it in some way if we have horizontal overflow.
//
// The only thing we can know about to focus here is the Scheduler itself.
else{me.element.focus();}}if(me.removeUnassignedEvent&&!me.isRemoving){// Collect all events that will unassigned after the remove
var toRemove=events.reduce(function(result,eventRecord){var assignmentCount=eventRecord.assignments?eventRecord.assignments.length:0;assignmentCount-=records.filter(function(r){return r.event===eventRecord;}).length;if(!assignmentCount){result.push(eventRecord);}return result;},[]);// And remove them
me.eventStore.remove(toRemove);}}/**
     * Repaints affected resources when assignments are removed.
     * @private
     */},{key:"onAssignmentRemove",value:function onAssignmentRemove(_ref304){var _this82=this;var records=_ref304.records;if(this.isHorizontal){records.forEach(function(assignment){var resource=assignment.resource;resource&&_this82.repaintEventsForResource(resource);});}}/**
     * Repaints resources when all assignments are removed.
     * @private
     */},{key:"onAssignmentRemoveAll",value:function onAssignmentRemoveAll(){if(this.isHorizontal){this.refresh();}}/**
     * Refreshes scheduler when assignment store is filtered.
     */},{key:"onAssignmentFilter",value:function onAssignmentFilter(){if(this.isHorizontal){this.refresh();}}//endregion
//region Other functions
/**
     * Applies the start and end date to each event store request (formatted in the same way as the start date, defined in the EventStore Model class).
     * @category Data
     */},{key:"applyStartEndParameters",value:function applyStartEndParameters(_ref305){var eventStore=_ref305.source,params=_ref305.params;var me=this,dateFormat=eventStore.modelClass.fieldMap.startDate.dateFormat;params[me.startParamName]=DateHelper.format(me.startDate,dateFormat);params[me.endParamName]=DateHelper.format(me.endDate,dateFormat);}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"store",get:function get(){var me=this;// Spin up the resourceStore if possible.
// If there are configured resources, this will load them too.
me._thisIsAUsedExpression(me.resources);// Vertical uses a dummy store
if(!me._store&&me.isVertical){// TODO: Make this store readonly, since we are using single cell approach
me._store=new Store({data:[{id:'verticalTimeAxisRow'}]});}return _get2(_getPrototypeOf2(SchedulerStores.prototype),"store",this);},set:function set(store){_set(_getPrototypeOf2(SchedulerStores.prototype),"store",store,this,true);}//endregion
//region ResourceStore
/**
     * Get/set resources, applies to the assigned ResourceStore
     * @property {Scheduler.model.ResourceModel[]|Object[]}
     * @category Data
     */},{key:"resources",get:function get(){var resourceStore=this.resourceStore;return resourceStore&&resourceStore.records;},set:function set(resources){this.resourceStore.data=resources;}/**
     * Get/set the resource store instance
     * @property {Scheduler.data.ResourceStore}
     * @category Data
     */},{key:"resourceStore",get:function get(){var me=this;// If there's a CrudManager, it injects its resourceStore.
// If not, we create our own instance.
if(!me._resourceStore){if(!me.crudManager||!me.crudManager.resourceStore){me.resourceStore=new ResourceStore();}}return me._resourceStore;},set:function set(newResourceStore){var me=this,oldResourceStore=me._resourceStore;if(newResourceStore===oldResourceStore){return;}if(!(newResourceStore instanceof ResourceStore)){newResourceStore=new ResourceStore(newResourceStore);}if(oldResourceStore){var isBackingRowStore=oldResourceStore===me.store;me._resourceStore=newResourceStore;// Reconfigure grid if resourceStore is backing the rows
if(newResourceStore&&me.isHorizontal){if(isBackingRowStore){me.store=me.resourceStore;me.store.metaMapId=me.id;}else{me.refresh();}}}else{me._resourceStore=newResourceStore;}if(newResourceStore){// In vertical, resource store is not the row store but should toggle the load mask
if(me.isVertical){newResourceStore.on('load',function(){return me.unmaskBody();});}me.trigger('resourceStoreChange',{newResourceStore:newResourceStore,oldResourceStore:oldResourceStore});}if(me.isHorizontal&&!me._store){me.store=newResourceStore;}}//endregion
//region EventStore
/**
     * Get/set events, applies to the assigned EventStore
     * @property {Scheduler.model.EventModel[]|Object[]}
     * @category Data
     */},{key:"events",get:function get(){return this._eventStore.records;},set:function set(events){this.eventStore.data=events;}/**
     * Get/set the event store instance
     * @property {Scheduler.data.EventStore}
     * @category Data
     */},{key:"eventStore",get:function get(){var me=this;// If there's a CrudManager, we use its eventStore.
// If not, we create our own instance.
if(!me._eventStore){if(!me.crudManager||!me.crudManager.eventStore){me.eventStore=new EventStore({resourceStore:me.resourceStore});}}return this._eventStore;},set:function set(newEventStore){var me=this,oldEventStore=me._eventStore;var triggerLoad=false;if(newEventStore===oldEventStore){return;}var resourceStore=me.resourceStore;// Reconfiguring
if(oldEventStore){var _oldEventStore=me.eventStore,assignmentStore=me.assignmentStore,dependencyStore=me.dependencyStore;if(newEventStore===_oldEventStore){return;}me.eventStoreDetacher&&me.eventStoreDetacher();me._eventStore=newEventStore;me.timeAxisViewModel.eventStore=newEventStore;if(newEventStore){if(resourceStore&&!newEventStore.resourceStore){newEventStore.resourceStore=resourceStore;}if(assignmentStore&&!newEventStore.assignmentStore){newEventStore.assignmentStore=assignmentStore;}if(dependencyStore&&!newEventStore.dependencyStore){newEventStore.dependencyStore=dependencyStore;}me.trigger('eventStoreChange',{newEventStore:newEventStore,oldEventStore:_oldEventStore});me.refresh();}}else{if(newEventStore.isEventStore){if(resourceStore&&newEventStore.resourceStore!==resourceStore){// Sanity check.
// An eventStore cannot be shared between two Schedulers with different
// resourceStores. Prevent this Scheduler being handed an eventStore that
// is already attached to another resourceStore
if(newEventStore.resourceStore){throw new Error("eventStore ".concat(newEventStore.id," is already linked to resourceStore ").concat(newEventStore.resourceStore.id));}newEventStore.resourceStore=resourceStore;}}else{triggerLoad=newEventStore.autoLoad;newEventStore.autoLoad=false;newEventStore=new EventStore(Object.assign({resourceStore:me.resourceStore},newEventStore));}me._eventStore=newEventStore;}if(newEventStore){var listenerCfg={thisObj:me,detachable:true,// There is no separate dataset event any more.
// It's a refresh event with action: 'dataset'
change:'onInternalEventStoreChange',clearchanges:'onEventClearChanges',beforecommit:'onEventBeforeCommit',commit:'onEventCommit',beforeRemove:'onBeforeEventRemove',refresh:'onEventStoreRefresh',exception:'onEventException',idchange:'onEventIdChange'// TODO: PORT saving tree for later
// If the eventStore is a TreeStore
//nodeinsert : me.onEventAdd,
//nodeappend : me.onEventAdd
};if(me.passStartEndParameters){listenerCfg.beforeload=me.applyStartEndParameters;}me.eventStoreDetacher&&me.eventStoreDetacher();// TODO: PORT don't have autoDestroy yet
/*if (me.eventStore) {
             if (eventStore !== me.eventStore && me.eventStore.autoDestroy) {
             me.eventStore.destroy();
             }
             }*/me.eventStoreDetacher=newEventStore.on(listenerCfg);if(newEventStore.assignmentStore){me.assignmentStore=newEventStore.assignmentStore;}if(triggerLoad){newEventStore.load().catch(function(){});}}// flag checked when adding events, to trigger full render first time
if(me.eventStore.count>0){me.eventsRendered=true;}}//endregion
//region AssignmentStore
/**
     * Get/set assignments, applies to the assigned AssignmentStore
     * @property {Scheduler.model.AssignmentModel[]|Object[]}
     * @category Data
     */},{key:"assignments",get:function get(){return this.assignmentStore&&this.assignmentStore.records;},set:function set(assignments){// Creating AssignmentStore here and not in `get assignmentStore` since it is optional, but if user assigns
// assignments we can be sure one is needed.
if(!this.assignmentStore){this.eventStore.assignmentStore=this.assignmentStore=new AssignmentStore();}this.assignmentStore.data=assignments;}/**
     * Get/set the assignment store instance
     * @property {Scheduler.data.AssignmentStore}
     * @category Data
     */},{key:"assignmentStore",get:function get(){var me=this,eventStore=me.eventStore;return eventStore&&eventStore.assignmentStore;},set:function set(newAssignmentStore){var me=this,oldAssignmentStore=me.assignmentStore;if(me.eventStore.assignmentStore!==newAssignmentStore){me.eventStore.assignmentStore=newAssignmentStore;}me.assignmentStoreDetacher&&me.assignmentStoreDetacher();if(newAssignmentStore){// In case there is an assignment store used
me.assignmentStoreDetacher=newAssignmentStore.on({thisObj:me,//refresh    : me.onEventDataRefresh,
refresh:me.onAssignmentRefresh,update:me.onAssignmentUpdate,add:me.onAssignmentAdd,beforeRemove:{fn:me.onBeforeAssignmentRemove,// We must go last in case an app vetoes a remove
// by returning false from a handler.
prio:-1000},remove:me.onAssignmentRemove,filter:me.onAssignmentFilter,removeall:me.onAssignmentRemoveAll});me.trigger('assignmentStoreChange',{newAssignmentStore:newAssignmentStore,oldAssignmentStore:oldAssignmentStore});me.refresh();}}//endregion
//region DependencyStore
/**
     * Get/set the dependency store instance
     * @property {Scheduler.data.DependencyStore}
     * @category Data
     */},{key:"dependencyStore",get:function get(){var me=this,eventStore=me.eventStore;return eventStore&&eventStore.dependencyStore||me._dependencyStore;},set:function set(newDependencyStore){var me=this;if(!me.isConfigured){me._dependencyStore=newDependencyStore;}else{var oldDependencyStore=me.dependencyStore;me.eventStore.dependencyStore=newDependencyStore;if(newDependencyStore){me.trigger('dependencyStoreChange',{newDependencyStore:newDependencyStore,oldDependencyStore:oldDependencyStore});me.refresh();}}}//endregion
//region CrudManager
/**
     * Get/set the CrudManager instance
     * @property {Scheduler.data.CrudManager}
     * @category Data
     */},{key:"crudManager",get:function get(){return this._crudManager;},set:function set(crudManager){var me=this;if(!(crudManager instanceof CrudManager)){// CrudManager injects itself into is Scheduler's _crudManager property
// because code it triggers needs to access it through its getter.
crudManager=new CrudManager(Object.assign({scheduler:me},crudManager));}else{me._crudManager=crudManager;}}},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * The {@link Scheduler.data.EventStore} holding the events to be rendered into the scheduler (required)
             * @config {Scheduler.data.EventStore}
             * @category Data
             */eventStore:null,/**
             * The {@link Scheduler.data.ResourceStore} holding the resources to be rendered into the scheduler (required)
             * @config {Scheduler.data.ResourceStore}
             * @category Data
             */resourceStore:null,/**
             * The optional {@link Scheduler.data.AssignmentStore}, holding assigments between resources and events.
             * Required for multi assignments.
             * @config {Scheduler.data.AssignmentStore}
             * @category Data
             */assignmentStore:null,dependencyStore:null,/**
             * Overridden to *not* auto create a store at the Scheduler level.
             * The store is the {@link #config-resourceStore} which is either configured in
             * or acquired from the {@link #config-crudManager}.
             * @config {Common.data.Store}
             * @private
             */store:null,/**
             * The name of the start date parameter that will be passed to in every `eventStore` load request.
             * @config {String}
             * @category Data
             */startParamName:'startDate',/**
             * The name of the end date parameter that will be passed to in every `eventStore` load request.
             * @config {String}
             * @category Data
             */endParamName:'endDate',/**
             * true to apply start and end dates of the current view to any `eventStore` load requests.
             * @config {Boolean}
             * @category Data
             */passStartEndParameters:false,/**
             * Supply a CrudManager config object if you want to use CrudManager for handling data
             * @config {Object}
             * @category Data
             */crudManager:null,/**
             * Inline events, will be loaded into an internally created EventStore
             * @config {Scheduler.model.EventModel[]|Object[]}
             * @category Data
             */events:null,/**
             * Inline resources, will be loaded into an internally created ResourceStore
             * @config {Scheduler.model.ResourceModel[]|Object[]}
             * @category Data
             */resources:null,/**
             * Inline assignments, will be loaded into an internally created AssignmentStore
             * @config {Scheduler.model.AssignmentModel[]|Object[]}
             * @category Data
             */assignments:null,/**
             * Configure with `true` to also remove the event when removing the last assignment
             * @config {Boolean}
             * @default
             * @category Misc
             */removeUnassignedEvent:true};}}]);return SchedulerStores;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerScroll
 */var immediatePromise$5=new Promise(function(resolve){return resolve();}),defaultScrollOptions$3={block:'nearest',edgeOffset:20};/**
 * Functions for scrolling to events, dates etc.
 *
 * @mixin
 */var SchedulerScroll=function SchedulerScroll(Target){return(/*#__PURE__*/function(_ref306){_inherits2(SchedulerScroll,_ref306);function SchedulerScroll(){_classCallCheck2(this,SchedulerScroll);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerScroll).apply(this,arguments));}_createClass2(SchedulerScroll,[{key:"scrollEventIntoView",//region Scroll to event
/**
     * Scrolls an event record into the viewport.
     * If the resource store is a tree store, this method will also expand all relevant parent nodes to locate the event.
     *
     * @param {Scheduler.model.EventModel} eventRec the event record to scroll into view
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the event: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset=20] edgeOffset A margin *in pixels* around the event to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the event element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the event element when it is in view.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     *
     * This function is not applicable for events with multiple assignments, please use #scrollResourceEventIntoView instead.
     */value:function scrollEventIntoView(eventRec){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$3;var me=this,resources=eventRec.resources||[eventRec];if(resources.length>1){throw new Error('scrollEventIntoView() is not applicable for events with multiple assignments, please use scrollResourceEventIntoView() instead.');}if(!resources.length){console.warn('You have asked to scroll to an event which is not assigned to a resource');return immediatePromise$5;}return me.scrollResourceEventIntoView(resources[0],eventRec,null,options);}/**
     * Scrolls a resource event record into the viewport.
     *
     * If the resource store is a tree store, this method will also expand all relevant parent nodes
     * to locate the event.
     *
     * @param {Scheduler.model.ResourceModel} resourceRec A resource record an event record is assigned to
     * @param {Scheduler.model.EventModel} eventRec An event record to scroll into view
     * @param {Number} index DOM node index, applicable only for weekview
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the event: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset=20] edgeOffset A margin *in pixels* around the event to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @param {Boolean} [options.extendTimeAxis=true] By default, if the requested event is outside the time axis, the time axis is extended.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the event element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the event element when it is in view.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     */},{key:"scrollResourceEventIntoView",value:function scrollResourceEventIntoView(resourceRec,eventRec,index){var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:defaultScrollOptions$3;var me=this,eventStart=eventRec.startDate,eventEnd=eventRec.endDate,eventIsOutside=eventStart<me.timeAxis.startDate|(eventEnd>me.timeAxis.endDate)<<1;var el;if(options.edgeOffset==null){options.edgeOffset=20;}// Make sure event is within TimeAxis time span unless extendTimeAxis passed as false.
// The EventEdit feature passes false because it must not mutate the TimeAxis.
// Bitwise flag:
//  1 === start is before TimeAxis start.
//  2 === end is after TimeAxis end.
if(eventIsOutside&&options.extendTimeAxis!==false){var currentTimeSpanRange=me.timeAxis.endDate-me.timeAxis.startDate,startAnchorPoint,endAnchorPoint;// Event is too wide, expand the range to encompass it.
if(eventIsOutside===3){me.timeAxis.setTimeSpan(new Date(eventStart.valueOf()-currentTimeSpanRange/2),new Date(eventEnd.getTime()+currentTimeSpanRange/2));}// Event is partially or wholly outside but will fit.
// Move the TimeAxis to include it. Attempt to maintain visual position.
else{startAnchorPoint=eventIsOutside&1?me.getCoordinateFromDate(eventRec.endDate):me.getCoordinateFromDate(eventRec.startDate);// Event starts before
if(eventIsOutside&1){me.timeAxis.setTimeSpan(new Date(eventStart),new Date(eventStart.valueOf()+currentTimeSpanRange));}// Event ends after
else{me.timeAxis.setTimeSpan(new Date(eventEnd.valueOf()-currentTimeSpanRange),new Date(eventEnd));}// Restore view to same relative scroll position.
endAnchorPoint=eventIsOutside&1?me.getCoordinateFromDate(eventRec.endDate):me.getCoordinateFromDate(eventRec.startDate);me.timeAxisSubGrid.scrollable.scrollBy(endAnchorPoint-startAnchorPoint);}}// Establishing element to scroll to
el=me.getElementFromEventRecord(eventRec,resourceRec);if(el){// It's usually the event wrapper that holds focus
if(!DomHelper.isFocusable(el)){el=el.parentNode;}var scroller=me.timeAxisSubGrid.scrollable;// Scroll into view with animation and highlighting if needed.
// Mute scroll events during the scroll so that event rendering doesn't replace
// the target element.
return scroller.scrollIntoView(el,ObjectHelper.assign({silent:true},options));}else if(eventIsOutside&&options.extendTimeAxis===false){console.warn('You have asked to scroll to an event which is outside the current view and extending timeaxis is disabled');return immediatePromise$5;}else if(!me.eventStore.isAvailable(eventRec)){console.warn('You have asked to scroll to an event which is not available');return immediatePromise$5;}else{// Event not rendered, scroll to calculated location
return me.scrollUnrenderedEventIntoView(resourceRec,eventRec,options);}}/**
     * Scrolls an unrendered event into view. Internal function used from #scrollResourceEventIntoView.
     * @private
     */},{key:"scrollUnrenderedEventIntoView",value:function scrollUnrenderedEventIntoView(resourceRec,eventRec){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultScrollOptions$3;if(options.edgeOffset==null){options.edgeOffset=20;}var me=this,scroller=me.timeAxisSubGrid.scrollable,box=me.getResourceEventBox(eventRec,resourceRec),// TODO: have all "box" type objects use Rectangle
scrollerViewport=scroller.viewport,targetRect=new Rectangle(box.start,box.top,box.end-box.start,box.bottom-box.top).translate(scrollerViewport.x-scroller.x,scrollerViewport.y-scroller.y),result=scroller.scrollIntoView(targetRect,Object.assign({},options,{highlight:false}));if(options.highlight||options.focus){var detatcher=me.on({eventrepaint:function eventrepaint(_ref307){var scheduler=_ref307.scheduler,eventRecord=_ref307.eventRecord,resourceRecord=_ref307.resourceRecord,element=_ref307.element;if(eventRecord===eventRec){detatcher();result.then(function(){options.highlight&&DomHelper.highlight(element);options.focus&&element.focus();});}}});}return result;}/**
     * Scrolls the specified resource into view, works for both horizontal and vertical modes.
     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record an event record is assigned to
     * @param {Object} [options] How to scroll.
     * @param {String} [options.column] Field name or ID of the column, or the Column instance to scroll to (in horizontal mode).
     * @param {String} [options.block] How far to scroll the element: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset] edgeOffset A margin around the element or rectangle to bring into view.
     * @param {Boolean|Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the element when it is in view.
     * @returns {Promise} A promise which is resolved when the scrolling has finished.
     */},{key:"scrollResourceIntoView",value:function scrollResourceIntoView(resourceRecord){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$3;if(this.isVertical){return this.currentOrientation.scrollResourceIntoView(resourceRecord,options);}else{return this.scrollRowIntoView(resourceRecord,options);}}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerScroll;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerRegions
 */ /**
 * Functions to get regions (bounding boxes) for scheduler, events etc.
 *
 * @mixin
 */var SchedulerRegions=function SchedulerRegions(Target){return(/*#__PURE__*/function(_ref308){_inherits2(SchedulerRegions,_ref308);function SchedulerRegions(){_classCallCheck2(this,SchedulerRegions);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerRegions).apply(this,arguments));}_createClass2(SchedulerRegions,[{key:"getScheduleRegion",//region Orientation depended regions
/**
     * Gets the region represented by the schedule and optionally only for a single resource. The view will ask the scheduler for
     * the resource availability by calling getResourceAvailability. By overriding that method you can constrain events differently for
     * different resources.
     * @param {Scheduler.model.ResourceModel} resourceRecord (optional) The resource record
     * @param {Scheduler.model.EventModel} eventRecord (optional) The event record
     * @return {Object} The region of the schedule
     */value:function getScheduleRegion(resourceRecord,eventRecord){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return this.currentOrientation.getScheduleRegion(resourceRecord,eventRecord,local);}/**
     * Gets the region representing the passed resource and optionally just for a certain date interval.
     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record
     * @param {Date} startDate A start date constraining the region
     * @param {Date} endDate An end date constraining the region
     * @return {Common.helper.util.Rectangle} A Rectangle which encapsulates the resource time span
     */},{key:"getResourceRegion",value:function getResourceRegion(resourceRecord,startDate,endDate){return this.currentOrientation.getRowRegion(resourceRecord,startDate,endDate);}/**
     * Gets the start and end dates for an element Region
     * @param {Common.helper.util.Rectangle} rect The rectangle to map to start and end dates
     * @param {String} roundingMethod The rounding method to use
     * @returns {Object} an object containing start/end properties
     */},{key:"getStartEndDatesFromRectangle",value:function getStartEndDatesFromRectangle(rect,roundingMethod){return this.currentOrientation.getStartEndDatesFromRectangle(rect,roundingMethod);}//endregion
//region ResourceEventBox
/**
     * Get the region for a specified resources specified event.
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @param {Boolean} includeOutside Specify true to get boxes for events outside of the rendered zone in both dimensions. This option is used when calculating
     * dependency lines, and we need to include routes from events which may be outside the rendered zone.
     * @returns {*}
     */},{key:"getResourceEventBox",value:function getResourceEventBox(eventRecord,resourceRecord){var includeOutside=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// event caches its position when rendered, return it if available
var me=this,// Vertical always returns a box here
cached=me.currentOrientation.getResourceEventBox(eventRecord.id,resourceRecord.id);if(cached){return cached;}// TODO: Move to HorizontalEventMapper
var viewStartDate=me.timeAxis.startDate,viewEndDate=me.timeAxis.endDate,eventStartDate=eventRecord.startDate,eventEndDate=eventRecord.endDate;/* eslint-disable */var result=null,eventLayout,rowEventsLayoutData,eventRecordData,rowElement,rowTop,eventElements,eventElement,eventElOffsets,eventElBox;/* eslint-enable */ // Checking if event record is within current time axis timespan and is visible, i.e. it's not rendered
// within a collapsed row (scheduler supports resource tree store as well as flat resource store).
if(eventStartDate&&eventEndDate&&(includeOutside||DateHelper.intersectSpans(eventStartDate,eventEndDate,viewStartDate,viewEndDate))&&this.isRowVisible(resourceRecord)){rowElement=me.getRowFor(resourceRecord);// If resource row is rendered and displayed
if(rowElement){// Managed event sizing means that the view is responsible for event height setting, the oposite case
// is when event height is controlled by CSS's top and height properties.
// Fast case: managed event sizing on, querying the view for box position and dimensions
if(me.managedEventSizing){eventLayout=me.currentEventLayout;// Preparing events layout data for event layout instance to process
rowEventsLayoutData=me.eventStore.getEventsForResource(resourceRecord).reduce(function(result,event){var eventBox=me[me.mode].getTimeSpanRenderData(event,resourceRecord,includeOutside);if(eventBox){result.push(eventBox);}return result;},[]);// Processing event layout data injecting event vertical position into each item of `rowEventsLayoutData`
// This layout application takes into account view's `dynamicRowHeight` property
eventLayout&&eventLayout.applyLayout(rowEventsLayoutData,resourceRecord);// Now we are to find our particular event data inside all events data for the given row record
eventRecordData=rowEventsLayoutData.find(function(eventData){return eventData.event==eventRecord;});// We must find our event record corresponding layout data object here, but just to make sure
if(eventRecordData){// We have event record data with coordinates within the row node, but we need
// those coordinates to be translated relative to view's viewport top.
rowTop=me.getRecordCoords(resourceRecord,true).y;// Finally we have all the data needed to calculated the event record box
result={layout:true,start:eventRecordData.hasOwnProperty('left')?eventRecordData.left:eventRecordData.right,// it depends on view's `rtl` configuration
end:(eventRecordData.hasOwnProperty('left')?eventRecordData.left:eventRecordData.right)+eventRecordData.width,top:rowTop+eventRecordData.top,bottom:rowTop+eventRecordData.top+eventRecordData.height};}}// Slow case: managed event sizing off, querying the DOM for box position and dimensions
else{eventElements=me.getElementsFromEventRecord(eventRecord,eventRecord!==resourceRecord&&resourceRecord);// We must have at one and only one element here, but just to make sure
if(eventElements.length){eventElement=eventElements[0];// TODO: PORT getOffsetsTo and getBox
eventElOffsets=eventElement.getOffsetsTo(me.getEl());eventElBox=eventElement.getBox();result={layout:true,start:eventElOffsets[0],end:eventElOffsets[0]+eventElBox.width,top:eventElOffsets[1],bottom:eventElOffsets[1]+eventElBox.height};}}}// Resource row is not rendered, and it's not collapsed. We are to calculate event record box approximately.
else{result={layout:false,start:me.getCoordinateFromDate(Math.max(eventRecord.startDateMS,me.timeAxis.startMS)),end:me.getCoordinateFromDate(Math.min(eventRecord.endDateMS,me.timeAxis.endMS))// top and bottom to go
};// Request local record coordinates within the scroll range.
var recordCoords=me.rowManager.getRecordCoords(resourceRecord,true);// faster than Object.assign...
result.top=recordCoords.y+me.barMargin;result.height=Math.max(me.rowManager.rowHeight-2*me.barMargin,1);result.bottom=result.top+result.height;}// Some boxes might need special adjustments
if(result){result=me.adjustItemBox(eventRecord,result);}}return result;}//endregion
//region Item box
/**
     * Gets box for displayed item designated by the record. If several boxes are displayed for the given item
     * then the method returns all of them. Box coordinates are in view coordinate system.
     *
     * Boxes outside scheduling view timeaxis timespan and inside collapsed rows (if row defining store is a tree store)
     * will not be returned. Boxes outside scheduling view vertical visible area (i.e. boxes above currently visible
     * top row or below currently visible bottom row) will be calculated approximately.
     *
     * @param {Scheduler.model.EventModel} event
     * @return {Object|Object[]}
     * @return {Boolean} return.rendered Whether the box was calculated for the rendered scheduled record or was
     *                                   approximatelly calculated for the scheduled record outside of the current
     *                                   vertical view area.
     * @return {Number} return.top
     * @return {Number} return.bottom
     * @return {Number} return.start
     * @return {Number} return.end
     * @return {String} return.relPos if the item is not rendered then provides a view relative position one of 'before', 'after'
     * @internal
     */},{key:"getItemBox",value:function getItemBox(event){var _this83=this;var includeOutside=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return event.resources.map(function(resource){return _this83.getResourceEventBox(event,resource,includeOutside);});}/**
     * Adjusts event record box if needed
     *
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Object} eventRecordBox
     * @return {Number} eventRecordBox.top
     * @return {Number} eventRecordBox.bottom
     * @return {Number} eventRecordBox.start
     * @return {Number} eventRecordBox.end
     * @return {Object}
     * @return {Number} return.top
     * @return {Number} return.bottom
     * @return {Number} return.start
     * @return {Number} return.end
     * @internal
     */},{key:"adjustItemBox",value:function adjustItemBox(eventRecord,eventRecordBox){var viewStartMS=this.timeAxis.startMS,viewEndMS=this.timeAxis.endMS,eventStartMS=eventRecord.startDateMS,eventEndMS=eventRecord.endDateMS,width=this.timeAxisViewModel.totalSize,OUTSIDE_VIEW_OFFSET=40;// To make sure non-relevant dependency lines aren't seen
// adjust event box to render dependency lines for events that are outside of the view
if(viewStartMS>eventStartMS)eventRecordBox.start=-OUTSIDE_VIEW_OFFSET;if(viewStartMS>eventEndMS)eventRecordBox.end=-OUTSIDE_VIEW_OFFSET;if(viewEndMS<eventStartMS)eventRecordBox.start=width+OUTSIDE_VIEW_OFFSET;if(viewEndMS<eventEndMS)eventRecordBox.end=width+OUTSIDE_VIEW_OFFSET;return eventRecordBox;}//endregion
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerRegions;}(Target||Base));};/**
 * @module Scheduler/view/mixin/SchedulerState
 */var copyProperties=['eventLayout','barMargin','mode','tickSize','zoomLevel','eventColor','eventStyle','fillTicks'];/**
 * Mixin for Scheduler that handles state. It serializes the following scheduler properties:
 *
 * * eventLayout
 * * barMargin
 * * mode
 * * tickSize
 * * zoomLevel
 * * eventColor
 * * eventStyle
 *
 * See {@link Grid.view.mixin.GridState} and {@link Common.mixin.State} for more information on state.
 *
 * @mixin
 */var SchedulerState=function SchedulerState(Target){return(/*#__PURE__*/function(_ref309){_inherits2(SchedulerState,_ref309);function SchedulerState(){_classCallCheck2(this,SchedulerState);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulerState).apply(this,arguments));}_createClass2(SchedulerState,[{key:"getState",/**
     * Get schedulers current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,
     * selectedRecordId, column states and store state.
     * @returns {Object} State object to be serialized
     * @private
     */value:function getState(){return ObjectHelper.copyProperties(_get2(_getPrototypeOf2(SchedulerState.prototype),"getState",this).call(this),this,copyProperties);}/**
     * Apply previously stored state.
     * @param {Object} state
     * @private
     */},{key:"applyState",value:function applyState(state){ObjectHelper.copyProperties(this,state,copyProperties);_get2(_getPrototypeOf2(SchedulerState.prototype),"applyState",this).call(this,state);}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return SchedulerState;}(Target||Base));};/**
 * @module Scheduler/view/mixin/EventSelection
 */ /**
 * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.
 * @mixin
 */var EventSelection=function EventSelection(Target){return(/*#__PURE__*/function(_ref310){_inherits2(EventSelection,_ref310);function EventSelection(){_classCallCheck2(this,EventSelection);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventSelection).apply(this,arguments));}_createClass2(EventSelection,[{key:"afterConstruct",//endregion
//region Events
/**
     * Fired any time there is a change to the events selected in the Scheduler.
     * @event eventSelectionChange
     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'
     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} selected An array of the Events or Assignments added to the selection.
     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} deselected An array of the Events or Assignments removed from the selection.
     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} selection The new selection.
     */ //endregion
//region Init
value:function afterConstruct(){_get2(_getPrototypeOf2(EventSelection.prototype),"afterConstruct",this).call(this);this.navigator.on({navigate:'onEventNavigate',thisObj:this});}//endregion
//region Selected Collection
},{key:"isEventSelected",/**
     * Returns `true` if the {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment} is selected.
     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} event The event or assignment
     * @category Selection
     */value:function isEventSelected(event){return this.selectedCollection.includes(event);}/**
     * Selects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}
     * *if it is not selected*.
     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} event The event or assignment to select. When using multi assignment, supply an AssignmentModel
     * @param {Boolean} [preserveSelection=false] Pass `true` to preserve any other selected events or assignments
     * @category Selection
     */},{key:"selectEvent",value:function selectEvent(event){var preserveSelection=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// If there event is already selected, this is a no-op.
// In this case, selection must not be cleared even in the absence of preserveSelection
if(!this.isEventSelected(event)){preserveSelection?this.selectedCollection.add(event):this.selectedEvents=event;}}/**
     * Deselects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}
     * *if it is selected*.
     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} event The event or assignment to deselect. When using multi assignment, supply an AssignmentModel
     * @category Selection
     */},{key:"deselectEvent",value:function deselectEvent(event){var preserveSelection=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(this.isEventSelected(event)){this.selectedCollection.remove(event);}}/**
     * Adds {@link Scheduler.model.EventModel events} or {@link Scheduler.model.AssignmentModel assignments} to the selection.
     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} events Events or assignments to be deselected
     * @category Selection
     */},{key:"selectEvents",value:function selectEvents(events){this.selectedCollection.add(events);}/**
     * Removes {@link Scheduler.model.EventModel events} or {@link Scheduler.model.AssignmentModel assignments} from the selection.
     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} events Events or assignments  to be deselected
     * @category Selection
     */},{key:"deselectEvents",value:function deselectEvents(events){this.selectedCollection.remove(events);}/**
     * Deselects all {@link Scheduler.model.EventModel events} or {@link Scheduler.model.AssignmentModel assignments}.
     * @category Selection
     */},{key:"clearEventSelection",value:function clearEventSelection(){this.selectedEvents=[];}//endregion
//region Events
/**
     * Responds to mutations of the underlying selection Collection.
     * Keeps the UI synced, eventSelectionChange event is fired when `me.silent` is falsy.
     * @private
     */},{key:"onSelectedCollectionChange",value:function onSelectedCollectionChange(_ref311){var added=_ref311.added,removed=_ref311.removed;var me=this,selection=me.selectedEvents,selected=added||[],deselected=removed||[];function updateSelection(record,select){var resourceRecord=record.isTask?record:record.resource,eventRecord=record.isAssignment?record.event:record;if(eventRecord){var element=me.getElementFromEventRecord(eventRecord,resourceRecord);me.currentOrientation.toggleCls(eventRecord,resourceRecord,me.eventSelectedCls,select);if(record.isAssignment){me.getElementsFromEventRecord(eventRecord).forEach(function(el){if(el!==element){el.classList[select?'add':'remove'](me.eventAssignHighlightCls);}});}}}selected.forEach(function(record){return updateSelection(record,true);});deselected.forEach(function(record){return updateSelection(record,false);});if(!me.silent){me.trigger('eventSelectionChange',{action:selection.length>0?selected.length>0&&deselected.length>0?'update':selected.length>0?'select':'deselect':'clear',selection:selection,selected:selected,deselected:deselected});}}/**
     * Store data change listener to remove events from selection which are no longer in the store.
     * @private
     */},{key:"onInternalEventStoreChange",value:function onInternalEventStoreChange(_ref312){var action=_ref312.action,events=_ref312.records,eventStore=_ref312.source;_get2(_getPrototypeOf2(EventSelection.prototype),"onInternalEventStoreChange",this).apply(this,arguments);var me=this;me.silent=!me.triggerSelectionChangeOnRemove;if(action==='remove'){me.deselectEvents(events);}else if(action==='dataset'){if(!me.maintainSelectionOnDatasetChange){me.clearEventSelection();}else{me.selectedEvents=me.selectedEvents.filter(function(event){return eventStore.includes(event);});}}me.silent=false;}/**
     * Assignment change listener to remove events from selection which are no longer in the assignments.
     * @private
     */},{key:"onAssignmentRemove",value:function onAssignmentRemove(_ref313){var assignments=_ref313.records;_get2(_getPrototypeOf2(EventSelection.prototype),"onAssignmentRemove",this).apply(this,arguments);var me=this;me.silent=!me.triggerSelectionChangeOnRemove;me.deselectEvents(assignments);me.silent=false;}/**
     * Mouse listener to update selection.
     * @private
     */},{key:"onEventSelectionClick",value:function onEventSelectionClick(event,clickedRecord){var me=this;// Multi selection: CTRL means preserve selection, just add or remove the event.
// Single selection: CTRL deselects already selected event
if(me.isEventSelected(clickedRecord)){event.ctrlKey&&me.deselectEvent(clickedRecord,me.multiEventSelect);}else{me.selectEvent(clickedRecord,event.ctrlKey&&me.multiEventSelect);}}/**
     * Navigation listener to update selection.
     * @private
     */},{key:"onEventNavigate",value:function onEventNavigate(_ref314){var event=_ref314.event,item=_ref314.item;if(!this.eventSelectionDisabled){var me=this,record=item&&(item.nodeType===1?me.assignmentStore?me.resolveAssignmentRecord(item):me.resolveEventRecord(item):item);if(record){me.onEventSelectionClick(event,record);}// Click outside of an event/assignment;
else{me.clearEventSelection();}}}//endregion
//region Getters/Setters
// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"selectedCollection",set:function set(selectedCollection){if(!(selectedCollection instanceof Collection)){selectedCollection=new Collection(selectedCollection);}this._selectedCollection=selectedCollection;// Fire row change events from onSelectedCollectionChange
selectedCollection.on({change:'onSelectedCollectionChange',thisObj:this});},get:function get(){return this._selectedCollection;}//endregion
//region Modify selection
/**
     * The {@link Scheduler.model.EventModel events} or {@link Scheduler.model.AssignmentModel assignments} which are selected.
     * @returns {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]}
     * @category Selection
     */},{key:"selectedEvents",get:function get(){return this.selectedCollection.values;},set:function set(events){// Replace the entire selected collection with the new record set
this.selectedCollection.splice(0,this.selectedCollection.count,events||[]);}},{key:"widgetClass",get:function get(){}//endregion
}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.
             * @config {Boolean}
             * @category Selection
             */multiEventSelect:false,/**
             * Configure as `true`, or set property to `true` to disable event selection.
             * @config {Boolean}
             * @category Selection
             */eventSelectionDisabled:false,/**
             * CSS class to add to selected events.
             * @config {String}
             * @default
             * @category CSS
             * @private
             */eventSelectedCls:'b-sch-event-selected',/**
             * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.
             * @config {Boolean}
             * @default
             * @category Selection
             */triggerSelectionChangeOnRemove:false,/**
             * This flag controls whether Scheduler should maintain its selection of events when loading a new dataset (if selected event ids are included in the newly loaded dataset).
             * @config {Boolean}
             * @default
             * @category Selection
             */maintainSelectionOnDatasetChange:true,/**
             * CSS class to add to other instances of a selected event, to highlight them.
             * @config {String}
             * @default
             * @category CSS
             * @private
             */eventAssignHighlightCls:'b-sch-event-assign-selected',/**
             * Collection to store selection.
             * @config {Common.util.Collection}
             * @private
             */selectedCollection:{}};}}]);return EventSelection;}(Target||Base));};/**
 * @module Scheduler/view/mixin/EventNavigation
 */var sortByStartDate=function sortByStartDate(l,r){return l.startDate-r.startDate;},preventDefault=function preventDefault(e){return e.preventDefault();};/**
 * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.
 * @mixin
 */var EventNavigation=function EventNavigation(Target){return(/*#__PURE__*/function(_ref315){_inherits2(EventNavigation,_ref315);function EventNavigation(){_classCallCheck2(this,EventNavigation);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventNavigation).apply(this,arguments));}_createClass2(EventNavigation,[{key:"construct",//endregion
//region Events
//endregion
value:function construct(config){var me=this,onDeleteKey=FunctionHelper.createThrottled(me.onDeleteKey,500,me);me.isInTimeAxis=me.isInTimeAxis.bind(me);_get2(_getPrototypeOf2(EventNavigation.prototype),"construct",this).call(this,config);var navigatorConfig=ObjectHelper.merge({ownerCmp:me,target:me.timeAxisSubGridElement,processEvent:me.processEvent,itemSelector:".".concat(me.eventCls,"-wrap"),focusCls:me.focusCls,navigatePrevious:FunctionHelper.createThrottled(me.navigatePrevious,200,me,null,preventDefault),navigateNext:FunctionHelper.createThrottled(me.navigateNext,200,me,null,preventDefault),allowCtrlKey:true,scrollSilently:true,keys:{Space:'onEventSpaceKey',Enter:'onEventEnterKey',Delete:onDeleteKey,Backspace:onDeleteKey}},me.navigator);me.navigator=new Navigator(navigatorConfig);}},{key:"doDestroy",value:function doDestroy(){this.navigator.destroy();_get2(_getPrototypeOf2(EventNavigation.prototype),"doDestroy",this).call(this);}},{key:"isInTimeAxis",value:function isInTimeAxis(record){// If event is hidden by workingTime configs, horizontal mapper would raise a flag on instance meta
// We still need to check if time span is included in axis
return!record.instanceMeta(this).excluded&&this.timeAxis.isTimeSpanInAxis(record);}/*
     * Override of GridNavigation#focusCell method to handle the TimeAxisColumn.
     * Not needed until we implement full keyboard accessibiliy.
     */},{key:"accessibleFocusCell",value:function accessibleFocusCell(cellSelector,options){var me=this;cellSelector=me.normalizeCellContext(cellSelector);if(cellSelector.columnId===me.timeAxisColumn.id);else{return _get2(_getPrototypeOf2(EventNavigation.prototype),"focusCell",this).call(this,cellSelector,options);}}},{key:"getPrevious",value:function getPrevious(eventOrAssignmentRecord,isDelete){var me=this,resourceStore=me.resourceStore,isAssignment=eventOrAssignmentRecord.isAssignment;// TODO: https://app.assembla.com/spaces/bryntum/tickets/6526 this class should not know about Gantt.
if(eventOrAssignmentRecord.isTask){return me.eventStore.getAt(me.eventStore.indexOf(eventOrAssignmentRecord)-1);}var resourceRecord=eventOrAssignmentRecord.resource||me.eventStore.getResourcesForEvent(eventOrAssignmentRecord)[0],resourceEvents=resourceRecord.getEvents().filter(me.isInTimeAxis).sort(sortByStartDate),eventRecord=isAssignment?eventOrAssignmentRecord.event:eventOrAssignmentRecord,previousEvent=resourceEvents[resourceEvents.indexOf(eventRecord)-1];// At first event for resource, traverse up the resource store.
if(!previousEvent){// If we are deleting an event, skip other instances of the event which we may encounter
// due to multi-assignment.
for(var rowIdx=resourceStore.indexOf(resourceRecord)-1;(!previousEvent||isDelete&&previousEvent===eventRecord)&&rowIdx>=0;rowIdx--){resourceRecord=resourceStore.getAt(rowIdx);var events=resourceRecord.getEvents().filter(me.isInTimeAxis).sort(sortByStartDate);previousEvent=events.length&&events[events.length-1];}}// If an assignment was passed, return one
return isAssignment?me.assignmentStore.getAssignmentForEventAndResource(previousEvent,resourceRecord):previousEvent;}},{key:"navigatePrevious",value:function navigatePrevious(keyEvent){var me=this,previousEvent=me.getPrevious(keyEvent.assignmentRecord||keyEvent.eventRecord);keyEvent.preventDefault();if(previousEvent){if(!keyEvent.ctrlKey){me.clearEventSelection();}me.navigateTo(previousEvent,keyEvent);}}},{key:"getNext",value:function getNext(eventOrAssignmentRecord,isDelete){var me=this,resourceStore=me.resourceStore,isAssignment=eventOrAssignmentRecord.isAssignment;// TODO: https://app.assembla.com/spaces/bryntum/tickets/6526 this class should not know about Gantt.
if(eventOrAssignmentRecord.isTask){return me.eventStore.getAt(me.eventStore.indexOf(eventOrAssignmentRecord)+1);}var resourceRecord=isAssignment?eventOrAssignmentRecord.resource:eventOrAssignmentRecord.resources[0],//|| me.eventStore.getResourcesForEvent(eventOrAssignmentRecord)[0],
resourceEvents=resourceRecord.getEvents().filter(me.isInTimeAxis).sort(sortByStartDate),eventRecord=isAssignment?eventOrAssignmentRecord.event:eventOrAssignmentRecord,nextEvent=resourceEvents[resourceEvents.indexOf(eventRecord)+1];// At last event for resource, traverse down the resource store
if(!nextEvent){// If we are deleting an event, skip other instances of the event which we may encounter
// due to multi-assignment.
for(var rowIdx=resourceStore.indexOf(resourceRecord)+1;(!nextEvent||isDelete&&nextEvent===eventRecord)&&rowIdx<resourceStore.count;rowIdx++){resourceRecord=resourceStore.getAt(rowIdx);nextEvent=resourceRecord.getEvents().filter(me.isInTimeAxis).sort(sortByStartDate)[0];}}// If an assignment was passed, return one
return isAssignment?me.assignmentStore.getAssignmentForEventAndResource(nextEvent,resourceRecord):nextEvent;}},{key:"navigateNext",value:function navigateNext(keyEvent){var me=this,nextEvent=me.getNext(keyEvent.assignmentRecord||keyEvent.eventRecord);keyEvent.preventDefault();if(nextEvent){if(!keyEvent.ctrlKey){me.clearEventSelection();}me.navigateTo(nextEvent,keyEvent);}}},{key:"navigateTo",value:function navigateTo(targetEvent){var uiEvent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;if(targetEvent){// No key processing during scroll
me.navigator.disabled=true;var resource=targetEvent.resource;me.scrollResourceEventIntoView(resource,targetEvent.isAssignment?targetEvent.event:targetEvent,null,{animate:100}).then(function(){// Panel can be destroyed before promise is resolved
if(!me.isDestroyed){me.navigator.disabled=false;me.activeEvent=targetEvent;me.navigator.trigger('navigate',{event:uiEvent,item:DomHelper.up(me.getElementFromEventRecord(targetEvent,resource),me.navigator.itemSelector)});}});}}},{key:"processEvent",value:function processEvent(keyEvent){var me=this,eventElement=DomHelper.up(keyEvent.target,me.eventSelector);if(!me.navigator.disabled&&eventElement){keyEvent.assignmentRecord=me.resolveAssignmentRecord(eventElement);keyEvent.eventRecord=me.resolveEventRecord(eventElement);keyEvent.resourceRecord=me.resolveResourceRecord(eventElement);}return keyEvent;}},{key:"onDeleteKey",value:function onDeleteKey(keyEvent){var record=keyEvent.assignmentRecord||keyEvent.eventRecord;if(!this.readOnly&&this.enableDeleteKey&&record){this.removeRecords([record]);}}},{key:"removeRecords",value:function removeRecords(records){if(!this.readOnly&&records.length){records.forEach(function(r){return r.remove();});}}},{key:"onEventSpaceKey",value:function onEventSpaceKey(keyEvent){// Empty, to be chained by features (used by TimeSpanRecordContextMenuBase)
}},{key:"onEventEnterKey",value:function onEventEnterKey(keyEvent){// Empty, to be chained by features (used by EventEdit)
}},{key:"activeEvent",set:function set(eventOrAssignmentRec){var eventEl=this.getElementFromEventRecord(eventOrAssignmentRec.isAssignment?eventOrAssignmentRec.event:eventOrAssignmentRec,eventOrAssignmentRec.resource);this.navigator.activeItem=eventEl.parentNode;},get:function get(){var activeItem=this.navigator.activeItem;if(activeItem){return this.resolveEventRecord(activeItem);}}},{key:"isActionableLocation",get:function get(){// Override from grid if the Navigator's location is an event (or task if we're in Gantt)
// Being focused on a task/event means that it's *not* actionable. It's not valid to report
// that we're "inside" the cell in a TimeLine, so ESC must not attempt to focus the cell.
if(!this.navigator.activeItem){return _get2(_getPrototypeOf2(EventNavigation.prototype),"isActionableLocation",this);}}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}],[{key:"defaultConfig",//region Default config
get:function get(){return{/**
             * A config object to use when creating the {@link Common.helper.util.Navigator}
             * to use to perform keyboard navigation in the timeline.
             * @config {Object}
             * @default
             */navigator:null,/**
             * A CSS class name to add to focused events.
             * @config {String}
             * @default
             * @category CSS
             * @private
             */focusCls:'b-active',/**
             * Allow using [Delete] and [Backspace] to remove events/assignments
             * @config {Boolean}
             * @default
             * @category Misc
             */enableDeleteKey:true};}}]);return EventNavigation;}(Target||Base));};/**
 * @module Scheduler/view/orientation/BaseHorizontalMapper
 */var emptyObject$3={},elRange=document.createRange(),MAX_WIDTH=9999999;function isEventElAvailable(element){return!(element.classList.contains('b-dragging')||element.classList.contains('b-resizing'));}/**
 * Base class for task & event rendering in horizontal mode, used by Scheduler and Gantt
 * @private
 * @abstract
 */var BaseHorizontalMapper=/*#__PURE__*/function(_Delayable16){_inherits2(BaseHorizontalMapper,_Delayable16);function BaseHorizontalMapper(){_classCallCheck2(this,BaseHorizontalMapper);return _possibleConstructorReturn2(this,_getPrototypeOf2(BaseHorizontalMapper).apply(this,arguments));}_createClass2(BaseHorizontalMapper,[{key:"construct",//region Init
value:function construct(view){var me=this;me.view=view;me.innerElCls="".concat(view.eventCls);me.availableDivs=new Bag();me.reservedIds={};me.divCount=0;}},{key:"init",value:function init(){var me=this;me.view.rowManager.on({beforetranslaterow:me.onBeforeTranslateRow,translaterow:me.onTranslateRow,beforerowheight:me.onBeforeRowHeightChange,thisObj:me});me.view.on({beforetogglenode:me.onBeforeToggleNode,togglenode:me.onToggleNode,beforetoggleallnodes:me.onBeforeToggleAllNodes,toggleallnodes:me.onToggleAllNodes,thisObj:me});}//endregion
//region Helpers
},{key:"translateToPageCoordinate",value:function translateToPageCoordinate(x){var element=this.column.subGridElement;return x+element.getBoundingClientRect().left-element.scrollLeft;}//endregion
//Region View hooks
},{key:"refreshRows",value:function refreshRows(reLayoutEvents){if(reLayoutEvents){this.cache.clear(this.refreshFromRerender);this.view.refreshFromRerender=false;}}// If we dragged an event outside of its rendered block, it will have been released
// but releaseTimeSpanDiv won't hide it if it has b-dragging, so we have to
// hide it now.
},{key:"onDragAbort",value:function onDragAbort(context){if(this.view.currentOrientation.availableDivs.includes(context.element)){context.element.classList.add('b-sch-released');}}},{key:"onLocaleChange",value:function onLocaleChange(){// Clear events in case they use date as part of displayed info
this.cache.clear();}//endregion
//region Layout & render
/**
     * Converts a start/endDate into a MS value used when rendering the timeSpan
     * @private
     * @abstract
     */},{key:"calculateMS",value:function calculateMS(timespanRecord){throw new Error('Implement in subclass');}/**
     * Gets timespan coordinates etc. Relative to containing row. If the timespan is outside of the zone in
     * which timespans are rendered, that is outside of the TimeAxis, or outside of the vertical zone in which timespans
     * are rendered, then `undefined` is returned.
     * @private
     * @param {Scheduler.model.TimeSpan} timeSpan TimeSpan record
     * @param {Common.data.Model} rowRecord Row record
     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside of the rendered zone in both
     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans
     * which may be outside the rendered zone.
     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside of the TimeAxis's bounds
     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside of the vertical timespan viewport's bounds.
     * @returns {{event/task: *, left: number, width: number, start: (Date), end: (Date), startMs: number, endMs: number, startsOutsideView: boolean, endsOutsideView: boolean}}
     */},{key:"getTimeSpanRenderData",value:function getTimeSpanRenderData(timeSpan,rowRecord){var includeOutside=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,timeAxis=me.timeAxis,includeOutsideTimeAxis=includeOutside===true||includeOutside.timeAxis,includeOutsideViewport=includeOutside===true||includeOutside.viewport;// If timespan is outside the TimeAxis, give up trying to calculate a layout (Unless we're including timespans
// outside our zone)
if(includeOutsideTimeAxis||timeAxis.isTimeSpanInAxis(timeSpan)){var view=me.view,row=view.getRowById(rowRecord);// If row is outside the rendered block, we cannot compute a timespan layout.
if(row||includeOutsideViewport){// TODO: buffer size as config
var scrollTop=view.scrollable.y,viewportTop=Math.max(scrollTop-50,0),viewportBottom=Math.min(scrollTop+view._bodyRectangle.height+50,view.virtualScrollHeight);// If the row is outside the zone in which we render timespans, give up trying to calculate a
// layout (Unless we're including timespans outside our zone)
if(includeOutsideViewport||row.top<viewportBottom&&row.top+(row.height||row.lastHeight)>=viewportTop){var _data;var pxPerMinute=me.timeAxisViewModel.getSingleUnitInPixels('minute'),timespanStart=timeSpan.startDate,timespanEnd=timeSpan.endDate||timespanStart,viewStartMS=timeAxis.startMS,viewEndMS=timeAxis.endMS,_me$calculateMS=me.calculateMS(timeSpan),startMS=_me$calculateMS.startMS,endMS=_me$calculateMS.endMS,durationMS=_me$calculateMS.durationMS,startsOutsideView=startMS<viewStartMS|(startMS>viewEndMS)<<1,endsOutsideView=endMS>viewEndMS|(endMS<=viewStartMS)<<1,durationMinutes=durationMS/(1000*60),width=endsOutsideView?pxPerMinute*durationMinutes:null;//view.getCoordinateFromDate(viewStartMS + durationMS),
var endX=view.getCoordinateFromDate(endMS,{local:true,respectExclusion:true,isEnd:true}),startX,clippedStart=false,clippedEnd=false;// If event starts outside of view, estimate where.
if(startsOutsideView){startX=(startMS-viewStartMS)/(1000*60)*pxPerMinute;}// Starts in view, calculate exactly
else{// If end date is included in time axis but start date is not (when using time axis exclusions), snap start date to next included data
startX=view.getCoordinateFromDate(startMS,{local:true,respectExclusion:true,isEnd:false,snapToNextIncluded:endX!==-1});clippedStart=startX===-1;}if(endsOutsideView){endX=startX+width;}else{clippedEnd=endX===-1;}if(clippedEnd&&!clippedStart){// We know where to start but not where to end, snap it (the opposite is already handled by the
// snapToNextIncluded flag when calculating startX above)
endX=view.getCoordinateFromDate(endMS,{local:true,respectExclusion:true,isEnd:true,snapToNextIncluded:true});}// If the element is very wide there's no point in displaying it all.
// Indeed the element may not be displayable at extremely large widths.
if(width>MAX_WIDTH){// The start is before the TimeAxis start
if(startsOutsideView===1){// Both ends outside - spans TimeAxis
if(endsOutsideView===1){startX=-100;endX=view.timeAxisColumn.width+100;}// End is in view
else{startX=endX-MAX_WIDTH;}}// The end is after, but the start is in view
else if(endsOutsideView===1){endX=startX+MAX_WIDTH;}}if(clippedStart&&clippedEnd){// Both ends excluded, but there might be some part in between that should be displayed...
startX=view.getCoordinateFromDate(startMS,{local:true,respectExclusion:true,isEnd:false,snapToNextIncluded:true,max:endMS});endX=view.getCoordinateFromDate(endMS,{local:true,respectExclusion:true,isEnd:true,snapToNextIncluded:true,min:startMS});if(startX===endX){// Raise flag on instance meta to avoid duplicating this logic
timeSpan.instanceMeta(view).excluded=true;// Excluded by time axis exclusion rules, render nothing
return null;}}var data=(_data={},_defineProperty(_data,me.view.scheduledEventName,timeSpan),_defineProperty(_data,"left",Math.min(startX,endX)),_defineProperty(_data,"width",Math.abs(endX-startX)),_defineProperty(_data,"start",timespanStart),_defineProperty(_data,"end",timespanEnd),_defineProperty(_data,"startMs",startMS),_defineProperty(_data,"endMs",endMS),_defineProperty(_data,"rowId",rowRecord.id),_defineProperty(_data,"startsOutsideView",startsOutsideView),_defineProperty(_data,"endsOutsideView",endsOutsideView),_defineProperty(_data,"clippedStart",clippedStart),_defineProperty(_data,"clippedEnd",clippedEnd),_defineProperty(_data,"row",row),_data);// If filling ticks we need to also keep datas MS values, since they are used for sorting timespans
if(me.view.fillTicks){data.dataStartMs=data.start.getTime();data.dataEndMs=data.end.getTime();}// in ExtScheduler this is only checked when managedEventSizing is true, but we need top because of positioning
data.top=Math.max(0,view.resourceMargin);if(view.managedEventSizing){// Timespan height should be at least 1px
data.height=Math.max(view.rowManager.rowHeight-2*view.resourceMargin,1);}return data;}}}}},{key:"onTranslateRow",value:function onTranslateRow(_ref316){var row=_ref316.source;}},{key:"onBeforeRowHeightChange",value:function onBeforeRowHeightChange(event){var view=this.view,newHeight=event?event.height:this.rowHeight;this.cache.clear();// TODO: should move out of here to scheduler
if(view.foregroundCanvas){view.element.classList.add('b-notransition');view.foregroundCanvas.style.fontSize="".concat(newHeight-view.resourceMargin*2,"px");// We must force a style recalculation so that the next measurement of milestoneWidth
// gets the new value.
this._thisIsAUsedExpression(window.getComputedStyle(view.foregroundCanvas).fontSize);view.element.classList.remove('b-notransition');}// The Dependencies feature will have to recalculate its milestoneWidth when it is refreshed next.
view.milestoneWidth=null;}},{key:"onBeforeTranslateRow",value:function onBeforeTranslateRow(_ref317){var row=_ref317.row;// Triggered before row is repurposed with new record on scroll.
// Clear layout for the outgoing record.
this.cache.clearRow(row.id);}},{key:"onViewportResize",value:function onViewportResize(){// Force layout even if scroll positions have not changed.
this.lastUpdateScrollPos=null;// Update the layout.
this.update();}// /**
//  * Called when all rows are rerendered, following a sort operation etc.
//  * @private
//  */
// onBeforeFullRender() {
//     this.cache.clear();
// }
},{key:"positionTimeSpan",value:function positionTimeSpan(el,x,y){var mode=this.view.eventPositionMode||'translate';switch(mode){case'position':el.style.left="".concat(x,"px");el.style.top="".concat(y,"px");return;case'translate':el.style.transform="translate(".concat(x,"px,").concat(y,"px)");return;case'translate3d':el.style.transform="translate3d(".concat(x,"px,").concat(y,"px,0)");}}},{key:"getTimeSpanDiv",value:function getTimeSpanDiv(timeSpanData){var me=this,availableDivs=me.availableDivs,id=timeSpanData.id,oldId=timeSpanData.oldId;if(me.view.eventScrollMode==='move'){var wrapperElement;// Allow a TimeSpan to reuse the last div that was assigned to it so that transitions may be used when
// editing an event. Will fallback to old id, to cover cases where id has changed since last update
if(id){wrapperElement=availableDivs.get(id)||availableDivs.get(oldId);}// Do not return it if it's in use by drag/drop or resize
if(wrapperElement&&!isEventElAvailable(wrapperElement)){wrapperElement=null;}// No element which matches the requested element id available.
// Just allocate one from the cache which is not being dragged or resized.
if(!wrapperElement){wrapperElement=availableDivs.find(isEventElAvailable);}if(wrapperElement){availableDivs.remove(wrapperElement);wrapperElement.classList.remove('b-sch-released');}return wrapperElement;}return null;}},{key:"releaseTimeSpanDiv",value:function releaseTimeSpanDiv(div){var remainVisible=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,divStyle=div.style;if(me.view.eventScrollMode==='move'){me.availableDivs.add(div);if(!remainVisible&&isEventElAvailable(div)){div.classList.add('b-sch-released');}}else{if(!remainVisible){divStyle.opacity=0;divStyle.pointerEvents='none';me.setTimeout(function(){div.remove();divStyle.opacity=1;divStyle.pointerEvents='';},200);}}}},{key:"updateElementId",value:function updateElementId(element,newId){var availableDivs=this.availableDivs;// Change the id, and move it to the end so that it won't be immediately
// be consumed by the next request for an element, but is more likely to
// remain to be found by its original owner TimeSpan
if(availableDivs.includes(element)){availableDivs.changeId(element,newId);// Used to be Collection.move(). Deleting and adding to end of Bags Set to mimic
availableDivs.items.delete(element);availableDivs.items.add(element);}}},{key:"triggerPaint",value:function triggerPaint(data,element){throw new Error('Implement in subclass');}// forceNewElement is true for newly added events, to not "steal" an element that might be needed later on in the
// same row (which triggers a transition from that location to the new)
},{key:"renderTimeSpan",value:function renderTimeSpan(data,cache,renderedTimeSpan){var forceNewElement=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,view=me.view;var cls=data.cls,id=data.id,wrapperElement=cache&&cache.div,changedDiv=false,isDragCreateProxy,trigger=false,isRepaint=false,innerElement=cache&&cache.eventEl;// TODO: this fn should not need to be called for events already in view, unless there is some update. might give a little better performance
// No div assigned, reuse one if possible and such mode is used
if(!forceNewElement&&!wrapperElement&&(wrapperElement=me.getTimeSpanDiv(data))){// changedDiv means that we're using somebody else's element.
changedDiv=wrapperElement.id!==id;}isDragCreateProxy=wrapperElement&&wrapperElement.classList.contains('b-sch-dragcreator-proxy');// No div assigned or reusing some other TimeSpan's released div
if(!wrapperElement||changedDiv){// Reusing another TimeSpan's released element.
// It needs to be emptied.
if(changedDiv){// If there's no .b-sch-event, then it could be a resourceTimeRange element
// so just use firstElementChild.
innerElement=wrapperElement.innerElement||wrapperElement.firstElementChild;innerElement.innerHTML='';innerElement.style.cssText='';if(innerElement.nextSibling){elRange.setStartAfter(innerElement);elRange.setEndAfter(wrapperElement.lastChild);elRange.deleteContents();}}// New element needed
else{var _DomHelper$createElem5=DomHelper.createElement({tabIndex:0,// adding inner div which will be rendered as the event
children:[{className:"".concat(me.innerElCls)}]},true);var _DomHelper$createElem6=_slicedToArray(_DomHelper$createElem5,2);wrapperElement=_DomHelper$createElem6[0];innerElement=_DomHelper$createElem6[1];// To not have to retrieve it from DOM later
wrapperElement.innerElement=innerElement;}wrapperElement.id=id;// Add event/task id to wrappers dataset
if(data[view.scheduledEventName+'Id']){wrapperElement.dataset[view.scheduledEventName+'Id']=data[view.scheduledEventName+'Id'];}DomHelper.syncClassList(wrapperElement,data.wrapperCls);if(wrapperElement.parentNode!==view.foregroundCanvas){view.foregroundCanvas.appendChild(wrapperElement);}// set all attributes
DomHelper.syncClassList(innerElement,cls);if(data.style||data.internalStyle){innerElement.style.cssText=(data.internalStyle||'')+(data.style||'');}// Only update content if the data block has new content in it
if(data.body){// Clone because this operation has to be repeatable
innerElement.appendChild(data.body.cloneNode(true));}// positioning and sizing wrapper
wrapperElement.style.cssText="width:".concat(data.width,"px;height:").concat(data.height,"px;").concat(data.wrapperStyle||'');me.positionTimeSpan(wrapperElement,data.left,data.top);trigger=true;}// Reusing TimeSpan's own div - it's a repaint
else{// has div, update attributes if needed.
var old=renderedTimeSpan&&cache.div?renderedTimeSpan:emptyObject$3;innerElement=wrapperElement.querySelector(".".concat(me.innerElCls))||wrapperElement.firstElementChild;// We are updating an existing event here, it may have lifecycle classes
// such as resizing, or terminals visible etc.
// Surgically update the class list of the elements.
DomHelper.syncClassList(wrapperElement,data.wrapperCls);DomHelper.syncClassList(innerElement,data.cls);// TODO: have to apply style on each update when specified, or store it and check if changed
if(data.style){innerElement.style.cssText=data.style;}// Clear style, might have changed from having a style to not having
else{innerElement.style.cssText='';}// Only update content if the data block has new content in it
if(data.body){var oldInnerHTML=innerElement.innerHTML,// TODO: Not in use? Should be used by labels? Percent bar in gantt? Store them in an array to avoid QSA
featureEls=innerElement.featureEls;//innerElement.querySelectorAll('[data-feature]');
if(featureEls){featureEls.forEach(function(featureEl){return data.body.appendChild(featureEl);});}innerElement.innerHTML='';// Clone because this operation has to be repeatable
innerElement.appendChild(data.body.cloneNode(true));// trigger only if content changed
trigger=innerElement.innerHTML!==oldInnerHTML;}// Wrapper element gets the focus class.
if(document.activeElement&&document.activeElement.id===data.id){wrapperElement.classList.add(view.focusCls);}// updates to wrapper
isRepaint=true;if(data.wrapperStyle){wrapperElement.style.cssText+=data.wrapperStyle;}if(old.left!==data.left||old.top!==data.top||data.style){me.positionTimeSpan(wrapperElement,data.left,data.top);trigger=true;}if(old.width!==data.width||data.style){wrapperElement.style.width="".concat(data.width,"px");trigger=true;}if(old.height!==data.height||data.style){wrapperElement.style.height="".concat(data.height,"px");trigger=true;}}cache.div=wrapperElement;cache.eventEl=innerElement;if(trigger){// If we are rendering to a drag-create proxy, it's not a repaint
if(isRepaint&&isDragCreateProxy){isRepaint=false;wrapperElement.classList.remove('b-sch-dragcreator-proxy');}// trigger paint or repaint, for features to hook into
me.triggerPaint(data,wrapperElement,isRepaint);}return wrapperElement;}/**
     * Adds an element for recycling to the event element recycling cache for the passed Event/Task if
     * there is no cache entry. Use this to prevent cache misses and the re-use by
     * event rendering of elements for other events which means that the element would have to be heavily
     * modified.
     * @param {Scheduler.model.TimeSpan} timeSpanRecord The event/task to create an element recycling cache entry for.
     * @param {Scheduler.model.ResourceModel} [resourceRecord] The associated resource record.
     * @param {HTMLElement} [element] The element to add to the element recycling cache under that id.
     */},{key:"cacheTimeSpanElement",value:function cacheTimeSpanElement(timeSpanRecord,resourceRecord,element){var me=this,availableDivs=me.availableDivs,view=me.view,timeSpanRecordId=view.getEventRenderId(timeSpanRecord,resourceRecord);if(!availableDivs.includes(timeSpanRecordId)){if(element){element.id=timeSpanRecordId;view.foregroundCanvas.appendChild(element);}else{element=DomHelper.createElement({id:timeSpanRecordId,tabIndex:0,// adding inner div which will be rendered as the event
children:[{className:"".concat(me.innerElCls)}]});}availableDivs.add(element);}}},{key:"updateRowTimeSpans",value:function updateRowTimeSpans(row,rowRecord){var forceLayout=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var fromHorizontalScroll=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;}},{key:"renderer",value:function renderer(renderData){}},{key:"updateFromHorizontalScroll",value:function updateFromHorizontalScroll(scrollLeft){var me=this,view=me.view,width=view.timeAxisSubGrid.width,startDate=view.getDateFromX(Math.max(0,scrollLeft-100)),endDate=view.getDateFromX(scrollLeft+width+100)||view.timeAxis.endDate,x=me.view.timeAxisSubGrid.scrollable.x,lastUpdateScrollPos=me.lastUpdateScrollPos;// TODO: make buffer width a config, add in correct unit
me.viewportStart=startDate&&startDate.getTime();me.viewportEnd=endDate&&endDate.getTime();// Only rerender all events if we have scrolled horizontally by at least half
// of the buffer zone above which is 100 pixels.
if(!lastUpdateScrollPos||Math.abs(x-lastUpdateScrollPos.x)>50){me.update();}}},{key:"update",value:function update(){var me=this,view=me.view;me.lastUpdateScrollPos={x:view.timeAxisSubGrid.scrollable.x,y:view.scrollable.y};var _iteratorNormalCompletion55=true;var _didIteratorError55=false;var _iteratorError55=undefined;try{for(var _iterator55=view.rowManager[Symbol.iterator](),_step55;!(_iteratorNormalCompletion55=(_step55=_iterator55.next()).done);_iteratorNormalCompletion55=true){var row=_step55.value;var cell=row.getCell(view.timeAxisColumn.id),cellData=DomDataStore.get(cell),record=view.store.getById(cellData.id);if(record){me.updateRowTimeSpans(cellData.row,record,false,true);}}}catch(err){_didIteratorError55=true;_iteratorError55=err;}finally{try{if(!_iteratorNormalCompletion55&&_iterator55.return!=null){_iterator55.return();}}finally{if(_didIteratorError55){throw _iteratorError55;}}}}//endregion
//region Dates
},{key:"getDateFromXY",value:function getDateFromXY(xy,roundingMethod,local){var coord=xy[0];if(!local){coord=this.translateToScheduleCoordinate(coord);}return this.timeAxisViewModel.getDateFromPosition(coord,roundingMethod);}},{key:"translateToScheduleCoordinate",value:function translateToScheduleCoordinate(x){var pos=x-this.column.subGridElement.getBoundingClientRect().left;return pos+this.view.scrollLeft;}//endregion
//region Store events
/**
     * User toggled a node in a tree grid, events needs to be redrawn since they might appear/disappear
     * @private
     */},{key:"onBeforeToggleNode",value:function onBeforeToggleNode(_ref318){var record=_ref318.record;var me=this,childCount=record.children&&record.children.length;// If there are no children to toggle, we must not clear below the
// toggling line because there's going to be no upcoming data change to fix it.
if(childCount){// The node being toggled doesn't need events clearing.
// It just has its expand/collapse icon toggled.
var currentRowRecord=me.view.store.getNext(record);while(currentRowRecord&&me.view.getRowFor(currentRowRecord)){me.cache.clearRow(currentRowRecord.id);currentRowRecord=me.view.store.getNext(currentRowRecord.id);}}// Flag to force drawing all events within row buffer, needed since expanding rows do not give them their
// height right away
me.togglingNode=true;}},{key:"onToggleNode",value:function onToggleNode(){// Ignore when toggling all nodes
if(!this.togglingAllNodes){this.togglingNode=false;}}},{key:"onBeforeToggleAllNodes",value:function onBeforeToggleAllNodes(){this.cache.clear();this.togglingAllNodes=this.togglingNode=true;}},{key:"onToggleAllNodes",value:function onToggleAllNodes(){this.togglingAllNodes=this.togglingNode=false;}// Row updated, clear cache keeping div to animate changes
},{key:"onRowRecordUpdate",value:function onRowRecordUpdate(_ref319){var record=_ref319.record;this.cache.clearRow(record.id,false,true);}// Row removed (resource/task), clear cache
},{key:"onRowRecordRemove",value:function onRowRecordRemove(_ref320){var _this84=this;var records=_ref320.records;// Records might be parents, always traversing makes sure children are also cleared. For leafs, traverse only
// affects the node itself. If a parent and its children are removed at once, it will still work since clearing
// cache again has no side effects
records.forEach(function(record){return record.traverse(function(r){return _this84.cache.clearRow(r.id);});});}//endregion
//region Region
/**
     * Gets the Region, relative to the timeline view element, representing the passed row and optionally just for a
     * certain date interval.
     * @param {Common.data.Model} rowRecord The row record
     * @param {Date} startDate A start date constraining the region
     * @param {Date} endDate An end date constraining the region
     * @return {Common.helper.util.Rectangle} The Rectangle which encapsulates the row
     */},{key:"getRowRegion",value:function getRowRegion(rowRecord,startDate,endDate){var view=this.view,column=this.column,row=view.getRowById(rowRecord.id);// might not be rendered
if(!row){return null;}var rowElement=row.getElement(column.region),taStart=this.timeAxis.startDate,taEnd=this.timeAxis.endDate,start=startDate?DateHelper.max(taStart,startDate):taStart,end=endDate?DateHelper.min(taEnd,endDate):taEnd,startX=view.getCoordinateFromDate(start),endX=view.getCoordinateFromDate(end,true,true),y=row.top+view.verticalScroller.scrollTop,x=Math.min(startX,endX),bottom=y+rowElement.offsetHeight;return new Rectangle(x,y,Math.max(startX,endX)-x,bottom-y);}/**
     * Gets the start and end dates for an element rectangle
     * @param {Common.helper.util.Rectangle} rect The Rectangle to map to start and end dates
     * @param {String} roundingMethod The rounding method to use
     * @returns {Object} an object containing start/end properties
     */},{key:"getStartEndDatesFromRectangle",value:function getStartEndDatesFromRectangle(rect,roundingMethod){var view=this.view,leftDate=view.getDateFromCoordinate(rect.x,roundingMethod,true),rightDate=view.getDateFromCoordinate(rect.right,roundingMethod,true);if(leftDate&&rightDate){return{start:DateHelper.min(leftDate,rightDate),end:DateHelper.max(leftDate,rightDate)};}return null;}},{key:"getVisibleDateRange",value:function getVisibleDateRange(){var view=this.view,scrollPos=view.timeAxisSubGrid.scrollable.x,width=view.timeAxisSubGrid.width;return{startDate:view.getDateFromX(scrollPos),endDate:view.getDateFromX(scrollPos+width)||view.timeAxis.endDate};}//endregion
//region Dependency connectors
/**
     * Gets displaying item start side
     *
     * @param {Scheduler.model.EventModel} eventRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorStartSide",value:function getConnectorStartSide(eventRecord){}/**
     * Gets displaying item end side
     *
     * @param {Scheduler.model.EventModel} eventRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorEndSide",value:function getConnectorEndSide(eventRecord){}//endregion
},{key:"column",get:function get(){return this.view.timeAxisColumn;}},{key:"timeAxis",get:function get(){return this.view.timeAxis;}},{key:"timeAxisViewModel",get:function get(){return this.view.timeAxisViewModel;}}]);return BaseHorizontalMapper;}(Delayable(Base));BaseHorizontalMapper._$name='BaseHorizontalMapper';var HorizontalEventMapperCache=/*#__PURE__*/function(){function HorizontalEventMapperCache(mapper){_classCallCheck2(this,HorizontalEventMapperCache);var me=this;me.mapper=mapper;// caching layout calculations
me.renderedEventsMap={};me.rowLayoutCache={};}/**
     * Clear event & row layout cache (removes cached layout for all resources and events)
     * @internal
     */_createClass2(HorizontalEventMapperCache,[{key:"clear",value:function clear(){var removeDivs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;me.renderedEventsMap={};Object.keys(me.rowLayoutCache).forEach(function(resourceId){return me.clearRow(resourceId,removeDivs?'immediate':false);});}//region Render data
},{key:"addRenderedEvents",value:function addRenderedEvents(resourceId,data){this.renderedEventsMap[resourceId]=data;}},{key:"addRenderedEvent",value:function addRenderedEvent(eventData){// If the resource is not layed out (outside of rendered block)
// then this is a no-op.
if(eventData.resourceId in this.renderedEventsMap){var resourceRenderedEvents=this.renderedEventsMap[eventData.resourceId]||(this.renderedEventsMap[eventData.resourceId]={});resourceRenderedEvents[eventData.id]=eventData;}}},{key:"getRenderedTimeSpan",value:function getRenderedTimeSpan(resourceId,eventElementId){var resourceRenderedEvents=this.renderedEventsMap[resourceId];return resourceRenderedEvents&&resourceRenderedEvents[eventElementId];}},{key:"clearRenderedTimeSpan",value:function clearRenderedTimeSpan(resourceId,eventElementId){var resourceRenderedEvents=this.renderedEventsMap[resourceId];if(resourceRenderedEvents){var result=this.renderedEventsMap[resourceId][eventElementId];delete this.renderedEventsMap[resourceId][eventElementId];return result;}}},{key:"getRenderedEvents",value:function getRenderedEvents(resourceId){return this.renderedEventsMap[resourceId];}},{key:"clearRenderedEvents",value:function clearRenderedEvents(resourceId){this.renderedEventsMap[resourceId]=null;}//endregion
//region TimeSpans
},{key:"getTimeSpan",value:function getTimeSpan(timeSpanId,rowId){var resourceCache=this.rowLayoutCache[rowId],timeSpanCache=resourceCache&&resourceCache[timeSpanId];if(!timeSpanCache)return null;return timeSpanCache.layoutCache;}/**
     * Clears the event layout for the passed event and resource. Will usually preserve
     * the event DIVs for recycling unless `removeDiv` is passed. If preserving them,
     * it will hide the div unless `remainVisible` is passed.
     * @param {*} eventId ID of event
     * @param {*} resourceId ID of resource
     * @param {*} removeDiv Defaults to false
     * @param {*} remainVisible Defaults to false
     * @private
     */},{key:"clearEvent",value:function clearEvent(eventId,resourceId){var removeDiv=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var remainVisible=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,eventCache=me.getTimeSpan(eventId,resourceId);if(!eventCache)return null;if(eventCache.div){me.mapper.clearDiv(eventCache.div,removeDiv,remainVisible);}me.rowLayoutCache[resourceId][eventId].layoutCache=null;}//endregion
//region Row
},{key:"getRow",value:function getRow(resourceId){return this.rowLayoutCache[resourceId];}},{key:"addRow",value:function addRow(resourceId,data){this.rowLayoutCache[resourceId]=data;}},{key:"clearRow",value:function clearRow(resourceId){var removeDivs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var remainVisible=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,resourceCache=me.rowLayoutCache[resourceId];if(!resourceCache)return;if(me.renderedEventsMap[resourceId])delete me.renderedEventsMap[resourceId];Object.keys(resourceCache).forEach(function(eventId){if(eventId!=='_allEvents'&&eventId!=='_rowHeight'){me.clearEvent(eventId,resourceId,removeDivs,remainVisible);}});delete me.rowLayoutCache[resourceId];}//endregion
}]);return HorizontalEventMapperCache;}();HorizontalEventMapperCache._$name='HorizontalEventMapperCache';/**
 * @module Scheduler/view/orientation/HorizontalEventMapper
 */var getStartEnd=function getStartEnd(view,timeAxis,date,dateMS,useEnd){if(view.fillTicks){var tickIndex=Math.floor(timeAxis.getTickFromDate(date)),tick=timeAxis.getAt(tickIndex);if(tick){return tick[useEnd?'endDate':'startDate'].getTime();}}return dateMS;};/**
 * Handles rendering of events when scheduler uses horizontal mode. The need to interact with this class should be
 * minimal, most functions are called from Scheduler or its mixins.
 * @private
 */var HorizontalEventMapper=/*#__PURE__*/function(_BaseHorizontalMapper){_inherits2(HorizontalEventMapper,_BaseHorizontalMapper);function HorizontalEventMapper(){_classCallCheck2(this,HorizontalEventMapper);return _possibleConstructorReturn2(this,_getPrototypeOf2(HorizontalEventMapper).apply(this,arguments));}_createClass2(HorizontalEventMapper,[{key:"construct",//region Init
value:function construct(scheduler){this.scheduler=scheduler;_get2(_getPrototypeOf2(HorizontalEventMapper.prototype),"construct",this).call(this,scheduler);this.cache=new HorizontalEventMapperCache(this);}},{key:"init",value:function init(){var me=this;_get2(_getPrototypeOf2(HorizontalEventMapper.prototype),"init",this).call(this);this.scheduler.on({togglegroup:me.onToggleGroup,rowremove:me.onRowRemove,prio:2,thisObj:me});}//endregion
//region Div reusage
// called from cache when removing events
},{key:"clearDiv",value:function clearDiv(div,remove,remainVisible){var me=this,divStyle=div.style;if(!remove||remainVisible){me.releaseTimeSpanDiv(div,remainVisible);}// For example when adding events we remove all existing immediately to not have the new event transition into
// place by from reusing an existing element. Also want to remove right away when not using event animations.
else if(remove==='immediate'||!me.scheduler.enableEventAnimations){div.remove();}else{// The div doesn't get removed until the opacity transition has done.
// Avoid id collisions if the event is rerendered immediately.
// Can't set it to "" because of test requirements.
div.id=IdHelper.generateId('obsolete-event');divStyle.opacity=0;divStyle.pointerEvents='none';me.setTimeout(function(){div.remove();divStyle.opacity=1;divStyle.pointerEvents='';},200);}}// called from cache when removing events
},{key:"clearAllDivs",value:function clearAllDivs(){var me=this;me.availableDivs.forEach(function(div){return div.remove();});me.availableDivs.clear();}},{key:"clearEvents",value:function clearEvents(){this.cache.clear(true);}/**
     * Releases elements for events no longer in view.
     */},{key:"releaseEvent",value:function releaseEvent(rowId,timeSpanElementId){var remainVisible=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,timeSpanData=me.cache.getRenderedTimeSpan(rowId,timeSpanElementId),cache=timeSpanData&&me.cache.getTimeSpan(timeSpanData.eventId,rowId);if(cache&&cache.div){// release div. remember for reuse, if such mode is used
me.releaseTimeSpanDiv(cache.div,remainVisible);cache.div=cache.eventEl=null;}return me.cache.clearRenderedTimeSpan(rowId,timeSpanElementId);}//endregion
//region Elements
},{key:"getElementFromEventRecord",value:function getElementFromEventRecord(eventRecord){var resourceRecord=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.scheduler.eventStore.getResourcesForEvent(eventRecord)[0];if(resourceRecord){var renderedRowEvents=this.cache.getRenderedEvents(resourceRecord.id);if(renderedRowEvents){var layoutId=this.scheduler.getEventRenderId(eventRecord,resourceRecord),layout=renderedRowEvents[layoutId],layoutCache=layout&&layout.layoutCache;return layoutCache&&layoutCache.eventEl;}}}},{key:"getElementsFromEventRecord",value:function getElementsFromEventRecord(eventRecord,resourceRecord){var me=this;// Single event instance, as array
if(resourceRecord){return[me.getElementFromEventRecord(eventRecord,resourceRecord)];}// All instances
else{return me.scheduler.eventStore.getResourcesForEvent(eventRecord).reduce(function(result,resourceRecord){var el=me.getElementFromEventRecord(eventRecord,resourceRecord);if(el){result.push(el);}return result;},[]);}}},{key:"resolveRowRecord",value:function resolveRowRecord(elementOrEvent){var me=this,view=me.view,element=elementOrEvent instanceof Event?elementOrEvent.target:elementOrEvent,el=element.nodeType===3?element.parentElement:element,eventNode=el.matches(view.eventSelector)&&el||DomHelper.up(el,view.eventSelector);if(eventNode){return view.getResourceRecordFromDomId(eventNode.id);}return view.getRecordFromElement(el);}},{key:"toggleCls",value:function toggleCls(eventRecord,resourceRecord,cls){var add=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(!resourceRecord){return;}var eventLayout=this.cache.getRenderedTimeSpan(resourceRecord.id,this.scheduler.getEventRenderId(eventRecord,resourceRecord)),element=this.getElementFromEventRecord(eventRecord,resourceRecord);if(eventLayout){eventLayout.cls[cls]=add?1:0;}if(element){element.classList[add?'add':'remove'](cls);}}//endregion
//region Region
},{key:"getResourceEventBox",value:function getResourceEventBox(eventId,resourceId){var cached=this.cache.getTimeSpan(eventId,resourceId);if(cached){return cached;}}/**
     * Gets the region, relative to the page, represented by the schedule and optionally only for a single resource. This method will call getDateConstraints to
     * allow for additional resource/event based constraints. By overriding that method you can constrain events differently for
     * different resources.
     * @param {Common.data.Model} rowRecord (optional) The row record
     * @param {Scheduler.model.EventModel} eventRecord (optional) The event record
     * @return {Object} The region of the schedule
     */},{key:"getScheduleRegion",value:function getScheduleRegion(rowRecord,eventRecord){var local=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var me=this,view=me.view,column=me.column,region;if(rowRecord){var eventElement=eventRecord&&me.getElementsFromEventRecord(eventRecord,rowRecord)[0];region=Rectangle.from(view.getRowById(rowRecord.id).getElement('locked'));if(eventElement){var eventRegion=Rectangle.from(eventElement,column.subGridElement);region.y=eventRegion.y;region.bottom=eventRegion.bottom;}else{region.y=region.y+view.resourceMargin;region.bottom=region.bottom-view.resourceMargin;}}else{// TODO: This is what the bizarre function that was removed here did.
// The coordinate space needs to be sorted out here!
region=Rectangle.from(column.subGridElement).moveTo(null,0);region.width=column.subGridElement.scrollWidth;region.y=region.y+view.resourceMargin;region.bottom=region.bottom-view.resourceMargin;}var taStart=me.timeAxis.startDate,taEnd=me.timeAxis.endDate,dateConstraints=view.getDateConstraints(rowRecord,eventRecord)||{start:taStart,end:taEnd},startX=view.getCoordinateFromDate(DateHelper.max(taStart,dateConstraints.start)),//startX          = this.translateToPageCoordinate(scheduler.getCoordinateFromDate(DateHelper.max(taStart, dateConstraints.start))),
endX=view.getCoordinateFromDate(DateHelper.min(taEnd,dateConstraints.end)),//endX            = this.translateToPageCoordinate(scheduler.getCoordinateFromDate(DateHelper.min(taEnd, dateConstraints.end))),
top=region.y,bottom=region.bottom;if(!local){startX=me.translateToPageCoordinate(startX);endX=me.translateToPageCoordinate(endX);}return{top:top,right:Math.max(startX,endX),bottom:bottom,left:Math.min(startX,endX)};}},{key:"getResoureEventBox",value:function getResoureEventBox(eventId,resourceId){return this.cache.getTimeSpan(eventId,resourceId);}//endregion
//region Layout & render
//region Stack & pack
},{key:"layoutEventVerticallyStack",value:function layoutEventVerticallyStack(bandIndex){var _this$scheduler=this.scheduler,resourceMargin=_this$scheduler.resourceMargin,rowHeight=_this$scheduler.rowHeight,barMargin=_this$scheduler.barMargin;return bandIndex===0?resourceMargin:resourceMargin+bandIndex*(rowHeight-resourceMargin*2)+bandIndex*barMargin;}},{key:"layoutEventVerticallyPack",value:function layoutEventVerticallyPack(topFraction,heightFraction){var _this$scheduler2=this.scheduler,resourceMargin=_this$scheduler2.resourceMargin,rowHeight=_this$scheduler2.rowHeight,barMargin=_this$scheduler2.barMargin,availableHeight=rowHeight-2*resourceMargin,count=1/heightFraction,bandIndex=topFraction*count,height=(availableHeight-(count-1)*barMargin)*heightFraction,top=resourceMargin+bandIndex*height+bandIndex*barMargin;return{top:top,height:height};}//endregion
/**
     * Converts a start/endDate into a MS value used when rendering the event. If scheduler is configured with
     * `fillTicks: true` the value returned will be snapped to tick start/end.
     * @private
     * @param {Scheduler.model.EventModel} eventRecord
     * @returns {Object} Object of format { startMS, endMS, durationMS }
     */},{key:"calculateMS",value:function calculateMS(eventRecord){var me=this,view=me.view;var startMS=getStartEnd(view,me.timeAxis,eventRecord.startDate,eventRecord.startDateMS,false),endMS=getStartEnd(view,me.timeAxis,eventRecord.endDate,eventRecord.endDateMS,true),durationMS=endMS-startMS;if(view.milestoneLayoutMode!=='default'&&durationMS===0){var pxPerMinute=me.timeAxisViewModel.getSingleUnitInPixels('minute'),lengthInPx=view.getMilestoneLabelWidth(eventRecord),duration=lengthInPx*(1/pxPerMinute);durationMS=duration*60*1000;switch(view.milestoneAlign){case'start':case'left':endMS=startMS+durationMS;break;case'end':case'right':endMS=startMS;startMS=endMS-durationMS;break;default:// using center as default
endMS=startMS+durationMS/2;startMS=endMS-durationMS;break;}}return{startMS:startMS,endMS:endMS,durationMS:durationMS};}/**
     * Layouts events on a row, caching on each event and the entire result on the resource
     * @private
     * @param {Scheduler.view.Scheduler} scheduler
     * @param {Scheduler.model.ResourceModel} resource
     * @param {Grid.row.Row} row
     * @returns {Boolean} Returns false if no events on row, otherwise true
     */},{key:"layoutEvents",value:function layoutEvents(scheduler,resource,row){var me=this,timeAxis=me.timeAxis,eventStore=scheduler.eventStore,resourceId=resource.id,resourceEvents=eventStore.getEventsForResource(resourceId),availableEvents=eventStore.isFiltered?resourceEvents.filter(function(eventRecord){return eventStore.indexOf(eventRecord)>-1;}):resourceEvents,allEvents=scheduler.getEventsToRender(resource,availableEvents)||[],events=allEvents.filter(function(e){return timeAxis.isTimeSpanInAxis(e);}),eventsTplData=events.reduce(function(result,event){var eventBox=scheduler.generateTplData(event,resource);// Collect layouts of visible events
if(eventBox){result.push(eventBox);}// Release events that are no longer visible
else if(me.cache.getRenderedEvents(resourceId)){me.releaseEvent(resourceId,scheduler.getEventRenderId(event,resource));}return result;},[]);// If there are no events within the rendering zone, clear the resource layout cache.
// Return false to indicate that there's nothing to render.
if(!eventsTplData.length){me.cache.clearRenderedEvents(resourceId);return false;}// Ensure the events are rendered in natural order so that navigation works.
eventsTplData.sort(me.eventSorter);var rowHeight=scheduler.rowHeight;var layout=scheduler.currentEventLayout,// Only events and tasks should be considered during layout (not resource time ranges if any)
layoutEventData=eventsTplData.filter(function(d){return d.event.isEvent||d.event.isTask;});// Event data is now gathered, calculate layout properties for each event
if(scheduler.eventLayout==='stack'){var nbrOfBandsRequired=layout.applyLayout(layoutEventData,resource),heightPerEvent=scheduler.rowHeight-scheduler.resourceMargin*2;rowHeight=nbrOfBandsRequired*heightPerEvent+(nbrOfBandsRequired-1)*scheduler.barMargin+scheduler.resourceMargin*2;}else if(scheduler.eventLayout==='pack'){layout.applyLayout(layoutEventData,resource);}var absoluteTop=row.top;// adjust row top, when it is rendered on top (since in that case top is not known until height is set)
if(rowHeight!==row.height&&row.estimatedTop){absoluteTop=row.top+row.height-rowHeight;}var cache={_allEvents:eventsTplData,_rowHeight:rowHeight};// cache boxes
eventsTplData.forEach(function(data){var layout=me.cache.getTimeSpan(data.eventId,resourceId),relativeTop=data.top;data.top+=absoluteTop;data.rowTop=absoluteTop;// ResourceTimeRanges sets this flag to fill the entire row (can't use 100% since it is not actually in the row).
// Also cant set it in ResourceTimeRanges#onEventDataGenerated since it is called prior to laying out
if(data.fillSize){data.height=rowHeight;}// TODO: Include directly in data instead, to simplify cache a wee bit
// cache layout to not have to recalculate every time
data.layoutCache={layout:true,// reuse div if already assigned (for example when resizing an event)
div:layout&&layout.div,eventEl:layout&&layout.eventEl,width:data.width,height:data.height,start:data.left,end:data.left+data.width,relativeTop:relativeTop,top:data.top,relativeBottom:relativeTop+data.height,bottom:data.top+data.height};cache[data.eventId]=data;});me.cache.addRow(resourceId,cache);//me.resourceLayoutCache[resourceId] = eventsTplData;
return true;}// Earlier start dates are above later tasks
// If same start date, longer tasks float to top
// If same start + duration, sort by name
},{key:"eventSorter",value:function eventSorter(a,b){var startA=a.dataStartMs||a.startMs,// dataXX are used if configured with fillTicks
endA=a.dataEndMs||a.endMs,startB=b.dataStartMs||b.startMs,endB=b.dataEndMs||b.endMs,sameStart=startA===startB;if(sameStart){if(endA-endB===0){return a.event.name<b.event.name?-1:1;}return endA>endB?-1:1;}return startA<startB?-1:1;}/**
     * Called when rows are translated. Since events "float" on top of everything they must be adjusted if translation
     * changes.
     * @private
     */},{key:"onTranslateRow",value:function onTranslateRow(_ref321){var row=_ref321.row;this.matchRowTranslation(row);}/**
     * Renders a single event, creating a div for it if needed or updates an existing div.
     * @private
     * @param data
     */},{key:"renderEvent",value:function renderEvent(data){var me=this,eventIdProperty=me.view.scheduledEventName+'Id',eventId=data[eventIdProperty],layoutCache=me.cache.getTimeSpan(eventId,data.resourceId),renderedEvents=me.cache.getRenderedEvents(data.resourceId),meta=data.event.instanceMeta(me.scheduler),// Event might be flagged to require a new element in onEventAdd, but if it is a drag proxy it should still
// reuse an existing element (it will be correctly linked to the drag proxy element)
wrapperElement=me.renderTimeSpan(data,layoutCache,renderedEvents[data.id],meta.requireElement&&!meta.fromDragProxy);if(data.assignment){wrapperElement.dataset.assignmentId=data.assignment.id;}// Add event/task id to wrappers dataset
// Otherwise event element won't have event id property in it's dataset and scheduler
// won't be able to resolve event by element reference (#8943)
if(eventId){wrapperElement.dataset[eventIdProperty]=eventId;}renderedEvents[data.id]=data;if(meta.requireElement){delete meta.requireElement;delete meta.fromDragProxy;}// This event is documented on Scheduler
me.scheduler.trigger('renderEvent',{eventRecord:data.event,resourceRecord:data.resource,assignmentRecord:data.assignment,element:wrapperElement,tplData:data});}// Overrides fn from baseclass to trigger a paint event with correct params
},{key:"triggerPaint",value:function triggerPaint(data,element){var isRepaint=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var scheduler=this.scheduler;scheduler.trigger(isRepaint?'eventRepaint':'eventPaint',{scheduler:scheduler,eventRecord:data.event,resourceRecord:data.resource,element:element});}// We only have to ask this question in the horizontal axis.
// Vertical rendering is driven fully by the Grid's RowManager
// rendering and derendering rows.
},{key:"isEventInView",value:function isEventInView(eventLayout){// Milestones need to be visible at start & end
if(eventLayout.startMs===eventLayout.endMs){return eventLayout.startMs<=this.viewportEnd&&eventLayout.endMs>this.viewportStart;}// But normal events do not
return eventLayout.startMs<this.viewportEnd&&eventLayout.endMs>this.viewportStart;}// Displays events that are in view, hides/recycles those that are no longer
},{key:"updateRowTimeSpans",value:function updateRowTimeSpans(row,resource){var forceLayout=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var fromHorizontalScroll=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var me=this,scheduler=me.scheduler,resourceId=resource.id;var renderedEvents=me.cache.getRenderedEvents(resourceId),resourceLayoutCache=me.cache.getRow(resourceId);// no need to relayout events if only scrolling horizontally
if((scheduler.forceLayout||forceLayout||!resourceLayoutCache)&&!me.layoutEvents(scheduler,resource,row)){return resourceLayoutCache&&resourceLayoutCache._rowHeight||0;}// might have been updated above
resourceLayoutCache=me.cache.getRow(resourceId);if(!resourceLayoutCache)return 0;var eventsInView=resourceLayoutCache._allEvents.filter(function(evt){return(// Keep events flagged by for example EventDrag
evt.event.instanceMeta(scheduler).retainElement||// Assignment might also be flagged if used
evt.assignment&&evt.assignment.instanceMeta(scheduler).retainElement||// And keep events actually in view :)
me.isEventInView(evt));});if(!renderedEvents){renderedEvents={};me.cache.addRenderedEvents(resourceId,renderedEvents);}// Add events not already in dom or refresh those that are
for(var _i30=0;_i30<eventsInView.length;_i30++){var data=eventsInView[_i30];// There are multiple pathways that might lead to the first render of events. This is the first reliable
// place were we can determine that something will be rendered
scheduler._firstRenderDone&&scheduler._firstRenderDone();// Do not render events whose element is retained, or if scrolling horizontally already has an element
if(!fromHorizontalScroll&&!data.event.instanceMeta(scheduler).retainElement||fromHorizontalScroll&&!data.layoutCache.div){var animation=scheduler.isFirstRender&&data.top<scheduler.bodyHeight&&scheduler.useInitialAnimation;if(animation){data.wrapperCls.add('b-first-render');data.internalStyle="animation-delay: ".concat(data.row.index/20,"s;");}me.renderEvent(data);data.wrapperCls['b-first-render']=null;}}// Remove already rendered events that are now outside of view
var renderedEventIds=Object.keys(renderedEvents);var _loop4=function _loop4(_i31){var eventId=renderedEventIds[_i31];if(!eventsInView.some(function(e){return e.id===eventId;})){me.releaseEvent(resourceId,eventId);}};for(var _i31=0;_i31<renderedEventIds.length;_i31++){_loop4(_i31);}return resourceLayoutCache._rowHeight;}},{key:"renderer",value:function renderer(renderData){// Render the resource's events.
renderData.size.height=this.updateRowTimeSpans(renderData.row,renderData.record);}//endregion
//region Store events
},{key:"matchRowTranslation",value:function matchRowTranslation(row){var me=this,// Cannot check row.id because translation happens before render, id might not be updated.
recordId=me.scheduler.store.getAt(row.dataIndex).id,resourceCache=me.cache.getRow(recordId),first=resourceCache&&resourceCache._allEvents.length>0&&resourceCache._allEvents[0];// only update events whose resource has changed top
if(first&&first.rowTop!==row.top){var deltaY=row.top-first.rowTop;resourceCache._allEvents.forEach(function(data){var eventLayout=data.layoutCache;eventLayout.top+=deltaY;eventLayout.bottom+=deltaY;if(eventLayout.div){me.positionTimeSpan(eventLayout.div,eventLayout.start,eventLayout.top);}data.top+=deltaY;data.rowTop=row.top;});}}},{key:"onTimeAxisViewModelUpdate",value:function onTimeAxisViewModelUpdate(){// if we do not clear cache, refresh will happen and will use older cache
// caught by test 012_dragdrop
this.cache.clear();// TODO: this always happen, unnecessary to perform layout prior to this?
// always update view bounds and redraw events
this.updateFromHorizontalScroll(this.scheduler.timeAxisSubGrid.scrollable.x);}// resource removed, move all affected events up
},{key:"onRowRemove",value:function onRowRemove(_ref322){var _this85=this;var isCollapse=_ref322.isCollapse;var scheduler=this.scheduler;if(!isCollapse){scheduler.runWithTransition(function(){scheduler.rowManager.forEach(function(row){return _this85.matchRowTranslation(row);});});}}/**
     * User toggled a group in a grouped grid, events needs to be redrawn since they might appear/disappear
     * @private
     */},{key:"onToggleGroup",value:function onToggleGroup(_ref323){var _this86=this;var groupRecord=_ref323.groupRecord,collapse=_ref323.collapse;var store=this.scheduler.store,// First record in next group
recordIndex=store.indexOf(groupRecord)+(collapse?1:groupRecord.groupChildren.length);// Handle this group
if(collapse){// Collapsing -> events in the group will be hidden, remove them from cache
groupRecord.groupChildren.forEach(function(child){_this86.cache.clearRow(child.id);});}// TODO: this should not need to loop til the end, since only events in view are drawn. will be costly with large amount of resources
// Loop starting at the next group
for(;recordIndex<store.count;recordIndex++){this.cache.clearRow(store.getAt(recordIndex).id);}}},{key:"onEventDataset",value:function onEventDataset(){// Previously dataset would use onEventAdd, but if we get fewer events than we had some will stick around
// just for the fun of it. Better clear all
this.cache.clear(true);}},{key:"onEventAdd",value:function onEventAdd(_ref324){var _this87=this;var records=_ref324.records,resources=_ref324.resources;var me=this,startDate,endDate;//        me.scheduler.rowManager.averageRowHeight = null; // force recalculation, since moving events might have affected row height
records.forEach(function(event){startDate=event.startDate;endDate=event.endDate;if(startDate&&endDate&&me.timeAxis.timeSpanInAxis(startDate,endDate)){var eventResources=event.resources;// Flag that this event needs a new element, it should not steal some other released events element because
// that might lead to a transition. Only set if event will be in view
if(eventResources&&eventResources.some(function(resource){return me.scheduler.getRowFor(resource);})){event.instanceMeta(me.scheduler).requireElement=true;}// TODO: this does not make sense when adding multiple events, resources are then not tied to the event
// repaint row only if event is in time axis
resources.forEach(function(resource){_this87.cache.clearRow(resource.id,false,true);});}});}},{key:"onEventRemove",value:function onEventRemove(_ref325){var records=_ref325.records,resources=_ref325.resources;var me=this;// Remove the divs fully since creation now adopts the proxy to use as the event div
resources.forEach(function(resource){return me.cache.clearRow(resource.id,true);}//scheduler.store.getIndex(resource) >= 0 && scheduler.repaintEventsForResource(resource)
);}},{key:"onEventUpdate",value:function onEventUpdate(_ref326){var eventStore=_ref326.source,eventRecord=_ref326.record,_ref326$changes=_ref326.changes,changes=_ref326$changes===void 0?{}:_ref326$changes,resources=_ref326.resources;var me=this,resourceWasChanged='resourceId'in changes;// A change happened to an event missing a resource, do nothing
if(!resourceWasChanged&&!resources.length)return;// Moved to another resource, invalidate both old and new (only applies when not using an AssignmentStore)
if(resourceWasChanged){var oldResource=eventStore.resourceStore.getById(changes.resourceId.oldValue),newResource=eventRecord.resource,eventRenderedAfterUpdate=newResource&&!newResource.placeHolder,isVisible=eventRecord.resource&&Boolean(me.getTimeSpanRenderData(eventRecord,eventRecord.resource));// invalidate old and new resource event layouts
if(oldResource){var oldLayout=me.cache.getTimeSpan(eventRecord.id,oldResource.id);// If the event is layed out for oldResource, that resources needs to be redrawn
if(oldLayout){// If it's to be rerendered after the change, set the div's
// id so that after it's returned to the cache, it will be plucked
// out by the renderer to be reused.
if(eventRenderedAfterUpdate){// If it has an element, release the div, but release it under the id for
// which it *will* be used when the cleared resource rows are rerendered.
if(oldLayout.div&&newResource){oldLayout.div.id=me.scheduler.getEventRenderId(eventRecord,newResource);}me.cache.clearRow(oldResource.id,false,eventRenderedAfterUpdate);}// If it's not going to be rerendered, dump the div completely
else{me.cache.clearEvent(eventRecord.id,changes.resourceId.oldValue,true);}}}// Event was added first and then assigned to a resource (or similar scenario). There will be no div tied to
// the event and it might reuse an element reserved for some other event (which will transition in to place)
// TODO: Rework element reusage to always process events with existing elements first and then "new",
//   when done this workaround and the one in onEventAdd() can be removed
else if(eventRenderedAfterUpdate){eventRecord.instanceMeta(me.scheduler).requireElement=true;}eventRenderedAfterUpdate&&me.cache.clearRow(newResource.id,false,isVisible);// TODO: Not so sure we should throw the average away on account of a single row that might change height,
//  check if it works good without this/make gradual adjustment
me.scheduler.rowManager.averageRowHeight=null;// force recalculation, since moving events might have affected row height
}// start or end date changed, need to update layout
else if('startDate'in changes||'endDate'in changes){resources.forEach(function(resourceRecord){// Moving events on a row with multiple events might affect those other events, or the height of the row
// which affects everything below
if(me.scheduler.eventStore.getEventsForResource(resourceRecord).length>1){// TODO: Not so sure we should throw the average away on account of a single row that might change height,
//  check if it works good without this/make gradual adjustment
me.scheduler.rowManager.averageRowHeight=null;}});}resources.forEach(function(resourceRecord){var eventLayoutData=me.getTimeSpanRenderData(eventRecord,resourceRecord),isVisible=Boolean(eventLayoutData&&me.isEventInView(eventLayoutData));// Clear cache, avoiding to hide the element if visible
me.cache.clearRow(resourceRecord.id,false,isVisible);});}// Event id changed, change elements id to have it reused correctly on redraw
},{key:"onEventStoreIdChange",value:function onEventStoreIdChange(_ref327){var oldValue=_ref327.oldValue,value=_ref327.value;var view=this.view;DomHelper.forEachSelector(view.element,"[data-event-id=\"".concat(oldValue,"\"]"),function(el){el.id=view.getEventRenderId(value,view.getResourceIdFromDomNodeId(el.id));});}},{key:"onEventClearChanges",value:function onEventClearChanges(){this.cache.clear();}},{key:"onEventFilter",value:function onEventFilter(){this.cache.clear();}},{key:"onEventRemoveAll",value:function onEventRemoveAll(){this.view.rowManager.averageRowHeight=null;// force recalculation, since moving events might have affected row height
this.cache.clear(true);}//endregion
//region Dependency connectors
/**
     * Gets displaying item start side
     *
     * @param {Scheduler.model.EventModel} eventRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorStartSide",value:function getConnectorStartSide(eventRecord){return'left';}/**
     * Gets displaying item end side
     *
     * @param {Scheduler.model.EventModel} eventRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorEndSide",value:function getConnectorEndSide(eventRecord){return'right';}//endregion
}]);return HorizontalEventMapper;}(BaseHorizontalMapper);HorizontalEventMapper._$name='HorizontalEventMapper';/**
 * @module Scheduler/eventlayout/VerticalLayout
 */ /**
 * Assists with event layout in vertical mode, handles `eventLayout: none|pack|mixed`
 * @private
 * @mixes Scheduler/eventlayout/PackMixin
 */var VerticalLayout=/*#__PURE__*/function(_PackMixin2){_inherits2(VerticalLayout,_PackMixin2);function VerticalLayout(){_classCallCheck2(this,VerticalLayout);return _possibleConstructorReturn2(this,_getPrototypeOf2(VerticalLayout).apply(this,arguments));}_createClass2(VerticalLayout,[{key:"applyLayout",// Try to pack the events to consume as little space as possible
value:function applyLayout(events,columnWidth,resourceMargin,barMargin,columnIndex){var _this88=this;_get2(_getPrototypeOf2(VerticalLayout.prototype),"applyLayout",this).call(this,events,function(tplData,clusterIndex,slot,slotSize){// Stretch events to fill available width
if(_this88.scheduler.eventLayout==='none'){tplData.width=columnWidth-resourceMargin*2;tplData.left+=resourceMargin;}else{// Fractions of resource column
tplData.widthFactor=slotSize;var leftFactor=tplData.leftFactor=slot.start+clusterIndex*slotSize,// Number of "columns" in the current slot
packColumnCount=Math.round(1/slotSize),// Index among those columns for current event
packColumnIndex=leftFactor/slotSize,// Width with all bar margins subtracted
availableWidth=columnWidth-resourceMargin*2-barMargin*(packColumnCount-1);// Allowing two events to overlap? Slightly offset the second
if(_this88.scheduler.eventLayout==='mixed'&&packColumnCount===2){tplData.left+=leftFactor*columnWidth/5+barMargin;tplData.width=columnWidth-leftFactor*columnWidth/5-barMargin*2;tplData.zIndex=5+packColumnIndex;}// Pack by default
else{// Fractional width
tplData.width=slotSize*availableWidth;// Translate to absolute position
tplData.left+=leftFactor*availableWidth+resourceMargin+barMargin*packColumnIndex;}}});}}],[{key:"defaultConfig",get:function get(){return{coordProp:'leftFactor',sizeProp:'widthFactor'};}}]);return VerticalLayout;}(PackMixin());VerticalLayout._$name='VerticalLayout';var releaseEventActions={'releaseElement':1,// Not used at all at the moment
'reuseElement':1// Used by some other element
},renderEventActions={'newElement':1,'reuseOwnElement':1,'reuseElement':1};var VerticalEventMapper=/*#__PURE__*/function(_Delayable17){_inherits2(VerticalEventMapper,_Delayable17);function VerticalEventMapper(){_classCallCheck2(this,VerticalEventMapper);return _possibleConstructorReturn2(this,_getPrototypeOf2(VerticalEventMapper).apply(this,arguments));}_createClass2(VerticalEventMapper,[{key:"construct",value:function construct(scheduler){this.scheduler=scheduler;this.timeAxisViewModel=scheduler.timeAxisViewModel;this.verticalLayout=new VerticalLayout({scheduler:scheduler});_get2(_getPrototypeOf2(VerticalEventMapper.prototype),"construct",this).call(this,{});}},{key:"init",value:function init(){var me=this,scheduler=me.scheduler;// Resource header/columns
me.resourceColumns=scheduler.timeAxisColumn.resourceColumns;// Vertical time axis
me.timeView=scheduler.timeView;scheduler.element.classList.add('b-sch-vertical');scheduler.on({assignmentstorechange:me.onChangeAssignmentStore,resourcestorechange:me.onChangeResourceStore,thisObj:me});me.resourceColumns.on({columnWidthChange:me.onResourceColumnWidthChange,thisObj:me});me.resourceStore=scheduler.resourceStore;me.assignmentStore=scheduler.assignmentStore;me.initialized=true;me.renderer();me.resourceColumns.availableWidth=scheduler.timeAxisSubGrid.width;}//endregion
//region Elements <-> Records
},{key:"resolveRowRecord",value:function resolveRowRecord(elementOrEvent,xy){var me=this,scheduler=me.scheduler,event=elementOrEvent instanceof Event?elementOrEvent:null,element=event?event.target:elementOrEvent,coords=event?[event.offsetX,event.offsetY]:xy,el=element.nodeType===3?element.parentElement:element,eventElement=DomHelper.up(el,scheduler.eventSelector);if(eventElement){return scheduler.resourceStore.getById(eventElement.dataset.resourceId);}// Need to be inside schedule at least
if(!DomHelper.up(element,'.b-sch-timeaxis-cell')){return null;}var index=Math.floor(coords[0]/me.resourceColumns.columnWidth);return scheduler.resourceStore.getAt(index);}},{key:"getElementFromEventRecord",value:function getElementFromEventRecord(eventRecord,resourceRecord){// All elements for event + optionally assigned resource
var elements=this.getElementsFromEventRecord(eventRecord,resourceRecord);// Return first one
return elements.length?elements[0]:null;}},{key:"getElementsFromEventRecord",value:function getElementsFromEventRecord(eventRecord){// Holds resources for which the event is drawn
var map=this.eventMap[eventRecord.id];// Return the elements for those
return Object.values(map).map(function(data){return data.element;});}},{key:"toggleCls",value:function toggleCls(eventRecord,resourceRecord,cls){var add=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var eventData=ObjectHelper.getPath(this.eventMap,"".concat(eventRecord.id,".").concat(resourceRecord.id));if(eventData){eventData.tplData.cls[cls]=add?1:0;if(eventData.element){eventData.element.querySelector(this.scheduler.eventInnerSelector).classList[add?'add':'remove'](cls);}}}//endregion
//region Coordinate <-> Date
},{key:"getDateFromXY",value:function getDateFromXY(xy,roundingMethod,local){var coord=xy[1];if(!local){coord=this.translateToScheduleCoordinate(coord);}return this.timeAxisViewModel.getDateFromPosition(coord,roundingMethod);}},{key:"translateToScheduleCoordinate",value:function translateToScheduleCoordinate(y){return y-this.scheduler._bodyRectangle.y+this.scheduler.scrollTop;}},{key:"translateToPageCoordinate",value:function translateToPageCoordinate(y){return y+this.scheduler._bodyRectangle.y-this.scheduler.scrollTop;}//endregion
//region Regions
},{key:"getResourceEventBox",value:function getResourceEventBox(eventId,resourceId){var _ref328=ObjectHelper.getPath(this.eventMap,"".concat(eventId,".").concat(resourceId))||{},tplData=_ref328.tplData;if(!tplData){// Never been in view, lay it out
this.layoutResource(this.scheduler.resourceStore.getById(resourceId));// Have another go at getting the layout data
tplData=ObjectHelper.getPath(this.eventMap,"".concat(eventId,".").concat(resourceId)).tplData;}return tplData?{start:tplData.left,end:tplData.left+tplData.width,top:tplData.top,bottom:tplData.bottom}:null;}},{key:"getScheduleRegion",value:function getScheduleRegion(resourceRecord,eventRecord,local){var me=this,scheduler=me.scheduler;var region=Rectangle.from(scheduler.timeAxisSubGridElement);if(resourceRecord){// TODO: How to account for eventRecord here?
region.left=me.resourceStore.indexOf(resourceRecord)*scheduler.resourceColumnWidth;region.right=region.left+scheduler.resourceColumnWidth;}var start=scheduler.timeAxis.startDate,end=scheduler.timeAxis.endDate,dateConstraints=scheduler.getDateConstraints(resourceRecord,eventRecord)||{start:start,end:end},startY=scheduler.getCoordinateFromDate(DateHelper.max(start,dateConstraints.start)),endY=scheduler.getCoordinateFromDate(DateHelper.min(end,dateConstraints.end));if(!local){region.top=me.translateToPageCoordinate(startY);region.bottom=me.translateToPageCoordinate(endY);}else{region.top=startY;region.bottom=endY;}return region;}},{key:"getRowRegion",value:function getRowRegion(resourceRecord,startDate,endDate){var me=this,scheduler=me.scheduler,x=me.resourceStore.indexOf(resourceRecord)*scheduler.resourceColumnWidth,taStart=scheduler.timeAxis.startDate,taEnd=scheduler.timeAxis.endDate,start=startDate?DateHelper.max(taStart,startDate):taStart,end=endDate?DateHelper.min(taEnd,endDate):taEnd,startY=scheduler.getCoordinateFromDate(start),endY=scheduler.getCoordinateFromDate(end,true,true),y=Math.min(startY,endY),height=Math.abs(startY-endY);return new Rectangle(x,y,scheduler.resourceColumnWidth,height);}},{key:"getVisibleDateRange",value:function getVisibleDateRange(){var scheduler=this.scheduler,scrollPos=scheduler.scrollable.y,height=scheduler.scrollable.clientHeight;return{startDate:scheduler.getDateFromCoordinate(scrollPos),endDate:scheduler.getDateFromCoordinate(scrollPos+height)||scheduler.timeAxis.endDate};}//endregion
//region Events
// Column width changed, rerender fully
},{key:"onResourceColumnWidthChange",value:function onResourceColumnWidthChange(_ref329){var width=_ref329.width,oldWidth=_ref329.oldWidth;var me=this,scheduler=me.scheduler;// Fix width of column & header
me.resourceColumns.width=scheduler.timeAxisColumn.width=me.resourceStore.count*width;me.clearAll();// Only transition large changes, otherwise it is janky when dragging slider in demo
scheduler.runWithTransition(function(){return me.renderer();},Math.abs(width-oldWidth)>30);// Not detected by resizeobserver? Need to call this for virtual scrolling to react to update
//        scheduler.callEachSubGrid('refreshFakeScroll');
//        scheduler.refreshVirtualScrollbars();
}//endregion
//region EventStore
},{key:"onEventStoreChange",value:function onEventStoreChange(_ref330){var source=_ref330.source,action=_ref330.action,records=_ref330.records,record=_ref330.record,replaced=_ref330.replaced,changes=_ref330.changes;var me=this,eventRecords=records||(record?[record]:[]),resourceIds=new Set();var transition=true;eventRecords.forEach(function(eventRecord){eventRecord.resources.forEach(function(resourceRecord){return resourceIds.add(resourceRecord.id);});});switch(action){// No-ops
case'sort':case'group':case'move':// Order in EventStore does not matter, so these actions are no-ops
return;case'dataset':me.clearAll();transition=false;break;case'add':case'remove':case'updateMultiple':// Clear all affected resources
me.clearResources(resourceIds);break;case'replace':// Gather resources from both the old record and the new one
replaced.forEach(function(_ref331){var _ref332=_slicedToArray(_ref331,2),oldEvent=_ref332[0],newEvent=_ref332[1];oldEvent.resources.map(function(resourceRecord){return resourceIds.add(resourceRecord.id);});newEvent.resources.map(function(resourceRecord){return resourceIds.add(resourceRecord.id);});});// And clear them
me.clearResources(resourceIds);break;case'removeall':case'filter':// Clear all when filtering for simplicity. If that turns out to give bad performance, one would need to
// figure out which events was filtered out and only clear their resources.
me.clearAll();break;case'update':// Removing a resource will unassign events, triggering an update. Ignore this case, since it will be
// handled by the resource store listener
if(record.meta.removingResource){return;}var processed=false;// Potentially affecting more elements in the same resource
if('startDate'in changes||'endDate'in changes||'duration'in changes){me.clearResources(resourceIds);processed=true;}// Moved between resources, redraw both ends (new value already extracted above)
if('resourceId'in changes){resourceIds.add(changes.resourceId.oldValue);me.clearResources(resourceIds);processed=true;}// "Internal" change, not affecting layout
if(!processed){var eventDatas=Object.values(me.eventMap[record.id]);eventDatas.forEach(function(eventData){// Update layout/contents
var tplData=eventData.tplData;eventData.tplData=me.scheduler.generateTplData(tplData.eventRecord,tplData.resourceRecord);eventData.tplData.left=tplData.left;eventData.tplData.width=tplData.width;});}break;}me.scheduler.runWithTransition(function(){return me.renderer();},transition);}//endregion
//region ResourceStore
// Hook up resource store for the mapper and the resource header
},{key:"onChangeResourceStore",value:function onChangeResourceStore(_ref333){var newResourceStore=_ref333.newResourceStore;var me=this;// Invalidate resource range and events
me.firstResource=me.lastResource=null;me.clearAll();me.resourceStore=newResourceStore;me.renderer();}},{key:"onResourceStoreChange",value:function onResourceStoreChange(_ref334){var resourceStore=_ref334.source,action=_ref334.action,records=_ref334.records,record=_ref334.record;var me=this,resourceRecords=records||(record?[record]:[]);var transition=true;// Invalidate resource range
me.firstResource=me.lastResource=null;switch(action){case'add':// Make sure all existing events following added resources are offset correctly
var firstIndex=resourceRecords.reduce(function(index,record){return Math.min(index,resourceStore.indexOf(record));},resourceStore.count);for(var _i32=firstIndex;_i32<resourceStore.count;_i32++){me.clearResources([resourceStore.getAt(_i32).id]);}return;// Will be redrawn from column width change
case'remove':case'removeall':// Cannot tell from which index a record was removed, update all.
me.clearAll();return;// Will be redrawn from column width change
case'replace':case'update':// Only the invalidation above needed
break;case'filter':// All filtered out resources needs clearing and so does those not filtered out since they might have
// moved horizontally when others hide
me.clearAll();break;}me.scheduler.runWithTransition(function(){return me.renderer();},transition);}},{key:"onResourceStoreRefresh",value:function onResourceStoreRefresh(_ref335){var action=_ref335.action;var me=this;if(action==='group'){throw new Error('Grouping of resources not supported in vertical mode');}if(action==='sort'){// Invalidate resource range
me.firstResource=me.lastResource=null;me.clearAll();me.scheduler.runWithTransition(function(){return me.renderer();});}}//endregion
//region AssignmentStore
// Hook up assignment store for the mapper
},{key:"onChangeAssignmentStore",value:function onChangeAssignmentStore(_ref336){var newAssignmentStore=_ref336.newAssignmentStore;this.assignmentStore=newAssignmentStore;}},{key:"onAssignmentStoreChange",value:function onAssignmentStoreChange(_ref337){var action=_ref337.action,records=_ref337.records,replaced=_ref337.replaced,record=_ref337.record,changes=_ref337.changes;var me=this,assignmentRecords=records||(record?[record]:[]),resourceIds=new Set(assignmentRecords.map(function(assignmentRecord){return assignmentRecord.resourceId;}));var transition=true;switch(action){case'add':case'remove':case'updateMultiple':me.clearResources(resourceIds);break;case'filter':case'removeall':me.clearAll();break;case'replace':// Gather resources from both the old record and the new one
replaced.forEach(function(_ref338){var _ref339=_slicedToArray(_ref338,2),oldAssignment=_ref339[0],newAssignment=_ref339[1];resourceIds.add(oldAssignment.resourceId);resourceIds.add(newAssignment.resourceId);});// And clear them
me.clearResources(resourceIds);break;case'update':// When reassigning, clear old resource also
if('resourceId'in changes){resourceIds.add(changes.resourceId.oldValue);}me.clearResources(resourceIds);break;}me.scheduler.runWithTransition(function(){return me.renderer();},transition);}//endregion
//region View hooks
},{key:"refreshRows",value:function refreshRows(reLayoutEvents){if(reLayoutEvents){this.clearAll();this.scheduler.refreshFromRerender=false;}}},{key:"updateFromHorizontalScroll",value:function updateFromHorizontalScroll(scrollLeft){if(scrollLeft!==this.prevScrollLeft){this.renderer();this.prevScrollLeft=scrollLeft;}}},{key:"updateFromVerticalScroll",value:function updateFromVerticalScroll(){this.renderer();}},{key:"scrollResourceIntoView",value:function scrollResourceIntoView(resourceRecord,options){var scheduler=this.scheduler,x=scheduler.resourceStore.indexOf(resourceRecord)*scheduler.resourceColumnWidth;return scheduler.scrollHorizontallyTo(x,options);}// Called when viewport size changes
},{key:"onViewportResize",value:function onViewportResize(width){this.resourceColumns.availableWidth=width;this.renderer();}// Clear events in case they use date as part of displayed info
},{key:"onLocaleChange",value:function onLocaleChange(){this.clearAll();}// No need to do anything special
},{key:"onDragAbort",value:function onDragAbort(){}},{key:"onBeforeRowHeightChange",value:function onBeforeRowHeightChange(){}},{key:"onTimeAxisViewModelUpdate",value:function onTimeAxisViewModelUpdate(){}},{key:"clearEvents",value:function clearEvents(){}},{key:"updateElementId",value:function updateElementId(){}},{key:"releaseTimeSpanDiv",value:function releaseTimeSpanDiv(){}//endregion
//region Rendering
// Resources in view + buffer
},{key:"getTimeSpanRenderData",value:function getTimeSpanRenderData(eventRecord,resourceRecord){var includeOutside=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,scheduler=me.scheduler,startDate=eventRecord.startDate,endDate=eventRecord.endDate,top=scheduler.getCoordinateFromDate(startDate),left=me.resourceStore.indexOf(resourceRecord)*scheduler.resourceColumnWidth,width=scheduler.resourceColumnWidth-scheduler.resourceMargin*2,startDateMS=startDate.getTime(),endDateMS=endDate.getTime();var bottom=scheduler.getCoordinateFromDate(endDate),height=bottom-top;// Below, estimate height
if(bottom===-1){height=Math.round((endDateMS-startDateMS)*scheduler.timeAxisViewModel.getSingleUnitInPixels('ms'));bottom=top+height;}return{eventRecord:eventRecord,resourceRecord:resourceRecord,left:left,top:top,bottom:bottom,width:width,height:height,startDate:startDate,endDate:endDate,startDateMS:startDateMS,endDateMS:endDateMS,// to match horizontal, TODO: should change there
start:startDate,end:endDate,startMs:startDateMS,endMs:endDateMS};}// Earlier start dates are above later tasks
// If same start date, longer tasks float to top
// If same start + duration, sort by name
},{key:"eventSorter",value:function eventSorter(a,b){var startA=a.dataStartMs||a.startDateMS,// dataXX are used if configured with fillTicks
endA=a.dataEndMs||a.endDateMS,startB=b.dataStartMs||b.startDateMS,endB=b.dataEndMs||b.endDateMS,sameStart=startA===startB;if(sameStart){if(endA-endB===0){return a.eventRecord.name<b.eventRecord.name?-1:1;}return endA>endB?-1:1;}return startA<startB?-1:1;}// Calculate the layout for all events assigned to a resource. Since we are never stacking, the layout of one
// resource will never affect the others
},{key:"layoutResource",value:function layoutResource(resourceRecord){var me=this,scheduler=me.scheduler,cache=me.resourceMap[resourceRecord.id]={},resourceIndex=scheduler.resourceStore.indexOf(resourceRecord);// All events for the resource
var events=scheduler.eventStore.getEventsForResource(resourceRecord);// Hook for features to inject additional timespans to render
events=scheduler.getEventsToRender(resourceRecord,events);// Generate template data for all events, used for rendering and layout
var layoutData=events.reduce(function(toLayout,eventRecord){var tplData=scheduler.generateTplData(eventRecord,resourceRecord),// Elements will be appended to eventData during syncing
eventData={tplData:tplData};// Cache per event, { e1 : { r1 : { xxx }, r2 : ... }, e2 : ... }
// Uses tplData.eventId in favor of eventRecord.id to work with ResourceTimeRanges
ObjectHelper.setPath(me.eventMap,"".concat(tplData.eventId,".").concat(resourceRecord.id),eventData);// Cache per resource
cache[tplData.eventId]=eventData;// Position ResourceTimeRanges directly, they do not affect the layout of others
if(tplData.fillSize){tplData.left=resourceIndex*scheduler.resourceColumnWidth;tplData.width=scheduler.resourceColumnWidth;}// Anything not flagged with `fillSize` should take part in layout
else{toLayout.push(tplData);}return toLayout;},[]);// Ensure the events are rendered in natural order so that navigation works.
layoutData.sort(me.eventSorter);// Apply per resource event layout (pack, overlap or mixed)
me.verticalLayout.applyLayout(layoutData,scheduler.resourceColumnWidth,scheduler.resourceMargin,scheduler.barMargin,resourceIndex);return cache;}// Render a single event, aborting if already in DOM. To update an event, first release its element and then render
// it again. The element will be reused and updated. Keeps code simpler
},{key:"renderEvent",value:function renderEvent(eventData){// No point in rendering event that already has an element
var data=eventData.tplData,resourceRecord=data.resourceRecord,eventRecord=data.eventRecord,elementConfig={className:data.wrapperCls,tabIndex:'0',children:[{className:data.cls,style:(data.internalStyle||'')+(data.style||''),// Clone to be repeatable
html:data.body.cloneNode(true),// Used for comparison, cheaper than comparing fragment from above
compareHtml:data.eventContent}],style:{transform:"translate(".concat(data.left,"px, ").concat(data.top,"px)"),// DomHelper appends px to dimensions when using numbers
height:data.height,width:data.width,zIndex:data.zIndex},dataset:{resourceId:resourceRecord.id,eventId:data.eventId,// Not using eventRecord.id to distinguish between Event and ResourceTimeRange
// Sync using assignment id in multi assignment mode or event id in single assignment mode
syncId:data.assignment?data.assignment.id:data.eventId},// Will not be part of DOM, but attached to the element
elementData:eventData,// Dragging etc. flags element as retained, to not reuse/release it during that operation
retainElement:eventRecord.instanceMeta(this.scheduler).retainElement};// Do not want to spam dataset with empty prop when not using assignments
if(data.assignment){elementConfig.dataset.assignmentId=data.assignment.id;}return elementConfig;}},{key:"renderResource",value:function renderResource(resourceRecord){var me=this,topDateMS=me.topDateMS,bottomDateMS=me.bottomDateMS,syncConfigs=[];var resourceEntry=me.resourceMap[resourceRecord.id];// Layout all events for the resource unless already done
if(!resourceEntry){resourceEntry=me.layoutResource(resourceRecord);}// Iterate over all events for the resource
for(var eventId in resourceEntry){var eventData=resourceEntry[eventId];// Only collect configs for those actually in view
if(eventData.tplData.endDateMS>=topDateMS&&eventData.tplData.startDateMS<=bottomDateMS){syncConfigs.push(me.renderEvent(eventData));}}return syncConfigs;}// Single cell so only one call to this renderer, determine which events are in view and draw them.
// Drawing on scroll is triggered by `updateFromVerticalScroll()` and `updateFromHorizontalScroll()`
},{key:"renderer",value:function renderer(){var me=this,scheduler=me.scheduler,resourceStore=scheduler.resourceStore,_me$resourceRange=me.resourceRange,firstResource=_me$resourceRange.firstResource,lastResource=_me$resourceRange.lastResource,_me$dateRange=me.dateRange,topDate=_me$dateRange.topDate,bottomDate=_me$dateRange.bottomDate,syncConfigs=[];if(!me.initialized){return;}// Update current time range, reflecting the change on the vertical time axis header
if(!DateHelper.isEqual(topDate,me.topDate)||!DateHelper.isEqual(bottomDate,me.bottomDate)){// Calculated values used by `renderResource()`
me.topDate=topDate;me.bottomDate=bottomDate;me.topDateMS=topDate.getTime();me.bottomDateMS=bottomDate.getTime();me.timeView.range={topDate:topDate,bottomDate:bottomDate};}if(firstResource!==-1&&lastResource!==-1){// Collect all events for resources in view
for(var _i33=firstResource;_i33<=lastResource;_i33++){syncConfigs.push.apply(syncConfigs,me.renderResource(resourceStore.getAt(_i33)));}}DomHelper.sync({elementConfig:{onlyChildren:true,children:syncConfigs},targetElement:scheduler.foregroundCanvas,useSyncId:true,// Called by DomHelper when it creates, releases or reuses elements
callback:function callback(_ref340){var action=_ref340.action,config=_ref340.config,oldConfig=_ref340.oldConfig,element=_ref340.element;// If element is an event wrap, trigger appropriate events
if(config&&config.className&&config.className[scheduler.eventCls+'-wrap']){var// Some actions are considered first a release and then a render (reusing another element).
// This gives clients code a chance to clean up before reusing an element
isRelease=releaseEventActions[action],isRender=renderEventActions[action];// If we are reusing an element that was previously released we should not trigger again
if(isRelease&&oldConfig){var data=oldConfig.elementData.tplData,event={tplData:data,assignmentRecord:data.assignment,eventRecord:data.eventRecord,resourceRecord:data.resourceRecord,element:element};// This event is documented on Scheduler
scheduler.trigger('releaseEvent',event);}if(isRender){var _data2=config.elementData.tplData,_event3={tplData:_data2,assignmentRecord:_data2.assignment,eventRecord:_data2.eventRecord,resourceRecord:_data2.resourceRecord,element:element};// Store element to allow easy mapping from record
element.elementData.element=element;_event3.reusingElement=action==='reuseElement';// This event is documented on Scheduler
scheduler.trigger('renderEvent',_event3);}// No changes during sync, but might need to hook up element again in case cache was cleared
if(action==='none'){config.elementData.element=element;}}}});// Change in displayed resources?
if(me.firstResource!==firstResource||me.lastResource!==lastResource){// Update header to match
me.resourceColumns.range={firstResource:firstResource,lastResource:lastResource};// Store which resources are currently in view
me.firstResource=firstResource;me.lastResource=lastResource;}}//endregion
//region Cache
// Clears cached resource layout
},{key:"clearResources",value:function clearResources(resourceIds){var _this89=this;resourceIds.forEach(function(resourceId){if(_this89.resourceMap[resourceId]){Object.keys(_this89.resourceMap[resourceId]).forEach(function(eventId){delete _this89.eventMap[eventId][resourceId];});delete _this89.resourceMap[resourceId];}});}},{key:"clearAll",value:function clearAll(){this.resourceMap={};this.eventMap={};}//endregion
},{key:"resourceStore",set:function set(store){var me=this;me.resourceStoreDetacher&&me.resourceStoreDetacher();me.resourceColumns.resourceStore=me._resourceStore=store;me.resourceStoreDetacher=store.on({change:me.onResourceStoreChange,refresh:me.onResourceStoreRefresh,thisObj:me,prio:1// Call before others to clear cache before redraw
});},get:function get(){return this._resourceStore;}},{key:"assignmentStore",set:function set(store){var me=this;me.assignmentStoreDetacher&&me.assignmentStoreDetacher();me._assignmentStore=store;if(store){me.assignmentStoreDetacher=store.on({change:me.onAssignmentStoreChange,thisObj:me});}},get:function get(){return this._assignmentStore;}},{key:"resourceRange",get:function get(){var scheduler=this.scheduler,resourceStore=this.resourceStore;if(!resourceStore||!resourceStore.count){return{firstResource:-1,lastResource:-1};}return{firstResource:Math.max(Math.floor(scheduler.scrollLeft/scheduler.resourceColumnWidth)-1,0),lastResource:Math.min(Math.floor((scheduler.scrollLeft+scheduler.timeAxisSubGrid.width)/scheduler.resourceColumnWidth)+1,resourceStore.count-1)};}// Dates in view + buffer
},{key:"dateRange",get:function get(){var scheduler=this.scheduler;var bottomDate=scheduler.getDateFromCoordinate(Math.min(scheduler.scrollTop+scheduler.bodyHeight+scheduler.tickSize-1,(scheduler.virtualScrollHeight||scheduler.scrollable.scrollHeight)-1));// Might end up below time axis (out of ticks)
// TODO: Change call order on refresh to make sure this is not needed?
if(!bottomDate){bottomDate=scheduler.timeAxis.last.endDate;}return{topDate:scheduler.getDateFromCoordinate(Math.max(scheduler.scrollTop-scheduler.tickSize,0)),bottomDate:bottomDate};}}],[{key:"properties",//region Config & Init
get:function get(){return{eventMap:{},resourceMap:{},releasedElements:{}};}}]);return VerticalEventMapper;}(Delayable(Base));VerticalEventMapper._$name='VerticalEventMapper';/**
 * @module Scheduler/view/VerticalTimeAxis
 */function isLastLevel(level,levels){return level===levels.length-1;}function isLastCell(level,cell){return cell===level.cells[level.cells.length-1];}/**
 * Widget that renders a vertical time axis. Only renders ticks in view. Used in vertical mode.
 * @extends Common/widget/Widget
 * @private
 */var VerticalTimeAxis=/*#__PURE__*/function(_Widget12){_inherits2(VerticalTimeAxis,_Widget12);function VerticalTimeAxis(){_classCallCheck2(this,VerticalTimeAxis);return _possibleConstructorReturn2(this,_getPrototypeOf2(VerticalTimeAxis).apply(this,arguments));}_createClass2(VerticalTimeAxis,[{key:"buildCells",// Generates element configs for all levels defined by the current ViewPreset
value:function buildCells(){var me=this;// noinspection JSSuspiciousNameCombination
return{className:'b-widget b-verticaltimeaxis',style:{height:me._height},children:me.levels.map(function(level,i){var _ref341;return{className:new DomClassList((_ref341={'b-sch-header-row':1},_defineProperty(_ref341,"b-sch-header-row-".concat(level.position),1),_defineProperty(_ref341,'b-lowest',isLastLevel(i,me.levels)),_ref341)),dataset:{tickIndex:i,headerPosition:level.position},// Only include cells in view
children:level.cells.filter(function(cell){return cell.start<me.bottomDate&&cell.end>me.topDate;}).map(function(cell){var _ref342;return{className:new DomClassList((_ref342={'b-sch-header-timeaxis-cell':1},_defineProperty(_ref342,cell.headerCellCls,cell.headerCellCls),_defineProperty(_ref342,"b-align-".concat(cell.align),cell.align),_defineProperty(_ref342,'b-last',isLastCell(level,cell)),_ref342)),dataset:{tickIndex:cell.index},style:{// DomHelper appends px to numeric dimensions
top:cell.coord,height:cell.width,minHeight:cell.width},children:[{className:'b-sch-header-text',html:cell.value}]};})};})};}},{key:"render",value:function render(targetElement){_get2(_getPrototypeOf2(VerticalTimeAxis.prototype),"render",this).call(this,targetElement);this.refresh(true);}},{key:"refresh",/**
     * Refresh the UI
     * @param {Boolean} [rebuild] Specify `true` to force a rebuild of the underlying header level definitions
     */value:function refresh(){var rebuild=arguments.length>0&&arguments[0]!==undefined?arguments[0]:!this.levels.length;var me=this,columnConfig=me.timeAxisViewModel.columnConfig,levels=me.levels;if(rebuild){levels.length=0;if(columnConfig.top){levels.push({position:'top',cells:columnConfig.top});}if(columnConfig.middle){levels.push({position:'middle',cells:columnConfig.middle});}if(columnConfig.bottom){levels.push({position:'bottom',cells:columnConfig.bottom});}me._height=levels[0].cells.reduce(function(sum,cell){return sum+=cell.width;},0);}if(!me.topDate||!me.bottomDate){return;}// Boil down levels to only show what is in view
DomHelper.sync({elementConfig:me.buildCells(),targetElement:me.element,useSyncId:'tickIndex'});}},{key:"height",get:function get(){return this._height;}// Set visible date range
},{key:"range",set:function set(range){this.topDate=range.topDate;this.bottomDate=range.bottomDate;this.refresh();}}],[{key:"properties",get:function get(){return{topDate:null,bottomDate:null,levels:[]};}}]);return VerticalTimeAxis;}(Widget);VerticalTimeAxis._$name='VerticalTimeAxis';var VerticalTimeAxisColumn=/*#__PURE__*/function(_Column10){_inherits2(VerticalTimeAxisColumn,_Column10);_createClass2(VerticalTimeAxisColumn,null,[{key:"type",get:function get(){return'verticalTimeAxis';}},{key:"defaults",get:function get(){return{/**
             * Set to false to prevent this column header from being dragged.
             * @config {Boolean} draggable
             * @category Interaction
             * @default false
             * @hide
             */draggable:false,/**
             * Set to false to prevent grouping by this column.
             * @config {Boolean} groupable
             * @category Interaction
             * @default false
             * @hide
             */groupable:false,/**
             * Allow column visibility to be toggled through UI.
             * @config {Boolean} hideable
             * @default false
             * @category Interaction
             * @hide
             */hideable:false,/**
             * Show column picker for the column.
             * @config {Boolean} showColumnPicker
             * @default false
             * @category Menu
             * @hide
             */showColumnPicker:false,/**
             * Allow filtering data in the column (if Filter feature is enabled)
             * @config {Boolean} filterable
             * @default false
             * @category Interaction
             * @hide
             */filterable:false,/**
             * Allow sorting of data in the column
             * @config {Boolean} sortable
             * @category Interaction
             * @default false
             * @hide
             */sortable:false,// /**
//  * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.
//  * @config {Boolean} resizable
//  * @default false
//  * @category Interaction
//  * @hide
//  */
// resizable : false,
/**
             * Allow searching in the column (respected by QuickFind and Search features)
             * @config {Boolean} searchable
             * @default false
             * @category Interaction
             * @hide
             */searchable:false,/**
             * Specifies if this column should be editable, and define which editor to use for editing cells in the column (if CellEdit feature is enabled)
             * @config {String} editor
             * @default false
             * @category Interaction
             * @hide
             */editor:false,/**
             * false to prevent showing a context menu on the cell elements in this column
             * @config {Boolean} enableCellContextMenu
             * @default false
             * @category Menu
             * @hide
             */enableCellContextMenu:false,/**
             * Renderer function for cell tooltips header (used with CellTooltip feature). Specify false to prevent
             * tooltip for that column.
             * @param {HTMLElement} cellElement Cell element
             * @param {Common.data.Model} record Record for cell row
             * @param {Grid.column.Column} column Cell column
             * @param {CellTooltip} cellTooltip Feature instance, used to set tooltip content async
             * @param {MouseEvent} event The event that triggered the tooltip
             * @config {Function} tooltipRenderer
             * @category Rendering
             * @default false
             * @hide
             */tooltipRenderer:false,cellCls:'b-verticaltimeaxiscolumn'};}}]);function VerticalTimeAxisColumn(data,store){var _this90;_classCallCheck2(this,VerticalTimeAxisColumn);_this90=_possibleConstructorReturn2(this,_getPrototypeOf2(VerticalTimeAxisColumn).apply(this,arguments));_this90.timeAxisViewModel=data.timeline.timeAxisViewModel;return _this90;}_createClass2(VerticalTimeAxisColumn,[{key:"renderer",value:function renderer(_ref343){var cellElement=_ref343.cellElement,size=_ref343.size;var me=this;if(!me.view){// I feel a bit bad about assigning this here, but it works...
me.grid.timeView=me.view=new VerticalTimeAxis({timeAxisViewModel:me.timeAxisViewModel});}me.view.render(cellElement);size.height=me.view.height;}}]);return VerticalTimeAxisColumn;}(Column);ColumnStore.registerColumnType(VerticalTimeAxisColumn);VerticalTimeAxisColumn._$name='VerticalTimeAxisColumn';/**
 * @module Scheduler/feature/ScheduleContextMenu
 */ /**
 * Displays a context menu for empty parts of the schedule. Items are populated in the first place
 * by configurations of this Feature, then by other features and/or application code.
 *
 * To add extra items (Array notation):
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         scheduleContextMenu : {
 *             // Extra items for all events
 *             items : [
 *                 {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem({date, resourceRecord, items}) {
 *                         // Custom date based action
 *                     }
 *                 }
 *             ]
 *         }
 *     }
 * });
 * ```
 *
 * To add extra items (Object notation):
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         scheduleContextMenu : {
 *             // Extra items for all events
 *             items : {
 *                 extraItem : {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem({date, resourceRecord, items}) {
 *                         // Custom date based action
 *                     }
 *                 }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * To remove existing items:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         scheduleContextMenu : {
 *             items : {
 *                 addEvent : false
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * Manipulate existing menu items:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         scheduleContextMenu : {
 *             // Process items before menu is shown
 *             processItems({date, resourceRecord, items}) {
 *                  // Push an extra item for ancient times
 *                  if (date < new Date(2018, 11, 17)) {
 *                      items.modernize = {
 *                          text : 'Modernize',
 *                          ontItem({date}) {
 *                              // Custom date based action
 *                          }
 *                      };
 *                  }
 *
 *                  // Do not show menu for Sundays
 *                  if (date.getDay() === 0) {
 *                      return false;
 *                  }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/TimeSpanRecordContextMenuBase
 */var ScheduleContextMenu=/*#__PURE__*/function(_TimeSpanRecordContex2){_inherits2(ScheduleContextMenu,_TimeSpanRecordContex2);function ScheduleContextMenu(){_classCallCheck2(this,ScheduleContextMenu);return _possibleConstructorReturn2(this,_getPrototypeOf2(ScheduleContextMenu).apply(this,arguments));}_createClass2(ScheduleContextMenu,[{key:"construct",//endregion
//region Events
/**
     * Fired from scheduler before the context menu is shown for an event. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @event scheduleContextMenuBeforeShow
     * @preventable
     * @param {Scheduler.view.Scheduler} source
     * @param {Object} items Menu item configs
     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ /**
     * Fired from scheduler when an item is selected in the context menu.
     * @event scheduleContextMenuItem
     * @param {Scheduler.view.Scheduler} source
     * @param {Common.widget.MenuItem} item
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ /**
     * Fired from scheduler after showing the context menu for an event
     * @event scheduleContextMenuShow
     * @preventable
     * @param {Scheduler.view.Scheduler} source
     * @param {Common.widget.Menu} menu The menu
     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered
     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record
     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used
     * @param {HTMLElement} eventElement
     */ //endregion
//region Init
value:function construct(scheduler,config){_get2(_getPrototypeOf2(ScheduleContextMenu.prototype),"construct",this).call(this,scheduler,config);this.scheduler=scheduler;}//endregion
//region Events
},{key:"showEventContextMenu",value:function showEventContextMenu(event){var scheduler=this.scheduler,cellData=scheduler.getEventData(event),isTimeAxisColumn=cellData?scheduler.columns.getById(cellData.columnId)===scheduler.timeAxisColumn:scheduler.timeAxisSubGrid.element===event.target,// For vertical mode the resource must be resolved from the event
resourceRecord=scheduler.resolveResourceRecord(event)||scheduler.resourceStore.last;if(isTimeAxisColumn){this.showContextMenu({menuType:'schedule',date:scheduler.getDateFromDomEvent(event,'floor'),resourceRecord:resourceRecord,event:event});event.preventDefault();}}//endregion
},{key:"namedItems",get:function get(){var client=this.client;if(!this._namedItems){this._namedItems={addEvent:{text:client.L('Add event',null),icon:'b-icon b-icon-add',disabled:client.resourceStore.count===0,weight:100,onItem:function onItem(_ref344){var date=_ref344.date,resourceRecord=_ref344.resourceRecord;client.internalAddEvent(date,resourceRecord,client.getRowFor(resourceRecord));}}};}return this._namedItems;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * An array of extra menu items to add to the context menu
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         scheduleContextMenu : {
             *             // Extra items for all events
             *             items : [
             *                 {
             *                     text : 'Add meeting',
             *                     icon : 'b-fa b-fa-fw b-fa-calendar-plus',
             *                     onItem({ date, resourceRecord }) {
             *                         scheduler.eventStore.add({
             *                             name : 'Meeting',
             *                             startDate : date,
             *                             duration: 2,
             *                             resourceId : resourceRecord.id
             *                         });
             *                     }
             *                 }
             *             ]
             *         }
             *     }
             * });
             * ```
             *
             * or items config to add extra items to the context menu or hide default items
             *
             * ```javascript
             * features : {
             *     scheduleContextMenu : {
             *         items : {
             *             // Add custom 'Add meeting' item
             *             addMeeting : {
             *                 text : 'Add meeting',
             *                 icon : 'b-fa b-fa-fw b-fa-calendar-plus',
             *                 onItem({ date, resourceRecord }) {
             *                     scheduler.eventStore.add({
             *                         name : 'Meeting',
             *                         startDate : date,
             *                         duration: 2,
             *                         resourceId : resourceRecord.id
             *                     });
             *                 }
             *             },
             *             // Hide default 'Add event' item
             *             addEvent : false
             *         }
             *     }
             * }
             * ```
             *
             * @config {Object|Object[]}
             */items:null,/**
             * A function called before displaying the menu that allows manipulations of its items.
             * Called with a single parameter with format { date, resourceRecord, items }.
             * Returning `false` from this function prevents the menu from being shown.
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         scheduleContextMenu : {
             *             // Process items before menu is shown
             *             processItems({date, resourceRecord, items}) {
             *                  // Push an extra item for ancient times
             *                  if (date < new Date(2018, 11, 17)) {
             *                      items.modernize = {
             *                          text : 'Modernize',
             *                          ontItem({date}) {
             *                              // Custom date based action
             *                          }
             *                      };
             *                  }
             *
             *                  // Do not show menu for Sundays
             *                  if (date.getDay() === 0) {
             *                      return false;
             *                  }
             *             }
             *         }
             *     }
             * });
             * ```
             *
             * @config {Function}
             */processItems:null,/**
             * This is a preconfigured set of {@link Common.widget.Container#config-namedItems} used to create the default context menu.
             *
             * The provided defaultItems setting is
             *
             *```javascript
             *    {
             *        addEvent : true
             *    }
             *```
             *
             * The `namedItems` provided by this feature are listed below. These are the property
             * names which you may configure in the feature's {@link #config-items} config:
             *
             * - `addEvent` Add an event for at the resource and time indicated by the `contextmenu` event.
             *
             * To remove existing items, set corresponding keys to `false`
             *
             * ```javascript
             * const scheduler = new Scheduler({
             *     features : {
             *         scheduleContextMenu : {
             *             items : {
             *                 addEvent : false
             *             }
             *         }
             *     }
             * });
             * ```
             *
             * @config {Object}
             */defaultItems:{addEvent:true}};}}]);return ScheduleContextMenu;}(TimeSpanRecordContextMenuBase);ScheduleContextMenu.featureClass='';ScheduleContextMenu._$name='ScheduleContextMenu';GridFeatureManager.registerFeature(ScheduleContextMenu,true,'Scheduler');/**
 * @module Scheduler/feature/ScheduleTooltip
 */ /**
 * Feature that displays a tooltip containing the time at the mouse position when hovering empty parts of the schedule. To not show the tooltip, just disable this feature:
 *
 * ```javascript
 * const scheduler = new Scheduler({
 *     features : {
 *         scheduleTooltip : false
 *     }
 * });
 * ```
 *
 * @extends Common/mixin/InstancePlugin
 * @demo basic
 * @externalexample scheduler/ScheduleTooltip.js
 */var ScheduleTooltip=/*#__PURE__*/function(_InstancePlugin26){_inherits2(ScheduleTooltip,_InstancePlugin26);function ScheduleTooltip(){_classCallCheck2(this,ScheduleTooltip);return _possibleConstructorReturn2(this,_getPrototypeOf2(ScheduleTooltip).apply(this,arguments));}_createClass2(ScheduleTooltip,[{key:"render",//endregion
//region Init
/**
     * Called when scheduler is rendered. Sets up drag and drop and hover tooltip.
     * @private
     */value:function render(){var me=this,scheduler=me.client;// TODO: render should not ever be called twice.
if(me.hoverTip){me.hoverTip.destroy();}var reshowListener;var tip=me.hoverTip=new Tooltip({id:"".concat(scheduler.id,"-schedule-tip"),cls:'b-sch-scheduletip',allowOver:true,hoverDelay:0,hideDelay:100,showOnHover:true,forElement:scheduler.timeAxisSubGridElement,anchorToTarget:false,trackMouse:true,forSelector:'.b-scheduler:not(.b-animating):not(.b-dragging-event):not(.b-dragcreating) .b-timeline-subgrid > :not(.b-sch-foreground-canvas):not(.b-group-footer):not(.b-group-row) *',// Do not constrain at all, want it to be able to go outside of the viewport to not get in the way
constrainTo:null,getHtml:me.getHoverTipHtml.bind(me),onDocumentMouseDown:function onDocumentMouseDown(event){// Click on the scheduler hides until the very next
// non-button-pressed mouse move!
if(tip.forElement.contains(event.event.target)){reshowListener=EventHelper.on({element:scheduler.timeAxisSubGridElement,mousemove:function mousemove(e){return tip.internalOnPointerOver(e);},capture:true});}var hideAnimation=tip.hideAnimation;tip.hideAnimation=false;tip.constructor.prototype.onDocumentMouseDown.call(tip,event);tip.hideAnimation=hideAnimation;},listeners:{pointerover:function pointerover(_ref345){var event=_ref345.event;var buttonsPressed='buttons'in event?event.buttons>0:event.which>0;// fallback for Safari which doesn't support 'buttons'
// This is the non-button-pressed mousemove
// after the document mousedown
if(!buttonsPressed&&reshowListener){reshowListener();}// Never any tooltip while interaction is ongoing and a mouse button is pressed
return!me.disabled&&!scheduler.readOnly&&!buttonsPressed;}}});// Do this to make tip CSP compliant. Not possible to have inline styles
var tipMouseMove=tip.onMouseMove;tip.onMouseMove=function(event){tipMouseMove.call(tip,event);me.onTipMove(tip,event);};me.clockTemplate=new ClockTemplate({timeAxisViewModel:scheduler.timeAxisViewModel});}},{key:"doDestroy",value:function doDestroy(){var me=this;me.clockTemplate&&me.clockTemplate.destroy();me.hoverTip&&me.hoverTip.destroy();_get2(_getPrototypeOf2(ScheduleTooltip.prototype),"doDestroy",this).call(this);}//endregion
//region Contents
},{key:"onTipMove",value:function onTipMove(tip,event){this.clockTemplate.updateDateIndicator(tip.element,this.lastTime);}/**
     * Gets html to display in hover tooltip (tooltip displayed on empty parts of scheduler)
     */},{key:"getHoverTipHtml",value:function getHoverTipHtml(_ref346){var tip=_ref346.tip,event=_ref346.event;var me=this,scheduler=me.client,time=event&&scheduler.getDateFromDomEvent(event,'floor',true);var html=me.lastHtml;if(time){var resourceRecord=scheduler.resolveResourceRecord(event);if(time-me.lastTime!==0||resourceRecord!==me.lastResource){me.lastResource=resourceRecord;html=me.lastHtml=me.updateHoverTip(time,event);}}else{tip.hide();me.lastTime=null;me.lastResource=null;}return html;}/**
     * Called from getHoverTipHtml(), fills templates used.
     * @private
     */},{key:"updateHoverTip",value:function updateHoverTip(date,event){if(date){var me=this,clockHtml=me.clockTemplate.template({date:date,text:me.client.getFormattedDate(date)}),messageHtml=me.messageTemplate({message:me.getText(date,event)||''});me.lastTime=date;return clockHtml+messageHtml;}}/**
     * Override this to render custom text to default hover tip
     * @param {Date} date
     * @param {Event} event Browser event
     * @return {String}
     */},{key:"getText",value:function getText(date,event){}//endregion
/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;}}],[{key:"defaultConfig",//region Config
get:function get(){return{messageTemplate:function messageTemplate(data){return"<div class=\"b-sch-hovertip-msg\">".concat(data.message,"</div>");}};}// Plugin configuration. This plugin chains some of the functions in Grid.
},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return ScheduleTooltip;}(InstancePlugin);// TODO: Refactor SASS so thet auto-generated class name of 'b-' + cls.name.toLowerCase() can be used.
ScheduleTooltip.featureClass='b-scheduletip';ScheduleTooltip._$name='ScheduleTooltip';GridFeatureManager.registerFeature(ScheduleTooltip,true,'Scheduler');/**
 * @module Scheduler/view/Scheduler
 */ /**
 * The Scheduler widget is a very powerful and performant UI component that displays an arbitrary number of "locked"
 * columns with a schedule occupying the remaining space. The schedule has a timeaxis at the top, one row per resource
 * and any number of events per resource.
 *
 * ## Intro
 * The Scheduler widget has a wide range of features and a large API to allow users to work with it efficiently in the
 * browser.
 *
 * The timeaxis displayed at the top of the Scheduler is configured using a {@link Scheduler.view.TimelineBase#config-startDate},
 * {@link Scheduler.view.TimelineBase#config-endDate} and a {@link Scheduler.view.mixin.TimelineViewPresets#config-viewPreset}. The dates
 * determine the outer limits of the range shown in the timeaxis while the {@link Scheduler.preset.ViewPreset} decides
 * the appearance and which dates are actually shown. The Scheduler ships with a selection of predefined view presets,
 * which can be found in {@link Scheduler.preset.PresetManager}.
 *
 * The Scheduler uses a {@link Scheduler.data.ResourceStore} to hold resources and an {@link Scheduler.data.EventStore}
 * to hold events. You can use inline data or load data using ajax, see the "Working with data" guides for more
 * information.
 *
 * The simplest schedule configured with inline data would look like this:
 *
 *      let scheduler = new Scheduler({
 *          appendTo : document.body,
 *
 *          startDate  : new Date(2018,4,6),
 *          endDate    : new Date(2018,4,12),
 *          viewPreset : 'dayAndWeek',
 *
 *           columns : [
 *              { field : 'name', text : 'Name', width: 100 }
 *          ],
 *
 *          resources : [
 *              { id : 1, name : 'Bernard' },
 *              { id : 2, name : 'Bianca' }
 *          ],
 *
 *          events : [
 *              { id : 1, resourceId : 1, name : 'Interview', startDate : '2018-05-06', endDate : '2018-05-07' },
 *              { id : 2, resourceId : 1, name : 'Press conference', startDate : '2018-05-08', endDate : '2018-05-09' },
 *              { id : 3, resourceId : 2, name : 'Audition', startDate : '2018-05-06', endDate : '2018-05-08' },
 *              { id : 4, resourceId : 2, name : 'Script deadline', startDate : '2018-05-11', endDate : '2018-05-11' }
 *          ]
 *      });
 *
 * {@inlineexample scheduler/Simplest.js}
 * ## Inheriting from Bryntum Grid
 * Bryntum Scheduler inherits from Bryntum Grid, meaning that most features available for the grid are also available
 * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.
 *
 * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.
 * {@region Loading data}
 * As mentioned above Bryntum Scheduler uses an {@link Scheduler.data.EventStore} and a {@link Scheduler.data.ResourceStore}
 * to hold its data. Data is expected to be in JSON format and can be assigned inline (from memory) using the
 * {@link Scheduler.view.mixin.SchedulerStores#config-events} and
 * {@link Scheduler.view.mixin.SchedulerStores#config-resources} shortcuts:
 * ```
 * let scheduler = new Scheduler({
 *    events : myArrayOfEventData,
 *    resources : myArrayOfResourceData
 * });
 * ```
 * If you need to give additional store configuration, you can also specify store configs or instances:
 * ```
 * let resourceStore = new ResourceStore({
 *   // ResourceStore config object
 * })
 *
 * let scheduler = new Scheduler({
 *    // EventStore config object
 *    eventStore : {
 *       ...
 *    },
 *
 *    // Already existing ResourceStore instance
 *    resourceStore
 * });
 * ```
 * To use Ajax to fetch data from a server, specify {@link Common.data.AjaxStore#config-readUrl}:
 * ```
 * let scheduler = new Scheduler({
 *    eventStore : {
 *        readUrl  : 'backend/read_events.php',
 *        autoLoad : true
 *    }
 * });
 * // If you do not specify autoLoad, trigger loading manually:
 * scheduler.eventStore.load();
 * ```
 * For more information, see the "Working with data" guides.
 * {@endregion}
 * {@region Event styling}
 * Bryntum Schedulers appearance can be affected in a few different ways:
 *
 * * Switching themes
 * * Choosing event styles and colors
 * * Using renderer functions
 *
 * ### Switching themes
 * Scheduler ships with four different themes, simply include the css file for the theme you would like to use on your
 * page. The themes are located in the `/build` folder. For example to include the light theme:
 * ```
 * <link rel="stylesheet" href="build/scheduler.light.css" id="bryntum-theme">
 * ```
 * Included themes are (from left to right) light, default, dark and material:
 *
 * <img src="../examples/basic/meta/thumb.light.png" alt="Light theme" width="300" style="margin-right: .5rem">
 * <img src="../examples/basic/meta/thumb.default.png" alt="Default theme" width="300" style="margin-right: .5rem">
 * <img src="../examples/basic/meta/thumb.dark.png" alt="Dark theme" width="300" style="margin-right: .5rem">
 * <img src="../examples/basic/meta/thumb.material.png" alt="Material theme" width="300">
 *
 * ### Choosing event styles and colors
 * The style and color of each event can be changed by assigning to the `eventStyle` and `eventColor` configs. These
 * configs are available at 3 different levels:
 *
 * * Scheduler level, affects all events (see {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle} and {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor}).
 * * Resource level, affects all events assigned to that resource (see {@link Scheduler.model.ResourceModel#field-eventStyle}
 * and {@link Scheduler.model.ResourceModel#field-eventColor}).
 * * Event level, affects that event (see {@link Scheduler.model.EventModel#field-eventStyle} and
 * {@link Scheduler.model.EventModel#field-eventColor}).
 *
 * {@inlineexample scheduler/Styles.js}
 *
 * For available styles, see {@link Scheduler.view.mixin/TimelineEventRendering#config-eventStyle}. For colors,
 * {@link Scheduler.view.mixin/TimelineEventRendering#config-eventColor}. Also take a look at the
 * <a href="../examples/eventstyles" target="_blank">eventstyles demo</a>.
 *
 * ### Using render functions
 * Render function can be used to manipulate the rendering of rows (resources) and events. For information on row
 * renderers, see {@link Grid.column.Column#config-renderer}.
 *
 * Event rendering can be manipulated by specifying an {@link Scheduler.view.mixin/SchedulerEventRendering#config-eventRenderer} function. The function is called
 * for each event before it is rendered to DOM. By using its arguments you can add CSS classes, modify styling and
 * determine the contents of the event:
 * ```
 * let scheduler = new Scheduler({
 *
 *   events    : [...],
 *   resources : [...],
 *
 *   ...,
 *
 *   eventRenderer({resourceRecord, eventRecord, tplData}) {
 *      // add css class to the event
 *      tplData.cls.add('my-css-class');
 *
 *      // use an icon
 *      tplData.iconCls = 'b-fa b-fa-some-nice-icon';
 *
 *      // returnvalue is used as events text
 *      return `${resourceRecord.name}: ${eventRecord.name}`;
 *   }
 * });
 * ```
 * {@endregion}
 * {@region Event manipulation}
 * You can programmatically manipulate the events using data operations, see the "Working with data" guides for more
 * information. Events are reactive, changes reflect on the UI automatically. A small example on manipulating events:
 * ```
 * // change startDate of first event
 * scheduler.eventStore.first.startDate = new Date(2018,5,10);
 *
 * // remove last event
 * scheduler.eventStore.last.remove();
 *
 * // reassign an event
 * scheduler.eventStore.getById(10).resourceId = 2;
 * ```
 *
 * You can also allow your users to manipulate the events using the following features:
 *
 * * {@link Scheduler.feature.EventDrag}, drag and drop events within the schedule
 * * {@link Scheduler.feature.EventDragCreate}, create new events by click-dragging an empty area
 * * {@link Scheduler.feature.EventEdit}, show an event editing form
 * * {@link Scheduler.feature.SimpleEventEdit}, edit the event name easily
 * * {@link Scheduler.feature.EventResize}, resize events by dragging resize handles
 *
 * All of the features mentioned above are enabled by default.
 * {@endregion}
 *
 * {@region Default configs}
 * There is a myriad of configs and features available for Scheduler (browse the API docs to find them), some of them on
 * by default and some of them requiring extra configuration. The code below tries to illustrate the major things that
 * are used by default:
 *
 * ```javascript
 * let scheduler = new Scheduler({
 *    // The following features are enabled by default:
 *    features : {
 *        cellEdit            : true, // Cell editing in the columns part
 *        columnLines         : true, // Column lines in the schedule part
 *        columnPicker        : true, // Header context menu item to toggle visible columns
 *        columnReorder       : true, // Reorder columns in grid part using drag and drop
 *        columnResize        : true, // Resize columns in grid part using the mouse
 *        contextMenu         : true, // Context menu for cells and headers in the grid part
 *        eventContextMenu    : true, // Context menu for events
 *        eventDrag           : true, // Dragging events
 *        eventDragCreate     : true, // Drag creating events
 *        eventEdit           : true, // Event editor dialog
 *        eventFilter         : true, // Filtering events using header context menu
 *        eventResize         : true, // Resizing events using the mouse
 *        eventTooltip        : true, // Tooltips for events
 *        group               : true, // Row grouping
 *        headerContextMenu   : true, // Header context menu for schedule part
 *        scheduleContextMenu : true, // Context menu for empty parts of the schedule
 *        scheduleTooltip     : true, // Tooltip for empty parts of the schedule
 *        sort                : true  // Row sorting
 *    },
 *
 *    // From Grid
 *    animateRemovingRows       : false, // Rows will not slide out on removal
 *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height
 *    columnLines               : true,  // Grid part, themes might override it to hide lines anyway
 *    emptyText                 : 'No rows to display',
 *    enableTextSelection       : false, // Not allowed to select text in cells by default,
 *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid
 *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes
 *    loadMask                  : 'Loading...',
 *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns
 *    responsiveLevels : {
 *      small : 400,
 *      medium : 600,
 *      large : '*'
 *    },
 *    rowHeight                 : 60,    // Scheduler specifies a default rowHeight in pixels
 *    showDirty                 : false, // No indicator for changed cells
 *    showRemoveInContextMenu   : true   // Context menu has "Remove row" item,
 *
 *    // Scheduler specific
 *    autoAdjustTimeAxis             : true,      // startDate & endDate will be adjusted to display a suitable range
 *    allowOverlap                   : true,      // Events are allowed to overlap (overlays, stacks or packs depending on eventLayout)
 *    barMargin                      : 10,        // Space above + below each event
 *    createEventOnDblClick          : true,      // Allow creating new events by double clicking empty space
 *    enableDeleteKey                : true,      // Allow deleting events with delete / backspace keys
 *    enableEventAnimations          : true,      // Animate event changes
 *    eventBarTextField              : 'name',    // Field on EventModel to display in events
 *    eventColor                     : 'green',   // Use green as default color for events
 *    eventLayout                    : 'stack',   // Stack overlapping events by default
 *    eventStyle                     : 'plain',   // Use plain as default style for events
 *    managedEventSizing             : true,      // Calculate event sizes based on rowHeight & barMargin
 *    milestoneCharWidth             : 10,
 *    milestoneLayoutMode            : 'default',
 *    removeUnassignedEvent          : true,      // Remove event when all assignments for it are removed
 *    useInitialAnimation            : true,      // Fade in events initially
 *    viewPreset                     : 'weekAndDayLetter',
 *    zoomOnMouseWheel               : true,
 *    zoomOnTimeAxisDoubleClick      : true
 * });
 * ```
 * {@endregion}
 *
 * {@region Performance}
 * To make scheduler performance as good as possible it only renders the events and resources that are within view (plus
 * an additional buffer). Since adding to and removing from DOM comes with a performance penalty the elements are
 * instead repositioned and reused as you scroll. A side effect of this is that you cannot do direct DOM element
 * manipulation in a reliable way, instead you should use row and event renderer functions to achive what you want (see
 * the section on event styling above).
 *
 * To put the scheduler to the test, try our <a href="../examples/bigdataset" target="_blank">bigdataset demo</a>.
 * {@endregion}
 *
 * @mixes Scheduler/view/mixin/EventNavigation
 * @mixes Scheduler/view/mixin/EventSelection
 * @mixes Scheduler/view/mixin/SchedulerDom
 * @mixes Scheduler/view/mixin/SchedulerDomEvents
 * @mixes Scheduler/view/mixin/SchedulerEventRendering
 * @mixes Scheduler/view/mixin/SchedulerRegions
 * @mixes Scheduler/view/mixin/SchedulerScroll
 * @mixes Scheduler/view/mixin/SchedulerState
 * @mixes Scheduler/view/mixin/SchedulerStores
 * @mixes Scheduler/view/mixin/TimelineDateMapper
 * @mixes Scheduler/view/mixin/TimelineDomEvents
 * @mixes Scheduler/view/mixin/TimelineEventRendering
 * @mixes Scheduler/view/mixin/TimelineScroll
 * @mixes Scheduler/view/mixin/TimelineViewPresets
 * @mixes Scheduler/view/mixin/TimelineZoomable
 *
 * @extends Scheduler/view/TimelineBase
 */ // SchedulerDragResize not included as @mixes above on purpose, since it is private
var Scheduler=/*#__PURE__*/function(_base$mixes5){_inherits2(Scheduler,_base$mixes5);function Scheduler(){_classCallCheck2(this,Scheduler);return _possibleConstructorReturn2(this,_getPrototypeOf2(Scheduler).apply(this,arguments));}_createClass2(Scheduler,[{key:"construct",//endregion
//region Events
/**
     * Fired after rendering an event, when its element is available in DOM.
     * @event renderEvent
     * @param {Scheduler.view.Scheduler} source This Scheduler
     * @param {Scheduler.model.EventModel} eventRecord The event record
     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record
     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment record, if using an AssignmentStore
     * @param {Object} tplData An object containing details about the event rendering, see {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventRenderer} for details
     * @param {HTMLElement} element The events element
     */ //endregion
//region Functions injected by features
// For documentation & typings purposes
/**
     * Opens an {@link Scheduler.view.EventEditor EventEditor} to edit the passed event.
     *
     * *NOTE: Only available when the {@link Scheduler/feature/EventEdit EventEdit} feature is enabled.*
     *
     * @function editEvent
     * @param {Scheduler.model.EventModel} eventRecord Event to edit
     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.
     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using
     * multi assignment.
     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)
     * @category Feature shortcuts
     */ //endregion
//region Init
value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;_get2(_getPrototypeOf2(Scheduler.prototype),"construct",this).call(this,config);if(me.createEventOnDblClick){me.on('scheduledblclick',me.onSchedulerDblClick);}}//endregion
//region Config getters/setters
// Overrides TimelineBase to supply eventStore as its store (which is only used in passed events)
},{key:"onLocaleChange",//endregion
//region Event handlers
value:function onLocaleChange(){this.currentOrientation.onLocaleChange();_get2(_getPrototypeOf2(Scheduler.prototype),"onLocaleChange",this).call(this);}},{key:"onSchedulerHorizontalScroll",value:function onSchedulerHorizontalScroll(subGrid,scrollLeft){// rerender cells in scheduler column on horizontal scroll to display events in view
this.currentOrientation.updateFromHorizontalScroll(scrollLeft);_get2(_getPrototypeOf2(Scheduler.prototype),"onSchedulerHorizontalScroll",this).call(this,subGrid,scrollLeft);}},{key:"onSchedulerDblClick",value:function onSchedulerDblClick(_ref347){var startDate=_ref347.date,resourceRecord=_ref347.resourceRecord,row=_ref347.row;var me=this;if(me.readOnly||resourceRecord.meta.specialRow){return;}me.internalAddEvent(startDate,resourceRecord,row);}},{key:"onTimeAxisViewModelUpdate",value:function onTimeAxisViewModelUpdate(){_get2(_getPrototypeOf2(Scheduler.prototype),"onTimeAxisViewModelUpdate",this).call(this);this.currentOrientation.onTimeAxisViewModelUpdate();}},{key:"onColumnsChanged",value:function onColumnsChanged(_ref348){var action=_ref348.action,changes=_ref348.changes,column=_ref348.record;// TODO: Have ResourceHeader call this directly instead of relying on event?
if(column===this.timeAxisColumn&&'width'in changes){this.updateCanvasSize();}_get2(_getPrototypeOf2(Scheduler.prototype),"onColumnsChanged",this).apply(this,arguments);}// Only used in vertical mode
},{key:"onVerticalScroll",value:function onVerticalScroll(_ref349){var scrollTop=_ref349.scrollTop;this.currentOrientation.updateFromVerticalScroll(scrollTop);}/**
     * Called when new event is created.
     * Сan be overriden to supply default record values etc.
     * @param {Scheduler.model.EventModel} eventRecord Newly created event
    */},{key:"onEventCreated",value:function onEventCreated(eventRecord){}//endregion
//region Mode
/**
     * Checks if scheduler is in horizontal mode
     * @returns {Boolean}
     * @readonly
     * @category Common
     * @private
     */},{key:"onElementKeyDown",//endregion
//region Dom event dummies
// this is ugly, but needed since super cannot be called from SchedulerDomEvents mixin...
value:function onElementKeyDown(event){_get2(_getPrototypeOf2(Scheduler.prototype),"onElementKeyDown",this).call(this,event);}},{key:"onElementKeyUp",value:function onElementKeyUp(event){_get2(_getPrototypeOf2(Scheduler.prototype),"onElementKeyUp",this).call(this,event);}},{key:"onElementMouseOver",value:function onElementMouseOver(event){_get2(_getPrototypeOf2(Scheduler.prototype),"onElementMouseOver",this).call(this,event);}},{key:"onElementMouseOut",value:function onElementMouseOut(event){_get2(_getPrototypeOf2(Scheduler.prototype),"onElementMouseOut",this).call(this,event);}//endregion
//region Context menu
/**
     * A chainable function which Features may hook to add their own event context menu items
     * when context menu is invoked on an event.
     * @param {Object} params An object containing the available contextual information.
     * @param {Scheduler.model.EventModel} params.eventRecord The context event.
     * @param {Scheduler.model.ResourceModel} params.resourceRecord The context resource
     * @param {Scheduler.model.AssignmentModel} params.assignmentRecord The context assignment if any.
     * @param {HTMLElement} params.eventElement The context event's DOM element.
     * @param {Event} params.event The triggering DOM `contextmenu` event.
     */},{key:"getEventMenuItems",value:function getEventMenuItems(){}/**
     * A chainable function which Features may hook to add their own Scheduler context menu items
     * when context menu is invoked on the scheduler, but not on an event.
     * @param {Object} params An object containing the available contextual information.
     * @param {Scheduler.model.ResourceModel} params.resourceRecord The context resource
     * @param {Date} params.date The Date corresponding to the mouse position in the time axis.
     * @param {HTMLElement} params.eventElement The context event's DOM element.
     * @param {Event} params.event The triggering DOM `contextmenu` event.
     */},{key:"getScheduleMenuItems",value:function getScheduleMenuItems(){}//endregion
//region Scheduler specific date mapping functions
},{key:"internalAddEvent",value:function internalAddEvent(startDate,resourceRecord,row){var me=this,resourceRecords=[resourceRecord],eventRecord=new me.eventStore.modelClass({startDate:startDate,endDate:DateHelper.add(startDate,1,me.timeAxis.unit)});me.onEventCreated(eventRecord);if(me.eventEdit){var eventData=me.currentOrientation.getTimeSpanRenderData(eventRecord,resourceRecord),proxyEl=me.eventEdit.dragProxyElement=DomHelper.createElement({parent:me.foregroundCanvas,className:'b-sch-dragcreator-proxy',style:"width:".concat(eventData.width,"px;height:").concat(eventData.height,"px")});DomHelper.setTranslateXY(proxyEl,eventData.left,(row&&row.top||0)+eventData.top);me.editEvent(eventRecord,resourceRecord,proxyEl);return;}/**
         * Fires before an event is added. Can be triggered by schedule double click, drag create action, or by the event editor.
         * @event beforeEventAdd
         * @param {Scheduler.view.Scheduler} source The Scheduler instance
         * @param {Scheduler.model.EventModel} eventRecord The record about to be added
         * @param {Scheduler.model.ResourceModel[]} resources **Deprecated** Use `resourceRecords` instead
         * @param {Scheduler.model.ResourceModel[]} resourceRecords Resources that the record is assigned to
         * @preventable
         */if(me.trigger('beforeEventAdd',{eventRecord:eventRecord,resourceRecords:resourceRecords,resources:resourceRecords})!==false){me.eventStore.add(eventRecord);me.eventStore.assignEventToResource(eventRecord,resourceRecord);}}/**
     * Checks if a date range is allocated or not for a given resource.
     * @param {Date} start The start date
     * @param {Date} end The end date
     * @param {Scheduler.model.EventModel} excludeEvent An event to exclude from the check (or null)
     * @param {Scheduler.model.ResourceModel} resource The resource
     * @return {Boolean} True if the timespan is available for the resource
     * @category Dates
     */},{key:"isDateRangeAvailable",value:function isDateRangeAvailable(start,end,excludeEvent,resource){return this.eventStore.isDateRangeAvailable(start,end,excludeEvent,resource);}//endregion
},{key:"timeAxisViewModel",set:function set(timeAxisViewModel){_set(_getPrototypeOf2(Scheduler.prototype),"timeAxisViewModel",timeAxisViewModel,this,true);if(this.eventStore){this.timeAxisViewModel.eventStore=this.eventStore;}},get:function get(){return _get2(_getPrototypeOf2(Scheduler.prototype),"timeAxisViewModel",this);}// Placeholder getter/setter for mixins, please make any changes needed to SchedulerStores#store instead
},{key:"store",get:function get(){return _get2(_getPrototypeOf2(Scheduler.prototype),"store",this);},set:function set(store){_set(_getPrototypeOf2(Scheduler.prototype),"store",store,this,true);}},{key:"isHorizontal",get:function get(){return this.mode==='horizontal';}/**
     * Checks if scheduler is in vertical mode
     * @returns {Boolean}
     * @readonly
     * @category Common
     * @private
     */},{key:"isVertical",get:function get(){return this.mode==='vertical';}/**
     * Get/set mode (horizontal/vertical)
     * @property {String}
     * @private
     * @category Common
     */},{key:"mode",get:function get(){return this._mode;},set:function set(mode){var me=this;me._mode=mode;if(!me[mode]){if(mode==='horizontal'){me.horizontal=new HorizontalEventMapper(me);if(me.rendered){me.horizontal.init();}me.un('scroll',me.onVerticalScroll,me);}else if(mode==='vertical'){// Zooming is not yet supported in vertical mode, disable it
me.zoomOnTimeAxisDoubleClick=me.zoomOnMouseWheel=false;me.vertical=new VerticalEventMapper(me);if(me.rendered){me.vertical.init();}me.on('scroll',me.onVerticalScroll,me);}}}},{key:"currentOrientation",get:function get(){return this[this.mode];}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * Scheduler mode. Supported values: horizontal, vertical
             * @config {String} mode
             * @default
             */mode:'horizontal',/**
             * CSS class to add to rendered events
             * @config {String}
             * @category CSS
             * @private
             * @default
             */eventCls:'b-sch-event',/**
             * CSS class to add to cells in the timeaxis column
             * @config {String}
             * @category CSS
             * @private
             * @default
             */timeCellCls:'b-sch-timeaxis-cell',timeCellSelector:'.b-sch-timeaxis-cell',scheduledEventName:'event',/**
             * A CSS class to apply to each event in the view on mouseover (defaults to 'b-sch-event-hover').
             * @config {String}
             * @default
             * @category CSS
             * @private
             */overScheduledEventClass:'b-sch-event-hover',/**
             * Set to false if you don't want to allow events overlapping (defaults to true).
             * @config {Boolean}
             * @default
             * @category Scheduled events
             */allowOverlap:true,/**
             * The height in pixels of Scheduler rows.
             * @config {Boolean}
             * @default
             */rowHeight:60,/**
             * Factor representing the avarge char width in pixels used to determine milestone width when configured
             * with `milestoneLayoutMode: 'estimate'`.
             * @config {Number}
             * @default
             */milestoneCharWidth:10,/**
             * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`
             * other than `default`. Valid values are:
             * * start
             * * center (default)
             * * end
             */milestoneAlign:'center',// This is determined by styling, in the future it should be measured
milestoneMinWidth:40};}}]);return Scheduler;}(base(TimelineBase).mixes(SchedulerDom,SchedulerDomEvents,SchedulerDragResize,SchedulerStores,SchedulerScroll,SchedulerState,SchedulerEventRendering,SchedulerRegions,EventSelection,EventNavigation));exports.Scheduler=Scheduler;Scheduler._$name='Scheduler';BryntumWidgetAdapterRegister.register('scheduler',Scheduler);VersionHelper.setVersion('scheduler','2.2.4');/**
 * @module Gantt/column/AddNewColumn
 */ /**
 * This column allows user to dynamically add columns to the Gantt chart by clicking the column header
 * and picking columns from a combobox.
 *
 * ## Adding a custom column to the combobox
 *
 * In order to appear in the column combobox list a column class have to fulfill these conditions:
 *
 * 1. the class should have a static property `type` with unique string value that will identify the column.
 * 2. the class should be registered with the call to {@link Grid/data/ColumnStore#function-registerColumnType-static ColumnStore.registerColumnType}.
 * 3. the class should have a static property `isGanttColumn` with truthy value.
 * 4. the class should have a static `text` property with column name.
 *
 * For example:
 *
 * ```javascript
 * import ColumnStore from 'gantt-distr/lib/Grid/data/ColumnStore.js';
 * import Column from 'gantt-distr/lib/Grid/column/Column.js';
 *
 * // New column class to display task priority
 * export default class TaskPriorityColumn extends Column {
 *     // unique alias of the column
 *     static get type() {
 *         return 'priority';
 *     }
 *
 *     // indicates that the column should be present in "Add New..." column
 *     static get isGanttColumn() {
 *         return true;
 *     }
 *
 *     static get defaults() {
 *         return {
 *             // the column is mapped to "priority" field of the Task model
 *             field : 'priority',
 *             // the column title
 *             text  : 'Priority'
 *         };
 *     }
 * }
 *
 * // register new column
 * ColumnStore.registerColumnType(TaskPriorityColumn);
 * ```
 *
 * @extends Grid/column/Column
 * @classType addnew
 */var AddNewColumn=/*#__PURE__*/function(_Column11){_inherits2(AddNewColumn,_Column11);function AddNewColumn(){_classCallCheck2(this,AddNewColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(AddNewColumn).apply(this,arguments));}_createClass2(AddNewColumn,[{key:"headerRenderer",value:function headerRenderer(_ref350){var column=_ref350.column,headerElement=_ref350.headerElement;var columnCombo=column.columnCombo;columnCombo.render(headerElement);columnCombo.picker.forElement=headerElement;}},{key:"onKeyDown",value:function onKeyDown(event){if(event.key==='Enter'){this.columnCombo.focus();}}},{key:"updateLocalization",value:function updateLocalization(){// reset cached combo to rebuild options store w/ new translated column names
if(this._columnCombo){this._columnCombo.destroy();this._columnCombo=null;}_get2(_getPrototypeOf2(AddNewColumn.prototype),"updateLocalization",this).call(this);}},{key:"columnCombo",get:function get(){var me=this,columns=me.grid.columns;return me._columnCombo||(me._columnCombo=new Combo({cls:'b-new-column-combo',placeholder:me.L('New Column'),triggers:false,autoExpand:true,store:me.ganttColumnStore,displayField:'text',monitorResize:false,picker:{align:'t0-b0',minWidth:200,onItem:function onItem(_ref351){var columnRecord=_ref351.record;var newColumn=new columnRecord.value({region:me.region},columns);// Insert the new column before the "New Column" column
// then focus it to ensure it is in view.
columns.insert(columns.indexOf(me),newColumn);newColumn.element.focus();}},syncInputFieldValue:function syncInputFieldValue(){this.input.value='';}}));}},{key:"ganttColumnStore",get:function get(){var _this91=this;// Create a store containing the Gantt column classes.
// A filter ensures that column types which are already
// present in the grid are not shown.
return new Store({data:Object.values(ColumnStore.columnTypes).reduce(function(result,col){// We must ensure that the defaultValues property is calculated
// so that we can detect a text property.
if(!col.propertiesExposedForData){col.exposeProperties({});}// To be included, a column must have a static isGanttColumn
// property which yields a truthy value, and a text value.
if(col.isGanttColumn&&col.text){result.push({id:col.type,text:col.L(col.text),value:col});}return result;},[]),filters:[// A colRecord is only filtered in if the grid columns do not contain an instance.
function(colRecord){return!_this91.grid.columns.some(function(gridCol){return gridCol.constructor===colRecord.value;});}],sorters:[{field:'text'}]});}}],[{key:"type",get:function get(){return'addnew';}},{key:"defaults",get:function get(){return{cls:'b-new-column-column',draggable:false,sortable:false,field:null,editor:null};}}]);return AddNewColumn;}(Column);exports.AddNewColumn=AddNewColumn;ColumnStore.registerColumnType(AddNewColumn);AddNewColumn._$name='AddNewColumn';/**
 * @module Gantt/widget/CalendarPicker
 */ /**
 * Combo box preconfigured with possible calendar values. This picker doesn't support {@link Common/widget/Combo#config-multiSelect multiSelect}
 *
 * @extends Common/widget/Combo
 */var CalendarPicker=/*#__PURE__*/function(_Combo){_inherits2(CalendarPicker,_Combo);function CalendarPicker(){_classCallCheck2(this,CalendarPicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarPicker).apply(this,arguments));}_createClass2(CalendarPicker,[{key:"refreshCalendars",/**
     * Replaces the field store records with the provided ones.
     * @param {Scheduler.data.Calendar[]} calendars New contents for the widget store.
     */value:function refreshCalendars(calendars){this.store.data=calendars.map(function(c){return{id:c.id,text:c.name};});}},{key:"store",get:function get(){if(!this._store){this.store=new Store();}return this._store;},set:function set(store){_set(_getPrototypeOf2(CalendarPicker.prototype),"store",store,this,true);}},{key:"value",get:function get(){return _get2(_getPrototypeOf2(CalendarPicker.prototype),"value",this);},set:function set(value){if(value){if(value.isDefault&&value.isDefault()){value=null;}else if(value.id){value=value.id;}}_set(_getPrototypeOf2(CalendarPicker.prototype),"value",value,this,true);}}],[{key:"type",get:function get(){return'calendarpicker';}}]);return CalendarPicker;}(Combo);CalendarPicker._$name='CalendarPicker';BryntumWidgetAdapterRegister.register(CalendarPicker.type,CalendarPicker);/**
 * @module Gantt/column/CalendarColumn
 */ /**
 * A column that displays (and allows user to update) the current {@link Gantt.model.CalendarModel calendar} of the task.
 *
 * @extends Grid/column/Column
 * @classType calendar
 */var CalendarColumn=/*#__PURE__*/function(_Column12){_inherits2(CalendarColumn,_Column12);function CalendarColumn(){_classCallCheck2(this,CalendarColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarColumn).apply(this,arguments));}_createClass2(CalendarColumn,[{key:"afterConstruct",value:function afterConstruct(){var me=this;_get2(_getPrototypeOf2(CalendarColumn.prototype),"afterConstruct",this).call(this);var project=me.grid.project;// Store default calendar to filter out this value
me.defaultCalendar=project.defaultCalendar;me.refreshCalendars();project.calendarManagerStore.on({change:me.refreshCalendars,refresh:me.refreshCalendars,thisObj:me});}// region Events
},{key:"refreshCalendars",value:function refreshCalendars(){var me=this,project=me.grid.project;me.editor.refreshCalendars(project.calendarManagerStore.getRange());}// endregion
},{key:"renderer",value:function renderer(_ref352){var value=_ref352.value;var me=this;if(value===me.defaultCalendar){return'';}else if(value&&value.id){var model=me.editor.store.getById(value.id);return model&&model[me.editor.displayField]||'';}else{return'';}}}],[{key:"type",get:function get(){return'calendar';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'calendar',text:'Calendar',editor:{type:CalendarPicker.type,clearable:true,allowInvalid:false}};}}]);return CalendarColumn;}(Column);exports.CalendarColumn=CalendarColumn;ColumnStore.registerColumnType(CalendarColumn);CalendarColumn._$name='CalendarColumn';/**
 * @module Gantt/column/GanttDateColumn
 */ /**
 * Base column class that displays dates. It uses gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat date format} as a default
 *
 * @extends Grid/column/DateColumn
 * @abstract
 */var GanttDateColumn=/*#__PURE__*/function(_DateColumn){_inherits2(GanttDateColumn,_DateColumn);function GanttDateColumn(){_classCallCheck2(this,GanttDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttDateColumn).apply(this,arguments));}_createClass2(GanttDateColumn,[{key:"construct",value:function construct(data,store){var me=this;me.gantt=store.grid;_get2(_getPrototypeOf2(GanttDateColumn.prototype),"construct",this).call(this,data,store);// If a format is specified, always stick to it
if(data.format){me.explicitFormat=true;}// Otherwise adapt to gantts format when it changes
else{me.gantt.on({displayDateFormatChange:function displayDateFormatChange(_ref353){var format=_ref353.format;if(!me.explicitFormat){me.set('format',format);}}});}}},{key:"format",set:function set(format){this.explicitFormat=true;this.set('format',format);},get:function get(){return this.explicitFormat&&this.data.format||this.gantt.displayDateFormat;}}],[{key:"defaults",get:function get(){return{instantUpdate:true,// We don't have a default, we defer to the owning gantt if no format in construct data
format:null};}}]);return GanttDateColumn;}(DateColumn);exports.GanttDateColumn=GanttDateColumn;GanttDateColumn._$name='GanttDateColumn';/**
 * @module Gantt/column/ConstraintDateColumn
 */ /**
 * A column showing the {@link Gantt.model.TaskModel#field-constraintDate date} of the constraint, applied to the task.
 * The type of the constraint can be displayed with the {@link Gantt/column/ConstraintTypeColumn ConstraintTypeColumn}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType constraintdate
 */var ConstraintDateColumn=/*#__PURE__*/function(_GanttDateColumn){_inherits2(ConstraintDateColumn,_GanttDateColumn);function ConstraintDateColumn(){_classCallCheck2(this,ConstraintDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConstraintDateColumn).apply(this,arguments));}_createClass2(ConstraintDateColumn,null,[{key:"type",get:function get(){return'constraintdate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'constraintDate',text:'Constraint Date',width:146};}}]);return ConstraintDateColumn;}(GanttDateColumn);exports.ConstraintDateColumn=ConstraintDateColumn;ColumnStore.registerColumnType(ConstraintDateColumn);ConstraintDateColumn._$name='ConstraintDateColumn';/**
 * @module Gantt/widget/ConstraintTypePicker
 */ /**
 * Combo box preconfigured with possible scheduling mode values. This picker doesn't support {@link Common/widget/Combo#config-multiSelect multiSelect}
 *
 * @extends Common/widget/Combo
 */var ConstraintTypePicker=/*#__PURE__*/function(_Combo2){_inherits2(ConstraintTypePicker,_Combo2);function ConstraintTypePicker(){_classCallCheck2(this,ConstraintTypePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConstraintTypePicker).apply(this,arguments));}_createClass2(ConstraintTypePicker,[{key:"updateLocalization",value:function updateLocalization(){_get2(_getPrototypeOf2(ConstraintTypePicker.prototype),"updateLocalization",this).call(this);// rebuild newly translated options
this.store.data=this.buildStoreData();}},{key:"buildStoreData",value:function buildStoreData(){return[{id:'muststarton',text:this.L('Must start on')},{id:'mustfinishon',text:this.L('Must finish on')},{id:'startnoearlierthan',text:this.L('Start no earlier than')},{id:'startnolaterthan',text:this.L('Start no later than')},{id:'finishnoearlierthan',text:this.L('Finish no earlier than')},{id:'finishnolaterthan',text:this.L('Finish no later than')}];}},{key:"store",get:function get(){if(!this._store){this.store=new Store({data:this.buildStoreData()});}return this._store;},set:function set(store){_set(_getPrototypeOf2(ConstraintTypePicker.prototype),"store",store,this,true);}}],[{key:"type",get:function get(){return'constrainttypepicker';}}]);return ConstraintTypePicker;}(Combo);exports.ConstraintTypePicker=ConstraintTypePicker;ConstraintTypePicker._$name='ConstraintTypePicker';BryntumWidgetAdapterRegister.register(ConstraintTypePicker.type,ConstraintTypePicker);/**
 * @module Gantt/column/ConstraintTypeColumn
 */ /**
 * {@link Gantt.model.TaskModel#field-constraintType Constraint type} column. The constraint can be one of:
 *
 * - Must start on [date]
 * - Must finish on [date]
 * - Start no earlier than [date]
 * - Start no later than [date]
 * - Finish no earlier than [date]
 * - Finish no later than [date]
 *
 * The date of the constraint can be specified with the {@link Gantt/column/ConstraintDateColumn ConstraintDateColumn}
 *
 * @extends Grid/column/Column
 * @classType constrainttype
 */var ConstraintTypeColumn=/*#__PURE__*/function(_Column13){_inherits2(ConstraintTypeColumn,_Column13);function ConstraintTypeColumn(){_classCallCheck2(this,ConstraintTypeColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConstraintTypeColumn).apply(this,arguments));}_createClass2(ConstraintTypeColumn,[{key:"afterConstruct",value:function afterConstruct(){var me=this;_get2(_getPrototypeOf2(ConstraintTypeColumn.prototype),"afterConstruct",this).call(this);me.grid.on({startCellEdit:me.onStartCellEdit,finishCellEdit:me.onDoneCellEdit,cancelCellEdit:me.onDoneCellEdit,thisObj:me});// we need to trigger the column refresh **after** the editor locale change
// to display properly translated constraint types
FunctionHelper.createSequence(me.editor.updateLocalization,me.onEditorLocaleChange,me);}},{key:"onStartCellEdit",value:function onStartCellEdit(_ref354){var _ref354$editorContext=_ref354.editorContext,editor=_ref354$editorContext.editor,record=_ref354$editorContext.record;if(editor.inputField instanceof ConstraintTypePicker){editor.inputField.store.filter(function(r){return record.run('isConstraintTypeApplicable',r.id);});this._filterDetacher=function(){return editor.inputField.store.clearFilters();};}}},{key:"onDoneCellEdit",value:function onDoneCellEdit(){this._filterDetacher&&this._filterDetacher();}},{key:"renderer",value:function renderer(_ref355){var value=_ref355.value;var model=this.editor.store.getById(value);return model&&model.text||'';}// Refreshes the column **after** the editor locale change
// to display properly translated constraint types
},{key:"onEditorLocaleChange",value:function onEditorLocaleChange(){this.grid.refreshColumn(this);}}],[{key:"type",get:function get(){return'constrainttype';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'constraintType',text:'Constraint Type',width:146,editor:{type:ConstraintTypePicker.type,clearable:true,allowInvalid:false}};}}]);return ConstraintTypeColumn;}(Column);exports.ConstraintTypeColumn=ConstraintTypeColumn;ColumnStore.registerColumnType(ConstraintTypeColumn);ConstraintTypeColumn._$name='ConstraintTypeColumn';/**
 * @module Gantt/column/DurationColumn
 */ /**
 * A column showing the task {@link Scheduler/model/TimeSpan#property-fullDuration duration}. The editor of this column understands the time units,
 * so user can enter "4d" indicating 4 days duration, or "4h" indicating 4 hours, etc.
 *
 * @extends Grid/column/NumberColumn
 * @classType duration
 */var DurationColumn=/*#__PURE__*/function(_NumberColumn2){_inherits2(DurationColumn,_NumberColumn2);function DurationColumn(){_classCallCheck2(this,DurationColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(DurationColumn).apply(this,arguments));}_createClass2(DurationColumn,[{key:"defaultRenderer",//endregion
value:function defaultRenderer(_ref356){var task=_ref356.record;var value=task[this.field],type=_typeof(value),durationValue=type==='number'?value:value&&value.magnitude;// in case of bad input (for instance NaN, undefined or NULL value)
if(typeof durationValue!=='number')return;switch(type){// We're using eg 'lag' or 'duration' which is the magnitude part
case'number':return this.round(durationValue)+' '+DateHelper.getLocalizedNameOfUnit(task[this.durationUnitField],value!==1);// We're using eg 'fullLag' or 'fullDuration' which is the two part encapsulated value
case'object':return this.round(durationValue)+' '+DateHelper.getLocalizedNameOfUnit(value.unit,value.magnitude!==1);}}},{key:"round",value:function round(value){var decimalPrecision=this.decimalPrecision;if(decimalPrecision===false){return value;}if(decimalPrecision==null){decimalPrecision=this.grid.durationDisplayPrecision||1;}// Prefer this way over toFixed() to not display "unused" decimal places
var multiplier=Math.pow(10,decimalPrecision);return Math.round(value*multiplier)/multiplier;}},{key:"canEdit",// Can only edit leafs
value:function canEdit(record){return record.isLeaf;}},{key:"durationUnitField",get:function get(){return"".concat(this.field,"Unit");}//region Config
},{key:"defaultEditor",get:function get(){return{type:'duration',name:this.field};}}],[{key:"type",get:function get(){return'duration';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"fields",get:function get(){return[/**
             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.
             * Specify a integer value to override that setting, or `false` to use raw value
             * @config {Number|Boolean} decimalPrecision
             */{name:'decimalPrecision',defaultValue:null}];}},{key:"defaults",get:function get(){return{field:'fullDuration',text:'Duration',min:0,step:1,instantUpdate:true};}}]);return DurationColumn;}(NumberColumn);exports.DurationColumn=DurationColumn;ColumnStore.registerColumnType(DurationColumn);DurationColumn._$name='DurationColumn';/**
 * @module Gantt/column/EarlyEndDateColumn
 */ /**
 * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyEndDate early end date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType earlyenddate
 */var EarlyEndDateColumn=/*#__PURE__*/function(_GanttDateColumn2){_inherits2(EarlyEndDateColumn,_GanttDateColumn2);function EarlyEndDateColumn(){_classCallCheck2(this,EarlyEndDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(EarlyEndDateColumn).apply(this,arguments));}_createClass2(EarlyEndDateColumn,[{key:"canEdit",// The column is not editable
value:function canEdit(record){return false;}}],[{key:"type",get:function get(){return'earlyenddate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'earlyEndDate',text:'Early End'};}}]);return EarlyEndDateColumn;}(GanttDateColumn);exports.EarlyEndDateColumn=EarlyEndDateColumn;ColumnStore.registerColumnType(EarlyEndDateColumn);EarlyEndDateColumn._$name='EarlyEndDateColumn';/**
 * @module Gantt/column/EarlyStartDateColumn
 */ /**
 * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyStartDate early start date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType earlystartdate
 */var EarlyStartDateColumn=/*#__PURE__*/function(_GanttDateColumn3){_inherits2(EarlyStartDateColumn,_GanttDateColumn3);function EarlyStartDateColumn(){_classCallCheck2(this,EarlyStartDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(EarlyStartDateColumn).apply(this,arguments));}_createClass2(EarlyStartDateColumn,[{key:"canEdit",// The column is not editable
value:function canEdit(record){return false;}}],[{key:"type",get:function get(){return'earlystartdate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'earlyStartDate',text:'Early Start'};}}]);return EarlyStartDateColumn;}(GanttDateColumn);exports.EarlyStartDateColumn=EarlyStartDateColumn;ColumnStore.registerColumnType(EarlyStartDateColumn);EarlyStartDateColumn._$name='EarlyStartDateColumn';/**
 * @module Gantt/field/EffortField
 */ // NOTE: class is created mostly for localization reasons
//       effort field invalidText might differ from duration field one.
/**
 * A specialized field allowing a user to also specify duration unit when editing the effort value.
 *
 * @extends Common/widget/DurationField
 * @classType effort
 */var EffortField=/*#__PURE__*/function(_DurationField){_inherits2(EffortField,_DurationField);function EffortField(){_classCallCheck2(this,EffortField);return _possibleConstructorReturn2(this,_getPrototypeOf2(EffortField).apply(this,arguments));}_createClass2(EffortField,null,[{key:"type",get:function get(){return'effort';}}]);return EffortField;}(DurationField);exports.EffortField=EffortField;EffortField._$name='EffortField';BryntumWidgetAdapterRegister.register(EffortField.type,EffortField);BryntumWidgetAdapterRegister.register("".concat(EffortField.type,"field"),EffortField);/**
 * @module Gantt/column/EffortColumn
 */ /**
 * A column showing the task {@link Gantt.model.TaskModel#field-effort effort} and {@link Gantt.model.TaskModel#field-effortUnit units}.
 * The editor of this column understands the time units, so user can enter "4d" indicating 4 days effort, or "4h" indicating 4 hours, etc.
 *
 * @extends Gantt/column/DurationColumn
 * @classType effort
 */var EffortColumn=/*#__PURE__*/function(_DurationColumn){_inherits2(EffortColumn,_DurationColumn);function EffortColumn(){_classCallCheck2(this,EffortColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(EffortColumn).apply(this,arguments));}_createClass2(EffortColumn,[{key:"canEdit",// Can only edit leafs
value:function canEdit(record){return record.isLeaf;}},{key:"defaultEditor",//endregion
get:function get(){return{type:EffortField.type,name:this.field};}}],[{key:"type",get:function get(){return'effort';}//region Config
},{key:"defaults",get:function get(){return{field:'fullEffort',text:'Effort'};}}]);return EffortColumn;}(DurationColumn);exports.EffortColumn=EffortColumn;ColumnStore.registerColumnType(EffortColumn);EffortColumn._$name='EffortColumn';/**
 * @module Gantt/column/ShowInTimelineColumn
 */ /**
 * Column that shows if a task should be shown in the {@link Gantt.widget.Timeline Timeline} widget
 *
 * @extends Grid/column/CheckColumn
 * @classType milestone
 */var ShowInTimelineColumn=/*#__PURE__*/function(_CheckColumn){_inherits2(ShowInTimelineColumn,_CheckColumn);function ShowInTimelineColumn(){_classCallCheck2(this,ShowInTimelineColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ShowInTimelineColumn).apply(this,arguments));}_createClass2(ShowInTimelineColumn,null,[{key:"type",get:function get(){return'showintimeline';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'showInTimeline',text:'Show in timeline'};}}]);return ShowInTimelineColumn;}(CheckColumn);exports.ShowInTimelineColumn=ShowInTimelineColumn;ColumnStore.registerColumnType(ShowInTimelineColumn);ShowInTimelineColumn._$name='ShowInTimelineColumn';/**
 * @module Gantt/column/EndDateColumn
 */ /**
 * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-endDate end date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType enddate
 */var EndDateColumn=/*#__PURE__*/function(_GanttDateColumn4){_inherits2(EndDateColumn,_GanttDateColumn4);function EndDateColumn(){_classCallCheck2(this,EndDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(EndDateColumn).apply(this,arguments));}_createClass2(EndDateColumn,[{key:"canEdit",// Can only edit leafs
value:function canEdit(record){return record.isLeaf;}}],[{key:"type",get:function get(){return'enddate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'endDate',text:'Finish'};}}]);return EndDateColumn;}(GanttDateColumn);exports.EndDateColumn=EndDateColumn;ColumnStore.registerColumnType(EndDateColumn);EndDateColumn._$name='EndDateColumn';/**
 * @module Gantt/column/LateEndDateColumn
 */ /**
 * A column that displays the task's {@link Gantt.model.TaskModel#field-lateEndDate late end date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType lateenddate
 */var LateEndDateColumn=/*#__PURE__*/function(_GanttDateColumn5){_inherits2(LateEndDateColumn,_GanttDateColumn5);function LateEndDateColumn(){_classCallCheck2(this,LateEndDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(LateEndDateColumn).apply(this,arguments));}_createClass2(LateEndDateColumn,[{key:"canEdit",// The column is not editable
value:function canEdit(record){return false;}}],[{key:"type",get:function get(){return'lateenddate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'lateEndDate',text:'Late End'};}}]);return LateEndDateColumn;}(GanttDateColumn);exports.LateEndDateColumn=LateEndDateColumn;ColumnStore.registerColumnType(LateEndDateColumn);LateEndDateColumn._$name='LateEndDateColumn';/**
 * @module Gantt/column/LateStartDateColumn
 */ /**
 * A column that displays the task's {@link Gantt.model.TaskModel#field-lateStartDate late start date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType latestartdate
 */var LateStartDateColumn=/*#__PURE__*/function(_GanttDateColumn6){_inherits2(LateStartDateColumn,_GanttDateColumn6);function LateStartDateColumn(){_classCallCheck2(this,LateStartDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(LateStartDateColumn).apply(this,arguments));}_createClass2(LateStartDateColumn,[{key:"canEdit",// The column is not editable
value:function canEdit(record){return false;}}],[{key:"type",get:function get(){return'latestartdate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'lateStartDate',text:'Late Start'};}}]);return LateStartDateColumn;}(GanttDateColumn);exports.LateStartDateColumn=LateStartDateColumn;ColumnStore.registerColumnType(LateStartDateColumn);LateStartDateColumn._$name='LateStartDateColumn';/**
 * A column that displays (and allows user to update) the task's
 * {@link Gantt.model.TaskModel#field-manuallyScheduled manuallyScheduled} field.
 *
 * @extends Grid/column/CheckColumn
 * @classType manuallyscheduled
 */var ManuallyScheduledColumn=/*#__PURE__*/function(_CheckColumn2){_inherits2(ManuallyScheduledColumn,_CheckColumn2);function ManuallyScheduledColumn(){_classCallCheck2(this,ManuallyScheduledColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ManuallyScheduledColumn).apply(this,arguments));}_createClass2(ManuallyScheduledColumn,null,[{key:"type",get:function get(){return'manuallyscheduled';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'manuallyScheduled',text:'Manually scheduled'};}}]);return ManuallyScheduledColumn;}(CheckColumn);exports.ManuallyScheduledColumn=ManuallyScheduledColumn;ColumnStore.registerColumnType(ManuallyScheduledColumn);ManuallyScheduledColumn._$name='ManuallyScheduledColumn';/**
 * @module Gantt/column/MilestoneColumn
 */ /**
 * Column that indicates whether the task is a milestone. This column is not editable.
 *
 * @extends Grid/column/CheckColumn
 * @classType milestone
 */var MilestoneColumn=/*#__PURE__*/function(_CheckColumn3){_inherits2(MilestoneColumn,_CheckColumn3);function MilestoneColumn(){_classCallCheck2(this,MilestoneColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(MilestoneColumn).apply(this,arguments));}_createClass2(MilestoneColumn,null,[{key:"type",get:function get(){return'milestone';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'milestone',text:'Milestone'};}}]);return MilestoneColumn;}(CheckColumn);exports.MilestoneColumn=MilestoneColumn;ColumnStore.registerColumnType(MilestoneColumn);MilestoneColumn._$name='MilestoneColumn';/**
 * @module Gantt/column/NameColumn
 */ /**
 * A tree column showing (and allowing user to edit) the task's {@link Gantt.model.TaskModel#field-name name} field.
 *
 * @extends Grid/column/TreeColumn
 * @classType name
 */var NameColumn=/*#__PURE__*/function(_TreeColumn){_inherits2(NameColumn,_TreeColumn);function NameColumn(){_classCallCheck2(this,NameColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(NameColumn).apply(this,arguments));}_createClass2(NameColumn,null,[{key:"type",get:function get(){return'name';}},{key:"isGanttColumn",get:function get(){return true;}//region Config
},{key:"defaults",get:function get(){return{htmlEncode:false,width:200,field:'name',text:'Name'};}//endregion
}]);return NameColumn;}(TreeColumn);exports.NameColumn=NameColumn;ColumnStore.registerColumnType(NameColumn);NameColumn._$name='NameColumn';/**
 * @module Gantt/column/NoteColumn
 */ /**
 * A column which displays a task's {@link Gantt.model.TaskModel#field-note note} field.
 *
 * @extends Grid/column/Column
 * @classType note
 */var NoteColumn=/*#__PURE__*/function(_Column14){_inherits2(NoteColumn,_Column14);function NoteColumn(){_classCallCheck2(this,NoteColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(NoteColumn).apply(this,arguments));}_createClass2(NoteColumn,[{key:"renderer",value:function renderer(_ref357){var value=_ref357.value;if(value){return value.trim();}}},{key:"disableHtmlEncode",get:function get(){return true;}}],[{key:"type",get:function get(){return'note';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'note',text:'Note',width:150,editor:{type:'textareafield',inline:false}};}}]);return NoteColumn;}(Column);exports.NoteColumn=NoteColumn;ColumnStore.registerColumnType(NoteColumn);NoteColumn._$name='NoteColumn';/**
 * @module Gantt/column/PercentDoneColumn
 */ /**
 * A column representing the {@link Gantt.model.TaskModel#field-percentDone percentDone} field of the task
 *
 * @extends Grid/column/NumberColumn
 * @classType percentdone
 */var PercentDoneColumn=/*#__PURE__*/function(_NumberColumn3){_inherits2(PercentDoneColumn,_NumberColumn3);function PercentDoneColumn(){_classCallCheck2(this,PercentDoneColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(PercentDoneColumn).apply(this,arguments));}_createClass2(PercentDoneColumn,[{key:"construct",//endregion
value:function construct(config){_get2(_getPrototypeOf2(PercentDoneColumn.prototype),"construct",this).apply(this,arguments);if(this.showCircle){this.htmlEncode=false;}}},{key:"defaultRenderer",value:function defaultRenderer(context){if(this.showCircle){var roundedValue=Math.round(context.record.renderedPercentDone),size=this.grid.rowHeight*0.8;return"<div class=\"b-percentdone-circle\" style=\"animation-delay: -".concat(roundedValue-0.1,"s;width: ").concat(size,"px;height: ").concat(size,"px\" data-value=\"").concat(roundedValue,"\"></div>");}return context.record.renderedPercentDone+this.unit;}// Can only edit leafs
},{key:"canEdit",value:function canEdit(record){return record.isLeaf;}}],[{key:"type",get:function get(){return'percentdone';}},{key:"isGanttColumn",get:function get(){return true;}//region Config
},{key:"fields",get:function get(){return[/**
             * Set to `true` to render a circular progress bar to visualize the task progress
             * @config {Boolean}
             * @category Common
             */'showCircle'];}},{key:"defaults",get:function get(){return{field:'percentDone',text:'% Done',unit:'%',step:1,min:0,max:100,width:90};}}]);return PercentDoneColumn;}(NumberColumn);exports.PercentDoneColumn=PercentDoneColumn;ColumnStore.registerColumnType(PercentDoneColumn);PercentDoneColumn._$name='PercentDoneColumn';/**
 * @module Gantt/widget/DependencyField
 */ // Enables toggling of link type for each side
var toggleTypes={from:[2,3,0,1],to:[1,0,3,2]};// For parsing dependency strings and converting string to type.
// dependencyTypes may be localized in the Gantt class domain
// in which case the Regex is generated from the four local values.
var dependencyTypes=['SS','SF','FS','FF'],buildDependencySuffixRe=function buildDependencySuffixRe(){return new RegExp("(".concat(dependencyTypes.join('|'),")?((?:[+-])\\d+[a-z]*)?"),'i');},dependencySuffixRe=buildDependencySuffixRe();// Update when changing locale
LocaleManagerSingelton.on({locale:function locale(_ref358){var _locale2=_ref358.locale;dependencyTypes=_locale2.GanttCommon.dependencyTypes;dependencySuffixRe=buildDependencySuffixRe();}});/**
 * Chooses dependencies, connector sides and lag time for dependencies of a Task.
 *
 * The contextual task is the `record` property of this field's {@link Common/widget/Widget#property-owner}
 *
 * @extends Common/widget/Combo
 *
 * @classType predecessor
 */var DependencyField=/*#__PURE__*/function(_Combo3){_inherits2(DependencyField,_Combo3);function DependencyField(){_classCallCheck2(this,DependencyField);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyField).apply(this,arguments));}_createClass2(DependencyField,[{key:"construct",//endregion
value:function construct(config){var me=this,ourSide=config.ourSide,otherSide=config.otherSide;me.dependencies=new Collection({extraKeys:otherSide});me.startCollection=new Collection({extraKeys:otherSide});_get2(_getPrototypeOf2(DependencyField.prototype),"construct",this).call(this,config);me.delimiterRegEx=new RegExp("\\s*".concat(me.delimiter,"\\s*"));// Update when changing locale
LocaleManagerSingelton.on({locale:function locale(){me.syncInputFieldValue();},thisObj:me});}},{key:"internalOnInput",value:function internalOnInput(){// Avoid combo filtering. That's done from our FilterField
if(this.isValid){this.clearError();TextField.prototype.internalOnInput.call(this);}else{this.setError('Invalid dependency format');}}},{key:"onInternalKeyDown",value:function onInternalKeyDown(keyEvent){var key=keyEvent.key;// Don't pass Enter down, that selects when ComboBox passes it down
// to its list. We want default action on Enter.
// Our list has its own, built in filter field which provides key events.
if(key!=='Enter'){_get2(_getPrototypeOf2(DependencyField.prototype),"onInternalKeyDown",this).call(this,keyEvent);}if(this.pickerVisible&&key==='ArrowDown'){this.filterField.focus();}}},{key:"onTriggerClick",value:function onTriggerClick(){if(this.pickerVisible){_get2(_getPrototypeOf2(DependencyField.prototype),"onTriggerClick",this).call(this);}else{this.doFilter(this.filterInput?this.filterInput.value:null);}}},{key:"createPicker",value:function createPicker(){var me=this,myInput=me.input,filterField=me.filterField=new TextField({owner:me,clearable:true,placeholder:'Filter',triggers:{filter:{cls:'b-icon b-icon-filter',align:'start'}},listeners:{input:function input(_ref359){var value=_ref359.value;me.input=filterFieldInput;me.filterList(value);me.input=myInput;},clear:function clear(){me.input=filterFieldInput;me.filterList();me.input=myInput;}},// Stick to top of List.
style:'position:sticky;top:0;z-index:1'}),filterFieldInput=me.filterInput=filterField.input,result=new List({owner:me,floating:true,scrollAction:'realign',itemsFocusable:false,activateOnMouseover:true,store:me.store,cls:me.listCls,itemTpl:me.listItemTpl,forElement:me[me.pickerAlignElement],align:{align:'t0-b0',axisLock:true,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]},navigator:{keyEventTarget:filterFieldInput,processEvent:function processEvent(e){if(e.key==='Escape'){me.hidePicker();}else{return e;}}},onItem:me.onPredecesssorClick,maxHeight:324,minHeight:161,scrollable:{overflowY:true},autoShow:false,focusOnHover:false,getItemClasses:function getItemClasses(task){var result=List.prototype.getItemClasses.call(this,task),dependency=me.dependencies.getBy(me.otherSide+'Event',task),cls=dependency?" b-selected b-".concat(dependency.getConnectorString(1).toLowerCase()):'';return result+cls;}});filterField.render(result.contentElement);return result;}},{key:"showPicker",value:function showPicker(focusPicker){// Ensure this field's Task is filtered out.
// See our set store which owns the chainedFilterFn.
this.store.fillFromMaster();_get2(_getPrototypeOf2(DependencyField.prototype),"showPicker",this).call(this,focusPicker);}},{key:"onPickerShow",value:function onPickerShow(_ref360){var picker=_ref360.source;var me=this,filterField=me.filterField,ourInput=me.input;picker.minWidth=me[me.pickerAlignElement].offsetWidth;picker.contentElement.insertBefore(filterField.element,picker.contentElement.firstChild);// Combo superclass focuses this.input upon picker show.
// This must focus the filter field, not the predecessor text.
me.input=me.filterInput;_get2(_getPrototypeOf2(DependencyField.prototype),"onPickerShow",this).call(this);me.input=ourInput;}},{key:"listItemTpl",value:function listItemTpl(task){return"<div class=\"b-predecessor-item-text\">".concat(task.name,"</div>\n            <div class=\"b-sch-box b-from\" data-side=\"from\"></div>\n            <div class=\"b-sch-box b-to\" data-side=\"to\"></div>");}},{key:"onPredecesssorClick",value:function onPredecesssorClick(_ref361){var list=_ref361.source,item=_ref361.item,task=_ref361.record,index=_ref361.index,event=_ref361.event;var me=this.owner,dependencies=me.dependencies,box=event.target.closest('.b-sch-box'),side=box&&box.dataset.side;var predecessor=dependencies.getBy(me.otherSide+'Event',task);// Prevent regular selection continuing after this click handler.
item.dataset.noselect=true;// Click text to remove predecessor completely
if(predecessor&&!box){dependencies.remove(predecessor);}else{// Clicking a connect side box toggles that
if(predecessor){// We must create a clone because the record is "live".
// Updates to it go back to the UI.
predecessor=predecessor.copy(predecessor.id);predecessor.type=toggleTypes[side][predecessor.type];// Replace the old predecessor link with the new, modified one.
// Collection will *replace* in-place due to ID matching.
dependencies.add(predecessor);}// Create a new dependency to/from the clicked task
else{var _me$dependencyStore$c;dependencies.add(me.dependencyStore.createRecord((_me$dependencyStore$c={},_defineProperty(_me$dependencyStore$c,"".concat(me.otherSide,"Event"),task),_defineProperty(_me$dependencyStore$c,"".concat(me.ourSide,"Event"),me.owner.record),_me$dependencyStore$c),true));}}me.syncInputFieldValue();list.refresh();}},{key:"syncInputFieldValue",value:function syncInputFieldValue(){this.input.value=this.constructor.predecessorsToString(this.dependencies.values,this.otherSide,this.delimiter);}},{key:"parseDependencies",value:function parseDependencies(value){var me=this,grid=me.grid,task=me.owner.record,taskStore=me.store,dependencyStore=me.dependencyStore,dependencies=value.split(me.delimiterRegEx),DependencyModel=dependencyStore.modelClass,result=[];for(var _i34=0;_i34<dependencies.length;_i34++){var predecessorText=dependencies[_i34];if(predecessorText){var _dependency;var idLen=predecessorText.length+1,predecessorId=void 0,predecessor=void 0,remainder=void 0,dependency=void 0;for(;idLen&&!predecessor;idLen--){predecessorId=predecessorText.substr(0,idLen);predecessor=taskStore.getById(predecessorId);}if(!predecessor){return null;}// Chop off connector and lag specification, ie the "SS-1h" part
remainder=predecessorText.substr(idLen+1);// Start the structure of the dependency we are describing
dependency=(_dependency={},_defineProperty(_dependency,"".concat(me.otherSide,"Event"),predecessor),_defineProperty(_dependency,"".concat(me.ourSide,"Event"),task),_defineProperty(_dependency,"type",DependencyModel.Type.EndToStart),_dependency);// There's a trailing edge/lag spec
if(remainder.length){var edgeAndLag=dependencySuffixRe.exec(remainder);if(edgeAndLag&&(edgeAndLag[1]||edgeAndLag[2])){// The SS/FF bit
if(edgeAndLag[1]){dependency.type=dependencyTypes.indexOf(edgeAndLag[1].toUpperCase());}// The -1h bit
if(edgeAndLag[2]){var parsedLag=DateHelper.parseDuration(edgeAndLag[2],true,grid.timeAxis.unit);dependency.lag=parsedLag.magnitude;dependency.lagUnit=parsedLag.unit;}}else{return null;}}result.push(dependency);}}return result;}},{key:"store",set:function set(store){var me=this;// Filter the store to hide the field's Task
store=store.makeChained(function(r){return!me.owner||!me.owner.record||r.id!==me.owner.record.id;});// Gantt TaskStores are TreeStores. We need to flatten.
store.tree=false;_set(_getPrototypeOf2(DependencyField.prototype),"store",store,this,true);},get:function get(){return _get2(_getPrototypeOf2(DependencyField.prototype),"store",this);}},{key:"picker",get:function get(){return this._picker||(this._picker=this.createPicker());}},{key:"isValid",get:function get(){return Boolean(!this.owner||this.parseDependencies(this.input.value));}},{key:"value",set:function set(dependencies){var me=this,predecessorsCollection=me.dependencies,startCollection=me.startCollection;// Convert strings, eg: '1fs-2h;2ss+1d' to Dependency records
if(typeof dependencies==='string'){me.input.value=dependencies;dependencies=me.parseDependencies(dependencies);if(!dependencies){me.updateInvalid();return;}for(var _i35=0;_i35<dependencies.length;_i35++){// Create a new one.
// See if we always had a dependency pointing to the "other" task.
var newPredecessor=new me.dependencyStore.modelClass(dependencies[_i35]),existingPredecessor=startCollection.getBy(me.otherSide,newPredecessor.fromEvent);if(existingPredecessor){// We must create a clone because the record is "live".
// Updates to it go back to the UI.
existingPredecessor=existingPredecessor.copy(existingPredecessor.id);existingPredecessor.type=newPredecessor.type;existingPredecessor.fullLag=newPredecessor.fullLag;}// Use the existing one if there is an exact match
dependencies[_i35]=existingPredecessor||newPredecessor;}}else{me.startCollection.clear();me.startCollection.values=dependencies;}// Clear and then set the collection value to impose order.
predecessorsCollection.clear();predecessorsCollection.values=dependencies;// If there has been a change, update the textual value.
if(!me.inputting){me.syncInputFieldValue();}},get:function get(){return this.dependencies.values;}}],[{key:"predecessorsToString",value:function predecessorsToString(dependencies,otherSide){var delimiter=arguments.length>2&&arguments[2]!==undefined?arguments[2]:';';var result=[];if(dependencies&&dependencies.length){var _iteratorNormalCompletion56=true;var _didIteratorError56=false;var _iteratorError56=undefined;try{for(var _iterator56=dependencies[Symbol.iterator](),_step56;!(_iteratorNormalCompletion56=(_step56=_iterator56.next()).done);_iteratorNormalCompletion56=true){var dependency=_step56.value;var otherSideEvent=dependency[otherSide+'Event'],otherSideEventId=otherSideEvent?otherSideEvent.id:otherSideEvent||'';result.push("".concat(otherSideEventId).concat(dependency.getConnectorString()).concat(dependency.getLag()));}}catch(err){_didIteratorError56=true;_iteratorError56=err;}finally{try{if(!_iteratorNormalCompletion56&&_iterator56.return!=null){_iterator56.return();}}finally{if(_didIteratorError56){throw _iteratorError56;}}}}return result.join(delimiter);}},{key:"defaultConfig",//region Config
get:function get(){return{listCls:'b-predecessor-list',valueField:'name',displayField:'name',/**
             * Delimiter between dependency ids in the field
             * @config {String}
             * @default
             */delimiter:';',/**
             * The other task's relationship with this field's contextual task.
             * This will be `'from'` if we are editing predecessors, and `'to'` if
             * we are editing successors.
             * @config {String}
             */otherSide:null,/**
             * This field's contextual task's relationship with the other task.
             * This will be `'to'` if we are editing predecessors, and `'from'` if
             * we are editing successors.
             * @config {String}
             */ourSide:null};}}]);return DependencyField;}(Combo);exports.DependencyField=DependencyField;DependencyField._$name='DependencyField';BryntumWidgetAdapterRegister.register('dependencyfield',DependencyField);/**
 * @module Gantt/column/DependencyColumn
 */ /**
 * A column which displays, in textual form, the dependencies which either link to the
 * contextual task from other, preceding tasks, or dependencies which link the
 * contextual task to successor tasks.
 *
 * The {@link Grid/column/Column#config-field} MUST be either `predecessors` or `successors` in order
 * for this column to know what kind of dependency it is showing.
 *
 * @classType dependency
 * @extends Grid/column/Column
 * @typings Scheduler/column/DependencyColumn -> Scheduler/column/SchedulerDependencyColumn
 */var DependencyColumn=/*#__PURE__*/function(_Delayable18){_inherits2(DependencyColumn,_Delayable18);function DependencyColumn(){_classCallCheck2(this,DependencyColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyColumn).apply(this,arguments));}_createClass2(DependencyColumn,[{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(DependencyColumn.prototype),"afterConstruct",this).call(this);this.grid.on({cancelcelleditasync:'onGridCancelCellEditAsync',thisObj:this});}},{key:"onGridCancelCellEditAsync",value:function onGridCancelCellEditAsync(_ref362){var editorContext=_ref362.editorContext;if(this===editorContext.column){WidgetHelper.toast(this.L('Invalid dependency found, change is reverted'));}}},{key:"defaultEditor",get:function get(){var me=this,isPredecessor=me.field==='predecessors';return{type:'dependencyfield',grid:me.grid,name:me.field,delimiter:me.delimiter,ourSide:isPredecessor?'to':'from',otherSide:isPredecessor?'from':'to',store:me.grid.eventStore||me.grid.taskStore,dependencyStore:me.grid.features.dependencies.store};}}],[{key:"type",get:function get(){return'dependency';}},{key:"fields",get:function get(){return[/**
             * Delimiter used for displayed value and editor
             * @config {String} delimiter
             */{name:'delimiter',defaultValue:';'}];}},{key:"defaults",get:function get(){return{htmlEncode:false,width:120,renderer:function renderer(_ref363){var record=_ref363.record;return DependencyField.predecessorsToString(record[this.field],this.field==='predecessors'?'from':'to',this.delimiter);}};}}]);return DependencyColumn;}(Delayable(Column));exports.DependencyColumn=DependencyColumn;ColumnStore.registerColumnType(DependencyColumn);DependencyColumn._$name='DependencyColumn';/**
 * @module Gantt/column/PredecessorColumn
 */ /**
 * A column which displays, in textual form, the dependencies which link from tasks
 * upon which the contextual task depends.
 *
 * This type of column is editable by default.
 *
 * @classType predecessor
 * @extends Gantt/column/DependencyColumn
 */var PredecessorColumn=/*#__PURE__*/function(_DependencyColumn){_inherits2(PredecessorColumn,_DependencyColumn);function PredecessorColumn(){_classCallCheck2(this,PredecessorColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(PredecessorColumn).apply(this,arguments));}_createClass2(PredecessorColumn,null,[{key:"type",get:function get(){return'predecessor';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{text:'Predecessors',field:'predecessors'};}}]);return PredecessorColumn;}(DependencyColumn);exports.PredecessorColumn=PredecessorColumn;ColumnStore.registerColumnType(PredecessorColumn);PredecessorColumn._$name='PredecessorColumn';//---------------------------------------------------------------------------------------------------------------------
/*

    One should use Base as a base class, instead of Object
    this is because, when compiled to ES3 (which we use for NodeJS / IE11 compatibility), Object is called as a
    super constructor and returned value from it is used as an instance object
    that instance object will be missing prototype inheritance

    the contract is, that native JS constructor for the class is side-effect free
    all the effects may happen in the `initialize` method below
    for the instantiation with initialization one should use static `new` method
    the motivation for such design is that only in this case the attribute initializers, like

         class {
             some      : string   = "string"
         }
    works correctly
*/var Base$1=/*#__PURE__*/function(){function Base$1(){_classCallCheck2(this,Base$1);}_createClass2(Base$1,[{key:"initialize",value:function initialize(props){props&&Object.assign(this,props);}}],[{key:"new",value:function _new(props){var instance=new this();instance.initialize(props);return instance;}}]);return Base$1;}();//---------------------------------------------------------------------------------------------------------------------
var EffectResolutionResult;exports.EffectResolutionResult=EffectResolutionResult;(function(EffectResolutionResult){EffectResolutionResult[EffectResolutionResult["Cancel"]=0]="Cancel";EffectResolutionResult[EffectResolutionResult["Restart"]=1]="Restart";EffectResolutionResult[EffectResolutionResult["Resume"]=2]="Resume";})(EffectResolutionResult||(exports.EffectResolutionResult=EffectResolutionResult={}));//---------------------------------------------------------------------------------------------------------------------
var Effect=/*#__PURE__*/function(_Base$){_inherits2(Effect,_Base$);function Effect(){_classCallCheck2(this,Effect);return _possibleConstructorReturn2(this,_getPrototypeOf2(Effect).apply(this,arguments));}return Effect;}(Base$1);//---------------------------------------------------------------------------------------------------------------------
var CancelPropagationEffect=/*#__PURE__*/function(_Effect){_inherits2(CancelPropagationEffect,_Effect);function CancelPropagationEffect(){_classCallCheck2(this,CancelPropagationEffect);return _possibleConstructorReturn2(this,_getPrototypeOf2(CancelPropagationEffect).apply(this,arguments));}return CancelPropagationEffect;}(Effect);//---------------------------------------------------------------------------------------------------------------------
var RestartPropagationEffect=/*#__PURE__*/function(_Effect2){_inherits2(RestartPropagationEffect,_Effect2);function RestartPropagationEffect(){_classCallCheck2(this,RestartPropagationEffect);return _possibleConstructorReturn2(this,_getPrototypeOf2(RestartPropagationEffect).apply(this,arguments));}return RestartPropagationEffect;}(Effect);//---------------------------------------------------------------------------------------------------------------------
var GraphCycleDetectedEffect=/*#__PURE__*/function(_Effect3){_inherits2(GraphCycleDetectedEffect,_Effect3);function GraphCycleDetectedEffect(){_classCallCheck2(this,GraphCycleDetectedEffect);return _possibleConstructorReturn2(this,_getPrototypeOf2(GraphCycleDetectedEffect).apply(this,arguments));}return GraphCycleDetectedEffect;}(Effect);var OnCycleAction;(function(OnCycleAction){OnCycleAction[OnCycleAction["Cancel"]=0]="Cancel";OnCycleAction[OnCycleAction["Resume"]=1]="Resume";})(OnCycleAction||(OnCycleAction={}));//---------------------------------------------------------------------------------------------------------------------
var WalkContext=/*#__PURE__*/function(_Base$2){_inherits2(WalkContext,_Base$2);function WalkContext(){_classCallCheck2(this,WalkContext);return _possibleConstructorReturn2(this,_getPrototypeOf2(WalkContext).apply(this,arguments));}_createClass2(WalkContext,[{key:"onNode",// onNode                  : (node : Walkable) => any
// onTopologicalNode       : (node : Walkable) => any
// onCycle                 : (node : Walkable) => any
value:function onNode(node){}},{key:"onTopologicalNode",value:function onTopologicalNode(node){}},{key:"onCycle",value:function onCycle(node,stack){return OnCycleAction.Cancel;}}]);return WalkContext;}(Base$1);//---------------------------------------------------------------------------------------------------------------------
var Walkable=function Walkable(base){return(/*#__PURE__*/function(_base){_inherits2(Walkable,_base);function Walkable(){_classCallCheck2(this,Walkable);return _possibleConstructorReturn2(this,_getPrototypeOf2(Walkable).apply(this,arguments));}_createClass2(Walkable,[{key:"walkDepth",/**
        POSSIBLE OPTIMIZATION (need to benchmark)
        instead of the separate map for visited data

          const visitedAt             = new Map<this, number>()

        store the number in the node itself (as non-enumerable symbol property)
    */value:function walkDepth(context){// POSSIBLE OPTIMIZATION - have a single `visitedAt` map as Map<this, [ number, boolean ]> to
// store the "visitedTopologically" flag
var visitedAt=new Map();var visitedTopologically=new Set();var toVisit=[{node:this,from:this}];var depth;var _loop6=function _loop6(){var node=toVisit[depth-1].node;if(visitedTopologically.has(node)){toVisit.pop();return"continue";}var visitedAtDepth=visitedAt.get(node);// node has been already visited
if(visitedAtDepth!=null){// it is valid to find itself in the visited map, but only if visited at the current depth
// (which indicates stack unwinding)
// if the node has been visited at earlier depth - its a cycle
if(visitedAtDepth<depth){if(context.onCycle(node,toVisit)!==OnCycleAction.Resume)return"break";}else{visitedTopologically.add(node);// we've processed all outgoing edges from this node,
// now we can add it to topologically sorted results (if needed)
context.onTopologicalNode(node);}toVisit.pop();}else{visitedAt.set(node,depth);context.onNode(node);var lengthBefore=toVisit.length;context.forEachNext(node,function(nextNode){return toVisit.push({node:nextNode,from:node});});// no new nodes added
if(toVisit.length===lengthBefore){visitedTopologically.add(node);// if there's no outgoing edges, node is at topological position
context.onTopologicalNode(node);toVisit.pop();}}};_loop5:while(depth=toVisit.length){var _ret2=_loop6();switch(_ret2){case"continue":continue;case"break":break _loop5;}}}}]);return Walkable;}(base));};var cycleInfo=function cycleInfo(stack){var cycleSource=stack[stack.length-1].node;var cycle=[cycleSource];var pos=stack.length-1;var anotherNodePos=stack.length-1;do{// going backward in steps, skipping the nodes with identical `from`
for(;pos>=0&&stack[pos].from===stack[anotherNodePos].from;pos--){;}if(pos>=0){// the first node with different `from` will be part of the cycle path
cycle.push(stack[pos].node);anotherNodePos=pos;pos--;}}while(pos>=0&&stack[pos].node!==cycleSource);cycle.push(cycleSource);return cycle.reverse();};//---------------------------------------------------------------------------------------------------------------------
var WalkForwardContext=/*#__PURE__*/function(_WalkContext){_inherits2(WalkForwardContext,_WalkContext);function WalkForwardContext(){_classCallCheck2(this,WalkForwardContext);return _possibleConstructorReturn2(this,_getPrototypeOf2(WalkForwardContext).apply(this,arguments));}_createClass2(WalkForwardContext,[{key:"forEachNext",value:function forEachNext(node,func){node.forEachOutgoing(this,func);}}]);return WalkForwardContext;}(WalkContext);//---------------------------------------------------------------------------------------------------------------------
var WalkableForward=function WalkableForward(base){var WalkableForward=/*#__PURE__*/function(_base2){_inherits2(WalkableForward,_base2);function WalkableForward(){_classCallCheck2(this,WalkableForward);return _possibleConstructorReturn2(this,_getPrototypeOf2(WalkableForward).apply(this,arguments));}_createClass2(WalkableForward,[{key:"forEachOutgoing",value:function forEachOutgoing(context,func){this.getOutgoing(context).forEach(func);}}]);return WalkableForward;}(base);return WalkableForward;};//---------------------------------------------------------------------------------------------------------------------
var WalkableBackward=function WalkableBackward(base){var WalkableBackward=/*#__PURE__*/function(_base3){_inherits2(WalkableBackward,_base3);function WalkableBackward(){_classCallCheck2(this,WalkableBackward);return _possibleConstructorReturn2(this,_getPrototypeOf2(WalkableBackward).apply(this,arguments));}_createClass2(WalkableBackward,[{key:"forEachIncoming",value:function forEachIncoming(context,func){this.getIncoming(context).forEach(func);}}]);return WalkableBackward;}(base);return WalkableBackward;};//---------------------------------------------------------------------------------------------------------------------
var WalkableForwardNode=function WalkableForwardNode(base){return(/*#__PURE__*/function(_base4){_inherits2(WalkableForwardNode,_base4);function WalkableForwardNode(){var _this92;_classCallCheck2(this,WalkableForwardNode);_this92=_possibleConstructorReturn2(this,_getPrototypeOf2(WalkableForwardNode).apply(this,arguments));_this92.outgoing=new Set();return _this92;}_createClass2(WalkableForwardNode,[{key:"hasEdgeTo",value:function hasEdgeTo(toNode){return this.outgoing.has(toNode);}},{key:"addEdgeTo",value:function addEdgeTo(toNode){this.outgoing.add(toNode);}},{key:"removeEdgeTo",value:function removeEdgeTo(toNode){this.outgoing.delete(toNode);}},{key:"addEdgesTo",value:function addEdgesTo(toNodes){var _this93=this;toNodes.forEach(function(toNode){return _this93.addEdgeTo(toNode);});}},{key:"getOutgoing",value:function getOutgoing(context){return Array.from(this.outgoing);}},{key:"forEachOutgoing",value:function forEachOutgoing(context,func){this.outgoing.forEach(func);}}]);return WalkableForwardNode;}(base));};//---------------------------------------------------------------------------------------------------------------------
var WalkableBackwardNode=function WalkableBackwardNode(base){return(/*#__PURE__*/function(_base5){_inherits2(WalkableBackwardNode,_base5);function WalkableBackwardNode(){var _this94;_classCallCheck2(this,WalkableBackwardNode);_this94=_possibleConstructorReturn2(this,_getPrototypeOf2(WalkableBackwardNode).apply(this,arguments));_this94.incoming=new Set();return _this94;}_createClass2(WalkableBackwardNode,[{key:"hasEdgeFrom",value:function hasEdgeFrom(fromNode){return this.incoming.has(fromNode);}},{key:"addEdgeFrom",value:function addEdgeFrom(fromNode){this.incoming.add(fromNode);}},{key:"removeEdgeFrom",value:function removeEdgeFrom(fromNode){this.incoming.delete(fromNode);}},{key:"addEdgesFrom",value:function addEdgesFrom(fromNodes){var _this95=this;fromNodes.forEach(function(fromNode){return _this95.addEdgeFrom(fromNode);});}},{key:"getIncoming",value:function getIncoming(context){return Array.from(this.incoming);}},{key:"forEachIncoming",value:function forEachIncoming(context,func){this.incoming.forEach(func);}}]);return WalkableBackwardNode;}(base));};//---------------------------------------------------------------------------------------------------------------------
var Node$1=function Node$1(base){return(/*#__PURE__*/function(_base6){_inherits2(Node,_base6);function Node(){_classCallCheck2(this,Node);return _possibleConstructorReturn2(this,_getPrototypeOf2(Node).apply(this,arguments));}_createClass2(Node,[{key:"addEdgeTo",value:function addEdgeTo(toNode){_get2(_getPrototypeOf2(Node.prototype),"addEdgeTo",this).call(this,toNode);toNode.incoming.add(this);}},{key:"removeEdgeTo",value:function removeEdgeTo(toNode){_get2(_getPrototypeOf2(Node.prototype),"removeEdgeTo",this).call(this,toNode);toNode.incoming.delete(this);}},{key:"addEdgeFrom",value:function addEdgeFrom(fromNode){_get2(_getPrototypeOf2(Node.prototype),"addEdgeFrom",this).call(this,fromNode);fromNode.outgoing.add(this);}},{key:"removeEdgeFrom",value:function removeEdgeFrom(fromNode){_get2(_getPrototypeOf2(Node.prototype),"removeEdgeFrom",this).call(this,fromNode);fromNode.outgoing.delete(this);}}]);return Node;}(base));};var MinimalNode=/*#__PURE__*/function(_Node$){_inherits2(MinimalNode,_Node$);function MinimalNode(){_classCallCheck2(this,MinimalNode);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalNode).apply(this,arguments));}return MinimalNode;}(Node$1(WalkableForwardNode(WalkableBackwardNode(WalkableForward(WalkableBackward(Walkable(Base$1)))))));//---------------------------------------------------------------------------------------------------------------------
var Graph=function Graph(base){return(/*#__PURE__*/function(_base7){_inherits2(Graph,_base7);function Graph(){var _this96;_classCallCheck2(this,Graph);_this96=_possibleConstructorReturn2(this,_getPrototypeOf2(Graph).apply(this,arguments));_this96.nodes=new Set();return _this96;}_createClass2(Graph,[{key:"getNodes",value:function getNodes(){return this.nodes;}},{key:"hasDirectNode",value:function hasDirectNode(node){return this.getNodes().has(node);}},{key:"addNodes",value:function addNodes(nodes){var _this97=this;nodes.forEach(function(node){return _this97.addNode(node);});}},{key:"addNode",value:function addNode(node){this.nodes.add(node);return node;}},{key:"removeNodes",value:function removeNodes(nodes){var _this98=this;nodes.forEach(function(node){return _this98.removeNode(node);});}},{key:"removeNode",value:function removeNode(node){// <debug>
if(!this.hasDirectNode(node))throw new Error("This [".concat(node,"] does not exists in the graph"));// </debug>
node.outgoing.forEach(function(toNode){return toNode.removeEdgeFrom(node);});node.incoming.forEach(function(fromNode){return fromNode.removeEdgeTo(node);});this.nodes.delete(node);}},{key:"getIncoming",value:function getIncoming(){return Array.from(this.nodes);}},{key:"getOutgoing",value:function getOutgoing(){return Array.from(this.nodes);}},{key:"forEachIncoming",value:function forEachIncoming(context,func){this.nodes.forEach(func);}},{key:"forEachOutgoing",value:function forEachOutgoing(context,func){this.nodes.forEach(func);}}]);return Graph;}(base));};var MinimalGraph=/*#__PURE__*/function(_Graph){_inherits2(MinimalGraph,_Graph);function MinimalGraph(){_classCallCheck2(this,MinimalGraph);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalGraph).apply(this,arguments));}return MinimalGraph;}(Graph(WalkableForwardNode(WalkableBackwardNode(WalkableForward(WalkableBackward(Walkable(Base$1)))))));/**
 * @private
 */var uppercaseFirst=function uppercaseFirst(str){return str.slice(0,1).toUpperCase()+str.slice(1);};/**
 * @private
 */var isAtomicValue=function isAtomicValue(value){return Object(value)!==value;};/**
 * @private
 */var lazyBuild=function lazyBuild(target,property,value){Object.defineProperty(target,property,{value:value});return value;};/**
 * @private
 */var preWalk=function preWalk(data,childrenFn,fn){var walkStack=[data],node,children;while(walkStack.length){node=walkStack.pop();fn(node);children=childrenFn(node);if(children){walkStack=walkStack.concat(children.slice().reverse());}}};//---------------------------------------------------------------------------------------------------------------------
var PropagationResult;(function(PropagationResult){PropagationResult[PropagationResult["Canceled"]=0]="Canceled";PropagationResult[PropagationResult["Completed"]=1]="Completed";PropagationResult[PropagationResult["Passed"]=2]="Passed";})(PropagationResult||(PropagationResult={}));//---------------------------------------------------------------------------------------------------------------------
var ChronoGraph=function ChronoGraph(base){return(/*#__PURE__*/function(_base8){_inherits2(ChronoGraph,_base8);function ChronoGraph(){var _this99;_classCallCheck2(this,ChronoGraph);_this99=_possibleConstructorReturn2(this,_getPrototypeOf2(ChronoGraph).apply(this,arguments));_this99.nodesMap=new Map();_this99.needRecalculationAtoms=new Set();_this99.stableAtoms=new Set();_this99.isPropagating=false;_this99.propagateCompletedListeners=[];_this99.propagateSuspended=0;return _this99;}_createClass2(ChronoGraph,[{key:"isAtomNeedRecalculation",value:function isAtomNeedRecalculation(atom){return this.needRecalculationAtoms.has(atom);}},{key:"markAsNeedRecalculation",value:function markAsNeedRecalculation(atom){this.needRecalculationAtoms.add(atom);}},{key:"markProcessed",value:function markProcessed(atom){this.needRecalculationAtoms.delete(atom);}},{key:"markStable",value:function markStable(atom){this.stableAtoms.add(atom);}},{key:"isAtomStable",value:function isAtomStable(atom){return this.stableAtoms.has(atom);}},{key:"commit",value:function commit(){this.needRecalculationAtoms.forEach(function(atom){return atom.clearUserInput();});this.needRecalculationAtoms.clear();this.changedAtoms.forEach(function(atom){return atom.commitValue();});// the edges might have changed, even the atom value itself did not
// because of that, we commit the edges for all recalculated atoms (stable atoms)
this.stableAtoms.forEach(function(atom){return atom.commitEdges();});this.stableAtoms.clear();}},{key:"reject",value:function reject(){this.rejectPartialProgress();this.needRecalculationAtoms.forEach(function(atom){return atom.clearUserInput();});this.needRecalculationAtoms.clear();}},{key:"rejectPartialProgress",value:function rejectPartialProgress(){this.touchedAtoms.forEach(function(_,atom){return atom.reject();});this.stableAtoms.clear();}},{key:"addNode",value:function addNode(node){var res=_get2(_getPrototypeOf2(ChronoGraph.prototype),"addNode",this).call(this,node);this.nodesMap.set(node.id,node);this.markAsNeedRecalculation(node);node.onEnterGraph(this);return res;}},{key:"removeNode",value:function removeNode(node){var _this100=this;node.outgoing.forEach(function(toNode){return _this100.markAsNeedRecalculation(toNode);});var res=_get2(_getPrototypeOf2(ChronoGraph.prototype),"removeNode",this).call(this,node);this.nodesMap.delete(node.id);this.needRecalculationAtoms.delete(node);// we probably don't need this line, since `stableAtoms` are internal state of the propagation process
this.stableAtoms.delete(node);node.onLeaveGraph(this);return res;}},{key:"startAtomCalculation",value:function startAtomCalculation(sourceAtom){var iterator=sourceAtom.calculate(sourceAtom.proposedValue);var iteratorValue=iterator.next();var value=iteratorValue.value;if(value instanceof Effect){return{effect:value,continuation:{iterator:iterator}};}else if(iteratorValue.done){return{value:value};}else{return{continuation:{atom:value,iterator:iterator}};}}},{key:"continueAtomCalculation",value:function continueAtomCalculation(sourceAtom,continuation,maybeDirtyAtoms){var me=this,iterator=continuation.iterator;var incomingAtom=continuation.atom;do{var iteratorValue=void 0;if(incomingAtom){sourceAtom.observedDuringCalculation.push(incomingAtom);// Cycle condition
// ideally should be removed (same as while condition)
if(maybeDirtyAtoms.has(incomingAtom)&&!this.isAtomStable(incomingAtom)){var cycle=void 0;me.walkDepth(WalkForwardContext.new({forEachNext:function forEachNext(atom,func){if(atom===me){me.needRecalculationAtoms.forEach(func);}else{atom.observedDuringCalculation.forEach(func);}},onCycle:function onCycle(node,stack){// NOTE: After onCycle call walkDepth instantly returns
cycle=cycleInfo(stack);return OnCycleAction.Cancel;}}));iteratorValue={value:GraphCycleDetectedEffect.new({cycle:cycle}),done:true};}else{iteratorValue=iterator.next(incomingAtom.hasNextStableValue()?incomingAtom.getNextStableValue():incomingAtom.getConsistentValue());}}else{iteratorValue=iterator.next();}var value=iteratorValue.value;if(value instanceof Effect){return{effect:value,continuation:{iterator:iterator}};}if(iteratorValue.done){return{value:value};}// TODO should ignore non-final non-atom values
incomingAtom=value;}while(!maybeDirtyAtoms.has(incomingAtom)||this.isAtomStable(incomingAtom));return{continuation:{iterator:iterator,atom:incomingAtom}};}},{key:"propagateSingle",value:/*#__PURE__*/regeneratorRuntime.mark(function propagateSingle(){var _this101=this;var toCalculate,maybeDirty,me,cycle,depth,conts,visitedAt,changedAtoms,sourceAtom,visitedAtDepth,calcRes,cont,atom,consistentValue;return regeneratorRuntime.wrap(function propagateSingle$(_context26){while(1){switch(_context26.prev=_context26.next){case 0:toCalculate=[];maybeDirty=new Set();me=this;cycle=null;this.walkDepth(WalkForwardContext.new({forEachNext:function forEachNext(atom,func){if(atom===me){me.needRecalculationAtoms.forEach(func);}else{WalkForwardContext.prototype.forEachNext.call(this,atom,func);}},onNode:function onNode(atom){// console.log(`Visiting ${node}`)
},onCycle:function onCycle(node,stack){// NOTE: After onCycle call walkDepth instantly returns
cycle=cycleInfo(stack);return OnCycleAction.Cancel;},onTopologicalNode:function onTopologicalNode(atom){if(atom===_this101)return;maybeDirty.add(atom);toCalculate.push(atom);}}));if(!cycle){_context26.next=7;break;}return _context26.abrupt("return",GraphCycleDetectedEffect.new({cycle:cycle}));case 7:conts=this.touchedAtoms=new Map();visitedAt=new Map();changedAtoms=this.changedAtoms=[];case 10:if(!(depth=toCalculate.length)){_context26.next=24;break;}sourceAtom=toCalculate[depth-1];if(!(this.isAtomStable(sourceAtom)||!maybeDirty.has(sourceAtom))){_context26.next=15;break;}toCalculate.pop();return _context26.abrupt("continue",10);case 15:visitedAtDepth=visitedAt.get(sourceAtom);calcRes=void 0;// node has been already visited
if(visitedAtDepth!=null){cont=conts.get(sourceAtom);calcRes=this.continueAtomCalculation(sourceAtom,cont,maybeDirty);}else{visitedAt.set(sourceAtom,depth);calcRes=this.startAtomCalculation(sourceAtom);}if(!calcRes.effect){_context26.next=21;break;}_context26.next=21;return calcRes.effect;case 21:if(calcRes.continuation){conts.set(sourceAtom,calcRes.continuation);atom=calcRes.continuation.atom;if(atom){// this line is necessary for cycles visualization to work correctly, strictly it is not needed,
// because in non-cycle scenario "observedDuringCalculation" is filled in the `continueAtomCalculation`
sourceAtom.observedDuringCalculation.push(atom);toCalculate.push(atom);}}else{// this makes sure that _all_ atoms, for which the calculation has started
// are "collected" in the `conts` Map
// then, during reject, we'll iterate over this map
conts.set(sourceAtom,null);consistentValue=calcRes.value;if(!sourceAtom.equality(consistentValue,sourceAtom.getConsistentValue())){changedAtoms.push(sourceAtom);sourceAtom.nextStableValue=consistentValue;}this.markStable(sourceAtom);toCalculate.pop();}_context26.next=10;break;case 24:return _context26.abrupt("return",{success:true});case 25:case"end":return _context26.stop();}}},propagateSingle,this);})},{key:"onEffect",value:function(){var _onEffect=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee25(effect){return regeneratorRuntime.wrap(function _callee25$(_context27){while(1){switch(_context27.prev=_context27.next){case 0:if(!(effect instanceof CancelPropagationEffect)){_context27.next=2;break;}return _context27.abrupt("return",EffectResolutionResult.Cancel);case 2:if(!(effect instanceof RestartPropagationEffect)){_context27.next=4;break;}return _context27.abrupt("return",EffectResolutionResult.Restart);case 4:if(!(effect instanceof GraphCycleDetectedEffect)){_context27.next=6;break;}throw new Error('Graph cycle detected');case 6:return _context27.abrupt("return",EffectResolutionResult.Resume);case 7:case"end":return _context27.stop();}}},_callee25);}));function onEffect(_x47){return _onEffect.apply(this,arguments);}return onEffect;}()},{key:"waitForPropagateCompleted",value:function waitForPropagateCompleted(){var _this102=this;if(!this.isPropagating)return Promise.resolve(null);return new Promise(function(resolve){_this102.propagateCompletedListeners.push(resolve);});}/**
     * 222 Suspend propagation processing. When propagation is suspended, calls to propagate
     * do not proceed, instead a propagate call is deferred until a matching
     * _resumePropagate_ is called.
     */},{key:"suspendPropagate",value:function suspendPropagate(){this.propagateSuspended++;}/**
     * Resume propagation. If propagation is resumed (calls may be nested which increments a
     * suspension counter), then if a call to propagate was made during suspension, propagate is
     * executed.
     * @param {Boolean} [trigger] Pass `false` to inhibit automatic propagation if propagate was requested during suspension.
     */},{key:"resumePropagate",value:function(){var _resumePropagate=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee26(trigger){return regeneratorRuntime.wrap(function _callee26$(_context28){while(1){switch(_context28.prev=_context28.next){case 0:if(!this.propagateSuspended){_context28.next=7;break;}if(! --this.propagateSuspended){_context28.next=5;break;}return _context28.abrupt("return",this.resumePromise);case 5:if(!(this.resumePromise&&trigger!==false)){_context28.next=7;break;}return _context28.abrupt("return",this.propagate());case 7:return _context28.abrupt("return",Promise.resolve(PropagationResult.Completed));case 8:case"end":return _context28.stop();}}},_callee26,this);}));function resumePropagate(_x48){return _resumePropagate.apply(this,arguments);}return resumePropagate;}()},{key:"propagate",value:function(){var _propagate=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee27(onEffect){var dryRun,me,resolve,reject,_args29=arguments;return regeneratorRuntime.wrap(function _callee27$(_context29){while(1){switch(_context29.prev=_context29.next){case 0:dryRun=_args29.length>1&&_args29[1]!==undefined?_args29[1]:false;me=this;if(!me.propagateSuspended){_context29.next=7;break;}// Create a promise which we will resolve when the suspension is lifted
// and this Entity propagates.
if(!me.resumePromise){me.resumePromise=new Promise(function(resolve,reject){me.resumeResolved=resolve;me.resumeRejected=reject;});}return _context29.abrupt("return",me.resumePromise);case 7:if(!me.resumePromise){_context29.next=13;break;}resolve=me.resumeResolved,reject=me.resumeRejected;// Reset the suspension promise apparatus
me.resumePromise=me.resumeResolved=me.resumeRejected=null;// Perform the propagation then inform any callers of propagate during the suspension.
return _context29.abrupt("return",me.propagateUnsuspended(onEffect,dryRun).then(function(value){resolve(value);return value;},function(value){reject(value);return value;}));case 13:return _context29.abrupt("return",me.propagateUnsuspended(onEffect,dryRun));case 14:case"end":return _context29.stop();}}},_callee27,this);}));function propagate(_x49){return _propagate.apply(this,arguments);}return propagate;}()},{key:"propagateUnsuspended",value:function(){var _propagateUnsuspended=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee28(onEffect){var dryRun,needToRestart,result,propagationIterator,iteratorValue,value,resolutionResult,_args30=arguments;return regeneratorRuntime.wrap(function _callee28$(_context30){while(1){switch(_context30.prev=_context30.next){case 0:dryRun=_args30.length>1&&_args30[1]!==undefined?_args30[1]:false;if(!this.isPropagating){_context30.next=3;break;}throw new Error("Can not nest calls to `propagate`, use `waitForPropagateCompleted`");case 3:this.isPropagating=true;case 4:needToRestart=false;propagationIterator=this.propagateSingle();iteratorValue=void 0;case 7:iteratorValue=propagationIterator.next();value=iteratorValue.value;if(!(value instanceof Effect)){_context30.next=34;break;}resolutionResult=void 0;if(!onEffect){_context30.next=17;break;}_context30.next=14;return onEffect(value);case 14:resolutionResult=_context30.sent;_context30.next=20;break;case 17:_context30.next=19;return this.onEffect(value);case 19:resolutionResult=_context30.sent;case 20:if(!(resolutionResult===EffectResolutionResult.Cancel)){_context30.next=30;break;}// Escape hatch to get next consistent atom value before rejection
if(typeof dryRun==='function'){dryRun();}// POST-PROPAGATE sequence, TODO refactor
this.reject();this.isPropagating=false;_context30.next=26;return this.propagationCompletedHook();case 26:this.onPropagationCompleted(PropagationResult.Canceled);return _context30.abrupt("return",PropagationResult.Canceled);case 30:if(!(resolutionResult===EffectResolutionResult.Restart)){_context30.next=34;break;}this.rejectPartialProgress();needToRestart=true;return _context30.abrupt("break",35);case 34:if(!iteratorValue.done){_context30.next=7;break;}case 35:if(needToRestart){_context30.next=4;break;}case 36:if(!dryRun){_context30.next=46;break;}// Escape hatch to get next consistent atom value before rejection
if(typeof dryRun==='function'){dryRun();}// POST-PROPAGATE sequence, TODO refactor
this.reject();this.isPropagating=false;_context30.next=42;return this.propagationCompletedHook();case 42:this.onPropagationCompleted(PropagationResult.Completed);// Shouldn't it be PropagationResult.Passed?
result=PropagationResult.Passed;_context30.next=52;break;case 46:// POST-PROPAGATE sequence, TODO refactor
this.commit();this.isPropagating=false;_context30.next=50;return this.propagationCompletedHook();case 50:this.onPropagationCompleted(PropagationResult.Completed);result=PropagationResult.Completed;case 52:return _context30.abrupt("return",result);case 53:case"end":return _context30.stop();}}},_callee28,this);}));function propagateUnsuspended(_x50){return _propagateUnsuspended.apply(this,arguments);}return propagateUnsuspended;}()},{key:"tryPropagateWithNodes",value:function(){var _tryPropagateWithNodes=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee29(onEffect,nodes,hatchFn){var _this103=this;var result;return regeneratorRuntime.wrap(function _callee29$(_context31){while(1){switch(_context31.prev=_context31.next){case 0:if(nodes&&nodes.length){nodes=nodes.filter(function(n){return n.graph!==_this103;});if(nodes.length){this.addNodes(nodes);}}_context31.next=3;return this.propagate(onEffect,hatchFn||true);case 3:result=_context31.sent;if(nodes&&nodes.length){nodes&&this.removeNodes(nodes);}return _context31.abrupt("return",result);case 6:case"end":return _context31.stop();}}},_callee29,this);}));function tryPropagateWithNodes(_x51,_x52,_x53){return _tryPropagateWithNodes.apply(this,arguments);}return tryPropagateWithNodes;}()},{key:"propagationCompletedHook",value:function(){var _propagationCompletedHook=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee30(){return regeneratorRuntime.wrap(function _callee30$(_context32){while(1){switch(_context32.prev=_context32.next){case 0:case"end":return _context32.stop();}}},_callee30);}));function propagationCompletedHook(){return _propagationCompletedHook.apply(this,arguments);}return propagationCompletedHook;}()},{key:"onPropagationCompleted",value:function onPropagationCompleted(result){this.propagateCompletedListeners.forEach(function(listener){return listener(result);});this.propagateCompletedListeners=[];}// used for debugging, when exception is thrown in the middle of the propagate and edges are not yet committed
},{key:"commitAllEdges",value:function commitAllEdges(){this.nodes.forEach(function(atom){return atom.commitEdges();});}},{key:"toDotOnCycleException",value:function toDotOnCycleException(){this.commitAllEdges();return this.toDot();}},{key:"toDotAtomName",value:function toDotAtomName(atom){var _String$split=String(atom.id).split('/'),_String$split2=_slicedToArray(_String$split,2),idGroup=_String$split2[0],idField=_String$split2[1];if(atom.self){var entity=atom.self;// @ts-ignore
if(entity.name){idGroup=entity.name;}}return"".concat(idGroup,"/").concat(idField||'self');}},{key:"toDotAtomValue",value:function toDotAtomValue(atom){var value;if(atom.newRefs&&atom.oldRefs){var collection=atom.get();value="Set(".concat(collection&&collection.size||0,")");}else{value=atom.get();}if(value instanceof Date){value=[value.getFullYear(),'.',value.getMonth()+1,'.',value.getDate(),' ',value.getHours()+':'+value.getMinutes()].join('');}else if(Array.isArray(value)){value="Array(".concat(value.length,")");}return value;}},{key:"toDotAtomColor",value:function toDotAtomColor(atom){return!this.isAtomNeedRecalculation(atom)||this.isAtomStable(atom)?'darkgreen':'red';}},{key:"toDotObtainCycle",value:function toDotObtainCycle(){var cycle={};// Cycle detection
this.walkDepth(WalkForwardContext.new({onCycle:function onCycle(_node,stack){var ci=cycleInfo(stack);cycle=ci.reduce(function(_ref364,curNode){var _ref365=_slicedToArray(_ref364,2),cycle=_ref365[0],prevNode=_ref365[1];if(prevNode){cycle[prevNode.id]=curNode.id;}return[cycle,curNode];},[cycle,null])[0];return OnCycleAction.Cancel;}}));return cycle;}},{key:"toDot",value:function toDot(){var _this104=this;var dot=['digraph ChronoGraph {','splines=spline'];var arrAtoms=Array.from(this.nodesMap.entries());// Group atoms into subgraphs by label
//
// atom.self.id    - entity
// atom.field.name -
var namedAtomsByGroup=arrAtoms.reduce(function(map,_ref366){var _ref367=_slicedToArray(_ref366,2),atomId=_ref367[0],atom=_ref367[1];var _String$split3=String(atomId).split('/'),_String$split4=_slicedToArray(_String$split3,2),group=_String$split4[0],label=_String$split4[1];// @ts-ignore
var _ref368=atom.self||{},id=_ref368.id,name=_ref368.name,field=atom.field;group=name||id||group;label=field&&field.name||label;if(!map.has(group)){map.set(group,new Set([[label||'',atom]]));}else{map.get(group).add([label,atom]);}return map;},new Map());// Generate subgraphs
dot=Array.from(namedAtomsByGroup.entries()).reduce(function(dot,_ref369,index){var _ref370=_slicedToArray(_ref369,2),group=_ref370[0],namedAtoms=_ref370[1];dot.push("subgraph cluster_".concat(index," {"));dot.push("label=\"".concat(group,"\""));dot=Array.from(namedAtoms.values()).reduce(function(dot,_ref371){var _ref372=_slicedToArray(_ref371,2),name=_ref372[0],atom=_ref372[1];var value=_this104.toDotAtomValue(atom);var color=_this104.toDotAtomColor(atom);dot.push("\"".concat(atom.id,"\" [label=\"").concat(name,"=").concat(value,"\", fontcolor=\"").concat(color,"\"]"));return dot;},dot);dot.push('}');return dot;},dot);// Cycle detection
var cycle=this.toDotObtainCycle();// Generate edges
dot=arrAtoms.reduce(function(dot,_ref373){var _ref374=_slicedToArray(_ref373,2),fromId=_ref374[0],fromAtom=_ref374[1];var outgoingEdges=fromAtom.outgoing;Array.from(outgoingEdges).reduce(function(dot,toAtom){//let edgeLabel = this.getEdgeLabel(fromId, atom.id)
var edgeLabel='';var color=!_this104.isAtomNeedRecalculation(fromAtom)||_this104.isAtomStable(fromAtom)?'darkgreen':'red';var penwidth=cycle[fromId]==toAtom.id?5:1;dot.push("\"".concat(fromId,"\" -> \"").concat(toAtom.id,"\" [label=\"").concat(edgeLabel,"\", color=\"").concat(color,"\", penwidth=").concat(penwidth,"]"));return dot;},dot);return dot;},dot);dot.push('}');return dot.join('\n');}},{key:"toDotAtomIncoming",value:function toDotAtomIncoming(atom){var _this105=this;var dot=['digraph ChronoGraph {','splines=spline'];// Collecting incoming sub-graph
var subGraph=new Set();preWalk(atom,function(subGraphAtom){return Array.from(subGraphAtom.incoming);},function(subGraphAtom){return subGraph.add(subGraphAtom);});// Generating incoming graph nodes
dot=Array.from(subGraph).reduce(function(dot,incomingAtom){var name=_this105.toDotAtomName(incomingAtom),value=_this105.toDotAtomValue(incomingAtom);var color,penwidth;if(incomingAtom==atom){color='orange';penwidth=5;}else{color=_this105.toDotAtomColor(incomingAtom);penwidth=1;}dot.push("\"".concat(incomingAtom.id,"\" [label=\"").concat(name,"=").concat(value,"\", fontcolor=\"").concat(color,"\", penwidth=").concat(penwidth,"]"));return dot;},dot);// Cycle detection
var cycle=this.toDotObtainCycle();// Generating edges
dot=Array.from(subGraph).reduce(function(dot,subGraphAtom){return Array.from(subGraphAtom.incoming).reduce(function(dot,incomingAtom){var fromId=incomingAtom.id;var toId=subGraphAtom.id;var color=_this105.toDotAtomColor(incomingAtom);var penwidth=cycle[fromId]==toId?5:1;dot.push("\"".concat(fromId,"\" -> \"").concat(toId,"\" [label=\"\", color=\"").concat(color,"\", penwidth=").concat(penwidth,"]"));return dot;},dot);},dot);dot.push('}');return dot.join('\n');}}]);return ChronoGraph;}(base));};var MinimalChronoGraph=/*#__PURE__*/function(_ChronoGraph){_inherits2(MinimalChronoGraph,_ChronoGraph);function MinimalChronoGraph(){_classCallCheck2(this,MinimalChronoGraph);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalChronoGraph).apply(this,arguments));}return MinimalChronoGraph;}(ChronoGraph(MinimalGraph));var IteratorReturnedEarly=Symbol("IteratorReturnedEarly");//---------------------------------------------------------------------------------------------------------------------
var Entity=/*#__PURE__*/function(_Base$3){_inherits2(Entity,_Base$3);function Entity(){var _this106;_classCallCheck2(this,Entity);_this106=_possibleConstructorReturn2(this,_getPrototypeOf2(Entity).apply(this,arguments));_this106.fields=new Map();return _this106;}_createClass2(Entity,[{key:"hasField",value:function hasField(name){return this.getField(name)!==undefined;}},{key:"getField",value:function getField(name){var result=undefined;this.forEachParent(function(entity){var field=entity.fields.get(name);if(field){result=field;return IteratorReturnedEarly;}});return result;}},{key:"addField",value:function addField(field){var name=field.name;if(!name)throw new Error("Field must have a name");if(this.fields.has(name))throw new Error("Field with name [".concat(String(name),"] already exists"));field.entity=this;this.fields.set(name,field);return field;}},{key:"forEachParent",value:function forEachParent(func){var entity=this;while(entity){if(func(entity)===IteratorReturnedEarly)return IteratorReturnedEarly;entity=entity.parentEntity;}}},{key:"forEachField",value:function forEachField(func){var visited=new Set();this.forEachParent(function(entity){entity.fields.forEach(function(field,name){if(!visited.has(name)){visited.add(name);func(field,name);}});});}}]);return Entity;}(Base$1);var ATOM_ID=1;var chronoId=function chronoId(){return"chrono".concat(ATOM_ID++);};//---------------------------------------------------------------------------------------------------------------------
var HasId=function HasId(base){return(/*#__PURE__*/function(_base9){_inherits2(HasId,_base9);function HasId(){var _this107;_classCallCheck2(this,HasId);_this107=_possibleConstructorReturn2(this,_getPrototypeOf2(HasId).apply(this,arguments));_this107.id=chronoId();return _this107;}return HasId;}(base));};var strictEqualityWithDates=function strictEqualityWithDates(v1,v2){if(v1 instanceof Date&&v2 instanceof Date)return v1-v2===0;return v1===v2;};//---------------------------------------------------------------------------------------------------------------------
var ChronoAtom=function ChronoAtom(base){return(/*#__PURE__*/function(_base10){_inherits2(ChronoAtom,_base10);function ChronoAtom(){var _this108;_classCallCheck2(this,ChronoAtom);_this108=_possibleConstructorReturn2(this,_getPrototypeOf2(ChronoAtom).apply(this,arguments));_this108.equality=strictEqualityWithDates;_this108.observedDuringCalculation=[];return _this108;}_createClass2(ChronoAtom,[{key:"clearUserInput",value:function clearUserInput(){this.proposedValue=undefined;this.proposedArgs=undefined;}},{key:"commitValue",value:function commitValue(){var nextStableValue=this.nextStableValue;this.nextStableValue=undefined;// this assignment may cause side effects (when using delegated storage)
// so we do it after the `this.nextStableValue` is cleared
this.value=nextStableValue;}},{key:"commitEdges",value:function commitEdges(){var _this109=this;this.incoming.forEach(function(from){return _this109.removeEdgeFrom(from);});this.observedDuringCalculation.forEach(function(from){return _this109.addEdgeFrom(from);});this.observedDuringCalculation=[];}},{key:"reject",value:function reject(){this.nextStableValue=undefined;this.observedDuringCalculation=[];}},{key:"calculate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculate(proposedValue){return regeneratorRuntime.wrap(function calculate$(_context33){while(1){switch(_context33.prev=_context33.next){case 0:if(!this.calculation){_context33.next=5;break;}return _context33.delegateYield(this.calculation.call(this.calculationContext||this,proposedValue),"t0",2);case 2:return _context33.abrupt("return",_context33.t0);case 5:return _context33.abrupt("return",proposedValue!==undefined?proposedValue:this.value);case 6:case"end":return _context33.stop();}}},calculate,this);})},{key:"hasValue",value:function hasValue(){return this.hasNextStableValue()||this.hasProposedValue()||this.hasConsistentValue();}},{key:"hasStableValue",value:function hasStableValue(){return this.hasNextStableValue()||this.hasConsistentValue();}},{key:"hasNextStableValue",value:function hasNextStableValue(){return this.nextStableValue!==undefined;}},{key:"hasConsistentValue",value:function hasConsistentValue(){return this.value!==undefined;}},{key:"hasProposedValue",value:function hasProposedValue(){return this.proposedArgs!==undefined;}},{key:"get",value:function get(){if(this.hasNextStableValue()){return this.getNextStableValue();}else if(this.hasProposedValue()){return this.getProposedValue();}else{return this.getConsistentValue();}}},{key:"put",value:function put(proposedValue){for(var _len64=arguments.length,args=new Array(_len64>1?_len64-1:0),_key63=1;_key63<_len64;_key63++){args[_key63-1]=arguments[_key63];}this.proposedValue=proposedValue;this.proposedArgs=Array.prototype.slice.call(arguments);this.graph&&this.graph.markAsNeedRecalculation(this);}},{key:"getNextStableValue",value:function getNextStableValue(){return this.nextStableValue;}},{key:"getConsistentValue",value:function getConsistentValue(){return this.value;}},{key:"getProposedValue",value:function getProposedValue(){return this.proposedValue;}},{key:"set",value:function(){var _set2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee31(proposedValue){var graph,_len65,args,_key64,_args34=arguments;return regeneratorRuntime.wrap(function _callee31$(_context34){while(1){switch(_context34.prev=_context34.next){case 0:graph=this.graph;for(_len65=_args34.length,args=new Array(_len65>1?_len65-1:0),_key64=1;_key64<_len65;_key64++){args[_key64-1]=_args34[_key64];}this.put.apply(this,[proposedValue].concat(args));return _context34.abrupt("return",graph?graph.propagate():Promise.resolve(PropagationResult.Completed));case 4:case"end":return _context34.stop();}}},_callee31,this);}));function set(_x54){return _set2.apply(this,arguments);}return set;}()},{key:"onEnterGraph",value:function onEnterGraph(graph){this.graph=graph;}},{key:"onLeaveGraph",value:function onLeaveGraph(graph){this.graph=undefined;}}]);return ChronoAtom;}(base));};//---------------------------------------------------------------------------------------------------------------------
var MinimalChronoAtom=/*#__PURE__*/function(_ChronoAtom){_inherits2(MinimalChronoAtom,_ChronoAtom);function MinimalChronoAtom(){_classCallCheck2(this,MinimalChronoAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalChronoAtom).apply(this,arguments));}return MinimalChronoAtom;}(ChronoAtom(HasId(MinimalNode)));//---------------------------------------------------------------------------------------------------------------------
var FieldAtom=function FieldAtom(base){return(/*#__PURE__*/function(_base11){_inherits2(FieldAtom,_base11);function FieldAtom(){_classCallCheck2(this,FieldAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(FieldAtom).apply(this,arguments));}_createClass2(FieldAtom,[{key:"put",value:function put(proposedValue){var _get23;for(var _len66=arguments.length,args=new Array(_len66>1?_len66-1:0),_key65=1;_key65<_len66;_key65++){args[_key65-1]=arguments[_key65];}return(_get23=_get2(_getPrototypeOf2(FieldAtom.prototype),"put",this)).call.apply(_get23,[this,this.field.converter?this.field.converter(proposedValue,this.field):proposedValue].concat(args));}},{key:"toString",value:function toString(){return"Field atom [".concat(this.field.name,"] of entity [").concat(this.self,"}]");}}]);return FieldAtom;}(base));};var MinimalFieldAtom=/*#__PURE__*/function(_FieldAtom){_inherits2(MinimalFieldAtom,_FieldAtom);function MinimalFieldAtom(){_classCallCheck2(this,MinimalFieldAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalFieldAtom).apply(this,arguments));}return MinimalFieldAtom;}(FieldAtom(MinimalChronoAtom));//---------------------------------------------------------------------------------------------------------------------
var EntityAtom=function EntityAtom(base){return(/*#__PURE__*/function(_base12){_inherits2(EntityAtom,_base12);function EntityAtom(){_classCallCheck2(this,EntityAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(EntityAtom).apply(this,arguments));}_createClass2(EntityAtom,[{key:"toString",value:function toString(){return"Entity atom [".concat(this.self.id,"]");}}]);return EntityAtom;}(base));};var MinimalEntityAtom=/*#__PURE__*/function(_EntityAtom){_inherits2(MinimalEntityAtom,_EntityAtom);function MinimalEntityAtom(){_classCallCheck2(this,MinimalEntityAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalEntityAtom).apply(this,arguments));}return MinimalEntityAtom;}(EntityAtom(MinimalChronoAtom));//---------------------------------------------------------------------------------------------------------------------
var Field$1=/*#__PURE__*/function(_Base$4){_inherits2(Field$1,_Base$4);function Field$1(){var _this110;_classCallCheck2(this,Field$1);_this110=_possibleConstructorReturn2(this,_getPrototypeOf2(Field$1).apply(this,arguments));_this110.persistent=true;_this110.createAccessors=true;_this110.atomCls=MinimalFieldAtom;return _this110;}return Field$1;}(Base$1);var hasReplica=Symbol('isReplica');//---------------------------------------------------------------------------------------------------------------------
var Replica=function Replica(base){return(/*#__PURE__*/function(_base13){_inherits2(Replica,_base13);function Replica(){_classCallCheck2(this,Replica);return _possibleConstructorReturn2(this,_getPrototypeOf2(Replica).apply(this,arguments));}_createClass2(Replica,[{key:hasReplica,value:function value(){}},{key:"addEntity",value:function addEntity(entity){entity.enterGraph(this);}},{key:"addEntities",value:function addEntities(entities){var _this111=this;entities.forEach(function(entity){return _this111.addEntity(entity);});}},{key:"removeEntity",value:function removeEntity(entity){entity.leaveGraph();}},{key:"removeEntities",value:function removeEntities(entities){var _this112=this;entities.forEach(function(entity){return _this112.removeEntity(entity);});}},{key:"tryPropagateWithEntities",value:function(){var _tryPropagateWithEntities=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee32(onEffect,entities,hatchFn){var _this113=this;var result;return regeneratorRuntime.wrap(function _callee32$(_context35){while(1){switch(_context35.prev=_context35.next){case 0:if(entities&&entities.length){entities=entities.filter(function(e){return e.$$.graph!==_this113;});this.addEntities(entities);}_context35.next=3;return this.propagate(onEffect,hatchFn||true);case 3:result=_context35.sent;if(entities&&entities.length){this.removeEntities(entities);}return _context35.abrupt("return",result);case 6:case"end":return _context35.stop();}}},_callee32,this);}));function tryPropagateWithEntities(_x55,_x56,_x57){return _tryPropagateWithEntities.apply(this,arguments);}return tryPropagateWithEntities;}()}]);return Replica;}(base));};var MinimalReplica=/*#__PURE__*/function(_Replica){_inherits2(MinimalReplica,_Replica);function MinimalReplica(){_classCallCheck2(this,MinimalReplica);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalReplica).apply(this,arguments));}return MinimalReplica;}(Replica(MinimalChronoGraph));var isReplica=function isReplica(replica){return Boolean(replica&&replica[hasReplica]);};// LAZY ATOMS CREATION - investigate if it improves performance
// current issues
// 1) when entity enters a graph, the yet unreferenced atoms are not created yet (naturally)
// so they are not calculated
// need to create AND calculate them **synchronously** later, on-demand - how to deal with effects?
// const atomsCollectionMixin = (base : typeof Base, name) =>
//
// class AtomsCollection extends base {
// POSSIBLE OPTIMIZATION - use more than 1 getter, like: const atomsCollectionMixin = (base : typeof Base, name1, name2, name3)
//     get [name] () {
//         return super[ name ] = (this as any).host.createFieldAtom(name)
//     }
// }
//
var isEntityMarker=Symbol('isEntity');//---------------------------------------------------------------------------------------------------------------------
var Entity$1=function Entity$1(base){var Entity$$1=/*#__PURE__*/function(_base14){_inherits2(Entity$$1,_base14);function Entity$$1(){_classCallCheck2(this,Entity$$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(Entity$$1).apply(this,arguments));}_createClass2(Entity$$1,[{key:isEntityMarker,// marker in the prototype
value:function value(){}// LAZY ATOMS CREATION - investigate if it improves performance
//         static atomsCollectionCls : AnyConstructor
//
//         static getAtomsCollectionCls () : AnyConstructor {
//             if (this.atomsCollectionCls) return this.atomsCollectionCls
//
//             let cls         = Base
//
//             this.prototype.$entity.fields.forEach((field : Field, name : Name) => {
//                 cls         = atomsCollectionMixin(cls, name)
//             })
//
//             return this.atomsCollectionCls = cls
//         }
//
//
//         get $ () : { [s in keyof this] : MinimalFieldAtom } {
//             // @ts-ignore
//             const atomsCollection   = this.constructor.getAtomsCollectionCls().new()
//
//             Object.defineProperty(atomsCollection, 'host', { enumerable : false, value : this })
//
//             // @ts-ignore
//             return super.$          = atomsCollection
//         }
// // TODO this is not completed, needs to check against the full set of "maybe dirty" atoms during propagation
// // this is an optimization idea, based on assumption, that "yielding" is expensive
// // so if we'll "inline" the "need recalculation" check for not stale atoms, we get some performance improvement
// * resolve <T extends keyof this> (atomName : T) : ChronoIterator<this[ T ]> {
//     const atom : FieldAtom      = this.$[ atomName ]
//     const graph                 = atom.graph
//
//     if (graph) {
//         if (graph.isAtomNeedRecalculation(atom)) {
//             return yield atom
//         } else {
//             return atom.get()
//         }
//     } else {
//         return atom.get()
//     }
// }
// lazy meta instance creation - will work even w/o any @field or @entity decorator
},{key:"calculateSelf",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateSelf(){return regeneratorRuntime.wrap(function calculateSelf$(_context36){while(1){switch(_context36.prev=_context36.next){case 0:return _context36.abrupt("return",this);case 1:case"end":return _context36.stop();}}},calculateSelf,this);})},{key:"createFieldAtom",value:function createFieldAtom(field){var name=field.name;var calculationFunction=this.$calculations&&this[this.$calculations[name]];return field.atomCls.new({id:"".concat(this.$$.id,"/").concat(name),field:field,self:this,calculationContext:calculationFunction?this:undefined,calculation:calculationFunction});}},{key:"getGraph",value:function getGraph(){return this.$$.graph;}},{key:"forEachFieldAtom",value:function forEachFieldAtom(func){var fields=this.$;for(var name in fields){func.call(this,fields[name],name);}}},{key:"enterGraph",value:function enterGraph(graph){this.forEachFieldAtom(function(field){return graph.addNode(field);});graph.addNode(this.$$);}},{key:"leaveGraph",value:function leaveGraph(){var graph=this.$$.graph;if(graph){this.forEachFieldAtom(function(field){return graph.removeNode(field);});graph.removeNode(this.$$);}}/**
         * Indicates if propagation is in progress.
         */},{key:"isPropagating",value:function isPropagating(){return this.getGraph().isPropagating;}/**
         * Suspend propagation processing. When propagation is suspended, calls to propagate
         * do not proceed, instead a propagate call is deferred until a matching
         * _resumePropagate_ is called.
         */},{key:"suspendPropagate",value:function suspendPropagate(){var graph=this.getGraph();graph&&graph.suspendPropagate();}/**
         * Resume propagation. If propagation is resumed (calls may be nested which increments a
         * suspension counter), then if a call to propagate was made during suspension, propagate is
         * executed.
         * @param {Boolean} [trigger] Pass `false` to inhibit automatic propagation if propagate was requested during suspension.
         */},{key:"resumePropagate",value:function(){var _resumePropagate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee33(trigger){var graph;return regeneratorRuntime.wrap(function _callee33$(_context37){while(1){switch(_context37.prev=_context37.next){case 0:graph=this.getGraph();return _context37.abrupt("return",graph&&graph.resumePropagate(trigger)||Promise.resolve(PropagationResult.Completed));case 2:case"end":return _context37.stop();}}},_callee33,this);}));function resumePropagate(_x58){return _resumePropagate2.apply(this,arguments);}return resumePropagate;}()/**
         * Propagates changes to the dependent atoms. For example:
         *
         * ```ts
         * // double the event duration
         * event.duration *= 2
         * // call propagate() to do further recalculations caused by the duration change
         * await event.propagate()
         * console.log('Schedule updated')
         * ```
         *
         * @param onEffect Function that should handle occurred propagation conflicts. For example:
         *
         * ```ts
         * // trigger propagation and silently cancel changes in case of any conflict
         * await project.propagate(() => EffectResolutionResult.Cancel);
         * ```
         *
         * @param dryRun
         */},{key:"propagate",value:function(){var _propagate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee34(onEffect){var dryRun,graph,_args38=arguments;return regeneratorRuntime.wrap(function _callee34$(_context38){while(1){switch(_context38.prev=_context38.next){case 0:dryRun=_args38.length>1&&_args38[1]!==undefined?_args38[1]:false;graph=this.getGraph();return _context38.abrupt("return",graph&&graph.propagate(onEffect,dryRun)||Promise.resolve(PropagationResult.Completed));case 3:case"end":return _context38.stop();}}},_callee34,this);}));function propagate(_x59){return _propagate2.apply(this,arguments);}return propagate;}()},{key:"waitForPropagateCompleted",value:function(){var _waitForPropagateCompleted=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee35(){return regeneratorRuntime.wrap(function _callee35$(_context39){while(1){switch(_context39.prev=_context39.next){case 0:return _context39.abrupt("return",this.getGraph().waitForPropagateCompleted());case 1:case"end":return _context39.stop();}}},_callee35,this);}));function waitForPropagateCompleted(){return _waitForPropagateCompleted.apply(this,arguments);}return waitForPropagateCompleted;}()},{key:"tryPropagateWithNodes",value:function(){var _tryPropagateWithNodes2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee36(onEffect,nodes,hatchFn){return regeneratorRuntime.wrap(function _callee36$(_context40){while(1){switch(_context40.prev=_context40.next){case 0:return _context40.abrupt("return",this.getGraph().tryPropagateWithNodes(onEffect,nodes,hatchFn));case 1:case"end":return _context40.stop();}}},_callee36,this);}));function tryPropagateWithNodes(_x60,_x61,_x62){return _tryPropagateWithNodes2.apply(this,arguments);}return tryPropagateWithNodes;}()},{key:"tryPropagateWithEntities",value:function(){var _tryPropagateWithEntities2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee37(onEffect,entities,hatchFn){var graph,result;return regeneratorRuntime.wrap(function _callee37$(_context41){while(1){switch(_context41.prev=_context41.next){case 0:graph=this.getGraph();if(!isReplica(graph)){_context41.next=5;break;}result=graph.tryPropagateWithEntities(onEffect,entities,hatchFn);_context41.next=6;break;case 5:throw new Error("Entity is not part of replica");case 6:return _context41.abrupt("return",result);case 7:case"end":return _context41.stop();}}},_callee37,this);}));function tryPropagateWithEntities(_x63,_x64,_x65){return _tryPropagateWithEntities2.apply(this,arguments);}return tryPropagateWithEntities;}()},{key:"markAsNeedRecalculation",value:function markAsNeedRecalculation(atom){this.getGraph().markAsNeedRecalculation(atom);}},{key:"markStable",value:function markStable(atom){this.getGraph().markStable(atom);}},{key:"run",value:function run(methodName){for(var _len67=arguments.length,args=new Array(_len67>1?_len67-1:0),_key66=1;_key66<_len67;_key66++){args[_key66-1]=arguments[_key66];}var iterator=this[methodName].apply(this,args);var iteratorValue;var nextArgs;do{iteratorValue=iterator.next(nextArgs);var value=iteratorValue.value;if(value instanceof Effect)throw new Error("Helper methods can not yield effects during computation");if(iteratorValue.done)return value;// TODO check for `value` to actually be ChronoAtom
var atom=value;if(this.getGraph().isAtomNeedRecalculation(atom))throw new Error("Can not use stale atom for calculations");nextArgs=atom.get();}while(true);}},{key:"$entity",get:function get(){// this will lazily create an EntityData instance in the prototype
return createEntityOnPrototype(this.constructor.prototype);}},{key:"$",get:function get(){var _this114=this;var atomsCollection={};this.$entity.forEachField(function(field,name){atomsCollection[name]=_this114.createFieldAtom(field);});return lazyBuild(this,'$',atomsCollection);}},{key:"$$",get:function get(){return lazyBuild(this,'$$',MinimalEntityAtom.new({entity:this.$entity,self:this,// entity atom is considered changed if any of its incoming atoms has changed
// this just means if it's calculation method has been called, it should always
// assign a new value
equality:function equality(){return false;},calculation:this.calculateSelf,calculationContext:this}));}}],[{key:"getField",value:function getField(name){return this.getEntity().getField(name);}},{key:"getEntity",value:function getEntity(){return ensureEntityOnPrototype(this.prototype);}}]);return Entity$$1;}(base);return Entity$$1;};//---------------------------------------------------------------------------------------------------------------------
var createEntityOnPrototype=function createEntityOnPrototype(proto){var parent=Object.getPrototypeOf(proto);return lazyBuild(proto,'$entity',Entity.new({parentEntity:parent.hasOwnProperty(isEntityMarker)?null:parent.$entity}));};//---------------------------------------------------------------------------------------------------------------------
var ensureEntityOnPrototype=function ensureEntityOnPrototype(proto){var entity=proto.$entity;if(!proto.hasOwnProperty('$entity'))entity=createEntityOnPrototype(proto);return entity;};/**
 * The "generic" field decorator, in the sense, that it allows specifying both field config and field class.
 * This means it can create any field instance.
 */var generic_field=function generic_field(fieldConfig){var fieldCls=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Field$1;return function(target,propertyKey){var entity=ensureEntityOnPrototype(target);var field=entity.addField(fieldCls.new(Object.assign(fieldConfig||{},{name:propertyKey})));if(field.createAccessors){Object.defineProperty(target,propertyKey,{get:function get(){return this.$[propertyKey].get();},set:function set(value){return this.$[propertyKey].put(value);}});var getterFnName="get".concat(uppercaseFirst(propertyKey));var setterFnName="set".concat(uppercaseFirst(propertyKey));if(!(getterFnName in target)){target[getterFnName]=function(){var _this$$$propertyKey;return(_this$$$propertyKey=this.$[propertyKey]).get.apply(_this$$$propertyKey,arguments);};}if(!(setterFnName in target)){target[setterFnName]=function(){var _this$$$propertyKey2;return(_this$$$propertyKey2=this.$[propertyKey]).set.apply(_this$$$propertyKey2,arguments);};}}};};//---------------------------------------------------------------------------------------------------------------------
var field=generic_field;//---------------------------------------------------------------------------------------------------------------------
var calculate=function calculate(fieldName){// `target` will be a prototype of the class with Entity mixin
return function(target,propertyKey,/*descriptor*/_){var calculations=target.$calculations;if(!calculations)calculations=target.$calculations={};calculations[fieldName]=propertyKey;};};//---------------------------------------------------------------------------------------------------------------------
var ReferenceFieldMixin=function ReferenceFieldMixin(base){return(/*#__PURE__*/function(_base15){_inherits2(ReferenceFieldMixin,_base15);function ReferenceFieldMixin(){var _this115;_classCallCheck2(this,ReferenceFieldMixin);_this115=_possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceFieldMixin).apply(this,arguments));_this115.atomCls=MinimalReferenceAtom;return _this115;}return ReferenceFieldMixin;}(base));};var ReferenceField=/*#__PURE__*/function(_ReferenceFieldMixin){_inherits2(ReferenceField,_ReferenceFieldMixin);function ReferenceField(){_classCallCheck2(this,ReferenceField);return _possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceField).apply(this,arguments));}return ReferenceField;}(ReferenceFieldMixin(Field$1));//---------------------------------------------------------------------------------------------------------------------
var ReferenceBucketFieldMixin=function ReferenceBucketFieldMixin(base){return(/*#__PURE__*/function(_base16){_inherits2(ReferenceBucketFieldMixin,_base16);function ReferenceBucketFieldMixin(){var _this116;_classCallCheck2(this,ReferenceBucketFieldMixin);_this116=_possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceBucketFieldMixin).apply(this,arguments));_this116.persistent=false;_this116.atomCls=MinimalReferenceBucketAtom;return _this116;}return ReferenceBucketFieldMixin;}(base));};var ReferenceBucketField=/*#__PURE__*/function(_ReferenceBucketField){_inherits2(ReferenceBucketField,_ReferenceBucketField);function ReferenceBucketField(){_classCallCheck2(this,ReferenceBucketField);return _possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceBucketField).apply(this,arguments));}return ReferenceBucketField;}(ReferenceBucketFieldMixin(Field$1));//---------------------------------------------------------------------------------------------------------------------
var bucket=function bucket(fieldConfig){var fieldCls=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ReferenceBucketField;return generic_field(fieldConfig,fieldCls);};var reference=function reference(fieldConfig){var fieldCls=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ReferenceField;return generic_field(fieldConfig,fieldCls);};//---------------------------------------------------------------------------------------------------------------------
var ReferenceBucketAtom=function ReferenceBucketAtom(base){return(/*#__PURE__*/function(_base17){_inherits2(ReferenceBucketAtom,_base17);function ReferenceBucketAtom(){var _this117;_classCallCheck2(this,ReferenceBucketAtom);_this117=_possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceBucketAtom).apply(this,arguments));_this117.oldRefs=new Set();_this117.newRefs=new Set();_this117.value=new Set();return _this117;}_createClass2(ReferenceBucketAtom,[{key:"commitValue",value:function commitValue(){_get2(_getPrototypeOf2(ReferenceBucketAtom.prototype),"commitValue",this).call(this);this.oldRefs.clear();this.newRefs.clear();}},{key:"reject",value:function reject(){_get2(_getPrototypeOf2(ReferenceBucketAtom.prototype),"reject",this).call(this);this.oldRefs.clear();this.newRefs.clear();}},{key:"calculate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculate(proposedValue){var result,atom,_iteratorNormalCompletion57,_didIteratorError57,_iteratorError57,_iterator57,_step57,referencee,_iteratorNormalCompletion58,_didIteratorError58,_iteratorError58,_iterator58,_step58,_referencee;return regeneratorRuntime.wrap(function calculate$(_context42){while(1){switch(_context42.prev=_context42.next){case 0:result=new Set();_iteratorNormalCompletion57=true;_didIteratorError57=false;_iteratorError57=undefined;_context42.prev=4;_iterator57=this.incoming[Symbol.iterator]();case 6:if(_iteratorNormalCompletion57=(_step57=_iterator57.next()).done){_context42.next=16;break;}atom=_step57.value;if(this.oldRefs.has(atom)){_context42.next=13;break;}_context42.next=11;return atom;case 11:referencee=_context42.sent;if(referencee!=null)result.add(referencee);case 13:_iteratorNormalCompletion57=true;_context42.next=6;break;case 16:_context42.next=22;break;case 18:_context42.prev=18;_context42.t0=_context42["catch"](4);_didIteratorError57=true;_iteratorError57=_context42.t0;case 22:_context42.prev=22;_context42.prev=23;if(!_iteratorNormalCompletion57&&_iterator57.return!=null){_iterator57.return();}case 25:_context42.prev=25;if(!_didIteratorError57){_context42.next=28;break;}throw _iteratorError57;case 28:return _context42.finish(25);case 29:return _context42.finish(22);case 30:_iteratorNormalCompletion58=true;_didIteratorError58=false;_iteratorError58=undefined;_context42.prev=33;_iterator58=this.newRefs[Symbol.iterator]();case 35:if(_iteratorNormalCompletion58=(_step58=_iterator58.next()).done){_context42.next=44;break;}atom=_step58.value;_context42.next=39;return atom;case 39:_referencee=_context42.sent;if(_referencee!=null)result.add(_referencee);case 41:_iteratorNormalCompletion58=true;_context42.next=35;break;case 44:_context42.next=50;break;case 46:_context42.prev=46;_context42.t1=_context42["catch"](33);_didIteratorError58=true;_iteratorError58=_context42.t1;case 50:_context42.prev=50;_context42.prev=51;if(!_iteratorNormalCompletion58&&_iterator58.return!=null){_iterator58.return();}case 53:_context42.prev=53;if(!_didIteratorError58){_context42.next=56;break;}throw _iteratorError58;case 56:return _context42.finish(53);case 57:return _context42.finish(50);case 58:return _context42.abrupt("return",result);case 59:case"end":return _context42.stop();}}},calculate,this,[[4,18,22,30],[23,,25,29],[33,46,50,58],[51,,53,57]]);})}]);return ReferenceBucketAtom;}(base));};var MinimalReferenceBucketAtom=/*#__PURE__*/function(_ReferenceBucketAtom){_inherits2(MinimalReferenceBucketAtom,_ReferenceBucketAtom);function MinimalReferenceBucketAtom(){_classCallCheck2(this,MinimalReferenceBucketAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalReferenceBucketAtom).apply(this,arguments));}return MinimalReferenceBucketAtom;}(ReferenceBucketAtom(MinimalFieldAtom));//---------------------------------------------------------------------------------------------------------------------
var ReferenceAtom=function ReferenceAtom(base){return(/*#__PURE__*/function(_base18){_inherits2(ReferenceAtom,_base18);function ReferenceAtom(){_classCallCheck2(this,ReferenceAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(ReferenceAtom).apply(this,arguments));}_createClass2(ReferenceAtom,[{key:"hasBucket",value:function hasBucket(){return Boolean(this.field.bucket);}},{key:"addToBucket",value:function addToBucket(bucket){bucket.newRefs.add(this.self.$$);this.graph&&this.graph.markAsNeedRecalculation(bucket);}},{key:"removeFromBucket",value:function removeFromBucket(bucket){bucket.oldRefs.add(this.self.$$);this.graph&&this.graph.markAsNeedRecalculation(bucket);}},{key:"calculate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculate(proposedValue){var value;return regeneratorRuntime.wrap(function calculate$(_context43){while(1){switch(_context43.prev=_context43.next){case 0:value=this.resolve(proposedValue!==undefined?proposedValue:this.value);// add an incoming edge from the referencee's self-atom
if(isAtomicValue(value)){_context43.next=4;break;}_context43.next=4;return value.$$;case 4:return _context43.abrupt("return",value);case 5:case"end":return _context43.stop();}}},calculate,this);})},{key:"resolve",value:function resolve(referencee){var resolver=this.field.resolver;if(resolver&&referencee!==undefined&&isAtomicValue(referencee)){return resolver.call(this.self,referencee);}else{return referencee;}}},{key:"getBucket",value:function getBucket(entity){return entity.$[this.field.bucket];}},{key:"onEnterGraph",value:function onEnterGraph(graph){var value=this.get();var resolves=true;if(value!==undefined&&isAtomicValue(value)){resolves=false;var resolved=this.resolve(value);// last point where it is safe to just rewrite own value
// after `super.onEnterGraph` that will be causing effects outside of atom
if(!isAtomicValue(resolved)){this.put(resolved);resolves=true;}}_get2(_getPrototypeOf2(ReferenceAtom.prototype),"onEnterGraph",this).call(this,graph);if(this.get()!==undefined&&resolves&&this.hasBucket()){var referenceBucket=this.getBucket(this.get());this.addToBucket(referenceBucket);}}},{key:"onLeaveGraph",value:function onLeaveGraph(graph){if(this.hasValue()&&this.hasBucket()){var value=this.get();if(!isAtomicValue(value)){var referenceBucket=this.getBucket(value);this.removeFromBucket(referenceBucket);}}_get2(_getPrototypeOf2(ReferenceAtom.prototype),"onLeaveGraph",this).call(this,graph);}},{key:"put",value:function put(nextValue){var value=this.value;if(this.hasBucket()){// value is not empty and resolved to entity
if(value!=null&&!isAtomicValue(value)){this.removeFromBucket(this.getBucket(value));}if(nextValue!=null){if(isAtomicValue(nextValue)){var newValue=this.resolve(nextValue);if(newValue!=null){this.addToBucket(this.getBucket(newValue));nextValue=newValue;}}else{this.addToBucket(this.getBucket(nextValue));}}}_get2(_getPrototypeOf2(ReferenceAtom.prototype),"put",this).call(this,nextValue);}}]);return ReferenceAtom;}(base));};var MinimalReferenceAtom=/*#__PURE__*/function(_ReferenceAtom){_inherits2(MinimalReferenceAtom,_ReferenceAtom);function MinimalReferenceAtom(){_classCallCheck2(this,MinimalReferenceAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalReferenceAtom).apply(this,arguments));}return MinimalReferenceAtom;}(ReferenceAtom(FieldAtom(MinimalChronoAtom)));//---------------------------------------------------------------------------------------------------------------------
var ModelField=/*#__PURE__*/function(_Field$){_inherits2(ModelField,_Field$);function ModelField(){var _this118;_classCallCheck2(this,ModelField);_this118=_possibleConstructorReturn2(this,_getPrototypeOf2(ModelField).apply(this,arguments));_this118.atomCls=ChronoModelFieldAtom;_this118.modelFieldConfig={};return _this118;}return ModelField;}(Field$1);//---------------------------------------------------------------------------------------------------------------------
var ModelReferenceField=/*#__PURE__*/function(_ReferenceFieldMixin2){_inherits2(ModelReferenceField,_ReferenceFieldMixin2);function ModelReferenceField(){var _this119;_classCallCheck2(this,ModelReferenceField);_this119=_possibleConstructorReturn2(this,_getPrototypeOf2(ModelReferenceField).apply(this,arguments));_this119.atomCls=ChronoModelReferenceFieldAtom;return _this119;}return ModelReferenceField;}(ReferenceFieldMixin(ModelField));//---------------------------------------------------------------------------------------------------------------------
var ModelBucketField=/*#__PURE__*/function(_ReferenceBucketField2){_inherits2(ModelBucketField,_ReferenceBucketField2);function ModelBucketField(){var _this120;_classCallCheck2(this,ModelBucketField);_this120=_possibleConstructorReturn2(this,_getPrototypeOf2(ModelBucketField).apply(this,arguments));_this120.atomCls=ChronoModelReferenceBucketFieldAtom;return _this120;}_createClass2(ModelBucketField,[{key:"initialize",value:function initialize(){var _get24;for(var _len68=arguments.length,args=new Array(_len68),_key67=0;_key67<_len68;_key67++){args[_key67]=arguments[_key67];}(_get24=_get2(_getPrototypeOf2(ModelBucketField.prototype),"initialize",this)).call.apply(_get24,[this].concat(args));this.modelFieldConfig=Object.assign({isEqual:function isEqual(){return false;},defaultValue:new Set(),persist:false},this.modelFieldConfig);}}]);return ModelBucketField;}(ReferenceBucketFieldMixin(ModelField));// eof Fields
// Atoms
//---------------------------------------------------------------------------------------------------------------------
var ChronoModelFieldAtom=/*#__PURE__*/function(_MinimalFieldAtom){_inherits2(ChronoModelFieldAtom,_MinimalFieldAtom);function ChronoModelFieldAtom(){_classCallCheck2(this,ChronoModelFieldAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChronoModelFieldAtom).apply(this,arguments));}_createClass2(ChronoModelFieldAtom,[{key:"value",get:function get(){return this.self.get(this.field.name);},set:function set(value){this.self.set(this.field.name,value);}}]);return ChronoModelFieldAtom;}(MinimalFieldAtom);//---------------------------------------------------------------------------------------------------------------------
var ChronoModelReferenceFieldAtom=/*#__PURE__*/function(_ReferenceAtom2){_inherits2(ChronoModelReferenceFieldAtom,_ReferenceAtom2);function ChronoModelReferenceFieldAtom(){_classCallCheck2(this,ChronoModelReferenceFieldAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChronoModelReferenceFieldAtom).apply(this,arguments));}return ChronoModelReferenceFieldAtom;}(ReferenceAtom(ChronoModelFieldAtom));//---------------------------------------------------------------------------------------------------------------------
var ChronoModelReferenceBucketFieldAtom=/*#__PURE__*/function(_ReferenceBucketAtom2){_inherits2(ChronoModelReferenceBucketFieldAtom,_ReferenceBucketAtom2);function ChronoModelReferenceBucketFieldAtom(){_classCallCheck2(this,ChronoModelReferenceBucketFieldAtom);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChronoModelReferenceBucketFieldAtom).apply(this,arguments));}_createClass2(ChronoModelReferenceBucketFieldAtom,[{key:"value",get:function get(){if(!this.self)return;return this.self.get(this.field.name);},set:function set(value){// this can be only setting of the default value from the property
// initializer (from the "engine" bucket)
if(!this.self)return;this.self.set(this.field.name,value);}}]);return ChronoModelReferenceBucketFieldAtom;}(ReferenceBucketAtom(ChronoModelFieldAtom));// eof Atoms
var model_field=function model_field(){var modelFieldConfig=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var chronoFieldConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return function(target,propertyKey){var decoratorFn=generic_field(Object.assign({modelFieldConfig:modelFieldConfig},chronoFieldConfig),ModelField);decoratorFn(target,propertyKey);injectStaticFieldsProperty(target.constructor);};};var injectStaticFieldsProperty=function injectStaticFieldsProperty(prototype){if(!prototype.hasOwnProperty('fields')){Object.defineProperty(prototype,'fields',{get:function get(){return getDecoratedModelFields(this);}});}};var getDecoratedModelFields=function getDecoratedModelFields(constr){var result=[];var proto=constr.prototype;if(proto.hasOwnProperty('$entity'))proto.$entity.fields.forEach(function(field$$1){if(field$$1 instanceof ModelField){result.push(Object.assign(field$$1.modelFieldConfig||{},{name:field$$1.name}));}});return result;};var dateConverter=function dateConverter(date,field$$1){if(date===null)return null;if(!(date instanceof Date)){date=DateHelper.parse(date,field$$1.modelFieldConfig.format||field$$1.modelFieldConfig.dateFormat);}// if parsing has failed, we would like to return `undefined` to indicate the "absence" of data
// instead of `null` (presence of "empty" data)
return date||undefined;};var PartOfProjectGenericMixin=function PartOfProjectGenericMixin(base){var PartOfProjectGenericMixin=/*#__PURE__*/function(_base19){_inherits2(PartOfProjectGenericMixin,_base19);function PartOfProjectGenericMixin(){_classCallCheck2(this,PartOfProjectGenericMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(PartOfProjectGenericMixin).apply(this,arguments));}_createClass2(PartOfProjectGenericMixin,[{key:"calculateProject",value:function calculateProject(){throw new Error("Implement me");}/**
         * The method to set the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"setProject",value:function setProject(project){return this.project=project;}/**
         * The method to get the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getProject",value:function getProject(){if(this.project)return this.project;return this.setProject(this.calculateProject());}/**
         * The method to get the `ChronoGraph` instance, this entity belongs to.
         */},{key:"getGraph",value:function getGraph(){var project=this.getProject();return project&&project.getGraph();}/**
         * Convenience method to get the instance of the event store in the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getEventStore",value:function getEventStore(){var project=this.getProject();return project&&project.eventStore;}/**
         * Convenience method to get the instance of the dependency store in the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getDependencyStore",value:function getDependencyStore(){var project=this.getProject();return project&&project.dependencyStore;}/**
         * Convenience method to get the instance of the assignment store in the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getAssignmentStore",value:function getAssignmentStore(){var project=this.getProject();return project&&project.assignmentStore;}/**
         * Convenience method to get the instance of the resource store in the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getResourceStore",value:function getResourceStore(){var project=this.getProject();return project&&project.resourceStore;}/**
         * Convenience method to get the instance of the calendar manager store in the [[ProjectMixin]] instance, this entity belongs to.
         */},{key:"getCalendarManagerStore",value:function getCalendarManagerStore(){var project=this.getProject();return project&&project.calendarManagerStore;}// EOF Store getters
// Entity getters
},{key:"getEventById",value:function getEventById(id){return this.getEventStore()&&this.getEventStore().getById(id);}},{key:"getDependencyById",value:function getDependencyById(id){return this.getDependencyStore()&&this.getDependencyStore().getById(id);}},{key:"getResourceById",value:function getResourceById(id){return this.getResourceStore()&&this.getResourceStore().getById(id);}},{key:"getAssignmentById",value:function getAssignmentById(id){return this.getAssignmentStore()&&this.getAssignmentStore().getById(id);}},{key:"getCalendarById",value:function getCalendarById(id){return this.getCalendarManagerStore()&&this.getCalendarManagerStore().getById(id);}}]);return PartOfProjectGenericMixin;}(base);return PartOfProjectGenericMixin;};var __decorate=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var HasCalendarMixin=function HasCalendarMixin(base){var HasCalendarMixin=/*#__PURE__*/function(_base20){_inherits2(HasCalendarMixin,_base20);function HasCalendarMixin(){var _this121;_classCallCheck2(this,HasCalendarMixin);_this121=_possibleConstructorReturn2(this,_getPrototypeOf2(HasCalendarMixin).apply(this,arguments));_this121.calendarInherited=true;return _this121;}_createClass2(HasCalendarMixin,[{key:"setCalendar",value:function(){var _setCalendar=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee38(calendar){return regeneratorRuntime.wrap(function _callee38$(_context44){while(1){switch(_context44.prev=_context44.next){case 0:this.calendar=calendar;return _context44.abrupt("return",this.propagate());case 2:case"end":return _context44.stop();}}},_callee38,this);}));function setCalendar(_x66){return _setCalendar.apply(this,arguments);}return setCalendar;}()},{key:"getCalendar",value:function getCalendar(){return this.calendar;}},{key:"calculateCalendar",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCalendar(proposedValue){var calendarManager,resolved,calendar,project;return regeneratorRuntime.wrap(function calculateCalendar$(_context45){while(1){switch(_context45.prev=_context45.next){case 0:calendarManager=this.getCalendarManagerStore();if(!(proposedValue!=null)){_context45.next=7;break;}if(isAtomicValue(proposedValue)){resolved=calendarManager.getById(proposedValue)||null;proposedValue=resolved;}this.calendarInherited=false;calendar=proposedValue;// keep own, not inherited calendar, in the absence of proposed value
_context45.next=17;break;case 7:if(!(proposedValue===undefined&&this.$.calendar.hasConsistentValue()&&!this.calendarInherited)){_context45.next=11;break;}calendar=this.$.calendar.getConsistentValue();// let's use the project calendar
_context45.next=17;break;case 11:project=this.getProject();// unless 'this' represents the project itself
// @ts-ignore
if(!(project!==this)){_context45.next=17;break;}_context45.next=15;return project.$.calendar;case 15:calendar=_context45.sent;this.calendarInherited=true;case 17:_context45.t0=!isAtomicValue(calendar);if(!_context45.t0){_context45.next=21;break;}_context45.next=21;return calendar.$$;case 21:return _context45.abrupt("return",calendar);case 22:case"end":return _context45.stop();}}},calculateCalendar,this);})}]);return HasCalendarMixin;}(base);__decorate([model_field({serialize:function serialize(calendar){return calendar.id;}})],HasCalendarMixin.prototype,"calendar",void 0);__decorate([calculate('calendar')],HasCalendarMixin.prototype,"calculateCalendar",null);return HasCalendarMixin;};//export type HasCalendarMixin = Mixin<typeof HasCalendarMixin>
var ChronoModelMixin=function ChronoModelMixin(base){var ChronoModelMixin=/*#__PURE__*/function(_base21){_inherits2(ChronoModelMixin,_base21);function ChronoModelMixin(){_classCallCheck2(this,ChronoModelMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChronoModelMixin).apply(this,arguments));}_createClass2(ChronoModelMixin,[{key:"construct",value:function construct(config){var _get25;// this is to force the fields creation, because we need all fields to be created
// for the `this.getFieldDefinition()` to return correct result
// @ts-ignore
this.constructor.exposeProperties();var commonConfig={};var chronoConfig={};// Cache original data before we recreate the incoming data here.
// @ts-ignore
this.originalData=config=config||{};for(var key in config){var chronoField=this.$entity.getField(key);if(this.getFieldDefinition(key)&&!chronoField||key=='expanded'||key=='children')commonConfig[key]=config[key];else{chronoConfig[key]=config[key];}}for(var _len69=arguments.length,args=new Array(_len69>1?_len69-1:0),_key68=1;_key68<_len69;_key68++){args[_key68-1]=arguments[_key68];}(_get25=_get2(_getPrototypeOf2(ChronoModelMixin.prototype),"construct",this)).call.apply(_get25,[this,commonConfig].concat(args));Object.assign(this,chronoConfig);}},{key:"copy",value:function copy(){var newId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var proposed=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var copy=_get2(_getPrototypeOf2(ChronoModelMixin.prototype),"copy",this).call(this,newId);proposed&&this.forEachFieldAtom(function(atom,fieldName){copy.$[fieldName].put(atom.get());});return copy;}}]);return ChronoModelMixin;}(base);return ChronoModelMixin;};var hasMixin=Symbol('PartOfProjectStoreMixin');var PartOfProjectStoreMixin=function PartOfProjectStoreMixin(base){var PartOfProjectStoreMixin=/*#__PURE__*/function(_base22){_inherits2(PartOfProjectStoreMixin,_base22);function PartOfProjectStoreMixin(){_classCallCheck2(this,PartOfProjectStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(PartOfProjectStoreMixin).apply(this,arguments));}_createClass2(PartOfProjectStoreMixin,[{key:hasMixin,value:function value(){}},{key:"calculateProject",value:function calculateProject(){// project is supposed to be provided for stores from outside
return this.project;}},{key:"loadData",value:function loadData(data){_get2(_getPrototypeOf2(PartOfProjectStoreMixin.prototype),"loadData",this).call(this,data);var project=this.getProject();project&&project.trigger('storerefresh',{store:this});}}]);return PartOfProjectStoreMixin;}(base);return PartOfProjectStoreMixin;};/**
 * Type guard
 */var hasPartOfProjectStoreMixin=function hasPartOfProjectStoreMixin(store){return Boolean(store&&store[hasMixin]);};var PartOfProjectMixin=function PartOfProjectMixin(base){var PartOfProjectMixin=/*#__PURE__*/function(_base23){_inherits2(PartOfProjectMixin,_base23);function PartOfProjectMixin(){_classCallCheck2(this,PartOfProjectMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(PartOfProjectMixin).apply(this,arguments));}_createClass2(PartOfProjectMixin,[{key:"joinStore",value:function joinStore(store){var joinedProject=false;// Joining a store that is not part of project (for example a chained store) should not affect engine
if(hasPartOfProjectStoreMixin(store)){var project=store.getProject();if(project&&!this.getProject()&&!this.isShadowed()){this.setProject(project);joinedProject=true;}}_get2(_getPrototypeOf2(PartOfProjectMixin.prototype),"joinStore",this).call(this,store);if(joinedProject)this.joinProject();}},{key:"unJoinStore",value:function unJoinStore(store){_get2(_getPrototypeOf2(PartOfProjectMixin.prototype),"unJoinStore",this).call(this,store);var project=this.isShadowed()?this.shadowedProject:this.getProject();if(hasPartOfProjectStoreMixin(store)&&project&&project===store.getProject()){this.leaveProject();this.setProject(null);this.shadowedProject=null;}}/**
         * Template method, which is called when model is joining the project (through joining some store that
         * has already joined the project)
         */},{key:"joinProject",value:function joinProject(){this.getGraph().addEntity(this);}/**
         * Template method, which is called when model is leaving the project (through leaving some store usually)
         */},{key:"leaveProject",value:function leaveProject(){if(!this.isShadowed()){this.getGraph().removeEntity(this);}}/**
         * Shadows an entity from a project until {@link #function~unshadow unshadow()} method call.
         *
         * Shadowed entity do not affect the project, their atoms are excluded from the graph and thus do not take part
         * in the propagation process.
         */},{key:"shadow",value:function shadow(){var project=this.getProject();if(project){this.leaveProject();this.setProject(null);this.shadowedProject=project;}return this;}/**
         * Unshadows entity preveosly shadowed by {@link #function~shadow shadow()} call.
         */},{key:"unshadow",value:function unshadow(){if(this.shadowedProject){this.setProject(this.shadowedProject);this.shadowedProject=null;this.joinProject();}return this;}/**
         * Checks if an entity has been shadowed
         */},{key:"isShadowed",value:function isShadowed(){return!!this.shadowedProject;}},{key:"getProject",value:function getProject(){return this.isShadowed()?null:_get2(_getPrototypeOf2(PartOfProjectMixin.prototype),"getProject",this).call(this);}},{key:"calculateProject",value:function calculateProject(){// const store = this.stores[0];
// return store && store.getProject();
var store=this.stores.find(function(s){return hasPartOfProjectStoreMixin(s)&&!!s.getProject();});return store&&store.getProject();}},{key:"afterSet",value:function afterSet(field,value,silent,fromRelationUpdate,beforeResult,wasSet){var _this122=this;// When undoing old data is set directly to the data object bypassing
// accessors, which puts atoms like constraintDate into outdated state.
// Iterating over modified fields and updating required atoms manually
if(wasSet&&this.getProject()&&this.getProject().getStm().isRestoring){Object.keys(wasSet).forEach(function(key){var atom=_this122.$[key];// touch atoms affected by undo operation
if(atom&&atom.graph){atom.graph.markAsNeedRecalculation(atom);}});}_get2(_getPrototypeOf2(PartOfProjectMixin.prototype),"afterSet",this)&&_get2(_getPrototypeOf2(PartOfProjectMixin.prototype),"afterSet",this).call(this,field,value,silent,fromRelationUpdate,beforeResult,wasSet);}}]);return PartOfProjectMixin;}(base);return PartOfProjectMixin;};var __decorate$1=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$1=Symbol('ResourceMixin');var ResourceMixin=function ResourceMixin(base){var ResourceMixin=/*#__PURE__*/function(_base24){_inherits2(ResourceMixin,_base24);function ResourceMixin(){_classCallCheck2(this,ResourceMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceMixin).apply(this,arguments));}_createClass2(ResourceMixin,[{key:hasMixin$1,value:function value(){}/**
         * The `Array` of [[AssignmentMixin]] instances, related to this resource
         */},{key:"leaveProject",value:function leaveProject(){var assignmentStore=this.getAssignmentStore();this.assigned.forEach(function(assignment){return assignmentStore.remove(assignment);});_get2(_getPrototypeOf2(ResourceMixin.prototype),"leaveProject",this).call(this);}},{key:"assignments",get:function get(){return _toConsumableArray(this.assigned);}}]);return ResourceMixin;}(base);__decorate$1([model_field({type:'string'})],ResourceMixin.prototype,"name",void 0);__decorate$1([generic_field({},ModelBucketField)],ResourceMixin.prototype,"assigned",void 0);return ResourceMixin;};/**
 * A function to build a constructor of minimal possible [[ResourceMixin]] class.
 */var BuildMinimalResource=function BuildMinimalResource(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return ResourceMixin(HasCalendarMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(base))))));};/**
 * A minimal possible [[ResourceMixin]] class.
 */var MinimalResource=/*#__PURE__*/function(_BuildMinimalResource){_inherits2(MinimalResource,_BuildMinimalResource);function MinimalResource(){_classCallCheck2(this,MinimalResource);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalResource).apply(this,arguments));}return MinimalResource;}(BuildMinimalResource());/**
 * @private
 * Strips duplicate entries from an array
 */var stripDuplicates=function stripDuplicates(array){var seen=new Map();return array.filter(function(el){if(seen.has(el))return false;seen.set(el,true);return true;});};/**
 * The enumeration for the time units
 */var TimeUnit;exports.TimeUnit=TimeUnit;(function(TimeUnit){TimeUnit["Millisecond"]="millisecond";TimeUnit["Second"]="second";TimeUnit["Minute"]="minute";TimeUnit["Hour"]="hour";TimeUnit["Day"]="day";TimeUnit["Week"]="week";TimeUnit["Month"]="month";TimeUnit["Quarter"]="quarter";TimeUnit["Year"]="year";})(TimeUnit||(exports.TimeUnit=TimeUnit={}));/**
 * The enumeration for the supported constraint types
 */var ConstraintType;exports.ConstraintType=ConstraintType;(function(ConstraintType){ConstraintType["MustStartOn"]="muststarton";ConstraintType["MustFinishOn"]="mustfinishon";ConstraintType["StartNoEarlierThan"]="startnoearlierthan";ConstraintType["StartNoLaterThan"]="startnolaterthan";ConstraintType["FinishNoEarlierThan"]="finishnoearlierthan";ConstraintType["FinishNoLaterThan"]="finishnolaterthan";})(ConstraintType||(exports.ConstraintType=ConstraintType={}));/**
 * The enumeration for the supported scheduling modes
 */var SchedulingMode;exports.SchedulingMode=SchedulingMode;(function(SchedulingMode){SchedulingMode["Normal"]="Normal";SchedulingMode["FixedDuration"]="FixedDuration";SchedulingMode["FixedEffort"]="FixedEffort";SchedulingMode["FixedUnits"]="FixedUnits";})(SchedulingMode||(exports.SchedulingMode=SchedulingMode={}));/**
 * The enumeration for the supported dependency types
 */var DependencyType;(function(DependencyType){DependencyType[DependencyType["StartToStart"]=0]="StartToStart";DependencyType[DependencyType["StartToEnd"]=1]="StartToEnd";DependencyType[DependencyType["EndToStart"]=2]="EndToStart";DependencyType[DependencyType["EndToEnd"]=3]="EndToEnd";})(DependencyType||(DependencyType={}));/**
 * The enumeration for the supported sources of the calendar for the dependency.
 */var DependenciesCalendar;(function(DependenciesCalendar){DependenciesCalendar["Project"]="Project";DependenciesCalendar["FromEvent"]="FromEvent";DependenciesCalendar["ToEvent"]="ToEvent";})(DependenciesCalendar||(DependenciesCalendar={}));// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1
var MIN_DATE=new Date(-8640000000000000);var MAX_DATE=new Date(8640000000000000);var EdgeInclusion;(function(EdgeInclusion){EdgeInclusion[EdgeInclusion["Left"]=0]="Left";EdgeInclusion[EdgeInclusion["Right"]=1]="Right";})(EdgeInclusion||(EdgeInclusion={}));var CalendarIteratorResult;(function(CalendarIteratorResult){CalendarIteratorResult[CalendarIteratorResult["FullRangeIterated"]=0]="FullRangeIterated";CalendarIteratorResult[CalendarIteratorResult["StoppedByIterator"]=1]="StoppedByIterator";CalendarIteratorResult[CalendarIteratorResult["MaxCacheExtendCyclesReached"]=2]="MaxCacheExtendCyclesReached";})(CalendarIteratorResult||(CalendarIteratorResult={}));var CalendarCache=/*#__PURE__*/function(){function CalendarCache(config){_classCallCheck2(this,CalendarCache);this.cacheFilledStartDate=MAX_DATE;this.cacheFilledEndDate=MIN_DATE;this.intervalsCachingChunkDuration=30;this.intervalsCachingChunkUnit=TimeUnit.Day;this.maxCacheExtendCycles=1000;config&&Object.assign(this,config);}_createClass2(CalendarCache,[{key:"includeWrappingRangeFrom",value:function includeWrappingRangeFrom(cache,startDate,endDate){cache.ensureCacheFilledForInterval(startDate,endDate);this.intervalCache.includeWrappingRange(cache.intervalCache,startDate,endDate);}// after this method, we guarantee, that for every point between `startDate` and `endDate` (_inclusive_)
// we'll have a final representation of the cache, that is, we'll be able to get an interval to which this point belongs
// _both_ for forward and backward directions
},{key:"ensureCacheFilledForInterval",value:function ensureCacheFilledForInterval(startDate,endDate){var cacheFilledStartDateN=this.cacheFilledStartDate.getTime();var cacheFilledEndDateN=this.cacheFilledEndDate.getTime();if(cacheFilledStartDateN!==MAX_DATE.getTime()){var startDateN=startDate.getTime();var endDateN=endDate.getTime();if(cacheFilledStartDateN<=startDateN&&endDateN<=cacheFilledEndDateN)return;// asked to cache an interval which is to the left from the cached area - extend to the right
if(endDateN<=cacheFilledStartDateN){endDate=new Date(cacheFilledStartDateN-1);}else if(startDateN>=cacheFilledEndDateN){startDate=new Date(cacheFilledEndDateN+1);}else if(cacheFilledStartDateN<=startDateN&&startDateN<=cacheFilledEndDateN){startDate=new Date(cacheFilledEndDateN+1);}else if(cacheFilledStartDateN<=endDateN&&endDateN<=cacheFilledEndDateN){endDate=new Date(cacheFilledStartDateN-1);}else{this.ensureCacheFilledForInterval(startDate,new Date(cacheFilledStartDateN-1));this.ensureCacheFilledForInterval(new Date(cacheFilledEndDateN+1),endDate);return;}}if(cacheFilledStartDateN===MAX_DATE.getTime()||startDate.getTime()<cacheFilledEndDateN){this.cacheFilledStartDate=startDate;}if(cacheFilledEndDateN===MIN_DATE.getTime()||cacheFilledEndDateN<endDate.getTime()){this.cacheFilledEndDate=endDate;}this.fillCache(startDate,endDate);}},{key:"fillCache",value:function fillCache(_1/* startDate */,_2/* endDate */){throw new Error("Abstract method");}},{key:"clear",value:function clear(){this.cacheFilledStartDate=MAX_DATE;this.cacheFilledEndDate=MIN_DATE;this.intervalCache.clear();}},{key:"forEachAvailabilityInterval",value:function forEachAvailabilityInterval(options,func,scope){scope=scope||this;var startDate=options.startDate;var endDate=options.endDate;var startDateN=startDate&&startDate.getTime();var endDateN=endDate&&endDate.getTime();// `isForward = true` by default
var isForward=options.isForward!==false;if(isForward?!startDate:!endDate){throw new Error("At least `startDate` or `endDate` is required, depending from the `isForward` option");}var intervalCache=this.intervalCache;var cacheCursorDate=isForward?startDate:endDate;var cursorDate=isForward?startDate:endDate;// this is generally an endless loop, but we artificially limit it to `maxCacheExtendCycles` iterations
// to avoid freezing in unforeseen edge cases
for(var cycle=1;cycle<this.maxCacheExtendCycles;cycle++){if(isForward){this.ensureCacheFilledForInterval(cacheCursorDate,endDate||DateHelper.add(cacheCursorDate,this.intervalsCachingChunkDuration,this.intervalsCachingChunkUnit));}else{this.ensureCacheFilledForInterval(startDate||DateHelper.add(cacheCursorDate,-this.intervalsCachingChunkDuration,this.intervalsCachingChunkUnit),cacheCursorDate);}var interval=intervalCache.getIntervalOf(cursorDate,isForward?EdgeInclusion.Left:EdgeInclusion.Right);while(interval){var intervalStartDate=interval.startDate;var intervalEndDate=interval.endDate;// out of requested range - all done
if(isForward&&endDateN&&intervalStartDate.getTime()>=endDateN||!isForward&&startDateN&&intervalEndDate.getTime()<=startDateN){return CalendarIteratorResult.FullRangeIterated;}// we are out of cached area, need to extend the cache
if(isForward&&intervalStartDate.getTime()>this.cacheFilledEndDate.getTime()||!isForward&&intervalEndDate.getTime()<this.cacheFilledStartDate.getTime()){break;}// save the last processed point, from which we should start after cache will be extended
cursorDate=isForward?intervalEndDate:intervalStartDate;// adjust to start / end date limits in iterator
var countFrom=startDateN&&intervalStartDate.getTime()<startDateN?startDate:intervalStartDate;var countTill=endDateN&&intervalEndDate.getTime()>endDateN?endDate:intervalEndDate;if(func.call(scope,countFrom,countTill,interval.cacheInterval)===false){// indicates premature exit if iterator returns `false`
return CalendarIteratorResult.StoppedByIterator;}interval=isForward?intervalCache.getNextInterval(interval):intervalCache.getPrevInterval(interval);}if(isForward&&cursorDate.getTime()===MAX_DATE.getTime()||!isForward&&cursorDate.getTime()===MIN_DATE.getTime()){return CalendarIteratorResult.FullRangeIterated;}cacheCursorDate=isForward?this.cacheFilledEndDate:this.cacheFilledStartDate;}return CalendarIteratorResult.MaxCacheExtendCyclesReached;}}]);return CalendarCache;}();var CalendarCacheIntervalMultiple=/*#__PURE__*/function(){function CalendarCacheIntervalMultiple(config){_classCallCheck2(this,CalendarCacheIntervalMultiple);this.intervalGroups=[];config&&Object.assign(this,config);}_createClass2(CalendarCacheIntervalMultiple,[{key:"combineWith",value:function combineWith(interval){var copy=this.intervalGroups.slice();copy.push([interval.calendar,interval]);return new CalendarCacheIntervalMultiple({intervalGroups:copy});}},{key:"getIsWorkingForEvery",value:function getIsWorkingForEvery(){if(this.isWorkingForEvery!=null)return this.isWorkingForEvery;var _iteratorNormalCompletion59=true;var _didIteratorError59=false;var _iteratorError59=undefined;try{for(var _iterator59=this.getGroups()[Symbol.iterator](),_step59;!(_iteratorNormalCompletion59=(_step59=_iterator59.next()).done);_iteratorNormalCompletion59=true){var _step59$value=_slicedToArray(_step59.value,2),_calendar=_step59$value[0],intervals=_step59$value[1];if(!intervals[0].isWorking)return this.isWorkingForEvery=false;}}catch(err){_didIteratorError59=true;_iteratorError59=err;}finally{try{if(!_iteratorNormalCompletion59&&_iterator59.return!=null){_iterator59.return();}}finally{if(_didIteratorError59){throw _iteratorError59;}}}return this.isWorkingForEvery=true;}},{key:"getIsWorkingForSome",value:function getIsWorkingForSome(){if(this.isWorkingForSome!=null)return this.isWorkingForSome;var _iteratorNormalCompletion60=true;var _didIteratorError60=false;var _iteratorError60=undefined;try{for(var _iterator60=this.getGroups()[Symbol.iterator](),_step60;!(_iteratorNormalCompletion60=(_step60=_iterator60.next()).done);_iteratorNormalCompletion60=true){var _step60$value=_slicedToArray(_step60.value,2),_calendar=_step60$value[0],intervals=_step60$value[1];if(intervals[0].isWorking)return this.isWorkingForSome=true;}}catch(err){_didIteratorError60=true;_iteratorError60=err;}finally{try{if(!_iteratorNormalCompletion60&&_iterator60.return!=null){_iterator60.return();}}finally{if(_didIteratorError60){throw _iteratorError60;}}}return this.isWorkingForSome=false;}},{key:"getCalendars",value:function getCalendars(){this.getGroups();return this.calendars;}},{key:"isCalendarWorking",value:function isCalendarWorking(calendar){return this.getCalendarsWorkStatus().get(calendar);}},{key:"getCalendarsWorkStatus",value:function getCalendarsWorkStatus(){if(this.calendarsWorkStatus)return this.calendarsWorkStatus;var res=new Map();var _iteratorNormalCompletion61=true;var _didIteratorError61=false;var _iteratorError61=undefined;try{for(var _iterator61=this.getGroups()[Symbol.iterator](),_step61;!(_iteratorNormalCompletion61=(_step61=_iterator61.next()).done);_iteratorNormalCompletion61=true){var _step61$value=_slicedToArray(_step61.value,2),calendar=_step61$value[0],intervals=_step61$value[1];// TODO: fix types
res.set(calendar,intervals[0].isWorking);}}catch(err){_didIteratorError61=true;_iteratorError61=err;}finally{try{if(!_iteratorNormalCompletion61&&_iterator61.return!=null){_iterator61.return();}}finally{if(_didIteratorError61){throw _iteratorError61;}}}return this.calendarsWorkStatus=res;}},{key:"getCalendarsWorking",value:function getCalendarsWorking(){if(this.calendarsWorking)return this.calendarsWorking;var calendars=[];var _iteratorNormalCompletion62=true;var _didIteratorError62=false;var _iteratorError62=undefined;try{for(var _iterator62=this.getGroups()[Symbol.iterator](),_step62;!(_iteratorNormalCompletion62=(_step62=_iterator62.next()).done);_iteratorNormalCompletion62=true){var _step62$value=_slicedToArray(_step62.value,2),calendar=_step62$value[0],intervals=_step62$value[1];// TODO: fix types
if(intervals[0].isWorking)calendars.push(calendar);}}catch(err){_didIteratorError62=true;_iteratorError62=err;}finally{try{if(!_iteratorNormalCompletion62&&_iterator62.return!=null){_iterator62.return();}}finally{if(_didIteratorError62){throw _iteratorError62;}}}return this.calendarsWorking=calendars;}},{key:"getCalendarsNonWorking",value:function getCalendarsNonWorking(){if(this.calendarsNonWorking)return this.calendarsNonWorking;var calendars=[];var _iteratorNormalCompletion63=true;var _didIteratorError63=false;var _iteratorError63=undefined;try{for(var _iterator63=this.getGroups()[Symbol.iterator](),_step63;!(_iteratorNormalCompletion63=(_step63=_iterator63.next()).done);_iteratorNormalCompletion63=true){var _step63$value=_slicedToArray(_step63.value,2),calendar=_step63$value[0],intervals=_step63$value[1];// TODO: fix types
if(!intervals[0].isWorking)calendars.push(calendar);}}catch(err){_didIteratorError63=true;_iteratorError63=err;}finally{try{if(!_iteratorNormalCompletion63&&_iterator63.return!=null){_iterator63.return();}}finally{if(_didIteratorError63){throw _iteratorError63;}}}return this.calendarsNonWorking=calendars;}},{key:"getGroups",value:function getGroups(){if(this.intervalsByCalendar)return this.intervalsByCalendar;var calendars=this.calendars=[];var intervalsByCalendar=new Map();this.intervalGroups.forEach(function(_ref375){var _ref376=_slicedToArray(_ref375,2),calendar=_ref376[0],interval=_ref376[1];var data=intervalsByCalendar.get(calendar);if(!data){calendars.push(calendar);data=[];intervalsByCalendar.set(calendar,data);}data.push.apply(data,interval.intervals);});intervalsByCalendar.forEach(function(intervals,calendar){var unique=stripDuplicates(intervals);unique.sort(// sort in decreasing order
function(interval1,interval2){return interval2.getPriorityField()-interval1.getPriorityField();});intervalsByCalendar.set(calendar,unique);});return this.intervalsByCalendar=intervalsByCalendar;}}]);return CalendarCacheIntervalMultiple;}();// Generic binary search
var binarySearch=function binarySearch(value,array){var comparator=arguments.length>2&&arguments[2]!==undefined?arguments[2]:function(a,b){return a-b;};var left=0;var right=array.length;while(left<right){// | 0 to make it integer, faster according to: https://jsperf.com/or-vs-floor/2
var mid=(left+right)/2|0;var compare=comparator(value,array[mid]);if(compare===0)return{found:true,index:mid};else if(compare<0)right=mid;else left=mid+1;}return{found:false,index:right};};var IndexPosition;(function(IndexPosition){IndexPosition[IndexPosition["Exact"]=0]="Exact";IndexPosition[IndexPosition["Next"]=1]="Next";})(IndexPosition||(IndexPosition={}));// TODO store keys and values in a single array of "entries"? less memory movement during insert/delete in theory
var SortedMap=/*#__PURE__*/function(){function SortedMap(comparator){_classCallCheck2(this,SortedMap);this.keys=[];this.values=[];this.comparator=comparator||function(a,b){return a-b;};}_createClass2(SortedMap,[{key:"set",value:function set(key,value){var search=binarySearch(key,this.keys,this.comparator);if(search.found){this.values[search.index]=value;}else{this.keys.splice(search.index,0,key);this.values.splice(search.index,0,value);}return search.index;}// you need to know what you are doing when using this method
},{key:"insertAt",value:function insertAt(index,key,value){this.keys.splice(index,0,key);this.values.splice(index,0,value);}},{key:"setValueAt",value:function setValueAt(index,value){this.values[index]=value;}},{key:"get",value:function get(key){var search=binarySearch(key,this.keys,this.comparator);return search.found?this.values[search.index]:undefined;}},{key:"getEntryAt",value:function getEntryAt(index){return index<this.keys.length?{key:this.keys[index],value:this.values[index]}:undefined;}},{key:"getKeyAt",value:function getKeyAt(index){return this.keys[index];}},{key:"getValueAt",value:function getValueAt(index){return this.values[index];}},{key:"delete",value:function _delete(key){var search=binarySearch(key,this.keys,this.comparator);if(search.found)this.deleteAt(search.index);}},{key:"size",value:function size(){return this.keys.length;}},{key:"deleteAt",value:function deleteAt(index){this.keys.splice(index,1);this.values.splice(index,1);}},{key:"indexOfKey",value:function indexOfKey(key){var search=binarySearch(key,this.keys,this.comparator);return{found:search.found?IndexPosition.Exact:IndexPosition.Next,index:search.index};}},{key:"map",value:function map(func){var keys=this.keys;var values=this.values;var result=[];for(var _i36=0;_i36<keys.length;_i36++){result.push(func(values[_i36],keys[_i36],_i36));}return result;}},{key:"getAllEntries",value:function getAllEntries(){return this.map(function(value,key){return{value:value,key:key};});}},{key:"clear",value:function clear(){this.keys.length=0;this.values.length=0;}}]);return SortedMap;}();var EdgeInclusion$1;(function(EdgeInclusion){EdgeInclusion[EdgeInclusion["Left"]=0]="Left";EdgeInclusion[EdgeInclusion["Right"]=1]="Right";})(EdgeInclusion$1||(EdgeInclusion$1={}));var IntervalCache=/*#__PURE__*/function(){function IntervalCache(config){_classCallCheck2(this,IntervalCache);this.points=new SortedMap(function(a,b){return a.getTime()-b.getTime();});this.leftInfinityKey=MIN_DATE;this.rightInfinityKey=MAX_DATE;Object.assign(this,config);if(this.emptyInterval===undefined||!this.combineIntervalsFn)throw new Error("All of `emptyPoint`, `combineIntervalsFn` are required");this.points.set(this.leftInfinityKey,this.emptyInterval);}_createClass2(IntervalCache,[{key:"size",value:function size(){return this.points.size();}},{key:"indexOf",value:function indexOf(date){return this.points.indexOfKey(date);}},{key:"getDateAt",value:function getDateAt(index){return this.points.getKeyAt(index);}},{key:"getPointAt",value:function getPointAt(index){return this.points.getValueAt(index);}},{key:"getIntervalOf",value:function getIntervalOf(date){var edgeInclusion=arguments.length>1&&arguments[1]!==undefined?arguments[1]:EdgeInclusion$1.Left;// the `index` here is guaranteed to be > 0, because at index 0 there's a `emptyPoint`
var _this$indexOf=this.indexOf(date),found=_this$indexOf.found,index=_this$indexOf.index;var startDateIndex;if(edgeInclusion===EdgeInclusion$1.Left){startDateIndex=found===IndexPosition.Exact?index:index-1;}else{startDateIndex=index-1;}return this.getIntervalWithStartDateIndex(startDateIndex);}},{key:"getPrevInterval",value:function getPrevInterval(interval){if(interval.startDateIndex===0)return null;return this.getIntervalWithStartDateIndex(interval.startDateIndex-1);}},{key:"getNextInterval",value:function getNextInterval(interval){if(interval.startDateIndex>=this.size()-1)return null;return this.getIntervalWithStartDateIndex(interval.startDateIndex+1);}},{key:"getIntervalWithStartDateIndex",value:function getIntervalWithStartDateIndex(startDateIndex){return{startDateIndex:startDateIndex,startDate:this.getDateAt(startDateIndex),endDate:startDateIndex+1<this.size()?this.getDateAt(startDateIndex+1):this.rightInfinityKey,cacheInterval:this.getPointAt(startDateIndex)};}},{key:"addInterval",value:function addInterval(startDate,endDate,extendInterval){var points=this.points;// there is always "leftInfinityKey" empty point, so `index >= 0`
var _points$indexOfKey=points.indexOfKey(startDate),found=_points$indexOfKey.found,index=_points$indexOfKey.index;var curIndex;var lastUpdatedPoint;if(found==IndexPosition.Exact){var inclusion=extendInterval(lastUpdatedPoint=points.getValueAt(index));points.setValueAt(index,inclusion);curIndex=index+1;}else{var _inclusion=extendInterval(lastUpdatedPoint=points.getValueAt(index-1));points.insertAt(index,startDate,_inclusion);curIndex=index+1;}while(curIndex<points.size()){var curDate=points.getKeyAt(curIndex);if(curDate.getTime()>=endDate.getTime())break;var _inclusion2=extendInterval(lastUpdatedPoint=points.getValueAt(curIndex));points.setValueAt(curIndex,_inclusion2);curIndex++;}if(curIndex===points.size()){points.insertAt(points.size(),endDate,this.emptyInterval);}else{var _curDate=points.getKeyAt(curIndex);if(_curDate.getTime()===endDate.getTime());else{points.insertAt(curIndex,endDate,lastUpdatedPoint);}}}},{key:"includeWrappingRange",value:function includeWrappingRange(intervalCache,startDate,endDate){var _this123=this;var interval=intervalCache.getIntervalOf(startDate);while(interval){this.addInterval(interval.startDate,interval.endDate,function(existingInterval){return _this123.combineIntervalsFn(existingInterval,interval.cacheInterval);});if(interval.endDate.getTime()>endDate.getTime())break;interval=intervalCache.getNextInterval(interval);}}},{key:"getSummary",value:function getSummary(){return this.points.map(function(label,date){return{label:label,date:date};});}},{key:"clear",value:function clear(){this.points.clear();this.points.set(this.leftInfinityKey,this.emptyInterval);}}]);return IntervalCache;}();var CalendarCacheMultiple=/*#__PURE__*/function(_CalendarCache){_inherits2(CalendarCacheMultiple,_CalendarCache);function CalendarCacheMultiple(config){var _this124;_classCallCheck2(this,CalendarCacheMultiple);_this124=_possibleConstructorReturn2(this,_getPrototypeOf2(CalendarCacheMultiple).call(this,config));_this124.calendarCaches=stripDuplicates(_this124.calendarCaches);_this124.intervalCache=new IntervalCache({emptyInterval:new CalendarCacheIntervalMultiple(),combineIntervalsFn:function combineIntervalsFn(interval1,interval2){return interval1.combineWith(interval2);}});return _this124;}_createClass2(CalendarCacheMultiple,[{key:"fillCache",value:function fillCache(startDate,endDate){var _this125=this;this.calendarCaches.forEach(function(calendarCache){calendarCache.fillCache(startDate,endDate);_this125.includeWrappingRangeFrom(calendarCache,startDate,endDate);});}}]);return CalendarCacheMultiple;}(CalendarCache);var COMBINED_CALENDARS_CACHE=new Map();var combineCalendars=function combineCalendars(calendars){var uniqueOnly=stripDuplicates(calendars);if(uniqueOnly.length===0)throw new Error("No calendars to combine");uniqueOnly.sort(function(calendar1,calendar2){if(calendar1.internalId<calendar2.internalId)return-1;else return 1;});var hash=uniqueOnly.map(function(calendar){return calendar.internalId+'/';}).join('');var versionsHash=uniqueOnly.map(function(calendar){return calendar.version+'/';}).join('');var cached=COMBINED_CALENDARS_CACHE.get(hash);var res;if(cached&&cached.versionsHash===versionsHash)res=cached.cache;else{res=new CalendarCacheMultiple({calendarCaches:uniqueOnly.map(function(calendar){return calendar.calendarCache;})});COMBINED_CALENDARS_CACHE.set(hash,{versionsHash:versionsHash,cache:res});}return res;};var __decorate$2=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$2=Symbol('HasAssignments');var HasAssignments=function HasAssignments(base){var HasAssignments=/*#__PURE__*/function(_base25){_inherits2(HasAssignments,_base25);function HasAssignments(){var _this126;_classCallCheck2(this,HasAssignments);_this126=_possibleConstructorReturn2(this,_getPrototypeOf2(HasAssignments).apply(this,arguments));_this126.assignmentsByCalendar=new Map();return _this126;}_createClass2(HasAssignments,[{key:hasMixin$2,value:function value(){}},{key:"hasFirstAssignment",value:/*#__PURE__*/regeneratorRuntime.mark(function hasFirstAssignment(){var assignments,hasAssignments,hadAssignments;return regeneratorRuntime.wrap(function hasFirstAssignment$(_context46){while(1){switch(_context46.prev=_context46.next){case 0:_context46.next=2;return this.$.assigned;case 2:assignments=_context46.sent;hasAssignments=assignments.size>0;hadAssignments=this.$.assigned.value.size>0;// console.log("hasFirstAssignment, ", hasAssignments && !hadAssignments)
return _context46.abrupt("return",hasAssignments&&!hadAssignments);case 6:case"end":return _context46.stop();}}},hasFirstAssignment,this);})},{key:"calculateEffortDriven",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEffortDriven(proposedValue){var schedulingMode;return regeneratorRuntime.wrap(function calculateEffortDriven$(_context47){while(1){switch(_context47.prev=_context47.next){case 0:_context47.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context47.sent;if(!(schedulingMode==SchedulingMode.Normal)){_context47.next=5;break;}return _context47.abrupt("return",false);case 5:return _context47.abrupt("return",proposedValue!==undefined?proposedValue:this.$.effortDriven.getConsistentValue());case 6:case"end":return _context47.stop();}}},calculateEffortDriven,this);})// pure calculation methods
},{key:"calculateTotalUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateTotalUnits(){var result,assignments,_iteratorNormalCompletion64,_didIteratorError64,_iteratorError64,_iterator64,_step64,assignment;return regeneratorRuntime.wrap(function calculateTotalUnits$(_context48){while(1){switch(_context48.prev=_context48.next){case 0:result=0;_context48.next=3;return this.$.assigned;case 3:assignments=_context48.sent;_iteratorNormalCompletion64=true;_didIteratorError64=false;_iteratorError64=undefined;_context48.prev=7;_iterator64=assignments[Symbol.iterator]();case 9:if(_iteratorNormalCompletion64=(_step64=_iterator64.next()).done){_context48.next=18;break;}assignment=_step64.value;_context48.t0=result;_context48.next=14;return assignment.$.units;case 14:result=_context48.t0+=_context48.sent;case 15:_iteratorNormalCompletion64=true;_context48.next=9;break;case 18:_context48.next=24;break;case 20:_context48.prev=20;_context48.t1=_context48["catch"](7);_didIteratorError64=true;_iteratorError64=_context48.t1;case 24:_context48.prev=24;_context48.prev=25;if(!_iteratorNormalCompletion64&&_iterator64.return!=null){_iterator64.return();}case 27:_context48.prev=27;if(!_didIteratorError64){_context48.next=30;break;}throw _iteratorError64;case 30:return _context48.finish(27);case 31:return _context48.finish(24);case 32:return _context48.abrupt("return",result);case 33:case"end":return _context48.stop();}}},calculateTotalUnits,this,[[7,20,24,32],[25,,27,31]]);})},{key:"calculateEffortByAssignments",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEffortByAssignments(startDate,endDate){var assignmentsByCalendar,schedulingMode,resultN,totalUnitsByCalendar,_iteratorNormalCompletion65,_didIteratorError65,_iteratorError65,_iterator65,_step65,_step65$value,calendar,assignments,intervalUnits,_iteratorNormalCompletion67,_didIteratorError67,_iteratorError67,_iterator67,_step67,assignment,options;return regeneratorRuntime.wrap(function calculateEffortByAssignments$(_context49){while(1){switch(_context49.prev=_context49.next){case 0:_context49.next=2;return this.$.assignmentsByCalendar;case 2:assignmentsByCalendar=_context49.sent;_context49.next=5;return this.$.schedulingMode;case 5:schedulingMode=_context49.sent;if(!(schedulingMode===SchedulingMode.Normal||assignmentsByCalendar.size===0)){_context49.next=9;break;}return _context49.delegateYield(this.calculateProjectedDuration(startDate,endDate),"t0",8);case 8:return _context49.abrupt("return",_context49.t0);case 9:resultN=0;totalUnitsByCalendar=new Map();_iteratorNormalCompletion65=true;_didIteratorError65=false;_iteratorError65=undefined;_context49.prev=14;_iterator65=assignmentsByCalendar[Symbol.iterator]();case 16:if(_iteratorNormalCompletion65=(_step65=_iterator65.next()).done){_context49.next=51;break;}_step65$value=_slicedToArray(_step65.value,2),calendar=_step65$value[0],assignments=_step65$value[1];intervalUnits=0;_iteratorNormalCompletion67=true;_didIteratorError67=false;_iteratorError67=undefined;_context49.prev=22;_iterator67=assignments[Symbol.iterator]();case 24:if(_iteratorNormalCompletion67=(_step67=_iterator67.next()).done){_context49.next=33;break;}assignment=_step67.value;_context49.t1=intervalUnits;_context49.next=29;return assignment.$.units;case 29:intervalUnits=_context49.t1+=_context49.sent;case 30:_iteratorNormalCompletion67=true;_context49.next=24;break;case 33:_context49.next=39;break;case 35:_context49.prev=35;_context49.t2=_context49["catch"](22);_didIteratorError67=true;_iteratorError67=_context49.t2;case 39:_context49.prev=39;_context49.prev=40;if(!_iteratorNormalCompletion67&&_iterator67.return!=null){_iterator67.return();}case 42:_context49.prev=42;if(!_didIteratorError67){_context49.next=45;break;}throw _iteratorError67;case 45:return _context49.finish(42);case 46:return _context49.finish(39);case 47:totalUnitsByCalendar.set(calendar,intervalUnits);case 48:_iteratorNormalCompletion65=true;_context49.next=16;break;case 51:_context49.next=57;break;case 53:_context49.prev=53;_context49.t3=_context49["catch"](14);_didIteratorError65=true;_iteratorError65=_context49.t3;case 57:_context49.prev=57;_context49.prev=58;if(!_iteratorNormalCompletion65&&_iterator65.return!=null){_iterator65.return();}case 60:_context49.prev=60;if(!_didIteratorError65){_context49.next=63;break;}throw _iteratorError65;case 63:return _context49.finish(60);case 64:return _context49.finish(57);case 65:_context49.t4=Object;return _context49.delegateYield(this.getBaseOptionsForEffortCalculations(),"t5",67);case 67:_context49.t6=_context49.t5;_context49.t7={startDate:startDate,endDate:endDate};options=_context49.t4.assign.call(_context49.t4,_context49.t6,_context49.t7);return _context49.delegateYield(this.forEachAvailabilityInterval(options,function(intervalStart,intervalEnd,calendarCacheIntervalMultiple){var workCalendars=calendarCacheIntervalMultiple.getCalendarsWorking();var intervalStartN=intervalStart.getTime(),intervalEndN=intervalEnd.getTime(),intervalDuration=intervalEndN-intervalStartN;var intervalUnits=0;var _iteratorNormalCompletion66=true;var _didIteratorError66=false;var _iteratorError66=undefined;try{for(var _iterator66=workCalendars[Symbol.iterator](),_step66;!(_iteratorNormalCompletion66=(_step66=_iterator66.next()).done);_iteratorNormalCompletion66=true){var workingCalendar=_step66.value;// the calendar of the event itself will be in the `workCalendars`, but it
// will be missing in the `totalUnitsByCalendar` map, which is fine
intervalUnits+=totalUnitsByCalendar.get(workingCalendar)||0;}// Effort = Units * Duration
}catch(err){_didIteratorError66=true;_iteratorError66=err;}finally{try{if(!_iteratorNormalCompletion66&&_iterator66.return!=null){_iterator66.return();}}finally{if(_didIteratorError66){throw _iteratorError66;}}}resultN+=intervalUnits*intervalDuration*0.01;}),"t8",71);case 71:_context49.t9=this;_context49.t10=resultN;_context49.t11=TimeUnit.Millisecond;_context49.next=76;return this.$.effortUnit;case 76:_context49.t12=_context49.sent;return _context49.delegateYield(_context49.t9.$convertDuration.call(_context49.t9,_context49.t10,_context49.t11,_context49.t12),"t13",78);case 78:return _context49.abrupt("return",_context49.t13);case 79:case"end":return _context49.stop();}}},calculateEffortByAssignments,this,[[14,53,57,65],[22,35,39,47],[40,,42,46],[58,,60,64]]);})},{key:"calculateUnitsByDurationAndEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateUnitsByDurationAndEffort(_assignment,proposedValue){var effort,effortUnit,effortMS,collectedEffort,options,assignmentsByCalendar;return regeneratorRuntime.wrap(function calculateUnitsByDurationAndEffort$(_context50){while(1){switch(_context50.prev=_context50.next){case 0:_context50.next=2;return this.$.effort;case 2:effort=_context50.sent;_context50.next=5;return this.$.effortUnit;case 5:effortUnit=_context50.sent;return _context50.delegateYield(this.$convertDuration(effort,effortUnit,TimeUnit.Millisecond),"t0",7);case 7:effortMS=_context50.t0;collectedEffort=0;_context50.t1=Object;return _context50.delegateYield(this.getBaseOptionsForEffortCalculations(),"t2",11);case 11:_context50.t3=_context50.t2;_context50.next=14;return this.$.startDate;case 14:_context50.t4=_context50.sent;_context50.next=17;return this.$.endDate;case 17:_context50.t5=_context50.sent;_context50.t6={startDate:_context50.t4,endDate:_context50.t5};options=_context50.t1.assign.call(_context50.t1,_context50.t3,_context50.t6);_context50.next=22;return this.$.assignmentsByCalendar;case 22:assignmentsByCalendar=_context50.sent;return _context50.delegateYield(this.forEachAvailabilityInterval(options,function(intervalStart,intervalEnd,calendarCacheIntervalMultiple){var workCalendars=calendarCacheIntervalMultiple.getCalendarsWorking();var intervalStartN=intervalStart.getTime(),intervalEndN=intervalEnd.getTime(),intervalDuration=intervalEndN-intervalStartN;var _iteratorNormalCompletion68=true;var _didIteratorError68=false;var _iteratorError68=undefined;try{for(var _iterator68=workCalendars[Symbol.iterator](),_step68;!(_iteratorNormalCompletion68=(_step68=_iterator68.next()).done);_iteratorNormalCompletion68=true){var workingCalendar=_step68.value;collectedEffort+=(assignmentsByCalendar.has(workingCalendar)?assignmentsByCalendar.get(workingCalendar).length:0)*intervalDuration;}}catch(err){_didIteratorError68=true;_iteratorError68=err;}finally{try{if(!_iteratorNormalCompletion68&&_iterator68.return!=null){_iterator68.return();}}finally{if(_didIteratorError68){throw _iteratorError68;}}}}),"t7",24);case 24:return _context50.abrupt("return",collectedEffort?100*effortMS/collectedEffort:100);case 25:case"end":return _context50.stop();}}},calculateUnitsByDurationAndEffort,this);})// EOF pure calculation methods
},{key:"getEffort",value:function getEffort(unit){var effort=this.effort;return unit!==undefined?this.calendar.convertDuration(effort,this.effortUnit,unit):effort;}},{key:"setEffort",value:function(){var _setEffort=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee39(effort,unit){return regeneratorRuntime.wrap(function _callee39$(_context51){while(1){switch(_context51.prev=_context51.next){case 0:if(unit!=null&&unit!==this.effortUnit){this.$.effortUnit.put(unit);}this.$.effort.put(effort);return _context51.abrupt("return",this.propagate());case 3:case"end":return _context51.stop();}}},_callee39,this);}));function setEffort(_x67,_x68){return _setEffort.apply(this,arguments);}return setEffort;}()},{key:"getEffortUnit",value:function getEffortUnit(){return this.effortUnit;}},{key:"setEffortUnit",value:function setEffortUnit(_value){throw new Error("Use `setEffort` instead");}},{key:"setAssignmentUnits",value:function(){var _setAssignmentUnits=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee40(assignment,units){return regeneratorRuntime.wrap(function _callee40$(_context52){while(1){switch(_context52.prev=_context52.next){case 0:assignment.$.units.put(units);return _context52.abrupt("return",assignment.propagate());case 2:case"end":return _context52.stop();}}},_callee40);}));function setAssignmentUnits(_x69,_x70){return _setAssignmentUnits.apply(this,arguments);}return setAssignmentUnits;}()},{key:"calculateAssignmentUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateAssignmentUnits(assignment,proposedValue){var shouldRecalculateAssignmentUnits;return regeneratorRuntime.wrap(function calculateAssignmentUnits$(_context53){while(1){switch(_context53.prev=_context53.next){case 0:if(!(proposedValue!==undefined)){_context53.next=2;break;}return _context53.abrupt("return",proposedValue);case 2:return _context53.delegateYield(this.shouldRecalculateAssignmentUnits(assignment),"t0",3);case 3:shouldRecalculateAssignmentUnits=_context53.t0;if(!shouldRecalculateAssignmentUnits){_context53.next=9;break;}return _context53.delegateYield(this.calculateUnitsByDurationAndEffort(assignment,proposedValue),"t1",6);case 6:return _context53.abrupt("return",_context53.t1);case 9:return _context53.abrupt("return",assignment.$.units.value);case 10:case"end":return _context53.stop();}}},calculateAssignmentUnits,this);})},{key:"calculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEffort(proposedValue){var childEvents,shouldRecalculateEffort,_startDate3,endDate;return regeneratorRuntime.wrap(function calculateEffort$(_context54){while(1){switch(_context54.prev=_context54.next){case 0:_context54.next=2;return this.$.childEvents;case 2:childEvents=_context54.sent;if(!childEvents.size){_context54.next=8;break;}return _context54.delegateYield(this.calculateTotalEffort(),"t0",5);case 5:return _context54.abrupt("return",_context54.t0);case 8:if(!(proposedValue!==undefined)){_context54.next=10;break;}return _context54.abrupt("return",proposedValue);case 10:return _context54.delegateYield(this.shouldRecalculateEffort(),"t1",11);case 11:shouldRecalculateEffort=_context54.t1;if(!shouldRecalculateEffort){_context54.next=26;break;}_context54.next=15;return this.$.startDate;case 15:_startDate3=_context54.sent;if(!_startDate3){_context54.next=23;break;}return _context54.delegateYield(this.calculateProjectedEndDate(_startDate3),"t2",18);case 18:endDate=_context54.t2;return _context54.delegateYield(this.calculateEffortByAssignments(_startDate3,endDate),"t3",20);case 20:return _context54.abrupt("return",_context54.t3);case 23:return _context54.abrupt("return",null);case 24:_context54.next=27;break;case 26:return _context54.abrupt("return",this.$.effort.value);case 27:case"end":return _context54.stop();}}},calculateEffort,this);})},{key:"canRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function canRecalculateDuration(){var schedulingMode;return regeneratorRuntime.wrap(function canRecalculateDuration$(_context55){while(1){switch(_context55.prev=_context55.next){case 0:_context55.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context55.sent;if(!(schedulingMode===SchedulingMode.Normal)){_context55.next=8;break;}return _context55.delegateYield(_get2(_getPrototypeOf2(HasAssignments.prototype),"canRecalculateDuration",this).call(this),"t0",5);case 5:return _context55.abrupt("return",_context55.t0);case 8:return _context55.abrupt("return",this.$.effort.hasProposedValue()||this.$.effort.hasConsistentValue());case 9:case"end":return _context55.stop();}}},canRecalculateDuration,this);})},{key:"shouldRecalculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEffort(){var childEvents;return regeneratorRuntime.wrap(function shouldRecalculateEffort$(_context56){while(1){switch(_context56.prev=_context56.next){case 0:_context56.next=2;return this.$.childEvents;case 2:childEvents=_context56.sent;if(!(childEvents.size>0)){_context56.next=7;break;}return _context56.abrupt("return",true);case 7:_context56.t0=!this.$.effort.hasConsistentValue();if(!_context56.t0){_context56.next=11;break;}return _context56.delegateYield(this.canRecalculateEffort(),"t1",10);case 10:_context56.t0=_context56.t1;case 11:return _context56.abrupt("return",_context56.t0);case 12:case"end":return _context56.stop();}}},shouldRecalculateEffort,this);})},{key:"canRecalculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function canRecalculateEffort(){var childEvents,result;return regeneratorRuntime.wrap(function canRecalculateEffort$(_context57){while(1){switch(_context57.prev=_context57.next){case 0:_context57.next=2;return this.$.childEvents;case 2:childEvents=_context57.sent;result=true;if(childEvents.size){result=true;// each child should be able to recalculate its effort
// for (const child of childEvents) {
//     result = result && (yield* child.canRecalculateEffort())
// }
}else{// even if event has no assignments (and thus no assignment units are available)
// we still normalize effort to duration, so thats the only data required for effort calculation
result=this.$.duration.hasValue();}return _context57.abrupt("return",result);case 6:case"end":return _context57.stop();}}},canRecalculateEffort,this);})},{key:"shouldRecalculateAssignmentUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateAssignmentUnits(_assignment){return regeneratorRuntime.wrap(function shouldRecalculateAssignmentUnits$(_context58){while(1){switch(_context58.prev=_context58.next){case 0:return _context58.abrupt("return",false);case 1:case"end":return _context58.stop();}}},shouldRecalculateAssignmentUnits);})},{key:"calculateTotalEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateTotalEffort(){var childEvents,result,_iteratorNormalCompletion69,_didIteratorError69,_iteratorError69,_iterator69,_step69,child;return regeneratorRuntime.wrap(function calculateTotalEffort$(_context59){while(1){switch(_context59.prev=_context59.next){case 0:_context59.next=2;return this.$.childEvents;case 2:childEvents=_context59.sent;result=0;_iteratorNormalCompletion69=true;_didIteratorError69=false;_iteratorError69=undefined;_context59.prev=7;_iterator69=childEvents[Symbol.iterator]();case 9:if(_iteratorNormalCompletion69=(_step69=_iterator69.next()).done){_context59.next=18;break;}child=_step69.value;_context59.t0=result;_context59.next=14;return child.$.effort;case 14:result=_context59.t0+=_context59.sent;case 15:_iteratorNormalCompletion69=true;_context59.next=9;break;case 18:_context59.next=24;break;case 20:_context59.prev=20;_context59.t1=_context59["catch"](7);_didIteratorError69=true;_iteratorError69=_context59.t1;case 24:_context59.prev=24;_context59.prev=25;if(!_iteratorNormalCompletion69&&_iterator69.return!=null){_iterator69.return();}case 27:_context59.prev=27;if(!_didIteratorError69){_context59.next=30;break;}throw _iteratorError69;case 30:return _context59.finish(27);case 31:return _context59.finish(24);case 32:return _context59.abrupt("return",result);case 33:case"end":return _context59.stop();}}},calculateTotalEffort,this,[[7,20,24,32],[25,,27,31]]);})},{key:"forEachAvailabilityInterval",value:/*#__PURE__*/regeneratorRuntime.mark(function forEachAvailabilityInterval(options,func){var calendar,assignmentsByCalendar,effectiveCalendarsCombination;return regeneratorRuntime.wrap(function forEachAvailabilityInterval$(_context60){while(1){switch(_context60.prev=_context60.next){case 0:_context60.next=2;return this.$.calendar;case 2:calendar=_context60.sent;_context60.next=5;return this.$.assignmentsByCalendar;case 5:assignmentsByCalendar=_context60.sent;_context60.next=8;return this.$.effectiveCalendarsCombination;case 8:effectiveCalendarsCombination=_context60.sent;effectiveCalendarsCombination.forEachAvailabilityInterval(options,function(startDate,endDate,calendarCacheIntervalMultiple){var calendarsStatus=calendarCacheIntervalMultiple.getCalendarsWorkStatus();var workCalendars=calendarCacheIntervalMultiple.getCalendarsWorking();if(calendarsStatus.get(calendar)&&(options.ignoreResourceCalendars||workCalendars.some(function(calendar){return assignmentsByCalendar.has(calendar);}))){return func(startDate,endDate,calendarCacheIntervalMultiple);}});case 10:case"end":return _context60.stop();}}},forEachAvailabilityInterval,this);})},{key:"getBaseOptionsForEffortCalculations",value:/*#__PURE__*/regeneratorRuntime.mark(function getBaseOptionsForEffortCalculations(){return regeneratorRuntime.wrap(function getBaseOptionsForEffortCalculations$(_context61){while(1){switch(_context61.prev=_context61.next){case 0:return _context61.abrupt("return",{ignoreResourceCalendars:false});case 1:case"end":return _context61.stop();}}},getBaseOptionsForEffortCalculations);})},{key:"getBaseOptionsForDurationCalculations",value:/*#__PURE__*/regeneratorRuntime.mark(function getBaseOptionsForDurationCalculations(){return regeneratorRuntime.wrap(function getBaseOptionsForDurationCalculations$(_context62){while(1){switch(_context62.prev=_context62.next){case 0:return _context62.abrupt("return",{ignoreResourceCalendars:false});case 1:case"end":return _context62.stop();}}},getBaseOptionsForDurationCalculations);})},{key:"skipNonWorkingTime",value:/*#__PURE__*/regeneratorRuntime.mark(function skipNonWorkingTime(date){var isForward,assignmentsByCalendar,options,workingDate,_args63=arguments;return regeneratorRuntime.wrap(function skipNonWorkingTime$(_context63){while(1){switch(_context63.prev=_context63.next){case 0:isForward=_args63.length>1&&_args63[1]!==undefined?_args63[1]:true;_context63.next=3;return this.$.assignmentsByCalendar;case 3:assignmentsByCalendar=_context63.sent;if(!(assignmentsByCalendar.size>0)){_context63.next=14;break;}_context63.t0=Object;return _context63.delegateYield(this.getBaseOptionsForDurationCalculations(),"t1",7);case 7:_context63.t2=_context63.t1;_context63.t3=isForward?{startDate:date,isForward:isForward}:{endDate:date,isForward:isForward};options=_context63.t0.assign.call(_context63.t0,_context63.t2,_context63.t3);return _context63.delegateYield(this.forEachAvailabilityInterval(options,function(startDate,endDate,calendarCacheIntervalMultiple){workingDate=isForward?startDate:endDate;return false;}),"t4",11);case 11:return _context63.abrupt("return",new Date(workingDate));case 14:return _context63.delegateYield(_get2(_getPrototypeOf2(HasAssignments.prototype),"skipNonWorkingTime",this).call(this,date,isForward),"t5",15);case 15:return _context63.abrupt("return",_context63.t5);case 16:case"end":return _context63.stop();}}},skipNonWorkingTime,this);})},{key:"calculateDurationBetweenDates",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateDurationBetweenDates(startDate,endDate,unit){var assignmentsByCalendar,options,result;return regeneratorRuntime.wrap(function calculateDurationBetweenDates$(_context64){while(1){switch(_context64.prev=_context64.next){case 0:_context64.next=2;return this.$.assignmentsByCalendar;case 2:assignmentsByCalendar=_context64.sent;if(!(assignmentsByCalendar.size>0)){_context64.next=15;break;}_context64.t0=Object;return _context64.delegateYield(this.getBaseOptionsForDurationCalculations(),"t1",6);case 6:_context64.t2=_context64.t1;_context64.t3={startDate:startDate,endDate:endDate,isForward:true};options=_context64.t0.assign.call(_context64.t0,_context64.t2,_context64.t3);result=0;return _context64.delegateYield(this.forEachAvailabilityInterval(options,function(startDate,endDate){result+=endDate.getTime()-startDate.getTime();}),"t4",11);case 11:return _context64.delegateYield(this.$convertDuration(result,TimeUnit.Millisecond,unit),"t5",12);case 12:return _context64.abrupt("return",_context64.t5);case 15:return _context64.delegateYield(_get2(_getPrototypeOf2(HasAssignments.prototype),"calculateDurationBetweenDates",this).call(this,startDate,endDate,unit),"t6",16);case 16:return _context64.abrupt("return",_context64.t6);case 17:case"end":return _context64.stop();}}},calculateDurationBetweenDates,this);})},{key:"calculateEffectiveCalendarsCombination",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEffectiveCalendarsCombination(){var assignmentsByCalendar,calendars;return regeneratorRuntime.wrap(function calculateEffectiveCalendarsCombination$(_context65){while(1){switch(_context65.prev=_context65.next){case 0:_context65.next=2;return this.$.assignmentsByCalendar;case 2:assignmentsByCalendar=_context65.sent;_context65.t0=[];_context65.t1=_toConsumableArray(assignmentsByCalendar.keys());_context65.next=7;return this.$.calendar;case 7:_context65.t2=_context65.sent;_context65.t3=[_context65.t2];calendars=_context65.t0.concat.call(_context65.t0,_context65.t1,_context65.t3);return _context65.abrupt("return",combineCalendars(calendars));case 11:case"end":return _context65.stop();}}},calculateEffectiveCalendarsCombination,this);})},{key:"calculateAssignmentsByCalendar",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateAssignmentsByCalendar(){var assignments,result,_iteratorNormalCompletion70,_didIteratorError70,_iteratorError70,_iterator70,_step70,assignment,resource,resourceCalendar,_assignments3;return regeneratorRuntime.wrap(function calculateAssignmentsByCalendar$(_context66){while(1){switch(_context66.prev=_context66.next){case 0:_context66.next=2;return this.$.assigned;case 2:assignments=_context66.sent;result=new Map();_iteratorNormalCompletion70=true;_didIteratorError70=false;_iteratorError70=undefined;_context66.prev=7;_iterator70=assignments[Symbol.iterator]();case 9:if(_iteratorNormalCompletion70=(_step70=_iterator70.next()).done){_context66.next=24;break;}assignment=_step70.value;_context66.next=13;return assignment.$.resource;case 13:resource=_context66.sent;if(!resource){_context66.next=21;break;}_context66.next=17;return resource.$.calendar;case 17:resourceCalendar=_context66.sent;_assignments3=result.get(resourceCalendar);if(!_assignments3){_assignments3=[];result.set(resourceCalendar,_assignments3);}_assignments3.push(assignment);case 21:_iteratorNormalCompletion70=true;_context66.next=9;break;case 24:_context66.next=30;break;case 26:_context66.prev=26;_context66.t0=_context66["catch"](7);_didIteratorError70=true;_iteratorError70=_context66.t0;case 30:_context66.prev=30;_context66.prev=31;if(!_iteratorNormalCompletion70&&_iterator70.return!=null){_iterator70.return();}case 33:_context66.prev=33;if(!_didIteratorError70){_context66.next=36;break;}throw _iteratorError70;case 36:return _context66.finish(33);case 37:return _context66.finish(30);case 38:return _context66.abrupt("return",result);case 39:case"end":return _context66.stop();}}},calculateAssignmentsByCalendar,this,[[7,26,30,38],[31,,33,37]]);})// helper method for `Normal` scheduling mode
},{key:"calculateProjectedXDateByDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedXDateByDuration(baseDate){var isForward,duration,durationUnit,durationMS,resultN,leftDuration,calendar,assignmentsByCalendar,options,_args67=arguments;return regeneratorRuntime.wrap(function calculateProjectedXDateByDuration$(_context67){while(1){switch(_context67.prev=_context67.next){case 0:isForward=_args67.length>1&&_args67[1]!==undefined?_args67[1]:true;_context67.next=3;return this.$.duration;case 3:duration=_context67.sent;if(!(duration==null||isNaN(duration))){_context67.next=6;break;}return _context67.abrupt("return",null);case 6:if(!(duration==0)){_context67.next=8;break;}return _context67.abrupt("return",baseDate);case 8:_context67.next=10;return this.$.durationUnit;case 10:durationUnit=_context67.sent;return _context67.delegateYield(this.$convertDuration(duration,durationUnit,TimeUnit.Millisecond),"t0",12);case 12:durationMS=_context67.t0;resultN=baseDate.getTime();leftDuration=durationMS;_context67.next=17;return this.$.calendar;case 17:calendar=_context67.sent;_context67.next=20;return this.$.assignmentsByCalendar;case 20:assignmentsByCalendar=_context67.sent;if(!(assignmentsByCalendar.size>0)){_context67.next=31;break;}_context67.t1=Object;return _context67.delegateYield(this.getBaseOptionsForDurationCalculations(),"t2",24);case 24:_context67.t3=_context67.t2;_context67.t4=isForward?{startDate:baseDate,isForward:isForward}:{endDate:baseDate,isForward:isForward};options=_context67.t1.assign.call(_context67.t1,_context67.t3,_context67.t4);return _context67.delegateYield(this.forEachAvailabilityInterval(options,function(intervalStart,intervalEnd,calendarCacheIntervalMultiple){var intervalStartN=intervalStart.getTime(),intervalEndN=intervalEnd.getTime(),intervalDuration=intervalEndN-intervalStartN;if(intervalDuration>=leftDuration){resultN=isForward?intervalStartN+leftDuration:intervalEndN-leftDuration;return false;}else{var dstDiff=intervalStart.getTimezoneOffset()-intervalEnd.getTimezoneOffset();leftDuration-=intervalDuration+dstDiff*60*1000;}}),"t5",28);case 28:return _context67.abrupt("return",new Date(resultN));case 31:return _context67.abrupt("return",calendar.accumulateWorkingTime(baseDate,durationMS,TimeUnit.Millisecond,isForward).finalDate);case 32:case"end":return _context67.stop();}}},calculateProjectedXDateByDuration,this);})},{key:"calculateProjectedXDateByEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedXDateByEffort(baseDate){var isForward,effort,effortUnit,effortMS,resultN,leftEffort,calendar,assignmentsByCalendar,totalUnitsByCalendar,_iteratorNormalCompletion71,_didIteratorError71,_iteratorError71,_iterator71,_step71,_step71$value,_calendar2,assignments,intervalUnits,_iteratorNormalCompletion73,_didIteratorError73,_iteratorError73,_iterator73,_step73,assignment,options,_args68=arguments;return regeneratorRuntime.wrap(function calculateProjectedXDateByEffort$(_context68){while(1){switch(_context68.prev=_context68.next){case 0:isForward=_args68.length>1&&_args68[1]!==undefined?_args68[1]:true;_context68.next=3;return this.$.effort;case 3:effort=_context68.sent;_context68.next=6;return this.$.effortUnit;case 6:effortUnit=_context68.sent;return _context68.delegateYield(this.$convertDuration(effort,effortUnit,TimeUnit.Millisecond),"t0",8);case 8:effortMS=_context68.t0;resultN=baseDate.getTime();leftEffort=effortMS;_context68.next=13;return this.$.calendar;case 13:calendar=_context68.sent;_context68.next=16;return this.$.assignmentsByCalendar;case 16:assignmentsByCalendar=_context68.sent;totalUnitsByCalendar=new Map();_iteratorNormalCompletion71=true;_didIteratorError71=false;_iteratorError71=undefined;_context68.prev=21;_iterator71=assignmentsByCalendar[Symbol.iterator]();case 23:if(_iteratorNormalCompletion71=(_step71=_iterator71.next()).done){_context68.next=58;break;}_step71$value=_slicedToArray(_step71.value,2),_calendar2=_step71$value[0],assignments=_step71$value[1];intervalUnits=0;_iteratorNormalCompletion73=true;_didIteratorError73=false;_iteratorError73=undefined;_context68.prev=29;_iterator73=assignments[Symbol.iterator]();case 31:if(_iteratorNormalCompletion73=(_step73=_iterator73.next()).done){_context68.next=40;break;}assignment=_step73.value;_context68.t1=intervalUnits;_context68.next=36;return assignment.$.units;case 36:intervalUnits=_context68.t1+=_context68.sent;case 37:_iteratorNormalCompletion73=true;_context68.next=31;break;case 40:_context68.next=46;break;case 42:_context68.prev=42;_context68.t2=_context68["catch"](29);_didIteratorError73=true;_iteratorError73=_context68.t2;case 46:_context68.prev=46;_context68.prev=47;if(!_iteratorNormalCompletion73&&_iterator73.return!=null){_iterator73.return();}case 49:_context68.prev=49;if(!_didIteratorError73){_context68.next=52;break;}throw _iteratorError73;case 52:return _context68.finish(49);case 53:return _context68.finish(46);case 54:totalUnitsByCalendar.set(_calendar2,intervalUnits);case 55:_iteratorNormalCompletion71=true;_context68.next=23;break;case 58:_context68.next=64;break;case 60:_context68.prev=60;_context68.t3=_context68["catch"](21);_didIteratorError71=true;_iteratorError71=_context68.t3;case 64:_context68.prev=64;_context68.prev=65;if(!_iteratorNormalCompletion71&&_iterator71.return!=null){_iterator71.return();}case 67:_context68.prev=67;if(!_didIteratorError71){_context68.next=70;break;}throw _iteratorError71;case 70:return _context68.finish(67);case 71:return _context68.finish(64);case 72:if(!(assignmentsByCalendar.size>0)){_context68.next=82;break;}_context68.t4=Object;return _context68.delegateYield(this.getBaseOptionsForDurationCalculations(),"t5",75);case 75:_context68.t6=_context68.t5;_context68.t7=isForward?{startDate:baseDate,isForward:isForward}:{endDate:baseDate,isForward:isForward};options=_context68.t4.assign.call(_context68.t4,_context68.t6,_context68.t7);return _context68.delegateYield(this.forEachAvailabilityInterval(options,function(intervalStart,intervalEnd,calendarCacheIntervalMultiple){var workCalendars=calendarCacheIntervalMultiple.getCalendarsWorking();var intervalStartN=intervalStart.getTime(),intervalEndN=intervalEnd.getTime(),intervalDuration=intervalEndN-intervalStartN;var intervalUnits=0;var _iteratorNormalCompletion72=true;var _didIteratorError72=false;var _iteratorError72=undefined;try{for(var _iterator72=workCalendars[Symbol.iterator](),_step72;!(_iteratorNormalCompletion72=(_step72=_iterator72.next()).done);_iteratorNormalCompletion72=true){var workingCalendar=_step72.value;// the calendar of the event itself will be in the `workCalendars`, but it
// will be missing in the `totalUnitsByCalendar` map, which is fine
intervalUnits+=totalUnitsByCalendar.get(workingCalendar)||0;}// Effort = Units * Duration
}catch(err){_didIteratorError72=true;_iteratorError72=err;}finally{try{if(!_iteratorNormalCompletion72&&_iterator72.return!=null){_iterator72.return();}}finally{if(_didIteratorError72){throw _iteratorError72;}}}var intervalEffort=intervalUnits*intervalDuration*0.01;if(intervalEffort>=leftEffort){// resulting date is interval start plus left duration (Duration = Effort / Units)
resultN=isForward?intervalStartN+leftEffort/(0.01*intervalUnits):intervalEndN-leftEffort/(0.01*intervalUnits);return false;}else{leftEffort-=intervalEffort;}}),"t8",79);case 79:return _context68.abrupt("return",new Date(resultN));case 82:return _context68.abrupt("return",calendar.accumulateWorkingTime(baseDate,effortMS,TimeUnit.Millisecond,isForward).finalDate);case 83:case"end":return _context68.stop();}}},calculateProjectedXDateByEffort,this,[[21,60,64,72],[29,42,46,54],[47,,49,53],[65,,67,71]]);})},{key:"doCalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function doCalculateDuration(){var assignmentsByCalendar,schedulingMode,childEvents;return regeneratorRuntime.wrap(function doCalculateDuration$(_context69){while(1){switch(_context69.prev=_context69.next){case 0:_context69.next=2;return this.$.assignmentsByCalendar;case 2:assignmentsByCalendar=_context69.sent;_context69.next=5;return this.$.schedulingMode;case 5:schedulingMode=_context69.sent;_context69.next=8;return this.$.childEvents;case 8:childEvents=_context69.sent;if(!(childEvents.size===0&&(schedulingMode===SchedulingMode.Normal||assignmentsByCalendar.size===0)&&!this.$.duration.hasValue()&&this.$.effort.hasValue()// possibly also: && !this.$.startDate.hasValue() || !this.$.endDate.hasValue()
// meaning - we only normalize duration to effort if there's no start/end date
// otherwise duration should be normalized by start/end date
)){_context69.next=24;break;}_context69.t0=this;_context69.next=13;return this.$.effort;case 13:_context69.t1=_context69.sent;_context69.next=16;return this.$.effortUnit;case 16:_context69.t2=_context69.sent;_context69.next=19;return this.$.durationUnit;case 19:_context69.t3=_context69.sent;return _context69.delegateYield(_context69.t0.$convertDuration.call(_context69.t0,_context69.t1,_context69.t2,_context69.t3),"t4",21);case 21:return _context69.abrupt("return",_context69.t4);case 24:return _context69.delegateYield(_get2(_getPrototypeOf2(HasAssignments.prototype),"doCalculateDuration",this).call(this),"t5",25);case 25:return _context69.abrupt("return",_context69.t5);case 26:case"end":return _context69.stop();}}},doCalculateDuration,this);})},{key:"calculateProjectedDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedDuration(startDate,endDate){var assignmentsByCalendar,schedulingMode,effort,effortUnit,effortMS,resultN,leftEffort,totalUnitsByCalendar,_iteratorNormalCompletion74,_didIteratorError74,_iteratorError74,_iterator74,_step74,_step74$value,calendar,assignments,intervalUnits,_iteratorNormalCompletion76,_didIteratorError76,_iteratorError76,_iterator76,_step76,assignment,options;return regeneratorRuntime.wrap(function calculateProjectedDuration$(_context70){while(1){switch(_context70.prev=_context70.next){case 0:_context70.next=2;return this.$.assignmentsByCalendar;case 2:assignmentsByCalendar=_context70.sent;_context70.next=5;return this.$.schedulingMode;case 5:schedulingMode=_context70.sent;if(!(schedulingMode===SchedulingMode.Normal||assignmentsByCalendar.size===0)){_context70.next=9;break;}return _context70.delegateYield(_get2(_getPrototypeOf2(HasAssignments.prototype),"calculateProjectedDuration",this).call(this,startDate,endDate),"t0",8);case 8:return _context70.abrupt("return",_context70.t0);case 9:_context70.next=11;return this.$.effort;case 11:effort=_context70.sent;_context70.next=14;return this.$.effortUnit;case 14:effortUnit=_context70.sent;return _context70.delegateYield(this.$convertDuration(effort,effortUnit,TimeUnit.Millisecond),"t1",16);case 16:effortMS=_context70.t1;resultN=0;leftEffort=effortMS;totalUnitsByCalendar=new Map();_iteratorNormalCompletion74=true;_didIteratorError74=false;_iteratorError74=undefined;_context70.prev=23;_iterator74=assignmentsByCalendar[Symbol.iterator]();case 25:if(_iteratorNormalCompletion74=(_step74=_iterator74.next()).done){_context70.next=60;break;}_step74$value=_slicedToArray(_step74.value,2),calendar=_step74$value[0],assignments=_step74$value[1];intervalUnits=0;_iteratorNormalCompletion76=true;_didIteratorError76=false;_iteratorError76=undefined;_context70.prev=31;_iterator76=assignments[Symbol.iterator]();case 33:if(_iteratorNormalCompletion76=(_step76=_iterator76.next()).done){_context70.next=42;break;}assignment=_step76.value;_context70.t2=intervalUnits;_context70.next=38;return assignment.$.units;case 38:intervalUnits=_context70.t2+=_context70.sent;case 39:_iteratorNormalCompletion76=true;_context70.next=33;break;case 42:_context70.next=48;break;case 44:_context70.prev=44;_context70.t3=_context70["catch"](31);_didIteratorError76=true;_iteratorError76=_context70.t3;case 48:_context70.prev=48;_context70.prev=49;if(!_iteratorNormalCompletion76&&_iterator76.return!=null){_iterator76.return();}case 51:_context70.prev=51;if(!_didIteratorError76){_context70.next=54;break;}throw _iteratorError76;case 54:return _context70.finish(51);case 55:return _context70.finish(48);case 56:totalUnitsByCalendar.set(calendar,intervalUnits);case 57:_iteratorNormalCompletion74=true;_context70.next=25;break;case 60:_context70.next=66;break;case 62:_context70.prev=62;_context70.t4=_context70["catch"](23);_didIteratorError74=true;_iteratorError74=_context70.t4;case 66:_context70.prev=66;_context70.prev=67;if(!_iteratorNormalCompletion74&&_iterator74.return!=null){_iterator74.return();}case 69:_context70.prev=69;if(!_didIteratorError74){_context70.next=72;break;}throw _iteratorError74;case 72:return _context70.finish(69);case 73:return _context70.finish(66);case 74:_context70.t5=Object;return _context70.delegateYield(this.getBaseOptionsForDurationCalculations(),"t6",76);case 76:_context70.t7=_context70.t6;_context70.t8={startDate:startDate,endDate:endDate};options=_context70.t5.assign.call(_context70.t5,_context70.t7,_context70.t8);return _context70.delegateYield(this.forEachAvailabilityInterval({startDate:startDate,endDate:endDate},function(intervalStart,intervalEnd,calendarCacheIntervalMultiple){var workCalendars=calendarCacheIntervalMultiple.getCalendarsWorking();var intervalStartN=intervalStart.getTime(),intervalEndN=intervalEnd.getTime(),intervalDuration=intervalEndN-intervalStartN;var intervalUnits=0;var _iteratorNormalCompletion75=true;var _didIteratorError75=false;var _iteratorError75=undefined;try{for(var _iterator75=workCalendars[Symbol.iterator](),_step75;!(_iteratorNormalCompletion75=(_step75=_iterator75.next()).done);_iteratorNormalCompletion75=true){var workingCalendar=_step75.value;// the calendar of the event itself will be in the `workCalendars`, but it
// will be missing in the `totalUnitsByCalendar` map, which is fine
intervalUnits+=totalUnitsByCalendar.get(workingCalendar)||0;}// Effort = Units * Duration
}catch(err){_didIteratorError75=true;_iteratorError75=err;}finally{try{if(!_iteratorNormalCompletion75&&_iterator75.return!=null){_iterator75.return();}}finally{if(_didIteratorError75){throw _iteratorError75;}}}var intervalEffort=intervalUnits*intervalDuration*0.01;if(intervalEffort>=leftEffort){// increment result by left duration (Duration = Effort / Units)
resultN+=leftEffort/(0.01*intervalUnits);return false;}else{leftEffort-=intervalEffort;resultN+=intervalDuration;}}),"t9",80);case 80:_context70.t10=this;_context70.t11=resultN;_context70.t12=TimeUnit.Millisecond;_context70.next=85;return this.$.durationUnit;case 85:_context70.t13=_context70.sent;return _context70.delegateYield(_context70.t10.$convertDuration.call(_context70.t10,_context70.t11,_context70.t12,_context70.t13),"t14",87);case 87:return _context70.abrupt("return",_context70.t14);case 88:case"end":return _context70.stop();}}},calculateProjectedDuration,this,[[23,62,66,74],[31,44,48,56],[49,,51,55],[67,,69,73]]);})},{key:"canCalculateProjectedXDate",value:/*#__PURE__*/regeneratorRuntime.mark(function canCalculateProjectedXDate(){var useDuration,durationIsMutating;return regeneratorRuntime.wrap(function canCalculateProjectedXDate$(_context71){while(1){switch(_context71.prev=_context71.next){case 0:return _context71.delegateYield(this.useDurationForProjectedXDateCalculation(),"t0",1);case 1:useDuration=_context71.t0;return _context71.delegateYield(this.shouldRecalculateDuration(),"t1",3);case 3:durationIsMutating=_context71.t1;return _context71.abrupt("return",useDuration&&!durationIsMutating&&(this.$.duration.hasProposedValue()||this.$.duration.hasConsistentValue()));case 5:case"end":return _context71.stop();}}},canCalculateProjectedXDate,this);})},{key:"useDurationForProjectedXDateCalculation",value:/*#__PURE__*/regeneratorRuntime.mark(function useDurationForProjectedXDateCalculation(){var schedulingMode,assignmentsByCalendar;return regeneratorRuntime.wrap(function useDurationForProjectedXDateCalculation$(_context72){while(1){switch(_context72.prev=_context72.next){case 0:_context72.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context72.sent;_context72.next=5;return this.$.assignmentsByCalendar;case 5:assignmentsByCalendar=_context72.sent;return _context72.abrupt("return",schedulingMode===SchedulingMode.Normal||assignmentsByCalendar.size===0||// this means:
// 1) this is not a initial data calculation (hasConsistentValue)
// 2) there's a user input for duration (hasProposedValue)
this.$.duration.hasProposedValue()&&this.$.duration.hasConsistentValue());case 7:case"end":return _context72.stop();}}},useDurationForProjectedXDateCalculation,this);})},{key:"useDurationForProjectedStartDateCalculation",value:/*#__PURE__*/regeneratorRuntime.mark(function useDurationForProjectedStartDateCalculation(){return regeneratorRuntime.wrap(function useDurationForProjectedStartDateCalculation$(_context73){while(1){switch(_context73.prev=_context73.next){case 0:return _context73.delegateYield(this.useDurationForProjectedXDateCalculation(),"t0",1);case 1:return _context73.abrupt("return",_context73.t0);case 2:case"end":return _context73.stop();}}},useDurationForProjectedStartDateCalculation,this);})},{key:"useDurationForProjectedEndDateCalculation",value:/*#__PURE__*/regeneratorRuntime.mark(function useDurationForProjectedEndDateCalculation(){return regeneratorRuntime.wrap(function useDurationForProjectedEndDateCalculation$(_context74){while(1){switch(_context74.prev=_context74.next){case 0:return _context74.delegateYield(this.useDurationForProjectedXDateCalculation(),"t0",1);case 1:return _context74.abrupt("return",_context74.t0);case 2:case"end":return _context74.stop();}}},useDurationForProjectedEndDateCalculation,this);})},{key:"calculateProjectedStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedStartDate(endDate){return regeneratorRuntime.wrap(function calculateProjectedStartDate$(_context75){while(1){switch(_context75.prev=_context75.next){case 0:return _context75.delegateYield(this.useDurationForProjectedStartDateCalculation(),"t0",1);case 1:if(!_context75.t0){_context75.next=6;break;}return _context75.delegateYield(this.calculateProjectedXDateByDuration(endDate,false),"t1",3);case 3:return _context75.abrupt("return",_context75.t1);case 6:return _context75.delegateYield(this.calculateProjectedXDateByEffort(endDate,false),"t2",7);case 7:return _context75.abrupt("return",_context75.t2);case 8:case"end":return _context75.stop();}}},calculateProjectedStartDate,this);})},{key:"calculateProjectedEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedEndDate(startDate){return regeneratorRuntime.wrap(function calculateProjectedEndDate$(_context76){while(1){switch(_context76.prev=_context76.next){case 0:return _context76.delegateYield(this.useDurationForProjectedEndDateCalculation(),"t0",1);case 1:if(!_context76.t0){_context76.next=6;break;}return _context76.delegateYield(this.calculateProjectedXDateByDuration(startDate,true),"t1",3);case 3:return _context76.abrupt("return",_context76.t1);case 6:return _context76.delegateYield(this.calculateProjectedXDateByEffort(startDate,true),"t2",7);case 7:return _context76.abrupt("return",_context76.t2);case 8:case"end":return _context76.stop();}}},calculateProjectedEndDate,this);})/**
         * If a given resource is assigned to this task, returns a [[AssignmentMixin]] instance for it.
         * Otherwise returns `null`
         */},{key:"getAssignmentFor",value:function getAssignmentFor(resource){var result;this.assigned.forEach(function(assignment){if(assignment.resource===resource)result=assignment;});return result;}},{key:"isAssignedTo",value:function isAssignedTo(resource){return Boolean(this.getAssignmentFor(resource));}},{key:"reassign",value:function reassign(oldResource,newResource){var assignment=this.getAssignmentFor(oldResource);this.removeAssignment(assignment);var assignmentCls=this.getProject().assignmentStore.modelClass;this.addAssignment(new assignmentCls({event:this,resource:newResource}));return this.propagate();}/**
         * A method which assigns a resource to the current event
         */},{key:"assign",value:function(){var _assign=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee41(resource){var units,assignmentCls,_args77=arguments;return regeneratorRuntime.wrap(function _callee41$(_context77){while(1){switch(_context77.prev=_context77.next){case 0:units=_args77.length>1&&_args77[1]!==undefined?_args77[1]:100;assignmentCls=this.getProject().assignmentStore.modelClass;this.addAssignment(new assignmentCls({event:this,resource:resource,units:units}));return _context77.abrupt("return",this.propagate());case 4:case"end":return _context77.stop();}}},_callee41,this);}));function assign(_x71){return _assign.apply(this,arguments);}return assign;}()/**
         * A method which unassigns a resource from the current event
         */},{key:"unassign",value:function(){var _unassign=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee42(resource){var assignment;return regeneratorRuntime.wrap(function _callee42$(_context78){while(1){switch(_context78.prev=_context78.next){case 0:assignment=this.getAssignmentFor(resource);this.removeAssignment(assignment);return _context78.abrupt("return",this.propagate());case 3:case"end":return _context78.stop();}}},_callee42,this);}));function unassign(_x72){return _unassign.apply(this,arguments);}return unassign;}()// template methods, overridden in scheduling modes mixins
// should probably be named something like "onEventAssignmentAdded"
// should be a listener for the `add` event of the assignment store instead
},{key:"addAssignment",value:function addAssignment(assignment){this.getProject().assignmentStore.add(assignment);return assignment;}// should be a listener for the `remove` event of the assignment store instead
},{key:"removeAssignment",value:function removeAssignment(assignment){this.getProject().assignmentStore.remove(assignment);return assignment;}},{key:"leaveProject",value:function leaveProject(){var assignmentStore=this.getAssignmentStore();this.assigned.forEach(function(assignment){return assignmentStore.remove(assignment);});_get2(_getPrototypeOf2(HasAssignments.prototype),"leaveProject",this).call(this);}},{key:"assignments",get:function get(){return _toConsumableArray(this.assigned);}}]);return HasAssignments;}(base);__decorate$2([model_field({'type':'number',allowNull:true})],HasAssignments.prototype,"effort",void 0);__decorate$2([model_field({'type':'string',defaultValue:TimeUnit.Hour},{converter:DateHelper.normalizeUnit})],HasAssignments.prototype,"effortUnit",void 0);__decorate$2([model_field({'type':'boolean',defaultValue:false})],HasAssignments.prototype,"effortDriven",void 0);__decorate$2([generic_field({},ModelBucketField)],HasAssignments.prototype,"assigned",void 0);__decorate$2([field()],HasAssignments.prototype,"effectiveCalendarsCombination",void 0);__decorate$2([field()],HasAssignments.prototype,"assignmentsByCalendar",void 0);__decorate$2([calculate('effortDriven')],HasAssignments.prototype,"calculateEffortDriven",null);__decorate$2([calculate('effort')],HasAssignments.prototype,"calculateEffort",null);__decorate$2([calculate('effectiveCalendarsCombination')],HasAssignments.prototype,"calculateEffectiveCalendarsCombination",null);__decorate$2([calculate('assignmentsByCalendar')],HasAssignments.prototype,"calculateAssignmentsByCalendar",null);return HasAssignments;};/**
 * @module Gantt/model/AssignmentsManipulationModel
 */ /**
 * A special model class for resource assignments manipulation.
 * Used by {@link Gantt/data/AssignmentsManipulationStore Assignments manipulation store}.
 *
 * This model is not intended to be serialized and/or synchronized with the server somehow.
 *
 * @extends Gantt/model/AssignmentModel
 * @internal
 */var AssignmentsManipulationModel=/*#__PURE__*/function(_Model8){_inherits2(AssignmentsManipulationModel,_Model8);function AssignmentsManipulationModel(){_classCallCheck2(this,AssignmentsManipulationModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentsManipulationModel).apply(this,arguments));}_createClass2(AssignmentsManipulationModel,[{key:"name",get:function get(){// Might have grouping enabled where there is no resource
return this.resource?this.resource.name:'';}},{key:"assigned",get:function get(){var me=this;return me.firstStore.projectEvent===me.event;},set:function set(value){var me=this;if(value){me.set({event:me.firstStore.projectEvent,units:100});}else{me.set({event:null,units:0});}}}],[{key:"fields",get:function get(){return[{name:'assignment',type:'object'},{name:'resource',type:'object'},{name:'event',type:'object'},{name:'units',type:'number',defaultValue:0}];}}]);return AssignmentsManipulationModel;}(Model);exports.AssignmentsManipulationModel=AssignmentsManipulationModel;AssignmentsManipulationModel._$name='AssignmentsManipulationModel';var defineParser$1=Parser.defineParser,alt$1=Parser.alt,seq$1=Parser.seq,string$1=Parser.string,regexp$1=Parser.regexp,succeed$1=Parser.succeed,red$1=Parser.red,isSuccess$1=Parser.isSuccess;/**
 * @module Gantt/util/ResourceAssignmentParser
 */ /**
 * Consumes string while it won't hit [ or , character, value parsed will be trimmed of spaces
 *
 * Example: Maxim Bazhenov [100%] rest -> Maxim Bazhenov
 */var resourceNamePEG=defineParser$1(red$1(regexp$1('[^\\[\\,]+'),function(name){return{name:name.trim(),units:100,match:name};}));/**
 * Consumes string while it provides numbers or spaces, value parsed them will be filtered of spaces
 * and just compacted number will be used.
 *
 * Example: 12 34 0 rest -> 12340
 */var integerPEG=defineParser$1(red$1(regexp$1('[0-9\\s]+'),function(value){return{value:value.split(/\s*/).join(''),match:value};}));/**
 * Consumes one character either (decimal separator) '.' or ','
 *
 * Example: , rest -> ,
 */var decimalSeparatorPEG=defineParser$1(red$1(alt$1(string$1('.'),string$1(',')),function(value){return{value:value,match:value};}));/**
 * Consumes units number which might be given as:
 * - number with integer, decimal separator and fractional parts
 * - decimal separator and fractional part, so integer part will be considered 0
 * - just integer
 * value parsed will be transformed into Number type
 *
 * Example:
 * 10.2 rest -> 10.2
 * .2 rest -> 0.2
 * 100 rest -> 100
 */var unitsNumberPEG=defineParser$1(alt$1(red$1(seq$1(function(){return integerPEG;},function(){return decimalSeparatorPEG;},function(){return integerPEG;}),function(integer,sep,fractional){return{value:Number("".concat(integer.value,".").concat(fractional.value)),match:[integer.match,sep.match,fractional.match].join('')};}),red$1(seq$1(function(){return decimalSeparatorPEG;},function(){return integerPEG;}),function(sep,fractional){return{value:Number("0.".concat(fractional.value)),match:[sep.match,fractional.match].join('')};}),red$1(function(){return integerPEG;},function(value){return{value:Number("".concat(value.value)),match:value.match};})));/**
 * Consumes units with %, strips spaces between units number and % character.
 *
 * Example:
 * 70.5  % rest -> 70.5
 */var unitsPersentagePEG=defineParser$1(alt$1(red$1(seq$1(function(){return unitsNumberPEG;},regexp$1('\\s*\\%')),function(units,perc){return{value:units.value,match:[units.match,perc].join('')};}),red$1(function(){return unitsNumberPEG;},function(units){return{value:units.value,match:units.match};})));/**
 * Consumes units designation string, which should look like [ units with or without % ].
 * Strips spaces before and after [, ] characters.
 *
 * Example:
 * [ 70.2 % ] rest -> 70.2
 */var unitsDesignationPEG=defineParser$1(red$1(seq$1(regexp$1('\\s*\\[\\s*'),function(){return unitsPersentagePEG;},regexp$1('\\s*\\]')),function(startSep,units,endSep){return{units:units.value,match:[startSep,units.match,endSep].join('')};}));/**
 * Consumes just single , character stripping spaces before and after
 *
 * Example:
 *     ,     rest -> ,
 */var commaPEG=defineParser$1(red$1(regexp$1('\\s*,\\s*'),function(value){return{value:value,match:value};}));/**
 * Consumes resource assignment string which consists of resources assignment entries separated by , character.
 * Each entry contains following parts:
 * - resource name (mandatory)
 * - units designation (optional, default is 100)
 *
 * Example:
 * Maxim Bazhenov, Mats Bryntse [90], Johan Isaksson [50 %] -> Successfull parse result
 *
 * See {@link #function-parse} for parse result analyzis
 */var raPEG=defineParser$1(alt$1(seq$1(function(){return resourceNamePEG;},function(){return unitsDesignationPEG;},alt$1(seq$1(function(){return commaPEG;},function(){return raPEG;}),succeed$1(''))),seq$1(function(){return resourceNamePEG;},alt$1(seq$1(function(){return commaPEG;},function(){return raPEG;}),succeed$1('')))));/**
 * Parses resource assignment string into structured set of objects
 *
 * The string format is: `Resource Name [Units%], Other name, ...` where units part is optional as well as % sign
 *
 * @return {Object} Structured information about parsed assignments
 */var parse=function parse(str){var gotSuccess=false,result=[],rest='';raPEG(str,function(possibleResult){if(isSuccess$1(possibleResult)){var _possibleResult=_slicedToArray(possibleResult,3),structuredResult=_possibleResult[1],unstracturedRest=_possibleResult[2];if(structuredResult.length>result.length){result=structuredResult;rest=unstracturedRest;gotSuccess=true;}}});var position=0;return gotSuccess?{rest:rest,assignments:result.reduce(function(result,part){var currentResource;if(_typeof(part)=='object'){if(part.hasOwnProperty('name')){currentResource=Object.assign({position:position},part);result.push(currentResource);}else{currentResource=result[result.length-1];if(part.hasOwnProperty('units')){currentResource.units=part.units;}currentResource.match+=part.match;}position+=part.match.length;}return result;},[])}:false;};/**
 * Composes parseable string from parse result object
 *
 * @param {Object} result Parse result like object
 * @param {Boolean} [exactIfPossible=false] Set to true to compose exactly like it was given to {@link #function-parse} and if parse result reverse composition information is available.
 * @return {String}
 */var compose=function compose(parseResult){var exactIfPossible=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var result='';if(parseResult.assignments){result+=parseResult.assignments.reduce(function(str,_ref377){var name=_ref377.name,units=_ref377.units,match=_ref377.match;if(match&&exactIfPossible){str+=match;}else{str+=(str.length?', ':'')+"".concat(name," [").concat(units,"%]");}return str;},result);}if(parseResult.rest){result+=parseResult.rest;}if(!exactIfPossible){result=result.trim();}return result;};/**
 * Normalizes the given string by parsing it and recomposing it back thus omitting all optional parts
 *
 * @param {String} str
 * @return {String}
 */var normalize=function normalize(str){return compose(parse(str));};var Parser$1={parse:parse,compose:compose,normalize:normalize};exports.ResourceAssignmentParser=Parser$1;var compose$1=Parser$1.compose;/**
 * @module Gantt/data/AssignmentsManipulationStore
 */ /**
 * Special store class for _single_ task/event assignments manipulation, used by {@link Gantt/widget/AssignmentGrid}
 *
 * Contains a collection of {@link Gantt/model/AssignmentsManipulationModel} records.
 *
 * @extends Common/data/Store
 * @internal
 */var AssignmentsManipulationStore=/*#__PURE__*/function(_Store3){_inherits2(AssignmentsManipulationStore,_Store3);function AssignmentsManipulationStore(){_classCallCheck2(this,AssignmentsManipulationStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentsManipulationStore).apply(this,arguments));}_createClass2(AssignmentsManipulationStore,[{key:"afterConfigure",value:function afterConfigure(){var me=this;_get2(_getPrototypeOf2(AssignmentsManipulationStore.prototype),"afterConfigure",this).call(this);me.addSorter({fn:me.defaultSort.bind(me)});}//endregion
},{key:"updateAllNoneSomeAssignedFlags",value:function updateAllNoneSomeAssignedFlags(){var me=this,projectEvent=me.projectEvent,allRecords=me.allRecords,prevAllValue=me._lastAllAssigned,prevNoneValue=me._lastNoneAssigned,prevSomeValue=me._lastSomeAssigned;me._lastAllAssigned=allRecords.every(function(a){return a.event===projectEvent;});me._lastNoneAssigned=allRecords.every(function(a){return a.event==null;});me._lastSomeAssigned=!me._lastAllAssigned&&!me._lastNoneAssigned;if(prevAllValue!==undefined&&me._lastAllAssigned!==prevAllValue&&me._lastAllAssigned){/**
             * Fires when all models in the store have task assigned, i.e. all resources designated by the store models
             * are assigned to the task
             * @event allAssigned
             */me.trigger('allAssigned');}if(prevNoneValue!==undefined&&me._lastNoneAssigned!==prevNoneValue&&me._lastNoneAssigned){/**
             * Fires when all models in the store have no task assigned, i.e. all resources designated by the store models
             * are unassigned from the task
             * @event noneAssigned
             */me.trigger('noneAssigned');}if(prevSomeValue!==undefined&&me._lastSomeAssigned!==prevSomeValue&&me._lastSomeAssigned){/**
             * Fires when some models in the store have task assigned, i.e. some resources designated by the store models
             * are assigned to the task
             * @event someAssigned
             */me.trigger('someAssigned');}}/**
     * Fills this store from master {@link Gantt/data/ResourceStore resource} store and {@link Gantt/data/AssignmentStore assignment} store.
     */},{key:"fillFromMaster",value:function fillFromMaster(){var me=this,projectEvent=me.projectEvent;if(projectEvent){var resourceStore=me.resourceStore,activeAssignmentsByResource=new Map(Array.from(projectEvent.assignments).reduce(function(result,assignment){result.push([assignment.resource,assignment]);return result;},[]));me.data=resourceStore.map(function(resource){var assignment=activeAssignmentsByResource.get(resource);return new me.modelClass({assignment:assignment,event:assignment?projectEvent:null,resource:resource,units:assignment&&assignment.units||0});});if(me.floatAssignedResources){me.sort();}}}},{key:"onValueCollectionChange",value:function onValueCollectionChange(_ref378){var removed=_ref378.removed;removed&&removed.length&&removed.forEach(function(a){return a.assigned=false;});}/**
     * Saves changes back master {@link Gantt/data/AssignmentStore assignment store}.
     * @fires changesApplied
     */},{key:"applyChanges",value:function(){var _applyChanges=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee43(){var me,projectEvent,assignmentStore,changes,toAdd,toRemove,result,replica,oldThreshold;return regeneratorRuntime.wrap(function _callee43$(_context79){while(1){switch(_context79.prev=_context79.next){case 0:me=this,projectEvent=me.projectEvent,assignmentStore=me.assignmentStore,changes=me.changes,toAdd=[],toRemove=[];if(!(changes&&changes.modified)){_context79.next=16;break;}changes.modified.forEach(function(assignment){// Either new assignment or modified one
if(assignment.event===projectEvent){var realAssignment=assignment.assignment;// Modified, units is the only field we allow modify
if(realAssignment){realAssignment.$.units.put(assignment.units);}// New one
else{toAdd.push({resource:assignment.resource,event:assignment.event,units:assignment.units});}}// Deleted assignment
else{toRemove.push(assignment.assignment);}});// Clear modified collection
me.commit();toRemove.length&&assignmentStore.remove(toRemove);toAdd.length&&assignmentStore.add(toAdd);// TODO: Remove threshold manipulation when there is a silent propagate()
replica=projectEvent.project.replica,oldThreshold=replica.projectRefreshThreshold;replica.projectRefreshThreshold=0;_context79.next=10;return projectEvent.propagate();case 10:result=_context79.sent;replica.projectRefreshThreshold=oldThreshold;// Fake ending a batch
assignmentStore.trigger('refresh',{action:'dataset'});if(result===PropagationResult.Completed){if(me.floatAssignedResources){me.sort();}/**
                 * Fires when all changes done to the models in this store are applied to {@link Gantt/data/AssignmentStore assignment store}
                 * @event changesApplied
                 */me.trigger('changesApplied');}_context79.next=17;break;case 16:result=PropagationResult.Complete;case 17:return _context79.abrupt("return",result);case 18:case"end":return _context79.stop();}}},_callee43,this);}));function applyChanges(){return _applyChanges.apply(this,arguments);}return applyChanges;}()/**
     * Returns current assignment record for resource
     *
     * @param {Gantt.model.ResourceModel} resource Resource model to get assignment record for
     * @return {Gantt.model.AssignmentsManipulationModel}
     */},{key:"getResourceAssignment",value:function getResourceAssignment(resource){return this.storage.getBy('resource',resource);}/**
     * Assigns resource to current {@link #config-projectEvent projectEvent}.
     *
     * @param {Gantt.model.ResourceModel} resource Resource model
     * @param {Number} [units] Units to assign
     */},{key:"assignResource",value:function assignResource(resource){var units=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;var me=this,assignment=me.getResourceAssignment(resource);assignment.set({event:me.projectEvent,units:units});}/**
     * Unassigns resource from current {@link #config-projectEvent projectEvent}.
     *
     * @param {Gantt.model.ResourceModel} resourceId Resource model
     */},{key:"unassignResource",value:function unassignResource(resource){var me=this,assignment=me.storage.getBy('resource',resource);assignment.set({event:null,units:0});}/**
     * Assigns all resources to the {@link #config-projectEvent projectEvent}.
     *
     * @param {Number} [units=100] The amount of units each resource should devote to the task
     * @param {Boolean} [forceUnits=false] If method should forcefully set units even if resource is already assigned to the task.
     */},{key:"assignAllResources",value:function assignAllResources(){var units=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;var forceUnits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var me=this,projectEvent=me.projectEvent;me.beginBatch();me.forEach(function(a){a.event=projectEvent;if(!a.units||forceUnits){a.units=units;}});me.endBatch();}/**
     * Unassignes all resource from the {@link #config-projectEvent projectEvent}.
     */},{key:"unassignAllResources",value:function unassignAllResources(){var me=this;me.beginBatch();me.forEach(function(a){a.event=null;a.units=0;});me.endBatch();}// TODO: this is for live editing
},{key:"findMostMatchingResourceByName",value:function findMostMatchingResourceByName(name){/*
        const me = this;

        let prevHits,
            hits,
            prefix,
            result;

        if (name.length > 0) {
            prefix = name.substr(0, 1);
            while (!result) {
                hits = me.query()
            }
        }
        else {
            result = me.first;
        }

        return result;
        */}},{key:"toValueString",value:function toValueString(){var activeAssignments=this.activeAssignments;return compose$1({rest:'',assignments:activeAssignments});}// TODO: this is for live editing
},{key:"fromValueString",value:function fromValueString(value){}//const me = this,
//    result = parse(value);
//if (!result) {
//    me.unassignAllResources();
//}
//else {
//    result.assignments.forEach(({name, units}) => {
//        // TODO:
//        // - find most matching result
//    });
//}
// TODO: this is for live editing
},{key:"proposeStringValues",value:function proposeStringValues(value){//const me = this,
//    parseResult = parse(compose(parse(value))), // That's to normalize spaces
//    [at] = parseResult.assignments.reduce(
//        ([idx, pos], assignment, arrIdx) => {
//            if (assignment.position <= pos && pos < assignment.position + assignment.matchLen) {
//                idx = arrIdx;
//            }
//            return [idx, cursorPosition];
//        },
//        [-1, cursorPosition]
//    ),
//    activeAssignment = at !== -1 ? parseResult.assignments[at] : null;
//let result;
//if (activeAssignment) {
//    // Find all matching resources
//    const possibleAssignments = me.query(
//        (r) => r.name.startsWith(activeAssignment.name)
//    );
//    //[proposedValue, selectionStart, selectionEnd]
//    result = possibleAssignments.map(
//        (a) => {
//            const parsedAssignmentsCopy = parseResult.assignments.slice(),
//                parsedEntry = parsedAssignmentsCopy[at],
//                proposedEntry = {
//                    name  : a.name,
//                    units : parsedEntry.units
//                },
//                startSelection = parsedEntry.position + parsedEntry.name.length,
//                endSelection = parsedEntry.position + compose({ rest : '', assignments : [proposedEntry] }).length;
//            parsedAssignmentsCopy[at] = proposedEntry;
//            return [
//                compose({
//                    rest        : '',
//                    assignments : parsedAssignmentsCopy
//                }),
//                startSelection,
//                endSelection
//            ];
//        }
//    );
//}
//else {
//    result = [];
//}
//return result;
var cursorPosition=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Number.MAX_VALUE;}},{key:"defaultSort",value:function defaultSort(lhs,rhs){var result=0;if(this.floatAssignedResources){if(!rhs.event&&lhs.event){result=-1;}else if(!lhs.event&&rhs.event){result=1;}else{result=lhs.name.localeCompare(rhs.name);}}else{result=lhs.name.localeCompare(rhs.name);}return result;}},{key:"onRefresh",value:function onRefresh(){var me=this;if(!me.isConfiguring){me.updateAllNoneSomeAssignedFlags();me.valueCollection.splice(0,me.valueCollection.count,me.activeAssignments);}}},{key:"onUpdate",value:function onUpdate(_ref379){var changes=_ref379.changes;var me=this;if(!me.isConfiguring){if(changes.hasOwnProperty('event')){me.updateAllNoneSomeAssignedFlags();if(me.floatAssignedResources&&me.liveFloatAssignedResources){me.sort();}}me.valueCollection.splice(0,me.valueCollection.count,me.activeAssignments);}}},{key:"onRemoveAll",value:function onRemoveAll(){if(!this.isConfiguring){this.updateAllNoneSomeAssignedFlags();this.valueCollection.clear();}}},{key:"projectEvent",get:function get(){return this._projectEvent;},set:function set(projectEvent){var me=this;if(projectEvent!=me._projectEvent){me._projectEvent=projectEvent;if(projectEvent){me.fillFromMaster();}else{me.removeAll();}}}},{key:"floatAssignedResources",get:function get(){return this._floatAssignedResources;},set:function set(value){var me=this;if(value!==me.floatAssignedResources){me._floatAssignedResources=value;me.sort();}}},{key:"assignmentStore",get:function get(){return this.projectEvent&&this.projectEvent.getAssignmentStore()||null;}},{key:"resourceStore",get:function get(){return this.projectEvent&&this.projectEvent.getResourceStore()||null;}},{key:"areAllAssigned",get:function get(){return this._lastAllAssigned;}},{key:"areNoneAssigned",get:function get(){return this._lastNoneAssigned;}},{key:"areSomeAssigned",get:function get(){return this._lastSomeAssigned;}},{key:"valueCollection",set:function set(valueCollection){if(this._valueCollection!==valueCollection){this._valueCollection=valueCollection;valueCollection.splice(0,valueCollection.count,this.activeAssignments);valueCollection.on({change:'onValueCollectionChange',thisObj:this});}},get:function get(){if(!this._valueCollection){this.valueCollection=new Collection();}return this._valueCollection;}},{key:"activeAssignments",get:function get(){var me=this,projectEvent=me.projectEvent;return me.query(function(a){return a.event===projectEvent;});}}],[{key:"defaultConfig",//region Config
get:function get(){return{modelClass:AssignmentsManipulationModel,storeId:'assignmentsmanipulation',storage:{extraKeys:['resource']},callOnFunctions:true,/**
             * Event model to manipulate assignments of, the event should be part of a project.
             *
             * @config {Gantt.model.TaskModel}
             */projectEvent:null,/**
             * Flag indicating whether assigned resources should be placed (floated) before unassinged ones.
             *
             * @config {boolean}
             * @private
             */floatAssignedResources:true,/**
             * Flag indicating whether assigned resources should be floated live
             *
             * @config {boolean}
             * @private
             */liveFloatAssignedResources:false};}}]);return AssignmentsManipulationStore;}(Store);exports.AssignmentsManipulationStore=AssignmentsManipulationStore;AssignmentsManipulationStore._$name='AssignmentsManipulationStore';/**
 * @module Gantt/widget/AssignmentGrid
 */ /**
 * This grid visualizes and edits current {@link #config-projectEvent events} assignments.
 *
 * @extends Grid/view/Grid
 * @classType assignmentgrid
 */var AssignmentGrid=/*#__PURE__*/function(_Grid2){_inherits2(AssignmentGrid,_Grid2);function AssignmentGrid(){_classCallCheck2(this,AssignmentGrid);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentGrid).apply(this,arguments));}_createClass2(AssignmentGrid,[{key:"doDestroy",//endregion
value:function doDestroy(){var me=this,checkAllColumnCheckbox=me.checkAllColumnCheckbox;if(checkAllColumnCheckbox){checkAllColumnCheckbox.destroy();me.checkAllColumnCheckBox=null;}if(me._assignmentGridStoreDetacher){me._assignmentGridStoreDetacher();me._assignmentGridStoreDetacher=null;}_get2(_getPrototypeOf2(AssignmentGrid.prototype),"doDestroy",this).call(this);}},{key:"renderCheckColumnHeader",value:function renderCheckColumnHeader(a){var column=a.column,headerElement=a.headerElement,grid=column.grid;if(!headerElement.widget){headerElement.widget=WidgetHelper.append({type:'checkbox',cls:column.checkCls,readOnly:grid.readOnly,owner:grid,onChange:grid.onHeaderCheckboxChange.bind(grid),checked:grid.store.isAllAssigned,value:'all'},headerElement)[0];}headerElement.widget.checked=grid.store.isAllAssigned;}},{key:"renderResourceName",value:function renderResourceName(_ref380){var record=_ref380.record;return record.name;}},{key:"renderUnits",value:function renderUnits(_ref381){var value=_ref381.value;return this.L('unitsTpl',{value:value});}},{key:"onHeaderCheckboxChange",value:function onHeaderCheckboxChange(_ref382){var checked=_ref382.checked;var me=this;if(!me._skipHeaderCheckboxEvent){if(checked){me.store.assignAllResources();}else{me.store.unassignAllResources();}}}},{key:"onStoreAllAssigned",value:function onStoreAllAssigned(){var me=this,checkAllColumnCheckbox=me.checkAllColumnCheckBox;if(checkAllColumnCheckbox){me._skipHeaderCheckboxEvent=true;checkAllColumnCheckbox.checked=true;me._skipHeaderCheckboxEvent=false;}}},{key:"onStoreNoneAssigned",value:function onStoreNoneAssigned(){var me=this,checkAllColumnCheckbox=me.checkAllColumnCheckBox;if(checkAllColumnCheckbox){me._skipHeaderCheckboxEvent=true;checkAllColumnCheckbox.checked=false;me._skipHeaderCheckboxEvent=false;}}},{key:"onStoreSomeAssigned",value:function onStoreSomeAssigned(){var me=this,checkAllColumnCheckbox=me.checkAllColumnCheckBox;if(checkAllColumnCheckbox){me._skipHeaderCheckboxEvent=true;checkAllColumnCheckbox.checked=false;me._skipHeaderCheckboxEvent=false;}}},{key:"projectEvent",get:function get(){var me=this,store=me.store;var projectEvent=me._projectEvent;if(store&&projectEvent!==store.projectEvent){projectEvent=me._projectEvent=store.projectEvent;}return projectEvent;},set:function set(projectEvent){var store=this.store;this._projectEvent=projectEvent;if(store){store.projectEvent=projectEvent;}}},{key:"store",get:function get(){return _get2(_getPrototypeOf2(AssignmentGrid.prototype),"store",this);},set:function set(store){var me=this,oldStore=me.store;if(oldStore!==store){if(me._assignmentGridStoreDetacher){me._assignmentGridStoreDetacher();me._assignmentGridStoreDetacher=null;}if(!(store instanceof AssignmentsManipulationStore)){store=new AssignmentsManipulationStore(Object.assign({projectEvent:me.projectEvent},store));}me._assignmentGridStoreDetacher=store.on({'allAssigned':me.onStoreAllAssigned,'noneAssigned':me.onStoreNoneAssigned,'someAssigned':me.onStoreSomeAssigned},me);_set(_getPrototypeOf2(AssignmentGrid.prototype),"store",store,this,true);}}},{key:"checkAllColumnCheckBox",get:function get(){var checkAllColumn=this.columns.find(function(c){return c.type==='check'&&c.field==='assigned';});return checkAllColumn&&checkAllColumn.element&&checkAllColumn.element.widget;},set:function set(widget){var checkAllColumn=this.columns.find(function(c){return c.type==='check'&&c.field==='assigned';});if(checkAllColumn&&checkAllColumn.element){checkAllColumn.element.widget=widget;}}}],[{key:"type",get:function get(){return'assignmentgrid';}//region Config
},{key:"defaultConfig",get:function get(){return{columns:[{field:'assigned',type:CheckColumn.type,width:50,sortable:false,align:'center',cls:'b-assignmentgrid-assign-all-column',headerRenderer:function headerRenderer(p){return p.column.grid.renderCheckColumnHeader(p);},filterable:false},{cls:'b-assignmentgrid-resource-column',field:'resourceId',flex:1,editor:null,renderer:function renderer(p){return p.grid.renderResourceName(p);},filterable:{filterField:{placeholder:this.L('Name'),triggers:{filter:{align:'start',cls:'b-icon b-icon-filter'}}},filterFn:function filterFn(_ref383){var value=_ref383.value,record=_ref383.record;return record.name.toLowerCase().indexOf(value.toLowerCase())!==-1;}},sortable:function sortable(lhs,rhs){return lhs.name<rhs.name?-1:lhs.name>rhs.name?1:0;}},{field:'units',type:NumberColumn.type,text:this.L('Units'),width:70,min:0,max:100,step:10,unit:this.L('%'),renderer:function renderer(p){return p.grid.renderUnits(p);},filterable:false}],// If enabled blocks header checkbox click event
features:{group:false,filterBar:true,contextMenu:false},disableGridRowModelWarning:true,/**
             * Event model to manipulate assignments of, the task should be part of a task store.
             * Either task or {@link Grid/view/Grid#config-store store} should be given.
             *
             * @config {Gantt/model/TaskModel}
             */projectEvent:null};}}]);return AssignmentGrid;}(Grid);exports.AssignmentGrid=AssignmentGrid;AssignmentGrid._$name='AssignmentGrid';BryntumWidgetAdapterRegister.register(AssignmentGrid.type,AssignmentGrid);/**
 * @module Gantt/widget/AssignmentPicker
 */ /**
 * Class for assignment field dropdown, wraps {@link Gantt/widget/AssignmentGrid} within a frame and adds two buttons: Save and Cancel
 * @private
 */var AssignmentPicker=/*#__PURE__*/function(_Panel3){_inherits2(AssignmentPicker,_Panel3);function AssignmentPicker(){_classCallCheck2(this,AssignmentPicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentPicker).apply(this,arguments));}_createClass2(AssignmentPicker,[{key:"afterConfigure",value:function afterConfigure(){var me=this;_get2(_getPrototypeOf2(AssignmentPicker.prototype),"afterConfigure",this).call(this);me.bbar.widgetMap.saveBtn.on('click',me.onSaveClick,me);me.bbar.widgetMap.cancelBtn.on('click',me.onCancelClick,me);}// Override, default focus to the filter field
},{key:"createWidget",value:function createWidget(config){if(config&&config.ref==='grid'){var gridClassConfig=BryntumWidgetAdapterRegister.getClass(config.type).defaultConfig;// During configuration, this will return the config passed in,
// not the grid instance (which won't exist at that time)
var gridExtraConfig=this.grid;if(gridExtraConfig){// Columns is an array, and won't merge, so concat it before.
if(gridExtraConfig.columns){config.columns=[].concat(_toConsumableArray(gridClassConfig.columns),_toConsumableArray(gridExtraConfig.columns));// We must not mutate config objects owned by outside classes.
gridExtraConfig=Object.assign({},gridExtraConfig);delete gridExtraConfig.columns;}// Merge the AssignmentField's grid config into the default.
ObjectHelper.merge(config,gridExtraConfig);}config.projectEvent=this.projectEvent;config.store=this.store;}return _get2(_getPrototypeOf2(AssignmentPicker.prototype),"createWidget",this).call(this,config);}//region Event handlers
},{key:"onSaveClick",value:function onSaveClick(){this.store.applyChanges();this.hide();}},{key:"onCancelClick",value:function onCancelClick(){this.store.fillFromMaster();this.hide();}//endregion
},{key:"focusElement",get:function get(){return this.element.querySelector('input[type=text]');}},{key:"grid",get:function get(){return this.isConfiguring?this._grid:this.widgetMap.grid;},set:function set(grid){this._grid=grid;}}],[{key:"type",get:function get(){return'assignmentpicker';}},{key:"defaultConfig",get:function get(){return{/**
             * A config object used to modify the {@link Gantt.widget.AssignmentGrid assignment grid}
             * used to select resourtces to assign.
             *
             * This config is merged with the configuration of the picker's assignment grid, so features
             * can be added (or default features removed by using `featureName : false`).
             *
             * Any `columns` provided are concatenated onto the default column set.
             * @config {Object} [grid]
             */grid:null,focusable:true,trapFocus:true,height:'20em',minWidth:'25em',items:[{ref:'grid',type:AssignmentGrid.type}],bbar:[{type:'button',text:this.L('Save'),ref:'saveBtn',color:'b-green'},{type:'button',text:this.L('Cancel'),ref:'cancelBtn',color:'b-gray'}],/**
             * Event to load resource assignments for.
             * Either event or {@link #config-store store} should be given.
             *
             * @config {Gantt.model.TaskModel}
             */projectEvent:null,/**
             * Store for the picker.
             * Either store or {@link #config-projectEvent projectEvent} should be given
             *
             * @config {Gantt.data.AssignmentsManipulationStore}
             */store:null};}}]);return AssignmentPicker;}(Panel);exports.AssignmentPicker=AssignmentPicker;AssignmentPicker._$name='AssignmentPicker';BryntumWidgetAdapterRegister.register(AssignmentPicker.type,AssignmentPicker);/**
 * @module Gantt/widget/AssignmentField
 */ /**
 * Special field class to edit single event assignments
 *
 * @extends Common/widget/PickerField
 * @classType 'assignmentfield'
 */var AssignmentField=/*#__PURE__*/function(_Combo4){_inherits2(AssignmentField,_Combo4);function AssignmentField(){_classCallCheck2(this,AssignmentField);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentField).apply(this,arguments));}_createClass2(AssignmentField,[{key:"onChipClose",//endregion
// Any change must offer the save/cancel UI since THAT is what actually makes the edit
value:function onChipClose(records){this.onTriggerClick();for(var _i37=0,len=records.length;_i37<len;_i37++){// Showing the picker recreates the AssignmentsManipulationModels, so we
// must find the corresponding new version to deassign.
this.store.findRecord('resource',records[_i37].resource).set({event:null,units:0});}}},{key:"syncInputFieldValue",value:function syncInputFieldValue(){_get2(_getPrototypeOf2(AssignmentField.prototype),"syncInputFieldValue",this).call(this);if(this.store){this.tooltip=this.store.toValueString();}}//region Picker
// Override. This field does not have a primary filter, so
// down arrow/trigger click should just show the picker.
},{key:"onTriggerClick",value:function onTriggerClick(event){if(this.pickerVisible){this.hidePicker();}else{PickerField.prototype.showPicker.call(this,event&&'key'in event);}}},{key:"focusPicker",value:function focusPicker(){this.picker.focus();}},{key:"onPickerKeyDown",//endregion
// Override. Picker is completely self-contained. Prevent any
// field action on its key events.
value:function onPickerKeyDown(event){var grid=this.picker.grid;// Move "down" into the grid body
if(event.key==='ArrowDown'&&event.target.compareDocumentPosition(grid.bodyContainer)===document.DOCUMENT_POSITION_FOLLOWING){grid.element.focus();}}},{key:"picker",get:function get(){var me=this;if(!(me._picker instanceof AssignmentPicker)){me._picker=WidgetHelper.createWidget(Object.assign({type:AssignmentPicker.type,projectEvent:me.projectEvent,store:me.store,readOnly:me.readOnly,owner:me,forElement:me[me.pickerAlignElement],floating:true,scrollAction:'realign',align:{align:'t0-b0',axisLock:true,anchor:me.overlayAnchor,target:me[me.pickerAlignElement]}},me._picker));}return me._picker;},set:function set(picker){var me=this;// Do not instantiate when the config is set because this forces creation
// of the picker too early, before we have been fed our projectEvent.
// Promote the config to an AssignmentPicker instance only when it's asked for.
if(picker!=me._picker){if(me._picker){me._picker.destroy();}me._picker=picker;if(picker instanceof AssignmentPicker){me.store=picker.store;me.projectEvent=picker.projectEvent;}}}//endregion
//region Value
},{key:"projectEvent",get:function get(){return this._projectEvent;},set:function set(projectEvent){var me=this;if(projectEvent!=me._projectEvent){me._projectEvent=projectEvent;me.store.projectEvent=projectEvent;if(me._picker){me._picker.projectEvent=projectEvent;}}}},{key:"store",get:function get(){if(!this._store){this.store={};}return this._store;},set:function set(store){var me=this;if(store!=me._store){if(store instanceof AssignmentsManipulationStore){me._store=store;me.projectEvent=store.projectEvent;}else if(store){me._store=new AssignmentsManipulationStore(Object.assign({valueCollection:me.valueCollection},store));me._store.projectEvent=me.projectEvent;// This is to not do the store::fillFromMaster() call, otherwise editor will be unhappy
}}}// The AssignmentPicker's "Save" button applies the change to the task
// being edited immediately. The field's value has no bearing and
// the Editor's completeEdit will find no change upon complete.
},{key:"value",get:function get(){},set:function set(v){}}],[{key:"type",value:function type(){return'assignmentfield';}//region Config
},{key:"defaultConfig",get:function get(){return{chipView:{cls:'b-assignment-chipview',itemTpl:function itemTpl(assignment,i){return"".concat(assignment.name," ").concat(assignment.units,"%");}},triggers:{expand:{cls:'b-icon-down',handler:'onTriggerClick'}},multiSelect:true,clearable:false,// TODO: change when it's back to editable
editable:false,value:null,/**
             * Width of picker, defaults to this field's {@link Common/widget/PickerField#config-pickerAlignElement} width
             *
             * @config {Number}
             */pickerWidth:null,/**
             * Event to load resource assignments for.
             * Either event or {@link #config-store store} should be given.
             *
             * @config {Gantt.model.TaskModel}
             */projectEvent:null,/**
             * Assignment manipulation store to use or it's configuration object.
             * Either store or {@link #config-projectEvent projectEvent} should be given
             *
             * @config {Gantt.data.AssignmentsManipulationStore|object}
             */store:null};}}]);return AssignmentField;}(Combo);exports.AssignmentField=AssignmentField;AssignmentField._$name='AssignmentField';BryntumWidgetAdapterRegister.register(AssignmentField.type,AssignmentField);/**
 * @module Gantt/column/ResourceAssignmentColumn
 */ /**
 * Column allowing resource manipulation (assignment/unassignment/units changing) on a task
 *
 * @extends Grid/column/Column
 * @classType resourceassignment
 */var ResourceAssignmentColumn=/*#__PURE__*/function(_Column15){_inherits2(ResourceAssignmentColumn,_Column15);function ResourceAssignmentColumn(){_classCallCheck2(this,ResourceAssignmentColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceAssignmentColumn).apply(this,arguments));}_createClass2(ResourceAssignmentColumn,[{key:"afterConstruct",value:function afterConstruct(){var me=this;_get2(_getPrototypeOf2(ResourceAssignmentColumn.prototype),"afterConstruct",this).call(this);me.grid.on({startCellEdit:me.onStartCellEdit,finishCellEdit:me.onDoneCellEdit,cancelCellEdit:me.onDoneCellEdit,thisObj:me});}},{key:"doDestroy",value:function doDestroy(){var me=this;_get2(_getPrototypeOf2(ResourceAssignmentColumn.prototype),"doDestroy",this).call(this);if(me._editorStoreDetacher){me._editorStoreDetacher();me._editorStoreDetacher=null;}}},{key:"onStartCellEdit",value:function onStartCellEdit(_ref384){var _ref384$editorContext=_ref384.editorContext,record=_ref384$editorContext.record,column=_ref384$editorContext.column;var me=this;if(column===me){me.editor.projectEvent=record;if(me._editorStoreDetacher){me._editorStoreDetacher();me._editorStoreDetacher=null;}me._editorStoreDetacher=me.editor.store.on('changesApplied',me.onEditorChangesApplied,me);}}},{key:"onDoneCellEdit",value:function onDoneCellEdit(){var me=this;if(me._editorStoreDetacher){me._editorStoreDetacher();me._editorStoreDetacher=null;}}},{key:"onEditorChangesApplied",value:function onEditorChangesApplied(){var me=this,cellElement=me.grid.getCell({id:me.editor.projectEvent.id,columnId:me.id});if(cellElement){me.renderer({value:me.editor.projectEvent.assignments,cellElement:cellElement});}}},{key:"itemTpl",/**
     * A function which produces the content of Chips in the cell.
     * May be overridden in subclasses, or injected into the column
     * to customize the Chip content.
     *
     * Defaults to returning `${assignment.resourceName} ${assignment.units}%`
     *
     * The following parameters are passed:
     *  - **assignment** : `{@link Gantt.model.AssignmentModel AssignmentModel}` The assignment
     *  - **idx** : `Number` The index - zero based.
     * @config {Function}
     */value:function itemTpl(assignment,i){return"".concat(assignment.resourceName," ").concat(assignment.units,"%");}},{key:"renderer",value:function renderer(_ref385){var cellElement=_ref385.cellElement,value=_ref385.value;var chipView=this.chipView;chipView.store.storage.replaceValues(value.reduce(function(validAssignments,a){if(a.resource){validAssignments.push(a);}return validAssignments;},[]).sort(function(lhs,rhs){return lhs.resourceName.localeCompare(rhs.resourceName);}),true);chipView.refresh();var chipCloneElement=chipView.element.cloneNode(true);chipCloneElement.removeAttribute('id');cellElement.innerHTML='<div class="b-assignment-chipview-wrap"></di>';cellElement.firstElementChild.appendChild(chipCloneElement);}},{key:"defaultEditor",get:function get(){return{type:AssignmentField.type};}},{key:"chipView",get:function get(){if(!this._chipView){this._chipView=new ChipView({cls:'b-assignment-chipview',itemsFocusable:false,closable:false,itemTpl:this.itemTpl,store:{}});// The List class only refreshes itself when visible, so
// since this is an offscreen, rendering element
// we have to fake visibility.
Object.defineProperty(this.chipView,'isVisible',{get:function get(){return true;}});}return this._chipView;}}],[{key:"type",get:function get(){return'resourceassignment';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'assignments',instantUpdate:false,text:'Assigned Resources',width:250,cellCls:'b-resourceassignment-cell'};}}]);return ResourceAssignmentColumn;}(Column);exports.ResourceAssignmentColumn=ResourceAssignmentColumn;ColumnStore.registerColumnType(ResourceAssignmentColumn);ResourceAssignmentColumn._$name='ResourceAssignmentColumn';/**
 * @module Gantt/widget/SchedulingModePicker
 */ /**
 * Combo box preconfigured with possible scheduling mode values.
 *
 * @extends Common/widget/Combo
 */var SchedulingModePicker=/*#__PURE__*/function(_Combo5){_inherits2(SchedulingModePicker,_Combo5);function SchedulingModePicker(){_classCallCheck2(this,SchedulingModePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulingModePicker).apply(this,arguments));}_createClass2(SchedulingModePicker,[{key:"buildStoreData",value:function buildStoreData(){return[{id:SchedulingMode.Normal,text:this.L('Normal')},{id:SchedulingMode.FixedDuration,text:this.L('Fixed Duration')},{id:SchedulingMode.FixedUnits,text:this.L('Fixed Units')},{id:SchedulingMode.FixedEffort,text:this.L('Fixed Effort')}];}},{key:"updateLocalization",value:function updateLocalization(){_get2(_getPrototypeOf2(SchedulingModePicker.prototype),"updateLocalization",this).call(this);// rebuild newly translated options
this.store.data=this.buildStoreData();}},{key:"store",get:function get(){if(!this._store){this.store=new Store({data:this.buildStoreData()});}return this._store;},set:function set(store){_set(_getPrototypeOf2(SchedulingModePicker.prototype),"store",store,this,true);}}],[{key:"type",get:function get(){return'schedulingmodecombo';}}]);return SchedulingModePicker;}(Combo);exports.SchedulingModePicker=SchedulingModePicker;SchedulingModePicker._$name='SchedulingModePicker';BryntumWidgetAdapterRegister.register(SchedulingModePicker.type,SchedulingModePicker);/**
 * @module Gantt/column/SchedulingModeColumn
 */ /**
 * A column which displays a task's scheduling {@link Gantt.model.TaskModel#field-schedulingMode mode} field.
 *
 * @extends Grid/column/Column
 * @classType schedulingmodecolumn
 */var SchedulingModeColumn=/*#__PURE__*/function(_Column16){_inherits2(SchedulingModeColumn,_Column16);function SchedulingModeColumn(){_classCallCheck2(this,SchedulingModeColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(SchedulingModeColumn).apply(this,arguments));}_createClass2(SchedulingModeColumn,[{key:"afterConstruct",value:function afterConstruct(){var me=this;_get2(_getPrototypeOf2(SchedulingModeColumn.prototype),"afterConstruct",this).call(this);// we need to trigger the column refresh **after** the editor locale change
// to display properly translated scheduling modes
FunctionHelper.createSequence(me.editor.updateLocalization,me.onEditorLocaleChange,me);}},{key:"renderer",value:function renderer(_ref386){var value=_ref386.value;var model=this.editor.store.getById(value);return model&&model.text||'';}// Refreshes the column **after** the editor locale change
// to display properly translated scheduling modes
},{key:"onEditorLocaleChange",value:function onEditorLocaleChange(){this.grid.refreshColumn(this);}}],[{key:"type",get:function get(){return'schedulingmodecolumn';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'schedulingMode',text:'Scheduling Mode',editor:{type:SchedulingModePicker.type,allowInvalid:false,picker:{minWidth:'8.5em'}}};}}]);return SchedulingModeColumn;}(Column);exports.SchedulingModeColumn=SchedulingModeColumn;ColumnStore.registerColumnType(SchedulingModeColumn);SchedulingModeColumn._$name='SchedulingModeColumn';/**
 * @module Gantt/column/SequenceColumn
 */ /**
 * A "calculated" column which displays the sequential position of the task in the project.
 *
 * See {@link Gantt.model.TaskModel#property-sequenceNumber} for details.
 *
 * @extends Grid/column/Column
 * @classType sequence
 */var SequenceColumn=/*#__PURE__*/function(_Column17){_inherits2(SequenceColumn,_Column17);function SequenceColumn(){_classCallCheck2(this,SequenceColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(SequenceColumn).apply(this,arguments));}_createClass2(SequenceColumn,null,[{key:"type",get:function get(){return'sequence';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'sequenceNumber',text:'Sequence',sortable:false,groupable:false,filterable:false,width:70,editor:null};}}]);return SequenceColumn;}(Column);exports.SequenceColumn=SequenceColumn;ColumnStore.registerColumnType(SequenceColumn);SequenceColumn._$name='SequenceColumn';/**
 * @module Gantt/column/StartDateColumn
 */ /**
 * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-startDate start date}.
 *
 * @extends Gantt/column/GanttDateColumn
 * @classType startdate
 */var StartDateColumn=/*#__PURE__*/function(_GanttDateColumn7){_inherits2(StartDateColumn,_GanttDateColumn7);function StartDateColumn(){_classCallCheck2(this,StartDateColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(StartDateColumn).apply(this,arguments));}_createClass2(StartDateColumn,null,[{key:"type",get:function get(){return'startdate';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'startDate',text:'Start'};}}]);return StartDateColumn;}(GanttDateColumn);exports.StartDateColumn=StartDateColumn;ColumnStore.registerColumnType(StartDateColumn);StartDateColumn._$name='StartDateColumn';/**
 * @module Gantt/column/SuccessorColumn
 */ /**
 * A column which displays, in textual form, the dependencies which link from the
 * contextual to successor tasks.
 *
 * This type of column is editable by default.
 * @classType successor
 * @extends Gantt/column/DependencyColumn
 */var SuccessorColumn=/*#__PURE__*/function(_DependencyColumn2){_inherits2(SuccessorColumn,_DependencyColumn2);function SuccessorColumn(){_classCallCheck2(this,SuccessorColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(SuccessorColumn).apply(this,arguments));}_createClass2(SuccessorColumn,null,[{key:"type",get:function get(){return'successor';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{text:'Successors',field:'successors'};}}]);return SuccessorColumn;}(DependencyColumn);exports.SuccessorColumn=SuccessorColumn;ColumnStore.registerColumnType(SuccessorColumn);SuccessorColumn._$name='SuccessorColumn';/**
 * @module Gantt/column/TotalSlackColumn
 */ /**
 * A column that displays the task's {@link Gantt.model.TaskModel#field-totalSlack total slack}.
 *
 * @extends Gantt/column/DurationColumn
 * @classType totalslack
 */var TotalSlackColumn=/*#__PURE__*/function(_DurationColumn2){_inherits2(TotalSlackColumn,_DurationColumn2);function TotalSlackColumn(){_classCallCheck2(this,TotalSlackColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(TotalSlackColumn).apply(this,arguments));}_createClass2(TotalSlackColumn,[{key:"canEdit",// The column is not editable
value:function canEdit(record){return false;}},{key:"durationUnitField",get:function get(){return'slackUnit';}}],[{key:"type",get:function get(){return'totalslack';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'totalSlack',text:'Total Slack'};}}]);return TotalSlackColumn;}(DurationColumn);exports.TotalSlackColumn=TotalSlackColumn;ColumnStore.registerColumnType(TotalSlackColumn);TotalSlackColumn._$name='TotalSlackColumn';/**
 * @module Gantt/column/WBSColumn
 */ /**
 * A "calculated" column which displays the _WBS_ (_Work Breakdown Structure_) for the tasks - the position of the task in the project tree structure.
 *
 * @extends Grid/column/Column
 * @classType wbs
 */var WBSColumn=/*#__PURE__*/function(_Column18){_inherits2(WBSColumn,_Column18);function WBSColumn(){_classCallCheck2(this,WBSColumn);return _possibleConstructorReturn2(this,_getPrototypeOf2(WBSColumn).apply(this,arguments));}_createClass2(WBSColumn,null,[{key:"type",get:function get(){return'wbs';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'wbsCode',text:'WBS',width:70,editor:null};}}]);return WBSColumn;}(Column);exports.WBSColumn=WBSColumn;ColumnStore.registerColumnType(WBSColumn);WBSColumn._$name='WBSColumn';/**
 * @module Gantt/column/AllColumns
 *
 * Imports all currently developed Gantt columns and re-exports them in an object.
 * Should be used to import and register all Gantt columns.
 */var AllColumns={AddNewColumn:AddNewColumn,CalendarColumn:CalendarColumn,ConstraintDateColumn:ConstraintDateColumn,ConstraintTypeColumn:ConstraintTypeColumn,DurationColumn:DurationColumn,EarlyEndDateColumn:EarlyEndDateColumn,EarlyStartDateColumn:EarlyStartDateColumn,EffortColumn:EffortColumn,EndDateColumn:EndDateColumn,//EventModeColumn,
LateEndDateColumn:LateEndDateColumn,LateStartDateColumn:LateStartDateColumn,ManuallyScheduledColumn:ManuallyScheduledColumn,MilestoneColumn:MilestoneColumn,NameColumn:NameColumn,NoteColumn:NoteColumn,PercentDoneColumn:PercentDoneColumn,PredecessorColumn:PredecessorColumn,ResourceAssignmentColumn:ResourceAssignmentColumn,SchedulingModeColumn:SchedulingModeColumn,SequenceColumn:SequenceColumn,ShowInTimelineColumn:ShowInTimelineColumn,StartDateColumn:StartDateColumn,SuccessorColumn:SuccessorColumn,TotalSlackColumn:TotalSlackColumn,WBSColumn:WBSColumn};/**
 * A column that displays (and allows user to update) the task's
 * {@link Gantt.model.TaskModel#field-manuallyScheduled manuallyScheduled} field.
 *
 * @extends Grid/column/CheckColumn
 * @classType eventmode
 */exports.AllColumns=AllColumns;var EventModeColumn=/*#__PURE__*/function(_CheckColumn4){_inherits2(EventModeColumn,_CheckColumn4);_createClass2(EventModeColumn,null,[{key:"type",get:function get(){return'eventmode';}},{key:"isGanttColumn",get:function get(){return true;}},{key:"defaults",get:function get(){return{field:'manuallyScheduled',align:'left',text:'Event mode'};}}]);function EventModeColumn(config,store){var _this127;_classCallCheck2(this,EventModeColumn);_this127=_possibleConstructorReturn2(this,_getPrototypeOf2(EventModeColumn).apply(this,arguments));_this127.internalCellCls='b-eventmode-cell';return _this127;}_createClass2(EventModeColumn,[{key:"renderer",value:function renderer(_ref387){var value=_ref387.value,cellElement=_ref387.cellElement,column=_ref387.column;_get2(_getPrototypeOf2(EventModeColumn.prototype),"renderer",this).apply(this,arguments);if(cellElement.widget){cellElement.widget.text=this.renderText(value);}}},{key:"onCheckboxChange",value:function onCheckboxChange(_ref388){var source=_ref388.source,checked=_ref388.checked;_get2(_getPrototypeOf2(EventModeColumn.prototype),"onCheckboxChange",this).apply(this,arguments);source.text=this.renderText(checked);}},{key:"renderText",value:function renderText(value){return value?this.L('Manual'):this.L('Auto');}}]);return EventModeColumn;}(CheckColumn);exports.EventModeColumn=EventModeColumn;ColumnStore.registerColumnType(EventModeColumn);EventModeColumn._$name='EventModeColumn';var __decorate$3=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$3=Symbol('AssignmentMixin');var AssignmentMixin=function AssignmentMixin(base){var AssignmentMixin=/*#__PURE__*/function(_base26){_inherits2(AssignmentMixin,_base26);function AssignmentMixin(){_classCallCheck2(this,AssignmentMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentMixin).apply(this,arguments));}_createClass2(AssignmentMixin,[{key:hasMixin$3,value:function value(){}},{key:"getUnits",value:function getUnits(){return this.units;}},{key:"setUnits",value:function setUnits(units){return this.event.setAssignmentUnits(this,units);}},{key:"calculateUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateUnits(proposedValue){var event;return regeneratorRuntime.wrap(function calculateUnits$(_context80){while(1){switch(_context80.prev=_context80.next){case 0:_context80.next=2;return this.$.event;case 2:event=_context80.sent;if(!event){_context80.next=6;break;}return _context80.delegateYield(event.calculateAssignmentUnits(this,proposedValue),"t0",5);case 5:return _context80.abrupt("return",_context80.t0);case 6:return _context80.abrupt("return",proposedValue!==undefined?proposedValue:this.$.units.getConsistentValue());case 7:case"end":return _context80.stop();}}},calculateUnits,this);})}]);return AssignmentMixin;}(base);__decorate$3([model_field({type:'number',defaultValue:100})],AssignmentMixin.prototype,"units",void 0);__decorate$3([generic_field({bucket:'assigned',resolver:function resolver(id){return this.getEventById(id);},// NOTE: modelFieldConfig here somehow has effect since there is "event" relation
// defined on the scheduler Assignment model
modelFieldConfig:{serialize:function serialize(event){return event.id;}}},ModelReferenceField)],AssignmentMixin.prototype,"event",void 0);__decorate$3([generic_field({bucket:'assigned',resolver:function resolver(id){return this.getResourceById(id);},// NOTE: modelFieldConfig here somehow has effect since there is "resource" relation
// defined on the scheduler Assignment model
modelFieldConfig:{serialize:function serialize(resource){return resource.id;}}},ModelReferenceField)],AssignmentMixin.prototype,"resource",void 0);__decorate$3([calculate('units')],AssignmentMixin.prototype,"calculateUnits",null);return AssignmentMixin;};/**
 * Function to build a minimal possible [[AssignmentMixin]] class
 */var BuildMinimalAssignment=function BuildMinimalAssignment(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return AssignmentMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(base)))));};var MinimalAssignment=/*#__PURE__*/function(_BuildMinimalAssignme){_inherits2(MinimalAssignment,_BuildMinimalAssignme);function MinimalAssignment(){_classCallCheck2(this,MinimalAssignment);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalAssignment).apply(this,arguments));}return MinimalAssignment;}(BuildMinimalAssignment());/**
 * @module Gantt/data/mixin/PartOfProject
 */ /**
 * This is a mixin, included in all models and stores of the Gantt chart. It provides a common API for accessing
 * all stores of the project.
 *
 * @mixin
 */var PartOfProject=function PartOfProject(Target){return(/*#__PURE__*/function(_ref389){_inherits2(PartOfProject,_ref389);function PartOfProject(){_classCallCheck2(this,PartOfProject);return _possibleConstructorReturn2(this,_getPrototypeOf2(PartOfProject).apply(this,arguments));}_createClass2(PartOfProject,[{key:"taskStore",/**
     * Returns a task store of the project this entity belongs to.
     *
     * @method getEventStore
     * @return {Gantt.data.TaskStore}
     */ /**
     * Returns a resource store of the project this entity belongs to.
     *
     * @method getResourceStore
     * @return {Gantt.data.ResourceStore}
     */ /**
     * Returns an assignment store of the project this entity belongs to.
     *
     * @method getAssignmentStore
     * @return {Gantt.data.AssignmentStore}
     */ /**
     * Returns a dependency store of the project this entity belongs to.
     *
     * @method getDependencyStore
     * @return {Gantt.data.DependencyStore}
     */ /**
     * Returns a calendar manager store of the project this entity belongs to.
     *
     * @method getCalendarManagerStore
     * @return {Gantt.data.CalendarManagerStore}
     */ /**
     * Returns a project this entity belongs to.
     *
     * @method getProject
     * @return {Gantt.model.ProjectModel}
     */ /**
     * Returns a project this entity belongs to.
     *
     * @property {Gantt.model.ProjectModel}
     * @readonly
     */ /**
     * Returns a task store of the project this entity belongs to.
     *
     * @property {Gantt.data.TaskStore}
     * @override
     * @readonly
     */get:function get(){return this.getEventStore();}/**
     * Returns a task store of the project this entity belongs to.
     *
     * @property {Gantt.data.TaskStore}
     * @ts-ignore
     * @readonly
     */,// this setter actually does nothing, intentionally, setting the stores on other stores is deprecated
set:function set(store){var existing=this.getEventStore();if(existing&&store!==existing)throw new Error('Setting the event store directly is no longer supported. Please set it on the project instance instead');}/**
     * Returns a dependency store of the project this entity belongs to.
     *
     * @property {Gantt.data.DependencyStore}
     * @override
     * @readonly
     */},{key:"eventStore",get:function get(){return this.getEventStore();}// this setter actually does nothing, intentionally, setting the stores on other stores is deprecated
,set:function set(store){var existing=this.getEventStore();if(existing&&store!==existing)throw new Error('Setting the event store directly is no longer supported. Please set it on the project instance instead');}},{key:"dependencyStore",get:function get(){return this.getDependencyStore();}/**
     * Returns an assignment store of the project this entity belongs to.
     *
     * @property {Gantt.data.AssignmentStore}
     * @override
     * @readonly
     */},{key:"assignmentStore",get:function get(){return this.getAssignmentStore();}/**
     * Returns a resource store of the project this entity belongs to.
     *
     * @property {Gantt.data.ResourceStore}
     * @readonly
     */},{key:"resourceStore",get:function get(){return this.getResourceStore();}/**
     * Returns a calendar manager store of the project this entity belongs to.
     *
     * @property {Gantt.data.CalendarManagerStore}
     * @readonly
     */},{key:"calendarManagerStore",get:function get(){return this.getCalendarManagerStore();}}],[{key:"relationConfig",// had to place it here "globally", because w/o it, somehow, the `relationConfig`
// of the Scheduler's `AssignmentModel` was exposed, breaking the things
get:function get(){// "turn-off" the relations inherited from scheduler - those interfere with the engine's internals
return[];}}]);return PartOfProject;}(Target||Base));};/**
 * @module Gantt/model/AssignmentModel
 */ /**
 * This class represent a single assignment of a {@link Gantt.model.ResourceModel resource} to a {@link Gantt.model.TaskModel task} in your gantt chart.
 *
 * @mixes Gantt/data/mixin/PartOfProject
 * @extends Scheduler/model/AssignmentModel
 * @typings Scheduler/model/AssignmentModel -> Scheduler/model/SchedulerAssignmentModel
 */var AssignmentModel$1=/*#__PURE__*/function(_PartOfProject){_inherits2(AssignmentModel$1,_PartOfProject);function AssignmentModel$1(){_classCallCheck2(this,AssignmentModel$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentModel$1).apply(this,arguments));}_createClass2(AssignmentModel$1,[{key:"units",//endregion
//region Field getters/setters
/**
     * Sets the {@link #field-units} field. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method setUnits
     * @param {Number} units
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the {@link #field-event} field. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method setEvent
     * @param {Gantt.model.TaskModel} event
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the {@link #field-resource} field. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method setResource
     * @param {Gantt.model.ResourceModel} event
     * @returns {Promise}
     * @propagating
     */ /**
     * Get/set the units of this assignment
     *
     * @property {Number}
     */get:function get(){var me=this;return Math.max(0,me.get('units'));},set:function set(value){if(value<0)throw new Error("`Units` value for an assignment can't be less than 0");this.set('units',value);}/**
     * Task assigned
     * @property {Gantt.model.TaskModel} task
     */},{key:"task",get:function get(){return this.event;},set:function set(task){this.event=task;}/**
     * Associated tasks name
     * @property {String}
     * @readonly
     */},{key:"taskName",get:function get(){return this.task&&this.task.name||'';}//region Foreign id accessors
// Added for scheduler compatibility, engine does not use foreign ids but Scheduler stores sometimes expect them
},{key:"eventId",get:function get(){return this.event.id;}},{key:"resourceId",get:function get(){return this.resource.id;}//endregion
}],[{key:"fields",//region Fields
get:function get(){return[/**
             * The reference to the task, this assignment belongs to.
             *
             * @ts-ignore
             * @property {Gantt.model.TaskModel}
             * @name event
             */ /**
             * The reference to the task, this assignment belongs to.
             *
             * @ts-ignore
             * @field {Gantt.model.TaskModel} event
             */ /**
             * This field is not used, please ignore it.
             *
             * @field {String|Number} eventId
             * @ignore
             */ /**
             * The reference to the resource, this assignment belongs to.
             *
             * @field {Gantt.model.ResourceModel} resource
             */ /**
             * This field is not used, please ignore it.
             *
             * @field {String|Number} resourceId
             * @ignore
             */ /**
             * The numeric, percent-like value in the [ 0, 100 ] range, indicating what is the "contribution level"
             * of the resource to the task. Number 100, for example, means that for 8h event,
             * resource contributes 8h of working time. Number 50 means, for the same task, resource contributes
             * only 4h, etc.
             *
             * @field {Number} units
             * @default 100
             */];}},{key:"relationConfig",get:function get(){// "turn-off" the relations inherited from scheduler - those interfere with the engine's internals
return[];}}]);return AssignmentModel$1;}(PartOfProject(BuildMinimalAssignment(AssignmentModel)));exports.AssignmentModel=AssignmentModel$1;AssignmentModel$1._$name='AssignmentModel';var ChronoStoreMixin=function ChronoStoreMixin(base){return(/*#__PURE__*/function(_base27){_inherits2(ChronoStoreMixin,_base27);function ChronoStoreMixin(){_classCallCheck2(this,ChronoStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ChronoStoreMixin).apply(this,arguments));}return ChronoStoreMixin;}(base));};var AssignmentStoreMixin=function AssignmentStoreMixin(base){var AssignmentStoreMixin=/*#__PURE__*/function(_base28){_inherits2(AssignmentStoreMixin,_base28);function AssignmentStoreMixin(){_classCallCheck2(this,AssignmentStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentStoreMixin).apply(this,arguments));}_createClass2(AssignmentStoreMixin,null,[{key:"defaultConfig",get:function get(){return{modelClass:MinimalAssignment};}}]);return AssignmentStoreMixin;}(base);return AssignmentStoreMixin;};var BuildMinimalAssignmentStore=function BuildMinimalAssignmentStore(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Store;return AssignmentStoreMixin(PartOfProjectStoreMixin(PartOfProjectGenericMixin(ChronoStoreMixin(base))));};var MinimalAssignmentStore=/*#__PURE__*/function(_BuildMinimalAssignme2){_inherits2(MinimalAssignmentStore,_BuildMinimalAssignme2);function MinimalAssignmentStore(){_classCallCheck2(this,MinimalAssignmentStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalAssignmentStore).apply(this,arguments));}return MinimalAssignmentStore;}(BuildMinimalAssignmentStore());/**
 * @module Gantt/data/AssignmentStore
 */ /**
 * A class representing a collection of assignments between tasks in the {@link Gantt/data/TaskStore TaskStore} and resources
 * in the {@link Gantt/data/ResourceStore ResourceStore}.
 *
 * Contains a collection of the {@link Gantt/model/AssignmentModel AssignmentModel} records.
 *
 * @extends Scheduler/data/AssignmentStore
 * @mixes Gantt/data/mixin/PartOfProject
 * @typings Scheduler/data/AssignmentStore -> Scheduler/data/SchedulerAssignmentStore
 */var AssignmentStore$1=/*#__PURE__*/function(_PartOfProject2){_inherits2(AssignmentStore$1,_PartOfProject2);function AssignmentStore$1(){_classCallCheck2(this,AssignmentStore$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentStore$1).apply(this,arguments));}_createClass2(AssignmentStore$1,[{key:"mapAssignmentsForTask",//endregion
//region Assignment: add, remove & map
/**
     * Maps over task assignments.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @param {Function} fn
     * @param {Function} filterFn
     * @return {Object[]}
     */value:function mapAssignmentsForTask(task,fn,filterFn){return this.mapAssignmentsForEvent(task,fn,filterFn);}/**
     * Returns all assignments for a given task.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @return {Gantt.model.AssignmentModel[]}
     */},{key:"getAssignmentsForTask",value:function getAssignmentsForTask(task){return this.getAssignmentsForEvent(task);}/**
     * Removes all assignments for given task
     *
     * @param {Gantt.model.TaskModel|Object} task
     */},{key:"removeAssignmentsForTask",value:function removeAssignmentsForTask(task){return this.removeAssignmentsForEvent(task);}/**
     * Returns all resources assigned to a task.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @return {Gantt.model.ResourceModel[]}
     */},{key:"getResourcesForTask",value:function getResourcesForTask(task){return this.getResourcesForEvent(task);}/**
     * Returns all tasks assigned to a resource
     *
     * @param {Gantt.model.ResourceModel|Object} resource
     * @return {Gantt.model.TaskModel[]}
     */},{key:"getTasksForResource",value:function getTasksForResource(resource){return this.getEventsForResource(resource);}/**
     * Creates and adds assignment record for a given task and a resource.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @param {Gantt.model.ResourceModel|Object} resource
     * @return {Gantt.model.AssignmentModel}
     */},{key:"assignTaskToResource",value:function assignTaskToResource(task,resource,units){return this.assignEventToResource(task,resource,function(assignment){assignment.units=units;return assignment;});}/**
     * Removes assignment record for a given task and a resource.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @param {Gantt.model.ResourceModel|Object} resource
     * @return {Gantt.model.AssignmentModel}
     */},{key:"unassignTaskFromResource",value:function unassignTaskFromResource(task,resource){return this.unassignEventFromResource(task,resource);}/**
     * Checks whether a task is assigned to a resource.
     *
     * @param {Gantt.model.TaskModel|Object} task
     * @param {Gantt.model.ResourceModel|Object} resource
     * @param {Function} [fn] Function which will resieve assignment record if one present
     * @return {Boolean}
     */},{key:"isTaskAssignedToResource",value:function isTaskAssignedToResource(task,resource,fn){return this.isEventAssignedToResource(task,resource,fn);}/**
     * Returns assignment record for given task and resource
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Gantt.model.ResourceModel} resource
     * @return {Gantt.model.AssignmentModel}
     */},{key:"getAssignmentForTaskAndResource",value:function getAssignmentForTaskAndResource(task,resource){return this.getAssignmentForEventAndResource(task,resource);}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{modelClass:AssignmentModel$1,/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:500,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:400,storeId:'assignments'};}}]);return AssignmentStore$1;}(PartOfProject(BuildMinimalAssignmentStore(AssignmentStore)));exports.AssignmentStore=AssignmentStore$1;AssignmentStore$1._$name='AssignmentStore';var __decorate$4=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$4=Symbol('hasMixin');var DependencyMixin=function DependencyMixin(base){var DependencyMixin=/*#__PURE__*/function(_base29){_inherits2(DependencyMixin,_base29);function DependencyMixin(){_classCallCheck2(this,DependencyMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyMixin).apply(this,arguments));}_createClass2(DependencyMixin,[{key:hasMixin$4,value:function value(){}// this makes the dependency's self-atom to change
// (and trigger calculation of the `incomingDeps / outgoingDeps` on the related events)
// on every change of the `lag / lagUnit / type` fields
},{key:"calculateSelf",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateSelf(){return regeneratorRuntime.wrap(function calculateSelf$(_context81){while(1){switch(_context81.prev=_context81.next){case 0:_context81.next=2;return this.$.lag;case 2:_context81.next=4;return this.$.lagUnit;case 4:_context81.next=6;return this.$.type;case 6:return _context81.abrupt("return",this);case 7:case"end":return _context81.stop();}}},calculateSelf,this);})},{key:"calculateCalendar",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCalendar(){var dependenciesCalendar,calendar,fromEvent,toEvent;return regeneratorRuntime.wrap(function calculateCalendar$(_context82){while(1){switch(_context82.prev=_context82.next){case 0:_context82.next=2;return this.getProject().$.dependenciesCalendar;case 2:dependenciesCalendar=_context82.sent;_context82.t0=dependenciesCalendar;_context82.next=_context82.t0===DependenciesCalendar.Project?6:_context82.t0===DependenciesCalendar.FromEvent?10:_context82.t0===DependenciesCalendar.ToEvent?22:34;break;case 6:_context82.next=8;return this.getProject().$.calendar;case 8:calendar=_context82.sent;return _context82.abrupt("break",34);case 10:_context82.next=12;return this.$.fromEvent;case 12:fromEvent=_context82.sent;if(!(fromEvent&&!isAtomicValue(fromEvent))){_context82.next=19;break;}_context82.next=16;return fromEvent.$.calendar;case 16:_context82.t1=_context82.sent;_context82.next=20;break;case 19:_context82.t1=null;case 20:calendar=_context82.t1;return _context82.abrupt("break",34);case 22:_context82.next=24;return this.$.toEvent;case 24:toEvent=_context82.sent;if(!(toEvent&&!isAtomicValue(toEvent))){_context82.next=31;break;}_context82.next=28;return toEvent.$.calendar;case 28:_context82.t2=_context82.sent;_context82.next=32;break;case 31:_context82.t2=null;case 32:calendar=_context82.t2;return _context82.abrupt("break",34);case 34:if(calendar){_context82.next=38;break;}_context82.next=37;return this.getProject().$.calendar;case 37:calendar=_context82.sent;case 38:_context82.next=40;return calendar.$$;case 40:return _context82.abrupt("return",calendar);case 41:case"end":return _context82.stop();}}},calculateCalendar,this);})},{key:"setLag",value:function(){var _setLag=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee44(lag){var lagUnit,_args83=arguments;return regeneratorRuntime.wrap(function _callee44$(_context83){while(1){switch(_context83.prev=_context83.next){case 0:lagUnit=_args83.length>1&&_args83[1]!==undefined?_args83[1]:this.lagUnit;this.$.lag.put(lag);this.$.lagUnit.put(lagUnit);return _context83.abrupt("return",this.propagate());case 4:case"end":return _context83.stop();}}},_callee44,this);}));function setLag(_x73){return _setLag.apply(this,arguments);}return setLag;}()}]);return DependencyMixin;}(base);__decorate$4([generic_field({bucket:'outgoingDeps',resolver:function resolver(id){return this.getEventById(id);},modelFieldConfig:{persist:true,serialize:function serialize(event){return event.id;}}},ModelReferenceField)],DependencyMixin.prototype,"fromEvent",void 0);__decorate$4([generic_field({bucket:'incomingDeps',resolver:function resolver(id){return this.getEventById(id);},modelFieldConfig:{persist:true,serialize:function serialize(event){return event.id;}}},ModelReferenceField)],DependencyMixin.prototype,"toEvent",void 0);__decorate$4([model_field({type:'number',defaultValue:0})],DependencyMixin.prototype,"lag",void 0);__decorate$4([model_field({type:'string',defaultValue:TimeUnit.Day},{converter:DateHelper.normalizeUnit})],DependencyMixin.prototype,"lagUnit",void 0);__decorate$4([model_field({type:'string',defaultValue:DependencyType.EndToStart})],DependencyMixin.prototype,"type",void 0);__decorate$4([field()],DependencyMixin.prototype,"calendar",void 0);__decorate$4([calculate('calendar')],DependencyMixin.prototype,"calculateCalendar",null);return DependencyMixin;};var BuildMinimalDependency=function BuildMinimalDependency(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return DependencyMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(base)))));};var MinimalDependency=/*#__PURE__*/function(_BuildMinimalDependen){_inherits2(MinimalDependency,_BuildMinimalDependen);function MinimalDependency(){_classCallCheck2(this,MinimalDependency);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalDependency).apply(this,arguments));}return MinimalDependency;}(BuildMinimalDependency());/**
 * [[DependencyMixin]] type guard
 */var hasDependencyMixin=function hasDependencyMixin(model){return Boolean(model&&model[hasMixin$4]);};var canonicalDependencyTypes$1=['SS','SF','FS','FF'];/**
 * @module Gantt/model/DependencyModel
 */ /**
 * This class represents a single dependency between the tasks in your gantt chart.
 *
 * ## Subclassing the Dependency class
 *
 * The name of any field in data can be customized in the subclass, see the example below.
 *
 * ```javascript
 * class MyDependencyModel extends DependencyModel {
 *     static get fields() {
 *         return [
 *             { name: 'to', dataSource : 'targetId' },
 *             { name: 'from', dataSource : 'sourceId' }
 *         ];
 *     }
 * }
 * ```
 * @extends Scheduler/model/DependencyBaseModel
 * @typings Scheduler/model/DependencyModel -> Scheduler/model/SchedulerDependencyModel
 */var DependencyModel$1=/*#__PURE__*/function(_BuildMinimalDependen2){_inherits2(DependencyModel$1,_BuildMinimalDependen2);_createClass2(DependencyModel$1,null,[{key:"relationConfig",/**
     * The origin task of this dependency
     * @field {Gantt.model.TaskModel} fromEvent
     */ /**
     * The destination task of this dependency
     * @field {Gantt.model.TaskModel} toEvent
     */ /**
     * A numeric part of the lag (or lead) value between the tasks.
     * Negative values are supported and treated as lead. Please note, that only working time is counted as
     * "lag" time.
     * @field {Number} lag
     */ /**
     * A duration unit part of the lag value between the tasks
     * @field {String} lagUnit
     */get:function get(){return[];}//endregion
}]);function DependencyModel$1(){var _getPrototypeOf3;_classCallCheck2(this,DependencyModel$1);for(var _len70=arguments.length,args=new Array(_len70),_key69=0;_key69<_len70;_key69++){args[_key69]=arguments[_key69];}var config=args[0];if(config&&config.fromTask){config.fromEvent=config.fromTask;}if(config&&config.toTask){config.toEvent=config.toTask;}return _possibleConstructorReturn2(this,(_getPrototypeOf3=_getPrototypeOf2(DependencyModel$1)).call.apply(_getPrototypeOf3,[this].concat(args)));}//region Tasks
/**
     * Gets/sets the source task of the dependency
     * @property {Gantt.model.TaskModel}
     */_createClass2(DependencyModel$1,[{key:"getFromTask",value:function getFromTask(){return this.getFromEvent();}},{key:"setFromTask",value:function setFromTask(){return this.setFromEvent.apply(this,arguments);}/**
     * Gets/sets the target task of the dependency
     * @property {Gantt.model.TaskModel}
     *
     */},{key:"getToTask",value:function getToTask(){return this.getToEvent();}},{key:"setToTask",value:function setToTask(){return this.setToEvent.apply(this,arguments);}//endregion
/**
     * Sets the amount of lag for the dependency. Will update the schedule - returns a `Promise`
     *
     * @method setLag
     * @param {Number} amount The amount of lag for the dependency
     * @param {String} [unit] Lag duration unit
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the origin task for the dependency. Will update the schedule - returns a `Promise`
     *
     * @method setFromEvent
     * @param {Gantt.model.TaskModel} event The new origin event
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the destination task for the dependency. Will update the schedule - returns a `Promise`
     *
     * @method setToEvent
     * @param {Gantt.model.TaskModel} event The new destination event
     * @returns {Promise}
     * @propagating
     */},{key:"getTypeFromSides",value:function getTypeFromSides(fromSide,toSide,rtl){var types=DependencyBaseModel.Type,startSide=rtl?'right':'left',endSide=rtl?'left':'right';// TODO: change right, left to end, start
if(fromSide===startSide){return toSide===startSide?types.StartToStart:types.StartToEnd;}return toSide===endSide?types.EndToEnd:types.EndToStart;}},{key:"getConnectorString",value:function getConnectorString(raw){var rawValue=canonicalDependencyTypes$1[this.type];if(raw){return rawValue;}// FS => empty string; it's the default
if(this.type===DependencyBaseModel.Type.EndToStart){return'';}var locale=LocaleManagerSingelton.locale;// See if there is a local version of SS, SF or FF
if(locale){var localized=locale.GanttCommon&&locale.GanttCommon[rawValue];if(localized){return localized;}}return rawValue;}},{key:"sourceTask",set:function set(task){this.fromEvent=task;},get:function get(){return this.fromEvent;}},{key:"sourceEvent",get:function get(){return this.fromEvent;}},{key:"from",get:function get(){return this.fromEvent.id;}},{key:"fromTask",get:function get(){return this.fromEvent;},set:function set(task){this.fromEvent=task;}},{key:"targetTask",set:function set(task){this.toEvent=task;},get:function get(){return this.toEvent;}},{key:"to",get:function get(){return this.toEvent.id;}},{key:"targetEvent",get:function get(){return this.toEvent;}},{key:"toTask",get:function get(){return this.toEvent;},set:function set(task){this.toEvent=task;}}]);return DependencyModel$1;}(BuildMinimalDependency(DependencyBaseModel));exports.DependencyModel=DependencyModel$1;DependencyModel$1._$name='DependencyModel';var DependencyStoreBaseMixin=function DependencyStoreBaseMixin(base){var DependencyStoreBaseMixin=/*#__PURE__*/function(_base30){_inherits2(DependencyStoreBaseMixin,_base30);function DependencyStoreBaseMixin(){_classCallCheck2(this,DependencyStoreBaseMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyStoreBaseMixin).apply(this,arguments));}_createClass2(DependencyStoreBaseMixin,null,[{key:"defaultConfig",get:function get(){return{modelClass:MinimalDependency};}}]);return DependencyStoreBaseMixin;}(base);return DependencyStoreBaseMixin;};var hasMixin$5=Symbol('DependencyValidationMixin');var DependencyValidationMixin=function DependencyValidationMixin(base){var DependencyValidationMixin=/*#__PURE__*/function(_base31){_inherits2(DependencyValidationMixin,_base31);function DependencyValidationMixin(){_classCallCheck2(this,DependencyValidationMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyValidationMixin).apply(this,arguments));}_createClass2(DependencyValidationMixin,[{key:hasMixin$5,value:function value(){}},{key:"isValidDependency",value:function(){var _isValidDependency=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee46(dependency,toId,depType){var me,project,effectHandler,eventStore,dependencyClass,oldProject,result;return regeneratorRuntime.wrap(function _callee46$(_context85){while(1){switch(_context85.prev=_context85.next){case 0:me=this,project=me.getProject();// In case we are currently propagating
_context85.next=3;return project.waitForPropagateCompleted();case 3:// Effect handler, here we are interested only in cycles
effectHandler=/*#__PURE__*/function(){var _ref390=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee45(effect){var result;return regeneratorRuntime.wrap(function _callee45$(_context84){while(1){switch(_context84.prev=_context84.next){case 0:if(effect instanceof GraphCycleDetectedEffect){result=EffectResolutionResult.Cancel;}else{result=EffectResolutionResult.Resume;}return _context84.abrupt("return",result);case 2:case"end":return _context84.stop();}}},_callee45);}));return function effectHandler(_x77){return _ref390.apply(this,arguments);};}();if(!hasDependencyMixin(dependency)){eventStore=me.getEventStore(),dependencyClass=me.getDependencyStore().modelClass;if(_typeof(dependency)=='object'){dependency=new dependencyClass(dependency);}else{dependency=new dependencyClass({fromEvent:eventStore.getById(dependency),toEvent:eventStore.getById(toId),type:depType});}}oldProject=dependency.getProject();dependency.setProject(project);_context85.next=9;return project.tryPropagateWithEntities(effectHandler,[dependency]);case 9:result=_context85.sent;dependency.setProject(oldProject);return _context85.abrupt("return",result==PropagationResult.Passed);case 12:case"end":return _context85.stop();}}},_callee46,this);}));function isValidDependency(_x74,_x75,_x76){return _isValidDependency.apply(this,arguments);}return isValidDependency;}()}]);return DependencyValidationMixin;}(base);return DependencyValidationMixin;};var DependencyStoreMixin=function DependencyStoreMixin(base){var DependencyStoreMixin=/*#__PURE__*/function(_base32){_inherits2(DependencyStoreMixin,_base32);function DependencyStoreMixin(){_classCallCheck2(this,DependencyStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyStoreMixin).apply(this,arguments));}return DependencyStoreMixin;}(base);return DependencyStoreMixin;};var BuildMinimalDependencyStore=function BuildMinimalDependencyStore(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Store;return DependencyStoreMixin(DependencyValidationMixin(DependencyStoreBaseMixin(PartOfProjectStoreMixin(PartOfProjectGenericMixin(ChronoStoreMixin(base))))));};var MinimalDependencyStore=/*#__PURE__*/function(_BuildMinimalDependen3){_inherits2(MinimalDependencyStore,_BuildMinimalDependen3);function MinimalDependencyStore(){_classCallCheck2(this,MinimalDependencyStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalDependencyStore).apply(this,arguments));}return MinimalDependencyStore;}(BuildMinimalDependencyStore());/**
 * @module Gantt/data/DependencyStore
 */ /**
 * A class representing a collection of dependencies between the tasks in the {@link Gantt/data/TaskStore TaskStore}.
 * Contains a collection of {@link Gantt/model/DependencyModel DependencyModel} records.
 *
 * @extends Scheduler/data/DependencyStore
 * @mixes Gantt/data/mixin/PartOfProject
 * @typings Scheduler/data/DependencyStore -> Scheduler/data/SchedulerDependencyStore
 */var DependencyStore$1=/*#__PURE__*/function(_PartOfProject3){_inherits2(DependencyStore$1,_PartOfProject3);function DependencyStore$1(){_classCallCheck2(this,DependencyStore$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyStore$1).apply(this,arguments));}_createClass2(DependencyStore$1,[{key:"reduceTaskDependencies",//endregion
//region Map/reduce
// TODO: document
value:function reduceTaskDependencies(task,reduceFn,result,flat,depsGetterFn){return this.reduceEventDependencies(task,reduceFn,result,flat,depsGetterFn);}// TODO: document
},{key:"reduceTaskPredecessors",value:function reduceTaskPredecessors(task,reduceFn,result,flat){return this.reduceEventPredecessors(task,reduceFn,result,flat);}// TODO: document
},{key:"reduceTaskSuccessors",value:function reduceTaskSuccessors(task,reduceFn,result,flat){return this.reduceEventSuccessors(task,reduceFn,result,flat);}// TODO: document
},{key:"mapTaskDependencies",value:function mapTaskDependencies(task,fn,filterFn,flat,depsGetterFn){return this.mapEventDependencies(task,fn,filterFn,flat,depsGetterFn);}// TODO: document
},{key:"mapTaskPredecessors",value:function mapTaskPredecessors(task,fn,filterFn,flat){return this.mapEventPredecessors(task,fn,filterFn,flat);}// TODO: document
},{key:"mapTaskSuccessors",value:function mapTaskSuccessors(task,fn,filterFn,flat){return this.mapEventSuccessors(task,fn,filterFn,flat);}//endregion
//region Task dependencies
/**
     * Returns all dependencies for a certain task (both incoming and outgoing)
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     * @return {Gantt.model.DependencyModel[]}
     */},{key:"getTaskDependencies",value:function getTaskDependencies(task,flat){return this.getEventDependencies(task,flat);}/**
     * Returns all predecessors of a task
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     *
     * @return {Gantt.model.TaskModel[]}
     */},{key:"getTaskPredecessors",value:function getTaskPredecessors(task,flat){return this.getEventPredecessors(task,flat);}/**
     * Returns all successors of a task
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     *
     * @return {Gantt.model.TaskModel[]}
     */},{key:"getTaskSuccessors",value:function getTaskSuccessors(task,flat){return this.getEventSuccessors(task,flat);}/**
     * Removed all dependencies for a task
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     */},{key:"removeTaskDependencies",value:function removeTaskDependencies(task,flat){this.removeEventDependencies(task,flat);}/**
     * Removes all incoming dependencies for a task
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     */},{key:"removeTaskPredecessors",value:function removeTaskPredecessors(task,flat){this.removeEventPredecessors(task,flat);}/**
     * Removes all outgoing dependencies for a task
     *
     * @param {Gantt.model.TaskModel} task
     * @param {Boolean} flat
     */},{key:"removeTaskSuccessors",value:function removeTaskSuccessors(task,flat){this.removeEventSuccessors(task,flat);}//endregion
//region Task & dependency getters
/**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     *
     * @param {Gantt.model.TaskModel|String} sourceTask 1st task
     * @param {Gantt.model.TaskModel|String} targetTask 2nd task
     * @return {Gantt.model.DependencyModel}
     */},{key:"getDependencyForSourceAndTargetTasks",value:function getDependencyForSourceAndTargetTasks(sourceTask,targetTask){return this.getDependencyForSourceAndTargetEvents(sourceTask,targetTask);}/**
     * Returns a dependency model instance linking given tasks if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     *
     * @param {Gantt.model.TaskModel} sourceEvent
     * @param {Gantt.model.TaskModel} targetEvent
     * @return {Gantt.model.DependencyModel}
     */},{key:"getTasksLinkingDependency",value:function getTasksLinkingDependency(sourceEvent,targetEvent){return this.getEventsLinkingDependency(sourceEvent,targetEvent);}},{key:"getTaskById",value:function getTaskById(id){var taskStore=this.taskStore;return taskStore&&taskStore.getById(id)||null;}/**
     * Returns the source task of the dependency
     *
     * @param {Gantt.model.DependencyModel|Object} dependency The dependency or its id
     * @return {Gantt.model.TaskModel} The source task of this dependency
     */},{key:"getSourceTask",value:function getSourceTask(dependency){var id=dependency instanceof DependencyModel$1?dependency.sourceId:dependency;return this.getTaskById(id);}/**
     * Returns the target task of the dependency
     * @param {Gantt.model.DependencyModel|Object} dependency The dependency or its id
     * @return {Gantt.model.TaskModel} The target task of this dependency
     */},{key:"getTargetTask",value:function getTargetTask(dependency){var id=dependency instanceof DependencyModel$1?dependency.targetId:dependency;return this.getTaskById(id);}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return Object.assign(_get2(_getPrototypeOf2(DependencyStore$1),"defaultConfig",this),{modelClass:DependencyModel$1,/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:300,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:500});}}]);return DependencyStore$1;}(PartOfProject(BuildMinimalDependencyStore(DependencyStore)));exports.DependencyStore=DependencyStore$1;DependencyStore$1._$name='DependencyStore';/**
 * @module Gantt/model/ResourceModel
 */ /**
 * This class represents a single resource in your Gantt chart.
 *
 * If you want to add or change some fields, describing resources - subclass this class:
 *
 * ```javascript
 * class MyResourceModel extends ResourceModel {
 *
 *   static get fields() {
 *     return [
 *       { name: 'company', type: 'string' }
 *     ]
 *   }
 * }
 * ```
 *
 * See also: {@link Gantt/model/AssignmentModel}
 * @extends Scheduler/model/ResourceModel
 * @mixes Gantt/data/mixin/PartOfProject
 * @typings Scheduler/model/ResourceModel -> Scheduler/model/SchedulerResourceModel
 */var ResourceModel$1=/*#__PURE__*/function(_PartOfProject4){_inherits2(ResourceModel$1,_PartOfProject4);function ResourceModel$1(){_classCallCheck2(this,ResourceModel$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceModel$1).apply(this,arguments));}_createClass2(ResourceModel$1,[{key:"tasks",//endregion
/**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name setCalendar
     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.
     * @returns {Promise}
     * @propagating
     */ /**
     * Returns a calendar of the task. If task has never been assigned a calendar a project's calendar will be returned.
     *
     * @method
     * @name getCalendar
     * @returns {Gantt.model.CalendarModel}
     */ /**
     * Returns an array of assignments, associated with this resource
     * @property {Gantt.model.AssignmentModel[]}
     * @name assignments
     * @instance
     * @readonly
     */ /**
     * Returns an array of tasks, associated with this resource
     * @property {Gantt.model.TaskModel[]}
     * @readonly
     */get:function get(){return this.events;}//endregion
}],[{key:"fields",//region Config
get:function get(){return[/**
             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
             *
             * All entities are by default assigned to the project calendar, provided as the {@link Gantt.model.CalendarModel} option.
             *
             * @field {Gantt.model.CalendarModel} calendar
             */ // /**
//  * The resource rate
//  * @field {Number} rate
//  */
// { name : 'rate', type : 'number', defaultValue : 0 },
//
// /**
//  * The resource rate unit (corresponds to units defined in {@link Common/helper/DateHelper}). Valid values are:
//  * - "mi" (minutes)
//  * - "h" (hours)
//  * - "d" (days)
//  * - "w" (weeks)
//  * - "mo" (months)
//  * - "q" (quarters)
//  * - "y" (years)
//  * @field {String} rateUnit
//  */
// { name : 'rateUnit', type : 'string', defaultValue : 'h' },
//
// /**
//  * The value of per-use-cost when this resource is assigned
//  * @field {Number} perUseCost
//  */
// { name : 'perUseCost', type : 'number', defaultValue : 0 }
];}}]);return ResourceModel$1;}(PartOfProject(BuildMinimalResource(ResourceModel)));exports.ResourceModel=ResourceModel$1;ResourceModel$1._$name='ResourceModel';var ResourceStoreMixin$1=function ResourceStoreMixin$1(base){var ResourceStoreMixin=/*#__PURE__*/function(_base33){_inherits2(ResourceStoreMixin,_base33);function ResourceStoreMixin(){_classCallCheck2(this,ResourceStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceStoreMixin).apply(this,arguments));}_createClass2(ResourceStoreMixin,null,[{key:"defaultConfig",get:function get(){return{modelClass:MinimalResource};}}]);return ResourceStoreMixin;}(base);return ResourceStoreMixin;};var BuildMinimalResourceStore=function BuildMinimalResourceStore(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Store;return ResourceStoreMixin$1(PartOfProjectStoreMixin(PartOfProjectGenericMixin(ChronoStoreMixin(base))));};var MinimalResourceStore=/*#__PURE__*/function(_BuildMinimalResource2){_inherits2(MinimalResourceStore,_BuildMinimalResource2);function MinimalResourceStore(){_classCallCheck2(this,MinimalResourceStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalResourceStore).apply(this,arguments));}return MinimalResourceStore;}(BuildMinimalResourceStore());/**
 * @module Gantt/data/ResourceStore
 */ /**
 * A class representing the collection of the resources - {@link Gantt/model/ResourceModel ResourceModel} records.
 *
 * @extends Scheduler/data/ResourceStore
 * @mixes Gantt/data/mixin/PartOfProject
 *
 * @typings Scheduler/data/ResourceStore -> Scheduler/data/SchedulerResourceStore
 */var ResourceStore$1=/*#__PURE__*/function(_PartOfProject5){_inherits2(ResourceStore$1,_PartOfProject5);function ResourceStore$1(){_classCallCheck2(this,ResourceStore$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourceStore$1).apply(this,arguments));}_createClass2(ResourceStore$1,null,[{key:"defaultConfig",//region Config
get:function get(){return{modelClass:ResourceModel$1,/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:400,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:200,storeId:'resources'};}//endregion
}]);return ResourceStore$1;}(PartOfProject(BuildMinimalResourceStore(ResourceStore)));exports.ResourceStore=ResourceStore$1;ResourceStore$1._$name='ResourceStore';//---------------------------------------------------------------------------------------------------------------------
var Conflict=/*#__PURE__*/function(_Effect4){_inherits2(Conflict,_Effect4);function Conflict(){_classCallCheck2(this,Conflict);return _possibleConstructorReturn2(this,_getPrototypeOf2(Conflict).apply(this,arguments));}return Conflict;}(Effect);//---------------------------------------------------------------------------------------------------------------------
var ConflictResolution=/*#__PURE__*/function(_Base$5){_inherits2(ConflictResolution,_Base$5);function ConflictResolution(){_classCallCheck2(this,ConflictResolution);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConflictResolution).apply(this,arguments));}_createClass2(ConflictResolution,[{key:"getDescription",value:function getDescription(){throw new Error('Abstract method');}},{key:"resolve",value:function resolve(){throw new Error('Abstract method');}}]);return ConflictResolution;}(Base$1);var DateInterval=/*#__PURE__*/function(_Base$6){_inherits2(DateInterval,_Base$6);function DateInterval(){_classCallCheck2(this,DateInterval);return _possibleConstructorReturn2(this,_getPrototypeOf2(DateInterval).apply(this,arguments));}_createClass2(DateInterval,[{key:"initialize",value:function initialize(){var _get26;for(var _len71=arguments.length,args=new Array(_len71),_key70=0;_key70<_len71;_key70++){args[_key70]=arguments[_key70];}(_get26=_get2(_getPrototypeOf2(DateInterval.prototype),"initialize",this)).call.apply(_get26,[this].concat(args));if(!this.startDate)this.startDate=MIN_DATE;if(!this.endDate)this.endDate=MAX_DATE;}},{key:"startDateIsFinite",value:function startDateIsFinite(){return!this.isIntervalEmpty()&&this.startDate.getTime()!==MIN_DATE.getTime();}},{key:"endDateIsFinite",value:function endDateIsFinite(){return!this.isIntervalEmpty()&&this.endDate.getTime()!==MAX_DATE.getTime();}},{key:"containsDate",value:function containsDate(date){var edgeInclusion=arguments.length>1&&arguments[1]!==undefined?arguments[1]:EdgeInclusion.Left;return edgeInclusion===EdgeInclusion.Left&&date>=this.startDate&&date<this.endDate||edgeInclusion===EdgeInclusion.Right&&date>this.startDate&&date<=this.endDate;}},{key:"isIntervalEmpty",value:function isIntervalEmpty(){return this.startDate>this.endDate;}},{key:"intersect",value:function intersect(another){var anotherStart=another.startDate;var anotherEnd=another.endDate;var start=this.startDate;var end=this.endDate;// No intersection found
if(end<anotherStart||start>anotherEnd){// return an empty interval
return EMPTY_INTERVAL;}var newStart=new Date(Math.max(start.getTime(),anotherStart.getTime()));var newEnd=new Date(Math.min(end.getTime(),anotherEnd.getTime()));return this.constructor.new({startDate:newStart,endDate:newEnd});}}]);return DateInterval;}(Base$1);var EMPTY_INTERVAL=DateInterval.new({startDate:MAX_DATE,endDate:MIN_DATE});var intersectIntervals=function intersectIntervals(dateIntervals){return dateIntervals.reduce(function(acc,currentInterval){return acc.intersect(currentInterval);},DateInterval.new());};var __decorate$5=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var ConstraintInterval=/*#__PURE__*/function(_DateInterval){_inherits2(ConstraintInterval,_DateInterval);function ConstraintInterval(){_classCallCheck2(this,ConstraintInterval);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConstraintInterval).apply(this,arguments));}_createClass2(ConstraintInterval,[{key:"toString",value:function toString(){return"from ".concat(this.startDate," till ").concat(this.endDate);}}]);return ConstraintInterval;}(DateInterval);//---------------------------------------------------------------------------------------------------------------------
var RemoveConstrainingInterval=/*#__PURE__*/function(_ConflictResolution){_inherits2(RemoveConstrainingInterval,_ConflictResolution);function RemoveConstrainingInterval(){_classCallCheck2(this,RemoveConstrainingInterval);return _possibleConstructorReturn2(this,_getPrototypeOf2(RemoveConstrainingInterval).apply(this,arguments));}_createClass2(RemoveConstrainingInterval,[{key:"resolve",value:function resolve(){if(!this.interval)throw new Error("Can't use this resolution option - no constraint interval available");if(!this.interval.onRemoveAction)throw new Error("Can't use this resolution option - no `onRemoveAction` available");this.interval.onRemoveAction();}},{key:"originDescription",get:function get(){return this.interval.originDescription;}}]);return RemoveConstrainingInterval;}(ConflictResolution);var IntervalConflict=/*#__PURE__*/function(_Conflict){_inherits2(IntervalConflict,_Conflict);function IntervalConflict(){_classCallCheck2(this,IntervalConflict);return _possibleConstructorReturn2(this,_getPrototypeOf2(IntervalConflict).apply(this,arguments));}_createClass2(IntervalConflict,[{key:"description",get:function get(){return"The change causes scheduling conflict with the constraining interval ".concat(this.conflictingInterval,",\nwhich is created by the ").concat(this.conflictingInterval.originDescription);}},{key:"resolutions",get:function get(){var resolutions=[];if(this.conflictingInterval.onRemoveAction)resolutions.push(RemoveConstrainingInterval.new({interval:this.conflictingInterval}));// lazy property pattern
Object.defineProperty(this,'resolutions',{value:resolutions});return resolutions;}}]);return IntervalConflict;}(Conflict);//---------------------------------------------------------------------------------------------------------------------
var ProposedDateOutsideOfConstraint=/*#__PURE__*/function(_IntervalConflict){_inherits2(ProposedDateOutsideOfConstraint,_IntervalConflict);function ProposedDateOutsideOfConstraint(){_classCallCheck2(this,ProposedDateOutsideOfConstraint);return _possibleConstructorReturn2(this,_getPrototypeOf2(ProposedDateOutsideOfConstraint).apply(this,arguments));}_createClass2(ProposedDateOutsideOfConstraint,[{key:"description",get:function get(){return"The date ".concat(this.proposedDate," is outside of the constraining interval ").concat(this.conflictingInterval,",\nwhich is created by the ").concat(this.conflictingInterval.originDescription);}}]);return ProposedDateOutsideOfConstraint;}(IntervalConflict);//---------------------------------------------------------------------------------------------------------------------
var ConstrainedEvent=function ConstrainedEvent(base){var ConstrainedEvent=/*#__PURE__*/function(_base34){_inherits2(ConstrainedEvent,_base34);function ConstrainedEvent(){_classCallCheck2(this,ConstrainedEvent);return _possibleConstructorReturn2(this,_getPrototypeOf2(ConstrainedEvent).apply(this,arguments));}_createClass2(ConstrainedEvent,[{key:"setManuallyScheduled",value:function(){var _setManuallyScheduled=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee47(mode){return regeneratorRuntime.wrap(function _callee47$(_context86){while(1){switch(_context86.prev=_context86.next){case 0:this.$.manuallyScheduled.put(mode);return _context86.abrupt("return",this.propagate());case 2:case"end":return _context86.stop();}}},_callee47,this);}));function setManuallyScheduled(_x78){return _setManuallyScheduled.apply(this,arguments);}return setManuallyScheduled;}()},{key:"validateProposedStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function validateProposedStartDate(startDate){var adjustedProposedDate,startDateIntervals,acc,_iteratorNormalCompletion77,_didIteratorError77,_iteratorError77,_iterator77,_step77,interval;return regeneratorRuntime.wrap(function validateProposedStartDate$(_context87){while(1){switch(_context87.prev=_context87.next){case 0:if(!startDate){_context87.next=35;break;}return _context87.delegateYield(this.skipNonWorkingTime(startDate,true),"t0",2);case 2:adjustedProposedDate=_context87.t0;_context87.next=5;return this.$.combinedStartDateConstraintIntervals;case 5:startDateIntervals=_context87.sent;acc=DateInterval.new();_iteratorNormalCompletion77=true;_didIteratorError77=false;_iteratorError77=undefined;_context87.prev=10;_iterator77=startDateIntervals[Symbol.iterator]();case 12:if(_iteratorNormalCompletion77=(_step77=_iterator77.next()).done){_context87.next=21;break;}interval=_step77.value;acc=acc.intersect(interval);if(acc.containsDate(adjustedProposedDate)){_context87.next=18;break;}_context87.next=18;return ProposedDateOutsideOfConstraint.new({proposedDate:adjustedProposedDate,conflictingInterval:interval});case 18:_iteratorNormalCompletion77=true;_context87.next=12;break;case 21:_context87.next=27;break;case 23:_context87.prev=23;_context87.t1=_context87["catch"](10);_didIteratorError77=true;_iteratorError77=_context87.t1;case 27:_context87.prev=27;_context87.prev=28;if(!_iteratorNormalCompletion77&&_iterator77.return!=null){_iterator77.return();}case 30:_context87.prev=30;if(!_didIteratorError77){_context87.next=33;break;}throw _iteratorError77;case 33:return _context87.finish(30);case 34:return _context87.finish(27);case 35:case"end":return _context87.stop();}}},validateProposedStartDate,this,[[10,23,27,35],[28,,30,34]]);})},{key:"validateProposedEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function validateProposedEndDate(endDate){var adjustedProposedDate,endDateIntervals,acc,_iteratorNormalCompletion78,_didIteratorError78,_iteratorError78,_iterator78,_step78,interval;return regeneratorRuntime.wrap(function validateProposedEndDate$(_context88){while(1){switch(_context88.prev=_context88.next){case 0:if(!endDate){_context88.next=35;break;}return _context88.delegateYield(this.skipNonWorkingTime(endDate,false),"t0",2);case 2:adjustedProposedDate=_context88.t0;_context88.next=5;return this.$.combinedEndDateConstraintIntervals;case 5:endDateIntervals=_context88.sent;acc=DateInterval.new();_iteratorNormalCompletion78=true;_didIteratorError78=false;_iteratorError78=undefined;_context88.prev=10;_iterator78=endDateIntervals[Symbol.iterator]();case 12:if(_iteratorNormalCompletion78=(_step78=_iterator78.next()).done){_context88.next=21;break;}interval=_step78.value;acc=acc.intersect(interval);if(acc.containsDate(adjustedProposedDate)){_context88.next=18;break;}_context88.next=18;return ProposedDateOutsideOfConstraint.new({proposedDate:adjustedProposedDate,conflictingInterval:interval});case 18:_iteratorNormalCompletion78=true;_context88.next=12;break;case 21:_context88.next=27;break;case 23:_context88.prev=23;_context88.t1=_context88["catch"](10);_didIteratorError78=true;_iteratorError78=_context88.t1;case 27:_context88.prev=27;_context88.prev=28;if(!_iteratorNormalCompletion78&&_iterator78.return!=null){_iterator78.return();}case 30:_context88.prev=30;if(!_didIteratorError78){_context88.next=33;break;}throw _iteratorError78;case 33:return _context88.finish(30);case 34:return _context88.finish(27);case 35:case"end":return _context88.stop();}}},validateProposedEndDate,this,[[10,23,27,35],[28,,30,34]]);})},{key:"calculateEarlyStartDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateRaw(){var project,projectStartDate,validInitialIntervals,startDateInterval;return regeneratorRuntime.wrap(function calculateEarlyStartDateRaw$(_context89){while(1){switch(_context89.prev=_context89.next){case 0:project=this.getProject();_context89.next=3;return project.$.startDate;case 3:projectStartDate=_context89.sent;_context89.next=6;return this.$.validInitialIntervals;case 6:validInitialIntervals=_context89.sent;startDateInterval=validInitialIntervals.startDateInterval;return _context89.abrupt("return",startDateInterval.startDateIsFinite()?startDateInterval.startDate:projectStartDate);case 9:case"end":return _context89.stop();}}},calculateEarlyStartDateRaw,this);})},{key:"calculateEarlyStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDate(){var date;return regeneratorRuntime.wrap(function calculateEarlyStartDate$(_context90){while(1){switch(_context90.prev=_context90.next){case 0:_context90.next=2;return this.$.earlyStartDateRaw;case 2:date=_context90.sent;return _context90.delegateYield(this.maybeSkipNonWorkingTime(date,true),"t0",4);case 4:return _context90.abrupt("return",_context90.t0);case 5:case"end":return _context90.stop();}}},calculateEarlyStartDate,this);})},{key:"calculateEarlyEndDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateRaw(){var project,projectStartDate,validInitialIntervals,endDateInterval,canCalculateProjectedXDate,result;return regeneratorRuntime.wrap(function calculateEarlyEndDateRaw$(_context91){while(1){switch(_context91.prev=_context91.next){case 0:project=this.getProject();_context91.next=3;return project.$.startDate;case 3:projectStartDate=_context91.sent;_context91.next=6;return this.$.validInitialIntervals;case 6:validInitialIntervals=_context91.sent;endDateInterval=validInitialIntervals.endDateInterval;return _context91.delegateYield(this.canCalculateProjectedXDate(),"t0",9);case 9:canCalculateProjectedXDate=_context91.t0;result=null;if(!endDateInterval.startDateIsFinite()){_context91.next=15;break;}result=endDateInterval.startDate;// if no end date restrictions are found we use formula: task early end == project start - task duration (if duration is available)
_context91.next=18;break;case 15:if(!(projectStartDate&&canCalculateProjectedXDate)){_context91.next=18;break;}return _context91.delegateYield(this.calculateProjectedEndDate(projectStartDate),"t1",17);case 17:result=_context91.t1;case 18:return _context91.abrupt("return",result);case 19:case"end":return _context91.stop();}}},calculateEarlyEndDateRaw,this);})},{key:"calculateEarlyEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDate(){var date;return regeneratorRuntime.wrap(function calculateEarlyEndDate$(_context92){while(1){switch(_context92.prev=_context92.next){case 0:_context92.next=2;return this.$.earlyEndDateRaw;case 2:date=_context92.sent;return _context92.delegateYield(this.maybeSkipNonWorkingTime(date,false),"t0",4);case 4:return _context92.abrupt("return",_context92.t0);case 5:case"end":return _context92.stop();}}},calculateEarlyEndDate,this);})},{key:"calculateLateStartDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateRaw(){var project,projectEndDate,validInitialIntervals,startDateInterval,canCalculateProjectedXDate,result;return regeneratorRuntime.wrap(function calculateLateStartDateRaw$(_context93){while(1){switch(_context93.prev=_context93.next){case 0:project=this.getProject();_context93.next=3;return project.$.endDate;case 3:projectEndDate=_context93.sent;_context93.next=6;return this.$.validInitialIntervals;case 6:validInitialIntervals=_context93.sent;startDateInterval=validInitialIntervals.startDateInterval;return _context93.delegateYield(this.canCalculateProjectedXDate(),"t0",9);case 9:canCalculateProjectedXDate=_context93.t0;result=null;if(!startDateInterval.endDateIsFinite()){_context93.next=15;break;}result=startDateInterval.endDate;_context93.next=18;break;case 15:if(!(projectEndDate&&canCalculateProjectedXDate)){_context93.next=18;break;}return _context93.delegateYield(this.calculateProjectedStartDate(projectEndDate),"t1",17);case 17:result=_context93.t1;case 18:return _context93.abrupt("return",result);case 19:case"end":return _context93.stop();}}},calculateLateStartDateRaw,this);})},{key:"calculateLateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDate(){var date;return regeneratorRuntime.wrap(function calculateLateStartDate$(_context94){while(1){switch(_context94.prev=_context94.next){case 0:_context94.next=2;return this.$.lateStartDateRaw;case 2:date=_context94.sent;return _context94.delegateYield(this.maybeSkipNonWorkingTime(date,true),"t0",4);case 4:return _context94.abrupt("return",_context94.t0);case 5:case"end":return _context94.stop();}}},calculateLateStartDate,this);})},{key:"calculateLateEndDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateRaw(){var project,projectEndDate,validInitialIntervals,endDateInterval;return regeneratorRuntime.wrap(function calculateLateEndDateRaw$(_context95){while(1){switch(_context95.prev=_context95.next){case 0:project=this.getProject();_context95.next=3;return project.$.endDate;case 3:projectEndDate=_context95.sent;_context95.next=6;return this.$.validInitialIntervals;case 6:validInitialIntervals=_context95.sent;endDateInterval=validInitialIntervals.endDateInterval;return _context95.abrupt("return",endDateInterval.endDateIsFinite()?endDateInterval.endDate:projectEndDate);case 9:case"end":return _context95.stop();}}},calculateLateEndDateRaw,this);})},{key:"calculateLateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDate(){var date;return regeneratorRuntime.wrap(function calculateLateEndDate$(_context96){while(1){switch(_context96.prev=_context96.next){case 0:_context96.next=2;return this.$.lateEndDateRaw;case 2:date=_context96.sent;return _context96.delegateYield(this.maybeSkipNonWorkingTime(date,false),"t0",4);case 4:return _context96.abrupt("return",_context96.t0);case 5:case"end":return _context96.stop();}}},calculateLateEndDate,this);})},{key:"calculateTotalSlack",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateTotalSlack(){var earlyStartDate,lateStartDate,earlyEndDate,lateEndDate,slackUnit,endSlack,result;return regeneratorRuntime.wrap(function calculateTotalSlack$(_context97){while(1){switch(_context97.prev=_context97.next){case 0:_context97.next=2;return this.$.earlyStartDateRaw;case 2:earlyStartDate=_context97.sent;_context97.next=5;return this.$.lateStartDateRaw;case 5:lateStartDate=_context97.sent;_context97.next=8;return this.$.earlyEndDateRaw;case 8:earlyEndDate=_context97.sent;_context97.next=11;return this.$.lateEndDateRaw;case 11:lateEndDate=_context97.sent;_context97.next=14;return this.$.slackUnit;case 14:slackUnit=_context97.sent;if(!(earlyStartDate&&lateStartDate||earlyEndDate&&lateEndDate)){_context97.next=28;break;}if(!(earlyStartDate&&lateStartDate)){_context97.next=25;break;}return _context97.delegateYield(this.calculateDurationBetweenDates(earlyStartDate,lateStartDate,slackUnit),"t0",18);case 18:result=_context97.t0;if(!(earlyEndDate&&lateEndDate)){_context97.next=23;break;}return _context97.delegateYield(this.calculateDurationBetweenDates(earlyEndDate,lateEndDate,slackUnit),"t1",21);case 21:endSlack=_context97.t1;if(endSlack<result)result=endSlack;case 23:_context97.next=28;break;case 25:if(!(earlyEndDate&&lateEndDate)){_context97.next=28;break;}return _context97.delegateYield(this.calculateDurationBetweenDates(earlyEndDate,lateEndDate,slackUnit),"t2",27);case 27:result=_context97.t2;case 28:return _context97.abrupt("return",result);case 29:case"end":return _context97.stop();}}},calculateTotalSlack,this);})},{key:"calculateCritical",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCritical(){var totalSlack;return regeneratorRuntime.wrap(function calculateCritical$(_context98){while(1){switch(_context98.prev=_context98.next){case 0:_context98.next=2;return this.$.totalSlack;case 2:totalSlack=_context98.sent;return _context98.abrupt("return",totalSlack<=0);case 4:case"end":return _context98.stop();}}},calculateCritical,this);})},{key:"calculateStartDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateInitial(){var proposedValue,manuallyScheduled;return regeneratorRuntime.wrap(function calculateStartDateInitial$(_context99){while(1){switch(_context99.prev=_context99.next){case 0:proposedValue=this.$.startDate.proposedValue;// early exit in manually scheduled case
_context99.next=3;return this.$.manuallyScheduled;case 3:manuallyScheduled=_context99.sent;if(!manuallyScheduled){_context99.next=7;break;}return _context99.delegateYield(_get2(_getPrototypeOf2(ConstrainedEvent.prototype),"calculateStartDateInitial",this).call(this),"t0",6);case 6:return _context99.abrupt("return",_context99.t0);case 7:_context99.next=9;return this.$.combinedStartDateConstraintIntervals;case 9:_context99.next=11;return this.$.combinedEndDateConstraintIntervals;case 11:if(!(!this.$.duration.hasConsistentValue()&&!this.$.duration.hasProposedValue()&&proposedValue)){_context99.next=13;break;}return _context99.abrupt("return",proposedValue);case 13:if(!(proposedValue===null)){_context99.next=15;break;}return _context99.abrupt("return",null);case 15:return _context99.delegateYield(this.validateProposedStartDate(proposedValue),"t1",16);case 16:_context99.next=18;return this.$.earlyStartDateRaw;case 18:_context99.t2=_context99.sent;if(_context99.t2){_context99.next=22;break;}return _context99.delegateYield(_get2(_getPrototypeOf2(ConstrainedEvent.prototype),"calculateStartDateInitial",this).call(this),"t3",21);case 21:_context99.t2=_context99.t3;case 22:return _context99.abrupt("return",_context99.t2);case 23:case"end":return _context99.stop();}}},calculateStartDateInitial,this);})},{key:"calculateEndDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateInitial(){var proposedValue,manuallyScheduled;return regeneratorRuntime.wrap(function calculateEndDateInitial$(_context100){while(1){switch(_context100.prev=_context100.next){case 0:proposedValue=this.$.endDate.proposedValue;// early exit in manually scheduled case
_context100.next=3;return this.$.manuallyScheduled;case 3:manuallyScheduled=_context100.sent;if(!manuallyScheduled){_context100.next=7;break;}return _context100.delegateYield(_get2(_getPrototypeOf2(ConstrainedEvent.prototype),"calculateEndDateInitial",this).call(this),"t0",6);case 6:return _context100.abrupt("return",_context100.t0);case 7:_context100.next=9;return this.$.combinedStartDateConstraintIntervals;case 9:_context100.next=11;return this.$.combinedEndDateConstraintIntervals;case 11:if(!(!this.$.duration.hasConsistentValue()&&!this.$.duration.hasProposedValue()&&proposedValue)){_context100.next=13;break;}return _context100.abrupt("return",proposedValue);case 13:if(!(proposedValue===null)){_context100.next=15;break;}return _context100.abrupt("return",null);case 15:return _context100.delegateYield(this.validateProposedEndDate(proposedValue),"t1",16);case 16:_context100.next=18;return this.$.earlyEndDateRaw;case 18:_context100.t2=_context100.sent;if(_context100.t2){_context100.next=22;break;}return _context100.delegateYield(_get2(_getPrototypeOf2(ConstrainedEvent.prototype),"calculateEndDateInitial",this).call(this),"t3",21);case 21:_context100.t2=_context100.t3;case 22:return _context100.abrupt("return",_context100.t2);case 23:case"end":return _context100.stop();}}},calculateEndDateInitial,this);})// TODO make this method smart in regard of providing conflict resolution information
/**
         * Finds the intersection of provided intervals.
         * If some of the intervals doesn't intersect the methods yields IntervalConflict
         * with the interval reference.
         * @param intervals Intervals to find intersection of
         * @private
         */},{key:"validateIntervalsIntersection",value:/*#__PURE__*/regeneratorRuntime.mark(function validateIntervalsIntersection(intervals){var intersection,_iteratorNormalCompletion79,_didIteratorError79,_iteratorError79,_iterator79,_step79,interval;return regeneratorRuntime.wrap(function validateIntervalsIntersection$(_context101){while(1){switch(_context101.prev=_context101.next){case 0:intersection=DateInterval.new();_iteratorNormalCompletion79=true;_didIteratorError79=false;_iteratorError79=undefined;_context101.prev=4;_iterator79=intervals[Symbol.iterator]();case 6:if(_iteratorNormalCompletion79=(_step79=_iterator79.next()).done){_context101.next=15;break;}interval=_step79.value;intersection=intersection.intersect(interval);if(!intersection.isIntervalEmpty()){_context101.next=12;break;}_context101.next=12;return IntervalConflict.new({conflictingInterval:interval});case 12:_iteratorNormalCompletion79=true;_context101.next=6;break;case 15:_context101.next=21;break;case 17:_context101.prev=17;_context101.t0=_context101["catch"](4);_didIteratorError79=true;_iteratorError79=_context101.t0;case 21:_context101.prev=21;_context101.prev=22;if(!_iteratorNormalCompletion79&&_iterator79.return!=null){_iterator79.return();}case 24:_context101.prev=24;if(!_didIteratorError79){_context101.next=27;break;}throw _iteratorError79;case 27:return _context101.finish(24);case 28:return _context101.finish(21);case 29:return _context101.abrupt("return",intersection);case 30:case"end":return _context101.stop();}}},validateIntervalsIntersection,null,[[4,17,21,29],[22,,24,28]]);})},{key:"calculateStartDateIntervalsByEndDateIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateIntervalsByEndDateIntervals(intervals){var result,_iteratorNormalCompletion80,_didIteratorError80,_iteratorError80,_iterator80,_step80,interval;return regeneratorRuntime.wrap(function calculateStartDateIntervalsByEndDateIntervals$(_context102){while(1){switch(_context102.prev=_context102.next){case 0:result=[];_iteratorNormalCompletion80=true;_didIteratorError80=false;_iteratorError80=undefined;_context102.prev=4;_iterator80=intervals[Symbol.iterator]();case 6:if(_iteratorNormalCompletion80=(_step80=_iterator80.next()).done){_context102.next=32;break;}interval=_step80.value;_context102.t0=result;_context102.t1=ConstraintInterval;_context102.t2=interval.onRemoveAction;_context102.t3=interval.originDescription;if(!interval.startDateIsFinite()){_context102.next=17;break;}return _context102.delegateYield(this.calculateProjectedStartDate(interval.startDate),"t5",14);case 14:_context102.t4=_context102.t5;_context102.next=18;break;case 17:_context102.t4=null;case 18:_context102.t6=_context102.t4;if(!interval.endDateIsFinite()){_context102.next=24;break;}return _context102.delegateYield(this.calculateProjectedStartDate(interval.endDate),"t8",21);case 21:_context102.t7=_context102.t8;_context102.next=25;break;case 24:_context102.t7=null;case 25:_context102.t9=_context102.t7;_context102.t10={onRemoveAction:_context102.t2,originDescription:_context102.t3,startDate:_context102.t6,endDate:_context102.t9};_context102.t11=_context102.t1.new.call(_context102.t1,_context102.t10);_context102.t0.push.call(_context102.t0,_context102.t11);case 29:_iteratorNormalCompletion80=true;_context102.next=6;break;case 32:_context102.next=38;break;case 34:_context102.prev=34;_context102.t12=_context102["catch"](4);_didIteratorError80=true;_iteratorError80=_context102.t12;case 38:_context102.prev=38;_context102.prev=39;if(!_iteratorNormalCompletion80&&_iterator80.return!=null){_iterator80.return();}case 41:_context102.prev=41;if(!_didIteratorError80){_context102.next=44;break;}throw _iteratorError80;case 44:return _context102.finish(41);case 45:return _context102.finish(38);case 46:return _context102.abrupt("return",result);case 47:case"end":return _context102.stop();}}},calculateStartDateIntervalsByEndDateIntervals,this,[[4,34,38,46],[39,,41,45]]);})},{key:"calculateEndDateIntervalsByStartDateIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateIntervalsByStartDateIntervals(intervals){var result,_iteratorNormalCompletion81,_didIteratorError81,_iteratorError81,_iterator81,_step81,interval;return regeneratorRuntime.wrap(function calculateEndDateIntervalsByStartDateIntervals$(_context103){while(1){switch(_context103.prev=_context103.next){case 0:result=[];_iteratorNormalCompletion81=true;_didIteratorError81=false;_iteratorError81=undefined;_context103.prev=4;_iterator81=intervals[Symbol.iterator]();case 6:if(_iteratorNormalCompletion81=(_step81=_iterator81.next()).done){_context103.next=32;break;}interval=_step81.value;_context103.t0=result;_context103.t1=ConstraintInterval;_context103.t2=interval.onRemoveAction;_context103.t3=interval.originDescription;if(!interval.startDateIsFinite()){_context103.next=17;break;}return _context103.delegateYield(this.calculateProjectedEndDate(interval.startDate),"t5",14);case 14:_context103.t4=_context103.t5;_context103.next=18;break;case 17:_context103.t4=null;case 18:_context103.t6=_context103.t4;if(!interval.endDateIsFinite()){_context103.next=24;break;}return _context103.delegateYield(this.calculateProjectedEndDate(interval.endDate),"t8",21);case 21:_context103.t7=_context103.t8;_context103.next=25;break;case 24:_context103.t7=null;case 25:_context103.t9=_context103.t7;_context103.t10={onRemoveAction:_context103.t2,originDescription:_context103.t3,startDate:_context103.t6,endDate:_context103.t9};_context103.t11=_context103.t1.new.call(_context103.t1,_context103.t10);_context103.t0.push.call(_context103.t0,_context103.t11);case 29:_iteratorNormalCompletion81=true;_context103.next=6;break;case 32:_context103.next=38;break;case 34:_context103.prev=34;_context103.t12=_context103["catch"](4);_didIteratorError81=true;_iteratorError81=_context103.t12;case 38:_context103.prev=38;_context103.prev=39;if(!_iteratorNormalCompletion81&&_iterator81.return!=null){_iterator81.return();}case 41:_context103.prev=41;if(!_didIteratorError81){_context103.next=44;break;}throw _iteratorError81;case 44:return _context103.finish(41);case 45:return _context103.finish(38);case 46:return _context103.abrupt("return",result);case 47:case"end":return _context103.stop();}}},calculateEndDateIntervalsByStartDateIntervals,this,[[4,34,38,46],[39,,41,45]]);})// Indicates if calculateProjectedStartDate and calculateProjectedStartDate method can calculate values.
},{key:"canCalculateProjectedXDate",value:/*#__PURE__*/regeneratorRuntime.mark(function canCalculateProjectedXDate(){return regeneratorRuntime.wrap(function canCalculateProjectedXDate$(_context104){while(1){switch(_context104.prev=_context104.next){case 0:return _context104.delegateYield(this.shouldRecalculateDuration(),"t0",1);case 1:return _context104.abrupt("return",!_context104.t0);case 2:case"end":return _context104.stop();}}},canCalculateProjectedXDate,this);})},{key:"calculateValidInitialIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateValidInitialIntervals(){var startDateIntervals,endDateIntervals,startDateInterval,endDateInterval,canCalculateProjectedXDate,additionalConstraintForStartDate,reflectedIntervals,combinedIntervals,additionalConstraintForEndDate;return regeneratorRuntime.wrap(function calculateValidInitialIntervals$(_context105){while(1){switch(_context105.prev=_context105.next){case 0:_context105.next=2;return this.$.combinedStartDateConstraintIntervals;case 2:startDateIntervals=_context105.sent;_context105.next=5;return this.$.combinedEndDateConstraintIntervals;case 5:endDateIntervals=_context105.sent;// calculate effective start date constraining interval
startDateInterval=intersectIntervals(startDateIntervals);// calculate effective end date constraining interval
endDateInterval=intersectIntervals(endDateIntervals);return _context105.delegateYield(this.canCalculateProjectedXDate(),"t0",9);case 9:canCalculateProjectedXDate=_context105.t0;if(!(!canCalculateProjectedXDate&&!startDateInterval.isIntervalEmpty()&&!endDateInterval.isIntervalEmpty())){_context105.next=12;break;}return _context105.abrupt("return",{startDateInterval:startDateInterval,endDateInterval:endDateInterval});case 12:_context105.t1=DateInterval;if(!endDateInterval.startDateIsFinite()){_context105.next=18;break;}return _context105.delegateYield(this.calculateProjectedStartDate(endDateInterval.startDate),"t3",15);case 15:_context105.t2=_context105.t3;_context105.next=19;break;case 18:_context105.t2=null;case 19:_context105.t4=_context105.t2;if(!endDateInterval.endDateIsFinite()){_context105.next=25;break;}return _context105.delegateYield(this.calculateProjectedStartDate(endDateInterval.endDate),"t6",22);case 22:_context105.t5=_context105.t6;_context105.next=26;break;case 25:_context105.t5=null;case 26:_context105.t7=_context105.t5;_context105.t8={startDate:_context105.t4,endDate:_context105.t7};additionalConstraintForStartDate=_context105.t1.new.call(_context105.t1,_context105.t8);startDateInterval=startDateInterval.intersect(additionalConstraintForStartDate);// If no intersection w/ additional interval let's intersects intervals one by one
// and yield Conflict
if(!startDateInterval.isIntervalEmpty()){_context105.next=37;break;}return _context105.delegateYield(this.calculateStartDateIntervalsByEndDateIntervals(endDateIntervals),"t9",32);case 32:reflectedIntervals=_context105.t9;if(startDateIntervals.length>1){combinedIntervals=startDateIntervals.slice(0,startDateIntervals.length-1).concat(reflectedIntervals).concat(startDateIntervals[startDateIntervals.length-1]);}else{combinedIntervals=startDateIntervals.concat(reflectedIntervals);}return _context105.delegateYield(this.validateIntervalsIntersection(combinedIntervals),"t10",35);case 35:_context105.next=55;break;case 37:_context105.t11=DateInterval;if(!startDateInterval.startDateIsFinite()){_context105.next=43;break;}return _context105.delegateYield(this.calculateProjectedEndDate(startDateInterval.startDate),"t13",40);case 40:_context105.t12=_context105.t13;_context105.next=44;break;case 43:_context105.t12=null;case 44:_context105.t14=_context105.t12;if(!startDateInterval.endDateIsFinite()){_context105.next=50;break;}return _context105.delegateYield(this.calculateProjectedEndDate(startDateInterval.endDate),"t16",47);case 47:_context105.t15=_context105.t16;_context105.next=51;break;case 50:_context105.t15=null;case 51:_context105.t17=_context105.t15;_context105.t18={startDate:_context105.t14,endDate:_context105.t17};additionalConstraintForEndDate=_context105.t11.new.call(_context105.t11,_context105.t18);endDateInterval=endDateInterval.intersect(additionalConstraintForEndDate);case 55:return _context105.abrupt("return",{startDateInterval:startDateInterval,endDateInterval:endDateInterval});case 56:case"end":return _context105.stop();}}},calculateValidInitialIntervals,this);})/**
         * A template method which should provide an array on intervals, constraining the start date of this event.
         * Supposed to be overridden in other mixins.
         */},{key:"calculateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateStartDateConstraintIntervals$(_context106){while(1){switch(_context106.prev=_context106.next){case 0:return _context106.abrupt("return",[]);case 1:case"end":return _context106.stop();}}},calculateStartDateConstraintIntervals);})},{key:"calculateCombinedStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCombinedStartDateConstraintIntervals(){var result;return regeneratorRuntime.wrap(function calculateCombinedStartDateConstraintIntervals$(_context107){while(1){switch(_context107.prev=_context107.next){case 0:_context107.next=2;return this.$.startDateConstraintIntervals;case 2:result=_context107.sent;_context107.t0=result;_context107.next=6;return this.$.earlyStartDateConstraintIntervals;case 6:_context107.t1=_context107.sent;result=_context107.t0.concat.call(_context107.t0,_context107.t1);return _context107.abrupt("return",result);case 9:case"end":return _context107.stop();}}},calculateCombinedStartDateConstraintIntervals,this);})},{key:"calculateEarlyStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateEarlyStartDateConstraintIntervals$(_context108){while(1){switch(_context108.prev=_context108.next){case 0:return _context108.abrupt("return",[]);case 1:case"end":return _context108.stop();}}},calculateEarlyStartDateConstraintIntervals);})},{key:"calculateLateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateLateStartDateConstraintIntervals$(_context109){while(1){switch(_context109.prev=_context109.next){case 0:return _context109.abrupt("return",[]);case 1:case"end":return _context109.stop();}}},calculateLateStartDateConstraintIntervals);})/**
         * A template method which should provide an array on intervals, constraining the end date of this event.
         * Supposed to be overridden in other mixins.
         */},{key:"calculateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateEndDateConstraintIntervals$(_context110){while(1){switch(_context110.prev=_context110.next){case 0:return _context110.abrupt("return",[]);case 1:case"end":return _context110.stop();}}},calculateEndDateConstraintIntervals);})},{key:"calculateCombinedEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCombinedEndDateConstraintIntervals(){var result;return regeneratorRuntime.wrap(function calculateCombinedEndDateConstraintIntervals$(_context111){while(1){switch(_context111.prev=_context111.next){case 0:_context111.next=2;return this.$.endDateConstraintIntervals;case 2:result=_context111.sent;_context111.t0=result;_context111.next=6;return this.$.earlyEndDateConstraintIntervals;case 6:_context111.t1=_context111.sent;result=_context111.t0.concat.call(_context111.t0,_context111.t1);return _context111.abrupt("return",result);case 9:case"end":return _context111.stop();}}},calculateCombinedEndDateConstraintIntervals,this);})},{key:"calculateEarlyEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateEarlyEndDateConstraintIntervals$(_context112){while(1){switch(_context112.prev=_context112.next){case 0:return _context112.abrupt("return",[]);case 1:case"end":return _context112.stop();}}},calculateEarlyEndDateConstraintIntervals);})},{key:"calculateLateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateLateEndDateConstraintIntervals$(_context113){while(1){switch(_context113.prev=_context113.next){case 0:return _context113.abrupt("return",[]);case 1:case"end":return _context113.stop();}}},calculateLateEndDateConstraintIntervals);})},{key:"putEndDate",value:function putEndDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// Force intervals recalculation
// Covered by 10_basic and 50_milestone
this.markAsNeedRecalculation(this.$.validInitialIntervals);_get2(_getPrototypeOf2(ConstrainedEvent.prototype),"putEndDate",this).call(this,date,keepDuration);}}]);return ConstrainedEvent;}(base);__decorate$5([field()],ConstrainedEvent.prototype,"earlyStartDateRaw",void 0);__decorate$5([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],ConstrainedEvent.prototype,"earlyStartDate",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"earlyEndDateRaw",void 0);__decorate$5([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],ConstrainedEvent.prototype,"earlyEndDate",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"lateStartDateRaw",void 0);__decorate$5([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],ConstrainedEvent.prototype,"lateStartDate",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"lateEndDateRaw",void 0);__decorate$5([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],ConstrainedEvent.prototype,"lateEndDate",void 0);__decorate$5([model_field({type:'number',persist:false},{persistent:false})],ConstrainedEvent.prototype,"totalSlack",void 0);__decorate$5([model_field({type:'string',defaultValue:TimeUnit.Day,persist:false},{converter:DateHelper.normalizeUnit,persistent:false})],ConstrainedEvent.prototype,"slackUnit",void 0);__decorate$5([model_field({type:'boolean',defaultValue:false,persist:false},{persistent:false})],ConstrainedEvent.prototype,"critical",void 0);__decorate$5([model_field({type:'boolean',defaultValue:false})],ConstrainedEvent.prototype,"manuallyScheduled",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"startDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"earlyStartDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"lateStartDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"combinedStartDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"endDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"earlyEndDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"lateEndDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"combinedEndDateConstraintIntervals",void 0);__decorate$5([field()],ConstrainedEvent.prototype,"validInitialIntervals",void 0);__decorate$5([calculate('earlyStartDateRaw')],ConstrainedEvent.prototype,"calculateEarlyStartDateRaw",null);__decorate$5([calculate('earlyStartDate')],ConstrainedEvent.prototype,"calculateEarlyStartDate",null);__decorate$5([calculate('earlyEndDateRaw')],ConstrainedEvent.prototype,"calculateEarlyEndDateRaw",null);__decorate$5([calculate('earlyEndDate')],ConstrainedEvent.prototype,"calculateEarlyEndDate",null);__decorate$5([calculate('lateStartDateRaw')],ConstrainedEvent.prototype,"calculateLateStartDateRaw",null);__decorate$5([calculate('lateStartDate')],ConstrainedEvent.prototype,"calculateLateStartDate",null);__decorate$5([calculate('lateEndDateRaw')],ConstrainedEvent.prototype,"calculateLateEndDateRaw",null);__decorate$5([calculate('lateEndDate')],ConstrainedEvent.prototype,"calculateLateEndDate",null);__decorate$5([calculate('totalSlack')],ConstrainedEvent.prototype,"calculateTotalSlack",null);__decorate$5([calculate('critical')],ConstrainedEvent.prototype,"calculateCritical",null);__decorate$5([calculate('validInitialIntervals')],ConstrainedEvent.prototype,"calculateValidInitialIntervals",null);__decorate$5([calculate('startDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateStartDateConstraintIntervals",null);__decorate$5([calculate('combinedStartDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateCombinedStartDateConstraintIntervals",null);__decorate$5([calculate('earlyStartDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateEarlyStartDateConstraintIntervals",null);__decorate$5([calculate('lateStartDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateLateStartDateConstraintIntervals",null);__decorate$5([calculate('endDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateEndDateConstraintIntervals",null);__decorate$5([calculate('combinedEndDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateCombinedEndDateConstraintIntervals",null);__decorate$5([calculate('earlyEndDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateEarlyEndDateConstraintIntervals",null);__decorate$5([calculate('lateEndDateConstraintIntervals')],ConstrainedEvent.prototype,"calculateLateEndDateConstraintIntervals",null);return ConstrainedEvent;};var __decorate$6=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$6=Symbol('EventMixin');//---------------------------------------------------------------------------------------------------------------------
var EventMixin=function EventMixin(base){var EventMixin=/*#__PURE__*/function(_base35){_inherits2(EventMixin,_base35);function EventMixin(){_classCallCheck2(this,EventMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventMixin).apply(this,arguments));}_createClass2(EventMixin,[{key:hasMixin$6,value:function value(){}},{key:"calculateSchedulingMode",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateSchedulingMode(proposedValue){return regeneratorRuntime.wrap(function calculateSchedulingMode$(_context114){while(1){switch(_context114.prev=_context114.next){case 0:return _context114.abrupt("return",(proposedValue!==undefined?proposedValue:this.$.schedulingMode.getConsistentValue())||// empty scheduling mode always falls back to 'Normal'
SchedulingMode.Normal);case 1:case"end":return _context114.stop();}}},calculateSchedulingMode,this);})// Skips non-working time if it's needed to the event
},{key:"maybeSkipNonWorkingTime",value:/*#__PURE__*/regeneratorRuntime.mark(function maybeSkipNonWorkingTime(date){var isForward,skipNonWorkingTime,duration,_args115=arguments;return regeneratorRuntime.wrap(function maybeSkipNonWorkingTime$(_context115){while(1){switch(_context115.prev=_context115.next){case 0:isForward=_args115.length>1&&_args115[1]!==undefined?_args115[1]:true;skipNonWorkingTime=true;return _context115.delegateYield(this.shouldRecalculateDuration(),"t0",3);case 3:if(_context115.t0){_context115.next=8;break;}_context115.next=6;return this.$.duration;case 6:duration=_context115.sent;skipNonWorkingTime=duration>0;case 8:if(!(date&&skipNonWorkingTime)){_context115.next=13;break;}return _context115.delegateYield(this.skipNonWorkingTime(date,isForward),"t2",10);case 10:_context115.t1=_context115.t2;_context115.next=14;break;case 13:_context115.t1=date;case 14:return _context115.abrupt("return",_context115.t1);case 15:case"end":return _context115.stop();}}},maybeSkipNonWorkingTime,this);})},{key:"skipNonWorkingTime",value:/*#__PURE__*/regeneratorRuntime.mark(function skipNonWorkingTime(date){var isForward,calendar,_args116=arguments;return regeneratorRuntime.wrap(function skipNonWorkingTime$(_context116){while(1){switch(_context116.prev=_context116.next){case 0:isForward=_args116.length>1&&_args116[1]!==undefined?_args116[1]:true;_context116.next=3;return this.$.calendar;case 3:calendar=_context116.sent;return _context116.abrupt("return",calendar.skipNonWorkingTime(date,isForward));case 5:case"end":return _context116.stop();}}},skipNonWorkingTime,this);})},{key:"calculateDurationBetweenDates",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateDurationBetweenDates(startDate,endDate,unit){var calendar;return regeneratorRuntime.wrap(function calculateDurationBetweenDates$(_context117){while(1){switch(_context117.prev=_context117.next){case 0:_context117.next=2;return this.$.calendar;case 2:calendar=_context117.sent;return _context117.abrupt("return",calendar.calculateDuration(startDate,endDate,unit));case 4:case"end":return _context117.stop();}}},calculateDurationBetweenDates,this);})},{key:"convertDuration",value:function convertDuration(duration,fromUnit,toUnit){var projectCalendar=this.getProject().calendar;return projectCalendar.convertDuration(duration,fromUnit,toUnit);}},{key:"$convertDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function $convertDuration(duration,fromUnit,toUnit){var project,projectCalendar;return regeneratorRuntime.wrap(function $convertDuration$(_context118){while(1){switch(_context118.prev=_context118.next){case 0:project=this.getProject();_context118.next=3;return project.$.calendar;case 3:projectCalendar=_context118.sent;return _context118.abrupt("return",projectCalendar.convertDuration(duration,fromUnit,toUnit));case 5:case"end":return _context118.stop();}}},$convertDuration,this);})//#region StartDate
},{key:"calculateStartDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateInitial(){var proposedValue,shouldRecalculateStartDate;return regeneratorRuntime.wrap(function calculateStartDateInitial$(_context119){while(1){switch(_context119.prev=_context119.next){case 0:proposedValue=this.$.startDate.proposedValue;if(!(proposedValue!==undefined)){_context119.next=3;break;}return _context119.abrupt("return",proposedValue);case 3:return _context119.delegateYield(this.shouldRecalculateStartDate(),"t0",4);case 4:shouldRecalculateStartDate=_context119.t0;if(!shouldRecalculateStartDate){_context119.next=14;break;}_context119.t1=this;_context119.next=9;return this.$.endDate;case 9:_context119.t2=_context119.sent;return _context119.delegateYield(_context119.t1.calculateProjectedStartDate.call(_context119.t1,_context119.t2),"t3",11);case 11:return _context119.abrupt("return",_context119.t3);case 14:return _context119.abrupt("return",this.$.startDate.getConsistentValue());case 15:case"end":return _context119.stop();}}},calculateStartDateInitial,this);})},{key:"canRecalculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function canRecalculateStartDate(){return regeneratorRuntime.wrap(function canRecalculateStartDate$(_context120){while(1){switch(_context120.prev=_context120.next){case 0:return _context120.abrupt("return",(this.$.endDate.hasProposedValue()||this.$.endDate.hasConsistentValue())&&(this.$.duration.hasProposedValue()||this.$.duration.hasConsistentValue()));case 1:case"end":return _context120.stop();}}},canRecalculateStartDate,this);})},{key:"shouldRecalculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateStartDate(){return regeneratorRuntime.wrap(function shouldRecalculateStartDate$(_context121){while(1){switch(_context121.prev=_context121.next){case 0:_context121.t0=!this.$.startDate.value||this.$.endDate.proposedArgs&&this.$.endDate.proposedArgs[1]===true||this.$.duration.proposedArgs&&this.$.duration.proposedArgs[1]===false;if(!_context121.t0){_context121.next=4;break;}return _context121.delegateYield(this.canRecalculateStartDate(),"t1",3);case 3:_context121.t0=_context121.t1;case 4:return _context121.abrupt("return",_context121.t0);case 5:case"end":return _context121.stop();}}},shouldRecalculateStartDate,this);})},{key:"calculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDate(proposedValue){var startDateInitial;return regeneratorRuntime.wrap(function calculateStartDate$(_context122){while(1){switch(_context122.prev=_context122.next){case 0:_context122.next=2;return this.$.startDateInitial;case 2:startDateInitial=_context122.sent;return _context122.delegateYield(this.maybeSkipNonWorkingTime(startDateInitial),"t0",4);case 4:return _context122.abrupt("return",_context122.t0);case 5:case"end":return _context122.stop();}}},calculateStartDate,this);})},{key:"calculateProjectedStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedStartDate(endDate){var calendar,duration,durationUnit,durationMS;return regeneratorRuntime.wrap(function calculateProjectedStartDate$(_context123){while(1){switch(_context123.prev=_context123.next){case 0:_context123.next=2;return this.$.calendar;case 2:calendar=_context123.sent;_context123.next=5;return this.$.duration;case 5:duration=_context123.sent;_context123.next=8;return this.$.durationUnit;case 8:durationUnit=_context123.sent;return _context123.delegateYield(this.$convertDuration(duration,durationUnit,TimeUnit.Millisecond),"t0",10);case 10:durationMS=_context123.t0;return _context123.abrupt("return",calendar.calculateStartDate(endDate,durationMS,TimeUnit.Millisecond));case 12:case"end":return _context123.stop();}}},calculateProjectedStartDate,this);})//#endregion
//#region EndDate
},{key:"calculateEndDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateInitial(){var proposedValue,shouldRecalculateEndDate;return regeneratorRuntime.wrap(function calculateEndDateInitial$(_context124){while(1){switch(_context124.prev=_context124.next){case 0:proposedValue=this.$.endDate.proposedValue;if(!(proposedValue!==undefined)){_context124.next=3;break;}return _context124.abrupt("return",proposedValue);case 3:return _context124.delegateYield(this.shouldRecalculateEndDate(),"t0",4);case 4:shouldRecalculateEndDate=_context124.t0;if(!shouldRecalculateEndDate){_context124.next=14;break;}_context124.t1=this;_context124.next=9;return this.$.startDate;case 9:_context124.t2=_context124.sent;return _context124.delegateYield(_context124.t1.calculateProjectedEndDate.call(_context124.t1,_context124.t2),"t3",11);case 11:return _context124.abrupt("return",_context124.t3);case 14:return _context124.abrupt("return",this.$.endDate.getConsistentValue());case 15:case"end":return _context124.stop();}}},calculateEndDateInitial,this);})// End date can be calculated if there are start and duration values
},{key:"canRecalculateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function canRecalculateEndDate(){return regeneratorRuntime.wrap(function canRecalculateEndDate$(_context125){while(1){switch(_context125.prev=_context125.next){case 0:_context125.t0=this.$.startDate.hasProposedValue()||this.$.startDate.hasConsistentValue();if(!_context125.t0){_context125.next=7;break;}_context125.t1=this.$.duration.hasProposedValue()||this.$.duration.hasConsistentValue();if(_context125.t1){_context125.next=6;break;}return _context125.delegateYield(this.canRecalculateDuration(),"t2",5);case 5:_context125.t1=_context125.t2;case 6:_context125.t0=_context125.t1;case 7:return _context125.abrupt("return",_context125.t0);case 8:case"end":return _context125.stop();}}},canRecalculateEndDate,this);})// Signalizes to recalculate end date if:
// - end date has not value
// - or start date is being changed by setStartDate() call and keepDuration is true
// - or duration is being changed by setDuration() call and keepStartDate is true
},{key:"shouldRecalculateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEndDate(){return regeneratorRuntime.wrap(function shouldRecalculateEndDate$(_context126){while(1){switch(_context126.prev=_context126.next){case 0:_context126.t0=!this.$.endDate.hasConsistentValue()||this.$.startDate.hasProposedValue()&&this.$.startDate.proposedArgs[1]===true||this.$.duration.hasProposedValue()&&this.$.duration.proposedArgs[1]===true// "default" case, when data is stable and no user input is given - in this case we recalculate the end date
// note, that in the backward scheduling this will be a start date
||!this.$.startDate.hasProposedValue()&&!this.$.endDate.hasProposedValue()&&!this.$.duration.hasProposedValue()&&this.$.startDate.hasConsistentValue()&&this.$.endDate.hasConsistentValue()&&this.$.duration.hasConsistentValue();if(!_context126.t0){_context126.next=4;break;}return _context126.delegateYield(this.canRecalculateEndDate(),"t1",3);case 3:_context126.t0=_context126.t1;case 4:return _context126.abrupt("return",_context126.t0);case 5:case"end":return _context126.stop();}}},shouldRecalculateEndDate,this);})},{key:"calculateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDate(proposedValue){var endDateInitial,result,startDateInitial;return regeneratorRuntime.wrap(function calculateEndDate$(_context127){while(1){switch(_context127.prev=_context127.next){case 0:_context127.next=2;return this.$.endDateInitial;case 2:endDateInitial=_context127.sent;return _context127.delegateYield(this.maybeSkipNonWorkingTime(endDateInitial,false),"t0",4);case 4:result=_context127.t0;if(!this.$.startDateInitial.hasNextStableValue()){_context127.next=10;break;}_context127.next=8;return this.$.startDateInitial;case 8:startDateInitial=_context127.sent;if(result instanceof Date&&result<startDateInitial){result=startDateInitial;}case 10:return _context127.abrupt("return",result);case 11:case"end":return _context127.stop();}}},calculateEndDate,this);})// Calculates the end date as start date plus duration
// using availability provided by the event calendar
},{key:"calculateProjectedEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedEndDate(startDate){var calendar,duration,durationUnit,durationMS;return regeneratorRuntime.wrap(function calculateProjectedEndDate$(_context128){while(1){switch(_context128.prev=_context128.next){case 0:_context128.next=2;return this.$.calendar;case 2:calendar=_context128.sent;_context128.next=5;return this.$.duration;case 5:duration=_context128.sent;_context128.next=8;return this.$.durationUnit;case 8:durationUnit=_context128.sent;return _context128.delegateYield(this.$convertDuration(duration,durationUnit,TimeUnit.Millisecond),"t0",10);case 10:durationMS=_context128.t0;return _context128.abrupt("return",calendar.calculateEndDate(startDate,durationMS,TimeUnit.Millisecond));case 12:case"end":return _context128.stop();}}},calculateProjectedEndDate,this);})//#endregion
//#region Duration
},{key:"calculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateDuration(proposedValue){var shouldRecalculateDuration;return regeneratorRuntime.wrap(function calculateDuration$(_context129){while(1){switch(_context129.prev=_context129.next){case 0:if(!(proposedValue!==undefined)){_context129.next=2;break;}return _context129.abrupt("return",proposedValue);case 2:return _context129.delegateYield(this.shouldRecalculateDuration(),"t0",3);case 3:shouldRecalculateDuration=_context129.t0;if(!shouldRecalculateDuration){_context129.next=9;break;}return _context129.delegateYield(this.doCalculateDuration(),"t1",6);case 6:return _context129.abrupt("return",_context129.t1);case 9:return _context129.abrupt("return",this.$.duration.getConsistentValue());case 10:case"end":return _context129.stop();}}},calculateDuration,this);})// Calculates the event duration based on the event start/end dates.
// The duration is calculated as amount of working time between start and end dates.
},{key:"doCalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function doCalculateDuration(){var startDate,endDate;return regeneratorRuntime.wrap(function doCalculateDuration$(_context130){while(1){switch(_context130.prev=_context130.next){case 0:_context130.next=2;return this.$.startDate;case 2:startDate=_context130.sent;_context130.next=5;return this.$.endDate;case 5:endDate=_context130.sent;return _context130.delegateYield(this.calculateProjectedDuration(startDate,endDate),"t0",7);case 7:return _context130.abrupt("return",_context130.t0);case 8:case"end":return _context130.stop();}}},doCalculateDuration,this);})// Calculates the duration in `durationUnit`-s between start and end dates
// using availability provided by the event calendar
},{key:"calculateProjectedDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateProjectedDuration(startDate,endDate){var calendar,durationUnit;return regeneratorRuntime.wrap(function calculateProjectedDuration$(_context131){while(1){switch(_context131.prev=_context131.next){case 0:if(!(!startDate||!endDate||startDate>endDate)){_context131.next=2;break;}return _context131.abrupt("return",null);case 2:_context131.next=4;return this.$.calendar;case 4:calendar=_context131.sent;_context131.next=7;return this.$.durationUnit;case 7:durationUnit=_context131.sent;return _context131.delegateYield(this.$convertDuration(calendar.calculateDuration(startDate,endDate,TimeUnit.Millisecond),TimeUnit.Millisecond,durationUnit),"t0",9);case 9:return _context131.abrupt("return",_context131.t0);case 10:case"end":return _context131.stop();}}},calculateProjectedDuration,this);})// Duration can be calculated if there are both start and end date values
},{key:"canRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function canRecalculateDuration(){return regeneratorRuntime.wrap(function canRecalculateDuration$(_context132){while(1){switch(_context132.prev=_context132.next){case 0:return _context132.abrupt("return",(this.$.startDate.hasProposedValue()||this.$.startDate.hasConsistentValue())&&(this.$.endDate.hasProposedValue()||this.$.endDate.hasConsistentValue()));case 1:case"end":return _context132.stop();}}},canRecalculateDuration,this);})// Signalizes to recalculate duration if:
// - the event has no duration value
// - or start date is being changed by setStartDate() call and keepDuration is false
// - or end date is being changed by setEndDate() call and keepDuration is false
},{key:"shouldRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateDuration(){return regeneratorRuntime.wrap(function shouldRecalculateDuration$(_context133){while(1){switch(_context133.prev=_context133.next){case 0:_context133.t0=!this.$.duration.hasConsistentValue()// We don't recalculate duration if all the fields are just provided during initial data loading
&&(!this.$.startDate.getProposedValue()||!this.$.endDate.getProposedValue()||this.$.duration.getProposedValue()==null||this.$.startDate.hasConsistentValue()||this.$.endDate.hasConsistentValue())||this.$.startDate.proposedArgs&&this.$.startDate.proposedArgs[1]===false||this.$.endDate.proposedArgs&&this.$.endDate.proposedArgs[1]===false;if(!_context133.t0){_context133.next=4;break;}return _context133.delegateYield(this.canRecalculateDuration(),"t1",3);case 3:_context133.t0=_context133.t1;case 4:return _context133.abrupt("return",_context133.t0);case 5:case"end":return _context133.stop();}}},shouldRecalculateDuration,this);})//#endregion
},{key:"getStartDate",value:function getStartDate(){return this.startDate;}},{key:"setStartDate",value:function(){var _setStartDate=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee48(date){var keepDuration,_args134=arguments;return regeneratorRuntime.wrap(function _callee48$(_context134){while(1){switch(_context134.prev=_context134.next){case 0:keepDuration=_args134.length>1&&_args134[1]!==undefined?_args134[1]:true;// when user "unschedules" the event, we always want to drop the duration and keep the opposite date
keepDuration=date===null?false:keepDuration;this.$.startDate.put(date,keepDuration);// this is an "artefact" requirement from the past, where the proposed value was going to the "initial" atom
this.markAsNeedRecalculation(this.$.startDateInitial);// need to explicitly mark end date (initial) as "recalculation needed"
// because edges may be in "wrong" state, because previously, for example,
// start date was updated based on end date + duration (event.setDuration(1, null, false)
this.markAsNeedRecalculation(keepDuration?this.$.endDateInitial:this.$.duration);return _context134.abrupt("return",this.propagate());case 6:case"end":return _context134.stop();}}},_callee48,this);}));function setStartDate(_x79){return _setStartDate.apply(this,arguments);}return setStartDate;}()},{key:"getEndDate",value:function getEndDate(){return this.endDate;}},{key:"putEndDate",value:function putEndDate(date){var keepDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;// when user "unschedules" the event, we always want to drop the duration and keep the opposite date
keepDuration=date===null?false:keepDuration;var startDate=this.getStartDate();if(!keepDuration&&!!date&&!!startDate&&startDate.getTime()===date.getTime()){this.putDuration(0);}// Actually change end date if we are:
// 1. moving task by end date
// 2. trying to null it
// 3. there is no start date to validate against
// 4. or end date is greater
else if(keepDuration||!date||!startDate||startDate<=date){this.$.endDate.put(date,keepDuration);// this is an "artifact" requirement from the past, where the proposed value was going to the "initial" atom
this.markAsNeedRecalculation(this.$.endDateInitial);this.markAsNeedRecalculation(keepDuration?this.$.startDateInitial:this.$.duration);}}},{key:"setEndDate",value:function(){var _setEndDate=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee49(date){var keepDuration,_args135=arguments;return regeneratorRuntime.wrap(function _callee49$(_context135){while(1){switch(_context135.prev=_context135.next){case 0:keepDuration=_args135.length>1&&_args135[1]!==undefined?_args135[1]:false;this.putEndDate(date,keepDuration);return _context135.abrupt("return",this.propagate());case 3:case"end":return _context135.stop();}}},_callee49,this);}));function setEndDate(_x80){return _setEndDate.apply(this,arguments);}return setEndDate;}()},{key:"getDuration",value:function getDuration(unit){var duration=this.duration;if(unit){duration=this.convertDuration(duration,this.durationUnit,unit);}return duration;}},{key:"putDuration",value:function putDuration(duration,unit){var keepStartDate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var hasNoStartDate=!this.$.startDate.hasProposedValue()&&!this.$.startDate.hasConsistentValue();// never try to keep the start date if its absent
// (we might be able to calculate it, instead of keeping)
keepStartDate=hasNoStartDate?false:keepStartDate;if(unit!=null&&unit!==this.durationUnit){this.$.durationUnit.put(unit);}this.$.duration.put(duration,keepStartDate);this.markAsNeedRecalculation(keepStartDate?this.$.endDateInitial:this.$.startDateInitial);}},{key:"setDuration",value:function(){var _setDuration=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee50(duration,unit){var keepStartDate,_args136=arguments;return regeneratorRuntime.wrap(function _callee50$(_context136){while(1){switch(_context136.prev=_context136.next){case 0:keepStartDate=_args136.length>2&&_args136[2]!==undefined?_args136[2]:true;this.putDuration(duration,unit,keepStartDate);return _context136.abrupt("return",this.propagate());case 3:case"end":return _context136.stop();}}},_callee50,this);}));function setDuration(_x81,_x82){return _setDuration.apply(this,arguments);}return setDuration;}()},{key:"getDurationUnit",value:function getDurationUnit(){return this.durationUnit;}},{key:"setDurationUnit",value:function setDurationUnit(_value){throw new Error("Use `setDuration` instead");}// should be overridden in the visualizing code
},{key:"toString",value:function toString(){return"Event ".concat(this.id);}}]);return EventMixin;}(base);__decorate$6([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],EventMixin.prototype,"startDateInitial",void 0);__decorate$6([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},{converter:dateConverter})],EventMixin.prototype,"startDate",void 0);__decorate$6([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ',persist:false},{converter:dateConverter,persistent:false})],EventMixin.prototype,"endDateInitial",void 0);__decorate$6([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},{converter:dateConverter})],EventMixin.prototype,"endDate",void 0);__decorate$6([model_field({type:'number',allowNull:true})],EventMixin.prototype,"duration",void 0);__decorate$6([model_field({type:'string',defaultValue:TimeUnit.Day},{converter:DateHelper.normalizeUnit})],EventMixin.prototype,"durationUnit",void 0);__decorate$6([model_field({type:'string',defaultValue:SchedulingMode.Normal})],EventMixin.prototype,"schedulingMode",void 0);__decorate$6([calculate('schedulingMode')],EventMixin.prototype,"calculateSchedulingMode",null);__decorate$6([calculate('startDateInitial')],EventMixin.prototype,"calculateStartDateInitial",null);__decorate$6([calculate('startDate')],EventMixin.prototype,"calculateStartDate",null);__decorate$6([calculate('endDateInitial')],EventMixin.prototype,"calculateEndDateInitial",null);__decorate$6([calculate('endDate')],EventMixin.prototype,"calculateEndDate",null);__decorate$6([calculate('duration')],EventMixin.prototype,"calculateDuration",null);return EventMixin;};var FixedDuration=function FixedDuration(base){var FixedDuration=/*#__PURE__*/function(_base36){_inherits2(FixedDuration,_base36);function FixedDuration(){_classCallCheck2(this,FixedDuration);return _possibleConstructorReturn2(this,_getPrototypeOf2(FixedDuration).apply(this,arguments));}_createClass2(FixedDuration,[{key:"shouldRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateDuration(){var schedulingMode,assignments;return regeneratorRuntime.wrap(function shouldRecalculateDuration$(_context137){while(1){switch(_context137.prev=_context137.next){case 0:_context137.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context137.sent;_context137.next=5;return this.$.assigned;case 5:assignments=_context137.sent;if(!(schedulingMode===SchedulingMode.FixedDuration&&assignments.size)){_context137.next=10;break;}if(!(this.$.duration.value==null)){_context137.next=9;break;}return _context137.abrupt("return",true);case 9:return _context137.abrupt("return",false);case 10:return _context137.delegateYield(_get2(_getPrototypeOf2(FixedDuration.prototype),"shouldRecalculateDuration",this).call(this),"t0",11);case 11:return _context137.abrupt("return",_context137.t0);case 12:case"end":return _context137.stop();}}},shouldRecalculateDuration,this);})},{key:"shouldRecalculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEffort(){var schedulingMode,assignments;return regeneratorRuntime.wrap(function shouldRecalculateEffort$(_context138){while(1){switch(_context138.prev=_context138.next){case 0:_context138.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context138.sent;_context138.next=5;return this.$.assigned;case 5:assignments=_context138.sent;if(!(schedulingMode===SchedulingMode.FixedDuration&&assignments.size)){_context138.next=15;break;}if(!(this.$.effort.value==null)){_context138.next=9;break;}return _context138.abrupt("return",true);case 9:return _context138.delegateYield(this.shouldRecalculateDuration(),"t1",10);case 10:_context138.t0=!_context138.t1;if(!_context138.t0){_context138.next=14;break;}return _context138.delegateYield(this.shouldRecalculateAssignmentUnits(null),"t2",13);case 13:_context138.t0=!_context138.t2;case 14:return _context138.abrupt("return",_context138.t0);case 15:return _context138.delegateYield(_get2(_getPrototypeOf2(FixedDuration.prototype),"shouldRecalculateEffort",this).call(this),"t3",16);case 16:return _context138.abrupt("return",_context138.t3);case 17:case"end":return _context138.stop();}}},shouldRecalculateEffort,this);})},{key:"shouldRecalculateAssignmentUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateAssignmentUnits(assignment){var schedulingMode;return regeneratorRuntime.wrap(function shouldRecalculateAssignmentUnits$(_context139){while(1){switch(_context139.prev=_context139.next){case 0:_context139.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context139.sent;if(!(schedulingMode===SchedulingMode.FixedDuration)){_context139.next=15;break;}_context139.next=6;return this.$.effortDriven;case 6:if(!_context139.sent){_context139.next=14;break;}if(!(this.$.effort.hasProposedValue()||this.$.duration.hasProposedValue())){_context139.next=9;break;}return _context139.abrupt("return",true);case 9:if(!((this.$.assigned.newRefs.size>0||this.$.assigned.oldRefs.size>0)&&this.$.effort.value!=null)){_context139.next=11;break;}return _context139.abrupt("return",true);case 11:return _context139.abrupt("return",false);case 14:return _context139.abrupt("return",this.$.effort.hasProposedValue());case 15:return _context139.delegateYield(_get2(_getPrototypeOf2(FixedDuration.prototype),"shouldRecalculateAssignmentUnits",this).call(this,assignment),"t0",16);case 16:return _context139.abrupt("return",_context139.t0);case 17:case"end":return _context139.stop();}}},shouldRecalculateAssignmentUnits,this);})},{key:"setEffort",value:function(){var _setEffort2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee51(effort,unit){var _this128=this;var schedulingMode;return regeneratorRuntime.wrap(function _callee51$(_context140){while(1){switch(_context140.prev=_context140.next){case 0:schedulingMode=this.schedulingMode;if(schedulingMode===SchedulingMode.FixedDuration){this.assigned.forEach(function(assignment){_this128.markAsNeedRecalculation(assignment.$.units);});}return _context140.abrupt("return",_get2(_getPrototypeOf2(FixedDuration.prototype),"setEffort",this).call(this,effort,unit));case 3:case"end":return _context140.stop();}}},_callee51,this);}));function setEffort(_x83,_x84){return _setEffort2.apply(this,arguments);}return setEffort;}()},{key:"setDuration",value:function(){var _setDuration2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee52(duration,unit){var _this129=this;var schedulingMode;return regeneratorRuntime.wrap(function _callee52$(_context141){while(1){switch(_context141.prev=_context141.next){case 0:schedulingMode=this.schedulingMode;if(schedulingMode===SchedulingMode.FixedDuration&&this.effortDriven){this.assigned.forEach(function(assignment){_this129.markAsNeedRecalculation(assignment.$.units);});}return _context141.abrupt("return",_get2(_getPrototypeOf2(FixedDuration.prototype),"setDuration",this).call(this,duration,unit));case 3:case"end":return _context141.stop();}}},_callee52,this);}));function setDuration(_x85,_x86){return _setDuration2.apply(this,arguments);}return setDuration;}()},{key:"setAssignmentUnits",value:function(){var _setAssignmentUnits2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee53(assignment,units){return regeneratorRuntime.wrap(function _callee53$(_context142){while(1){switch(_context142.prev=_context142.next){case 0:if(!(this.schedulingMode===SchedulingMode.FixedDuration)){_context142.next=6;break;}assignment.$.units.put(units);assignment.markAsNeedRecalculation(assignment.event.$.effort);return _context142.abrupt("return",assignment.propagate());case 6:return _context142.abrupt("return",_get2(_getPrototypeOf2(FixedDuration.prototype),"setAssignmentUnits",this).call(this,assignment,units));case 7:case"end":return _context142.stop();}}},_callee53,this);}));function setAssignmentUnits(_x87,_x88){return _setAssignmentUnits2.apply(this,arguments);}return setAssignmentUnits;}()},{key:"addAssignment",value:function addAssignment(assignment){var _this130=this;if(this.schedulingMode===SchedulingMode.FixedDuration&&this.effortDriven){// `clearUserInput` basically means we need to ignore the user-provided value for the assignment unit
// and calculate it, based on other information
// (currently `calculateAssignmentUnits` in the HasAssignments always uses user-provided value if it exists)
// ideally, we need to detect this case in the `calculateAssignmentUnits` and ignore the `proposedValue`
assignment.$.units.clearUserInput();this.assigned.forEach(function(assignment){_this130.markAsNeedRecalculation(assignment.$.units);assignment.$.units.clearUserInput();});}return _get2(_getPrototypeOf2(FixedDuration.prototype),"addAssignment",this).call(this,assignment);}},{key:"removeAssignment",value:function removeAssignment(assignment){var _this131=this;if(this.schedulingMode===SchedulingMode.FixedDuration&&this.effortDriven){// `clearUserInput` basically means we need to ignore the user-provided value for the assignment unit
// and calculate it, based on other information
// (currently `calculateAssignmentUnits` in the HasAssignments always uses user-provided value if it exists)
// ideally, we need to detect this case in the `calculateAssignmentUnits` and ignore the `proposedValue`
assignment.$.units.clearUserInput();this.assigned.forEach(function(assignment){_this131.markAsNeedRecalculation(assignment.$.units);assignment.$.units.clearUserInput();});}return _get2(_getPrototypeOf2(FixedDuration.prototype),"removeAssignment",this).call(this,assignment);}},{key:"useDurationForProjectedXDateCalculation",value:/*#__PURE__*/regeneratorRuntime.mark(function useDurationForProjectedXDateCalculation(){var schedulingMode;return regeneratorRuntime.wrap(function useDurationForProjectedXDateCalculation$(_context143){while(1){switch(_context143.prev=_context143.next){case 0:_context143.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context143.sent;_context143.t0=schedulingMode===SchedulingMode.FixedDuration;if(_context143.t0){_context143.next=7;break;}return _context143.delegateYield(_get2(_getPrototypeOf2(FixedDuration.prototype),"useDurationForProjectedXDateCalculation",this).call(this),"t1",6);case 6:_context143.t0=_context143.t1;case 7:return _context143.abrupt("return",_context143.t0);case 8:case"end":return _context143.stop();}}},useDurationForProjectedXDateCalculation,this);})},{key:"getBaseOptionsForDurationCalculations",value:/*#__PURE__*/regeneratorRuntime.mark(function getBaseOptionsForDurationCalculations(){var schedulingMode;return regeneratorRuntime.wrap(function getBaseOptionsForDurationCalculations$(_context144){while(1){switch(_context144.prev=_context144.next){case 0:_context144.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context144.sent;if(!(schedulingMode===SchedulingMode.FixedDuration)){_context144.next=7;break;}return _context144.abrupt("return",{ignoreResourceCalendars:true});case 7:return _context144.delegateYield(_get2(_getPrototypeOf2(FixedDuration.prototype),"getBaseOptionsForDurationCalculations",this).call(this),"t0",8);case 8:return _context144.abrupt("return",_context144.t0);case 9:case"end":return _context144.stop();}}},getBaseOptionsForDurationCalculations,this);})}]);return FixedDuration;}(base);return FixedDuration;};var FixedEffort=function FixedEffort(base){var FixedEffort=/*#__PURE__*/function(_base37){_inherits2(FixedEffort,_base37);function FixedEffort(){_classCallCheck2(this,FixedEffort);return _possibleConstructorReturn2(this,_getPrototypeOf2(FixedEffort).apply(this,arguments));}_createClass2(FixedEffort,[{key:"calculateEffortDriven",// FixedEffort scheduling mode forces the task to be effort driven
value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEffortDriven(proposedValue){var schedulingMode;return regeneratorRuntime.wrap(function calculateEffortDriven$(_context145){while(1){switch(_context145.prev=_context145.next){case 0:_context145.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context145.sent;_context145.t0=schedulingMode===SchedulingMode.FixedEffort;if(_context145.t0){_context145.next=7;break;}return _context145.delegateYield(_get2(_getPrototypeOf2(FixedEffort.prototype),"calculateEffortDriven",this).call(this,proposedValue),"t1",6);case 6:_context145.t0=_context145.t1;case 7:return _context145.abrupt("return",_context145.t0);case 8:case"end":return _context145.stop();}}},calculateEffortDriven,this);})},{key:"shouldRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateDuration(){var schedulingMode,assignments;return regeneratorRuntime.wrap(function shouldRecalculateDuration$(_context146){while(1){switch(_context146.prev=_context146.next){case 0:_context146.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context146.sent;_context146.next=5;return this.$.assigned;case 5:assignments=_context146.sent;if(!(schedulingMode===SchedulingMode.FixedEffort&&assignments.size>0)){_context146.next=11;break;}return _context146.delegateYield(this.shouldRecalculateEffort(),"t0",8);case 8:return _context146.abrupt("return",!_context146.t0);case 11:return _context146.delegateYield(_get2(_getPrototypeOf2(FixedEffort.prototype),"shouldRecalculateDuration",this).call(this),"t1",12);case 12:return _context146.abrupt("return",_context146.t1);case 13:case"end":return _context146.stop();}}},shouldRecalculateDuration,this);})},{key:"shouldRecalculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEffort(){var schedulingMode;return regeneratorRuntime.wrap(function shouldRecalculateEffort$(_context147){while(1){switch(_context147.prev=_context147.next){case 0:_context147.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context147.sent;if(!(schedulingMode===SchedulingMode.FixedEffort)){_context147.next=7;break;}return _context147.abrupt("return",this.$.effort.value==null);case 7:return _context147.delegateYield(_get2(_getPrototypeOf2(FixedEffort.prototype),"shouldRecalculateEffort",this).call(this),"t0",8);case 8:return _context147.abrupt("return",_context147.t0);case 9:case"end":return _context147.stop();}}},shouldRecalculateEffort,this);})},{key:"setAssignmentUnits",value:function(){var _setAssignmentUnits3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee54(assignment,units){return regeneratorRuntime.wrap(function _callee54$(_context148){while(1){switch(_context148.prev=_context148.next){case 0:if(!(this.schedulingMode===SchedulingMode.FixedEffort)){_context148.next=6;break;}assignment.$.units.put(units);assignment.markAsNeedRecalculation(assignment.event.$.duration);return _context148.abrupt("return",assignment.propagate());case 6:return _context148.abrupt("return",_get2(_getPrototypeOf2(FixedEffort.prototype),"setAssignmentUnits",this).call(this,assignment,units));case 7:case"end":return _context148.stop();}}},_callee54,this);}));function setAssignmentUnits(_x89,_x90){return _setAssignmentUnits3.apply(this,arguments);}return setAssignmentUnits;}()},{key:"shouldRecalculateAssignmentUnits",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateAssignmentUnits(assignment){var schedulingMode;return regeneratorRuntime.wrap(function shouldRecalculateAssignmentUnits$(_context149){while(1){switch(_context149.prev=_context149.next){case 0:schedulingMode=this.schedulingMode;if(!(schedulingMode===SchedulingMode.FixedEffort)){_context149.next=9;break;}if(!this.$.duration.hasProposedValue()){_context149.next=6;break;}return _context149.abrupt("return",true);case 6:return _context149.abrupt("return",false);case 7:_context149.next=11;break;case 9:return _context149.delegateYield(_get2(_getPrototypeOf2(FixedEffort.prototype),"shouldRecalculateAssignmentUnits",this).call(this,assignment),"t0",10);case 10:return _context149.abrupt("return",_context149.t0);case 11:case"end":return _context149.stop();}}},shouldRecalculateAssignmentUnits,this);})},{key:"setDuration",value:function(){var _setDuration3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee55(duration,unit){var _this132=this,_get27;var schedulingMode,_len72,args,_key71,_args150=arguments;return regeneratorRuntime.wrap(function _callee55$(_context150){while(1){switch(_context150.prev=_context150.next){case 0:schedulingMode=this.schedulingMode;if(schedulingMode===SchedulingMode.FixedEffort){this.assigned.forEach(function(assignment){_this132.markAsNeedRecalculation(assignment.$.units);assignment.$.units.clearUserInput();});}for(_len72=_args150.length,args=new Array(_len72>2?_len72-2:0),_key71=2;_key71<_len72;_key71++){args[_key71-2]=_args150[_key71];}return _context150.abrupt("return",(_get27=_get2(_getPrototypeOf2(FixedEffort.prototype),"setDuration",this)).call.apply(_get27,[this,duration,unit].concat(args)));case 4:case"end":return _context150.stop();}}},_callee55,this);}));function setDuration(_x91,_x92){return _setDuration3.apply(this,arguments);}return setDuration;}()},{key:"addAssignment",value:function addAssignment(assignment){if(this.schedulingMode===SchedulingMode.FixedEffort){this.markAsNeedRecalculation(this.$.duration);}return _get2(_getPrototypeOf2(FixedEffort.prototype),"addAssignment",this).call(this,assignment);}},{key:"removeAssignment",value:function removeAssignment(assignment){if(this.schedulingMode===SchedulingMode.FixedEffort){if(this.assigned.size>1)this.markAsNeedRecalculation(this.$.duration);}return _get2(_getPrototypeOf2(FixedEffort.prototype),"removeAssignment",this).call(this,assignment);}}]);return FixedEffort;}(base);return FixedEffort;};var FixedUnits=function FixedUnits(base){var FixedUnits=/*#__PURE__*/function(_base38){_inherits2(FixedUnits,_base38);function FixedUnits(){_classCallCheck2(this,FixedUnits);return _possibleConstructorReturn2(this,_getPrototypeOf2(FixedUnits).apply(this,arguments));}_createClass2(FixedUnits,[{key:"shouldRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateDuration(){var schedulingMode,assigned;return regeneratorRuntime.wrap(function shouldRecalculateDuration$(_context151){while(1){switch(_context151.prev=_context151.next){case 0:_context151.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context151.sent;_context151.next=5;return this.$.assigned;case 5:assigned=_context151.sent;if(!(schedulingMode===SchedulingMode.FixedUnits&&assigned.size>0)){_context151.next=13;break;}if(!(this.$.duration.value==null)){_context151.next=9;break;}return _context151.abrupt("return",true);case 9:if(!this.$.effort.hasProposedValue()){_context151.next=11;break;}return _context151.abrupt("return",true);case 11:return _context151.delegateYield(this.shouldRecalculateEffort(),"t0",12);case 12:return _context151.abrupt("return",!_context151.t0);case 13:return _context151.delegateYield(_get2(_getPrototypeOf2(FixedUnits.prototype),"shouldRecalculateDuration",this).call(this),"t1",14);case 14:return _context151.abrupt("return",_context151.t1);case 15:case"end":return _context151.stop();}}},shouldRecalculateDuration,this);})},{key:"shouldRecalculateEffort",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEffort(){var schedulingMode,assigned;return regeneratorRuntime.wrap(function shouldRecalculateEffort$(_context152){while(1){switch(_context152.prev=_context152.next){case 0:_context152.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context152.sent;_context152.next=5;return this.$.assigned;case 5:assigned=_context152.sent;if(!(schedulingMode===SchedulingMode.FixedUnits&&assigned.size>0)){_context152.next=18;break;}_context152.t0=this.$.effort.value==null;if(!_context152.t0){_context152.next=11;break;}return _context152.delegateYield(this.canRecalculateEffort(),"t1",10);case 10:_context152.t0=_context152.t1;case 11:if(!_context152.t0){_context152.next=13;break;}return _context152.abrupt("return",true);case 13:if(!this.$.duration.hasProposedValue()){_context152.next=15;break;}return _context152.abrupt("return",true);case 15:_context152.next=17;return this.$.effortDriven;case 17:return _context152.abrupt("return",!_context152.sent);case 18:return _context152.delegateYield(_get2(_getPrototypeOf2(FixedUnits.prototype),"shouldRecalculateEffort",this).call(this),"t2",19);case 19:return _context152.abrupt("return",_context152.t2);case 20:case"end":return _context152.stop();}}},shouldRecalculateEffort,this);})},{key:"addAssignment",value:function addAssignment(assignment){if(this.schedulingMode===SchedulingMode.FixedUnits){this.markAsNeedRecalculation(this.effortDriven?this.$.duration:this.$.effort);}return _get2(_getPrototypeOf2(FixedUnits.prototype),"addAssignment",this).call(this,assignment);}},{key:"removeAssignment",value:function removeAssignment(assignment){if(this.schedulingMode===SchedulingMode.FixedUnits){this.markAsNeedRecalculation(this.effortDriven?this.$.duration:this.$.effort);}return _get2(_getPrototypeOf2(FixedUnits.prototype),"removeAssignment",this).call(this,assignment);}},{key:"setEffort",value:function(){var _setEffort3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee56(duration,unit){return regeneratorRuntime.wrap(function _callee56$(_context153){while(1){switch(_context153.prev=_context153.next){case 0:if(this.schedulingMode===SchedulingMode.FixedUnits){this.markAsNeedRecalculation(this.$.duration);}return _context153.abrupt("return",_get2(_getPrototypeOf2(FixedUnits.prototype),"setEffort",this).call(this,duration,unit));case 2:case"end":return _context153.stop();}}},_callee56,this);}));function setEffort(_x93,_x94){return _setEffort3.apply(this,arguments);}return setEffort;}()},{key:"setDuration",value:function(){var _setDuration4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee57(duration,unit){var _get28;var _len73,args,_key72,_args154=arguments;return regeneratorRuntime.wrap(function _callee57$(_context154){while(1){switch(_context154.prev=_context154.next){case 0:if(this.schedulingMode===SchedulingMode.FixedUnits){this.markAsNeedRecalculation(this.$.effort);}for(_len73=_args154.length,args=new Array(_len73>2?_len73-2:0),_key72=2;_key72<_len73;_key72++){args[_key72-2]=_args154[_key72];}return _context154.abrupt("return",(_get28=_get2(_getPrototypeOf2(FixedUnits.prototype),"setDuration",this)).call.apply(_get28,[this,duration,unit].concat(args)));case 3:case"end":return _context154.stop();}}},_callee57,this);}));function setDuration(_x95,_x96){return _setDuration4.apply(this,arguments);}return setDuration;}()},{key:"useDurationForProjectedXDateCalculation",value:/*#__PURE__*/regeneratorRuntime.mark(function useDurationForProjectedXDateCalculation(){var schedulingMode,assigned,effortDriven;return regeneratorRuntime.wrap(function useDurationForProjectedXDateCalculation$(_context155){while(1){switch(_context155.prev=_context155.next){case 0:_context155.next=2;return this.$.schedulingMode;case 2:schedulingMode=_context155.sent;_context155.next=5;return this.$.assigned;case 5:assigned=_context155.sent;if(!(schedulingMode===SchedulingMode.FixedUnits&&assigned.size>0)){_context155.next=11;break;}_context155.next=9;return this.$.effortDriven;case 9:effortDriven=_context155.sent;return _context155.abrupt("return",(!effortDriven||!this.$.effort.hasValue()||this.$.duration.hasProposedValue())&&(// this means:
// 1) this is not a initial data calculation (hasConsistentValue)
// 2) there's a user input for duration (hasProposedValue)
!this.$.effort.hasProposedValue()||!this.$.effort.hasConsistentValue()));case 11:return _context155.delegateYield(_get2(_getPrototypeOf2(FixedUnits.prototype),"useDurationForProjectedXDateCalculation",this).call(this),"t0",12);case 12:return _context155.abrupt("return",_context155.t0);case 13:case"end":return _context155.stop();}}},useDurationForProjectedXDateCalculation,this);})}]);return FixedUnits;}(base);return FixedUnits;};var __decorate$7=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var HasChildren=function HasChildren(base){var HasChildren=/*#__PURE__*/function(_base39){_inherits2(HasChildren,_base39);function HasChildren(){_classCallCheck2(this,HasChildren);return _possibleConstructorReturn2(this,_getPrototypeOf2(HasChildren).apply(this,arguments));}_createClass2(HasChildren,[{key:"shouldRecalculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateStartDate(){var childEvents;return regeneratorRuntime.wrap(function shouldRecalculateStartDate$(_context156){while(1){switch(_context156.prev=_context156.next){case 0:_context156.next=2;return this.$.childEvents;case 2:childEvents=_context156.sent;if(!(childEvents.size===0)){_context156.next=8;break;}return _context156.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"shouldRecalculateStartDate",this).call(this),"t0",5);case 5:return _context156.abrupt("return",_context156.t0);case 8:return _context156.abrupt("return",false);case 9:case"end":return _context156.stop();}}},shouldRecalculateStartDate,this);})},{key:"shouldRecalculateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateEndDate(){var childEvents;return regeneratorRuntime.wrap(function shouldRecalculateEndDate$(_context157){while(1){switch(_context157.prev=_context157.next){case 0:_context157.next=2;return this.$.childEvents;case 2:childEvents=_context157.sent;if(!(childEvents.size===0)){_context157.next=8;break;}return _context157.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"shouldRecalculateEndDate",this).call(this),"t0",5);case 5:return _context157.abrupt("return",_context157.t0);case 8:return _context157.abrupt("return",false);case 9:case"end":return _context157.stop();}}},shouldRecalculateEndDate,this);})},{key:"shouldRecalculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function shouldRecalculateDuration(){var childEvents;return regeneratorRuntime.wrap(function shouldRecalculateDuration$(_context158){while(1){switch(_context158.prev=_context158.next){case 0:_context158.next=2;return this.$.childEvents;case 2:childEvents=_context158.sent;if(!(childEvents.size===0)){_context158.next=8;break;}return _context158.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"shouldRecalculateDuration",this).call(this),"t0",5);case 5:return _context158.abrupt("return",_context158.t0);case 8:return _context158.abrupt("return",true);case 9:case"end":return _context158.stop();}}},shouldRecalculateDuration,this);})},{key:"calculateEarlyStartDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateRaw(){var childEvents,result,_iteratorNormalCompletion82,_didIteratorError82,_iteratorError82,_iterator82,_step82,childEvent,childDate;return regeneratorRuntime.wrap(function calculateEarlyStartDateRaw$(_context159){while(1){switch(_context159.prev=_context159.next){case 0:_context159.next=2;return this.$.childEvents;case 2:childEvents=_context159.sent;if(!childEvents.size){_context159.next=36;break;}result=MAX_DATE;_iteratorNormalCompletion82=true;_didIteratorError82=false;_iteratorError82=undefined;_context159.prev=8;_iterator82=childEvents[Symbol.iterator]();case 10:if(_iteratorNormalCompletion82=(_step82=_iterator82.next()).done){_context159.next=19;break;}childEvent=_step82.value;_context159.next=14;return childEvent.$.earlyStartDateRaw;case 14:childDate=_context159.sent;if(childDate&&childDate<result)result=childDate;case 16:_iteratorNormalCompletion82=true;_context159.next=10;break;case 19:_context159.next=25;break;case 21:_context159.prev=21;_context159.t0=_context159["catch"](8);_didIteratorError82=true;_iteratorError82=_context159.t0;case 25:_context159.prev=25;_context159.prev=26;if(!_iteratorNormalCompletion82&&_iterator82.return!=null){_iterator82.return();}case 28:_context159.prev=28;if(!_didIteratorError82){_context159.next=31;break;}throw _iteratorError82;case 31:return _context159.finish(28);case 32:return _context159.finish(25);case 33:result=result.getTime()-MAX_DATE.getTime()?result:null;_context159.next=38;break;case 36:return _context159.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEarlyStartDateRaw",this).call(this),"t1",37);case 37:result=_context159.t1;case 38:return _context159.abrupt("return",result);case 39:case"end":return _context159.stop();}}},calculateEarlyStartDateRaw,this,[[8,21,25,33],[26,,28,32]]);})},{key:"calculateEarlyEndDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateRaw(){var childEvents,result,_iteratorNormalCompletion83,_didIteratorError83,_iteratorError83,_iterator83,_step83,childEvent,childDate;return regeneratorRuntime.wrap(function calculateEarlyEndDateRaw$(_context160){while(1){switch(_context160.prev=_context160.next){case 0:_context160.next=2;return this.$.childEvents;case 2:childEvents=_context160.sent;if(!childEvents.size){_context160.next=36;break;}result=MIN_DATE;_iteratorNormalCompletion83=true;_didIteratorError83=false;_iteratorError83=undefined;_context160.prev=8;_iterator83=childEvents[Symbol.iterator]();case 10:if(_iteratorNormalCompletion83=(_step83=_iterator83.next()).done){_context160.next=19;break;}childEvent=_step83.value;_context160.next=14;return childEvent.$.earlyEndDateRaw;case 14:childDate=_context160.sent;if(childDate&&childDate>result)result=childDate;case 16:_iteratorNormalCompletion83=true;_context160.next=10;break;case 19:_context160.next=25;break;case 21:_context160.prev=21;_context160.t0=_context160["catch"](8);_didIteratorError83=true;_iteratorError83=_context160.t0;case 25:_context160.prev=25;_context160.prev=26;if(!_iteratorNormalCompletion83&&_iterator83.return!=null){_iterator83.return();}case 28:_context160.prev=28;if(!_didIteratorError83){_context160.next=31;break;}throw _iteratorError83;case 31:return _context160.finish(28);case 32:return _context160.finish(25);case 33:result=result.getTime()-MIN_DATE.getTime()?result:null;_context160.next=38;break;case 36:return _context160.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEarlyEndDateRaw",this).call(this),"t1",37);case 37:result=_context160.t1;case 38:return _context160.abrupt("return",result);case 39:case"end":return _context160.stop();}}},calculateEarlyEndDateRaw,this,[[8,21,25,33],[26,,28,32]]);})},{key:"calculateLateStartDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateRaw(){var childEvents,result,_iteratorNormalCompletion84,_didIteratorError84,_iteratorError84,_iterator84,_step84,childEvent,childDate;return regeneratorRuntime.wrap(function calculateLateStartDateRaw$(_context161){while(1){switch(_context161.prev=_context161.next){case 0:_context161.next=2;return this.$.childEvents;case 2:childEvents=_context161.sent;if(!childEvents.size){_context161.next=36;break;}result=MAX_DATE;_iteratorNormalCompletion84=true;_didIteratorError84=false;_iteratorError84=undefined;_context161.prev=8;_iterator84=childEvents[Symbol.iterator]();case 10:if(_iteratorNormalCompletion84=(_step84=_iterator84.next()).done){_context161.next=19;break;}childEvent=_step84.value;_context161.next=14;return childEvent.$.lateStartDateRaw;case 14:childDate=_context161.sent;if(childDate&&childDate<result)result=childDate;case 16:_iteratorNormalCompletion84=true;_context161.next=10;break;case 19:_context161.next=25;break;case 21:_context161.prev=21;_context161.t0=_context161["catch"](8);_didIteratorError84=true;_iteratorError84=_context161.t0;case 25:_context161.prev=25;_context161.prev=26;if(!_iteratorNormalCompletion84&&_iterator84.return!=null){_iterator84.return();}case 28:_context161.prev=28;if(!_didIteratorError84){_context161.next=31;break;}throw _iteratorError84;case 31:return _context161.finish(28);case 32:return _context161.finish(25);case 33:result=result.getTime()-MAX_DATE.getTime()?result:null;_context161.next=38;break;case 36:return _context161.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateLateStartDateRaw",this).call(this),"t1",37);case 37:result=_context161.t1;case 38:return _context161.abrupt("return",result);case 39:case"end":return _context161.stop();}}},calculateLateStartDateRaw,this,[[8,21,25,33],[26,,28,32]]);})},{key:"calculateLateEndDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateRaw(){var childEvents,result,_iteratorNormalCompletion85,_didIteratorError85,_iteratorError85,_iterator85,_step85,childEvent,childDate;return regeneratorRuntime.wrap(function calculateLateEndDateRaw$(_context162){while(1){switch(_context162.prev=_context162.next){case 0:_context162.next=2;return this.$.childEvents;case 2:childEvents=_context162.sent;if(!childEvents.size){_context162.next=36;break;}result=MIN_DATE;_iteratorNormalCompletion85=true;_didIteratorError85=false;_iteratorError85=undefined;_context162.prev=8;_iterator85=childEvents[Symbol.iterator]();case 10:if(_iteratorNormalCompletion85=(_step85=_iterator85.next()).done){_context162.next=19;break;}childEvent=_step85.value;_context162.next=14;return childEvent.$.lateEndDateRaw;case 14:childDate=_context162.sent;if(childDate&&childDate>result)result=childDate;case 16:_iteratorNormalCompletion85=true;_context162.next=10;break;case 19:_context162.next=25;break;case 21:_context162.prev=21;_context162.t0=_context162["catch"](8);_didIteratorError85=true;_iteratorError85=_context162.t0;case 25:_context162.prev=25;_context162.prev=26;if(!_iteratorNormalCompletion85&&_iterator85.return!=null){_iterator85.return();}case 28:_context162.prev=28;if(!_didIteratorError85){_context162.next=31;break;}throw _iteratorError85;case 31:return _context162.finish(28);case 32:return _context162.finish(25);case 33:result=result.getTime()-MIN_DATE.getTime()?result:null;_context162.next=38;break;case 36:return _context162.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateLateEndDateRaw",this).call(this),"t1",37);case 37:result=_context162.t1;case 38:return _context162.abrupt("return",result);case 39:case"end":return _context162.stop();}}},calculateLateEndDateRaw,this,[[8,21,25,33],[26,,28,32]]);})},{key:"calculateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateStartDateConstraintIntervals$(_context163){while(1){switch(_context163.prev=_context163.next){case 0:return _context163.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context163.t0;_context163.next=4;return this.$.parentEvent;case 4:parentEvent=_context163.sent;if(!parentEvent){_context163.next=10;break;}_context163.next=8;return parentEvent.$.startDateConstraintIntervals;case 8:parentIntervals=_context163.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context163.abrupt("return",intervals);case 11:case"end":return _context163.stop();}}},calculateStartDateConstraintIntervals,this);})},{key:"calculateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateEndDateConstraintIntervals$(_context164){while(1){switch(_context164.prev=_context164.next){case 0:return _context164.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context164.t0;_context164.next=4;return this.$.parentEvent;case 4:parentEvent=_context164.sent;if(!parentEvent){_context164.next=10;break;}_context164.next=8;return parentEvent.$.endDateConstraintIntervals;case 8:parentIntervals=_context164.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context164.abrupt("return",intervals);case 11:case"end":return _context164.stop();}}},calculateEndDateConstraintIntervals,this);})},{key:"calculateEarlyStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateEarlyStartDateConstraintIntervals$(_context165){while(1){switch(_context165.prev=_context165.next){case 0:return _context165.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEarlyStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context165.t0;_context165.next=4;return this.$.parentEvent;case 4:parentEvent=_context165.sent;if(!parentEvent){_context165.next=10;break;}_context165.next=8;return parentEvent.$.earlyStartDateConstraintIntervals;case 8:parentIntervals=_context165.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context165.abrupt("return",intervals);case 11:case"end":return _context165.stop();}}},calculateEarlyStartDateConstraintIntervals,this);})},{key:"calculateEarlyEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateEarlyEndDateConstraintIntervals$(_context166){while(1){switch(_context166.prev=_context166.next){case 0:return _context166.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEarlyEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context166.t0;_context166.next=4;return this.$.parentEvent;case 4:parentEvent=_context166.sent;if(!parentEvent){_context166.next=10;break;}_context166.next=8;return parentEvent.$.earlyEndDateConstraintIntervals;case 8:parentIntervals=_context166.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context166.abrupt("return",intervals);case 11:case"end":return _context166.stop();}}},calculateEarlyEndDateConstraintIntervals,this);})},{key:"calculateLateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateLateStartDateConstraintIntervals$(_context167){while(1){switch(_context167.prev=_context167.next){case 0:return _context167.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateLateStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context167.t0;_context167.next=4;return this.$.parentEvent;case 4:parentEvent=_context167.sent;if(!parentEvent){_context167.next=10;break;}_context167.next=8;return parentEvent.$.lateStartDateConstraintIntervals;case 8:parentIntervals=_context167.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context167.abrupt("return",intervals);case 11:case"end":return _context167.stop();}}},calculateLateStartDateConstraintIntervals,this);})},{key:"calculateLateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateConstraintIntervals(){var intervals,parentEvent,parentIntervals;return regeneratorRuntime.wrap(function calculateLateEndDateConstraintIntervals$(_context168){while(1){switch(_context168.prev=_context168.next){case 0:return _context168.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateLateEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context168.t0;_context168.next=4;return this.$.parentEvent;case 4:parentEvent=_context168.sent;if(!parentEvent){_context168.next=10;break;}_context168.next=8;return parentEvent.$.lateEndDateConstraintIntervals;case 8:parentIntervals=_context168.sent;intervals.push.apply(intervals,parentIntervals);case 10:return _context168.abrupt("return",intervals);case 11:case"end":return _context168.stop();}}},calculateLateEndDateConstraintIntervals,this);})},{key:"calculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDate(proposedValue){var childEvents;return regeneratorRuntime.wrap(function calculateStartDate$(_context169){while(1){switch(_context169.prev=_context169.next){case 0:_context169.next=2;return this.$.childEvents;case 2:childEvents=_context169.sent;if(!(childEvents.size===0)){_context169.next=8;break;}return _context169.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateStartDate",this).call(this,proposedValue),"t0",5);case 5:return _context169.abrupt("return",_context169.t0);case 8:return _context169.delegateYield(this.calculateMinChildrenStartDate(),"t1",9);case 9:return _context169.abrupt("return",_context169.t1);case 10:case"end":return _context169.stop();}}},calculateStartDate,this);})},{key:"calculateEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDate(proposedValue){var childEvents;return regeneratorRuntime.wrap(function calculateEndDate$(_context170){while(1){switch(_context170.prev=_context170.next){case 0:_context170.next=2;return this.$.childEvents;case 2:childEvents=_context170.sent;if(!(childEvents.size===0)){_context170.next=8;break;}return _context170.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateEndDate",this).call(this,proposedValue),"t0",5);case 5:return _context170.abrupt("return",_context170.t0);case 8:return _context170.delegateYield(this.calculateMaxChildrenEndDate(),"t1",9);case 9:return _context170.abrupt("return",_context170.t1);case 10:case"end":return _context170.stop();}}},calculateEndDate,this);})},{key:"calculateDuration",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateDuration(proposedValue){var childEvents;return regeneratorRuntime.wrap(function calculateDuration$(_context171){while(1){switch(_context171.prev=_context171.next){case 0:_context171.next=2;return this.$.childEvents;case 2:childEvents=_context171.sent;return _context171.delegateYield(_get2(_getPrototypeOf2(HasChildren.prototype),"calculateDuration",this).call(this,childEvents.size===0?proposedValue:undefined),"t0",4);case 4:return _context171.abrupt("return",_context171.t0);case 5:case"end":return _context171.stop();}}},calculateDuration,this);})},{key:"calculateMinChildrenStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateMinChildrenStartDate(){var childEvents,childStartDates,_iteratorNormalCompletion86,_didIteratorError86,_iteratorError86,_iterator86,_step86,childEvent,timestamp;return regeneratorRuntime.wrap(function calculateMinChildrenStartDate$(_context172){while(1){switch(_context172.prev=_context172.next){case 0:_context172.next=2;return this.$.childEvents;case 2:childEvents=_context172.sent;childStartDates=[];_iteratorNormalCompletion86=true;_didIteratorError86=false;_iteratorError86=undefined;_context172.prev=7;_iterator86=childEvents[Symbol.iterator]();case 9:if(_iteratorNormalCompletion86=(_step86=_iterator86.next()).done){_context172.next=19;break;}childEvent=_step86.value;_context172.t0=childStartDates;_context172.next=14;return childEvent.$.startDate;case 14:_context172.t1=_context172.sent;_context172.t0.push.call(_context172.t0,_context172.t1);case 16:_iteratorNormalCompletion86=true;_context172.next=9;break;case 19:_context172.next=25;break;case 21:_context172.prev=21;_context172.t2=_context172["catch"](7);_didIteratorError86=true;_iteratorError86=_context172.t2;case 25:_context172.prev=25;_context172.prev=26;if(!_iteratorNormalCompletion86&&_iterator86.return!=null){_iterator86.return();}case 28:_context172.prev=28;if(!_didIteratorError86){_context172.next=31;break;}throw _iteratorError86;case 31:return _context172.finish(28);case 32:return _context172.finish(25);case 33:timestamp=childStartDates.reduce(function(acc,childStartDate){return childStartDate?Math.min(acc,childStartDate.getTime()):acc;},MAX_DATE.getTime());if(!(timestamp===MIN_DATE.getTime()||timestamp===MAX_DATE.getTime())){_context172.next=36;break;}return _context172.abrupt("return",null);case 36:return _context172.abrupt("return",new Date(timestamp));case 37:case"end":return _context172.stop();}}},calculateMinChildrenStartDate,this,[[7,21,25,33],[26,,28,32]]);})},{key:"calculateMaxChildrenEndDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateMaxChildrenEndDate(){var childEvents,childEndDates,_iteratorNormalCompletion87,_didIteratorError87,_iteratorError87,_iterator87,_step87,childEvent,timestamp;return regeneratorRuntime.wrap(function calculateMaxChildrenEndDate$(_context173){while(1){switch(_context173.prev=_context173.next){case 0:_context173.next=2;return this.$.childEvents;case 2:childEvents=_context173.sent;childEndDates=[];_iteratorNormalCompletion87=true;_didIteratorError87=false;_iteratorError87=undefined;_context173.prev=7;_iterator87=childEvents[Symbol.iterator]();case 9:if(_iteratorNormalCompletion87=(_step87=_iterator87.next()).done){_context173.next=19;break;}childEvent=_step87.value;_context173.t0=childEndDates;_context173.next=14;return childEvent.$.endDate;case 14:_context173.t1=_context173.sent;_context173.t0.push.call(_context173.t0,_context173.t1);case 16:_iteratorNormalCompletion87=true;_context173.next=9;break;case 19:_context173.next=25;break;case 21:_context173.prev=21;_context173.t2=_context173["catch"](7);_didIteratorError87=true;_iteratorError87=_context173.t2;case 25:_context173.prev=25;_context173.prev=26;if(!_iteratorNormalCompletion87&&_iterator87.return!=null){_iterator87.return();}case 28:_context173.prev=28;if(!_didIteratorError87){_context173.next=31;break;}throw _iteratorError87;case 31:return _context173.finish(28);case 32:return _context173.finish(25);case 33:timestamp=childEndDates.reduce(function(acc,childEndDate){return childEndDate?Math.max(acc,childEndDate.getTime()):acc;},MIN_DATE.getTime());if(!(timestamp===MIN_DATE.getTime()||timestamp===MAX_DATE.getTime())){_context173.next=36;break;}return _context173.abrupt("return",null);case 36:return _context173.abrupt("return",new Date(timestamp));case 37:case"end":return _context173.stop();}}},calculateMaxChildrenEndDate,this,[[7,21,25,33],[26,,28,32]]);})// this method is only used to calculated "initial" project start date only
},{key:"calculateInitialMinChildrenStartDateDeep",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateInitialMinChildrenStartDateDeep(){var childEvents,childStartDates,_iteratorNormalCompletion88,_didIteratorError88,_iteratorError88,_iterator88,_step88,childEvent,childInitialDate,timestamp;return regeneratorRuntime.wrap(function calculateInitialMinChildrenStartDateDeep$(_context174){while(1){switch(_context174.prev=_context174.next){case 0:_context174.next=2;return this.$.childEvents;case 2:childEvents=_context174.sent;if(childEvents.size){_context174.next=5;break;}return _context174.abrupt("return",this.startDate);case 5:childStartDates=[];_iteratorNormalCompletion88=true;_didIteratorError88=false;_iteratorError88=undefined;_context174.prev=9;_iterator88=childEvents[Symbol.iterator]();case 11:if(_iteratorNormalCompletion88=(_step88=_iterator88.next()).done){_context174.next=19;break;}childEvent=_step88.value;return _context174.delegateYield(childEvent.calculateInitialMinChildrenStartDateDeep(),"t0",14);case 14:childInitialDate=_context174.t0;childInitialDate&&childStartDates.push(childInitialDate);case 16:_iteratorNormalCompletion88=true;_context174.next=11;break;case 19:_context174.next=25;break;case 21:_context174.prev=21;_context174.t1=_context174["catch"](9);_didIteratorError88=true;_iteratorError88=_context174.t1;case 25:_context174.prev=25;_context174.prev=26;if(!_iteratorNormalCompletion88&&_iterator88.return!=null){_iterator88.return();}case 28:_context174.prev=28;if(!_didIteratorError88){_context174.next=31;break;}throw _iteratorError88;case 31:return _context174.finish(28);case 32:return _context174.finish(25);case 33:timestamp=childStartDates.reduce(function(acc,childStartDate){return Math.min(acc,childStartDate.getTime());},MAX_DATE.getTime());if(!(timestamp===MIN_DATE.getTime()||timestamp===MAX_DATE.getTime())){_context174.next=36;break;}return _context174.abrupt("return",null);case 36:return _context174.abrupt("return",new Date(timestamp));case 37:case"end":return _context174.stop();}}},calculateInitialMinChildrenStartDateDeep,this,[[9,21,25,33],[26,,28,32]]);})},{key:"parent",get:function get(){return this._parent;},set:function set(value){this._parent=value;this.$.parentEvent.put(value);}}]);return HasChildren;}(base);__decorate$7([reference({bucket:'childEvents'})],HasChildren.prototype,"parentEvent",void 0);__decorate$7([bucket()],HasChildren.prototype,"childEvents",void 0);return HasChildren;};var __decorate$8=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var HasDateConstraint=function HasDateConstraint(base){var HasDateConstraint=/*#__PURE__*/function(_base40){_inherits2(HasDateConstraint,_base40);function HasDateConstraint(){_classCallCheck2(this,HasDateConstraint);return _possibleConstructorReturn2(this,_getPrototypeOf2(HasDateConstraint).apply(this,arguments));}_createClass2(HasDateConstraint,[{key:"calculateConstraintType",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateConstraintType(proposedValue){var result,consistentValue;return regeneratorRuntime.wrap(function calculateConstraintType$(_context175){while(1){switch(_context175.prev=_context175.next){case 0:result=null;// use proposed constraint type if provided and is applicable to the event
_context175.t0=proposedValue!==undefined;if(!_context175.t0){_context175.next=5;break;}return _context175.delegateYield(this.isConstraintTypeApplicable(proposedValue),"t1",4);case 4:_context175.t0=_context175.t1;case 5:if(!_context175.t0){_context175.next=9;break;}result=proposedValue;// use consistent value otherwise (if it's applicable)
_context175.next=13;break;case 9:consistentValue=this.$.constraintType.getConsistentValue();// this check is probably no longer needed since all data now goes through the "proposed" stage
return _context175.delegateYield(this.isConstraintTypeApplicable(consistentValue),"t2",11);case 11:if(!_context175.t2){_context175.next=13;break;}result=consistentValue;case 13:return _context175.abrupt("return",result);case 14:case"end":return _context175.stop();}}},calculateConstraintType,this);})},{key:"getStartDatePinConstraintType",value:function getStartDatePinConstraintType(){// TODO: for BW projects this should return ConstraintType.StartNoLaterThan
return this.isTaskPinnableWithConstraint()&&ConstraintType.StartNoEarlierThan||null;}},{key:"getEndDatePinConstraintType",value:function getEndDatePinConstraintType(){// TODO: for BW projects this should return ConstraintType.FinishNoLaterThan
return this.isTaskPinnableWithConstraint()&&ConstraintType.FinishNoEarlierThan||null;}/**
         * Indicates if the task can be pinned with a constraint
         * to enforce its start/end date changes.
         * @private
         */},{key:"isTaskPinnableWithConstraint",value:function isTaskPinnableWithConstraint(){var result=false;// we should not pin manually scheduled tasks
if(!this.manuallyScheduled){var constraintType=this.constraintType;if(constraintType){switch(constraintType){case ConstraintType.StartNoEarlierThan:case ConstraintType.FinishNoEarlierThan:result=true;}// no constraints -> we can pin
}else{result=true;}}return result;}},{key:"setStartDate",value:function(){var _setStartDate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee58(date){var keepDuration,constrainType,_args176=arguments;return regeneratorRuntime.wrap(function _callee58$(_context176){while(1){switch(_context176.prev=_context176.next){case 0:keepDuration=_args176.length>1&&_args176[1]!==undefined?_args176[1]:true;// get constraint type that should be used to enforce start date or
// null if the change cannot be enforced (happens when the task is manually scheduled so no need for enforcement or
// some constraint is already set)
constrainType=this.getStartDatePinConstraintType();if(constrainType){this.$.constraintType.put(constrainType);this.$.constraintDate.put(date);}return _context176.abrupt("return",_get2(_getPrototypeOf2(HasDateConstraint.prototype),"setStartDate",this).call(this,date,keepDuration));case 4:case"end":return _context176.stop();}}},_callee58,this);}));function setStartDate(_x97){return _setStartDate2.apply(this,arguments);}return setStartDate;}()},{key:"setEndDate",value:function(){var _setEndDate2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee59(date){var keepDuration,constrainType,_args177=arguments;return regeneratorRuntime.wrap(function _callee59$(_context177){while(1){switch(_context177.prev=_context177.next){case 0:keepDuration=_args177.length>1&&_args177[1]!==undefined?_args177[1]:false;// if we move the event
if(keepDuration){// get constraint type that should be used to enforce end date or
// null if the change cannot be enforced (happens when the task is manually scheduled so no need for enforcement or
// some constraint is already set)
constrainType=this.getEndDatePinConstraintType();if(constrainType){this.$.constraintType.put(constrainType);this.$.constraintDate.put(date);}}return _context177.abrupt("return",_get2(_getPrototypeOf2(HasDateConstraint.prototype),"setEndDate",this).call(this,date,keepDuration));case 3:case"end":return _context177.stop();}}},_callee59,this);}));function setEndDate(_x98){return _setEndDate2.apply(this,arguments);}return setEndDate;}()},{key:"calculateConstraintDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateConstraintDate(proposedValue){var result,constraintType;return regeneratorRuntime.wrap(function calculateConstraintDate$(_context178){while(1){switch(_context178.prev=_context178.next){case 0:_context178.next=2;return this.$.constraintType;case 2:constraintType=_context178.sent;// use proposed constraint date if provided
if(proposedValue!==undefined){result=proposedValue;// if no constraint type -> reset constraint date
}else if(!constraintType){result=null;// fill constraint date based on constraint type provided
}else{result=this.getConstraintTypeDefaultDate(constraintType)||this.$.constraintDate.getConsistentValue();}return _context178.abrupt("return",result);case 5:case"end":return _context178.stop();}}},calculateConstraintDate,this);})/**
         * Returns default constraint date value for the constraint type provided
         * (either start or end date of the event).
         */},{key:"getConstraintTypeDefaultDate",value:function getConstraintTypeDefaultDate(constraintType){switch(constraintType){case ConstraintType.StartNoEarlierThan:case ConstraintType.StartNoLaterThan:case ConstraintType.MustStartOn:return this.startDate;case ConstraintType.FinishNoEarlierThan:case ConstraintType.FinishNoLaterThan:case ConstraintType.MustFinishOn:return this.endDate;}return null;}/**
         * Returns true if the provided constraint type is applicable to the event.
         *
         * @param {ConstraintType} constraintType Constraint type.
         * @returns `True` if the provided constraint type is applicable (`false` otherwise).
         */},{key:"isConstraintTypeApplicable",value:/*#__PURE__*/regeneratorRuntime.mark(function isConstraintTypeApplicable(constraintType){var childEvents,isSummary;return regeneratorRuntime.wrap(function isConstraintTypeApplicable$(_context179){while(1){switch(_context179.prev=_context179.next){case 0:_context179.next=2;return this.$.childEvents;case 2:childEvents=_context179.sent;// Take into account if the event is leaf
isSummary=childEvents.size>0;_context179.t0=constraintType;_context179.next=_context179.t0===ConstraintType.FinishNoEarlierThan?7:_context179.t0===ConstraintType.StartNoLaterThan?7:_context179.t0===ConstraintType.MustFinishOn?7:_context179.t0===ConstraintType.MustStartOn?7:8;break;case 7:return _context179.abrupt("return",!isSummary);case 8:return _context179.abrupt("return",true);case 9:case"end":return _context179.stop();}}},isConstraintTypeApplicable,this);})/**
         * Sets the constraint type (if applicable) and constraining date to the task.
         * @param {ConstraintType} constraintType Constraint type.
         * @param {Date}   constraintDate Constraint date.
         * @returns Promise<PropagationResult>
         */},{key:"setConstraint",value:function(){var _setConstraint=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee60(constraintType,constraintDate){return regeneratorRuntime.wrap(function _callee60$(_context180){while(1){switch(_context180.prev=_context180.next){case 0:this.$.constraintType.put(constraintType);if(constraintDate!==undefined){this.$.constraintDate.put(constraintDate);}return _context180.abrupt("return",this.propagate());case 3:case"end":return _context180.stop();}}},_callee60,this);}));function setConstraint(_x99,_x100){return _setConstraint.apply(this,arguments);}return setConstraint;}()},{key:"calculateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateConstraintIntervals(){var intervals,constraintType,constraintDate;return regeneratorRuntime.wrap(function calculateEndDateConstraintIntervals$(_context181){while(1){switch(_context181.prev=_context181.next){case 0:return _context181.delegateYield(_get2(_getPrototypeOf2(HasDateConstraint.prototype),"calculateEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context181.t0;_context181.next=4;return this.$.constraintType;case 4:constraintType=_context181.sent;if(!constraintType){_context181.next=19;break;}_context181.next=8;return this.$.constraintDate;case 8:constraintDate=_context181.sent;if(!constraintDate){_context181.next=19;break;}_context181.t1=constraintType;_context181.next=_context181.t1===ConstraintType.MustFinishOn?13:_context181.t1===ConstraintType.FinishNoEarlierThan?15:_context181.t1===ConstraintType.FinishNoLaterThan?17:19;break;case 13:intervals.unshift(ConstraintInterval.new({startDate:constraintDate,endDate:constraintDate,originDescription:'"Must Finish On" constraint'}));return _context181.abrupt("break",19);case 15:intervals.unshift(ConstraintInterval.new({startDate:constraintDate,originDescription:'"Finish No Ealier Than" constraint'}));return _context181.abrupt("break",19);case 17:intervals.unshift(ConstraintInterval.new({endDate:constraintDate,originDescription:'"Finish No Ealier Than" constraint'}));return _context181.abrupt("break",19);case 19:return _context181.abrupt("return",intervals);case 20:case"end":return _context181.stop();}}},calculateEndDateConstraintIntervals,this);})},{key:"calculateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateConstraintIntervals(){var intervals,constraintType,constraintDate;return regeneratorRuntime.wrap(function calculateStartDateConstraintIntervals$(_context182){while(1){switch(_context182.prev=_context182.next){case 0:return _context182.delegateYield(_get2(_getPrototypeOf2(HasDateConstraint.prototype),"calculateStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context182.t0;_context182.next=4;return this.$.constraintType;case 4:constraintType=_context182.sent;if(!constraintType){_context182.next=19;break;}_context182.next=8;return this.$.constraintDate;case 8:constraintDate=_context182.sent;if(!constraintDate){_context182.next=19;break;}_context182.t1=constraintType;_context182.next=_context182.t1===ConstraintType.MustStartOn?13:_context182.t1===ConstraintType.StartNoEarlierThan?15:_context182.t1===ConstraintType.StartNoLaterThan?17:19;break;case 13:intervals.unshift(ConstraintInterval.new({startDate:constraintDate,endDate:constraintDate,originDescription:'"Must Start On" constraint'}));return _context182.abrupt("break",19);case 15:intervals.unshift(ConstraintInterval.new({startDate:constraintDate,originDescription:'"Start No Ealier Than" constraint'}));return _context182.abrupt("break",19);case 17:intervals.unshift(ConstraintInterval.new({endDate:constraintDate,originDescription:'"Start No Later Than" constraint'}));return _context182.abrupt("break",19);case 19:return _context182.abrupt("return",intervals);case 20:case"end":return _context182.stop();}}},calculateStartDateConstraintIntervals,this);})}]);return HasDateConstraint;}(base);__decorate$8([model_field({type:'string'})],HasDateConstraint.prototype,"constraintType",void 0);__decorate$8([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},{converter:dateConverter})],HasDateConstraint.prototype,"constraintDate",void 0);__decorate$8([calculate('constraintType')],HasDateConstraint.prototype,"calculateConstraintType",null);__decorate$8([calculate('constraintDate')],HasDateConstraint.prototype,"calculateConstraintDate",null);return HasDateConstraint;};var __decorate$9=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};//---------------------------------------------------------------------------------------------------------------------
var HasDependencies=function HasDependencies(base){var HasDependencies=/*#__PURE__*/function(_base41){_inherits2(HasDependencies,_base41);function HasDependencies(){_classCallCheck2(this,HasDependencies);return _possibleConstructorReturn2(this,_getPrototypeOf2(HasDependencies).apply(this,arguments));}_createClass2(HasDependencies,[{key:"calculateEarlyStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateConstraintIntervals(){var intervals,dependency,_iteratorNormalCompletion89,_didIteratorError89,_iteratorError89,_iterator89,_step89,fromEvent,interval,fromEventEndDate,lag,lagUnit,calendar,fromEventStartDate,_lag,_lagUnit,_calendar3;return regeneratorRuntime.wrap(function calculateEarlyStartDateConstraintIntervals$(_context183){while(1){switch(_context183.prev=_context183.next){case 0:return _context183.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateEarlyStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context183.t0;_iteratorNormalCompletion89=true;_didIteratorError89=false;_iteratorError89=undefined;_context183.prev=5;_context183.next=8;return this.$.incomingDeps;case 8:_context183.t1=Symbol.iterator;_iterator89=_context183.sent[_context183.t1]();case 10:if(_iteratorNormalCompletion89=(_step89=_iterator89.next()).done){_context183.next=55;break;}dependency=_step89.value;_context183.next=14;return dependency.$.fromEvent;case 14:fromEvent=_context183.sent;if(!(fromEvent==null||isAtomicValue(fromEvent))){_context183.next=17;break;}return _context183.abrupt("continue",52);case 17:interval=void 0;_context183.t2=dependency.type;_context183.next=_context183.t2===DependencyType.EndToStart?21:_context183.t2===DependencyType.StartToStart?36:51;break;case 21:_context183.next=23;return fromEvent.$.earlyEndDateRaw;case 23:fromEventEndDate=_context183.sent;if(!fromEventEndDate){_context183.next=35;break;}_context183.next=27;return dependency.$.lag;case 27:lag=_context183.sent;_context183.next=30;return dependency.$.lagUnit;case 30:lagUnit=_context183.sent;_context183.next=33;return dependency.$.calendar;case 33:calendar=_context183.sent;interval=ConstraintInterval.new({startDate:calendar.calculateEndDate(fromEventEndDate,lag,lagUnit),endDate:null,originDescription:"\"end to start\" dependency from task ".concat(fromEvent),onRemoveAction:this.getOnRemoveAction(dependency)});case 35:return _context183.abrupt("break",51);case 36:_context183.next=38;return fromEvent.$.earlyStartDateRaw;case 38:fromEventStartDate=_context183.sent;if(!fromEventStartDate){_context183.next=50;break;}_context183.next=42;return dependency.$.lag;case 42:_lag=_context183.sent;_context183.next=45;return dependency.$.lagUnit;case 45:_lagUnit=_context183.sent;_context183.next=48;return dependency.$.calendar;case 48:_calendar3=_context183.sent;interval=ConstraintInterval.new({startDate:_calendar3.calculateEndDate(fromEventStartDate,_lag,_lagUnit),endDate:null,originDescription:"\"start to start\" dependency from task ".concat(fromEvent),onRemoveAction:this.getOnRemoveAction(dependency)});case 50:return _context183.abrupt("break",51);case 51:interval&&intervals.unshift(interval);case 52:_iteratorNormalCompletion89=true;_context183.next=10;break;case 55:_context183.next=61;break;case 57:_context183.prev=57;_context183.t3=_context183["catch"](5);_didIteratorError89=true;_iteratorError89=_context183.t3;case 61:_context183.prev=61;_context183.prev=62;if(!_iteratorNormalCompletion89&&_iterator89.return!=null){_iterator89.return();}case 64:_context183.prev=64;if(!_didIteratorError89){_context183.next=67;break;}throw _iteratorError89;case 67:return _context183.finish(64);case 68:return _context183.finish(61);case 69:return _context183.abrupt("return",intervals);case 70:case"end":return _context183.stop();}}},calculateEarlyStartDateConstraintIntervals,this,[[5,57,61,69],[62,,64,68]]);})},{key:"calculateEarlyEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateConstraintIntervals(){var intervals,dependency,_iteratorNormalCompletion90,_didIteratorError90,_iteratorError90,_iterator90,_step90,fromEvent,interval,fromEventEndDate,lag,lagUnit,calendar,fromEventStartDate,_lag2,_lagUnit2,_calendar4;return regeneratorRuntime.wrap(function calculateEarlyEndDateConstraintIntervals$(_context184){while(1){switch(_context184.prev=_context184.next){case 0:return _context184.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateEarlyEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context184.t0;_iteratorNormalCompletion90=true;_didIteratorError90=false;_iteratorError90=undefined;_context184.prev=5;_context184.next=8;return this.$.incomingDeps;case 8:_context184.t1=Symbol.iterator;_iterator90=_context184.sent[_context184.t1]();case 10:if(_iteratorNormalCompletion90=(_step90=_iterator90.next()).done){_context184.next=55;break;}dependency=_step90.value;_context184.next=14;return dependency.$.fromEvent;case 14:fromEvent=_context184.sent;if(!(fromEvent==null||isAtomicValue(fromEvent))){_context184.next=17;break;}return _context184.abrupt("continue",52);case 17:interval=void 0;_context184.t2=dependency.type;_context184.next=_context184.t2===DependencyType.EndToEnd?21:_context184.t2===DependencyType.StartToEnd?36:51;break;case 21:_context184.next=23;return fromEvent.$.earlyEndDateRaw;case 23:fromEventEndDate=_context184.sent;if(!fromEventEndDate){_context184.next=35;break;}_context184.next=27;return dependency.$.lag;case 27:lag=_context184.sent;_context184.next=30;return dependency.$.lagUnit;case 30:lagUnit=_context184.sent;_context184.next=33;return dependency.$.calendar;case 33:calendar=_context184.sent;interval=ConstraintInterval.new({startDate:calendar.calculateEndDate(fromEventEndDate,lag,lagUnit),endDate:null,originDescription:"\"end to end\" dependency from task ".concat(fromEvent),onRemoveAction:this.getOnRemoveAction(dependency)});case 35:return _context184.abrupt("break",51);case 36:_context184.next=38;return fromEvent.$.earlyStartDateRaw;case 38:fromEventStartDate=_context184.sent;if(!fromEventStartDate){_context184.next=50;break;}_context184.next=42;return dependency.$.lag;case 42:_lag2=_context184.sent;_context184.next=45;return dependency.$.lagUnit;case 45:_lagUnit2=_context184.sent;_context184.next=48;return dependency.$.calendar;case 48:_calendar4=_context184.sent;interval=ConstraintInterval.new({startDate:_calendar4.calculateEndDate(fromEventStartDate,_lag2,_lagUnit2),endDate:null,originDescription:"\"start to end\" dependency from task ".concat(fromEvent),onRemoveAction:this.getOnRemoveAction(dependency)});case 50:return _context184.abrupt("break",51);case 51:interval&&intervals.unshift(interval);case 52:_iteratorNormalCompletion90=true;_context184.next=10;break;case 55:_context184.next=61;break;case 57:_context184.prev=57;_context184.t3=_context184["catch"](5);_didIteratorError90=true;_iteratorError90=_context184.t3;case 61:_context184.prev=61;_context184.prev=62;if(!_iteratorNormalCompletion90&&_iterator90.return!=null){_iterator90.return();}case 64:_context184.prev=64;if(!_didIteratorError90){_context184.next=67;break;}throw _iteratorError90;case 67:return _context184.finish(64);case 68:return _context184.finish(61);case 69:return _context184.abrupt("return",intervals);case 70:case"end":return _context184.stop();}}},calculateEarlyEndDateConstraintIntervals,this,[[5,57,61,69],[62,,64,68]]);})},{key:"calculateLateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateConstraintIntervals(){var intervals,dependency,_iteratorNormalCompletion91,_didIteratorError91,_iteratorError91,_iterator91,_step91,successor,interval,successorStartDate,lag,lagUnit,calendar,successorEndDate,_lag3,_lagUnit3,_calendar5;return regeneratorRuntime.wrap(function calculateLateStartDateConstraintIntervals$(_context185){while(1){switch(_context185.prev=_context185.next){case 0:return _context185.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateLateStartDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context185.t0;_iteratorNormalCompletion91=true;_didIteratorError91=false;_iteratorError91=undefined;_context185.prev=5;_context185.next=8;return this.$.outgoingDeps;case 8:_context185.t1=Symbol.iterator;_iterator91=_context185.sent[_context185.t1]();case 10:if(_iteratorNormalCompletion91=(_step91=_iterator91.next()).done){_context185.next=55;break;}dependency=_step91.value;_context185.next=14;return dependency.$.toEvent;case 14:successor=_context185.sent;if(!(successor==null||isAtomicValue(successor))){_context185.next=17;break;}return _context185.abrupt("continue",52);case 17:interval=void 0;_context185.t2=dependency.type;_context185.next=_context185.t2===DependencyType.StartToStart?21:_context185.t2===DependencyType.StartToEnd?36:51;break;case 21:_context185.next=23;return successor.$.lateStartDateRaw;case 23:successorStartDate=_context185.sent;if(!successorStartDate){_context185.next=35;break;}_context185.next=27;return dependency.$.lag;case 27:lag=_context185.sent;_context185.next=30;return dependency.$.lagUnit;case 30:lagUnit=_context185.sent;_context185.next=33;return dependency.$.calendar;case 33:calendar=_context185.sent;interval=ConstraintInterval.new({startDate:null,endDate:calendar.calculateStartDate(successorStartDate,lag,lagUnit),originDescription:"\"start to start\" dependency to task ".concat(successor),onRemoveAction:this.getOnRemoveAction(dependency)});case 35:return _context185.abrupt("break",51);case 36:_context185.next=38;return successor.$.lateEndDateRaw;case 38:successorEndDate=_context185.sent;if(!successorEndDate){_context185.next=50;break;}_context185.next=42;return dependency.$.lag;case 42:_lag3=_context185.sent;_context185.next=45;return dependency.$.lagUnit;case 45:_lagUnit3=_context185.sent;_context185.next=48;return dependency.$.calendar;case 48:_calendar5=_context185.sent;interval=ConstraintInterval.new({startDate:null,endDate:_calendar5.calculateStartDate(successorEndDate,_lag3,_lagUnit3),originDescription:"\"start to end\" dependency to task ".concat(successor),onRemoveAction:this.getOnRemoveAction(dependency)});case 50:return _context185.abrupt("break",51);case 51:interval&&intervals.unshift(interval);case 52:_iteratorNormalCompletion91=true;_context185.next=10;break;case 55:_context185.next=61;break;case 57:_context185.prev=57;_context185.t3=_context185["catch"](5);_didIteratorError91=true;_iteratorError91=_context185.t3;case 61:_context185.prev=61;_context185.prev=62;if(!_iteratorNormalCompletion91&&_iterator91.return!=null){_iterator91.return();}case 64:_context185.prev=64;if(!_didIteratorError91){_context185.next=67;break;}throw _iteratorError91;case 67:return _context185.finish(64);case 68:return _context185.finish(61);case 69:return _context185.abrupt("return",intervals);case 70:case"end":return _context185.stop();}}},calculateLateStartDateConstraintIntervals,this,[[5,57,61,69],[62,,64,68]]);})},{key:"calculateLateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateConstraintIntervals(){var intervals,dependency,_iteratorNormalCompletion92,_didIteratorError92,_iteratorError92,_iterator92,_step92,successor,interval,successorEndDate,lag,lagUnit,calendar,successorStartDate,_lag4,_lagUnit4,_calendar6;return regeneratorRuntime.wrap(function calculateLateEndDateConstraintIntervals$(_context186){while(1){switch(_context186.prev=_context186.next){case 0:return _context186.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateLateEndDateConstraintIntervals",this).call(this),"t0",1);case 1:intervals=_context186.t0;_iteratorNormalCompletion92=true;_didIteratorError92=false;_iteratorError92=undefined;_context186.prev=5;_context186.next=8;return this.$.outgoingDeps;case 8:_context186.t1=Symbol.iterator;_iterator92=_context186.sent[_context186.t1]();case 10:if(_iteratorNormalCompletion92=(_step92=_iterator92.next()).done){_context186.next=55;break;}dependency=_step92.value;_context186.next=14;return dependency.$.toEvent;case 14:successor=_context186.sent;if(!(successor==null||isAtomicValue(successor))){_context186.next=17;break;}return _context186.abrupt("continue",52);case 17:interval=void 0;_context186.t2=dependency.type;_context186.next=_context186.t2===DependencyType.EndToEnd?21:_context186.t2===DependencyType.EndToStart?36:51;break;case 21:_context186.next=23;return successor.$.lateEndDateRaw;case 23:successorEndDate=_context186.sent;if(!successorEndDate){_context186.next=35;break;}_context186.next=27;return dependency.$.lag;case 27:lag=_context186.sent;_context186.next=30;return dependency.$.lagUnit;case 30:lagUnit=_context186.sent;_context186.next=33;return dependency.$.calendar;case 33:calendar=_context186.sent;interval=ConstraintInterval.new({startDate:null,endDate:calendar.calculateStartDate(successorEndDate,lag,lagUnit),originDescription:"\"end to end\" dependency to task ".concat(successor),onRemoveAction:this.getOnRemoveAction(dependency)});case 35:return _context186.abrupt("break",51);case 36:_context186.next=38;return successor.$.lateStartDateRaw;case 38:successorStartDate=_context186.sent;if(!successorStartDate){_context186.next=50;break;}_context186.next=42;return dependency.$.lag;case 42:_lag4=_context186.sent;_context186.next=45;return dependency.$.lagUnit;case 45:_lagUnit4=_context186.sent;_context186.next=48;return dependency.$.calendar;case 48:_calendar6=_context186.sent;interval=ConstraintInterval.new({startDate:null,endDate:_calendar6.calculateStartDate(successorStartDate,_lag4,_lagUnit4),originDescription:"\"end to start\" dependency to task ".concat(successor),onRemoveAction:this.getOnRemoveAction(dependency)});case 50:return _context186.abrupt("break",51);case 51:interval&&intervals.unshift(interval);case 52:_iteratorNormalCompletion92=true;_context186.next=10;break;case 55:_context186.next=61;break;case 57:_context186.prev=57;_context186.t3=_context186["catch"](5);_didIteratorError92=true;_iteratorError92=_context186.t3;case 61:_context186.prev=61;_context186.prev=62;if(!_iteratorNormalCompletion92&&_iterator92.return!=null){_iterator92.return();}case 64:_context186.prev=64;if(!_didIteratorError92){_context186.next=67;break;}throw _iteratorError92;case 67:return _context186.finish(64);case 68:return _context186.finish(61);case 69:return _context186.abrupt("return",intervals);case 70:case"end":return _context186.stop();}}},calculateLateEndDateConstraintIntervals,this,[[5,57,61,69],[62,,64,68]]);})// This is for conflict resolution
},{key:"getOnRemoveAction",value:function getOnRemoveAction(dependency){var _this133=this;return function(){_this133.getDependencyStore().remove(dependency);};}},{key:"setIncomingDeps",value:function(){var _setIncomingDeps=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee61(deps){var _this134=this;var dependencyStore;return regeneratorRuntime.wrap(function _callee61$(_context187){while(1){switch(_context187.prev=_context187.next){case 0:// predecessors
dependencyStore=this.getDependencyStore();this.incomingDeps.forEach(function(dependency){return dependencyStore.remove(dependency);});deps.forEach(function(dependency){dependency.toEvent=_this134;dependencyStore.add(dependency);});return _context187.abrupt("return",this.propagate());case 4:case"end":return _context187.stop();}}},_callee61,this);}));function setIncomingDeps(_x101){return _setIncomingDeps.apply(this,arguments);}return setIncomingDeps;}()},{key:"setOutgoingDeps",value:function(){var _setOutgoingDeps=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee62(deps){var _this135=this;var dependencyStore;return regeneratorRuntime.wrap(function _callee62$(_context188){while(1){switch(_context188.prev=_context188.next){case 0:// successors
dependencyStore=this.getDependencyStore();this.outgoingDeps.forEach(function(dependency){return dependencyStore.remove(dependency);});deps.forEach(function(dependency){dependency.fromEvent=_this135;dependencyStore.add(dependency);});return _context188.abrupt("return",this.propagate());case 4:case"end":return _context188.stop();}}},_callee62,this);}));function setOutgoingDeps(_x102){return _setOutgoingDeps.apply(this,arguments);}return setOutgoingDeps;}()},{key:"calculateLateStartDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateRaw(){var result,startDateInterval,endDateInterval,effectiveInterval;return regeneratorRuntime.wrap(function calculateLateStartDateRaw$(_context189){while(1){switch(_context189.prev=_context189.next){case 0:return _context189.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateLateStartDateRaw",this).call(this),"t0",1);case 1:result=_context189.t0;_context189.t1=intersectIntervals;_context189.next=5;return this.$.lateStartDateConstraintIntervals;case 5:_context189.t2=_context189.sent;startDateInterval=(0,_context189.t1)(_context189.t2);_context189.t3=intersectIntervals;_context189.next=10;return this.$.lateEndDateConstraintIntervals;case 10:_context189.t4=_context189.sent;endDateInterval=(0,_context189.t3)(_context189.t4);_context189.t5=intersectIntervals;_context189.t6=startDateInterval;_context189.t7=DateInterval;if(!endDateInterval.startDateIsFinite()){_context189.next=20;break;}return _context189.delegateYield(this.calculateProjectedStartDate(endDateInterval.startDate),"t9",17);case 17:_context189.t8=_context189.t9;_context189.next=21;break;case 20:_context189.t8=null;case 21:_context189.t10=_context189.t8;if(!endDateInterval.endDateIsFinite()){_context189.next=27;break;}return _context189.delegateYield(this.calculateProjectedStartDate(endDateInterval.endDate),"t12",24);case 24:_context189.t11=_context189.t12;_context189.next=28;break;case 27:_context189.t11=null;case 28:_context189.t13=_context189.t11;_context189.t14={startDate:_context189.t10,endDate:_context189.t13};_context189.t15=_context189.t7.new.call(_context189.t7,_context189.t14);_context189.t16=[_context189.t6,_context189.t15];effectiveInterval=(0,_context189.t5)(_context189.t16);if(effectiveInterval.endDateIsFinite()&&effectiveInterval.endDate&&(!result||result>effectiveInterval.endDate)){result=effectiveInterval.endDate;}return _context189.abrupt("return",result);case 35:case"end":return _context189.stop();}}},calculateLateStartDateRaw,this);})},{key:"calculateLateEndDateRaw",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateRaw(){var result,endDateInterval,startDateInterval,effectiveInterval;return regeneratorRuntime.wrap(function calculateLateEndDateRaw$(_context190){while(1){switch(_context190.prev=_context190.next){case 0:return _context190.delegateYield(_get2(_getPrototypeOf2(HasDependencies.prototype),"calculateLateEndDateRaw",this).call(this),"t0",1);case 1:result=_context190.t0;_context190.t1=intersectIntervals;_context190.next=5;return this.$.lateEndDateConstraintIntervals;case 5:_context190.t2=_context190.sent;endDateInterval=(0,_context190.t1)(_context190.t2);_context190.t3=intersectIntervals;_context190.next=10;return this.$.lateStartDateConstraintIntervals;case 10:_context190.t4=_context190.sent;startDateInterval=(0,_context190.t3)(_context190.t4);_context190.t5=intersectIntervals;_context190.t6=endDateInterval;_context190.t7=DateInterval;if(!startDateInterval.startDateIsFinite()){_context190.next=20;break;}return _context190.delegateYield(this.calculateProjectedEndDate(startDateInterval.startDate),"t9",17);case 17:_context190.t8=_context190.t9;_context190.next=21;break;case 20:_context190.t8=null;case 21:_context190.t10=_context190.t8;if(!startDateInterval.endDateIsFinite()){_context190.next=27;break;}return _context190.delegateYield(this.calculateProjectedEndDate(startDateInterval.endDate),"t12",24);case 24:_context190.t11=_context190.t12;_context190.next=28;break;case 27:_context190.t11=null;case 28:_context190.t13=_context190.t11;_context190.t14={startDate:_context190.t10,endDate:_context190.t13};_context190.t15=_context190.t7.new.call(_context190.t7,_context190.t14);_context190.t16=[_context190.t6,_context190.t15];effectiveInterval=(0,_context190.t5)(_context190.t16);if(effectiveInterval.endDateIsFinite()&&effectiveInterval.endDate&&(!result||result>effectiveInterval.endDate)){result=effectiveInterval.endDate;}return _context190.abrupt("return",result);case 35:case"end":return _context190.stop();}}},calculateLateEndDateRaw,this);})},{key:"leaveProject",value:function leaveProject(){var dependencyStore=this.getDependencyStore();this.incomingDeps.forEach(function(dependency){return dependencyStore.remove(dependency);});this.outgoingDeps.forEach(function(dependency){return dependencyStore.remove(dependency);});_get2(_getPrototypeOf2(HasDependencies.prototype),"leaveProject",this).call(this);}}]);return HasDependencies;}(base);__decorate$9([model_field()],HasDependencies.prototype,"dontRemoveMe",void 0);__decorate$9([generic_field({},ModelBucketField)],HasDependencies.prototype,"outgoingDeps",void 0);__decorate$9([generic_field({},ModelBucketField)],HasDependencies.prototype,"incomingDeps",void 0);__decorate$9([calculate('earlyStartDateConstraintIntervals')],HasDependencies.prototype,"calculateEarlyStartDateConstraintIntervals",null);__decorate$9([calculate('earlyEndDateConstraintIntervals')],HasDependencies.prototype,"calculateEarlyEndDateConstraintIntervals",null);__decorate$9([calculate('lateStartDateConstraintIntervals')],HasDependencies.prototype,"calculateLateStartDateConstraintIntervals",null);__decorate$9([calculate('lateEndDateConstraintIntervals')],HasDependencies.prototype,"calculateLateEndDateConstraintIntervals",null);return HasDependencies;};var __decorate$a=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};/* TODO
The percentdone logic calculation is a bit different from the Ext version, in regard of milestones
In Ext, the parent task with milestones only has 100% if all its child milestones have 100%, and 0% otherwise
In engine, the % for milestones is calculated just as average. There are other small nuances too.
Personally I think engine's behavior is more logical and we can change it to Ext version behavior
because we have all data.
*/var HasPercentDone=function HasPercentDone(base){var HasPercentDone=/*#__PURE__*/function(_base42){_inherits2(HasPercentDone,_base42);function HasPercentDone(){_classCallCheck2(this,HasPercentDone);return _possibleConstructorReturn2(this,_getPrototypeOf2(HasPercentDone).apply(this,arguments));}_createClass2(HasPercentDone,[{key:"calculatePercentDone",value:/*#__PURE__*/regeneratorRuntime.mark(function calculatePercentDone(proposedValue){var childEvents,project,autoCalculatePercentDoneForParentTasks,summaryData;return regeneratorRuntime.wrap(function calculatePercentDone$(_context191){while(1){switch(_context191.prev=_context191.next){case 0:_context191.next=2;return this.$.childEvents;case 2:childEvents=_context191.sent;project=this.getProject();_context191.next=6;return project.$.autoCalculatePercentDoneForParentTasks;case 6:autoCalculatePercentDoneForParentTasks=_context191.sent;if(!(childEvents.size&&autoCalculatePercentDoneForParentTasks)){_context191.next=18;break;}_context191.next=10;return this.$.percentDoneSummaryData;case 10:summaryData=_context191.sent;if(!(summaryData.totalDuration>0)){_context191.next=15;break;}return _context191.abrupt("return",summaryData.completedDuration/summaryData.totalDuration);case 15:return _context191.abrupt("return",summaryData.milestonesTotalPercentDone/summaryData.milestonesNum);case 16:_context191.next=21;break;case 18:if(!(proposedValue!==undefined)){_context191.next=20;break;}return _context191.abrupt("return",proposedValue);case 20:return _context191.abrupt("return",this.$.percentDone.value);case 21:case"end":return _context191.stop();}}},calculatePercentDone,this);})},{key:"calculatePercentDoneSummaryData",value:/*#__PURE__*/regeneratorRuntime.mark(function calculatePercentDoneSummaryData(){var childEvents,summary,_iteratorNormalCompletion93,_didIteratorError93,_iteratorError93,_iterator93,_step93,childEvent,childCompletedDuration,duration,durationInMs,percentDone;return regeneratorRuntime.wrap(function calculatePercentDoneSummaryData$(_context192){while(1){switch(_context192.prev=_context192.next){case 0:_context192.next=2;return this.$.childEvents;case 2:childEvents=_context192.sent;if(!childEvents.size){_context192.next=36;break;}summary={totalDuration:0,completedDuration:0,milestonesNum:0,milestonesTotalPercentDone:0};_iteratorNormalCompletion93=true;_didIteratorError93=false;_iteratorError93=undefined;_context192.prev=8;_iterator93=childEvents[Symbol.iterator]();case 10:if(_iteratorNormalCompletion93=(_step93=_iterator93.next()).done){_context192.next=19;break;}childEvent=_step93.value;_context192.next=14;return childEvent.$.percentDoneSummaryData;case 14:childCompletedDuration=_context192.sent;if(childCompletedDuration){summary.totalDuration+=childCompletedDuration.totalDuration;summary.completedDuration+=childCompletedDuration.completedDuration;summary.milestonesNum+=childCompletedDuration.milestonesNum;summary.milestonesTotalPercentDone+=childCompletedDuration.milestonesTotalPercentDone;}case 16:_iteratorNormalCompletion93=true;_context192.next=10;break;case 19:_context192.next=25;break;case 21:_context192.prev=21;_context192.t0=_context192["catch"](8);_didIteratorError93=true;_iteratorError93=_context192.t0;case 25:_context192.prev=25;_context192.prev=26;if(!_iteratorNormalCompletion93&&_iterator93.return!=null){_iterator93.return();}case 28:_context192.prev=28;if(!_didIteratorError93){_context192.next=31;break;}throw _iteratorError93;case 31:return _context192.finish(28);case 32:return _context192.finish(25);case 33:return _context192.abrupt("return",summary);case 36:_context192.next=38;return this.$.duration;case 38:duration=_context192.sent;if(!(typeof duration=='number')){_context192.next=54;break;}_context192.t1=this;_context192.t2=duration;_context192.next=44;return this.$.durationUnit;case 44:_context192.t3=_context192.sent;_context192.t4=TimeUnit.Millisecond;return _context192.delegateYield(_context192.t1.$convertDuration.call(_context192.t1,_context192.t2,_context192.t3,_context192.t4),"t5",47);case 47:durationInMs=_context192.t5;_context192.next=50;return this.$.percentDone;case 50:percentDone=_context192.sent;return _context192.abrupt("return",{totalDuration:durationInMs,completedDuration:durationInMs*percentDone,milestonesNum:durationInMs===0?1:0,milestonesTotalPercentDone:durationInMs===0?percentDone:0});case 54:return _context192.abrupt("return",null);case 55:case"end":return _context192.stop();}}},calculatePercentDoneSummaryData,this,[[8,21,25,33],[26,,28,32]]);})}]);return HasPercentDone;}(base);__decorate$a([model_field({type:'number',defaultValue:0})],HasPercentDone.prototype,"percentDone",void 0);__decorate$a([field()],HasPercentDone.prototype,"percentDoneSummaryData",void 0);__decorate$a([calculate('percentDone')],HasPercentDone.prototype,"calculatePercentDone",null);__decorate$a([calculate('percentDoneSummaryData')],HasPercentDone.prototype,"calculatePercentDoneSummaryData",null);return HasPercentDone;};/**
 * Function to build an event class for the Bryntum Gantt
 */var BuildBryntumEvent=function BuildBryntumEvent(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return HasDateConstraint(FixedUnits(FixedEffort(FixedDuration(HasAssignments(HasPercentDone(HasChildren(HasDependencies(ConstrainedEvent(EventMixin(HasCalendarMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(base)))))))))))))));};/**
 * The default class for event, used in Bryntum Gantt.
 *
 * It is configured from the following mixins, providing the maximum scheduling functionality:
 *
 * * [[HasDateConstraint]]
 * * [[FixedUnits]]
 * * [[FixedEffort]]
 * * [[FixedDuration]]
 * * [[HasAssignments]]
 * * [[HasChildren]]
 * * [[ConstrainedEvent]]
 * * [[EventMixin]]
 * * [[HasCalendarMixin]]
 */var BryntumEvent=/*#__PURE__*/function(_BuildBryntumEvent){_inherits2(BryntumEvent,_BuildBryntumEvent);function BryntumEvent(){_classCallCheck2(this,BryntumEvent);return _possibleConstructorReturn2(this,_getPrototypeOf2(BryntumEvent).apply(this,arguments));}return BryntumEvent;}(BuildBryntumEvent(Model));/**
 * @module Gantt/model/Baseline
 */ /**
 * This class represents a baseline of a Task.
 *
 * @extends Scheduler/model/TimeSpan
 */var Baseline=/*#__PURE__*/function(_TimeSpan3){_inherits2(Baseline,_TimeSpan3);function Baseline(){_classCallCheck2(this,Baseline);return _possibleConstructorReturn2(this,_getPrototypeOf2(Baseline).apply(this,arguments));}_createClass2(Baseline,[{key:"setMilestone",value:function(){var _setMilestone=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee63(value){return regeneratorRuntime.wrap(function _callee63$(_context193){while(1){switch(_context193.prev=_context193.next){case 0:return _context193.abrupt("return",value?this.convertToMilestone():this.convertToRegular());case 1:case"end":return _context193.stop();}}},_callee63,this);}));function setMilestone(_x103){return _setMilestone.apply(this,arguments);}return setMilestone;}()/**
     * Converts this baseline to a milestone (start date will match the end date).
     */},{key:"convertToMilestone",value:function(){var _convertToMilestone=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee64(){return regeneratorRuntime.wrap(function _callee64$(_context194){while(1){switch(_context194.prev=_context194.next){case 0:return _context194.abrupt("return",this.setDuration(0,this.durationUnit,false));case 1:case"end":return _context194.stop();}}},_callee64,this);}));function convertToMilestone(){return _convertToMilestone.apply(this,arguments);}return convertToMilestone;}()/**
     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).
     */},{key:"convertToRegular",value:function(){var _convertToRegular=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee65(){return regeneratorRuntime.wrap(function _callee65$(_context195){while(1){switch(_context195.prev=_context195.next){case 0:if(!this.milestone){_context195.next=2;break;}return _context195.abrupt("return",this.setDuration(1,this.durationUnit,false));case 2:case"end":return _context195.stop();}}},_callee65,this);}));function convertToRegular(){return _convertToRegular.apply(this,arguments);}return convertToRegular;}()//endregion
},{key:"isBaseline",//endregion
//region Init
//endregion
get:function get(){return true;}//region Milestone
},{key:"milestone",get:function get(){// a summary baseline may have zero duration when "recalculateParents" is on
// and a child baseline has working time on the summary baseline non-working time
// so we operate start and end date pair here
if(!this.leaf){var _startDate4=this.startDate,endDate=this.endDate;if(_startDate4&&endDate){return endDate.getTime()===_startDate4.getTime();}}return this.duration===0;},set:function set(value){value?this.convertToMilestone():this.convertToRegular();}}],[{key:"fields",//region Fields
// TODO: handle persist? defaultValue?
get:function get(){return[/**
             * The owning Task of the Baseline
             * @field {Gantt.model.TaskModel} task
             */{name:'task',persist:false/**
             * Start date of the baseline in ISO 8601 format
             * @field {string|Date} startDate
             */ /**
             * End date of the baseline in ISO 8601 format
             * @field {string|Date} endDate
             */ /**
             * An encapsulation of the CSS classes to be added to the rendered baseline element.
             * @field {Common.helper.util.DomClassList|String} cls
             *
             * This may be accessed as a string, but for granular control of adding and
             * removing individual classes, it is recommended to use the
             * {@link Common.helper.util.DomClassList DomClassList} API.
             */}];}}]);return Baseline;}(TimeSpan);exports.Baseline=Baseline;Baseline._$name='Baseline';/**
 * @module Gantt/model/TaskModel
 */ // A utility function to populate a Task's baseline with the Task's default values
var applyBaselineDefaults=function applyBaselineDefaults(task,baselines){var startDate=task.startDate,durationUnit=task.durationUnit,endDate=task.endDate;return baselines?baselines.map(function(baseline){return Object.assign({task:task,startDate:startDate,durationUnit:durationUnit,endDate:endDate},baseline);}):[];};/**
 * This class represents a task in your Gantt chart. Extend it to add your own custom task fields and methods.
 *
 * ## Subclassing the TaskModel class
 *
 * To subclass the TaskModel, please see the snippet below.
 *
 * ```javascript
 * class MyTaskModel extends TaskModel {
 *    static get fields() {
 *        return [
 *            { name: 'deadlineDate', type: 'date' }
 *        ]
 *    }
 *
 *    get calculateDeadline() {
 *        // TODO implement
 *    }
 * ```
 *
 * ## Creating a new Task programmatically
 *
 * To create a new task programmatically, simply call the TaskModel constructor and pass in any field values.
 *
 * ```javascript
 * var newTask = new TaskModel({
 *     name        : 'My awesome task',
 *     percentDone : 80, // So awesome it's almost done
 *     ...
 * });
 * ```
 *
 * ## Start and end dates
 *
 * For all tasks, the end date is non-inclusive: {@link #field-startDate} <= date < {@link #field-endDate}.
 * Example: a task which starts at 2020/07/18 and has 2 days duration, should have the end date: 2020/07/20, **not** 2018/07/19 23:59:59.
 * The start and end dates of tasks in are *points* on the time axis and if you specify that a task starts
 * 01/01/2020 and has 1 day duration, that means the start point is 01/01/2020 00:00 and end point is 02/01/2020 00:00.
 *
 *
 * @mixes Gantt/data/mixin/PartOfProject
 *
 * @extends Scheduler/model/TimeSpan
 */var TaskModel=/*#__PURE__*/function(_PartOfProject6){_inherits2(TaskModel,_PartOfProject6);function TaskModel(){_classCallCheck2(this,TaskModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskModel).apply(this,arguments));}_createClass2(TaskModel,[{key:"setBaseline",/**
     * Sets the data in the passed baseline index to the current state of this task.
     * @param {Number} index The index in the baselines list of the baseline to update.
     */value:function setBaseline(index){if(index>this.baselines.count+1){throw new Error("Attempt to set baseline ".concat(index," when there are only ").concat(this.baselines.count," baselines"));}// Allow adding by setBaseline(1) when there are zero.
if(index===this.baselines.count+1){return this.baselines.add(applyBaselineDefaults(this,[{}]));}this.baselines.getAt(index-1).set(applyBaselineDefaults(this,[{}])[0]);}},{key:"setMilestone",value:function(){var _setMilestone2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee66(value){return regeneratorRuntime.wrap(function _callee66$(_context196){while(1){switch(_context196.prev=_context196.next){case 0:return _context196.abrupt("return",value?this.convertToMilestone():this.convertToRegular());case 1:case"end":return _context196.stop();}}},_callee66,this);}));function setMilestone(_x104){return _setMilestone2.apply(this,arguments);}return setMilestone;}()/**
     * Converts this task to a milestone (start date will match the end date).
     * @propagating
     */},{key:"convertToMilestone",value:function(){var _convertToMilestone2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee67(){return regeneratorRuntime.wrap(function _callee67$(_context197){while(1){switch(_context197.prev=_context197.next){case 0:return _context197.abrupt("return",this.setDuration(0,this.durationUnit,false));case 1:case"end":return _context197.stop();}}},_callee67,this);}));function convertToMilestone(){return _convertToMilestone2.apply(this,arguments);}return convertToMilestone;}()/**
     * Converts the milestone task to a regular task with a duration of 1 (keeping current {@link #field-durationUnit}).
     * @propagating
     */},{key:"convertToRegular",value:function(){var _convertToRegular2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee68(){var me;return regeneratorRuntime.wrap(function _callee68$(_context198){while(1){switch(_context198.prev=_context198.next){case 0:me=this;if(!me.milestone){_context198.next=3;break;}return _context198.abrupt("return",me.setDuration(1,me.durationUnit,false));case 3:case"end":return _context198.stop();}}},_callee68,this);}));function convertToRegular(){return _convertToRegular2.apply(this,arguments);}return convertToRegular;}()//endregion
//region Dependencies
/**
     * Returns all dependencies of this task (both incoming and outgoing)
     *
     * @return {Gantt.model.DependencyModel[]}
     */},{key:"normalize",//endregion
/**
     * A `Set<Gantt.model.DependencyModel>` of the outgoing dependencies for this task
     * @property {Set}
     * @name outgoingDeps
     * @readonly
     */ /**
     * A `Set<Gantt.model.DependencyModel>` of the incoming dependencies for this task
     * @property {Set}
     * @name incomingDeps
     * @readonly
     */ /**
     * An array of the assignments, related to this task
     * @property {Gantt.model.AssignmentModel[]}
     * @name assignments
     * @readonly
     */ /**
     * If given resource is assigned to this task, returns a {@link Gantt.model.AssignmentModel} record.
     * Otherwise returns `null`
     *
     * @method
     * @name getAssignmentFor
     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}
     *
     * @return {Gantt.model.AssignmentModel|null}
     */ /**
     * This method assigns a resource to this task.
     *
     * Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name assign
     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}
     * @param {Number} [units=100] The `units` field of the new assignment
     *
     * @returns {Promise}
     * @propagating
     */ /**
     * This method unassigns a resource from this task.
     *
     * Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name unassign
     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}
     *
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name setCalendar
     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.
     * @returns {Promise}
     * @propagating
     */ /**
     * Returns a calendar of the task. If task has never been assigned a calendar the project's calendar will be returned.
     *
     * @method
     * @name getCalendar
     * @returns {Gantt.model.CalendarModel}
     */ /**
     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.
     *
     * @method
     * @name setStartDate
     * @param {Date} date The new start date.
     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.
     *
     * @method
     * @name setEndDate
     * @param {Date} date The new end date.
     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.
     * @returns {Promise}
     * @propagating
     */ /**
     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name setDuration
     * @param {Number} duration New duration value
     * @param {String} [unit] New duration unit
     * @returns {Promise}
     * @propagating
     */ /**
     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name setEffort
     * @param {Number} effort New effort value
     * @param {String} [unit] New effort unit
     * @returns {Promise}
     * @propagating
     */ /**
     * Sets the constraint type and (optionally) constraining date to the task.
     *
     * @method
     * @name setConstraint
     * @param {String} constraintType Constraint type, please refer to the {@link Gantt.model.TaskModel#field-constraintType} for the valid values.
     * @param {Date}   [constraintDate] Constraint date.
     * @returns {Promise}
     * @propagating
     */ //region Normalization
value:function normalize(){// Do nothing, normalization now happens as part of initial propagate and should use calendar anyway
}},{key:"inSetNormalize",value:function inSetNormalize(field){}// Do nothing, normalization now happens as part of initial propagate and should use calendar anyway
//endregion
},{key:"isTask",//endregion
//region Init
//endregion
get:function get(){return true;}/**
     * Propagates changes to the dependent tasks. For example:
     *
     * ```js
     * // double a task duration
     * task.duration *= 2;
     * // call propagate() to do further recalculations caused by the duration change
     * task.propagate().then(() => console.log('Schedule updated'));
     * ```
     *
     * @method
     * @name propagate
     * @param onEffect Function that should handle occurred propagation conflicts. For example:
     *
     * ```js
     * // trigger propagation and silently cancel changes in case of any conflict
     * project.propagate(() => EffectResolutionResult.Cancel);
     * ```
     * @returns {Promise}
     * @propagating
     */},{key:"hasBaselines",get:function get(){return this.baselinesStore&&this.baselinesStore.count||Boolean(this.originalData.baselines);}},{key:"baselines",get:function get(){if(!this.baselinesStore){this.baselinesStore=new Store({modelClass:Baseline,data:applyBaselineDefaults(this,this.originalData.baselines)});}return this.baselinesStore;}// TODO: drop and move to the engine, use outgoingDeps everywhere
},{key:"successors",get:function get(){return Array.from(this.outgoingDeps);},set:function set(successors){this.setOutgoingDeps(successors);}// TODO: drop and move to the engine, use outgoingDeps everywhere
},{key:"predecessors",get:function get(){return Array.from(this.incomingDeps);},set:function set(predecessors){this.setIncomingDeps(predecessors);}},{key:"renderedPercentDone",get:function get(){if(this.percentDone<=99){return Math.round(this.percentDone);}else{return Math.floor(this.percentDone);}}//region Is
},{key:"isDraggable",get:function get(){return this.draggable;}},{key:"isResizable",get:function get(){return this.resizable&&!this.milestone&&!this.isParent;}/**
     * Indicates if the task is started (its {@link #field-percentDone percent completion} is greater than zero).
     * @return {Boolean} `true` if the task is started.
     */},{key:"isStarted",get:function get(){return this.percentDone>0;}/**
     * Indicates if the task is complete (its {@link #field-percentDone percent completion} is 100% (or greater)).
     * @return {Boolean} `true` if the task is completed.
     */},{key:"isCompleted",get:function get(){return this.percentDone>=100;}/**
     * Indicates if the task is in progress (its {@link #field-percentDone percent completion} is greater than zero and less than 100%).
     * @return {Boolean} `true` if the task is in progress.
     */},{key:"isInProgress",get:function get(){return this.isStarted&&!this.isCompleted;}//endregion
//region Milestone
},{key:"milestone",get:function get(){//if (isBaseline) return this.isBaselineMilestone();
// a summary task may have zero duration when "recalculateParents" is on
// and a child task has working time on the summary task non-working time
// so we operate start and end date pair here
if(!this.leaf){var _startDate5=this.startDate,endDate=this.endDate;if(_startDate5&&endDate){return endDate.getTime()===_startDate5.getTime();}}return this.duration===0;},set:function set(value){value?this.convertToMilestone():this.convertToRegular();}},{key:"allDependencies",get:function get(){return[].concat(_toConsumableArray(this.predecessors||[]),_toConsumableArray(this.successors||[]));}/**
     * Returns all predecessor tasks of a task
     *
     * @return {Gantt.model.TaskModel[]}
     */},{key:"predecessorTasks",get:function get(){return this.predecessors.map(function(dependency){return dependency.fromEvent;});}/**
     * Returns all successor tasks of a task
     *
     * @return {Gantt.model.TaskModel[]}
     */},{key:"successorTasks",get:function get(){return this.successors.map(function(dependency){return dependency.toEvent;});}//endregion
//region Calculated fields
/**
      * Returns count of all sibling nodes (including their children).
      * @property {Number}
      */},{key:"previousSiblingsTotalCount",get:function get(){var task=this.previousSibling,count=this.parentIndex;while(task){count+=task.descendantCount;task=task.previousSibling;}return count;}/**
      * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the total dataset, regardless
      * of its nesting level and collapse/expand state of any parent tasks. The root node has a sequential number equal to 0.
      *
      * For example, in the following tree data sample sequential numbers are specified in the comments:
      *
      *        root : {
      *            children : [
      *                {   // 1
      *                    leaf : true
      *                },
      *                {       // 2
      *                    children : [
      *                        {   // 3
      *                            children : [
      *                                {   // 4
      *                                    leaf : true
      *                                },
      *                                {   // 5
      *                                    leaf : true
      *                                }
      *                            ]
      *                        }]
      *                },
      *                {   // 6
      *                    leaf : true
      *                }
      *            ]
      *        }
      *
      * If we will collapse some of the parent tasks, sequential number of collapsed tasks won't change.
      *
      * @property {Number}
      */},{key:"sequenceNumber",get:function get(){var code=0,task=this;// TODO: store keeps allIndex, children are added before parents which makes order wrong. if that is changed
// TODO: it can be used instead of calculating sequenceNumber
while(task.parent){code+=task.previousSiblingsTotalCount+1;task=task.parent;}return code;}//endregion
//region Project related methods
},{key:"isSubProject",get:function get(){return false;}// TODO: cache project
/**
     * Returns the { @ link Gantt.model.SubProjectModel project} instance, associated with this task if this task belongs to a project
     *
     * @private
     * @internal
     * @ return {Gantt.model.SubProjectModel|Null} project
     */},{key:"subProject",get:function get(){var me=this;var project=null;if(me.isProject){// TODO: implement is project
project=me;}else{me.bubbleWhile(function(t){if(t.isProject){project=t;}return!project;});}return project;}//endregion
/**
     * Property which encapsulates the effort's magnitude and units.
     *
     * @property {Object} fullEffort Object with two fields: `unit` and `magnitude`
     */},{key:"fullEffort",get:function get(){return{unit:this.effortUnit,magnitude:this.effort};},set:function set(effort){this.setEffort(effort.magnitude,effort.unit);}},{key:"fullDuration",get:function get(){return{unit:this.durationUnit,magnitude:this.duration};},set:function set(value){this.setDuration(value.magnitude,value.unit);}}],[{key:"fields",//region Fields
// TODO: handle persist? defaultValue?
get:function get(){return[/**
             * Unique identifier of task (mandatory)
             * @field {string|number} id
             */ /**
             * Name of the task
             * @field {string} name
             */ /**
             * Start date of the task in ISO 8601 format
             * @field {string|Date} startDate
             */ /**
             * End date of the task in ISO 8601 format
             * @field {string|Date} endDate
             */ /**
             * An encapsulation of the CSS classes to be added to the rendered event element.
             * @field {Common.helper.util.DomClassList|String} cls
             *
             * This may be accessed as a string, but for granular control of adding and
             * removing individual classes, it is recommended to use the
             * {@link Common.helper.util.DomClassList DomClassList} API.
             */{name:'cls',serialize:function serialize(value){return value.isDomClassList?value.toString():value;},persist:true},/**
             * The numeric part of the task effort (the number of units). The effort of the "parent" tasks will be automatically set to the sum
             * of efforts of their "child" tasks
             * @field {number} effort
             */ /**
             * The unit part of the task duration, defaults to "day" (days). Valid values are:
             *
             * - "millisecond" - Milliseconds
             * - "second" - Seconds
             * - "minute" - Minutes
             * - "hour" - Hours
             * - "day" - Days
             * - "week" - Weeks
             * - "month" - Months
             * - "quarter" - Quarters
             * - "year"- Years
             *
             * This field is readonly after creation, to change it use the {@link #function-setDuration} call.
             * @field {String} durationUnit
             * @default "day"
             */ /**
             * The unit part of the task's effort, defaults to "h" (hours). Valid values are:
             *
             * - "millisecond" - Milliseconds
             * - "second" - Seconds
             * - "minute" - Minutes
             * - "hour" - Hours
             * - "day" - Days
             * - "week" - Weeks
             * - "month" - Months
             * - "quarter" - Quarters
             * - "year"- Years
             *
             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.
             * @field {String} effortUnit
             * @default "hour"
             */{name:'fullEffort',persist:false},// NOT SUPPORTED YET
//
// /**
//  * The actual current effort (the number of `EffortUnit`s) that has been completed. This number is calculated based on `PercentDone`.
//  * @field {number} actualEffort
//  */
// { name : 'actualEffort', type : 'number', allowNull : true },
//
// /**
//  * The difference between the effort and its set baseline.
//  * @field {number} effortVariance
//  */
// { name : 'effortVariance', type : 'number', allowNull : true },
// EOF NOT SUPPORTED YET
/**
             * The calendar, assigned to the task. Allows you to set the time when task can be performed.
             *
             * All tasks by default are assigned to the project calendar, provided as the {@link Gantt.model.CalendarModel} option.
             *
             * @field {Gantt.model.CalendarModel} calendar
             */ /**
             * The getter will yield a {@link Common.data.Store Store} of {@link Gantt.model.Baseline}s.
             *
             * When constructing a task the baselines will be constructed from an array of
             * {@link Gantt.model.Baseline Baseline} data objects.
             * @field {Object[]} baselines
             */{name:'baselines'},/**
             * A freetext note about the task.
             * @field {string} note
             */{name:'note',type:'string'},/**
             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
             * @field {number} percentDone
             */{name:'percentDone',type:'number',defaultValue:0},{name:'parentId',serialize:function serialize(value,record){var eventStore=record.getEventStore(),project=record.getProject();// By default we send root level tasks "parentId" as NULL
if(eventStore&&eventStore.getById(value)===project){value=null;}return value;}},// /**
//  * Field for setting cost on a task. Can also act as a calculated field containing the total cost of the task. Cost = Actual Cost + Remaining Cost
//  * @field {number} cost
//  */
// { name : 'cost', type : 'number', allowNull : true },
//
// /**
//  * A calculated field containing the current cost of the task based on assignments and completion of the task.
//  * @field {number} actualCost
//  */
// { name : 'actualCost', type : 'number', allowNull : true },
//
// /**
//  * A field showing the difference between the cost and its set baseline.
//  * @field {number} costVariance
//  */
// { name : 'costVariance', type : 'number', allowNull : true },
/**
             * Field storing the task constraint alias or NULL if not constraint set.
             * Valid values are:
             * - "finishnoearlierthan"
             * - "finishnolaterthan"
             * - "mustfinishon"
             * - "muststarton"
             * - "startnoearlierthan"
             * - "startnolaterthan"
             *
             * @field {String} constraintType
             */ /**
             * Field defining the constraint boundary date, if applicable.
             * @field {Date} constraintDate
             */ /**
             * When set to `true`, the `startDate` of the task will not be changed by any of its incoming dependencies
             * or constraints.
             *
             * @field {boolean} manuallyScheduled
             */ /**
             * This field defines the scheduling mode for the task. Based on this field some fields of the task
             * will be "fixed" (should be provided by the user) and some - computed.
             *
             * Possible values are:
             *
             * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on information
             * about its start/end dates, task own calendar (project calendar if there's no one) and calendars of the assigned resources.
             *
             * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed dynamically,
             * based on the assigned resources information. Typical example of such task is - meeting. Meetings typically have
             * pre-defined start and end dates and the more people are participating in the meeting, the more effort is spent on the task.
             * When duration of such task increases, its effort is increased too (and vice-versa). Note: fixed start and end dates
             * here doesn't mean that a user can't update them via GUI, the only field which won't be editable in GUI is the {@link #field-effort effort field},
             * it will be calculated according to duration and resources assigned to the task.
             *
             * - `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be assigned
             * to this task, the less the duration will be. The typical example will be a "paint the walls" task -
             * several painters will complete it faster.
             *
             * - `FixedUnits` mode means, that the assignment level of all assigned resources
             * will be kept as provided by the user, and either {@link #field-effort} or duration of the task is recalculated,
             * based on the {@link #field-effortDriven} flag.
             *
             * @field {string} schedulingMode
             */ /**
             * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.
             * If it is `true`, then {@link #field-effort} is kept intact, and duration is updated. If it is `false` - vice-versa.
             *
             * @field {Boolean} effortDriven
             * @default false
             */ /**
             * A calculated field storing the _early start date_ of the task.
             * The _early start date_ is the earliest possible date the task can start.
             * This value is calculated based on the earliest dates of the task predecessors and the task own constraints.
             * If the task has no predecessors nor other constraints, its early start date matches the project start date.
             * @field {Date} earlyStartDate
             * @calculated
             */ /**
             * A calculated field storing the _early end date_ of the task.
             * The _early end date_ is the earliest possible date the task can finish.
             * This value is calculated based on the earliest dates of the task predecessors and the task own constraints.
             * If the task has no predecessors nor other constraints, its early end date matches the project start date plus the task duration.
             * @field {Date} earlyEndDate
             * @calculated
             */ /**
             * A calculated field storing the _late start date_ of the task.
             * The _late start date_ is the latest possible date the task can start.
             * This value is calculated based on the latest dates of the task successors and the task own constraints.
             * If the task has no successors nor other constraints, its late start date matches the project end date minus the task duration.
             * @field {Date} lateStartDate
             * @calculated
             */ /**
             * A calculated field storing the _late end date_ of the task.
             * The _late end date_ is the latest possible date the task can finish.
             * This value is calculated based on the latest dates of the task successors and the task own constraints.
             * If the task has no successors nor other constraints, its late end date matches the project end date.
             * @field {Date} lateEndDate
             * @calculated
             */ /**
             * A calculated field storing the _total slack_ (or _total float_) of the task.
             * The _total slack_ is the amount of working time the task can be delayed without causing a delay
             * to the project end.
             * The value is expressed in {@link #field-slackUnit} units.
             *
             * ```javascript
             * // let output slack info to the console
             * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)
             * ```
             *
             * @field {Number} totalSlack
             * @calculated
             */ /**
             * A calculated field storing unit for the {@link #field-totalSlack} value.
             * @field {String} slackUnit
             * @default "day"
             */ /**
             * A calculated field indicating if the task is _critical_.
             * A task considered _critical_ if its delaying causes the project delay.
             * The field value is calculated based on {@link #field-totalSlack} field value.
             *
             * ```javascript
             * if (task.critical) {
             *     Toast.show(`The ${task.name} is critical!`);
             * }
             * ```
             *
             * @field {Boolean} critical
             * @calculated
             */ // /**
//  * The baseline start date of the task in the ISO 8601 format.
//  * @field {date} baselineStartDate
//  */
// { name : 'baselineStartDate', type : 'date', dateFormat : 'c' },
//
// /**
//  * The baseline end date of the task in the ISO 8601 format, **see "Start and End dates" section for important notes**
//  * @field {date} baselineEndDate
//  */
// { name : 'baselineEndDate', type : 'date', dateFormat : 'c' },
//
// /**
//  * The baseline status of a task, expressed as the percentage completed (integer from 0 to 100)
//  * @field {number} baselinePercentDone
//  */
// { name : 'baselinePercentDone', type : 'int', defaultValue : 0 },
//
// /**
//  * The task effort baseline (the number of `EffortUnit`s).
//  * @field {number} baselineEffort
//  */
// { name : 'baselineEffort', type : 'number', allowNull : true },
//
// /**
//  * The cost baseline for the task.
//  * @field {number} baselineCost
//  */
// { name : 'baselineCost', type : 'number', allowNull : true },
//
// /**
//  * 'true' to indicate that a task cannot be modified.
//  * @field {boolean} readOnly
//  * @field
//  */
// { name : 'readOnly', persist : false, type : 'boolen', defaultValue : false },
//
// /**
//  * Set this to 'true' if the task should rollup to its parent task.
//  * @field {boolean} rollup
//  */
// { name : 'rollup', type : 'boolean', defaultValue : false },
//
// {
//     name    : 'segments',
//     persist : true
//
//     // TODO: PORT convert & serialzie functions on fields - PUT IN SCHEDULER EVENT MODEL
//     // convert : function (value, record) {
//     //     return record.processSegmentsValue(value, record);
//     // },
//     //
//     // serialize : function (value) {
//     //     if (!value) return null;
//     //
//     //     return Ext.Array.map([].concat(value), function(segment) {
//     //         return segment.serialize();
//     //     });
//     // }
// },
// Two fields which specify the relations between "phantom" tasks when they are
// being sent to the server to be created (e.g. when you create a new task containing a new child task).
{name:'phantomId',type:'string'},{name:'phantomParentId',type:'string'},// /**
//  * A deadline date for this task
//  * @field {date} deadlineDate
//  */
// { name : 'deadlineDate', type : 'date', format : 'c' },
// Override TreeNode parentIndex to make it persistable
{name:'parentIndex',type:'int',persist:true},/**
             * CSS class specifying an icon to apply to the event
             * @field {String} iconCls
             */{name:'iconCls'},/**
             * Specify false to prevent the event from being dragged (if {@link Gantt/feature/TaskDrag} feature is used)
             * @field {Boolean} draggable
             * @default true
             */{name:'draggable',type:'boolean',persist:false,defaultValue:true},// true or false
/**
             * Specify false to prevent the task from being resized (if {@link Gantt/feature/TaskResize} feature is used). You can also
             * specify 'start' or 'end' to only allow resizing in one direction
             * @field {Boolean|String} resizable
             * @default true
             */{name:'resizable',persist:false,defaultValue:true},// true, false, 'start' or 'end'
/**
             * Set this to true if this task should be shown in the Timeline widget
             * @field {Boolean} showInTimeline
             */{name:'showInTimeline',defaultValue:false}];}//endregion
//region Config
},{key:"defaultConfig",get:function get(){return{/**
             * This configuration option allows you to control whether an empty parent task should be converted into a leaf. Note, that
             * it's not a new field, but a regular configuration property of this class.
             *
             * Usually you will want to enable/disable it for the whole class:
             *
             * ```javascript
             *  Ext.define('MyApp.model.Task', {
             *      extend                   : 'Gantt.model.Task',
             *      convertEmptyParentToLeaf : false
             *  })
             * ```
             * @config {Boolean} convertEmptyParentToLeaf
             */convertEmptyParentToLeaf:true// /**
//  * This configuration option enables auto-calculation of the effort value for the parent task. When this option is enabled,
//  * effort value of the parent tasks becomes not editable.
//  *
//  * Usually you will want to enable/disable it for the whole class:
//  *
//  * ```javascript
//  *  Ext.define('MyApp.model.Task', {
//  *      extend                           : 'Gantt.model.Task',
//  *      autoCalculateEffortForParentTask : false
//  *  })
//  * ```
//  * @config {Boolean} autoCalculateEffortForParentTask
//  */
// autoCalculateEffortForParentTask : true,
//
// /**
//  * This configuration option enables auto-calculation of the percent done value for the parent task. When this option is enabled,
//  * percent done value of the parent tasks becomes not editable.
//  *
//  * Usually you will want to enable/disable it for the whole class:
//  *
//  * ```javascript
//  *  Ext.define('MyApp.model.Task', {
//  *      extend                                : 'Gantt.model.Task',
//  *      autoCalculatePercentDoneForParentTask : false
//  *  })
//  * ```
//  * @config {Boolean} autoCalculatePercentDoneForParentTask
//  */
// autoCalculatePercentDoneForParentTask : true,
//
// /**
//  * This configuration option enables auto-calculation of the cost and actualcost value for the parent task. When this option is enabled,
//  * cost and actualcost of the parent tasks becomes not editable.
//  *
//  * Usually you will want to enable/disable it for the whole class:
//  *
//  * ```javascript
//  *   Ext.define('MyApp.model.Task', {
//  *      extend                         : 'Gantt.model.Task',
//  *      autoCalculateCostForParentTask : false
//  *   })
//  * ```
//  *
//  * @config {Boolean} autoCalculateCostForParentTask
//  */
// autoCalculateCostForParentTask : true,
//
// /**
//  * When set to `true` the values of `cost`, and `actual cost` fields are calculated automatically based on assigned resources cost.
//  * When set to `false` the manually set values will be used for the fields.
//  *
//  * @config {Boolean} autoCalculateCost
//  */
// autoCalculateCost : true,
};}}]);return TaskModel;}(PartOfProject(BuildBryntumEvent(TimeSpan)));exports.TaskModel=TaskModel;TaskModel._$name='TaskModel';var EventStoreMixin$1=function EventStoreMixin$1(base){var EventStoreMixin=/*#__PURE__*/function(_base43){_inherits2(EventStoreMixin,_base43);function EventStoreMixin(){_classCallCheck2(this,EventStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(EventStoreMixin).apply(this,arguments));}_createClass2(EventStoreMixin,[{key:"buildRootNode",value:function buildRootNode(){return this.getProject()||{};}}],[{key:"defaultConfig",get:function get(){return{tree:true,modelClass:BryntumEvent};}}]);return EventStoreMixin;}(base);return EventStoreMixin;};//export type EventStoreMixin = Mixin<typeof EventStoreMixin>
var BuildMinimalEventStore=function BuildMinimalEventStore(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Store;return EventStoreMixin$1(PartOfProjectStoreMixin(PartOfProjectGenericMixin(ChronoStoreMixin(base))));};var MinimalEventStore=/*#__PURE__*/function(_BuildMinimalEventSto){_inherits2(MinimalEventStore,_BuildMinimalEventSto);function MinimalEventStore(){_classCallCheck2(this,MinimalEventStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalEventStore).apply(this,arguments));}return MinimalEventStore;}(BuildMinimalEventStore());/**
 * @module Gantt/data/TaskStore
 */ /**
 * A class representing the tree of tasks in the gantt chart. An individual task is represented as an instance of the
 * {@link Gantt.model.TaskModel TaskModel} class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 *
 * @extends Common/data/AjaxStore
 * @mixes Scheduler/data/mixin/EventStoreMixin
 * @mixes Gantt/data/mixin/PartOfProject
 */var TaskStore=/*#__PURE__*/function(_PartOfProject7){_inherits2(TaskStore,_PartOfProject7);function TaskStore(){_classCallCheck2(this,TaskStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskStore).apply(this,arguments));}_createClass2(TaskStore,[{key:"updateIdMap",//endregion
// method just calls `super` - can be removed completely?
value:function updateIdMap(){// for mixins updateIdMap to work
_get2(_getPrototypeOf2(TaskStore.prototype),"updateIdMap",this).call(this);}// used during rendering
},{key:"getEvents",value:function getEvents(id){var task=this.getById(id);return task&&[task];}},{key:"getEventsForResource",value:function getEventsForResource(resourceId){var resource=this.resourceStore.getById(resourceId),assignments=resource&&resource.assignments||[];return _toConsumableArray(assignments).map(function(r){return r.event;});}},{key:"getResourcesForEvent",value:function getResourcesForEvent(task){return task.assignments.map(function(a){return a.resource;});}/**
     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.
     * @param {Number} index The index in the baselines list of the baseline to update.
     */},{key:"setBaseline",value:function setBaseline(index){var data=this.storage.values;this.forEach(function(task){return task.setBaseline(index);});this.trigger('refresh',{action:'batch',records:data,data:data});}}],[{key:"defaultConfig",//region Config
get:function get(){return{// /**
//  * The name of the property in a raw task data block which indicates the type of the task to be created from that raw data.
//  * This is used for heterogeneous trees containing both task and project models (the value is set on the `typeProperty` of the DataReader).
//  * For example, the data may look like this:
//  *
//  *      [{
//  *          // TaskType provided so Gantt.model.ProjectModel instance will be created for the node
//  *          TaskType    : 'Gantt.model.ProjectModel',
//  *          Name        : 'Main Project',
//  *          StartDate   : '2015-06-01',
//  *          Duration    : 100,
//  *          children    : [{
//  *              // since TaskType is omitted the store model will be used for the node
//  *              Name        : 'Task 1',
//  *              StartDate   : '2015-06-01',
//  *              Duration    : 10
//  *              children    : [{
//  *                  // since TaskType is omitted the store model will be used for the node
//  *                  Name        : 'Sub-task 1'
//  *                  StartDate   : '2015-06-01',
//  *                  Duration    : 10,
//  *                  leaf        : true
//  *              }]
//  *          }]
//  *      }]
//  *
//  * The values should correspond to a valid {@link Gantt.model.TaskModel Task} model class.
//  * @config {String} typeProperty
//  */
//            typeProperty : 'TaskType',
// /**
//  * true to batch sync request for 500ms allowing cascade operations, or any other task change with side effects to be batched into one sync call.
//  * @config {Boolean} batchSync
//  */
//           batchSync : true,
// /**
//  * A boolean flag indicating whether a change in some task should update its parent task.
//  * This option can be also specified as the configuration option for the gantt panel.
//  * @config {Boolean} recalculateParents
//  */
//           recalculateParents : true,
// /**
//  * A boolean flag indicating whether a task should be moved to the next earliest available time if it falls on non-working time,
//  * during move/resize/create operations.
//  * This option can be also specified as a configuration option for the Gantt panel.
//  * @config {Boolean} skipWeekendsDuringDragDrop
//  */
//           skipWeekendsDuringDragDrop : true,
// /**
//  * If you usually have deeply nested dependencies, it might be a good idea to add a small delay
//  * to allow the modified record to be refreshed in the UI right away and then handle the cascading
//  * @config {Number} cascadeDelay
//  */
//           cascadeDelay : 0,
// /**
//  * Set to `true` to move parent task together with its children, as a group. Set to `false`
//  * to move only parent task itself. Note, that to enable drag and drop for parent tasks, one need to use the
//  * {@link Gantt.view.Gantt#allowParentTaskMove} option.
//  * @config {Boolean} moveParentAsGroup
//  */
//           moveParentAsGroup : true,
// /**
//  * Set to `true` to process the dependencies from/to parent tasks as any other dependency.
//  * Set to `false` to ignore such dependencies and not cascade changes by them.
//  *
//  * Currently, support for dependencies from/to parent task is limited. Only the "start-to-end" and "start-to-start" dependencies
//  * are supported. Also, if some task has incoming dependency from usual task and parent task, sometimes the dependency from
//  * parent task can be ignored.
//  *
//  * Note, that when enabling this option requires the {@link Gantt.data.DependencyStore#strictDependencyValidation} to be set to `true` as well.
//  * Otherwise it will be possible to create indirect cyclic dependencies, which will cause an infinite recursion exception.
//  * @config {Boolean} enableDependenciesForParentTasks
//  */
//           enableDependenciesForParentTasks : true,
// /**
//  * Maximum number of days to search for calendars common availability.
//  * Used in various task calculations requiring to respect working time.
//  * In these cases the system tries to account working time as intersection of the assigned resource calendars and the task calendar.
//  * This config determines the range intersection will be searched in.
//  * For example in case of task end date calculation system will try to find calendars intersection between task start date
//  * and task start date plus `availabilitySearchLimit` days.
//  * @config {Number} availabilitySearchLimit
//  */
//            availabilitySearchLimit : 1825, //5*365
// /**
//  * Strategy to use to resolve cycles in dependent node sets.
//  * Possible values are:
//  *
//  *  - "none"
//  *  - "exception"
//  *  - "cut"
//  *
//  * Each value corresponds to a public function from {@link Gantt.data.linearizator.CycleResolvers}.
//  * @config {String} [cycleResolutionStrategy='cut']
//  */
//           cycleResolutionStrategy : 'cut',
// /**
//  * Flag defining whether to automatically normalize nodes by calculating
//  * derivative data fields.
//  * @config {Boolean} [autoNormalizeNodes=true]
//  */
//            autoNormalizeNodes : true,
// /**
//  * The _project start date_. When {@link #config-scheduleByConstraints} is enabled all tasks start at this date unless they are constrained by a dependency or a constraint.
//  * Please note that children of a {@link Gantt.model.ProjectModel project task} get the _project start date_ from the project task.
//  *
//  * FYI, The value can be provided as part of the server side response when using a {@link Gantt.data.CrudManager}. For details see [this guide](#!/guide/gantt_crud_manager-section-providing-the-project-start-date).
//  * @config {Date} projectStartDate
//  */
//          projectStartDate : null,
//          projectEndDate   : null,
//            cascading     : false,
//            isFillingRoot : false,
//            isSettingRoot : false,
// These cache objects store early/late dates indexed by task internalId-s.
// earlyDatesCache : null,
// lateDatesCache  : null,
//
// earlyDatesResetNotificationSuspended : 0,
// earlyDatesResetNotificationRequested : 0,
// lateDatesResetNotificationSuspended  : 0,
// lateDatesResetNotificationRequested  : 0,
//
// lastTotalTimeSpan : null,
//
// suspendAutoRecalculateParents : 0,
// suspendAutoCascade            : 0,
//
// currentCascadeBatch : null,
// batchCascadeLevel   : 0,
// /**
//  * A string, defining the calendar, that will be used when calculating the working time, skipped
//  * by the dependencies {@link Gantt.model.DependencyModel#function-setLag lag}. Default value is `project` meaning main project calendar is used.
//  * Other recognized values are: `source` - the calendar of dependency's source task is used, `target` - the calendar of target task.
//  * @config {String} dependenciesCalendar
//  */
//            dependenciesCalendar : 'project',
//            pendingDataUpdates : null,
// Counter for the number of store.load() calls. It's used to track nested calls.
//            tasksLoadStarted : 0,
// /**
//  * Enables warning a user when he makes a change that breaks an incoming dependency.
//  * This check works only when {@link #config-scheduleByConstraints} mode is enabled.
//  * This warning only shows up when the change breaks a _single_ dependency.
//  *
//  * In case multiple dependencies are broken the gantt will try to resolve automatically:
//  *
//  *  - if the task was shifted away from its predecessors - the gantt will pin the task with "Start-No-Earlier-Than" constraint
//  *  - if the task was shifted back from its predecessors - the task will be shifted forward to satisfy its incoming dependencies
//  * @config {Boolean} checkDependencyConstraint
//  */
//            checkDependencyConstraint : false,
// /**
//  * Enables a warning of a user about a potential conflict that might be caused
//  * by setting one of the following constraints ("Start No Later Than", "Finish No Later Than", "Must Start On", "Must Finish On") on a task that has incoming dependencies.
//  *
//  * This check works only when {@link #config-scheduleByConstraints} mode is enabled.
//  * @config {Boolean} checkPotentialConflictConstraint
//  */
//            checkPotentialConflictConstraint : false,
// /**
//  * Enables scheduling of the tasks based on their constraints (including ones inherited from corresponding parent tasks).
//  * If a task has no affecting constraints and dependencies it would start at the _project start date_.
//  * The _project start date_ value is taken either:
//  *
//  * - from the task's project node ({@link Gantt.model.ProjectModel} instance) if the task has it
//  * - or from the {@link #projectStartDate} option
//  * @config {Boolean} scheduleByConstraints
//  */
//            scheduleByConstraints : false,
// /**
//  * Sets the format the _project start date_ is returned in from the server when using a {@link Gantt.data.CrudManager CrudManager}.
//  * The format is any string supported by Ext.Date.parse method.
//  * @config {String} projectDateFormat
//  */
//            projectDateFormat : "c",
tree:true,modelClass:TaskModel,/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:200,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:300,storeId:'tasks'};}}]);return TaskStore;}(PartOfProject(BuildMinimalEventStore(EventStoreMixin(AjaxStore))));exports.TaskStore=TaskStore;TaskStore._$name='TaskStore';//---------------------------------------------------------------------------------------------------------------------
var Schema=/*#__PURE__*/function(_Base$7){_inherits2(Schema,_Base$7);function Schema(){var _this136;_classCallCheck2(this,Schema);_this136=_possibleConstructorReturn2(this,_getPrototypeOf2(Schema).apply(this,arguments));_this136.entities=new Map();return _this136;}_createClass2(Schema,[{key:"hasEntity",value:function hasEntity(name){return this.entities.has(name);}},{key:"getEntity",value:function getEntity(name){return this.entities.get(name);}},{key:"addEntity",value:function addEntity(entity){var name=entity.name;if(!name)throw new Error("Entity must have a name");if(this.hasEntity(name))throw new Error("Entity with name [".concat(String(name),"] already exists"));entity.schema=this;this.entities.set(name,entity);return entity;}},{key:"getEntityDecorator",value:function getEntityDecorator(){var _this137=this;// @ts-ignore : https://github.com/Microsoft/TypeScript/issues/29828
return function(target){var name=target.name;if(!name)throw new Error("Can't add entity - the target class has no name");var entity=ensureEntityOnPrototype(target.prototype);// entity possibly is already created by the field decorators, but in such case it should not have name
if(entity.name&&entity.name!=name)throw new Error("Invalid state");entity.name=name;_this137.addEntity(entity);return target;};}}]);return Schema;}(Base$1);/**
 * The code just copy/pasted from pre-built later.js file and made exported
 *
 * @private
 */ // @ts-ignore
var later=function(){// @ts-ignore
var later={// @ts-ignore
version:"1.2.0"// @ts-ignore
};// @ts-ignore
if(!Array.prototype.indexOf){// @ts-ignore
Array.prototype.indexOf=function(searchElement){// @ts-ignore
if(this==null){// @ts-ignore
throw new TypeError();// @ts-ignore
}// @ts-ignore
var t=Object(this);// @ts-ignore
var len=t.length>>>0;// @ts-ignore
if(len===0){// @ts-ignore
return-1;// @ts-ignore
}// @ts-ignore
var n=0;// @ts-ignore
if(arguments.length>1){// @ts-ignore
n=Number(arguments[1]);// @ts-ignore
if(n!=n){// @ts-ignore
n=0;// @ts-ignore
}else if(n!=0&&n!=Infinity&&n!=-Infinity){// @ts-ignore
n=(n>0||-1)*Math.floor(Math.abs(n));// @ts-ignore
}// @ts-ignore
}// @ts-ignore
if(n>=len){// @ts-ignore
return-1;// @ts-ignore
}// @ts-ignore
var k=n>=0?n:Math.max(len-Math.abs(n),0);// @ts-ignore
for(;k<len;k++){// @ts-ignore
if(k in t&&t[k]===searchElement){// @ts-ignore
return k;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return-1;// @ts-ignore
};// @ts-ignore
}// @ts-ignore
if(!String.prototype.trim){// @ts-ignore
String.prototype.trim=function(){// @ts-ignore
return this.replace(/^\s+|\s+$/g,"");// @ts-ignore
};// @ts-ignore
}// @ts-ignore
later.array={};// @ts-ignore
later.array.sort=function(arr,zeroIsLast){// @ts-ignore
arr.sort(function(a,b){// @ts-ignore
return+a-+b;// @ts-ignore
});// @ts-ignore
if(zeroIsLast&&arr[0]===0){// @ts-ignore
arr.push(arr.shift());// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.array.next=function(val,values,extent){// @ts-ignore
var cur,zeroIsLargest=extent[0]!==0,nextIdx=0;// @ts-ignore
for(var i=values.length-1;i>-1;--i){// @ts-ignore
cur=values[i];// @ts-ignore
if(cur===val){// @ts-ignore
return cur;// @ts-ignore
}// @ts-ignore
if(cur>val||cur===0&&zeroIsLargest&&extent[1]>val){// @ts-ignore
nextIdx=i;// @ts-ignore
continue;// @ts-ignore
}// @ts-ignore
break;// @ts-ignore
}// @ts-ignore
return values[nextIdx];// @ts-ignore
};// @ts-ignore
later.array.nextInvalid=function(val,values,extent){// @ts-ignore
var min=extent[0],max=extent[1],len=values.length,zeroVal=values[len-1]===0&&min!==0?max:0,next=val,i=values.indexOf(val),start=next;// @ts-ignore
while(next===(values[i]||zeroVal)){// @ts-ignore
next++;// @ts-ignore
if(next>max){// @ts-ignore
next=min;// @ts-ignore
}// @ts-ignore
i++;// @ts-ignore
if(i===len){// @ts-ignore
i=0;// @ts-ignore
}// @ts-ignore
if(next===start){// @ts-ignore
return undefined;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
};// @ts-ignore
later.array.prev=function(val,values,extent){// @ts-ignore
var cur,len=values.length,zeroIsLargest=extent[0]!==0,prevIdx=len-1;// @ts-ignore
for(var i=0;i<len;i++){// @ts-ignore
cur=values[i];// @ts-ignore
if(cur===val){// @ts-ignore
return cur;// @ts-ignore
}// @ts-ignore
if(cur<val||cur===0&&zeroIsLargest&&extent[1]<val){// @ts-ignore
prevIdx=i;// @ts-ignore
continue;// @ts-ignore
}// @ts-ignore
break;// @ts-ignore
}// @ts-ignore
return values[prevIdx];// @ts-ignore
};// @ts-ignore
later.array.prevInvalid=function(val,values,extent){// @ts-ignore
var min=extent[0],max=extent[1],len=values.length,zeroVal=values[len-1]===0&&min!==0?max:0,next=val,i=values.indexOf(val),start=next;// @ts-ignore
while(next===(values[i]||zeroVal)){// @ts-ignore
next--;// @ts-ignore
if(next<min){// @ts-ignore
next=max;// @ts-ignore
}// @ts-ignore
i--;// @ts-ignore
if(i===-1){// @ts-ignore
i=len-1;// @ts-ignore
}// @ts-ignore
if(next===start){// @ts-ignore
return undefined;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
};// @ts-ignore
later.day=later.D={// @ts-ignore
name:"day",// @ts-ignore
range:86400,// @ts-ignore
val:function val(d){// @ts-ignore
return d.D||(d.D=later.date.getDate.call(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.D.val(d)===(val||later.D.extent(d)[1]);// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
if(d.DExtent)return d.DExtent;// @ts-ignore
var month=later.M.val(d),max=later.DAYS_IN_MONTH[month-1];// @ts-ignore
if(month===2&&later.dy.extent(d)[1]===366){// @ts-ignore
max=max+1;// @ts-ignore
}// @ts-ignore
return d.DExtent=[1,max];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.DStart||(d.DStart=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.DEnd||(d.DEnd=later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>later.D.extent(d)[1]?1:val;// @ts-ignore
var month=later.date.nextRollover(d,val,later.D,later.M),DMax=later.D.extent(month)[1];// @ts-ignore
val=val>DMax?1:val||DMax;// @ts-ignore
return later.date.next(later.Y.val(month),later.M.val(month),val);// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
var month=later.date.prevRollover(d,val,later.D,later.M),DMax=later.D.extent(month)[1];// @ts-ignore
return later.date.prev(later.Y.val(month),later.M.val(month),val>DMax?DMax:val||DMax);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.dayOfWeekCount=later.dc={// @ts-ignore
name:"day of week count",// @ts-ignore
range:604800,// @ts-ignore
val:function val(d){// @ts-ignore
return d.dc||(d.dc=Math.floor((later.D.val(d)-1)/7)+1);// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.dc.val(d)===val||val===0&&later.D.val(d)>later.D.extent(d)[1]-7;// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
return d.dcExtent||(d.dcExtent=[1,Math.ceil(later.D.extent(d)[1]/7)]);// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.dcStart||(d.dcStart=later.date.next(later.Y.val(d),later.M.val(d),Math.max(1,(later.dc.val(d)-1)*7+1||1)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.dcEnd||(d.dcEnd=later.date.prev(later.Y.val(d),later.M.val(d),Math.min(later.dc.val(d)*7,later.D.extent(d)[1])));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>later.dc.extent(d)[1]?1:val;// @ts-ignore
var month=later.date.nextRollover(d,val,later.dc,later.M),dcMax=later.dc.extent(month)[1];// @ts-ignore
val=val>dcMax?1:val;// @ts-ignore
var next=later.date.next(later.Y.val(month),later.M.val(month),val===0?later.D.extent(month)[1]-6:1+7*(val-1));// @ts-ignore
if(next.getTime()<=d.getTime()){// @ts-ignore
month=later.M.next(d,later.M.val(d)+1);// @ts-ignore
return later.date.next(later.Y.val(month),later.M.val(month),val===0?later.D.extent(month)[1]-6:1+7*(val-1));// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
var month=later.date.prevRollover(d,val,later.dc,later.M),dcMax=later.dc.extent(month)[1];// @ts-ignore
val=val>dcMax?dcMax:val||dcMax;// @ts-ignore
return later.dc.end(later.date.prev(later.Y.val(month),later.M.val(month),1+7*(val-1)));// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.dayOfWeek=later.dw=later.d={// @ts-ignore
name:"day of week",// @ts-ignore
range:86400,// @ts-ignore
val:function val(d){// @ts-ignore
return d.dw||(d.dw=later.date.getDay.call(d)+1);// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.dw.val(d)===(val||7);// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[1,7];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return later.D.start(d);// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return later.D.end(d);// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>7?1:val||7;// @ts-ignore
return later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)+(val-later.dw.val(d))+(val<=later.dw.val(d)?7:0));// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
val=val>7?7:val||7;// @ts-ignore
return later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d)+(val-later.dw.val(d))+(val>=later.dw.val(d)?-7:0));// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.dayOfYear=later.dy={// @ts-ignore
name:"day of year",// @ts-ignore
range:86400,// @ts-ignore
val:function val(d){// @ts-ignore
return d.dy||(d.dy=Math.ceil(1+(later.D.start(d).getTime()-later.Y.start(d).getTime())/later.DAY));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.dy.val(d)===(val||later.dy.extent(d)[1]);// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
var year=later.Y.val(d);// @ts-ignore
return d.dyExtent||(d.dyExtent=[1,year%4?365:366]);// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return later.D.start(d);// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return later.D.end(d);// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>later.dy.extent(d)[1]?1:val;// @ts-ignore
var year=later.date.nextRollover(d,val,later.dy,later.Y),dyMax=later.dy.extent(year)[1];// @ts-ignore
val=val>dyMax?1:val||dyMax;// @ts-ignore
return later.date.next(later.Y.val(year),later.M.val(year),val);// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
var year=later.date.prevRollover(d,val,later.dy,later.Y),dyMax=later.dy.extent(year)[1];// @ts-ignore
val=val>dyMax?dyMax:val||dyMax;// @ts-ignore
return later.date.prev(later.Y.val(year),later.M.val(year),val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.hour=later.h={// @ts-ignore
name:"hour",// @ts-ignore
range:3600,// @ts-ignore
val:function val(d){// @ts-ignore
return d.h||(d.h=later.date.getHour.call(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.h.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[0,23];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.hStart||(d.hStart=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.hEnd||(d.hEnd=later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>23?0:val;// @ts-ignore
var next=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)+(val<=later.h.val(d)?1:0),val);// @ts-ignore
if(!later.date.isUTC&&next.getTime()<=d.getTime()){// @ts-ignore
next=later.date.next(later.Y.val(next),later.M.val(next),later.D.val(next),val+1);// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
val=val>23?23:val;// @ts-ignore
return later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d)+(val>=later.h.val(d)?-1:0),val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.minute=later.m={// @ts-ignore
name:"minute",// @ts-ignore
range:60,// @ts-ignore
val:function val(d){// @ts-ignore
return d.m||(d.m=later.date.getMin.call(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.m.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
return[0,59];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.mStart||(d.mStart=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d),later.m.val(d)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.mEnd||(d.mEnd=later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d),later.m.val(d)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
var m=later.m.val(d),s=later.s.val(d),inc=val>59?60-m:val<=m?60-m+val:val-m,next=new Date(d.getTime()+inc*later.MIN-s*later.SEC);// @ts-ignore
if(!later.date.isUTC&&next.getTime()<=d.getTime()){// @ts-ignore
next=new Date(d.getTime()+(inc+120)*later.MIN-s*later.SEC);// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
val=val>59?59:val;// @ts-ignore
return later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d)+(val>=later.m.val(d)?-1:0),val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.month=later.M={// @ts-ignore
name:"month",// @ts-ignore
range:2629740,// @ts-ignore
val:function val(d){// @ts-ignore
return d.M||(d.M=later.date.getMonth.call(d)+1);// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.M.val(d)===(val||12);// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[1,12];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.MStart||(d.MStart=later.date.next(later.Y.val(d),later.M.val(d)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.MEnd||(d.MEnd=later.date.prev(later.Y.val(d),later.M.val(d)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>12?1:val||12;// @ts-ignore
return later.date.next(later.Y.val(d)+(val>later.M.val(d)?0:1),val);// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
val=val>12?12:val||12;// @ts-ignore
return later.date.prev(later.Y.val(d)-(val>=later.M.val(d)?1:0),val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.second=later.s={// @ts-ignore
name:"second",// @ts-ignore
range:1,// @ts-ignore
val:function val(d){// @ts-ignore
return d.s||(d.s=later.date.getSec.call(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.s.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[0,59];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
var s=later.s.val(d),inc=val>59?60-s:val<=s?60-s+val:val-s,next=new Date(d.getTime()+inc*later.SEC);// @ts-ignore
if(!later.date.isUTC&&next.getTime()<=d.getTime()){// @ts-ignore
next=new Date(d.getTime()+(inc+7200)*later.SEC);// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val,cache){// @ts-ignore
val=val>59?59:val;// @ts-ignore
return later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d),later.h.val(d),later.m.val(d)+(val>=later.s.val(d)?-1:0),val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.time=later.t={// @ts-ignore
name:"time",// @ts-ignore
range:1,// @ts-ignore
val:function val(d){// @ts-ignore
return d.t||(d.t=later.h.val(d)*3600+later.m.val(d)*60+later.s.val(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.t.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[0,86399];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>86399?0:val;// @ts-ignore
var next=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)+(val<=later.t.val(d)?1:0),0,0,val);// @ts-ignore
if(!later.date.isUTC&&next.getTime()<d.getTime()){// @ts-ignore
next=later.date.next(later.Y.val(next),later.M.val(next),later.D.val(next),later.h.val(next),later.m.val(next),val+7200);// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
val=val>86399?86399:val;// @ts-ignore
return later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)+(val>=later.t.val(d)?-1:0),0,0,val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.weekOfMonth=later.wm={// @ts-ignore
name:"week of month",// @ts-ignore
range:604800,// @ts-ignore
val:function val(d){// @ts-ignore
return d.wm||(d.wm=(later.D.val(d)+(later.dw.val(later.M.start(d))-1)+(7-later.dw.val(d)))/7);// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.wm.val(d)===(val||later.wm.extent(d)[1]);// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
return d.wmExtent||(d.wmExtent=[1,(later.D.extent(d)[1]+(later.dw.val(later.M.start(d))-1)+(7-later.dw.val(later.M.end(d))))/7]);// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.wmStart||(d.wmStart=later.date.next(later.Y.val(d),later.M.val(d),Math.max(later.D.val(d)-later.dw.val(d)+1,1)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.wmEnd||(d.wmEnd=later.date.prev(later.Y.val(d),later.M.val(d),Math.min(later.D.val(d)+(7-later.dw.val(d)),later.D.extent(d)[1])));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>later.wm.extent(d)[1]?1:val;// @ts-ignore
var month=later.date.nextRollover(d,val,later.wm,later.M),wmMax=later.wm.extent(month)[1];// @ts-ignore
val=val>wmMax?1:val||wmMax;// @ts-ignore
return later.date.next(later.Y.val(month),later.M.val(month),Math.max(1,(val-1)*7-(later.dw.val(month)-2)));// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
var month=later.date.prevRollover(d,val,later.wm,later.M),wmMax=later.wm.extent(month)[1];// @ts-ignore
val=val>wmMax?wmMax:val||wmMax;// @ts-ignore
return later.wm.end(later.date.next(later.Y.val(month),later.M.val(month),Math.max(1,(val-1)*7-(later.dw.val(month)-2))));// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.weekOfYear=later.wy={// @ts-ignore
name:"week of year (ISO)",// @ts-ignore
range:604800,// @ts-ignore
val:function val(d){// @ts-ignore
if(d.wy)return d.wy;// @ts-ignore
var wThur=later.dw.next(later.wy.start(d),5),YThur=later.dw.next(later.Y.prev(wThur,later.Y.val(wThur)-1),5);// @ts-ignore
return d.wy=1+Math.ceil((wThur.getTime()-YThur.getTime())/later.WEEK);// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.wy.val(d)===(val||later.wy.extent(d)[1]);// @ts-ignore
},// @ts-ignore
extent:function extent(d){// @ts-ignore
if(d.wyExtent)return d.wyExtent;// @ts-ignore
var year=later.dw.next(later.wy.start(d),5),dwFirst=later.dw.val(later.Y.start(year)),dwLast=later.dw.val(later.Y.end(year));// @ts-ignore
return d.wyExtent=[1,dwFirst===5||dwLast===5?53:52];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.wyStart||(d.wyStart=later.date.next(later.Y.val(d),later.M.val(d),later.D.val(d)-(later.dw.val(d)>1?later.dw.val(d)-2:6)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.wyEnd||(d.wyEnd=later.date.prev(later.Y.val(d),later.M.val(d),later.D.val(d)+(later.dw.val(d)>1?8-later.dw.val(d):0)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
val=val>later.wy.extent(d)[1]?1:val;// @ts-ignore
var wyThur=later.dw.next(later.wy.start(d),5),year=later.date.nextRollover(wyThur,val,later.wy,later.Y);// @ts-ignore
if(later.wy.val(year)!==1){// @ts-ignore
year=later.dw.next(year,2);// @ts-ignore
}// @ts-ignore
var wyMax=later.wy.extent(year)[1],wyStart=later.wy.start(year);// @ts-ignore
val=val>wyMax?1:val||wyMax;// @ts-ignore
return later.date.next(later.Y.val(wyStart),later.M.val(wyStart),later.D.val(wyStart)+7*(val-1));// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
var wyThur=later.dw.next(later.wy.start(d),5),year=later.date.prevRollover(wyThur,val,later.wy,later.Y);// @ts-ignore
if(later.wy.val(year)!==1){// @ts-ignore
year=later.dw.next(year,2);// @ts-ignore
}// @ts-ignore
var wyMax=later.wy.extent(year)[1],wyEnd=later.wy.end(year);// @ts-ignore
val=val>wyMax?wyMax:val||wyMax;// @ts-ignore
return later.wy.end(later.date.next(later.Y.val(wyEnd),later.M.val(wyEnd),later.D.val(wyEnd)+7*(val-1)));// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.year=later.Y={// @ts-ignore
name:"year",// @ts-ignore
range:31556900,// @ts-ignore
val:function val(d){// @ts-ignore
return d.Y||(d.Y=later.date.getYear.call(d));// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.Y.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[1970,2099];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d.YStart||(d.YStart=later.date.next(later.Y.val(d)));// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d.YEnd||(d.YEnd=later.date.prev(later.Y.val(d)));// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
return val>later.Y.val(d)&&val<=later.Y.extent()[1]?later.date.next(val):later.NEVER;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
return val<later.Y.val(d)&&val>=later.Y.extent()[0]?later.date.prev(val):later.NEVER;// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.fullDate=later.fd={// @ts-ignore
name:"full date",// @ts-ignore
range:1,// @ts-ignore
val:function val(d){// @ts-ignore
return d.fd||(d.fd=d.getTime());// @ts-ignore
},// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return later.fd.val(d)===val;// @ts-ignore
},// @ts-ignore
extent:function extent(){// @ts-ignore
return[0,3250368e7];// @ts-ignore
},// @ts-ignore
start:function start(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
end:function end(d){// @ts-ignore
return d;// @ts-ignore
},// @ts-ignore
next:function next(d,val){// @ts-ignore
return later.fd.val(d)<val?new Date(val):later.NEVER;// @ts-ignore
},// @ts-ignore
prev:function prev(d,val){// @ts-ignore
return later.fd.val(d)>val?new Date(val):later.NEVER;// @ts-ignore
}// @ts-ignore
};// @ts-ignore
later.modifier={};// @ts-ignore
later.modifier.after=later.modifier.a=function(constraint,values){// @ts-ignore
var value=values[0];// @ts-ignore
return{// @ts-ignore
name:"after "+constraint.name,// @ts-ignore
range:(constraint.extent(new Date())[1]-value)*constraint.range,// @ts-ignore
val:constraint.val,// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return this.val(d)>=value;// @ts-ignore
},// @ts-ignore
extent:constraint.extent,// @ts-ignore
start:constraint.start,// @ts-ignore
end:constraint.end,// @ts-ignore
next:function next(startDate,val){// @ts-ignore
if(val!=value)val=constraint.extent(startDate)[0];// @ts-ignore
return constraint.next(startDate,val);// @ts-ignore
},// @ts-ignore
prev:function prev(startDate,val){// @ts-ignore
val=val===value?constraint.extent(startDate)[1]:value-1;// @ts-ignore
return constraint.prev(startDate,val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.modifier.before=later.modifier.b=function(constraint,values){// @ts-ignore
var value=values[values.length-1];// @ts-ignore
return{// @ts-ignore
name:"before "+constraint.name,// @ts-ignore
range:constraint.range*(value-1),// @ts-ignore
val:constraint.val,// @ts-ignore
isValid:function isValid(d,val){// @ts-ignore
return this.val(d)<value;// @ts-ignore
},// @ts-ignore
extent:constraint.extent,// @ts-ignore
start:constraint.start,// @ts-ignore
end:constraint.end,// @ts-ignore
next:function next(startDate,val){// @ts-ignore
val=val===value?constraint.extent(startDate)[0]:value;// @ts-ignore
return constraint.next(startDate,val);// @ts-ignore
},// @ts-ignore
prev:function prev(startDate,val){// @ts-ignore
val=val===value?value-1:constraint.extent(startDate)[1];// @ts-ignore
return constraint.prev(startDate,val);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.compile=function(schedDef){// @ts-ignore
var constraints=[],constraintsLen=0,tickConstraint;// @ts-ignore
for(var key in schedDef){// @ts-ignore
var nameParts=key.split("_"),name=nameParts[0],mod=nameParts[1],vals=schedDef[key],constraint=mod?later.modifier[mod](later[name],vals):later[name];// @ts-ignore
constraints.push({// @ts-ignore
constraint:constraint,// @ts-ignore
vals:vals// @ts-ignore
});// @ts-ignore
constraintsLen++;// @ts-ignore
}// @ts-ignore
constraints.sort(function(a,b){// @ts-ignore
var ra=a.constraint.range,rb=b.constraint.range;// @ts-ignore
return rb<ra?-1:rb>ra?1:0;// @ts-ignore
});// @ts-ignore
tickConstraint=constraints[constraintsLen-1].constraint;// @ts-ignore
function compareFn(dir){// @ts-ignore
return dir==="next"?function(a,b){// @ts-ignore
return a.getTime()>b.getTime();// @ts-ignore
}:function(a,b){// @ts-ignore
return b.getTime()>a.getTime();// @ts-ignore
};// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
start:function start(dir,startDate){// @ts-ignore
var next=startDate,nextVal=later.array[dir],maxAttempts=1e3,done;// @ts-ignore
while(maxAttempts--&&!done&&next){// @ts-ignore
done=true;// @ts-ignore
for(var i=0;i<constraintsLen;i++){// @ts-ignore
var constraint=constraints[i].constraint,curVal=constraint.val(next),extent=constraint.extent(next),newVal=nextVal(curVal,constraints[i].vals,extent);// @ts-ignore
if(!constraint.isValid(next,newVal)){// @ts-ignore
next=constraint[dir](next,newVal);// @ts-ignore
done=false;// @ts-ignore
break;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
if(next!==later.NEVER){// @ts-ignore
next=dir==="next"?tickConstraint.start(next):tickConstraint.end(next);// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
},// @ts-ignore
end:function end(dir,startDate){// @ts-ignore
var result,nextVal=later.array[dir+"Invalid"],compare=compareFn(dir);// @ts-ignore
for(var i=constraintsLen-1;i>=0;i--){// @ts-ignore
var constraint=constraints[i].constraint,curVal=constraint.val(startDate),extent=constraint.extent(startDate),newVal=nextVal(curVal,constraints[i].vals,extent),next;// @ts-ignore
if(newVal!==undefined){// @ts-ignore
next=constraint[dir](startDate,newVal);// @ts-ignore
if(next&&(!result||compare(result,next))){// @ts-ignore
result=next;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return result;// @ts-ignore
},// @ts-ignore
tick:function tick(dir,date){// @ts-ignore
return new Date(dir==="next"?tickConstraint.end(date).getTime()+later.SEC:tickConstraint.start(date).getTime()-later.SEC);// @ts-ignore
},// @ts-ignore
tickStart:function tickStart(date){// @ts-ignore
return tickConstraint.start(date);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.schedule=function(sched){// @ts-ignore
if(!sched)throw new Error("Missing schedule definition.");// @ts-ignore
if(!sched.schedules)throw new Error("Definition must include at least one schedule.");// @ts-ignore
var schedules=[],schedulesLen=sched.schedules.length,exceptions=[],exceptionsLen=sched.exceptions?sched.exceptions.length:0;// @ts-ignore
for(var i=0;i<schedulesLen;i++){// @ts-ignore
schedules.push(later.compile(sched.schedules[i]));// @ts-ignore
}// @ts-ignore
for(var j=0;j<exceptionsLen;j++){// @ts-ignore
exceptions.push(later.compile(sched.exceptions[j]));// @ts-ignore
}// @ts-ignore
function getInstances(dir,count,startDate,endDate,isRange){// @ts-ignore
var compare=compareFn(dir),loopCount=count,maxAttempts=1e3,schedStarts=[],exceptStarts=[],next,end,results=[],isForward=dir==="next",lastResult,rStart=isForward?0:1,rEnd=isForward?1:0;// @ts-ignore
startDate=startDate?new Date(startDate):new Date();// @ts-ignore
if(!startDate||!startDate.getTime())throw new Error("Invalid start date.");// @ts-ignore
setNextStarts(dir,schedules,schedStarts,startDate);// @ts-ignore
setRangeStarts(dir,exceptions,exceptStarts,startDate);// @ts-ignore
while(maxAttempts--&&loopCount&&(next=findNext(schedStarts,compare))){// @ts-ignore
if(endDate&&compare(next,endDate)){// @ts-ignore
break;// @ts-ignore
}// @ts-ignore
if(exceptionsLen){// @ts-ignore
updateRangeStarts(dir,exceptions,exceptStarts,next);// @ts-ignore
if(end=calcRangeOverlap(dir,exceptStarts,next)){// @ts-ignore
updateNextStarts(dir,schedules,schedStarts,end);// @ts-ignore
continue;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
if(isRange){// @ts-ignore
var maxEndDate=calcMaxEndDate(exceptStarts,compare);// @ts-ignore
end=calcEnd(dir,schedules,schedStarts,next,maxEndDate);// @ts-ignore
var r=isForward?[new Date(Math.max(startDate,next)),end?new Date(endDate?Math.min(end,endDate):end):undefined]:[end?new Date(endDate?Math.max(endDate,end.getTime()+later.SEC):end.getTime()+later.SEC):undefined,new Date(Math.min(startDate,next.getTime()+later.SEC))];// @ts-ignore
if(lastResult&&r[rStart].getTime()===lastResult[rEnd].getTime()){// @ts-ignore
lastResult[rEnd]=r[rEnd];// @ts-ignore
loopCount++;// @ts-ignore
}else{// @ts-ignore
lastResult=r;// @ts-ignore
results.push(lastResult);// @ts-ignore
}// @ts-ignore
if(!end)break;// @ts-ignore
updateNextStarts(dir,schedules,schedStarts,end);// @ts-ignore
}else{// @ts-ignore
results.push(isForward?new Date(Math.max(startDate,next)):getStart(schedules,schedStarts,next,endDate));// @ts-ignore
tickStarts(dir,schedules,schedStarts,next);// @ts-ignore
}// @ts-ignore
loopCount--;// @ts-ignore
}// @ts-ignore
for(var i=0,len=results.length;i<len;i++){// @ts-ignore
var result=results[i];// @ts-ignore
results[i]=Object.prototype.toString.call(result)==="[object Array]"?[cleanDate(result[0]),cleanDate(result[1])]:cleanDate(result);// @ts-ignore
}// @ts-ignore
return results.length===0?later.NEVER:count===1?results[0]:results;// @ts-ignore
}// @ts-ignore
function cleanDate(d){// @ts-ignore
if(d instanceof Date&&!isNaN(d.valueOf())){// @ts-ignore
return new Date(d);// @ts-ignore
}// @ts-ignore
return undefined;// @ts-ignore
}// @ts-ignore
function setNextStarts(dir,schedArr,startsArr,startDate){// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
startsArr[i]=schedArr[i].start(dir,startDate);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function updateNextStarts(dir,schedArr,startsArr,startDate){// @ts-ignore
var compare=compareFn(dir);// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
if(startsArr[i]&&!compare(startsArr[i],startDate)){// @ts-ignore
startsArr[i]=schedArr[i].start(dir,startDate);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function setRangeStarts(dir,schedArr,rangesArr,startDate){// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
var nextStart=schedArr[i].start(dir,startDate);// @ts-ignore
if(!nextStart){// @ts-ignore
rangesArr[i]=later.NEVER;// @ts-ignore
}else{// @ts-ignore
rangesArr[i]=[nextStart,schedArr[i].end(dir,nextStart)];// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function updateRangeStarts(dir,schedArr,rangesArr,startDate){// @ts-ignore
var compare=compareFn(dir);// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
if(rangesArr[i]&&!compare(rangesArr[i][0],startDate)){// @ts-ignore
var nextStart=schedArr[i].start(dir,startDate);// @ts-ignore
if(!nextStart){// @ts-ignore
rangesArr[i]=later.NEVER;// @ts-ignore
}else{// @ts-ignore
rangesArr[i]=[nextStart,schedArr[i].end(dir,nextStart)];// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function tickStarts(dir,schedArr,startsArr,startDate){// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
if(startsArr[i]&&startsArr[i].getTime()===startDate.getTime()){// @ts-ignore
startsArr[i]=schedArr[i].start(dir,schedArr[i].tick(dir,startDate));// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function getStart(schedArr,startsArr,startDate,minEndDate){// @ts-ignore
var result;// @ts-ignore
for(var i=0,len=startsArr.length;i<len;i++){// @ts-ignore
if(startsArr[i]&&startsArr[i].getTime()===startDate.getTime()){// @ts-ignore
var start=schedArr[i].tickStart(startDate);// @ts-ignore
if(minEndDate&&start<minEndDate){// @ts-ignore
return minEndDate;// @ts-ignore
}// @ts-ignore
if(!result||start>result){// @ts-ignore
result=start;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return result;// @ts-ignore
}// @ts-ignore
function calcRangeOverlap(dir,rangesArr,startDate){// @ts-ignore
var compare=compareFn(dir),result;// @ts-ignore
for(var i=0,len=rangesArr.length;i<len;i++){// @ts-ignore
var range=rangesArr[i];// @ts-ignore
if(range&&!compare(range[0],startDate)&&(!range[1]||compare(range[1],startDate))){// @ts-ignore
if(!result||compare(range[1],result)){// @ts-ignore
result=range[1];// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return result;// @ts-ignore
}// @ts-ignore
function calcMaxEndDate(exceptsArr,compare){// @ts-ignore
var result;// @ts-ignore
for(var i=0,len=exceptsArr.length;i<len;i++){// @ts-ignore
if(exceptsArr[i]&&(!result||compare(result,exceptsArr[i][0]))){// @ts-ignore
result=exceptsArr[i][0];// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return result;// @ts-ignore
}// @ts-ignore
function calcEnd(dir,schedArr,startsArr,startDate,maxEndDate){// @ts-ignore
var compare=compareFn(dir),result;// @ts-ignore
for(var i=0,len=schedArr.length;i<len;i++){// @ts-ignore
var start=startsArr[i];// @ts-ignore
if(start&&start.getTime()===startDate.getTime()){// @ts-ignore
var end=schedArr[i].end(dir,start);// @ts-ignore
if(maxEndDate&&(!end||compare(end,maxEndDate))){// @ts-ignore
return maxEndDate;// @ts-ignore
}// @ts-ignore
if(!result||compare(end,result)){// @ts-ignore
result=end;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return result;// @ts-ignore
}// @ts-ignore
function compareFn(dir){// @ts-ignore
return dir==="next"?function(a,b){// @ts-ignore
return!b||a.getTime()>b.getTime();// @ts-ignore
}:function(a,b){// @ts-ignore
return!a||b.getTime()>a.getTime();// @ts-ignore
};// @ts-ignore
}// @ts-ignore
function findNext(arr,compare){// @ts-ignore
var next=arr[0];// @ts-ignore
for(var i=1,len=arr.length;i<len;i++){// @ts-ignore
if(arr[i]&&compare(next,arr[i])){// @ts-ignore
next=arr[i];// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return next;// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
isValid:function isValid(d){// @ts-ignore
return getInstances("next",1,d,d)!==later.NEVER;// @ts-ignore
},// @ts-ignore
next:function next(count,startDate,endDate){// @ts-ignore
return getInstances("next",count||1,startDate,endDate);// @ts-ignore
},// @ts-ignore
prev:function prev(count,startDate,endDate){// @ts-ignore
return getInstances("prev",count||1,startDate,endDate);// @ts-ignore
},// @ts-ignore
nextRange:function nextRange(count,startDate,endDate){// @ts-ignore
return getInstances("next",count||1,startDate,endDate,true);// @ts-ignore
},// @ts-ignore
prevRange:function prevRange(count,startDate,endDate){// @ts-ignore
return getInstances("prev",count||1,startDate,endDate,true);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.setTimeout=function(fn,sched){// @ts-ignore
var s=later.schedule(sched),t;// @ts-ignore
if(fn){// @ts-ignore
scheduleTimeout();// @ts-ignore
}// @ts-ignore
function scheduleTimeout(){// @ts-ignore
var now=Date.now(),next=s.next(2,now);// @ts-ignore
if(!next[0]){// @ts-ignore
t=undefined;// @ts-ignore
return;// @ts-ignore
}// @ts-ignore
var diff=next[0].getTime()-now;// @ts-ignore
if(diff<1e3){// @ts-ignore
diff=next[1]?next[1].getTime()-now:1e3;// @ts-ignore
}// @ts-ignore
if(diff<2147483647){// @ts-ignore
t=setTimeout(fn,diff);// @ts-ignore
}else{// @ts-ignore
t=setTimeout(scheduleTimeout,2147483647);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
isDone:function isDone(){// @ts-ignore
return!t;// @ts-ignore
},// @ts-ignore
clear:function clear(){// @ts-ignore
clearTimeout(t);// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.setInterval=function(fn,sched){// @ts-ignore
if(!fn){// @ts-ignore
return;// @ts-ignore
}// @ts-ignore
var t=later.setTimeout(scheduleTimeout,sched),done=t.isDone();// @ts-ignore
function scheduleTimeout(){// @ts-ignore
if(!done){// @ts-ignore
fn();// @ts-ignore
t=later.setTimeout(scheduleTimeout,sched);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
isDone:function isDone(){// @ts-ignore
return t.isDone();// @ts-ignore
},// @ts-ignore
clear:function clear(){// @ts-ignore
done=true;// @ts-ignore
t.clear();// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.date={};// @ts-ignore
later.date.timezone=function(useLocalTime){// @ts-ignore
later.date.build=useLocalTime?function(Y,M,D,h,m,s){// @ts-ignore
return new Date(Y,M,D,h,m,s);// @ts-ignore
}:function(Y,M,D,h,m,s){// @ts-ignore
return new Date(Date.UTC(Y,M,D,h,m,s));// @ts-ignore
};// @ts-ignore
var get=useLocalTime?"get":"getUTC",d=Date.prototype;// @ts-ignore
later.date.getYear=d[get+"FullYear"];// @ts-ignore
later.date.getMonth=d[get+"Month"];// @ts-ignore
later.date.getDate=d[get+"Date"];// @ts-ignore
later.date.getDay=d[get+"Day"];// @ts-ignore
later.date.getHour=d[get+"Hours"];// @ts-ignore
later.date.getMin=d[get+"Minutes"];// @ts-ignore
later.date.getSec=d[get+"Seconds"];// @ts-ignore
later.date.isUTC=!useLocalTime;// @ts-ignore
};// @ts-ignore
later.date.UTC=function(){// @ts-ignore
later.date.timezone(false);// @ts-ignore
};// @ts-ignore
later.date.localTime=function(){// @ts-ignore
later.date.timezone(true);// @ts-ignore
};// @ts-ignore
later.date.UTC();// @ts-ignore
later.SEC=1e3;// @ts-ignore
later.MIN=later.SEC*60;// @ts-ignore
later.HOUR=later.MIN*60;// @ts-ignore
later.DAY=later.HOUR*24;// @ts-ignore
later.WEEK=later.DAY*7;// @ts-ignore
later.DAYS_IN_MONTH=[31,28,31,30,31,30,31,31,30,31,30,31];// @ts-ignore
later.NEVER=0;// @ts-ignore
later.date.next=function(Y,M,D,h,m,s){// @ts-ignore
return later.date.build(Y,M!==undefined?M-1:0,D!==undefined?D:1,h||0,m||0,s||0);// @ts-ignore
};// @ts-ignore
later.date.nextRollover=function(d,val,constraint,period){// @ts-ignore
var cur=constraint.val(d),max=constraint.extent(d)[1];// @ts-ignore
return(val||max)<=cur||val>max?new Date(period.end(d).getTime()+later.SEC):period.start(d);// @ts-ignore
};// @ts-ignore
later.date.prev=function(Y,M,D,h,m,s){// @ts-ignore
var len=arguments.length;// @ts-ignore
M=len<2?11:M-1;// @ts-ignore
D=len<3?later.D.extent(later.date.next(Y,M+1))[1]:D;// @ts-ignore
h=len<4?23:h;// @ts-ignore
m=len<5?59:m;// @ts-ignore
s=len<6?59:s;// @ts-ignore
return later.date.build(Y,M,D,h,m,s);// @ts-ignore
};// @ts-ignore
later.date.prevRollover=function(d,val,constraint,period){// @ts-ignore
var cur=constraint.val(d);// @ts-ignore
return val>=cur||!val?period.start(period.prev(d,period.val(d)-1)):period.start(d);// @ts-ignore
};// @ts-ignore
later.parse={};// @ts-ignore
later.parse.cron=function(expr,hasSeconds){// @ts-ignore
var NAMES={// @ts-ignore
JAN:1,// @ts-ignore
FEB:2,// @ts-ignore
MAR:3,// @ts-ignore
APR:4,// @ts-ignore
MAY:5,// @ts-ignore
JUN:6,// @ts-ignore
JUL:7,// @ts-ignore
AUG:8,// @ts-ignore
SEP:9,// @ts-ignore
OCT:10,// @ts-ignore
NOV:11,// @ts-ignore
DEC:12,// @ts-ignore
SUN:1,// @ts-ignore
MON:2,// @ts-ignore
TUE:3,// @ts-ignore
WED:4,// @ts-ignore
THU:5,// @ts-ignore
FRI:6,// @ts-ignore
SAT:7// @ts-ignore
};// @ts-ignore
var REPLACEMENTS={// @ts-ignore
"* * * * * *":"0/1 * * * * *",// @ts-ignore
"@YEARLY":"0 0 1 1 *",// @ts-ignore
"@ANNUALLY":"0 0 1 1 *",// @ts-ignore
"@MONTHLY":"0 0 1 * *",// @ts-ignore
"@WEEKLY":"0 0 * * 0",// @ts-ignore
"@DAILY":"0 0 * * *",// @ts-ignore
"@HOURLY":"0 * * * *"// @ts-ignore
};// @ts-ignore
var FIELDS={// @ts-ignore
s:[0,0,59],// @ts-ignore
m:[1,0,59],// @ts-ignore
h:[2,0,23],// @ts-ignore
D:[3,1,31],// @ts-ignore
M:[4,1,12],// @ts-ignore
Y:[6,1970,2099],// @ts-ignore
d:[5,1,7,1]// @ts-ignore
};// @ts-ignore
function getValue(value,offset,max){// @ts-ignore
return isNaN(value)?NAMES[value]||null:Math.min(+value+(offset||0),max||9999);// @ts-ignore
}// @ts-ignore
function cloneSchedule(sched){// @ts-ignore
var clone={},field;// @ts-ignore
for(field in sched){// @ts-ignore
if(field!=="dc"&&field!=="d"){// @ts-ignore
clone[field]=sched[field].slice(0);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return clone;// @ts-ignore
}// @ts-ignore
function add(sched,name,min,max,inc){// @ts-ignore
var i=min;// @ts-ignore
if(!sched[name]){// @ts-ignore
sched[name]=[];// @ts-ignore
}// @ts-ignore
while(i<=max){// @ts-ignore
if(sched[name].indexOf(i)<0){// @ts-ignore
sched[name].push(i);// @ts-ignore
}// @ts-ignore
i+=inc||1;// @ts-ignore
}// @ts-ignore
sched[name].sort(function(a,b){// @ts-ignore
return a-b;// @ts-ignore
});// @ts-ignore
}// @ts-ignore
function addHash(schedules,curSched,value,hash){// @ts-ignore
if(curSched.d&&!curSched.dc||curSched.dc&&curSched.dc.indexOf(hash)<0){// @ts-ignore
schedules.push(cloneSchedule(curSched));// @ts-ignore
curSched=schedules[schedules.length-1];// @ts-ignore
}// @ts-ignore
add(curSched,"d",value,value);// @ts-ignore
add(curSched,"dc",hash,hash);// @ts-ignore
}// @ts-ignore
function addWeekday(s,curSched,value){// @ts-ignore
var except1={},except2={};// @ts-ignore
if(value===1){// @ts-ignore
add(curSched,"D",1,3);// @ts-ignore
add(curSched,"d",NAMES.MON,NAMES.FRI);// @ts-ignore
add(except1,"D",2,2);// @ts-ignore
add(except1,"d",NAMES.TUE,NAMES.FRI);// @ts-ignore
add(except2,"D",3,3);// @ts-ignore
add(except2,"d",NAMES.TUE,NAMES.FRI);// @ts-ignore
}else{// @ts-ignore
add(curSched,"D",value-1,value+1);// @ts-ignore
add(curSched,"d",NAMES.MON,NAMES.FRI);// @ts-ignore
add(except1,"D",value-1,value-1);// @ts-ignore
add(except1,"d",NAMES.MON,NAMES.THU);// @ts-ignore
add(except2,"D",value+1,value+1);// @ts-ignore
add(except2,"d",NAMES.TUE,NAMES.FRI);// @ts-ignore
}// @ts-ignore
s.exceptions.push(except1);// @ts-ignore
s.exceptions.push(except2);// @ts-ignore
}// @ts-ignore
function addRange(item,curSched,name,min,max,offset){// @ts-ignore
var incSplit=item.split("/"),inc=+incSplit[1],range=incSplit[0];// @ts-ignore
if(range!=="*"&&range!=="0"){// @ts-ignore
var rangeSplit=range.split("-");// @ts-ignore
min=getValue(rangeSplit[0],offset,max);// @ts-ignore
max=getValue(rangeSplit[1],offset,max)||max;// @ts-ignore
}// @ts-ignore
add(curSched,name,min,max,inc);// @ts-ignore
}// @ts-ignore
function parse(item,s,name,min,max,offset){// @ts-ignore
var value,split,schedules=s.schedules,curSched=schedules[schedules.length-1];// @ts-ignore
if(item==="L"){// @ts-ignore
item=min-1;// @ts-ignore
}// @ts-ignore
if((value=getValue(item,offset,max))!==null){// @ts-ignore
add(curSched,name,value,value);// @ts-ignore
}else if((value=getValue(item.replace("W",""),offset,max))!==null){// @ts-ignore
addWeekday(s,curSched,value);// @ts-ignore
}else if((value=getValue(item.replace("L",""),offset,max))!==null){// @ts-ignore
addHash(schedules,curSched,value,min-1);// @ts-ignore
}else if((split=item.split("#")).length===2){// @ts-ignore
value=getValue(split[0],offset,max);// @ts-ignore
addHash(schedules,curSched,value,getValue(split[1]));// @ts-ignore
}else{// @ts-ignore
addRange(item,curSched,name,min,max,offset);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function isHash(item){// @ts-ignore
return item.indexOf("#")>-1||item.indexOf("L")>0;// @ts-ignore
}// @ts-ignore
function itemSorter(a,b){// @ts-ignore
return isHash(a)&&!isHash(b)?1:a-b;// @ts-ignore
}// @ts-ignore
function parseExpr(expr){// @ts-ignore
var schedule={// @ts-ignore
schedules:[{}],// @ts-ignore
exceptions:[]// @ts-ignore
},components=expr.replace(/(\s)+/g," ").split(" "),field,f,component,items;// @ts-ignore
for(field in FIELDS){// @ts-ignore
f=FIELDS[field];// @ts-ignore
component=components[f[0]];// @ts-ignore
if(component&&component!=="*"&&component!=="?"){// @ts-ignore
items=component.split(",").sort(itemSorter);// @ts-ignore
var i,length=items.length;// @ts-ignore
for(i=0;i<length;i++){// @ts-ignore
parse(items[i],schedule,field,f[1],f[2],f[3]);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return schedule;// @ts-ignore
}// @ts-ignore
function prepareExpr(expr){// @ts-ignore
var prepared=expr.toUpperCase();// @ts-ignore
return REPLACEMENTS[prepared]||prepared;// @ts-ignore
}// @ts-ignore
var e=prepareExpr(expr);// @ts-ignore
return parseExpr(hasSeconds?e:"0 "+e);// @ts-ignore
};// @ts-ignore
later.parse.recur=function(){// @ts-ignore
var schedules=[],exceptions=[],cur,curArr=schedules,curName,values,_every,modifier,applyMin,applyMax,i,last;// @ts-ignore
function add(name,min,max){// @ts-ignore
name=modifier?name+"_"+modifier:name;// @ts-ignore
if(!cur){// @ts-ignore
curArr.push({});// @ts-ignore
cur=curArr[0];// @ts-ignore
}// @ts-ignore
if(!cur[name]){// @ts-ignore
cur[name]=[];// @ts-ignore
}// @ts-ignore
curName=cur[name];// @ts-ignore
if(_every){// @ts-ignore
values=[];// @ts-ignore
for(i=min;i<=max;i+=_every){// @ts-ignore
values.push(i);// @ts-ignore
}// @ts-ignore
last={// @ts-ignore
n:name,// @ts-ignore
x:_every,// @ts-ignore
c:curName.length,// @ts-ignore
m:max// @ts-ignore
};// @ts-ignore
}// @ts-ignore
values=applyMin?[min]:applyMax?[max]:values;// @ts-ignore
var length=values.length;// @ts-ignore
for(i=0;i<length;i+=1){// @ts-ignore
var val=values[i];// @ts-ignore
if(curName.indexOf(val)<0){// @ts-ignore
curName.push(val);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
values=_every=modifier=applyMin=applyMax=0;// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
schedules:schedules,// @ts-ignore
exceptions:exceptions,// @ts-ignore
on:function on(){// @ts-ignore
values=arguments[0]instanceof Array?arguments[0]:arguments;// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
every:function every(x){// @ts-ignore
_every=x||1;// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
after:function after(x){// @ts-ignore
modifier="a";// @ts-ignore
values=[x];// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
before:function before(x){// @ts-ignore
modifier="b";// @ts-ignore
values=[x];// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
first:function first(){// @ts-ignore
applyMin=1;// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
last:function last(){// @ts-ignore
applyMax=1;// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
time:function time(){// @ts-ignore
for(var i=0,len=values.length;i<len;i++){// @ts-ignore
var split=values[i].split(":");// @ts-ignore
if(split.length<3)split.push(0);// @ts-ignore
values[i]=+split[0]*3600+ +split[1]*60+ +split[2];// @ts-ignore
}// @ts-ignore
add("t");// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
second:function second(){// @ts-ignore
add("s",0,59);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
minute:function minute(){// @ts-ignore
add("m",0,59);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
hour:function hour(){// @ts-ignore
add("h",0,23);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
dayOfMonth:function dayOfMonth(){// @ts-ignore
add("D",1,applyMax?0:31);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
dayOfWeek:function dayOfWeek(){// @ts-ignore
add("d",1,7);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
onWeekend:function onWeekend(){// @ts-ignore
values=[1,7];// @ts-ignore
return this.dayOfWeek();// @ts-ignore
},// @ts-ignore
onWeekday:function onWeekday(){// @ts-ignore
values=[2,3,4,5,6];// @ts-ignore
return this.dayOfWeek();// @ts-ignore
},// @ts-ignore
dayOfWeekCount:function dayOfWeekCount(){// @ts-ignore
add("dc",1,applyMax?0:5);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
dayOfYear:function dayOfYear(){// @ts-ignore
add("dy",1,applyMax?0:366);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
weekOfMonth:function weekOfMonth(){// @ts-ignore
add("wm",1,applyMax?0:5);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
weekOfYear:function weekOfYear(){// @ts-ignore
add("wy",1,applyMax?0:53);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
month:function month(){// @ts-ignore
add("M",1,12);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
year:function year(){// @ts-ignore
add("Y",1970,2450);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
fullDate:function fullDate(){// @ts-ignore
for(var i=0,len=values.length;i<len;i++){// @ts-ignore
values[i]=values[i].getTime();// @ts-ignore
}// @ts-ignore
add("fd");// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
customModifier:function customModifier(id,vals){// @ts-ignore
var custom=later.modifier[id];// @ts-ignore
if(!custom)throw new Error("Custom modifier "+id+" not recognized!");// @ts-ignore
modifier=id;// @ts-ignore
values=arguments[1]instanceof Array?arguments[1]:[arguments[1]];// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
customPeriod:function customPeriod(id){// @ts-ignore
var custom=later[id];// @ts-ignore
if(!custom)throw new Error("Custom time period "+id+" not recognized!");// @ts-ignore
add(id,custom.extent(new Date())[0],custom.extent(new Date())[1]);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
startingOn:function startingOn(start){// @ts-ignore
return this.between(start,last.m);// @ts-ignore
},// @ts-ignore
between:function between(start,end){// @ts-ignore
cur[last.n]=cur[last.n].splice(0,last.c);// @ts-ignore
_every=last.x;// @ts-ignore
add(last.n,start,end);// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
and:function and(){// @ts-ignore
cur=curArr[curArr.push({})-1];// @ts-ignore
return this;// @ts-ignore
},// @ts-ignore
except:function except(){// @ts-ignore
curArr=exceptions;// @ts-ignore
cur=null;// @ts-ignore
return this;// @ts-ignore
}// @ts-ignore
};// @ts-ignore
};// @ts-ignore
later.parse.text=function(str){// @ts-ignore
var recur=later.parse.recur,pos=0,input="",error;// @ts-ignore
var TOKENTYPES={// @ts-ignore
eof:/^$/,// @ts-ignore
rank:/^((\d\d\d\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\b/,// @ts-ignore
time:/^((([0]?[1-9]|1[0-2]):[0-5]\d(\s)?(am|pm))|(([0]?\d|1\d|2[0-3]):[0-5]\d))\b/,// @ts-ignore
dayName:/^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\b/,// @ts-ignore
monthName:/^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\b/,// @ts-ignore
yearIndex:/^(\d\d\d\d)\b/,// @ts-ignore
every:/^every\b/,// @ts-ignore
after:/^after\b/,// @ts-ignore
before:/^before\b/,// @ts-ignore
second:/^(s|sec(ond)?(s)?)\b/,// @ts-ignore
minute:/^(m|min(ute)?(s)?)\b/,// @ts-ignore
hour:/^(h|hour(s)?)\b/,// @ts-ignore
day:/^(day(s)?( of the month)?)\b/,// @ts-ignore
dayInstance:/^day instance\b/,// @ts-ignore
dayOfWeek:/^day(s)? of the week\b/,// @ts-ignore
dayOfYear:/^day(s)? of the year\b/,// @ts-ignore
weekOfYear:/^week(s)?( of the year)?\b/,// @ts-ignore
weekOfMonth:/^week(s)? of the month\b/,// @ts-ignore
weekday:/^weekday\b/,// @ts-ignore
weekend:/^weekend\b/,// @ts-ignore
month:/^month(s)?\b/,// @ts-ignore
year:/^year(s)?\b/,// @ts-ignore
between:/^between (the)?\b/,// @ts-ignore
start:/^(start(ing)? (at|on( the)?)?)\b/,// @ts-ignore
at:/^(at|@)\b/,// @ts-ignore
and:/^(,|and\b)/,// @ts-ignore
except:/^(except\b)/,// @ts-ignore
also:/(also)\b/,// @ts-ignore
first:/^(first)\b/,// @ts-ignore
last:/^last\b/,// @ts-ignore
"in":/^in\b/,// @ts-ignore
of:/^of\b/,// @ts-ignore
onthe:/^on the\b/,// @ts-ignore
on:/^on\b/,// @ts-ignore
through:/(-|^(to|through)\b)/ // @ts-ignore
};// @ts-ignore
var NAMES={// @ts-ignore
jan:1,// @ts-ignore
feb:2,// @ts-ignore
mar:3,// @ts-ignore
apr:4,// @ts-ignore
may:5,// @ts-ignore
jun:6,// @ts-ignore
jul:7,// @ts-ignore
aug:8,// @ts-ignore
sep:9,// @ts-ignore
oct:10,// @ts-ignore
nov:11,// @ts-ignore
dec:12,// @ts-ignore
sun:1,// @ts-ignore
mon:2,// @ts-ignore
tue:3,// @ts-ignore
wed:4,// @ts-ignore
thu:5,// @ts-ignore
fri:6,// @ts-ignore
sat:7,// @ts-ignore
"1st":1,// @ts-ignore
fir:1,// @ts-ignore
"2nd":2,// @ts-ignore
sec:2,// @ts-ignore
"3rd":3,// @ts-ignore
thi:3,// @ts-ignore
"4th":4,// @ts-ignore
"for":4// @ts-ignore
};// @ts-ignore
function t(start,end,text,type){// @ts-ignore
return{// @ts-ignore
startPos:start,// @ts-ignore
endPos:end,// @ts-ignore
text:text,// @ts-ignore
type:type// @ts-ignore
};// @ts-ignore
}// @ts-ignore
function peek(expected){// @ts-ignore
var scanTokens=expected instanceof Array?expected:[expected],whiteSpace=/\s+/,token,curInput,m,scanToken,start,len;// @ts-ignore
scanTokens.push(whiteSpace);// @ts-ignore
start=pos;// @ts-ignore
while(!token||token.type===whiteSpace){// @ts-ignore
len=-1;// @ts-ignore
curInput=input.substring(start);// @ts-ignore
token=t(start,start,input.split(whiteSpace)[0]);// @ts-ignore
var i,length=scanTokens.length;// @ts-ignore
for(i=0;i<length;i++){// @ts-ignore
scanToken=scanTokens[i];// @ts-ignore
m=scanToken.exec(curInput);// @ts-ignore
if(m&&m.index===0&&m[0].length>len){// @ts-ignore
len=m[0].length;// @ts-ignore
token=t(start,start+len,curInput.substring(0,len),scanToken);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
if(token.type===whiteSpace){// @ts-ignore
start=token.endPos;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return token;// @ts-ignore
}// @ts-ignore
function scan(expectedToken){// @ts-ignore
var token=peek(expectedToken);// @ts-ignore
pos=token.endPos;// @ts-ignore
return token;// @ts-ignore
}// @ts-ignore
function parseThroughExpr(tokenType){// @ts-ignore
var start=+parseTokenValue(tokenType),end=checkAndParse(TOKENTYPES.through)?+parseTokenValue(tokenType):start,nums=[];// @ts-ignore
for(var i=start;i<=end;i++){// @ts-ignore
nums.push(i);// @ts-ignore
}// @ts-ignore
return nums;// @ts-ignore
}// @ts-ignore
function parseRanges(tokenType){// @ts-ignore
var nums=parseThroughExpr(tokenType);// @ts-ignore
while(checkAndParse(TOKENTYPES.and)){// @ts-ignore
nums=nums.concat(parseThroughExpr(tokenType));// @ts-ignore
}// @ts-ignore
return nums;// @ts-ignore
}// @ts-ignore
function parseEvery(r){// @ts-ignore
var num,period,start,end;// @ts-ignore
if(checkAndParse(TOKENTYPES.weekend)){// @ts-ignore
r.on(NAMES.sun,NAMES.sat).dayOfWeek();// @ts-ignore
}else if(checkAndParse(TOKENTYPES.weekday)){// @ts-ignore
r.on(NAMES.mon,NAMES.tue,NAMES.wed,NAMES.thu,NAMES.fri).dayOfWeek();// @ts-ignore
}else{// @ts-ignore
num=parseTokenValue(TOKENTYPES.rank);// @ts-ignore
r.every(num);// @ts-ignore
period=parseTimePeriod(r);// @ts-ignore
if(checkAndParse(TOKENTYPES.start)){// @ts-ignore
num=parseTokenValue(TOKENTYPES.rank);// @ts-ignore
r.startingOn(num);// @ts-ignore
parseToken(period.type);// @ts-ignore
}else if(checkAndParse(TOKENTYPES.between)){// @ts-ignore
start=parseTokenValue(TOKENTYPES.rank);// @ts-ignore
if(checkAndParse(TOKENTYPES.and)){// @ts-ignore
end=parseTokenValue(TOKENTYPES.rank);// @ts-ignore
r.between(start,end);// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
}// @ts-ignore
function parseOnThe(r){// @ts-ignore
if(checkAndParse(TOKENTYPES.first)){// @ts-ignore
r.first();// @ts-ignore
}else if(checkAndParse(TOKENTYPES.last)){// @ts-ignore
r.last();// @ts-ignore
}else{// @ts-ignore
r.on(parseRanges(TOKENTYPES.rank));// @ts-ignore
}// @ts-ignore
parseTimePeriod(r);// @ts-ignore
}// @ts-ignore
function parseScheduleExpr(str){// @ts-ignore
pos=0;// @ts-ignore
input=str;// @ts-ignore
error=-1;// @ts-ignore
var r=recur();// @ts-ignore
while(pos<input.length&&error<0){// @ts-ignore
var token=parseToken([TOKENTYPES.every,TOKENTYPES.after,TOKENTYPES.before,TOKENTYPES.onthe,TOKENTYPES.on,TOKENTYPES.of,TOKENTYPES["in"],TOKENTYPES.at,TOKENTYPES.and,TOKENTYPES.except,TOKENTYPES.also]);// @ts-ignore
switch(token.type){// @ts-ignore
case TOKENTYPES.every:// @ts-ignore
parseEvery(r);// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.after:// @ts-ignore
if(peek(TOKENTYPES.time).type!==undefined){// @ts-ignore
r.after(parseTokenValue(TOKENTYPES.time));// @ts-ignore
r.time();// @ts-ignore
}else{// @ts-ignore
r.after(parseTokenValue(TOKENTYPES.rank));// @ts-ignore
parseTimePeriod(r);// @ts-ignore
}// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.before:// @ts-ignore
if(peek(TOKENTYPES.time).type!==undefined){// @ts-ignore
r.before(parseTokenValue(TOKENTYPES.time));// @ts-ignore
r.time();// @ts-ignore
}else{// @ts-ignore
r.before(parseTokenValue(TOKENTYPES.rank));// @ts-ignore
parseTimePeriod(r);// @ts-ignore
}// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.onthe:// @ts-ignore
parseOnThe(r);// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.on:// @ts-ignore
r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.of:// @ts-ignore
r.on(parseRanges(TOKENTYPES.monthName)).month();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES["in"]:// @ts-ignore
r.on(parseRanges(TOKENTYPES.yearIndex)).year();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.at:// @ts-ignore
r.on(parseTokenValue(TOKENTYPES.time)).time();// @ts-ignore
while(checkAndParse(TOKENTYPES.and)){// @ts-ignore
r.on(parseTokenValue(TOKENTYPES.time)).time();// @ts-ignore
}// @ts-ignore
break;// @ts-ignore
case TOKENTYPES.and:// @ts-ignore
break;// @ts-ignore
case TOKENTYPES.also:// @ts-ignore
r.and();// @ts-ignore
break;// @ts-ignore
case TOKENTYPES.except:// @ts-ignore
r.except();// @ts-ignore
break;// @ts-ignore
default:// @ts-ignore
error=pos;// @ts-ignore
}// @ts-ignore
}// @ts-ignore
return{// @ts-ignore
schedules:r.schedules,// @ts-ignore
exceptions:r.exceptions,// @ts-ignore
error:error// @ts-ignore
};// @ts-ignore
}// @ts-ignore
function parseTimePeriod(r){// @ts-ignore
var timePeriod=parseToken([TOKENTYPES.second,TOKENTYPES.minute,TOKENTYPES.hour,TOKENTYPES.dayOfYear,TOKENTYPES.dayOfWeek,TOKENTYPES.dayInstance,TOKENTYPES.day,TOKENTYPES.month,TOKENTYPES.year,TOKENTYPES.weekOfMonth,TOKENTYPES.weekOfYear]);// @ts-ignore
switch(timePeriod.type){// @ts-ignore
case TOKENTYPES.second:// @ts-ignore
r.second();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.minute:// @ts-ignore
r.minute();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.hour:// @ts-ignore
r.hour();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.dayOfYear:// @ts-ignore
r.dayOfYear();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.dayOfWeek:// @ts-ignore
r.dayOfWeek();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.dayInstance:// @ts-ignore
r.dayOfWeekCount();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.day:// @ts-ignore
r.dayOfMonth();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.weekOfMonth:// @ts-ignore
r.weekOfMonth();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.weekOfYear:// @ts-ignore
r.weekOfYear();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.month:// @ts-ignore
r.month();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.year:// @ts-ignore
r.year();// @ts-ignore
break;// @ts-ignore
// @ts-ignore
default:// @ts-ignore
error=pos;// @ts-ignore
}// @ts-ignore
return timePeriod;// @ts-ignore
}// @ts-ignore
function checkAndParse(tokenType){// @ts-ignore
var found=peek(tokenType).type===tokenType;// @ts-ignore
if(found){// @ts-ignore
scan(tokenType);// @ts-ignore
}// @ts-ignore
return found;// @ts-ignore
}// @ts-ignore
function parseToken(tokenType){// @ts-ignore
var t=scan(tokenType);// @ts-ignore
if(t.type){// @ts-ignore
t.text=convertString(t.text,tokenType);// @ts-ignore
}else{// @ts-ignore
error=pos;// @ts-ignore
}// @ts-ignore
return t;// @ts-ignore
}// @ts-ignore
function parseTokenValue(tokenType){// @ts-ignore
return parseToken(tokenType).text;// @ts-ignore
}// @ts-ignore
function convertString(str,tokenType){// @ts-ignore
var output=str;// @ts-ignore
switch(tokenType){// @ts-ignore
case TOKENTYPES.time:// @ts-ignore
var parts=str.split(/(:|am|pm)/),hour=parts[3]==="pm"&&parts[0]<12?parseInt(parts[0],10)+12:parts[0],min=parts[2].trim();// @ts-ignore
output=(hour.length===1?"0":"")+hour+":"+min;// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.rank:// @ts-ignore
output=parseInt(/^\d+/.exec(str)[0],10);// @ts-ignore
break;// @ts-ignore
// @ts-ignore
case TOKENTYPES.monthName:// @ts-ignore
case TOKENTYPES.dayName:// @ts-ignore
output=NAMES[str.substring(0,3)];// @ts-ignore
break;// @ts-ignore
}// @ts-ignore
return output;// @ts-ignore
}// @ts-ignore
return parseScheduleExpr(str.toLowerCase());// @ts-ignore
};// @ts-ignore
return later;// @ts-ignore
}();// Set the local time mode for "later" library
// @ts-ignore
later.date.localTime();var CalendarCacheInterval=/*#__PURE__*/function(){function CalendarCacheInterval(config){_classCallCheck2(this,CalendarCacheInterval);this.intervals=[];config&&Object.assign(this,config);if(!this.calendar)throw new Error("Required attribute `calendar` is missing");}_createClass2(CalendarCacheInterval,[{key:"includeInterval",value:function includeInterval(interval){if(this.intervals.indexOf(interval)==-1){var copy=this.intervals.slice();copy.push(interval);return new CalendarCacheInterval({intervals:copy,calendar:this.calendar});}else return this;}},{key:"combineWith",value:function combineWith(interval){return new CalendarCacheInterval({intervals:this.intervals.concat(interval.intervals),calendar:this.calendar});}// only valid for single calendar (possibly with parent calendars)
},{key:"getIsWorking",value:function getIsWorking(){if(this.isWorking!=null)return this.isWorking;var intervals=this.intervals=this.normalizeIntervals(this.intervals);// return the value of the interval with the highest priority
return this.isWorking=intervals[0].isWorking;}},{key:"normalizeIntervals",value:function normalizeIntervals(intervals){var filtered=stripDuplicates(intervals);// sort in decreasing order
filtered.sort(function(interval1,interval2){return interval2.getPriorityField()-interval1.getPriorityField();});return filtered;}}]);return CalendarCacheInterval;}();var CalendarCacheSingle=/*#__PURE__*/function(_CalendarCache2){_inherits2(CalendarCacheSingle,_CalendarCache2);function CalendarCacheSingle(config){var _this138;_classCallCheck2(this,CalendarCacheSingle);_this138=_possibleConstructorReturn2(this,_getPrototypeOf2(CalendarCacheSingle).call(this,config));_this138.staticIntervalsCached=false;if(!_this138.unspecifiedTimeInterval)throw new Error("Required attribute `unspecifiedTimeInterval` is missing");_this138.intervalCache=new IntervalCache({emptyInterval:new CalendarCacheInterval({intervals:[_this138.unspecifiedTimeInterval],calendar:_this138.calendar}),combineIntervalsFn:function combineIntervalsFn(interval1,interval2){return interval1.combineWith(interval2);}});return _this138;}_createClass2(CalendarCacheSingle,[{key:"fillCache",value:function fillCache(startDate,endDate){var _this139=this;if(!this.staticIntervalsCached){this.cacheStaticIntervals();this.staticIntervalsCached=true;}if(this.parentCache)this.includeWrappingRangeFrom(this.parentCache,startDate,endDate);var startDateN=startDate.getTime();var endDateN=endDate.getTime();if(startDateN>endDateN)throw new Error("Invalid cache fill interval");this.forEachRecurrentInterval(function(interval){var startSchedule=interval.getStartDateSchedule();var endSchedule=interval.getEndDateSchedule();var wrappingStartDate=startSchedule.prev(1,startDate);var wrappingEndDate=endSchedule.next(1,endDate);// if the `startDate` is an occurrence in the interval's schedule, we need to advance one point prior
// this is to provide the backward-scheduling information for the `startDate` point
if(wrappingStartDate!==later.NEVER&&wrappingStartDate.getTime()===startDateN){var wrappingStartDates=startSchedule.prev(2,startDate);if(wrappingStartDates!==later.NEVER&&wrappingStartDates.length===2)wrappingStartDate=wrappingStartDates[1];}if(wrappingEndDate!==later.NEVER&&wrappingEndDate.getTime()===endDateN){var wrappingEndDates=endSchedule.next(2,endDate);if(wrappingEndDates!==later.NEVER&&wrappingEndDates.length===2)wrappingEndDate=wrappingEndDates[1];}var startDates=startSchedule.next(Infinity,wrappingStartDate!==later.NEVER?wrappingStartDate:startDate,wrappingEndDate!==later.NEVER?new Date(wrappingEndDate.getTime()-1):endDate);// schedule is empty for the interval of interest, do nothing
if(startDates===later.NEVER)return;// at this point `startDates` is a non-empty array
var endDates=endSchedule.next(Infinity,new Date(startDates[0].getTime()+1),wrappingEndDate!==later.NEVER?wrappingEndDate:endDate);if(endDates.length!=startDates.length)throw new Error("Recurrent interval inconsistency: "+interval+", caching startDate: "+startDate+", caching endDate: "+endDate);startDates.forEach(function(startDate,index){var recStartDate=startDate;var recEndDate=endDates[index];if(recStartDate.getTime()>recEndDate.getTime())throw new Error("Recurrent interval inconsistency: "+interval+", startDate: "+startDate+", endDate: "+endDates[index]);_this139.intervalCache.addInterval(recStartDate,recEndDate,function(existingCacheInterval){return existingCacheInterval.includeInterval(interval);});});});}},{key:"clear",value:function clear(){this.staticIntervalsCached=false;_get2(_getPrototypeOf2(CalendarCacheSingle.prototype),"clear",this).call(this);}},{key:"cacheStaticIntervals",value:function cacheStaticIntervals(){var _this140=this;this.forEachStaticInterval(function(interval){_this140.intervalCache.addInterval(interval.startDate,interval.endDate,function(existingCacheInterval){return existingCacheInterval.includeInterval(interval);});});}},{key:"forEachStaticInterval",value:function forEachStaticInterval(func){this.intervalStore.forEach(function(interval){if(interval.isStatic())func(interval);});}},{key:"forEachRecurrentInterval",value:function forEachRecurrentInterval(func){this.intervalStore.forEach(function(interval){if(interval.isRecurrent())func(interval);});}}]);return CalendarCacheSingle;}(CalendarCache);var __decorate$b=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};// TODO: turn it to normal class, no need for it tobe mixin
var CalendarIntervalMixin=function CalendarIntervalMixin(base){var CalendarIntervalMixin=/*#__PURE__*/function(_base44){_inherits2(CalendarIntervalMixin,_base44);function CalendarIntervalMixin(){_classCallCheck2(this,CalendarIntervalMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarIntervalMixin).apply(this,arguments));}_createClass2(CalendarIntervalMixin,[{key:"getCalendar",value:function getCalendar(){return this.stores[0].calendar;}},{key:"resetPriority",value:function resetPriority(){this.priorityField=null;}// not just `getPriority` to avoid clash with auto-generated getter in the subclasses
},{key:"getPriorityField",value:function getPriorityField(){if(this.priorityField!=null)return this.priorityField;// 0 - 10000 interval is reserved for "unspecified time" intervals
// then 10000 - 10100, 10100-10200, ... etc intervals are for the calendars at depth 0, 1, ... etc
var base=10000+this.getCalendar().getDepth()*100;var priority=this.priority;if(priority==null){// recurrent intervals are considered "base" and have lower priority
// static intervals are considered special case overrides and have higher priority
priority=this.isRecurrent()?20:30;}// intervals from parent calendars will have lower priority
return this.priorityField=base+priority;}/**
         * Whether this interval is recurrent (both `recurrentStartDate` and `recurrentEndDate` are present and parsed correctly
         * by the `later` library)
         */},{key:"isRecurrent",value:function isRecurrent(){return Boolean(this.recurrentStartDate&&this.recurrentEndDate&&this.getStartDateSchedule()&&this.getEndDateSchedule());}/**
         * Whether this interval is static - both `startDate` and `endDate` are present.
         */},{key:"isStatic",value:function isStatic(){return Boolean(this.startDate&&this.endDate);}/**
         * Helper method to parse recurrentStartDate and recurrentEndDate field values.
         * @param {Object|string} schedule Recurrence schedule
         * @returns {Object} Processed schedule ready to be used by later.schedule() method.
         * @private
         */},{key:"parseDateSchedule",value:function parseDateSchedule(schedule){if(schedule&&schedule!==Object(schedule)){schedule=later.parse.text(schedule);if(schedule!==Object(schedule)||schedule.error>0){// can be provided as JSON text
try{schedule=JSON.parse(schedule);}catch(e){return null;}}}return schedule;}},{key:"getStartDateSchedule",value:function getStartDateSchedule(){if(this.startDateSchedule)return this.startDateSchedule;var schedule=this.parseDateSchedule(this.recurrentStartDate);return this.startDateSchedule=later.schedule(schedule);}},{key:"getEndDateSchedule",value:function getEndDateSchedule(){if(this.endDateSchedule)return this.endDateSchedule;var schedule=this.parseDateSchedule(this.recurrentEndDate);return this.endDateSchedule=later.schedule(schedule);}}]);return CalendarIntervalMixin;}(base);__decorate$b([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},{converter:dateConverter})],CalendarIntervalMixin.prototype,"startDate",void 0);__decorate$b([model_field({type:'date',dateFormat:'YYYY-MM-DDTHH:mm:ssZ'},{converter:dateConverter})],CalendarIntervalMixin.prototype,"endDate",void 0);__decorate$b([model_field({type:'string'})],CalendarIntervalMixin.prototype,"recurrentStartDate",void 0);__decorate$b([model_field({type:'string'})],CalendarIntervalMixin.prototype,"recurrentEndDate",void 0);__decorate$b([model_field({type:'boolean',defaultValue:false})],CalendarIntervalMixin.prototype,"isWorking",void 0);__decorate$b([model_field({type:'number'})// number in [ 1, 9 ] range
],CalendarIntervalMixin.prototype,"priority",void 0);return CalendarIntervalMixin;};/**
 * Function to build a minimal possible `CalendarIntervalMixin` class
 */var BuildMinimalCalendarInterval=function BuildMinimalCalendarInterval(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return CalendarIntervalMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(base)))));};/**
 * Minimal calendar interval model class
 */var MinimalCalendarInterval=/*#__PURE__*/function(_BuildMinimalCalendar){_inherits2(MinimalCalendarInterval,_BuildMinimalCalendar);function MinimalCalendarInterval(){_classCallCheck2(this,MinimalCalendarInterval);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalCalendarInterval).apply(this,arguments));}return MinimalCalendarInterval;}(BuildMinimalCalendarInterval());/**
 * This a collection of {@link #CalendarIntervalMixin} items. Its a dumb collection though, the "real" calendar
 * is a {@link CalendarMixin} model, which is part of the CalendarManager tree.
 *
 * @private
 */var CalendarIntervalStore=/*#__PURE__*/function(_PartOfProjectStoreMi){_inherits2(CalendarIntervalStore,_PartOfProjectStoreMi);function CalendarIntervalStore(){_classCallCheck2(this,CalendarIntervalStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarIntervalStore).apply(this,arguments));}_createClass2(CalendarIntervalStore,null,[{key:"defaultConfig",get:function get(){return{modelClass:MinimalCalendarInterval};}}]);return CalendarIntervalStore;}(PartOfProjectStoreMixin(PartOfProjectGenericMixin(Store)));var __decorate$c=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};// Calendar interval model denoting unspecified interval
var UnspecifiedTimeIntervalModel=/*#__PURE__*/function(_MinimalCalendarInter){_inherits2(UnspecifiedTimeIntervalModel,_MinimalCalendarInter);function UnspecifiedTimeIntervalModel(){_classCallCheck2(this,UnspecifiedTimeIntervalModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(UnspecifiedTimeIntervalModel).apply(this,arguments));}_createClass2(UnspecifiedTimeIntervalModel,[{key:"getCalendar",// TODO: why it overrides the method, is it configured with calendar instance directly?
value:function getCalendar(){return this.calendar;}// NOTE: See parent class implementation for further comments
},{key:"getPriorityField",value:function getPriorityField(){if(this.priorityField!=null)return this.priorityField;return this.priorityField=this.getCalendar().getDepth();}}]);return UnspecifiedTimeIntervalModel;}(MinimalCalendarInterval);__decorate$c([model_field({type:'number',defaultValue:10})],UnspecifiedTimeIntervalModel.prototype,"priority",void 0);var __decorate$d=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var hasMixin$7=Symbol('CalendarMixin');var CalendarMixin=function CalendarMixin(base){var CalendarMixin=/*#__PURE__*/function(_base45){_inherits2(CalendarMixin,_base45);function CalendarMixin(){var _this141;_classCallCheck2(this,CalendarMixin);_this141=_possibleConstructorReturn2(this,_getPrototypeOf2(CalendarMixin).apply(this,arguments));_this141.version=1;return _this141;}_createClass2(CalendarMixin,[{key:hasMixin$7,value:function value(){}// this makes the calendar's self-atom to change (and trigger calculation on outgoing edges) on every `version` change
},{key:"calculateSelf",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateSelf(){return regeneratorRuntime.wrap(function calculateSelf$(_context199){while(1){switch(_context199.prev=_context199.next){case 0:_context199.next=2;return this.$.version;case 2:return _context199.abrupt("return",this);case 3:case"end":return _context199.stop();}}},calculateSelf,this);})},{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(CalendarMixin.prototype),"afterConstruct",this).call(this);var hoursPerDay=this.hoursPerDay;var daysPerWeek=this.daysPerWeek;var daysPerMonth=this.daysPerMonth;this.unitsInMs={millisecond:1,second:1000,minute:60*1000,hour:60*60*1000,day:hoursPerDay*60*60*1000,week:daysPerWeek*hoursPerDay*60*60*1000,month:daysPerMonth*hoursPerDay*60*60*1000,quarter:3*daysPerMonth*hoursPerDay*60*60*1000,year:4*3*daysPerMonth*hoursPerDay*60*60*1000};this.intervalStore=new CalendarIntervalStore({calendar:this});// if intervals are provided add them to the this.intervalStore
if(this.intervals&&this.intervals.length){this.addIntervals(this.intervals);}this.clearCache();}},{key:"isDefault",value:function isDefault(){var project=this.getProject();if(project){return this===project.defaultCalendar;}return false;}// TODO: move to Model?
},{key:"getDepth",value:function getDepth(){return this.childLevel+1;/*
              let depth       = 0

            let current     = this

            while (current) {
                current     = current.parent
                depth++
            }

            return depth
            */}},{key:"forEachAvailabilityInterval",value:function forEachAvailabilityInterval(options,func,scope){return this.calendarCache.forEachAvailabilityInterval(options,func,scope);}},{key:"accumulateWorkingTime",value:function accumulateWorkingTime(date,duration,unit,isForward){// if duration is 0 - return the same date
if(duration===0)return{finalDate:new Date(date),remainingDurationInMs:0};if(isNaN(duration))throw new Error("Invalid duration");var remainingDurationInMs=this.convertDuration(duration,unit,TimeUnit.Millisecond);var finalDate=date;this.forEachAvailabilityInterval(isForward?{startDate:date,isForward:true}:{endDate:date,isForward:false},function(intervalStartDate,intervalEndDate,calendarCacheInterval){var result=true;if(calendarCacheInterval.getIsWorking()){var dstDiff=intervalStartDate.getTimezoneOffset()-intervalEndDate.getTimezoneOffset();var diff=intervalEndDate.getTime()-intervalStartDate.getTime()+dstDiff*60*1000;if(remainingDurationInMs<=diff){finalDate=isForward?new Date(intervalStartDate.getTime()+remainingDurationInMs):new Date(intervalEndDate.getTime()-remainingDurationInMs);remainingDurationInMs=0;result=false;}else{finalDate=isForward?intervalEndDate:intervalStartDate;remainingDurationInMs-=diff;}}return result;});return{finalDate:new Date(finalDate),remainingDurationInMs:remainingDurationInMs};}},{key:"calculateDuration",value:function calculateDuration(startDate,endDate,unit){var duration=0;this.forEachAvailabilityInterval({startDate:startDate,endDate:endDate},function(intervalStartDate,intervalEndDate,calendarCacheInterval){if(calendarCacheInterval.getIsWorking()){var dstDiff=intervalStartDate.getTimezoneOffset()-intervalEndDate.getTimezoneOffset();duration+=intervalEndDate.getTime()-intervalStartDate.getTime()+dstDiff*60*1000;}});return this.convertDuration(duration,TimeUnit.Millisecond,unit);}},{key:"calculateEndDate",value:function calculateEndDate(startDate,duration,unit){var res=this.accumulateWorkingTime(startDate,duration,unit,true);return res.remainingDurationInMs===0?res.finalDate:null;}},{key:"calculateStartDate",value:function calculateStartDate(endDate,duration,unit){var res=this.accumulateWorkingTime(endDate,duration,unit,false);return res.remainingDurationInMs===0?res.finalDate:null;}},{key:"skipNonWorkingTime",value:function skipNonWorkingTime(date){var isForward=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var workingDate;this.forEachAvailabilityInterval(isForward?{startDate:date,isForward:true}:{endDate:date,isForward:false},function(intervalStartDate,intervalEndDate,calendarCacheInterval){if(calendarCacheInterval.getIsWorking()){workingDate=isForward?intervalStartDate:intervalEndDate;return false;}});return workingDate?new Date(workingDate):new Date(date);}},{key:"convertDuration",value:function convertDuration(duration,fromUnit,toUnit){var result=duration;if(fromUnit!==toUnit){result=duration*this.unitsInMs[fromUnit]/this.unitsInMs[toUnit];}return result;}/**
         * This method adds a single [[CalendarIntervalMixin]] to the internal collection of the calendar
         */},{key:"addInterval",value:function addInterval(interval){return this.addIntervals([interval]);}/**
         * This method adds an array of [[CalendarIntervalMixin]] to the internal collection of the calendar
         */},{key:"addIntervals",value:function addIntervals(intervals){this.bumpVersion();return this.intervalStore.add(intervals);}},{key:"bumpVersion",value:function bumpVersion(){this.clearCache();this.version++;}},{key:"clearCache",value:function clearCache(){// not strictly needed, we just help garbage collector
this.calendarCache&&this.calendarCache.clear();var unspecifiedTimeInterval=new UnspecifiedTimeIntervalModel({isWorking:this.unspecifiedTimeIsWorking});unspecifiedTimeInterval.calendar=this;this.calendarCache=new CalendarCacheSingle({calendar:this,unspecifiedTimeInterval:unspecifiedTimeInterval,intervalStore:this.intervalStore,parentCache:this.parent&&!this.parent.isRoot?this.parent.calendarCache:null});}},{key:"resetPriorityOfAllIntervals",value:function resetPriorityOfAllIntervals(){this.traverse(function(calendar){calendar.intervalStore.forEach(function(interval){return interval.resetPriority();});});}},{key:"appendChild",value:function appendChild(child){var res=_get2(_getPrototypeOf2(CalendarMixin.prototype),"appendChild",this).call(this,child);if(!Array.isArray(res)){res=[res];}// invalidate cache of the child record, since now it should take parent into account
res.forEach(function(r){r.bumpVersion();r.resetPriorityOfAllIntervals();});return res;}},{key:"insertChild",value:function insertChild(child,before){var res=_get2(_getPrototypeOf2(CalendarMixin.prototype),"insertChild",this).call(this,child,before);if(!Array.isArray(res)){res=[res];}// invalidate cache of the child record, since now it should take parent into account
res.forEach(function(r){r.bumpVersion();r.resetPriorityOfAllIntervals();});return res;}},{key:"joinProject",value:function joinProject(){_get2(_getPrototypeOf2(CalendarMixin.prototype),"joinProject",this).call(this);this.intervalStore.setProject(this.getProject());}},{key:"leaveProject",value:function leaveProject(){_get2(_getPrototypeOf2(CalendarMixin.prototype),"leaveProject",this).call(this);this.intervalStore.setProject(null);}}]);return CalendarMixin;}(base);__decorate$d([field({persistent:false})],CalendarMixin.prototype,"version",void 0);__decorate$d([model_field({type:'string'})],CalendarMixin.prototype,"name",void 0);__decorate$d([model_field({type:'number',defaultValue:24})],CalendarMixin.prototype,"hoursPerDay",void 0);__decorate$d([model_field({type:'number',defaultValue:7})],CalendarMixin.prototype,"daysPerWeek",void 0);__decorate$d([model_field({type:'number',defaultValue:30})],CalendarMixin.prototype,"daysPerMonth",void 0);__decorate$d([model_field({type:'boolean',defaultValue:true})],CalendarMixin.prototype,"unspecifiedTimeIsWorking",void 0);__decorate$d([model_field()],CalendarMixin.prototype,"intervals",void 0);return CalendarMixin;};/**
 * Function to build a minimal possible [[CalendarMixin]] class
 */var BuildMinimalCalendar=function BuildMinimalCalendar(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return CalendarMixin(PartOfProjectMixin(PartOfProjectGenericMixin(Entity$1(base))));};/**
 * Minimal possible `CalendarMixin` class
 */var MinimalCalendar=/*#__PURE__*/function(_BuildMinimalCalendar2){_inherits2(MinimalCalendar,_BuildMinimalCalendar2);function MinimalCalendar(){_classCallCheck2(this,MinimalCalendar);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalCalendar).apply(this,arguments));}return MinimalCalendar;}(BuildMinimalCalendar());var CalendarManagerStoreMixin=function CalendarManagerStoreMixin(base){return(/*#__PURE__*/function(_base46){_inherits2(CalendarManagerStoreMixin,_base46);function CalendarManagerStoreMixin(){_classCallCheck2(this,CalendarManagerStoreMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarManagerStoreMixin).apply(this,arguments));}_createClass2(CalendarManagerStoreMixin,null,[{key:"defaultConfig",get:function get(){return{tree:true,modelClass:MinimalCalendar};}}]);return CalendarManagerStoreMixin;}(base));};/**
 * Function to a build a minimal possible [[CalendarManagerStoreMixin]] class.
 */var BuildMinimalCalendarManagerStore=function BuildMinimalCalendarManagerStore(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Store;return CalendarManagerStoreMixin(PartOfProjectStoreMixin(PartOfProjectGenericMixin(ChronoStoreMixin(base))));};/**
 * Minimal possible [[CalendarManagerStoreMixin]] class
 */var MinimalCalendarManagerStore=/*#__PURE__*/function(_BuildMinimalCalendar3){_inherits2(MinimalCalendarManagerStore,_BuildMinimalCalendar3);function MinimalCalendarManagerStore(){_classCallCheck2(this,MinimalCalendarManagerStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalCalendarManagerStore).apply(this,arguments));}return MinimalCalendarManagerStore;}(BuildMinimalCalendarManagerStore());//---------------------------------------------------------------------------------------------------------------------
var EngineReplica=function EngineReplica(base){return(/*#__PURE__*/function(_base47){_inherits2(EngineReplica,_base47);function EngineReplica(){var _this142;_classCallCheck2(this,EngineReplica);_this142=_possibleConstructorReturn2(this,_getPrototypeOf2(EngineReplica).apply(this,arguments));_this142.projectRefreshThreshold=500;return _this142;}_createClass2(EngineReplica,[{key:"propagate",value:function(){var _propagate3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee69(onEffect){var dryRun,project,result,_args200=arguments;return regeneratorRuntime.wrap(function _callee69$(_context200){while(1){switch(_context200.prev=_context200.next){case 0:dryRun=_args200.length>1&&_args200[1]!==undefined?_args200[1]:false;project=this.project;if(this.isPropagating){_context200.next=10;break;}project.trigger('propagationStart',{dryRun:!!dryRun});_context200.next=6;return _get2(_getPrototypeOf2(EngineReplica.prototype),"propagate",this).call(this,onEffect,dryRun);case 6:result=_context200.sent;project.trigger('propagationComplete',{dryRun:!!dryRun,result:result});_context200.next=13;break;case 10:_context200.next=12;return _get2(_getPrototypeOf2(EngineReplica.prototype),"propagate",this).call(this,onEffect,dryRun);case 12:result=_context200.sent;case 13:return _context200.abrupt("return",result);case 14:case"end":return _context200.stop();}}},_callee69,this);}));function propagate(_x105){return _propagate3.apply(this,arguments);}return propagate;}()},{key:"commit",value:function commit(){var project=this.project;var changedAtoms=this.changedAtoms;var records=new Set(changedAtoms.map(function(atom){return atom.self;}));records.forEach(function(r){return r.beginBatch();});project.trigger('beforeCommit',{records:records,changedAtoms:changedAtoms});_get2(_getPrototypeOf2(EngineReplica.prototype),"commit",this).call(this);project.trigger('commit',{records:records,changedAtoms:changedAtoms});// When there are a lot of changes do not fire any events for individual records. Instead ignore all of them
// and fire one big refresh which is supposed to trigger one view refresh
var silent=records.size>this.projectRefreshThreshold;records.forEach(function(r){return r.endBatch(silent);});if(silent){project.trigger('refresh',{records:records});}}},{key:"onEffect",value:function(){var _onEffect2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee70(effect){var project;return regeneratorRuntime.wrap(function _callee70$(_context201){while(1){switch(_context201.prev=_context201.next){case 0:project=this.project;if(!(effect instanceof Conflict)){_context201.next=9;break;}if(!project.hasListener('schedulingconflict')){_context201.next=6;break;}return _context201.abrupt("return",new Promise(function(resolve,reject){project.trigger('schedulingconflict',{conflict:effect,continueWithResolutionResult:resolve});}));case 6:return _context201.abrupt("return",Promise.resolve(EffectResolutionResult.Resume));case 7:_context201.next=10;break;case 9:return _context201.abrupt("return",_get2(_getPrototypeOf2(EngineReplica.prototype),"onEffect",this).call(this,effect));case 10:case"end":return _context201.stop();}}},_callee70,this);}));function onEffect(_x106){return _onEffect2.apply(this,arguments);}return onEffect;}()}]);return EngineReplica;}(base));};var __decorate$e=undefined&&undefined.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--){if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;}return c>3&&r&&Object.defineProperty(target,key,r),r;};var ProjectMixin=function ProjectMixin(base){var ProjectMixin=/*#__PURE__*/function(_base48){_inherits2(ProjectMixin,_base48);function ProjectMixin(){_classCallCheck2(this,ProjectMixin);return _possibleConstructorReturn2(this,_getPrototypeOf2(ProjectMixin).apply(this,arguments));}_createClass2(ProjectMixin,[{key:"construct",value:function construct(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.replica=EngineReplica(MinimalReplica).new({project:this,schema:Schema.new()});// Expand project by default to make getRange to work
if(!config.hasOwnProperty('expanded')){config.expanded=true;}var hasInlineStore=Boolean(config.calendarManagerStore||config.eventStore||config.dependencyStore||config.resourceStore||config.assignmentStore);_get2(_getPrototypeOf2(ProjectMixin.prototype),"construct",this).call(this,config);if(!this.eventModelClass)this.eventModelClass=BryntumEvent;if(!this.eventStoreClass)this.eventStoreClass=MinimalEventStore;if(!this.dependencyModelClass)this.dependencyModelClass=MinimalDependency;if(!this.dependencyStoreClass)this.dependencyStoreClass=MinimalDependencyStore;if(!this.resourceModelClass)this.resourceModelClass=MinimalResource;if(!this.resourceStoreClass)this.resourceStoreClass=MinimalResourceStore;if(!this.assignmentModelClass)this.assignmentModelClass=MinimalAssignment;if(!this.assignmentStoreClass)this.assignmentStoreClass=MinimalAssignmentStore;if(!this.calendarModelClass)this.calendarModelClass=MinimalCalendar;if(!this.calendarManagerStoreClass)this.calendarManagerStoreClass=MinimalCalendarManagerStore;this.replica.addEntity(this);this.stm=new StateTrackingManager({disabled:true});if(this.calendarManagerStore){this.setCalendarManagerStore(this.calendarManagerStore);}else this.calendarManagerStore=new this.calendarManagerStoreClass({modelClass:this.calendarModelClass,idField:'id',project:this,stm:this.stm});// not part of the CalendarManagerStore intentionally, not persisted
this.defaultCalendar=new this.calendarManagerStore.modelClass({hoursPerDay:24,daysPerWeek:7,daysPerMonth:30,unspecifiedTimeIsWorking:this.unspecifiedTimeIsWorking});this.defaultCalendar.project=this;if(this.eventStore){// a valid use case for accessor?
this.setEventStore(this.eventStore);}else this.eventStore=new this.eventStoreClass({modelClass:this.eventModelClass,tree:true,idField:'id',project:this,stm:this.stm});if(this.dependencyStore){this.setDependencyStore(this.dependencyStore);}else this.dependencyStore=new this.dependencyStoreClass({modelClass:this.dependencyModelClass,idField:'id',project:this,stm:this.stm});if(this.resourceStore){this.setResourceStore(this.resourceStore);}else this.resourceStore=new this.resourceStoreClass({modelClass:this.resourceModelClass,idField:'id',project:this,stm:this.stm});if(this.assignmentStore){this.setAssignmentStore(this.assignmentStore);}else this.assignmentStore=new this.assignmentStoreClass({modelClass:this.assignmentModelClass,idField:'id',project:this,stm:this.stm});var hasInlineData=Boolean(this.calendarsData||this.eventsData||this.dependenciesData||this.resourcesData||this.assignmentsData);if(hasInlineData){this.loadInlineData({calendarsData:this.calendarsData,eventsData:this.eventsData,dependenciesData:this.dependenciesData,resourcesData:this.resourcesData,assignmentsData:this.assignmentsData});delete this.calendarsData;delete this.eventsData;delete this.dependenciesData;delete this.resourcesData;delete this.assignmentsData;}// TODO this should be the same propagate as in "loadInlineData"
// or at least fire same side effects
if(hasInlineStore&&!hasInlineData)this.propagate();}},{key:"loadInlineData",value:function loadInlineData(data){if(data.calendarsData){this.calendarManagerStore.data=data.calendarsData;}if(data.eventsData){this.eventStore.data=data.eventsData;}if(data.dependenciesData){this.dependencyStore.data=data.dependenciesData;}if(data.resourcesData){this.resourceStore.data=data.resourcesData;}if(data.assignmentsData){this.assignmentStore.data=data.assignmentsData;}return this.propagate();}},{key:"getGraph",value:function getGraph(){return this.replica;}},{key:"getStm",value:function getStm(){return this.stm;}},{key:"calculateProject",value:function calculateProject(){return this;}},{key:"calculateCalendar",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCalendar(proposedValue){var result;return regeneratorRuntime.wrap(function calculateCalendar$(_context202){while(1){switch(_context202.prev=_context202.next){case 0:return _context202.delegateYield(_get2(_getPrototypeOf2(ProjectMixin.prototype),"calculateCalendar",this).call(this,proposedValue),"t0",1);case 1:result=_context202.t0;if(result){_context202.next=6;break;}result=this.defaultCalendar;_context202.next=6;return result.$$;case 6:return _context202.abrupt("return",result);case 7:case"end":return _context202.stop();}}},calculateCalendar,this);})},{key:"joinStoreRecords",value:function joinStoreRecords(store){var _this143=this;var fn=function fn(record){record.setProject(_this143);record.joinProject();};if(store.rootNode){store.rootNode.traverse(fn);}else{store.forEach(fn);}}},{key:"setEventStore",value:function setEventStore(store){//if (this.eventStore !== store) {
if(this.eventStore&&this.stm.hasStore(this.eventStore)){this.stm.removeStore(this.eventStore);}this.eventStore=store;if(store){store.setProject(this);this.stm.addStore(store);// we've been given an event store from the outside
// need to change its root node to be the project
if(store.rootNode!==this){this.appendChild(store.rootNode.children||[]);store.rootNode=this;}this.joinStoreRecords(store);}//}
}},{key:"setDependencyStore",value:function setDependencyStore(store){//if (this.dependencyStore !== store) {
if(this.dependencyStore&&this.stm.hasStore(this.dependencyStore)){this.stm.removeStore(this.dependencyStore);}this.dependencyStore=store;if(store){store.setProject(this);this.stm.addStore(store);this.joinStoreRecords(store);}//}
}},{key:"setResourceStore",value:function setResourceStore(store){//if (this.resourceStore !== store) {
if(this.resourceStore&&this.stm.hasStore(this.resourceStore)){this.stm.removeStore(this.resourceStore);}this.resourceStore=store;if(store){store.setProject(this);this.stm.addStore(store);this.joinStoreRecords(store);}//}
}},{key:"setAssignmentStore",value:function setAssignmentStore(store){//if (this.assignmentStore !== store) {
if(this.assignmentStore&&this.stm.hasStore(this.assignmentStore)){this.stm.removeStore(this.assignmentStore);}this.assignmentStore=store;if(store){store.setProject(this);this.stm.addStore(store);this.joinStoreRecords(store);}//}
}},{key:"setCalendarManagerStore",value:function setCalendarManagerStore(store){//if (this.calendarManagerStore !== store) {
if(this.calendarManagerStore&&this.stm.hasStore(this.calendarManagerStore)){this.stm.removeStore(this.calendarManagerStore);}this.calendarManagerStore=store;if(store){store.setProject(this);this.stm.addStore(store);this.joinStoreRecords(store);}//}
}// the value of this atom is used for the project's constraint interval
},{key:"calculateStartDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDateInitial(){var proposedValue;return regeneratorRuntime.wrap(function calculateStartDateInitial$(_context203){while(1){switch(_context203.prev=_context203.next){case 0:proposedValue=this.$.startDate.proposedValue;if(!(proposedValue!==undefined)){_context203.next=3;break;}return _context203.abrupt("return",proposedValue);case 3:if(!this.$.startDate.getConsistentValue()){_context203.next=7;break;}_context203.t0=this.startDate;_context203.next=9;break;case 7:return _context203.delegateYield(this.calculateInitialMinChildrenStartDateDeep(),"t1",8);case 8:_context203.t0=_context203.t1;case 9:return _context203.abrupt("return",_context203.t0);case 10:case"end":return _context203.stop();}}},calculateStartDateInitial,this);})},{key:"calculateEndDateInitial",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEndDateInitial(){var proposedValue;return regeneratorRuntime.wrap(function calculateEndDateInitial$(_context204){while(1){switch(_context204.prev=_context204.next){case 0:proposedValue=this.$.endDate.proposedValue;if(!(proposedValue!==undefined)){_context204.next=3;break;}return _context204.abrupt("return",proposedValue);case 3:return _context204.abrupt("return",this.$.endDate.getConsistentValue());case 4:case"end":return _context204.stop();}}},calculateEndDateInitial,this);})},{key:"calculateEarlyStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyStartDateConstraintIntervals(){var intervals,startDate;return regeneratorRuntime.wrap(function calculateEarlyStartDateConstraintIntervals$(_context205){while(1){switch(_context205.prev=_context205.next){case 0:intervals=[];_context205.next=3;return this.$.startDateInitial;case 3:startDate=_context205.sent;// TODO: need to think about resolution options
startDate&&intervals.push(ConstraintInterval.new({originDescription:'the project start date',startDate:startDate}));return _context205.abrupt("return",intervals);case 6:case"end":return _context205.stop();}}},calculateEarlyStartDateConstraintIntervals,this);})},{key:"calculateEarlyEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateEarlyEndDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateEarlyEndDateConstraintIntervals$(_context206){while(1){switch(_context206.prev=_context206.next){case 0:return _context206.abrupt("return",[]);case 1:case"end":return _context206.stop();}}},calculateEarlyEndDateConstraintIntervals);})},{key:"calculateLateStartDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateStartDateConstraintIntervals(){return regeneratorRuntime.wrap(function calculateLateStartDateConstraintIntervals$(_context207){while(1){switch(_context207.prev=_context207.next){case 0:return _context207.abrupt("return",[]);case 1:case"end":return _context207.stop();}}},calculateLateStartDateConstraintIntervals);})},{key:"calculateLateEndDateConstraintIntervals",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateLateEndDateConstraintIntervals(){var intervals,endDate;return regeneratorRuntime.wrap(function calculateLateEndDateConstraintIntervals$(_context208){while(1){switch(_context208.prev=_context208.next){case 0:intervals=[];_context208.next=3;return this.$.endDateInitial;case 3:endDate=_context208.sent;// TODO: need to think about resolution options
endDate&&intervals.push(ConstraintInterval.new({originDescription:'the project end date',endDate:endDate}));return _context208.abrupt("return",intervals);case 6:case"end":return _context208.stop();}}},calculateLateEndDateConstraintIntervals,this);})// Prevents start date calculation
// TODO: this should be done for forward scheduled projects only
},{key:"calculateStartDate",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateStartDate(proposedValue){return regeneratorRuntime.wrap(function calculateStartDate$(_context209){while(1){switch(_context209.prev=_context209.next){case 0:_context209.t0=proposedValue||this.$.startDate.getConsistentValue();if(_context209.t0){_context209.next=5;break;}_context209.next=4;return this.$.startDateInitial;case 4:_context209.t0=_context209.sent;case 5:return _context209.abrupt("return",_context209.t0);case 6:case"end":return _context209.stop();}}},calculateStartDate,this);})},{key:"calculateCriticalPaths",value:/*#__PURE__*/regeneratorRuntime.mark(function calculateCriticalPaths(){var paths,pathsToProcess,events,eventsToProcess,projectEndDate,event,childEvents,eventIsCritical,path,taskIndex,node,criticalPredecessorNodes,_iteratorNormalCompletion94,_didIteratorError94,_iteratorError94,_iterator94,_step94,dependency,_event4,_eventIsCritical,pathCopy,i;return regeneratorRuntime.wrap(function calculateCriticalPaths$(_context210){while(1){switch(_context210.prev=_context210.next){case 0:paths=[];pathsToProcess=[];_context210.next=4;return this.$.childEvents;case 4:events=_context210.sent;eventsToProcess=_toConsumableArray(events);_context210.next=8;return this.$.endDate;case 8:projectEndDate=_context210.sent;case 9:if(!(event=eventsToProcess.shift())){_context210.next=20;break;}_context210.next=12;return event.$.childEvents;case 12:childEvents=_context210.sent;_context210.next=15;return event.$.critical;case 15:eventIsCritical=_context210.sent;// register a new path finishing at the event
if(event.endDate-projectEndDate===0&&eventIsCritical){pathsToProcess.push([{event:event}]);}eventsToProcess.push.apply(eventsToProcess,_toConsumableArray(childEvents));_context210.next=9;break;case 20:if(!(path=pathsToProcess.shift())){_context210.next=67;break;}taskIndex=path.length-1,node=void 0;// get the path last event
case 22:if(!(node=path[taskIndex])){_context210.next=64;break;}criticalPredecessorNodes=[];// collect critical successors
_iteratorNormalCompletion94=true;_didIteratorError94=false;_iteratorError94=undefined;_context210.prev=27;_context210.next=30;return node.event.$.incomingDeps;case 30:_context210.t0=Symbol.iterator;_iterator94=_context210.sent[_context210.t0]();case 32:if(_iteratorNormalCompletion94=(_step94=_iterator94.next()).done){_context210.next=47;break;}dependency=_step94.value;_context210.next=36;return dependency.$.fromEvent;case 36:_event4=_context210.sent;_context210.t1=_event4;if(!_context210.t1){_context210.next=42;break;}_context210.next=41;return _event4.$.critical;case 41:_context210.t1=_context210.sent;case 42:_eventIsCritical=_context210.t1;// if we found a critical successor
if(_eventIsCritical){criticalPredecessorNodes.push({event:_event4,dependency:dependency});}case 44:_iteratorNormalCompletion94=true;_context210.next=32;break;case 47:_context210.next=53;break;case 49:_context210.prev=49;_context210.t2=_context210["catch"](27);_didIteratorError94=true;_iteratorError94=_context210.t2;case 53:_context210.prev=53;_context210.prev=54;if(!_iteratorNormalCompletion94&&_iterator94.return!=null){_iterator94.return();}case 56:_context210.prev=56;if(!_didIteratorError94){_context210.next=59;break;}throw _iteratorError94;case 59:return _context210.finish(56);case 60:return _context210.finish(53);case 61:// if critical successor(s) found
if(criticalPredecessorNodes.length){// make a copy of the path leading part
pathCopy=path.slice();// append the found successor to the path
path.push(criticalPredecessorNodes[0]);// if we found more than one successor we start new path as: leading path + successor
for(i=1;i<criticalPredecessorNodes.length;i++){pathsToProcess.push(pathCopy.concat(criticalPredecessorNodes[i]));}// increment counter to process the successor we've appended to the path
taskIndex++;}else{// no successors -> stop the loop
taskIndex=-1;}_context210.next=22;break;case 64:// we collected the path backwards so let's reverse it
paths.push(path.reverse());_context210.next=20;break;case 67:return _context210.abrupt("return",paths);case 68:case"end":return _context210.stop();}}},calculateCriticalPaths,this,[[27,49,53,61],[54,,56,60]]);})}]);return ProjectMixin;}(base);__decorate$e([model_field({type:'boolean',defaultValue:true})],ProjectMixin.prototype,"unspecifiedTimeIsWorking",void 0);__decorate$e([model_field({type:'string',defaultValue:DependenciesCalendar.ToEvent})],ProjectMixin.prototype,"dependenciesCalendar",void 0);__decorate$e([model_field({type:'boolean',defaultValue:true})],ProjectMixin.prototype,"autoCalculatePercentDoneForParentTasks",void 0);__decorate$e([field()],ProjectMixin.prototype,"criticalPaths",void 0);__decorate$e([calculate('criticalPaths')],ProjectMixin.prototype,"calculateCriticalPaths",null);return ProjectMixin;};/**
 * Function to build a minimal possible [[ProjectMixin]] class
 */var BuildMinimalProject=function BuildMinimalProject(){var base=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Model;return ProjectMixin(HasAssignments(HasChildren(// HasDependencies( // strictly speaking this mixin is not listed in the ProjectMixin requirements
ConstrainedEvent(EventMixin(HasCalendarMixin(PartOfProjectMixin(PartOfProjectGenericMixin(ChronoModelMixin(Entity$1(Events(base)))))))))));};// TODO this should be renamed to BryntumProject
/**
 * Minimal possible [[ProjectMixin]] class.
 */var MinimalProject=/*#__PURE__*/function(_BuildMinimalProject){_inherits2(MinimalProject,_BuildMinimalProject);function MinimalProject(){_classCallCheck2(this,MinimalProject);return _possibleConstructorReturn2(this,_getPrototypeOf2(MinimalProject).apply(this,arguments));}return MinimalProject;}(BuildMinimalProject());/**
 * @module Gantt/feature/Baselines
 */exports.MinimalProject=MinimalProject;var baselineSelector='.b-task-baseline';/**
 * Displays a {@link Gantt.model.TaskModel task}'s {@link Gantt.model.TaskModel#field-baselines baselines}
 * below the tasks in the timeline.
 *
 * This feature also optionally shows a tooltip when hovering any of the task's baseline elements. The
 * tooltip's content may be customized
 *
 * This feature is **disabled** by default
 *
 * @extends Scheduler/feature/base/TooltipBase
 * @externalexample gantt/feature/Baselines.js
 */var Baselines=/*#__PURE__*/function(_TooltipBase2){_inherits2(Baselines,_TooltipBase2);function Baselines(){_classCallCheck2(this,Baselines);return _possibleConstructorReturn2(this,_getPrototypeOf2(Baselines).apply(this,arguments));}_createClass2(Baselines,[{key:"construct",//endregion
//region Init & destroy
value:function construct(gantt,config){var me=this;me.tipId="".concat(gantt.id,"-baselines-tip");me.gantt=gantt;_get2(_getPrototypeOf2(Baselines.prototype),"construct",this).call(this,gantt,config);me.ganttDetatcher=gantt.on({taskpaint:'onTaskPaint',taskrepaint:'onTaskPaint',taskDrag:'onTaskDrag',afterTaskDrop:'onAfterTaskDrop',thisObj:me});me.storeDetacher=gantt.taskStore.on({update:{fn:'onStoreUpdateRecord',thisObj:me,prio:1000}});me.updateHostClasslist();}},{key:"updateHostClasslist",value:function updateHostClasslist(){this.gantt.element.classList[this.disabled?'remove':'add']('b-show-baselines');}},{key:"doDestroy",value:function doDestroy(){this.ganttDetatcher&&this.ganttDetatcher();this.storeDetacher&&this.storeDetacher();_get2(_getPrototypeOf2(Baselines.prototype),"doDestroy",this).call(this);}/**
     * This responds to *unsuccessful* drags of tasks.
     *
     * The task element will be animated back to its original position. This method
     * begins a continuous correction of baseline element position to cover any transitioned
     * movement of the wrapper to its new position. The monitoring persists for 300ms
     * @param {Object} event The afterTaskDrop event
     * @private
     */},{key:"onAfterTaskDrop",value:function onAfterTaskDrop(_ref391){var valid=_ref391.valid;if(!valid){this.monitorBaselineSync(300);}}/**
     * This responds to task timeline position changes for rendered tasks.
     *
     * If the position has changed, it begins a continuous correction of baseline
     * element position to cover any transitioned movement of the wrapper to its new position.
     * The monitoring persists for 300ms
     * @param {Object} event The update event
     * @private
     */},{key:"onStoreUpdateRecord",value:function onStoreUpdateRecord(_ref392){var record=_ref392.record,changes=_ref392.changes;if((changes.startDate||changes.endDate)&&this.gantt.getElementFromTaskRecord(record)){this.monitorBaselineSync(300);}}},{key:"monitorBaselineSync",value:function monitorBaselineSync(duration){if(this.baselineMonitor){this.baselineMonitor.cancel();}this.baselineMonitor=FunctionHelper.animate(duration,this.syncAllBaselines,this);}},{key:"syncAllBaselines",value:function syncAllBaselines(){var _this144=this;!this.isDestroyed&&this.gantt.taskStore.forEach(function(t){return _this144.syncTaskBaselines(t);});}},{key:"resolveTimeSpanRecord",value:function resolveTimeSpanRecord(forElement){var task=this.client.resolveTimeSpanRecord(forElement),baselineElement=forElement.closest(baselineSelector);if(task&&baselineElement){return task.baselines.getAt(parseInt(baselineElement.dataset.index));}}/**
     * Template (a function accepting event data and returning a string) used to display info in the tooltip.
     * The template will be called with an object as with fields as detailed below
     * @config {Function}
     * @param {Object} data A data block containing the information needed to create tooltip content.
     * @param {Gantt.model.Baseline} data.baseline The Baseline record to display
     * @param {Gantt.model.TaskModel} data.baseline.task The owning task of the baseline.
     * @param {string} data.startClockHtml Predefined HTML to show the start time.
     * @param {string} data.endClockHtml Predefined HTML to show the end time.
     */},{key:"template",value:function template(data){var me=this,baseline=data.baseline,task=baseline.task;var decimalPrecision=me.decimalPrecision;if(decimalPrecision==null){decimalPrecision=me.client.durationDisplayPrecision;}var multiplier=Math.pow(10,decimalPrecision),displayDuration=Math.round(baseline.duration*multiplier)/multiplier;return"\n            <div class=\"b-gantt-task-title\">".concat(task.name," (baseline ").concat(baseline.parentIndex+1,")</div>\n            <table>\n            <tr><td>").concat(me.L('Start'),":</td><td>").concat(data.startClockHtml,"</td></tr>\n            ").concat(baseline.milestone?'':"\n                <tr><td>".concat(me.L('End'),":</td><td>").concat(data.endClockHtml,"</td></tr>\n                <tr><td>").concat(me.L('Duration'),":</td><td class=\"b-right\">").concat(displayDuration+' '+DateHelper.getLocalizedNameOfUnit(baseline.durationUnit,baseline.duration!==1),"</td></tr>\n            "),"\n            </table>\n            ");}/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"onTaskDrag",//endregion
//region Events
value:function onTaskDrag(_ref393){var taskRecords=_ref393.taskRecords,dragData=_ref393.dragData;var taskRecord=taskRecords[0],context=dragData.context,taskData=this.gantt.currentOrientation.cache.getRenderedTimeSpan(taskRecord.id);// Keep the baselines positioned during dragging by declaring an element paint at the new position
this.syncTaskBaselines(taskRecord,Object.setPrototypeOf({left:context.newX},taskData),dragData.context.grabbed);}/**
     * Called when a new event element is created or updated. Make correct baseline element state.
     * @private
     */},{key:"onTaskPaint",value:function onTaskPaint(_ref394){var taskData=_ref394.taskData,taskRecord=_ref394.taskRecord,parent=_ref394.element;var me=this,gantt=me.gantt;// If the client is doing an animated update, we must update at end
if(gantt.isAnimating){gantt.on({transitionend:function transitionend(){me.syncTaskBaselines(taskRecord,taskData,parent);},once:true});}else{me.syncTaskBaselines(taskRecord,taskData,parent);}}/**
     * Called to handle updating the element when a new event element is created or updated. Make correct baseline element state.
     * @private
     */},{key:"syncTaskBaselines",value:function syncTaskBaselines(taskRecord,taskData,parent){if(!taskData){taskData=this.gantt.currentOrientation.cache.getRenderedTimeSpan(taskRecord.id);}if(taskData&&taskData.layoutCache){var useElement=false;// If called with no element passed, use current element's position
if(!parent){parent=taskData.layoutCache&&taskData.layoutCache.div;useElement=true;}var gantt=this.gantt,mapper=gantt.currentOrientation,baselines=taskRecord.baselines.allRecords,baselineCount=baselines.length,baselineElements=parent.baselineElements||(parent.baselineElements=[]),toRemove=baselineElements.slice(baselineCount),taskLeft=useElement?DomHelper.getOffsetX(parent,gantt.timeAxisSubGridElement)+gantt.timeAxisSubGrid.scrollable.x:taskData.left;// If there are more elements than baselines, remove some elements.
if(toRemove.length){toRemove.forEach(function(e){return e.remove();});baselineElements.length=baselineCount;}// If there are more baselines than elements, add some elements.
else{for(var index=baselineElements.length;index<baselines.length;index++){baselineElements.push(DomHelper.createElement({dataset:{index:index},parent:parent}));}}// If we have been rendered using a reclaimed task element for another record, it will
// have been emptied, so replace any baselines back into the parent element.
if(baselines.length){if(baselineElements[0].parentNode!==parent){var frag=document.createDocumentFragment();for(var _index3=0;_index3<baselines.length;_index3++){frag.appendChild(baselineElements[_index3]);}parent.insertBefore(frag,taskData.layoutCache.eventEl.nextSibling);}}if(baselineCount){for(var _index4=0;_index4<baselineCount;_index4++){var baseline=baselines[_index4],renderData=mapper.getTimeSpanRenderData(baseline,taskRecord,{viewport:true});baselineElements[_index4].className=baseline.cls+'b-task-baseline';baselineElements[_index4].style=renderData?"width:".concat(renderData.width,"px;left:").concat(renderData.left-taskLeft,"px"):'width:0';}}}}//endregion
},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){var me=this,dependencies=me.client.features.dependencies;me._disabled=disabled;if(me.tooltip){me.tooltip.disabled=disabled;}// Hide or show the baseline elements
me.updateHostClasslist();// Redraw dependencies *after* elements have animated to new position,
// and we must clear cache because of position changes.
if(dependencies){me.client.setTimeout(function(){return dependencies.scheduleDraw(true);},300);}}}],[{key:"defaultConfig",//region Config
// Default configuration.
get:function get(){return{cls:'b-gantt-task-tooltip',align:'t-b',forSelector:baselineSelector,recordType:'baseline'};}}]);return Baselines;}(TooltipBase);exports.Baselines=Baselines;Baselines._$name='Baselines';GridFeatureManager.registerFeature(Baselines,false,'Gantt');var Editor$1=/*#__PURE__*/function(_Editor){_inherits2(Editor$1,_Editor);function Editor$1(){_classCallCheck2(this,Editor$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(Editor$1).apply(this,arguments));}_createClass2(Editor$1,[{key:"onEditComplete",value:function(){var _onEditComplete=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee72(){var me,record,dataField,inputField,oldValue,lastAlignSpec,grid,target,value,dependencyStore,toValidate,results,checkNext,_checkNext,valid,setterName;return regeneratorRuntime.wrap(function _callee72$(_context212){while(1){switch(_context212.prev=_context212.next){case 0:me=this,record=me.record,dataField=me.dataField,inputField=me.inputField,oldValue=me.oldValue,lastAlignSpec=me.lastAlignSpec,grid=me.owner,target=lastAlignSpec.target;value=inputField.value;if(!(inputField instanceof DependencyField)){_context212.next=19;break;}if(me.isFinishing){_context212.next=18;break;}// Hiding must not trigger our blurAction
me.isFinishing=true;me.hide();if(!(record&&value)){_context212.next=15;break;}_checkNext=function _ref396(){_checkNext=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee71(){var dependency;return regeneratorRuntime.wrap(function _callee71$(_context211){while(1){switch(_context211.prev=_context211.next){case 0:dependency=toValidate.shift();if(!dependency){_context211.next=9;break;}_context211.t0=results;_context211.next=5;return dependencyStore.isValidDependency({fromEvent:dependency.fromEvent,toEvent:dependency.toEvent,lag:dependency.lag,lagUnit:dependency.lagUnit,type:dependency.type});case 5:_context211.t1=_context211.sent;_context211.t0.push.call(_context211.t0,_context211.t1);_context211.next=9;return checkNext();case 9:case"end":return _context211.stop();}}},_callee71);}));return _checkNext.apply(this,arguments);};checkNext=function _ref395(){return _checkNext.apply(this,arguments);};value=value.slice();dependencyStore=grid.dependencyStore,toValidate=value.filter(function(v){return!v.project;}),results=[];// Only allowed to check one dependency at the time, since validation triggers a propagate.
// Need to wait for one to finish before starting the next.
_context212.next=13;return checkNext();case 13:valid=results.every(function(result){return result;});if(valid){setterName="set".concat(StringHelper.capitalizeFirstLetter(dataField));if(record[setterName]){record[setterName](value);}else{record[dataField]=value;}me.trigger('completeAsync',{value:value,oldValue:oldValue});}else{me.trigger('cancelAsync',{value:value,oldValue:oldValue});}case 15:me.trigger('complete',{value:value,oldValue:oldValue});if(target.nodeType===1){target.classList.remove('b-editing');}me.isFinishing=false;case 18:return _context212.abrupt("return");case 19:_get2(_getPrototypeOf2(Editor$1.prototype),"onEditComplete",this).call(this);case 20:case"end":return _context212.stop();}}},_callee72,this);}));function onEditComplete(){return _onEditComplete.apply(this,arguments);}return onEditComplete;}()}]);return Editor$1;}(Editor);exports.Editor=Editor$1;Editor$1._$name='Editor';BryntumWidgetAdapterRegister.register('gantteditor',Editor$1);/**
 * @module Gantt/feature/CellEdit
 */ /**
 * Extends the {@link Grid.feature.CellEdit} to encapsulate Gantt functionality. This feature is enabled by <b>default</b>
 *
 * {@inlineexample gantt/feature/CellEdit.js}
 *
 * Editing can be started by a user by double-clicking an editable cell in the gantt's data grid, or it can be started programatically
 * by calling {@link Grid/feature/CellEdit#function-startEditing} and providing it with correct cell context.
 *
 * See {@link #function-doAddNewAtEnd}.
 *
 * @extends Grid/feature/CellEdit
 *
 * @classtype ganttCellEdit
 * @typings Grid/feature/CellEdit -> Grid/feature/GridCellEdit
 */var CellEdit$1=/*#__PURE__*/function(_CellEdit){_inherits2(CellEdit$1,_CellEdit);function CellEdit$1(){_classCallCheck2(this,CellEdit$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(CellEdit$1).apply(this,arguments));}_createClass2(CellEdit$1,[{key:"getEditorListeners",value:function getEditorListeners(){return Object.assign(_get2(_getPrototypeOf2(CellEdit$1.prototype),"getEditorListeners",this).call(this),{completeasync:'onEditorCompleteAsync',cancelasync:'onEditorCancelAsync'});}},{key:"onEditorCompleteAsync",value:function onEditorCompleteAsync(_ref397){var editor=_ref397.source;var grid=this.grid,editorContext=editor.cellEditorContext;grid.trigger('finishCellEditAsync',{grid:grid,editorContext:editorContext});}},{key:"onEditorCancelAsync",value:function onEditorCancelAsync(_ref398){var editor=_ref398.source;var grid=this.grid,editorContext=editor.cellEditorContext;grid.trigger('cancelCellEditAsync',{grid:grid,editorContext:editorContext});}},{key:"getAdjacentEditableCell",value:function getAdjacentEditableCell(cellInfo,isForward){var _this145=this;var addNewAtEnd=this.addNewAtEnd,grid=this.grid,store=grid.store,rowId=cellInfo.id,columnId=cellInfo.columnId,columns=grid.columns,column=columns.getAdjacentLeaf(columnId,isForward);while(rowId){var record=store.getById(rowId);if(column){columnId=column.id;if(!column.hidden&&column.editor&&column.canEdit(record)){return{id:rowId,columnId:column.id};}column=columns.getAdjacentLeaf(columnId,isForward);}else{var editRec=store.getAdjacent(cellInfo.id,isForward,false,true);// If we are TABbing off the end, finshEditing and return null which starts no new edit.
// Creation of the new record is async, so create it, and when it's there
// edit its first editable cell.
if(!editRec&&isForward&&addNewAtEnd){this.doAddNewAtEnd().then(function(){// Iterate and try to find the first editable cell in the new record
var startCell=_this145.getAdjacentEditableCell(cellInfo,true);if(startCell){_this145.startEditing(startCell);}});this.finishEditing();return null;}rowId=editRec&&editRec.id;if(editRec){column=isForward?columns.first:columns.leaves[columns.leaves.length-1];}}}return null;}/**
     * Adds a new, empty record at the end of the TaskStore with the initial
     * data specified by the {@link Grid.feature.CellEdit#config-addNewAtEnd} setting.
     *
     * @returns {Promise} Newly added record wrapped in a promise.
     */},{key:"doAddNewAtEnd",value:function(){var _doAddNewAtEnd=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee73(){var addNewAtEnd,grid,store,rowManager,rec;return regeneratorRuntime.wrap(function _callee73$(_context213){while(1){switch(_context213.prev=_context213.next){case 0:addNewAtEnd=this.addNewAtEnd,grid=this.grid,store=grid.taskStore,rowManager=grid.rowManager;rec=store.rootNode.appendChild(Object.assign({name:'New task',startDate:store.getProject().startDate},addNewAtEnd));_context213.next=4;return store.getProject().propagate();case 4:// If the new record was not added due to it being off the end of the rendered block
// ensure we force it to be there before we attempt to edit it.
if(!rowManager.getRowFor(rec)){rowManager.displayRecordAtBottom();}return _context213.abrupt("return",rec);case 6:case"end":return _context213.stop();}}},_callee73,this);}));function doAddNewAtEnd(){return _doAddNewAtEnd.apply(this,arguments);}return doAddNewAtEnd;}()}],[{key:"defaultConfig",get:function get(){return{editorClass:Editor$1};}}]);return CellEdit$1;}(CellEdit);exports.CellEdit=CellEdit$1;CellEdit$1._$name='CellEdit';GridFeatureManager.registerFeature(CellEdit$1,true);/**
 * @module Gantt/feature/CriticalPaths
 */ /**
 * This feature highlights the project _critical paths_.
 * Every task is important, but only some of them are critical.
 * The critical path is a chain of linked tasks that directly affects the project finish date.
 * If any task on the critical path is late, the whole project is late.
 *
 * The required class is loaded by default.
 * The one just needs to enable the visualization:
 *
 * ```javascript
 * // let's visualize the project critical paths
 * gantt.features.criticalPaths.disabled = false;
 * ```
 * {@inlineexample gantt/feature/CriticalPaths.js}
 *
 * @extends Common/mixin/InstancePlugin
 */var CriticalPaths=/*#__PURE__*/function(_Delayable19){_inherits2(CriticalPaths,_Delayable19);function CriticalPaths(){_classCallCheck2(this,CriticalPaths);return _possibleConstructorReturn2(this,_getPrototypeOf2(CriticalPaths).apply(this,arguments));}_createClass2(CriticalPaths,[{key:"render",//endregion
//region Init
/**
     * Called when gantt is rendered.
     * @private
     */value:function render(){var me=this;me.client.project.on({commit:me.onProjectCommit,thisObj:me});}},{key:"getDependenciesFeature",value:function getDependenciesFeature(){var me=this,client=me.client;// return dependencies feature only when it's ready
return client.foregroundCanvas&&client.features.dependencies;}},{key:"highlightCriticalPaths",value:function highlightCriticalPaths(){var me=this,client=me.client,project=client.project,dependencies=me.getDependenciesFeature();// the component has cls set means we had CPs rendered so need to clean them
if(client.element.classList.contains(me.cls))me.unhighlightCriticalPaths();// if we have dependencies rendered need to highlight those of them which take part in the CPs
dependencies&&project.criticalPaths.forEach(function(path){path.forEach(function(node){node.dependency&&dependencies.highlight(node.dependency,me.criticalDependencyCls);});});// add the feature base cls to enable stylesheets
client.element.classList.add(me.cls);/**
         * Fired when critical paths get highlighted.
         *
         * See also: {@link #event-criticalPathsUnhighlighted}
         * @event criticalPathsHighlighted
         */me.client.trigger('criticalPathsHighlighted');}},{key:"unhighlightCriticalPaths",value:function unhighlightCriticalPaths(){var me=this,client=me.client,project=client.project,dependencies=me.getDependenciesFeature();// if we have dependencies rendered remove classes from them
if(dependencies){project.dependencyStore.forEach(function(dependency){return dependencies.unhighlight(dependency,me.criticalDependencyCls);});}// remove the feature base cls
client.element.classList.remove(me.cls);/**
         * Fired when critical paths get hidden.
         *
         * See also: {@link #event-criticalPathsHighlighted}
         * @event criticalPathsUnhighlighted
         */me.client.trigger('criticalPathsUnhighlighted');}//endregion
},{key:"onProjectCommit",value:function onProjectCommit(_ref399){var records=_ref399.records,changedAtoms=_ref399.changedAtoms;var me=this,project=me.client.project;// if the feature is enabled and the project criticalPaths field was updated
if(!me.disabled&&records.has(project)&&changedAtoms.includes(project.$.criticalPaths)){me.highlightCriticalPaths();}}},{key:"disabled",get:function get(){return _get2(_getPrototypeOf2(CriticalPaths.prototype),"disabled",this);},set:function set(value){_set(_getPrototypeOf2(CriticalPaths.prototype),"disabled",value,this,true);if(value){this.unhighlightCriticalPaths();}else{this.highlightCriticalPaths();}}}],[{key:"defaultConfig",//region Config
get:function get(){return{cls:'b-gantt-critical-paths',criticalDependencyCls:'b-critical',disabled:true};}},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return CriticalPaths;}(Delayable(InstancePlugin));exports.CriticalPaths=CriticalPaths;CriticalPaths._$name='CriticalPaths';GridFeatureManager.registerFeature(CriticalPaths,true,'Gantt');var TaskCache=/*#__PURE__*/function(){function TaskCache(taskRendering){_classCallCheck2(this,TaskCache);var me=this;me.taskRendering=taskRendering;// caching layout calculations
me.renderedTasksMap={};me.rowLayoutCache={};}/**
     * Clear layout cache
     * @protected
     */_createClass2(TaskCache,[{key:"clear",value:function clear(){var removeDivs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var me=this;me.renderedTasksMap={};Object.keys(me.rowLayoutCache).forEach(function(taskId){return me.clearRow(taskId,removeDivs);});if(removeDivs){me.taskRendering.clearAllDivs();}}//region Render data
},{key:"addRenderedTask",value:function addRenderedTask(taskId,data){this.renderedTasksMap[taskId]=data;}},{key:"getRenderedTimeSpan",value:function getRenderedTimeSpan(taskId){return this.renderedTasksMap[taskId];}// clearRenderedTimeSpan(taskId) {
//     delete this.renderedTasksMap[taskId];
// }
//
// getRenderedEvents(taskId) {
//     return this.renderedTasksMap[taskId];
// }
//
// clearRenderedEvents(taskId) {
//     delete this.renderedTasksMap[taskId];
// }
//endregion
//region Task
},{key:"getTimeSpan",value:function getTimeSpan(taskId){var resourceCache=this.rowLayoutCache[taskId];if(!resourceCache)return null;return resourceCache.layoutCache;}/**
     * Clears the task layout for the passed task. Will usually preserve the tasks DIVs for recycling unless `removeDiv`
     * is passed. If preserving them, it will hide the div unless `remainVisible` is passed.
     * @param {*} taskId ID of task
     * @param {*} taskIdAgain ID of task again, to match scheduler caching
     * @param {*} removeDiv Defaults to false
     * @param {*} remainVisible Defaults to false
     * @private
     */},{key:"clearTask",value:function clearTask(taskId){var removeDiv=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var remainVisible=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,eventCache=me.getTimeSpan(taskId,taskId);if(!eventCache)return null;if(eventCache.div){me.taskRendering.clearDiv(eventCache.div,removeDiv,remainVisible);}me.rowLayoutCache[taskId].layoutCache=null;}//endregion
//region Row
},{key:"changeRowId",value:function changeRowId(fromId,toId){var task=this.getRow(fromId);if(task){delete this.rowLayoutCache[fromId];this.addRow(toId,task);}}},{key:"getRow",value:function getRow(taskId){return this.rowLayoutCache[taskId];}},{key:"addRow",value:function addRow(taskId,data){this.rowLayoutCache[taskId]=data;}},{key:"clearRow",value:function clearRow(taskId){var removeDivs=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var remainVisible=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,resourceCache=me.rowLayoutCache[taskId];if(!resourceCache)return;if(me.renderedTasksMap[taskId])delete me.renderedTasksMap[taskId];me.clearTask(taskId,removeDivs,remainVisible);delete me.rowLayoutCache[taskId];}//endregion
}]);return TaskCache;}();TaskCache._$name='TaskCache';/**
 * @module Gantt/view/orientation/TaskRendering
 */ /**
 * Handles rendering of tasks. The need to interact with this class should be
 * minimal, most functions are called from Gantt or its mixins.
 * @private
 */var TaskRendering=/*#__PURE__*/function(_BaseHorizontalMapper2){_inherits2(TaskRendering,_BaseHorizontalMapper2);function TaskRendering(){_classCallCheck2(this,TaskRendering);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskRendering).apply(this,arguments));}_createClass2(TaskRendering,[{key:"construct",//region Init
value:function construct(gantt){var me=this;me.gantt=gantt;_get2(_getPrototypeOf2(TaskRendering.prototype),"construct",this).call(this,gantt);me.cache=new TaskCache(this);}},{key:"bindTaskStore",value:function bindTaskStore(taskStore){var me=this;me.taskStoreDetacher&&me.taskStoreDetacher();// using direct events that clear tasks cache before normal rendering process starts
me.taskStoreDetacher=taskStore.on({thisObj:me,add:me.onTaskStoreAdd,remove:me.onTaskStoreRemove,update:me.onTaskStoreUpdate,idChange:me.onTaskStoreIdChange,refresh:me.onTaskStoreRefresh,removeall:me.onTaskStoreRefresh,prio:1});}//endregion
//region Store events
},{key:"clearCacheBelowTask",value:function clearCacheBelowTask(record){var gantt=this.gantt,taskStore=gantt.taskStore;var startRow=gantt.getRowFor(record);// Record may be:
// - rendered
// - appended but not rendered
// - removed
// Here iterate over tasks, starting from passed one, looking for first rendered task
while(!startRow&&(record=taskStore.getNext(record))){startRow=gantt.getRowFor(record);}// There still might not be startRow if we append record to the end
if(startRow){while(record&&gantt.getRowFor(record)){this.cache.clearRow(record.id);record=taskStore.getNext(record);}}}},{key:"onTaskStoreAdd",value:function onTaskStoreAdd(_ref400){var records=_ref400.records,isExpand=_ref400.isExpand,isChild=_ref400.isChild;if(!isExpand&&!(isChild&&!records[0].parent.isExpanded(this.gantt.taskStore))){this.clearCacheBelowTask(records[0]);}}},{key:"onTaskStoreIdChange",value:function onTaskStoreIdChange(_ref401){var oldValue=_ref401.oldValue,value=_ref401.value;this.cache.changeRowId(oldValue,value);}},{key:"onTaskStoreUpdate",value:function onTaskStoreUpdate(_ref402){var record=_ref402.record;var me=this,id=record.id;if(me.cache.getRow(id)){var eventLayoutData=me.getTimeSpanRenderData(record,record),isVisible=Boolean(eventLayoutData&&me.isEventInView(eventLayoutData));me.gantt.runWithTransition(function(){return me.cache.clearRow(id,false,isVisible);},me.gantt.transitionDuration);}}},{key:"onTaskStoreRemove",value:function onTaskStoreRemove(_ref403){var _this146=this;var records=_ref403.allRecords,isCollapse=_ref403.isCollapse,index=_ref403.index;if(!isCollapse&&index!==-1){records.forEach(function(taskRecord){_this146.cache.clearRow(taskRecord.id,true);});var task=this.gantt.taskStore.getAt(Math.max(index,0));task&&this.clearCacheBelowTask(task);}}},{key:"onTaskStoreRefresh",value:function onTaskStoreRefresh(){this.cache.clear();}// private
},{key:"onTranslateRow",value:function onTranslateRow(_ref404){var row=_ref404.source;var taskId=row.id;if(taskId){var me=this,taskCache=me.cache.getRow(taskId);if(taskCache&&taskCache.rowTop!==row.top){var deltaY=row.top-taskCache.rowTop,taskLayout=taskCache.layoutCache;taskLayout.top+=deltaY;taskLayout.bottom+=deltaY;if(taskLayout.div)me.positionEvent(taskLayout.div,taskLayout.start,taskLayout.top);taskCache.top+=deltaY;taskCache.rowTop=row.top;}}}//endregion
//region Layout & render events
/**
     * Converts a start/endDate into a MS value used when rendering the event.
     * @private
     * @param {Gantt.model.TaskModel} taskRecord
     * @returns {Object} Object of format { startMS, endMS, durationMS }
     */},{key:"calculateMS",value:function calculateMS(taskRecord){var startMS=taskRecord.startDate.getTime(),endMS=taskRecord.endDate.getTime(),durationMS=endMS-startMS;return{startMS:startMS,endMS:endMS,durationMS:durationMS};}/**
     * Generates data used in the template when rendering a task. For example which css classes to use. Also applies
     * #taskBodyTemplate and calls the {@link Gantt/view/Gantt#config-taskRenderer}.
     * @private
     * @param {Gantt.model.TaskModel} taskRecord Task to generate data for
     * @returns {Object} Data to use in task template, or `undefined` if the event is outside of the rendered zone.
     */},{key:"generateTplData",value:function generateTplData(taskRecord){var me=this,gantt=me.gantt,renderData=me.getTimeSpanRenderData(taskRecord,taskRecord,{viewport:true});var taskContent='';if(renderData){var _Object$assign9,_ref405;var resizable=taskRecord.isResizable===undefined?true:taskRecord.isResizable;if(renderData.startsOutsideView){if(resizable===true)resizable='end';else if(resizable==='start')resizable=false;}if(renderData.endsOutsideView){if(resizable===true)resizable='start';else if(resizable==='end')resizable=false;}// Task record cls property is now a DomClassList, so clone it
// so that it can be manipulated here and by renderers.
renderData.cls=taskRecord.isResourceTimeRange?new DomClassList():taskRecord.cls.clone();// Gather event element classes as keys to add to the renderData.cls DomClassList.
// Truthy value means the key will be added as a class name.
Object.assign(renderData.cls,(_Object$assign9={},_defineProperty(_Object$assign9,gantt.eventCls,1),_defineProperty(_Object$assign9,gantt.generatedIdCls,taskRecord.hasGeneratedId),_defineProperty(_Object$assign9,gantt.dirtyCls,taskRecord.modifications),_defineProperty(_Object$assign9,gantt.committingCls,taskRecord.isCommitting),_defineProperty(_Object$assign9,gantt.endsOutsideViewCls,renderData.endsOutsideView),_defineProperty(_Object$assign9,gantt.startsOutsideViewCls,renderData.startsOutsideView),_defineProperty(_Object$assign9,gantt.fixedEventCls,taskRecord.isDraggable===false),_defineProperty(_Object$assign9,"b-sch-event-resizable-".concat(resizable),1),_defineProperty(_Object$assign9,'b-milestone',taskRecord.milestone),_defineProperty(_Object$assign9,'b-critical',taskRecord.critical),_defineProperty(_Object$assign9,'b-task-started',taskRecord.percentDone>0),_defineProperty(_Object$assign9,'b-task-finished',taskRecord.isCompleted),_defineProperty(_Object$assign9,'b-task-selected',gantt.selectedRecords.includes(taskRecord)),_Object$assign9));renderData.iconCls=new DomClassList(taskRecord.get(gantt.eventBarIconClsField)||taskRecord.iconCls);renderData.id=gantt.getEventRenderId(taskRecord);renderData.style=taskRecord.style||'';renderData.taskId=taskRecord.id;// Classes for the wrapping div
renderData.wrapperCls=new DomClassList((_ref405={},_defineProperty(_ref405,gantt.eventCls+'-wrap',1),_defineProperty(_ref405,"".concat(gantt.eventCls,"-parent"),taskRecord.isParent),_defineProperty(_ref405,'b-milestone-wrap',taskRecord.milestone),_defineProperty(_ref405,'b-has-baselines',taskRecord.hasBaselines),_ref405));var eventStyle=taskRecord.eventStyle||gantt.eventStyle,eventColor=taskRecord.eventColor||gantt.eventColor;renderData.eventColor=eventColor;renderData.eventStyle=eventStyle;if(gantt.taskRenderer){// User has specified a renderer fn, either to return a simple string, or an object intended for the taskBodyTemplate
var value=gantt.taskRenderer.call(gantt.taskRendererThisObj||gantt,{taskRecord:taskRecord,tplData:renderData});// If the user's renderer coerced it into a string, recreate a DomClassList.
if(typeof renderData.cls==='string'){renderData.cls=new DomClassList(renderData.cls);}// Same goes for iconCls
if(typeof renderData.iconCls==='string'){renderData.iconCls=new DomClassList(renderData.iconCls);}taskContent=gantt.taskBodyTemplate&&gantt.taskBodyTemplate(value)||(value==null?'':String(value));}else if(gantt.taskBodyTemplate){// User has specified an eventBodyTemplate, but no renderer - just apply the entire event record data.
taskContent=gantt.taskBodyTemplate(taskRecord);}// else if (gantt.taskTextField) {
//     // User has specified a field in the data model to read from
//     eventContent = taskRecord.data[gantt.taskTextField] || '';
// }
// If there are any iconCls entries...
renderData.cls['b-sch-event-withicon']=renderData.iconCls.length;// renderers have last say on style & color
renderData.wrapperCls["b-sch-style-".concat(renderData.eventStyle)]=renderData.eventStyle;if(renderData.eventColor&&renderData.eventColor.startsWith('#')){renderData.style="background-color:".concat(renderData.eventColor,";")+renderData.style;}else{renderData.wrapperCls["b-sch-color-".concat(renderData.eventColor)]=renderData.eventColor;}if(!gantt.taskBodyTemplate){// Give milestone a dedicated label element so we can use padding
if(taskRecord.milestone&&taskContent){taskContent="<label>".concat(taskContent,"</label>");}if(renderData.iconCls&&renderData.iconCls.length){taskContent="<i class=\"".concat(renderData.iconCls,"\"></i>").concat(taskContent);}}// html, use templates fragment
if(taskContent.includes('<')){// Create content as a DocumentFragment which may now be exposed to Features.
renderData.body=DomHelper.createElementFromTemplate(taskContent,{fragment:true});}// plain text, create fragment with the text in it
else{renderData.body=document.createDocumentFragment();renderData.body.textContent=taskContent;}}// Method which features may chain in to
gantt.onTaskDataGenerated(renderData);return renderData;}/**
     * Layouts a task on a row, caching on each task
     * @private
     * @param {Gantt.view.Gantt} gantt
     * @param {Gantt.model.TaskModel} task
     * @param {Grid.row.Row} row
     * @returns {boolean} Returns false if no events on row, otherwise true
     */},{key:"layoutTask",value:function layoutTask(gantt,task,row){var me=this,taskId=task.id;if(!me.timeAxis.isTimeSpanInAxis(task)){me.cache.clearRow(taskId);return false;}// Iterate events belonging to current row
var tplData=me.generateTplData(task);var rowHeight=me.gantt.rowHeight||0,absoluteTop=row.top;// adjust row top, when it is rendered on top (since in that case top is not known until height is set)
if(rowHeight!==row.height&&row.estimatedTop){absoluteTop=row.top+row.height-rowHeight;}// cache boxes
var layout=me.cache.getTimeSpan(taskId),relativeTop=tplData.top;tplData.top+=absoluteTop;tplData.rowTop=absoluteTop;// cache layout to not have to recalculate every time
tplData.layoutCache={layout:true,// reuse div if already assigned (for example when resizing an event)
div:layout&&layout.div,eventEl:layout&&layout.eventEl,width:tplData.width,height:tplData.height,start:tplData.left,end:tplData.left+tplData.width,relativeTop:relativeTop,top:tplData.top,relativeBottom:relativeTop+tplData.height,bottom:tplData.top+tplData.height};me.cache.addRow(taskId,tplData);return true;}// Overrides fn from baseclass to trigger a paint task with correct params
},{key:"triggerPaint",value:function triggerPaint(taskData,element){var isRepaint=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var gantt=this.gantt;gantt.trigger(isRepaint?'taskRepaint':'taskPaint',{taskData:taskData,taskRecord:taskData.task,element:element});}/**
     * Renders a single task, creating a div for it if needed or updates an existing div.
     * @private
     * @param data
     */},{key:"renderTask",value:function renderTask(data){var me=this,cache=me.cache,layoutCache=cache.getTimeSpan(data.taskId),renderedTask=cache.getRenderedTimeSpan(data.taskId);me.renderTimeSpan(data,layoutCache,renderedTask);cache.addRenderedTask(data.id,data);}},{key:"updateRowTimeSpans",value:function updateRowTimeSpans(row,task){var forceLayout=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,gantt=me.gantt,cache=me.cache,taskId=task.id;var taskLayout=cache.getRow(taskId);// no need to relayout events if only scrolling horizontally
if((gantt.forceLayout||forceLayout||!taskLayout)&&!me.layoutTask(gantt,task,row)){return;}// might have been updated above
taskLayout=cache.getRow(taskId);if(!taskLayout)return;cache.addRenderedTask(taskId,taskLayout);me.renderTask(taskLayout);}},{key:"renderer",value:function renderer(renderData){this.updateRowTimeSpans(renderData.row,renderData.record);renderData.size.height=this.gantt.rowHeight;}//endregion
//region Div reusage
// called from cache when removing events
},{key:"clearDiv",value:function clearDiv(div,remove,remainVisible){var me=this;if(!remove||remainVisible){me.releaseTimeSpanDiv(div,remainVisible);}else{div.style.opacity=0;me.setTimeout(function(){div.remove();div.style.opacity=1;},200);}}// called from cache when removing events
},{key:"clearAllDivs",value:function clearAllDivs(){var me=this;me.availableDivs.forEach(function(div){return div.remove();});me.availableDivs.length=0;me.availableDivsById={};}//endregion
//region Dependency connectors
// Cannot be moved from this file, called from currentOrientation.xx
/**
     * Gets displaying item start side
     *
     * @param {Gantt.model.TaskModel} taskRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorStartSide",value:function getConnectorStartSide(taskRecord){return'left';}/**
     * Gets displaying item end side
     *
     * @param {Gantt.model.TaskModel} taskRecord
     * @return {String} 'left' / 'right' / 'top' / 'bottom'
     */},{key:"getConnectorEndSide",value:function getConnectorEndSide(taskRecord){return'right';}// We only have to ask this question in the horizontal axis.
// Vertical rendering is driven fully by the Grid's RowManager
// rendering and derendering rows.
},{key:"isEventInView",value:function isEventInView(eventLayout){var viewportStart=this.view.timeAxis.startDate,viewportEnd=this.view.timeAxis.endDate;// Milestones need to be visible at start & end
if(eventLayout.startMs===eventLayout.endMs){return eventLayout.startMs<=viewportEnd&&eventLayout.endMs>viewportStart;}// But normal events do not
return eventLayout.startMs<viewportEnd&&eventLayout.endMs>viewportStart;}//endregion
}]);return TaskRendering;}(BaseHorizontalMapper);TaskRendering._$name='TaskRendering';/**
 * @module Gantt/view/mixin/GanttDom
 */var hyphenRe$1=/-/g;/**
 * Mixin with TaskModel <-> HTMLElement mapping functions
 *
 * @mixin
 */var GanttDom=function GanttDom(Target){return(/*#__PURE__*/function(_ref406){_inherits2(GanttDom,_ref406);function GanttDom(){_classCallCheck2(this,GanttDom);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttDom).apply(this,arguments));}_createClass2(GanttDom,[{key:"resolveEventRecord",// Alias for resolveTaskRecord method to satisfy the scheduler naming requirements.
value:function resolveEventRecord(element){return this.resolveTaskRecord(element);}/**
     * Returns the task record for a DOM element
     * @param {HTMLElement} element The DOM node to lookup
     * @return {Gantt.model.TaskModel} The task record
     */},{key:"resolveTaskRecord",value:function resolveTaskRecord(element){element=DomHelper.up(element,this.eventSelector);if(!element){return null;}return this.getTaskRecordFromDomId(element.id);}/**
     * Returns the task record for a DOM id
     * @param {String} id The id of the DOM node
     * @return {Gantt.model.TaskModel} The task record
     */},{key:"getTaskRecordFromDomId",value:function getTaskRecordFromDomId(id){id=this.getTaskIdFromDomNodeId(id);return this.taskStore.getById(id);}/**
     * Returns the task id for a DOM id
     * @private
     * @param {String} id The id of the DOM node
     * @return {String} An event record (internal) id
     */},{key:"getTaskIdFromDomNodeId",value:function getTaskIdFromDomNodeId(id){// id format is "{gantt.id}-{id}"
return id.substr(this.id.toString().length+1);}/**
     * Returns the HTMLElement representing a task record.
     *
     * @param {Gantt.model.TaskModel} taskRecord A task record
     *
     * @return {HTMLElement} The element representing the task record
     */},{key:"getElementFromTaskRecord",value:function getElementFromTaskRecord(taskRecord){var layout=this.currentOrientation.cache.getRenderedTimeSpan(taskRecord.id);if(layout&&layout.layoutCache){return layout.layoutCache.eventEl;}}// alias to make scheduler features applied to Gantt happy
// TODO: since we have decided to call tasks events then the method
//       being aliased should be renamed
},{key:"getElementFromEventRecord",value:function getElementFromEventRecord(eventRecord){return this.getElementFromTaskRecord(eventRecord);}/**
     * Generates the element `id` for an event element. This is used when
     * recycling an event div which has been moved from one resource to
     * another. The event is assigned its new render id *before* being
     * returned to the free pool, so that when the render engine requests
     * a div from the free pool, the same div will be returned and it will
     * smoothly transition to its new position.
     * @param {Scheduler.model.EventModel} eventRecord
     * @param {Scheduler.model.ResourceModel} resourceRecord
     * @private
     */},{key:"getEventRenderId",value:function getEventRenderId(taskRecord){// TODO: use DomHelper.makeValidId or StringHelper.createId. Cannot currently since they strip out ids that only contains numbers
return"".concat(this.id.toString().replace(hyphenRe$1,'_'),"-").concat(taskRecord.id);}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GanttDom;}(Target||Base));};/**
 * @module Gantt/view/mixin/GanttRegions
 */ /**
 * Functions to get regions (bounding boxes) for gantt, tasks etc.
 *
 * @mixin
 */var GanttRegions=function GanttRegions(Target){return(/*#__PURE__*/function(_ref407){_inherits2(GanttRegions,_ref407);function GanttRegions(){_classCallCheck2(this,GanttRegions);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttRegions).apply(this,arguments));}_createClass2(GanttRegions,[{key:"getScheduleRegion",/**
     * Gets the region represented by the timeline and optionally only for a single task
     * @param {Gantt.model.TaskModel} taskRecord (optional) The task record
     * @return {Object} The region of the schedule
     */value:function getScheduleRegion(taskRecord,local){var me=this,element=me.timeAxisSubGridElement;var region;if(taskRecord){var taskElement=me.getElementFromTaskRecord(taskRecord);region=Rectangle.from(me.getRowById(taskRecord.id).getElement('locked'));if(taskElement){var taskRegion=Rectangle.from(taskElement,element);region.y=taskRegion.y;region.bottom=taskRegion.bottom;}else{region.y=region.y+me.barMargin;region.bottom=region.bottom-me.barMargin;}}else{// TODO: This is what the bizarre function that was removed here did.
// The coordinate space needs to be sorted out here!
region=Rectangle.from(element).moveTo(null,0);region.width=element.scrollWidth;region.y=region.y+me.barMargin;region.bottom=region.bottom-me.barMargin;}var taStart=me.timeAxis.startDate,taEnd=me.timeAxis.endDate,dateConstraints=me.getDateConstraints(taskRecord)||{start:taStart,end:taEnd},top=region.y,bottom=region.bottom;var startX=me.getCoordinateFromDate(DateHelper.max(taStart,dateConstraints.start)),endX=me.getCoordinateFromDate(DateHelper.min(taEnd,dateConstraints.end));if(!local){startX=me.currentOrientation.translateToPageCoordinate(startX);endX=me.currentOrientation.translateToPageCoordinate(endX);}return{top:top,right:Math.max(startX,endX),bottom:bottom,left:Math.min(startX,endX)};}// Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)
},{key:"isRowVisible",value:function isRowVisible(taskRecord){// records in collapsed groups/brances etc are removed from processedRecords
return this.store.indexOf(taskRecord)>=0;}/**
     * Get the region for a specified task
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Boolean} includeOutside Specify true to get boxes for events outside of the rendered zone in both
     * dimensions. This option is used when calculating dependency lines, and we need to include routes from events
     * which may be outside the rendered zone.
     * @param {Boolean} inner Specify true to return the box for the task bar within the wrapper.
     * @returns {*}
     */},{key:"getTaskBox",value:function getTaskBox(taskRecord){var includeOutside=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var inner=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this;// task caches its position when rendered, return it if available
var cached=me.currentOrientation.cache.getTimeSpan(taskRecord.id),taskElement;if(cached){if(inner){taskElement=cached.eventEl;}else{return cached;}}var viewStartDate=me.timeAxis.startDate,viewEndDate=me.timeAxis.endDate,taskStartDate=taskRecord.startDate,taskEndDate=taskRecord.endDate;var result=null;// Checking if task is within current time axis timespan and is visible, i.e. it's not rendered
// within a collapsed row (scheduler supports resource tree store as well as flat resource store).
if(taskStartDate&&taskEndDate&&(includeOutside||DateHelper.intersectSpans(taskStartDate,taskEndDate,viewStartDate,viewEndDate))&&this.isRowVisible(taskRecord)){if(inner){if(!taskElement){taskElement=me.getElementFromTaskRecord(taskRecord);}var taskRect=taskElement&&Rectangle.from(taskElement,me.timeAxisSubGridElement);// Use the task element's box if requested and the element exists
if(taskRect){// Use the translate value in case it's being animated
taskRect.moveTo(DomHelper.getTranslateX(taskElement.parentNode));return{layout:true,start:taskRect.x,end:taskRect.right,top:taskRect.y,bottom:taskRect.bottom};}}var horizontalAdjustment=taskRecord.milestone?me.features.dependencies.pathFinder.startArrowMargin:0,start,end;if(taskStartDate<viewStartDate){start=me.getCoordinateFromDate(viewStartDate)-horizontalAdjustment;}else if(taskStartDate>viewEndDate){start=me.getCoordinateFromDate(viewEndDate)+horizontalAdjustment;}else{start=me.getCoordinateFromDate(taskStartDate);}if(taskEndDate<viewStartDate){end=me.getCoordinateFromDate(viewStartDate)-horizontalAdjustment;}else if(taskEndDate>viewEndDate){end=me.getCoordinateFromDate(viewEndDate)+horizontalAdjustment;}else{end=me.getCoordinateFromDate(taskEndDate);}result={layout:false,start:start,end:end};// Request local record coordinates within the scroll range.
var recordCoords=me.rowManager.getRecordCoords(taskRecord,true);// faster than Object.assign...
result.top=recordCoords.y+me.barMargin;result.height=Math.max(me.rowManager.rowHeight-2*me.barMargin,1);result.bottom=result.top+result.height;}return result;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GanttRegions;}(Target||Base));};/**
 * @module Gantt/view/mixin/GanttScroll
 */var defaultScrollOptions$4={block:'nearest',edgeOffset:20};/**
 * Functions for scrolling to tasks, dates etc.
 *
 * @mixin
 */var GanttScroll=function GanttScroll(Target){return(/*#__PURE__*/function(_ref408){_inherits2(GanttScroll,_ref408);function GanttScroll(){_classCallCheck2(this,GanttScroll);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttScroll).apply(this,arguments));}_createClass2(GanttScroll,[{key:"scrollTaskIntoView",/**
     * Scrolls a task record into the viewport.
     *
     * @param {Gantt.model.TaskModel} taskRecord The task record to scroll into view
     * @param {Object} [options] How to scroll.
     * @param {String} [options.block=nearest] How far to scroll the event: `start/end/center/nearest`.
     * @param {Number} [options.edgeOffset=20] edgeOffset A margin *in pixels* around the event to bring into view.
     * @param {Boolean/Number} [options.animate] Set to `true` to animate the scroll, or the number of milliseconds to animate over.
     * @param {Boolean} [options.highlight] Set to `true` to highlight the event element when it is in view.
     * @param {Boolean} [options.focus] Set to `true` to focus the event element when it is in view.
     * @returns {Promise} A Promise which resolves when the scrolling is complete.
     */value:function scrollTaskIntoView(taskRecord){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$4;var me=this,taskStart=taskRecord.startDate,taskEnd=taskRecord.endDate,taskIsOutside=taskStart<me.timeAxis.startDate|(taskEnd>me.timeAxis.endDate)<<1,el;if(options.edgeOffset==null){options.edgeOffset=20;}// Make sure task is within TimeAxis time span unless extendTimeAxis passed as false.
// The TaskEdit feature passes false because it must not mutate the TimeAxis.
// Bitwise flag:
//  1 === start is before TimeAxis start.
//  2 === end is after TimeAxis end.
if(taskIsOutside&&options.extendTimeAxis!==false){var currentTimeSpanRange=me.timeAxis.endDate-me.timeAxis.startDate,startAnchorPoint,endAnchorPoint;// Event is too wide, expand the range to encompass it.
if(taskIsOutside===3){me.timeAxis.setTimeSpan(new Date(taskStart.valueOf()-currentTimeSpanRange/2),new Date(taskEnd.getTime()+currentTimeSpanRange/2));}// Event is partially or wholly outside but will fit.
// Move the TimeAxis to include it. Attempt to maintain visual position.
else{startAnchorPoint=taskIsOutside&1?me.getCoordinateFromDate(taskEnd):me.getCoordinateFromDate(taskStart);// Event starts before
if(taskIsOutside&1){me.timeAxis.setTimeSpan(new Date(taskStart),new Date(taskStart.valueOf()+currentTimeSpanRange));}// Event ends after
else{me.timeAxis.setTimeSpan(new Date(taskEnd.valueOf()-currentTimeSpanRange),new Date(taskEnd));}// Restore view to same relative scroll position.
endAnchorPoint=taskIsOutside&1?me.getCoordinateFromDate(taskRecord.endDate):me.getCoordinateFromDate(taskRecord.startDate);me.timeAxisSubGrid.scrollable.scrollBy(endAnchorPoint-startAnchorPoint);}}// Establishing element to scroll to
el=me.getElementFromTaskRecord(taskRecord);if(el){var scroller=me.timeAxisSubGrid.scrollable;// Scroll into view with animation and highlighting if needed.
// Mute scroll events during the scroll so that event rendering does't replace
// the target element.
return scroller.scrollIntoView(el,ObjectHelper.assign({silent:true},options));}else{// Event not rendered, scroll to calculated location
return me.scrollUnrenderedTaskIntoView(taskRecord,options);}}/**
     * Scrolls an unrendered task into view. Internal function used from #scrollTaskIntoView.
     * @private
     */},{key:"scrollUnrenderedTaskIntoView",value:function scrollUnrenderedTaskIntoView(taskRec){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultScrollOptions$4;if(options.edgeOffset==null){options.edgeOffset=20;}var me=this,scroller=me.timeAxisSubGrid.scrollable,box=me.getTaskBox(taskRec),// TODO: have all "box" type objects use Rectangle
scrollerViewport=scroller.viewport,targetRect=new Rectangle(box.start,box.top,box.end-box.start,box.bottom-box.top).translate(scrollerViewport.x-scroller.x,scrollerViewport.y-scroller.y);var result=scroller.scrollIntoView(targetRect,Object.assign({},options,{highlight:false}));if(options.highlight||options.focus){var detacher=me.on({taskpaint:function taskpaint(_ref409){var scheduler=_ref409.scheduler,taskRecord=_ref409.taskRecord,element=_ref409.element;if(taskRecord===taskRec){detacher();result=result.then(function(){options.highlight&&DomHelper.highlight(element);options.focus&&element.focus();});}}});}else{// Task is painter asynchronously after scroll, need to wait for corresponding event from the view
result=Promise.all([result,new Promise(function(resolve){var detacher=me.on({taskpaint:function taskpaint(_ref410){var scheduler=_ref410.scheduler,taskRecord=_ref410.taskRecord;if(taskRecord===taskRec){detacher();resolve();}}});})]);}return result;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GanttScroll;}(Target||Base));};/**
 * @module Gantt/view/mixin/GanttState
 */var copyProperties$1=['barMargin','tickWidth','zoomLevel'];/**
 * Mixin for Gantt that handles state. It serializes the following gantt properties:
 *
 * * barMargin
 * * tickWidth
 * * zoomLevel
 *
 * See {@link Grid.view.mixin.GridState} and {@link Common.mixin.State} for more information on state.
 *
 * @mixin
 */var GanttState=function GanttState(Target){return(/*#__PURE__*/function(_ref411){_inherits2(GanttState,_ref411);function GanttState(){_classCallCheck2(this,GanttState);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttState).apply(this,arguments));}_createClass2(GanttState,[{key:"getState",/**
     * Get gantts current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,
     * selectedRecordId, column states and store state etc.
     * @returns {Object} State object to be serialized
     * @private
     */value:function getState(){return ObjectHelper.copyProperties(_get2(_getPrototypeOf2(GanttState.prototype),"getState",this).call(this),this,copyProperties$1);}/**
     * Apply previously stored state.
     * @param {Object} state
     * @private
     */},{key:"applyState",value:function applyState(state){ObjectHelper.copyProperties(this,state,copyProperties$1);_get2(_getPrototypeOf2(GanttState.prototype),"applyState",this).call(this,state);}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GanttState;}(Target||Base));};/**
 * @module Gantt/view/mixin/GanttStores
 */ /**
 * Functions for store assignment and store event listeners
 *
 * @mixin
 */var GanttStores=function GanttStores(Target){return(/*#__PURE__*/function(_ref412){_inherits2(GanttStores,_ref412);function GanttStores(){_classCallCheck2(this,GanttStores);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttStores).apply(this,arguments));}_createClass2(GanttStores,[{key:"onTaskStoreChange",// get calendarManagerStore() {
//     return this.project.calendarManagerStore;
// }
value:function onTaskStoreChange(taskStore){var me=this;// taskStore = me._taskStore = Store.getStore(taskStore, TaskStore);
taskStore.metaMapId=me.id;// taskStore is used for rows (store) and tasks
me.store=me.timeAxisViewModel.store=taskStore;me.dependencyStore=this.project.dependencyStore;// if (!taskStore.dependencyStore) {
//     taskStore.dependencyStore = me.dependencyStore;
// }
if(me.features.dependencies)me.features.dependencies.store=me.dependencyStore;me.currentOrientation.bindTaskStore(taskStore);// TODO note, that these cross-references to other stores are not required by engine
// remove if these are not used
// if (taskStore.resourceStore != me.resourceStore || !taskStore.resourceStore) {
//     if (!taskStore.resourceStore && me.resourceStore) {
//         taskStore.resourceStore = me.resourceStore;
//     }
//     else if (taskStore.resourceStore && !me.resourceStore) {
//         me.resourceStore = taskStore.resourceStore;
//     }
//     else {
//         me.resourceStore = taskStore.resourceStore = new ResourceStore();
//     }
// }
//
// if (taskStore.assignmentStore != me.assignmentStore || !taskStore.assignmentStore) {
//     if (!taskStore.assignmentStore && me.assignmentStore) {
//         taskStore.assignmentStore = me.assignmentStore;
//     }
//     else if (taskStore.assignmentStore && !me.assignmentStore) {
//         me.assignmentStore = taskStore.assignmentStore;
//     }
//     else {
//         me.assignmentStore = taskStore.assignmentStore = new AssignmentStore();
//     }
// }
// if (taskStore) {
//     const listenerCfg = {
//         thisObj    : me,
//
//         change       : me.onTaskStoreChange,
//         //clearchanges : me.onEventClearChanges,
//         //beforecommit : me.onEventCommit,
//         //commit       : me.onEventCommit
//     };
//
//     if (me.passStartEndParameters) {
//         listenerCfg.beforeload = me.applyStartEndParameters;
//     }
//
//     me.taskStoreDetacher && me.taskStoreDetacher();
//
//     me.taskStoreDetacher = taskStore.on(listenerCfg);
// }
//const calendar = taskStore.calendar;
// if (me.dependencyStore) {
//     me.dependencyStore        = Store.getStore(me.dependencyStore);
//     taskStore.dependencyStore = me.dependencyStore;
// } else {
//     me.dependencyStore = taskStore.dependencyStore;
// }
//
// me.dependencyStore.allowParentTaskDependencies = me.allowParentTaskDependencies;
//
// if (!(me.dependencyStore instanceof DependencyStore)) {
//     throw new Error('The Gantt dependency store should be a Gantt.data.DependencyStore, or a subclass thereof.');
// }
//
// this resource store will be assigned to the task store in the "bindResourceStore" method
// const resourceStore = me.resourceStore ? Store.getStore(me.resourceStore) : taskStore.getResourceStore();
// if (!(resourceStore instanceof ResourceStore)) {
//     throw new Error('A `ResourceStore` should be an instance of `Gantt.data.ResourceStore` (or of a subclass)');
// }
// // this assignment store will be assigned to the task store in the "bindAssignmentStore" method
// const assignmentStore = me.assignmentStore ? Store.getStore(me.assignmentStore) : taskStore.assignmentStore;
// if (!(assignmentStore instanceof AssignmentStore)) {
//     throw new Error('An `assignmentStore` should be an instance of `Gantt.data.AssignmentStore` (or of a subclass)');
// }
// me.bindAssignmentStore(assignmentStore, true);
// me.bindResourceStore(resourceStore, true);
// if (me.needToTranslateOption('weekendsAreWorkdays')) {
//     // may trigger a renormalization of all tasks - need all stores to be defined
//     calendar.setWeekendsAreWorkDays(me.weekendsAreWorkdays);
// }
}//endregion
//region AssignmentStore
},{key:"bindAssignmentStore",value:function bindAssignmentStore(assignmentStore,initial){}// const me        = this,
//       listeners = {
//           thisObj : me,
//
//           beforetaskassignmentschange : me.onBeforeSingleTaskAssignmentChange,
//           taskassignmentschanged      : me.onSingleTaskAssignmentChange,
//
//           update  : me.onAssignmentStoreUpdate,
//           add     : me.onAssignmentStoreDataChanged,
//           remove  : me.onAssignmentStoreDataChanged,
//           write   : me.onAssignmentStoreDataChanged,
//           refresh : me.onAssignmentStoreDataChanged,
//           filter  : me.onAssignmentStoreDataChanged,
//           sort    : me.onAssignmentStoreDataChanged,
//           clear   : me.onAssignmentStoreDataChanged
//       };
//
// if (!initial && me.assignmentStore) {
//     if (assignmentStore !== me.assignmentStore && me.assignmentStore.autoDestroy) {
//         me.assignmentStore.destroy();
//     }
//     else {
//         me.mun(me.assignmentStore, listeners);
//     }
//     if (!assignmentStore) {
//         me.assignmentStore = null;
//     }
// }
// if (assignmentStore) {
//     assignmentStore = Store.getStore(assignmentStore);
//     me.mon(assignmentStore, listeners);
//     this.taskStore.assignmentStore = assignmentStore;
// }
//
// me.assignmentStore = assignmentStore;
//
// if (assignmentStore && !initial) {
//     me.refreshViews();
// }
//endregion
//region ResourceStore
},{key:"bindResourceStore",value:function bindResourceStore(resourceStore,initial){}// const me        = this,
//       listeners = {
//           thisObj : me,
//           update  : me.onResourceStoreUpdate,
//           add     : me.onResourceStoreDataChanged,
//           remove  : me.onResourceStoreDataChanged,
//           write   : me.onResourceStoreDataChanged,
//           refresh : me.onResourceStoreDataChanged,
//           sort    : me.onResourceStoreDataChanged,
//           filter  : me.onResourceStoreDataChanged,
//           clear   : me.onResourceStoreDataChanged
//       };
//
// if (!initial && me.resourceStore) {
//     if (resourceStore !== me.resourceStore && me.resourceStore.autoDestroy) {
//         me.resourceStore.destroy();
//     }
//     else {
//         me.mun(me.resourceStore, listeners);
//     }
//     if (!resourceStore) {
//         me.resourceStore = null;
//     }
// }
// if (resourceStore) {
//     resourceStore = Store.getStore(resourceStore);
//     me.mon(resourceStore, listeners);
//     this.taskStore.resourceStore = resourceStore;
// }
//
// me.resourceStore = resourceStore;
//
// if (resourceStore && !initial) {
//     me.refreshViews();
// }
//endregion
},{key:"project",get:function get(){return this._project;},set:function set(project){this._project=project;this.onTaskStoreChange(project.eventStore);}//region TaskStore
},{key:"tasks",set:function set(tasks){this.taskStore.data=tasks;}},{key:"eventStore",get:function get(){return this.project.eventStore;}},{key:"taskStore",get:function get(){return this.eventStore;}},{key:"assignmentStore",get:function get(){return this.project.assignmentStore;}},{key:"resourceStore",get:function get(){return this.project.resourceStore;}}]);return GanttStores;}(Target||Base));};/**
 * @module Gantt/view/mixin/GanttTimelineDateMapper
 */var GanttTimelineDateMapper=function GanttTimelineDateMapper(Target){return(/*#__PURE__*/function(_ref413){_inherits2(GanttTimelineDateMapper,_ref413);function GanttTimelineDateMapper(){_classCallCheck2(this,GanttTimelineDateMapper);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttTimelineDateMapper).apply(this,arguments));}_createClass2(GanttTimelineDateMapper,[{key:"getDisplayEndDate",/**
     * Method to get a displayed end date value, see {@link Gantt/view/mixin/GanttTimelineDateMapper#function-getFormattedEndDate} for more info.
     * @private
     * @param {Date} endDate The date to format
     * @param {Date} startDate The start date
     * @return {Date} The date value to display
     */value:function getDisplayEndDate(endDate,startDate){return endDate;}// This does not need a className on Widgets.
// Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding
// to the Widget it's mixed in to should implement thus.
},{key:"widgetClass",get:function get(){}}]);return GanttTimelineDateMapper;}(Target||Base));};/**
 * @module Scheduler/view/mixin/TaskNavigation
 */ /**
 * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.
 * @mixin
 */var TaskNavigation=function TaskNavigation(Target){return(/*#__PURE__*/function(_ref414){_inherits2(TaskNavigation,_ref414);function TaskNavigation(){_classCallCheck2(this,TaskNavigation);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskNavigation).apply(this,arguments));}_createClass2(TaskNavigation,[{key:"processEvent",value:function processEvent(event){var me=this,eventElement=DomHelper.up(event.target,me.eventSelector);if(!me.navigator.disabled&&eventElement){event.taskRecord=event.eventRecord=me.resolveTaskRecord(eventElement);if(event.type==='click'){me.selectRow(event.taskRecord.id,true,event.ctrlKey||event.metaKey);}}return event;}},{key:"getNext",value:function getNext(taskRecord){var me=this,taskStore=me.taskStore;for(var rowIdx=taskStore.indexOf(taskRecord)+1;rowIdx<taskStore.count;rowIdx++){var nextTask=taskStore.getAt(rowIdx);// Skip tasks which are outside the TimeAxis
if(me.isInTimeAxis(nextTask)){return nextTask;}}}},{key:"getPrevious",value:function getPrevious(taskRecord){var me=this,taskStore=me.taskStore;for(var rowIdx=taskStore.indexOf(taskRecord)-1;rowIdx>=0;rowIdx--){var prevTask=taskStore.getAt(rowIdx);// Skip tasks which are outside the TimeAxis
if(me.isInTimeAxis(prevTask)){return prevTask;}}}},{key:"navigateTo",value:function navigateTo(targetEvent){var uiEvent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;if(targetEvent){// No key processing during scroll
me.navigator.disabled=true;me.scrollTaskIntoView(targetEvent,{animate:100}).then(function(){me.navigator.disabled=false;me.activeEvent=targetEvent;me.navigator.trigger('navigate',{event:uiEvent,item:me.getElementFromTaskRecord(targetEvent).parentNode});});}}},{key:"clearEventSelection",value:function clearEventSelection(){this.deselectAll();}}],[{key:"defaultConfig",get:function get(){return{navigator:{inlineFlow:false,prevKey:'ArrowUp',nextKey:'ArrowDown',keys:{ArrowLeft:function ArrowLeft(){},ArrowRight:function ArrowRight(){}}}};}}]);return TaskNavigation;}(Target||Base));};/**
 * @module Gantt/model/CalendarModel
 */ /**
 * This class represents a calendar in the gantt chart. It contains a collection of the {@link Gantt.model.CalendarIntervalModel CalendarIntervalModel}.
 * Every interval can be either recurrent (regularly repeating in time) or static.
 *
 * Please refer to the [calendars guide](#guides/calendars.md) for details
 *
 * @mixes Gantt/data/mixin/PartOfProject
 * @extends Common/data/Model
 */var CalendarModel=/*#__PURE__*/function(_PartOfProject8){_inherits2(CalendarModel,_PartOfProject8);function CalendarModel(){_classCallCheck2(this,CalendarModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarModel).apply(this,arguments));}_createClass2(CalendarModel,null,[{key:"fields",/**
     * This method adds a single {@link Gantt.model.CalendarIntervalModel CalendarIntervalModel} to the internal collection of the calendar
     *
     * @param {Gantt.model.CalendarIntervalModel} interval
     *
     * @method addInterval
     */ /**
     * This method adds an array of {@link Gantt.model.CalendarIntervalModel CalendarIntervalModel} to the internal collection of the calendar
     *
     * @param {Gantt.model.CalendarIntervalModel[]} intervals
     *
     * @method addIntervals
     */get:function get(){return[/**
             * The calendar name.
             * @field {String} name
             */ /**
             * The number of days per a month (is used when converting the duration from one unit to another).
             *
             * @field {Number} daysPerMonth
             * @default 30
             */ /**
             * The number of days per week (is used when converting the duration from one unit to another).
             *
             * @field {Number} daysPerWeek
             * @default 7
             */ /**
             * The number of hours per day (is used when converting the duration from one unit to another).
             *
             * @field {Number} hoursPerDay
             * @default 24
             */ /**
             * The flag, indicating, whether the "unspecified" time (time that does not belong to any interval
             * is working (`true`) or not (`false`).
             *
             * @field {Boolean} unspecifiedTimeIsWorking
             * @default true
             */];}}]);return CalendarModel;}(PartOfProject(BuildMinimalCalendar(Model)));exports.CalendarModel=CalendarModel;CalendarModel._$name='CalendarModel';/**
 * @module Gantt/data/CalendarManagerStore
 */ /**
 * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the
 * {@link Gantt.model.CalendarModel CalendarModel} class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 *
 * Please refer to the [calendars guide](#guides/calendars.md) for details
 *
 * @mixes Gantt/data/mixin/PartOfProject
 * @extends Common/data/AjaxStore
 */var CalendarManagerStore=/*#__PURE__*/function(_PartOfProject9){_inherits2(CalendarManagerStore,_PartOfProject9);function CalendarManagerStore(){_classCallCheck2(this,CalendarManagerStore);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarManagerStore).apply(this,arguments));}_createClass2(CalendarManagerStore,null,[{key:"defaultConfig",get:function get(){return{tree:true,modelClass:CalendarModel,/**
             * CrudManager must load stores in the correct order. Lowest first.
             * @private
             */loadPriority:100,/**
             * CrudManager must sync stores in the correct order. Lowest first.
             * @private
             */syncPriority:100,storeId:'calendars'};}}]);return CalendarManagerStore;}(PartOfProject(BuildMinimalCalendarManagerStore(AjaxStore)));CalendarManagerStore._$name='CalendarManagerStore';/**
 * @module Gantt/data/mixin/GanttCrudManager
 */ // the order of the @mixes tags is important below, as the "AbstractCrudManagerMixin"
// contains the abstract methods, which are then overwritten by the concrete
// implementation in the AjaxTransport and JsonEncoder
/**
 * This is a mixin, provding Crud manager functionality, specialized for the Gantt project.
 *
 * @mixin
 * @mixes Common/mixin/Events
 * @mixes Scheduler/crud/AbstractCrudManagerMixin
 * @mixes Scheduler/crud/transport/AjaxTransport
 * @mixes Scheduler/crud/encoder/JsonEncoder
 */var GanttCrudManager=function GanttCrudManager(Base){return(/*#__PURE__*/function(_JsonEncoder2){_inherits2(GanttCrudManager,_JsonEncoder2);function GanttCrudManager(){_classCallCheck2(this,GanttCrudManager);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttCrudManager).apply(this,arguments));}_createClass2(GanttCrudManager,[{key:"construct",value:function construct(){var _get29;var me=this;for(var _len74=arguments.length,args=new Array(_len74),_key73=0;_key73<_len74;_key73++){args[_key73]=arguments[_key73];}(_get29=_get2(_getPrototypeOf2(GanttCrudManager.prototype),"construct",this)).call.apply(_get29,[this].concat(args));// add the gantt specific stores to the crud manager
me.addPrioritizedStore(me.calendarManagerStore);me.addPrioritizedStore(me.assignmentStore);me.addPrioritizedStore(me.dependencyStore);me.addPrioritizedStore(me.resourceStore);me.addPrioritizedStore(me.eventStore);me.addPrioritizedStore(me.timeRangeStore);}},{key:"applyResponse",value:function(){var _applyResponse2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee74(requestType,response,options){return regeneratorRuntime.wrap(function _callee74$(_context214){while(1){switch(_context214.prev=_context214.next){case 0:_context214.next=2;return _get2(_getPrototypeOf2(GanttCrudManager.prototype),"applyResponse",this).call(this,requestType,response,options);case 2:// if there is the project data provided
response&&response.project&&Object.assign(this,response.project);// the initial propagation should always use "Resume" for conflicts
_context214.next=5;return this.propagate(function(){return EffectResolutionResult.Resume;});case 5:// TODO:
this.clearCrudStoresChanges();case 6:case"end":return _context214.stop();}}},_callee74,this);}));function applyResponse(_x107,_x108,_x109){return _applyResponse2.apply(this,arguments);}return applyResponse;}()},{key:"clearCrudStoresChanges",value:function clearCrudStoresChanges(){// this.crudStores.forEach(store => store.store.clearChanges());
this.crudStores.forEach(function(store){var me=store.store;me.remove(me.added.values,true);me.modified.forEach(function(r){return r.clearChanges(false);});me.added.clear();me.modified.clear();me.removed.clear();});}},{key:"applyProjectResponse",value:function applyProjectResponse(projectResponse){this.loadProjectFields(projectResponse);}}]);return GanttCrudManager;}(JsonEncoder(AjaxTransport(AbstractCrudManagerMixin(Events(Base))))));};/**
 * @module Gantt/model/ProjectModel
 */ /**
 * This class represents a global project of your Gantt chart - a central place for all data.
 *
 * Please refer to [this guide](#guides/project_data.md) for more information.
 *
 *
 * @extends Gantt/model/TaskModel
 * @mixes Gantt/data/mixin/GanttCrudManager
 *
 */var ProjectModel=/*#__PURE__*/function(_GanttCrudManager){_inherits2(ProjectModel,_GanttCrudManager);function ProjectModel(){_classCallCheck2(this,ProjectModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(ProjectModel).apply(this,arguments));}_createClass2(ProjectModel,[{key:"construct",/**
     * Returns a calendar of the task. If task has never been assigned a calendar a project's calendar will be returned.
     *
     * @method
     * @name getCalendar
     * @returns {Gantt.model.CalendarModel}
     */ /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     *
     * @method
     * @name setCalendar
     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.
     * @returns {Promise}
     * @propagating
     */ /**
     * Propagates changes to the dependent tasks. For example:
     *
     * ```js
     * // double a task duration
     * task.duration *= 2;
     * // call propagate() to do further recalculations caused by the duration change
     * task.getProject().propagate().then(() => console.log('Schedule updated'));
     * ```
     *
     * @method
     * @name propagate
     * @param onEffect Function that should handle occurred propagation conflicts. For example:
     *
     * ```js
     * // trigger propagation and silently cancel changes in case of any conflict
     * project.propagate(() => EffectResolutionResult.Cancel);
     * ```
     * @returns {Promise}
     * @propagating
     */value:function construct(){var _get30;Object.assign(this,{/**
             * Deprecated, use {@link #config-taskModelClass}
             * @deprecated Use {@link #config-taskModelClass}
             * @config {Gantt.model.TaskModel} [eventModelClass]
             */eventModelClass:null,/**
             * The constructor of the event model class, to be used in the project. Will be set as the {@link Common.data.Store#config-modelClass modelClass}
             * property of the {@link Gantt.model.ProjectModel#property-eventStore}
             *
             * @config {Gantt.model.TaskModel} [taskModelClass]
             */taskModelClass:TaskModel,/**
             * The constructor of the dependency model class, to be used in the project. Will be set as the {@link Common.data.Store#config-modelClass modelClass}
             * property of the {@link Gantt.model.ProjectModel#property-dependencyStore}
             *
             * @config {Gantt.model.DependencyModel} [dependencyModelClass]
             */dependencyModelClass:DependencyModel$1,/**
             * The constructor of the resource model class, to be used in the project. Will be set as the {@link Common.data.Store#config-modelClass modelClass}
             * property of the {@link Gantt.model.ProjectModel#property-resourceStore}
             *
             * @config {Gantt.model.ResourceModel} [resourceModelClass]
             */resourceModelClass:ResourceModel$1,/**
             * The constructor of the resource model class, to be used in the project. Will be set as the {@link Common.data.Store#config-modelClass modelClass}
             * property of the {@link Gantt.model.ProjectModel#property-assignmentStore}
             *
             * @config {Gantt.model.AssignmentModel} [assignmentModelClass]
             */assignmentModelClass:AssignmentModel$1,/**
             * The constructor of the calendar model class, to be used in the project. Will be set as the {@link Common.data.Store#config-modelClass modelClass}
             * property of the {@link Gantt.model.ProjectModel#property-calendarManagerStore}
             *
             * @config {Gantt.model.CalendarModel} [calendarModelClass]
             */calendarModelClass:CalendarModel,/**
             * Deprecated, use {@link #config-taskStoreClass}
             * @deprecated
             * @config {Gantt.data.TaskStore}
             */eventStoreClass:null,/**
             * The constructor to create an event store instance with. Should be a class, subclassing the {@link Gantt.data.TaskStore}
             * @config {Gantt.data.TaskStore}
             */taskStoreClass:TaskStore,/**
             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.DependencyStore}
             * @config {Gantt.data.DependencyStore}
             */dependencyStoreClass:DependencyStore$1,/**
             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.ResourceStore}
             * @config {Gantt.data.ResourceStore}
             */resourceStoreClass:ResourceStore$1,/**
             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.AssignmentStore}
             * @config {Gantt.data.AssignmentStore}
             */assignmentStoreClass:AssignmentStore$1,/**
             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.CalendarManagerStore}
             * @config {Gantt.data.CalendarManagerStore}
             */calendarManagerStoreClass:CalendarManagerStore,/**
             * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the project,
             * to start no later than it. If this date is not provided, it will be calculated as the earliest date among all events.
             *
             * @field {string|Date} startDate
             */ /**
             * End date of the project in the ISO 8601 format. If this date is not provided, it will be calculated
             * as the earliest date among all tasks.
             *
             * @field {string|Date} endDate
             */ /**
             * The initial data, to fill the {@link Gantt.model.ProjectModel#property-taskStore taskStore} with.
             * Should be an array of {@link Gantt.model.TaskModel TaskModels} or it's configuration objects.
             *
             * @config {Gantt.model.TaskModel[]} [tasksData]
             */ /**
             * The initial data, to fill the {@link Gantt.model.ProjectModel#property-dependencyStore dependencyStore} with.
             * Should be an array of {@link Gantt.model.DependencyModel DependencyModels} or it's configuration objects.
             *
             * @config {Gantt.model.DependencyModel[]} [dependenciesData]
             */ /**
             * The initial data, to fill the {@link Gantt.model.ProjectModel#property-resourceStore resourceStore} with.
             * Should be an array of {@link Gantt.model.ResourceModel ResourceModels} or it's configuration objects.
             *
             * @config {Gantt.model.ResourceModel[]} [resourcesData]
             */ /**
             * The initial data, to fill the {@link Gantt.model.ProjectModel#property-assignmentStore assignmentStore} with.
             * Should be an array of {@link Gantt.model.AssignmentModel AssignmentModels} or it's configuration objects.
             *
             * @config {Gantt.model.AssignmentModel[]} [assignmentsData]
             */ /**
             * The initial data, to fill the {@link Gantt.model.ProjectModel#property-calendarManagerStore calendarManagerStore} with.
             * Should be an array of {@link Gantt.model.CalendarModel CalendarModels} or it's configuration objects.
             *
             * @config {Gantt.model.CalendarModel[]} [calendarsData]
             */convertEmptyParentToLeaf:false});for(var _len75=arguments.length,args=new Array(_len75),_key74=0;_key74<_len75;_key74++){args[_key74]=arguments[_key74];}var config=args[0]||{};// put config to arguments (passed to the parent class "construct")
args[0]=config;if('tasksData'in config){config.eventsData=config.tasksData;delete config.tasksData;}if('taskStore'in config){config.eventStore=config.taskStore;delete config.taskStore;}// Maintain backwards compatibility
// TODO remove for 2.0
config.eventModelClass=config.taskModelClass||config.eventModelClass||TaskModel;config.eventStoreClass=config.taskStoreClass||config.eventStoreClass||TaskStore;if(!config.timeRangeStore){/**
             * Store that holds time ranges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof) for {@link Scheduler.feature.TimeRanges} feature.
             * A store will be automatically created if none is specified.
             * @config {Object|Common.data.Store} timeRangeStore
             */config.timeRangeStore={modelClass:TimeSpan,storeId:'timeRanges'};}(_get30=_get2(_getPrototypeOf2(ProjectModel.prototype),"construct",this)).call.apply(_get30,[this].concat(args));}},{key:"taskStore",get:function get(){return this.getEventStore();}},{key:"timeRangeStore",get:function get(){return this._timeRangeStore;},set:function set(store){var me=this;me._timeRangeStore=Store.getStore(store,Store);if(!me._timeRangeStore.storeId){me._timeRangeStore.storeId='timeRanges';}}//endregion
}],[{key:"defaults",//region Config
get:function get(){return{/**
             * State tracking manager instance the project relies on
             * @property {Common.data.stm.StateTrackingManager}
             * @name stm
             */ /**
             * The {@link Gantt.data.TaskStore store} holding the tasks information.
             *
             * See also {@link Gantt.model.TaskModel}
             *
             * @property {Gantt.data.TaskStore}
             * @name eventStore
             */ /**
             * An alias for the {@link Gantt.model.ProjectModel#property-eventStore eventStore}
             *
             * See also {@link Gantt.model.TaskModel}
             *
             * @property {Gantt.data.TaskStore}
             * @name taskStore
             */ // taskStore : null,
/**
             * The {@link Gantt.data.DependencyStore store} holding the dependencies information.
             *
             * See also {@link Gantt.model.DependencyModel}
             *
             * @property {Gantt.data.DependencyStore}
             * @name dependencyStore
             */ // dependencyStore : null,
/**
             * The {@link Gantt.data.ResourceStore store} holding the resources that can be assigned to the tasks in the task store.
             *
             * See also {@link Gantt.model.ResourceModel}
             *
             * @property {Gantt.data.ResourceStore}
             * @name resourceStore
             */ // resourceStore : null,
/**
             * The {@link Gantt.data.AssignmentStore store} holding the assignments information.
             *
             * See also {@link Gantt.model.AssignmentModel}
             *
             * @property {Gantt.data.AssignmentStore}
             * @name assignmentStore
             */ // assignmentStore : null
/**
             * The store, holding the calendars information.
             *
             * @property {Gantt.data.CalendarManagerStore}
             * @name calendarManagerStore
             */ // root should be always expanded
expanded:true};}}]);return ProjectModel;}(GanttCrudManager(BuildMinimalProject(Model)));/**
 * @typedef EffectResolutionResult
 * @property {Number} Cancel    Stop propagation
 * @property {Number} Restart   Restart propagation
 * @property {Number} Resume    Resume propagation from current state
 */exports.ProjectModel=ProjectModel;ProjectModel._$name='ProjectModel';// extends locale from scheduler
var locale$3={//region Columns
AddNewColumn:{'New Column':'New Column'},CalendarColumn:{Calendar:'Calendar'},EarlyStartDateColumn:{'Early Start':'Early Start'},EarlyEndDateColumn:{'Early End':'Early End'},LateStartDateColumn:{'Late Start':'Late Start'},LateEndDateColumn:{'Late End':'Late End'},TotalSlackColumn:{'Total Slack':'Total Slack'},ConstraintDateColumn:{'Constraint Date':'Constraint Date'},ConstraintTypeColumn:{'Constraint Type':'Constraint Type'},DependencyColumn:{'Invalid dependency found, change is reverted':'Invalid dependency found, change is reverted'},DurationColumn:{Duration:'Duration'},EffortColumn:{Effort:'Effort'},EndDateColumn:{Finish:'Finish'},EventModeColumn:{'Event mode':'Event mode','Manual':'Manual','Auto':'Auto'},ManuallyScheduledColumn:{'Manually scheduled':'Manually scheduled'},MilestoneColumn:{'Milestone':'Milestone'},NameColumn:{Name:'Name'},NoteColumn:{Note:'Note'},PercentDoneColumn:{'% Done':'% Done'},PredecessorColumn:{Predecessors:'Predecessors'},ResourceAssignmentColumn:{'Assigned Resources':'Assigned Resources'},SchedulingModeColumn:{'Scheduling Mode':'Scheduling Mode'},SequenceColumn:{Sequence:'Sequence'},ShowInTimelineColumn:{'Show in timeline':'Show in timeline'},StartDateColumn:{Start:'Start'},SuccessorColumn:{Successors:'Successors'},WBSColumn:{WBS:'WBS'},//endregion
ProjectLines:{'Project Start':'Project start','Project End':'Project end'},TaskTooltip:{Start:'Start',End:'End',Duration:'Duration',Complete:'Complete'},AssignmentGrid:{Name:'Resource name',Units:'Units','%':'%',unitsTpl:function unitsTpl(_ref415){var value=_ref415.value;return value?value+'%':'';}},AssignmentPicker:{'Save':'Save','Cancel':'Cancel'},AssignmentEditGrid:{Name:'Resource name',Units:'Units'},ConstraintTypePicker:{'Must start on':'Must start on','Must finish on':'Must finish on','Start no earlier than':'Start no earlier than','Start no later than':'Start no later than','Finish no earlier than':'Finish no earlier than','Finish no later than':'Finish no later than'},Gantt:{'Add':'Add...','New Task':'New task','Task above':'Task above','Task below':'Task below','Delete task':'Delete task',Milestone:'Milestone','Sub-task':'Subtask',Successor:'Successor',Predecessor:'Predecessor'},GanttCommon:{SS:'SS',SF:'SF',FS:'FS',FF:'FF',StartToStart:'Start-to-Start',StartToEnd:'Start-to-End',EndToStart:'End-to-Start',EndToEnd:'End-to-End',dependencyTypes:['SS','SF','FS','FF'],dependencyTypesLong:['Start-to-Start','Start-to-End','End-to-Start','End-to-End']},TaskEdit:{Edit:'Edit'},TaskEditor:{'editorWidth':'45em','Information':'Information','Save':'Save','Cancel':'Cancel','Delete':'Delete'},GeneralTab:{labelWidth:'6.5em','General':'General','Name':'Name','% complete':'% complete','Duration':'Duration','Start':'Start','Finish':'Finish','Effort':'Effort','Dates':'Dates'},AdvancedTab:{labelWidth:'11.5em','Advanced':'Advanced','Calendar':'Calendar','Scheduling mode':'Scheduling mode','Effort driven':'Effort driven','Manually scheduled':'Manually scheduled','Constraint type':'Constraint type','Constraint date':'Constraint date','Constraint':'Constraint'},DependencyTab:{'Predecessors':'Predecessors','Successors':'Successors','ID':'ID','Name':'Name','Type':'Type','Lag':'Lag','Cyclic dependency has been detected':'Cyclic dependency has been detected'},ResourcesTab:{unitsTpl:function unitsTpl(_ref416){var value=_ref416.value;return"".concat(value,"%");},'Resources':'Resources','Resource':'Resource','Units':'Units'},NotesTab:{'Notes':'Notes'},SchedulingModePicker:{'Normal':'Normal','Fixed Duration':'Fixed Duration','Fixed Units':'Fixed Units','Fixed Effort':'Fixed Effort'}};// Cannot use Object.assign above in IE11. Also don't want to have polyfill in locale.
for(var _i38 in locale$2){locale$3[_i38]=locale$2[_i38];}LocaleManagerSingelton.registerLocale('En',{desc:'English',locale:locale$3});/**
 * @module Gantt/feature/PercentBar
 */ /**
 * This feature renders a special drag handler in every event, by dragging which, user can change the
 * {@link Gantt.model.TaskModel#field-percentDone percentDone} field.
 *
 * This feature is **enabled** by default
 *
 * {@inlineexample gantt/feature/PercentBar.js}
 *
 * @extends Common/mixin/InstancePlugin
 */var PercentBar=/*#__PURE__*/function(_InstancePlugin27){_inherits2(PercentBar,_InstancePlugin27);function PercentBar(){_classCallCheck2(this,PercentBar);return _possibleConstructorReturn2(this,_getPrototypeOf2(PercentBar).apply(this,arguments));}_createClass2(PercentBar,[{key:"render",//endregion
//region Init
/**
     * Called when scheduler is rendered. Sets up drag and drop and hover tooltip.
     * @private
     */value:function render(){var me=this,gantt=me.client;if(me.resize){me.resize.destroy();}me.resize=new ResizeHelper({name:'percentBarResize',outerElement:gantt.timeAxisSubGridElement,targetSelector:'.b-gantt-task-percent',handleSelector:'.b-gantt-task-percent-handle',allowResize:me.isResizable.bind(me),dragThreshold:0,listeners:{resizeStart:me.onResizeStart,resizing:me.onResizing,resize:me.onFinishResize,cancel:me.onCancelResize,thisObj:me}});}},{key:"doDestroy",value:function doDestroy(){this.resize&&this.resize.destroy();_get2(_getPrototypeOf2(PercentBar.prototype),"doDestroy",this).call(this);}//endregion
//region Other
},{key:"isResizable",value:function isResizable(el){// cannot change percent of parents, calculated from children
return!el.closest('.b-gantt-task-parent');}//endregion
//region Contents
},{key:"cleanup",value:function cleanup(context){var gantt=this.client,taskEl=context.element.closest(gantt.eventSelector);taskEl.classList.remove('b-gantt-task-percent-resizing');gantt.element.classList.remove('b-gantt-resizing-task-percent');}},{key:"onTaskDataGenerated",value:function onTaskDataGenerated(taskData){var task=taskData.task,row=taskData.row;if(!task.milestone){// TODO: When rendering pipeline is refactored to have element available before rendering this can change to
//  attach to that element instead.
if(!row.percentBarElement){row.percentBarElement=DomHelper.createElement({className:'b-gantt-task-percent',children:[{className:'b-gantt-task-percent-handle'}]});}taskData.body.insertBefore(row.percentBarElement,taskData.body.firstChild);row.percentBarElement.dataset.percent=Math.round(task.percentDone);row.percentBarElement.style.width=task.percentDone+'%';// TODO: Make animateable. Should not replace it on every update
//taskData.body.insertBefore(DomHelper.createElementFromTemplate(`<div class="b-gantt-task-percent" style="width:${task.percentDone}%" data-percent="${task.percentDone}"><div class="b-gantt-task-percent-handle"></div></div>`), taskData.body.firstChild);
}}//endregion
//region Events
},{key:"onResizeStart",value:function onResizeStart(_ref417){var context=_ref417.context;var taskEl=context.element.closest(this.client.eventSelector);taskEl.classList.add('b-gantt-task-percent-resizing');this.client.element.classList.add('b-gantt-resizing-task-percent');}},{key:"onResizing",value:function onResizing(_ref418){var context=_ref418.context;var el=context.element,taskEl=el.closest(this.client.eventSelector),width=el.offsetWidth===1?0:el.offsetWidth;el.dataset.percent=Math.min(100,Math.round(100*width/taskEl.offsetWidth));}},{key:"onFinishResize",value:function onFinishResize(_ref419){var context=_ref419.context;var me=this,gantt=me.client,el=context.element,taskRecord=gantt.resolveTaskRecord(el);me.cleanup(context);// dont want to redraw, ui is already in correct state
// gantt.suspendStoreRedraw = true;
taskRecord.setPercentDone(parseInt(el.dataset.percent));// gantt.suspendStoreRedraw = false;
//el.classList.add('b-percent-resize-done');
}},{key:"onCancelResize",value:function onCancelResize(_ref420){var context=_ref420.context;this.cleanup(context);}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{allowDrag:true};}},{key:"pluginConfig",get:function get(){return{chain:['render','onTaskDataGenerated']};}}]);return PercentBar;}(InstancePlugin);exports.PercentBar=PercentBar;PercentBar._$name='PercentBar';GridFeatureManager.registerFeature(PercentBar,true,'Gantt');/**
 * @module Gantt/feature/TaskDrag
 */ /**
 * Allows user to drag and drop tasks within Gantt, to change their start date.
 *
 * One can use a custom validator function to decide if drop is allowed:
 *
 * ```javascript
 * let gantt = new Gantt({
 *   features: {
 *     taskDrag: {
 *       validatorFn(taskRecord, startDate) {
 *           return startDate < new Date();
 *       }
 *     }
 *   }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/DragBase
 * @demo basic
 */var TaskDrag=/*#__PURE__*/function(_DragBase2){_inherits2(TaskDrag,_DragBase2);function TaskDrag(){_classCallCheck2(this,TaskDrag);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskDrag).apply(this,arguments));}_createClass2(TaskDrag,[{key:"construct",/**
     * Template used to generate drag tooltip contents.
     * ```
     * const gantt = new Gantt({
     *   features : {
     *     taskDrag : {
     *       dragTipTemplate({taskRecord, startText}) {
     *         return `${taskRecord.name}: ${startText}`
     *       }
     *     }
     *   }
     * });
     * ```
     * @config {Function} dragTipTemplate
     * @param {Object} data Tooltip data
     * @param {Gantt.model.TaskModel} data.taskRecord
     * @param {Boolean} data.valid Currently over a valid drop target or not
     * @param {Date} data.startDate New start date
     * @param {Date} data.endDate New end date
     * @param {String} data.startText Formatted new start date
     * @param {String} data.endText Formatted new end date
     * @param {String} data.startClockHtml Pre-generated HTML to display startDate as clock/calendar
     * @param {String} data.endClockHtml Pre-generated HTML to display endDate as clock/calendar
     * @param {Object} data.dragData Detailed drag context
     * @returns {String}
     */ //endregion
//region Events
/**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  scheduler.on('beforetaskdropfinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeTaskDropFinalize
     * @param {Gantt.view.Gantt} source Gantt instance
     * @param {Object} context
     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user
     * confirmation)
     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fired on the owning Gantt after task drop
     * @event afterTaskDrop
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel[]} taskRecords
     * @param {Boolean} valid
     */ /**
     * Fired on the owning Gantt when a task is dropped
     * @event taskDrop
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel[]} taskRecords
     * @param {Boolean} isCopy
     */ /**
     * Fired on the owning Gantt before task dragging starts. Return false to prevent the action
     * @event beforeTaskDrag
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel} taskRecord
     */ /**
     * Fired on the owning Gantt when task dragging starts
     * @event taskDragStart
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel[]} taskRecords
     */ /**
     * Fired on the owning Gantt when event is dragged
     * @event taskDrag
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel[]} taskRecords
     * @param {Date} startDate
     * @param {Date} endDate
     * @param {Object} dragData
     * @param {Boolean} changed `true` if startDate has changed.
     */ //endregion
//region Init
value:function construct(gantt,config){this.gantt=gantt;this.store=gantt.taskStore;_get2(_getPrototypeOf2(TaskDrag.prototype),"construct",this).call(this,gantt,config);}//endregion
//region Drag events
},{key:"isElementDraggable",value:function isElementDraggable(el,event){var gantt=this.gantt,taskElement=DomHelper.up(el,gantt.eventSelector),eventResize=gantt.features.eventResize;if(!taskElement){return false;}// displaying something resizable within the event?
if(DomHelper.up(el,gantt.eventSelector).matches('[class$="-handle"]')){return false;}var taskRecord=gantt.resolveTaskRecord(taskElement);// using EventResize and over a virtual handle?
// Milestones cannot be resized
if(eventResize&&!taskRecord.milestone){if(eventResize.resize.overLeftHandle(event,taskElement)||eventResize.resize.overRightHandle(event,taskElement)){return false;}}if(!taskRecord||!taskRecord.isDraggable){return false;}return gantt.trigger('beforeTaskDrag',{taskRecord:taskRecord})!==false;}},{key:"triggerEventDrag",value:function triggerEventDrag(dd,start){// Trigger the event on every mousemove so that features which need to adjust
// Such as dependencies and baselines can keep adjusted.
this.gantt.trigger('taskDrag',{taskRecords:dd.draggedRecords,startDate:dd.startDate,endDate:dd.endDate,dragData:dd,changed:dd.startDate-start!==0});}//endregion
//region Drag data
},{key:"getProductDragContext",value:function getProductDragContext(dd){return{valid:true};}},{key:"setupProductDragData",value:function setupProductDragData(info){var me=this,gantt=me.gantt,element=info.element,taskRecord=gantt.resolveTaskRecord(element),taskRegion=Rectangle.from(element),relatedRecords=me.getRelatedRecords(taskRecord)||[],dateConstraints=gantt.getDateConstraints(taskRecord);var eventBarEls=[gantt.getElementFromTaskRecord(taskRecord,true).parentNode];me.setupConstraints(gantt.getScheduleRegion(taskRecord),taskRegion,gantt.timeAxisViewModel.snapPixelAmount,Boolean(dateConstraints));// Collecting additional elements to drag
relatedRecords.forEach(function(r){eventBarEls.push(gantt.getElementFromTaskRecord(r).parentNode);});eventBarEls=_toConsumableArray(new Set(eventBarEls));// I'm not sure if it's required, but this way it seems safer
var draggedRecords=[taskRecord].concat(relatedRecords);return{record:taskRecord,dateConstraints:dateConstraints,eventBarEls:eventBarEls,draggedRecords:draggedRecords};}/**
     * Get correct axis coordinate.
     * @private
     * @param {Gantt.model.TaskModel} taskRecord Record being dragged
     * @param {HTMLElement} element Element being dragged
     * @param {Number[]} coord XY coordinates
     * @returns {Number|Number[]} X,Y or XY
     */},{key:"getCoordinate",value:function getCoordinate(taskRecord,element,coord){return coord[0];}//endregion
//region Finalize & validation
// Called from EventDragBase to assert if a drag is valid or not
},{key:"checkDragValidity",value:function checkDragValidity(dragData,event){var me=this;return me.validatorFn.call(me.validatorFnThisObj||me,dragData.draggedRecords,dragData.startDate,dragData.duration,event);}/**
     * Checks if a task can be dropped on the specified location
     * @private
     * @returns {Boolean} Valid (true) or invalid (false)
     */},{key:"isValidDrop",value:function isValidDrop(dragData){return true;}/**
     * Update tasks being dragged.
     * @private
     * @param {Object} context Drag data.
     */},{key:"updateRecords",value:function(){var _updateRecords=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee75(context){var me,gantt,taskRecord,oldStartDate,startDate,propagatePromise;return regeneratorRuntime.wrap(function _callee75$(_context215){while(1){switch(_context215.prev=_context215.next){case 0:me=this,gantt=me.gantt,taskRecord=context.draggedRecords[0],oldStartDate=taskRecord.startDate,startDate=context.startDate,propagatePromise=taskRecord.setStartDate(startDate,true);// Process original dragged record
_context215.next=3;return propagatePromise;case 3:// If not rejected (the startDate has changed), tell the world there was a successful drop.
if(taskRecord.startDate-oldStartDate){gantt.trigger('taskDrop',{taskRecords:context.draggedRecords});}else{me.dragData.valid=false;}return _context215.abrupt("return",propagatePromise);case 5:case"end":return _context215.stop();}}},_callee75,this);}));function updateRecords(_x110){return _updateRecords.apply(this,arguments);}return updateRecords;}()//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * An empty function by default, but provided so that you can perform custom validation on
             * the item being dragged. This function is called during the drag and drop process and also after the drop is made.
             * Return true if the new position is valid, false to prevent the drag.
             * @param {Gantt.model.TaskModel[]} taskRecords an array containing the records for the tasks being dragged
             * @param {Date} date The date corresponding to the current mouse position
             * @param {Number} duration The duration of the item being dragged
             * @param {Event} e The event object
             * @return {Boolean}
             * @config {Function}
             */validatorFn:function validatorFn(taskRecords,date,duration,e){return true;},/**
             * `this` reference for the validatorFn
             * @config {Object}
             */validatorFnThisObj:null,tooltipCls:'b-gantt-taskdrag-tooltip'};}}]);return TaskDrag;}(DragBase);TaskDrag._$name='TaskDrag';GridFeatureManager.registerFeature(TaskDrag,true,'Gantt');/**
 * @module Gantt/feature/TaskContextMenu
 */ /**
 * Displays a context menu for tasks. Items are populated by other features and/or application code. Configure it with `false` to disable it completely.
 *
 * To add extra items for all events:
 *
 * ```javascript
 * const gantt = new Gantt({
 *     features : {
 *         taskContextMenu : {
 *             // Extra items for all events
 *             items : {
 *                 flagTask : {
 *                     text : 'Extra',
 *                     icon : 'b-fa b-fa-fw b-fa-flag',
 *                     onItem({taskRecord}) {
 *                         taskRecord.flagged = true;
 *                     }
 *                 }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * Manipulate existing items for all tasks or specific tasks:
 *
 * ```javascript
 * const gantt = new Gantt({
 *     features : {
 *         taskContextMenu : {
 *              // We would like to remove some of the provided options in the add menu
 *              add : {
 *                  menu : {
 *                      items : {
 *                          addTaskAbove : false,
 *                          addTaskBelow : false,
 *                          milestone    : false
 *                      }
 *                 }
 *             },
 *             // Process items before menu is shown
 *             processItems({taskRecord, items}) {
 *                  // Push an extra item for conferences
 *                  if (taskRecord.type === 'conference') {
 *                      items.showSessions = {
 *                          text : 'Show sessions',
 *                          ontItem({taskRecord}) {
 *                              // ...
 *                          }
 *                      };
 *                  }
 *
 *                  // Do not show menu for secret events
 *                  if (taskRecord.type === 'secret') {
 *                      return false;
 *                  }
 *             }
 *         }
 *     }
 * });
 * ```
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/TimeSpanRecordContextMenuBase
 * @demo taskcontextmenu
 * @externalexample gantt/taskcontextmenu.js
 */var TaskContextMenu=/*#__PURE__*/function(_TimeSpanRecordContex3){_inherits2(TaskContextMenu,_TimeSpanRecordContex3);function TaskContextMenu(){_classCallCheck2(this,TaskContextMenu);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskContextMenu).apply(this,arguments));}_createClass2(TaskContextMenu,[{key:"resolveRecord",//endregion
//region Events
/**
     * Fired from gantt before the context menu is shown for a task. Allows manipulation of the items
     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from
     * being shown.
     * @event taskContextMenuBeforeShow
     * @preventable
     * @param {Gantt.view.Gantt} source
     * @param {Object[]} items Menu item configs
     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} taskElement
     */ /**
     * Fired from gantt when an item is selected in the context menu.
     * @event taskContextMenuItem
     * @param {Gantt.view.Gantt} source
     * @param {Common.widget.MenuItem} item
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {HTMLElement} taskElement
     */ /**
     * Fired from gantt after showing the context menu for an event
     * @event taskContextMenuShow
     * @preventable
     * @param {Gantt.view.Gantt} source
     * @param {Common.widget.Menu} menu The menu
     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered
     * @param {HTMLElement} taskElement
     */ //endregion
/**
     * Returns Task record associated with current element (row/cell/task element)
     * @param {HTMLElement} element
     * @returns {Gantt.model.TaskModel}
     * @private
     */value:function resolveRecord(element){// We may be asked to resolve from a task bar element
// or a regular grid inner element. Both must lead
// to the Task.
return this.client.resolveTaskRecord(element)||this.client.getRecordFromElement(element);}/**
     * Shows context menu for the provided task. If task is not rendered (outside of time span, or collapsed)
     * menu won't appear.
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Object} [options]
     * @param {HTMLElement} options.targetElement Element to align context menu to
     * @param {Event} options.event Browser event. If provided menu will be aligned according to clientX/clientY coordinates.
     * If omitted, context menu will be centered to taskElement
     */},{key:"showContextMenuFor",value:function showContextMenuFor(taskRecord){var _ref421=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},targetElement=_ref421.targetElement,event=_ref421.event;var me=this;if(!taskRecord){return;}if(!targetElement){targetElement=me.client.getElementFromTaskRecord(taskRecord);// If task record is not rendered, do nothing
if(!targetElement){return;}}me.showContextMenu({menuType:'task',taskElement:targetElement,targetElement:targetElement,taskRecord:taskRecord,event:event});}},{key:"namedItems",get:function get(){var me=this,client=me.client;if(!me._namedItems){var namedItems=me._namedItems={addTaskAbove:{text:client.L('Task above'),icon:'b-icon b-icon-up',onItem:function onItem(_ref422){var taskRecord=_ref422.taskRecord;client.addTaskAbove(taskRecord);}},addTaskBelow:{text:client.L('Task below'),icon:'b-icon b-icon-down',onItem:function onItem(_ref423){var taskRecord=_ref423.taskRecord;client.addTaskBelow(taskRecord);}},milestone:{text:client.L('Milestone'),icon:'b-icon b-fa-flag',name:'milestone',onItem:function onItem(_ref424){var taskRecord=_ref424.taskRecord;client.addMilestonBelow(taskRecord);}},subtask:{text:client.L('Sub-task'),name:'subtask',onItem:function onItem(_ref425){var taskRecord=_ref425.taskRecord;client.addSubtask(taskRecord);}},successor:{text:client.L('Successor'),onItem:function onItem(_ref426){var taskRecord=_ref426.taskRecord;client.addSuccessor(taskRecord);}},predecessor:{text:client.L('Predecessor'),name:'predecessor',onItem:function onItem(_ref427){var taskRecord=_ref427.taskRecord;client.addPredecessor(taskRecord);}},deleteTask:{text:client.L('Delete task'),icon:'b-icon b-icon-trash',name:'deleteTask',onItem:function onItem(_ref428){var taskRecord=_ref428.taskRecord;taskRecord.remove();}},convertToMilestone:{text:client.L('Convert to milestone'),onItem:function onItem(_ref429){var taskRecord=_ref429.taskRecord;taskRecord.convertToMilestone();}}};namedItems.add={text:client.L('Add'),icon:'b-icon b-icon-add',menu:{items:{addTaskAbove:true,addTaskBelow:true,milestone:true,subtask:true,successor:true,predecessor:true}}};}return me._namedItems;}}],[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * This is a preconfigured set of {@link Common.widget.Container#config-namedItems} used to create the default
             * context menu.
             *
             * The provided defaultItems setting is
             *
             *```javascript
             *    {
             *        add        : true,
             *        deleteTask : true
             *    }
             *```
             *
             * The `namedItems` provided by this feature are listed below. These are the property
             * names which you may configure in the festure's {@link Scheduler.feature.base.TimeSpanRecordContextMenuBase#config-items} config:
             *
             * - `add` A submenu option containing a `menu` config which contains the following `namedItems`
             *     * `addTaskAbove` Inserts a sibling task above the context task.
             *     * `addTaskBelow` Inserts a sibling task below the context task.
             *     * `milestone` Inserts a sibling milestone below the context task.
             *     * `subtask` Appends a child task to the context task.
             *     * `successor` Adds a sibling task linked by a dependence below the context task.
             *     * `predecessor` Adds a sibling task linked by a dependence above the context task.
             *  - `deleteTask` Deletes the context task.
             *  - `convertToMilestone` Converts the context task to a zero duration milestone.
             *
             * See the feature config in the above example for details.
             * @config {Object}
             */defaultItems:{add:true,deleteTask:true}};}}]);return TaskContextMenu;}(TimeSpanRecordContextMenuBase);exports.TaskContextMenu=TaskContextMenu;TaskContextMenu.featureClass='';TaskContextMenu._$name='TaskContextMenu';GridFeatureManager.registerFeature(TaskContextMenu,true,'Gantt');/**
 * @module Gantt/feature/TaskDragCreate
 */ /**
 * Feature that allows the user to schedule a new task by dragging in empty parts of the gantt rows.
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/DragCreateBase
 */var TaskDragCreate=/*#__PURE__*/function(_DragCreateBase2){_inherits2(TaskDragCreate,_DragCreateBase2);function TaskDragCreate(){_classCallCheck2(this,TaskDragCreate);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskDragCreate).apply(this,arguments));}_createClass2(TaskDragCreate,[{key:"construct",//endregion
//region Events
/**
     * Fires on the owning Gantt after the task has been scheduled.
     * @event dragCreateEnd
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {MouseEvent} event The ending mouseup event.
     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.
     */ /**
     * Fires on the owning Gantt at the beginning of the drag gesture
     * @event beforeDragCreate
     * @param {Gantt.view.Gantt} source
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Date} date The datetime associated with the drag start point.
     */ /**
     * Fires on the owning Gantt after the drag start has created a proxy element.
     * @event dragCreateStart
     * @param {Gantt.view.Gantt} source
     * @param {HTMLElement} proxyElement The proxy representing the new event.
     */ /**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  scheduler.on('beforedragcreatefinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeDragCreateFinalize
     * @param {Gantt.view.Gantt} source Scheduler instance
     * @param {HTMLElement} proxyElement Proxy element, representing future event
     * @param {Object} context
     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user
     * confirmation)
     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fires on the owning Gantt at the end of the drag create gesture whether or not
     * a task was scheduled by the gesture.
     * @event afterDragCreate
     * @param {Gantt.view.Gantt} source
     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.
     */ //endregion
//region Init
value:function construct(gantt,config){var me=this;me.gantt=gantt;me.store=gantt.taskStore;_get2(_getPrototypeOf2(TaskDragCreate.prototype),"construct",this).call(this,gantt,config);}//endregion
//region Scheduler specific implementation
},{key:"finalizeDragCreate",value:function finalizeDragCreate(context){var taskRecord=context.taskRecord;taskRecord.setStartEndDate(context.startDate,context.endDate);this.gantt.trigger('dragCreateEnd',{taskRecord:taskRecord,event:context.event,proxyElement:this.proxy});}},{key:"handleBeforeDragCreate",value:function handleBeforeDragCreate(dateTime,event){var me=this,result=me.gantt.trigger('beforeDragCreate',{taskRecord:me.createContext.taskRecord,date:dateTime,event:event});if(result){// Tooltip will not be activated while drag is in progress,
// but we need to hide it deliberately on drag start
var tipFeature=me.gantt.features.scheduleTooltip;if(tipFeature){tipFeature.hoverTip&&tipFeature.hoverTip.hide();}}// Save date constraints
me.dateConstraints=me.gantt.getDateConstraints(me.createContext.rowRecord,dateTime);return result;}},{key:"checkValidity",value:function checkValidity(context,event){var me=this;context.taskRecord=context.rowRecord;return me.validatorFn.call(me.validatorFnThisObj||me,context,event);}// Row is not empty if task is scheduled
},{key:"isRowEmpty",value:function isRowEmpty(taskRecord){return!taskRecord.startDate||!taskRecord.endDate;}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{// used by gantt to only allow one task per row
preventMultiple:true,/**
             * An empty function by default, but provided so that you can perform custom validation on the event being created.
             * Return true if the new event is valid, false to prevent an event being created.
             * @param {Object} context A drag create context, containing at least{ start, end, taskRecord }
             * @param {Event} event The event object
             * @return {Boolean} isValid
             * @config {function}
             */validatorFn:function validatorFn(){}};}}]);return TaskDragCreate;}(DragCreateBase);TaskDragCreate._$name='TaskDragCreate';GridFeatureManager.registerFeature(TaskDragCreate,true,'Gantt');/**
 * @module Gantt/feature/mixin/TaskEditStm
 */ /**
 * Mixin adding STM transactable behavior to TaskEdit feature.
 *
 * @mixin
 */var TaskEditStm=function TaskEditStm(Target){return(/*#__PURE__*/function(_ref430){_inherits2(TaskEditStm,_ref430);function TaskEditStm(){_classCallCheck2(this,TaskEditStm);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskEditStm).apply(this,arguments));}_createClass2(TaskEditStm,[{key:"getProject",value:function getProject(){var result;if(_get2(_getPrototypeOf2(TaskEditStm.prototype),"getProject",this)){result=_get2(_getPrototypeOf2(TaskEditStm.prototype),"getProject",this).call(this);}else{throw new Error('Abstract method call!');}return result;}},{key:"captureStm",value:function captureStm(){var me=this,project=me.getProject(),stm=project.getStm();me.stmInitiallyDisabled=stm.disabled;me.stmInitiallyAutoRecord=stm.autoRecord;if(me.stmInitiallyDisabled){stm.enable();}else{if(me.stmInitiallyAutoRecord){stm.autoRecord=false;}if(stm.isRecording){stm.stopTransaction();}}}},{key:"startStmTransaction",value:function startStmTransaction(){// TODO: Create title: "Editing event/task 'name'"
this.getProject().getStm().startTransaction();}},{key:"commitStmTransaction",value:function commitStmTransaction(){var me=this,stm=me.getProject().getStm();stm.stopTransaction();if(me.stmInitiallyDisabled){stm.resetQueue();}}},{key:"rejectStmTransaction",value:function rejectStmTransaction(){var stm=this.getProject().getStm(),client=this.client;if(stm.transaction.length){client.suspendRefresh();stm.forEachStore(function(s){return s.beginBatch();});stm.rejectTransaction();stm.forEachStore(function(s){return s.endBatch();});client.resumeRefresh(true);}else{stm.stopTransaction();}}},{key:"enableStm",value:function enableStm(){this.getProject().getStm().enable();}},{key:"disableStm",value:function disableStm(){this.getProject().getStm().disable();}},{key:"freeStm",value:function freeStm(){var me=this,stm=me.getProject().getStm();stm.disabled=me.stmInitiallyDisabled;stm.autoRecord=me.stmInitiallyAutoRecord;}}]);return TaskEditStm;}(Target||Base));};exports.TaskEditStm=TaskEditStm;var ReadyStatePropagator=function ReadyStatePropagator(Target){return(/*#__PURE__*/function(_ref431){_inherits2(_class5,_ref431);function _class5(){_classCallCheck2(this,_class5);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class5).apply(this,arguments));}_createClass2(_class5,[{key:"requestReadyStateChange",value:function requestReadyStateChange(){this.trigger('readystatechange',{canSave:this.canSave});}},{key:"isReadyStatePropagator",get:function get(){return true;}},{key:"canSave",get:function get(){return true;}}]);return _class5;}(Target||Events(Base)));};/**
 * @module Gantt/widget/taskeditor/mixin/EventLoader
 */ /**
 * Mixin class for task editor widgtes which require record loading functionality
 *
 * @mixin
 */var EventLoader=function EventLoader(Target){return(/*#__PURE__*/function(_ref432){_inherits2(_class6,_ref432);function _class6(){_classCallCheck2(this,_class6);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class6).apply(this,arguments));}_createClass2(_class6,[{key:"getProject",value:function getProject(){return this.record&&this.record.getProject();}},{key:"loadEvent",value:function loadEvent(record){this.record=record;}},{key:"resetData",value:function resetData(){this.record=null;}},{key:"beforeSave",value:function beforeSave(){}},{key:"afterSave",value:function afterSave(){this.resetData();}},{key:"beforeCancel",value:function beforeCancel(){}},{key:"afterCancel",value:function afterCancel(){this.resetData();}},{key:"beforeDelete",value:function beforeDelete(){}},{key:"afterDelete",value:function afterDelete(){this.resetData();}}]);return _class6;}(Target||Container));};/**
 * Mixin for task editor widgets to properly propagate event changes.
 *
 * Works in tandem with {@link Common/mixin/Events events} mixin.
 *
 * @mixin
 */exports.EventLoader=EventLoader;var EventChangePropagator=function EventChangePropagator(Target){return(/*#__PURE__*/function(_ref433){_inherits2(_class7,_ref433);function _class7(){_classCallCheck2(this,_class7);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class7).apply(this,arguments));}_createClass2(_class7,[{key:"requestPropagation",value:function requestPropagation(){this.trigger('requestPropagation');}},{key:"isEventChangePropagator",get:function get(){return true;}}]);return _class7;}(Target||Events(Base)));};/**
 * @module Gantt/widget/taskeditor/mixin/TaskEditorTab
 */ /**
 * Mixin class for task editor tabs which processes common tab configs. Like `extraWidgets`
 *
 * @mixin
 */exports.EventChangePropagator=EventChangePropagator;var TaskEditorTab=function TaskEditorTab(Target){return(/*#__PURE__*/function(_Target2){_inherits2(_class8,_Target2);function _class8(){_classCallCheck2(this,_class8);return _possibleConstructorReturn2(this,_getPrototypeOf2(_class8).apply(this,arguments));}_createClass2(_class8,[{key:"startConfigure",value:function startConfigure(config){if(config.extraItems&&config.items){var _config$items;(_config$items=config.items).push.apply(_config$items,_toConsumableArray(config.extraItems));config.items.sort(function(widgetA,widgetB){return(widgetA.index|0)-(widgetB.index-0);});}_get2(_getPrototypeOf2(_class8.prototype),"afterConfigure",this).call(this);}}]);return _class8;}(Target));};/**
 * @module Gantt/widget/taskeditor/FormTab
 */ /**
 * Base class for form-like {@link Gantt/widget/TaskEditor task editor} tabs.
 * @internal
 */var FormTab=/*#__PURE__*/function(_EventChangePropagato){_inherits2(FormTab,_EventChangePropagato);function FormTab(){_classCallCheck2(this,FormTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(FormTab).apply(this,arguments));}_createClass2(FormTab,[{key:"afterConfigure",value:function afterConfigure(){var me=this;_get2(_getPrototypeOf2(FormTab.prototype),"afterConfigure",this).call(this);Object.values(me.widgetMap).forEach(function(w){w.name&&w.on('change',me.onWidgetValueChange,me);});LocaleManagerSingelton.on({locale:me.onLocaleChange,thisObj:me});}},{key:"loadEvent",value:function loadEvent(eventRecord){this._loading=true;_get2(_getPrototypeOf2(FormTab.prototype),"loadEvent",this).call(this,eventRecord);this._loading=false;}},{key:"resetData",value:function resetData(){this._loading=true;_get2(_getPrototypeOf2(FormTab.prototype),"resetData",this).call(this);this._loading=false;}},{key:"onWidgetValueChange",value:function onWidgetValueChange(_ref434){var source=_ref434.source,value=_ref434.value,checked=_ref434.checked,valid=_ref434.valid;var me=this,project=me.getProject();valid=valid!==undefined?valid:typeof source.isValid==='function'?source.isValid():source.isValid;if(!me._loading&&valid&&project&&!project.isPropagating()){var record=me.record,setterName="set".concat(StringHelper.capitalizeFirstLetter(source.name));if(source instanceof FlagField){value=checked;}if(setterName in record||source.name in record||record.$[source.name]){if(setterName in record){record[setterName](value);}else if(source.name in record){record[source.name]=value;}else{record.$[source.name].put(value);}me.requestPropagation();}}}},{key:"onLocaleChange",value:function onLocaleChange(){var _this147=this;Object.values(this.widgetMap).forEach(function(w){if(w instanceof Field&&w.parent===_this147){w.labelWidth=_this147.L('labelWidth');}});}}],[{key:"defaultConfig",get:function get(){return{layoutStyle:{flexFlow:'row wrap',alignItems:'flex-start',alignContent:'flex-start'},defaults:{labelWidth:'7em'}};}}]);return FormTab;}(EventChangePropagator(TaskEditorTab(EventLoader(Container))));exports.FormTab=FormTab;FormTab._$name='FormTab';// This class is intended to keep common localizations used by different components, dependency types mostly. This
// class allows to have minimal dependencies to access localized strings
var GanttCommon=/*#__PURE__*/function(_Localizable6){_inherits2(GanttCommon,_Localizable6);function GanttCommon(){_classCallCheck2(this,GanttCommon);return _possibleConstructorReturn2(this,_getPrototypeOf2(GanttCommon).apply(this,arguments));}return GanttCommon;}(Localizable());GanttCommon._$name='GanttCommon';/**
 * @module Gantt/widget/DependencyTypePicker
 */var buildItems=function buildItems(items){return items.map(function(item,index){return[index,item];});};/**
 * Selects a Dependency linkage type between two tasks.
 *
 * @extends Common/widget/Combo
 *
 * @classType dependencytypepicker
 */var DependencyTypePicker=/*#__PURE__*/function(_Combo6){_inherits2(DependencyTypePicker,_Combo6);function DependencyTypePicker(){_classCallCheck2(this,DependencyTypePicker);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyTypePicker).apply(this,arguments));}_createClass2(DependencyTypePicker,[{key:"construct",value:function construct(config){var _this148=this;_get2(_getPrototypeOf2(DependencyTypePicker.prototype),"construct",this).call(this,config);// Update when changing locale
LocaleManagerSingelton.on({locale:function locale(_ref435){var _locale3=_ref435.locale;_this148.items=buildItems(_locale3.GanttCommon.dependencyTypesLong);},thisObj:this});}},{key:"store",get:function get(){if(!this._items){this.items=this._items=buildItems(GanttCommon.L('dependencyTypesLong'));}return _get2(_getPrototypeOf2(DependencyTypePicker.prototype),"store",this);},set:function set(store){_set(_getPrototypeOf2(DependencyTypePicker.prototype),"store",store,this,true);}}],[{key:"type",get:function get(){return'dependencytypepicker';}}]);return DependencyTypePicker;}(Combo);exports.DependencyTypePicker=DependencyTypePicker;DependencyTypePicker._$name='DependencyTypePicker';BryntumWidgetAdapterRegister.register(DependencyTypePicker.type,DependencyTypePicker);/**
 * @module Gantt/widget/taskeditor/GeneralTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the general information for a task.
 * @internal
 */var GeneralTab=/*#__PURE__*/function(_FormTab){_inherits2(GeneralTab,_FormTab);function GeneralTab(){_classCallCheck2(this,GeneralTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(GeneralTab).apply(this,arguments));}_createClass2(GeneralTab,[{key:"loadEvent",value:function loadEvent(record){var step={unit:record.durationUnit,magnitude:1},isParent=record.isParent,_this$widgetMap2=this.widgetMap,fullDurationField=_this$widgetMap2.fullDurationField,percentDoneField=_this$widgetMap2.percentDoneField,startDateField=_this$widgetMap2.startDateField,endDateField=_this$widgetMap2.endDateField,effortField=_this$widgetMap2.effortField;// Editing duration, percentDone & endDate disallowed for parent tasks
if(fullDurationField){fullDurationField.disabled=isParent;}if(percentDoneField){percentDoneField.disabled=isParent;}if(startDateField){startDateField.step=step;}if(endDateField){endDateField.step=step;endDateField.disabled=isParent;}if(effortField){effortField.unit=record.effortUnit;effortField.disabled=isParent;}_get2(_getPrototypeOf2(GeneralTab.prototype),"loadEvent",this).call(this,record);}}],[{key:"type",get:function get(){return'generaltab';}},{key:"defaultConfig",get:function get(){return{localeClass:this,title:'L{General}',ref:'generaltab',defaults:{localeClass:this,labelWidth:this.L('labelWidth')},items:[{type:'text',required:true,label:'L{Name}',clearable:true,name:'name',ref:'nameField',cls:'b-name'},{type:'number',label:'L{% complete}',name:'percentDone',ref:'percentDoneField',cls:'b-percent-done b-inline',flex:'1 0 50%',min:0,max:100},{type:'effort',label:'L{Effort}',name:'fullEffort',ref:'effortField',flex:'1 0 50%'},{html:'',dataset:{text:this.L('Dates')},cls:'b-divider',flex:'1 0 100%'},{type:'date',label:'L{Start}',name:'startDate',ref:'startDateField',cls:'b-start-date b-inline',flex:'1 0 50%'},{type:'date',label:'L{Finish}',name:'endDate',ref:'endDateField',cls:'b-end-date',flex:'1 0 50%'},{type:'durationfield',label:'L{Duration}',name:'fullDuration',ref:'fullDurationField',flex:'.5 0',cls:'b-inline'}]};}}]);return GeneralTab;}(FormTab);exports.GeneralTab=GeneralTab;GeneralTab._$name='GeneralTab';BryntumWidgetAdapterRegister.register(GeneralTab.type,GeneralTab);/**
 * @module Gantt/widget/ModelCombo
 */ /**
 * Special combo class returning a model from the store as it's value
 */var ModelCombo=/*#__PURE__*/function(_Combo7){_inherits2(ModelCombo,_Combo7);function ModelCombo(){_classCallCheck2(this,ModelCombo);return _possibleConstructorReturn2(this,_getPrototypeOf2(ModelCombo).apply(this,arguments));}_createClass2(ModelCombo,[{key:"value",get:function get(){var superValue=_get2(_getPrototypeOf2(ModelCombo.prototype),"value",this),model=this.store.getById(superValue);return model||superValue;},set:function set(v){_set(_getPrototypeOf2(ModelCombo.prototype),"value",v,this,true);}}],[{key:"type",get:function get(){return'modelcombo';}}]);return ModelCombo;}(Combo);ModelCombo._$name='ModelCombo';BryntumWidgetAdapterRegister.register(ModelCombo.type,ModelCombo);/**
 * @module Gantt/widget/taskeditor/DependencyTab
 */var markDependencyValid=function markDependencyValid(dep,grid){dep.instanceMeta(grid).valid=true;};var markDependencyInvalid=function markDependencyInvalid(dep,grid){dep.instanceMeta(grid).valid=false;};var isDependencyMarkedValid=function isDependencyMarkedValid(dep,grid){return dep.instanceMeta(grid).valid!==false;};/**
 * @internal
 */var DependencyTab=/*#__PURE__*/function(_ReadyStatePropagator){_inherits2(DependencyTab,_ReadyStatePropagator);function DependencyTab(){_classCallCheck2(this,DependencyTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyTab).apply(this,arguments));}_createClass2(DependencyTab,[{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(DependencyTab.prototype),"afterConstruct",this).call(this);var me=this,addButton=me.addButton=me.widgetMap["".concat(me.ref,"-add")],removeButton=me.removeButton=me.widgetMap["".concat(me.ref,"-remove")],grid=me.grid=me.widgetMap["".concat(me.ref,"-grid")];addButton&&addButton.on('click',me.onAddClick,me);removeButton&&removeButton.on('click',me.onRemoveClick,me);grid.on({selectionChange:me.onGridSelectionChange,startCellEdit:me.onGridStartCellEdit,finishCellEdit:me.onGridFinishCellEdit,cancelCellEdit:me.onGridCancelCellEdit,thisObj:me});}},{key:"loadEvent",value:function loadEvent(eventRecord){var me=this,grid=me.dependencyGrid,firstLoad=!grid.store.chained,recordChange=!firstLoad&&eventRecord!==me.record;_get2(_getPrototypeOf2(DependencyTab.prototype),"loadEvent",this).call(this,eventRecord);var taskCombo=me.taskCombo,depStore=me.getProject().getDependencyStore(),eventStore=me.getProject().getEventStore();// On first load, populate the chained stores.
// Our grid store will contain only the direction of dependencies
// this tab is interested in.
// Our taskCombo only contains all events other than our event.
// An event can't depend upon itself.
if(firstLoad){// Cache the mutation generation of the underlying data collection
// so that we know when we need to refill the chained stores.
me.depStoreGeneration=depStore.storage.generation;me.eventStoreGeneration=eventStore.storage.generation;grid.store=depStore.makeChained(function(d){return d[me.negDirection]===me.record;},null);taskCombo.store=eventStore.makeChained(function(e){return e!==me.record&&!grid.store.find(function(d){return d[me.direction]===e;});},null,{doRelayToMaster:[]});}else{// Only repopulate the chained stores if the master stores have changed
// or if this is being loaded with a different record.
if(recordChange||depStore.storage.generation!==me.depStoreGeneration){grid.store.fillFromMaster();me.depStoreGeneration=depStore.storage.generation;}if(recordChange||eventStore.storage.generation!==me.eventStoreGeneration){taskCombo.store.fillFromMaster();me.eventStoreGeneration=eventStore.storage.generation;}}me.requestReadyStateChange();}},{key:"unshadowAll",value:function unshadowAll(){var _this149=this;this.dependencyGrid.store.forEach(function(d){if(d.isShadowed){d.forEachFieldAtom(function(a){a.clearUserInput();});markDependencyValid(d,_this149.dependencyGrid);d.unshadow();}});}},{key:"beforeSave",value:function beforeSave(){this.unshadowAll();_get2(_getPrototypeOf2(DependencyTab.prototype),"beforeSave",this).call(this);}},{key:"beforeCancel",value:function beforeCancel(){this.unshadowAll();_get2(_getPrototypeOf2(DependencyTab.prototype),"beforeCancel",this).call(this);}},{key:"insertNewDependency",value:function(){var _insertNewDependency=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee76(){var me,grid,depStore,projectDepStore,_depStore$insert,_depStore$insert2,newDep;return regeneratorRuntime.wrap(function _callee76$(_context216){while(1){switch(_context216.prev=_context216.next){case 0:me=this,grid=me.dependencyGrid,depStore=grid.store,projectDepStore=me.getProject().getDependencyStore();// This call will be relayed to project dependency store.
_depStore$insert=depStore.insert(0,_defineProperty({type:DependencyType.EndToStart,lag:0,lagUnit:TimeUnit.Day},me.negDirection,me.record)),_depStore$insert2=_slicedToArray(_depStore$insert,1),newDep=_depStore$insert2[0];// Reset the dependency store mutation monitor when we add a dependency
me.depStoreGeneration=projectDepStore.storage.generation;grid.features.cellEdit.startEditing({field:me.direction,id:newDep.id});markDependencyInvalid(newDep,grid);return _context216.abrupt("return",newDep);case 6:case"end":return _context216.stop();}}},_callee76,this);}));function insertNewDependency(){return _insertNewDependency.apply(this,arguments);}return insertNewDependency;}()},{key:"onAddClick",value:function onAddClick(){this.insertNewDependency();}},{key:"onRemoveClick",value:function onRemoveClick(){var me=this,toRemove=me.dependencyGrid.selectedRecords,needPropagation=toRemove.some(function(r){return!r.isShadowed();});me.getProject().getDependencyStore().remove(toRemove);me.dependencyGrid.selectedRecords=null;me.taskCombo.store.fillFromMaster();me.removeButton.disable();if(needPropagation){me.requestPropagation();}}},{key:"onGridSelectionChange",value:function onGridSelectionChange(_ref436){var selection=_ref436.selection;if(selection&&selection.length){this.removeButton.enable();}else{this.removeButton.disable();}}},{key:"onGridStartCellEdit",value:function onGridStartCellEdit(_ref437){var editorContext=_ref437.editorContext;var dep=this._editingDependency=editorContext.record,depGrid=this.dependencyGrid,dir=this.direction;if(editorContext.column.field==dir){if(!isDependencyMarkedValid(dep,depGrid)){if(!dep[dir]){editorContext.editor.inputField.setError(this.L('Invalid dependency'));}else{editorContext.editor.inputField.setError(this.L('Cyclic dependency has been detected'));}}else{[this.L('Invalid dependency'),this.L('Cyclic dependency has been detected')].forEach(function(e){return editorContext.editor.inputField.clearError(e);});}dep.shadow();}}},{key:"onGridFinishCellEdit",value:function onGridFinishCellEdit(_ref438){var editorContext=_ref438.editorContext;var me=this,dependency=editorContext.record,column=editorContext.column,dir=me.direction,depGrid=me.dependencyGrid;// Other dependency end
if(column.field===dir){if(dependency[dir]){var _projectDepStore$isVa;var projectDepStore=me.getProject().getDependencyStore();projectDepStore.isValidDependency((_projectDepStore$isVa={},_defineProperty(_projectDepStore$isVa,me.direction,dependency[me.direction]),_defineProperty(_projectDepStore$isVa,me.negDirection,dependency[me.negDirection]),_defineProperty(_projectDepStore$isVa,"lag",dependency.lag),_defineProperty(_projectDepStore$isVa,"lagUnit",dependency.lagUnit),_defineProperty(_projectDepStore$isVa,"type",dependency.type),_projectDepStore$isVa)).then(function(valid){if(valid){markDependencyValid(dependency,me.dependencyGrid);dependency.unshadow();me.taskCombo.store.fillFromMaster();me.redrawDependencyRow(dependency);// Might not be needed
me.requestPropagation();me.requestReadyStateChange();}else{markDependencyInvalid(dependency,depGrid);me.redrawDependencyRow(dependency);Toast.show({html:me.L('Cyclic dependency has been detected')});me.requestReadyStateChange();}});}else{markDependencyInvalid(dependency,depGrid);me.redrawDependencyRow(dependency);me.requestReadyStateChange();}}// Type and Lag
else{me.redrawDependencyRow(dependency);if(dependency[dir]&&isDependencyMarkedValid(dependency,depGrid)){dependency.unshadow();me.requestPropagation();}me.requestReadyStateChange();}me._editingDependency=null;}},{key:"onGridCancelCellEdit",value:function onGridCancelCellEdit(data){var me=this;if(me._editingDependency){var dep=me._editingDependency,depGrid=me.dependencyGrid;if(!dep[me.direction]){markDependencyInvalid(dep,depGrid);me.redrawDependencyRow(dep);}else if(isDependencyMarkedValid(dep,depGrid)){dep.unshadow();}me._editingDependency=null;}this.requestReadyStateChange();}},{key:"redrawDependencyRow",value:function redrawDependencyRow(dep){var grid=this.dependencyGrid;grid.rowManager.getRowById(dep).render(grid.store.indexOf(dep),dep);}},{key:"dependencyGrid",get:function get(){return this.widgetMap&&this.widgetMap["".concat(this.ref,"-grid")];}},{key:"taskCombo",get:function get(){var grid=this.dependencyGrid,from=grid&&grid.columns.get(this.direction);return from&&from.editor;}},{key:"canSave",get:function get(){var depGrid=this.dependencyGrid;return depGrid.store.reduce(function(r,d){return r&&isDependencyMarkedValid(d,depGrid);},true);}}],[{key:"makeDefaultConfig",value:function makeDefaultConfig(direction){var ref=direction==='fromEvent'?'predecessorstab':'successorstab',negDirection=direction==='fromEvent'?'toEvent':'fromEvent';return{direction:direction,negDirection:negDirection,ref:ref,localeClass:this,title:direction==='fromEvent'?'L{Predecessors}':'L{Successors}',layoutStyle:{flexFlow:'column nowrap'},items:[{type:'container',flex:'0 0 auto',items:[{type:'button',cls:'b-add-button b-green',icon:'b-icon b-icon-add',ref:"".concat(ref,"-add")},{type:'button',cls:'b-remove-button b-red',icon:'b-icon b-icon-trash',disabled:true,ref:"".concat(ref,"-remove")}]},{type:'grid',flex:'1 1 auto',ref:"".concat(ref,"-grid"),emptyText:'',columns:[{localeClass:this,text:'L{ID}',flex:1,editor:false,htmlEncode:false,renderer:function renderer(_ref439){var dependency=_ref439.record,row=_ref439.row,grid=_ref439.grid,cellElement=_ref439.cellElement;var html;if(isDependencyMarkedValid(dependency,grid)){var event=dependency[direction];html=!event||event.hasGeneratedId?'*':event.id;}else{row.addCls('b-invalid');html='<div class="b-icon b-icon-warning"></div>';}return html;}},{localeClass:this,text:'L{Name}',field:direction,flex:5,renderer:function renderer(_ref440){var value=_ref440.value;return value&&value.name||'';},editor:{type:'modelcombo',displayField:'name',valueField:'id',editable:false,allowInvalid:true}},{localeClass:this,text:'L{Type}',field:'type',flex:3,editor:'dependencytypepicker',renderer:function renderer(_ref441){var value=_ref441.value;return GanttCommon.L('dependencyTypesLong')[value];}},{localeClass:this,text:'L{Lag}',type:'duration',field:'fullLag',flex:2,editor:{allowNegative:true}}],disableGridRowModelWarning:true}]};}}]);return DependencyTab;}(ReadyStatePropagator(EventChangePropagator(TaskEditorTab(EventLoader(Delayable(Container))))));exports.DependencyTab=DependencyTab;DependencyTab._$name='DependencyTab';/**
 * @module Gantt/widget/taskeditor/SuccessorsTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the successors of a task.
 * @internal
 */var SuccessorsTab=/*#__PURE__*/function(_DependencyTab){_inherits2(SuccessorsTab,_DependencyTab);function SuccessorsTab(){_classCallCheck2(this,SuccessorsTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(SuccessorsTab).apply(this,arguments));}_createClass2(SuccessorsTab,null,[{key:"type",get:function get(){return'successorstab';}},{key:"defaultConfig",get:function get(){return Object.assign(this.makeDefaultConfig('toEvent'),{cls:'b-successors-tab'});}}]);return SuccessorsTab;}(DependencyTab);exports.SuccessorsTab=SuccessorsTab;SuccessorsTab._$name='SuccessorsTab';BryntumWidgetAdapterRegister.register(SuccessorsTab.type,SuccessorsTab);/**
 * @module Gantt/widget/taskeditor/PredecessorsTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the predecessors of a task.
 * @internal
 */var PredecessorsTab=/*#__PURE__*/function(_DependencyTab2){_inherits2(PredecessorsTab,_DependencyTab2);function PredecessorsTab(){_classCallCheck2(this,PredecessorsTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(PredecessorsTab).apply(this,arguments));}_createClass2(PredecessorsTab,null,[{key:"type",get:function get(){return'predecessorstab';}},{key:"defaultConfig",get:function get(){return Object.assign(this.makeDefaultConfig('fromEvent'),{cls:'b-predecessors-tab'});}}]);return PredecessorsTab;}(DependencyTab);exports.PredecessorsTab=PredecessorsTab;PredecessorsTab._$name='PredecessorsTab';BryntumWidgetAdapterRegister.register(PredecessorsTab.type,PredecessorsTab);/**
 * @module Gantt/widget/taskeditor/ResourcesTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the assigned resources for a task.
 * @internal
 */var ResourcesTab=/*#__PURE__*/function(_EventChangePropagato2){_inherits2(ResourcesTab,_EventChangePropagato2);function ResourcesTab(){_classCallCheck2(this,ResourcesTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(ResourcesTab).apply(this,arguments));}_createClass2(ResourcesTab,[{key:"afterConstruct",value:function afterConstruct(){_get2(_getPrototypeOf2(ResourcesTab.prototype),"afterConstruct",this).call(this);var me=this,addButton=me.addButton=me.widgetMap['resourcestab-add'],removeButton=me.removeButton=me.widgetMap['resourcestab-remove'],grid=me.grid=me.widgetMap['resourcestab-grid'];addButton&&addButton.on('click',me.onAddClick,me);removeButton&&removeButton.on('click',me.onRemoveClick,me);grid.on({selectionChange:me.onGridSelectionChange,startCellEdit:me.onGridStartCellEdit,finishCellEdit:me.onGridFinishCellEdit,cancelCellEdit:me.onGridCancelCellEdit,thisObj:me});}},{key:"loadEvent",value:function loadEvent(eventRecord){var me=this,grid=me.assignmentGrid,firstLoad=!grid.store.chained,recordChange=!firstLoad&&eventRecord!==me.record;_get2(_getPrototypeOf2(ResourcesTab.prototype),"loadEvent",this).call(this,eventRecord);var resourceCombo=me.resourceCombo,assignmentStore=me.getProject().getAssignmentStore(),resourceStore=me.getProject().getResourceStore();if(firstLoad){// Cache the mutation generation of the underlying data collection
// so that we know when we need to refill the chained stores.
me.assignmentStoreGeneration=assignmentStore.storage.generation;me.resourceStoreGeneration=resourceStore.storage.generation;grid.store=assignmentStore.makeChained(function(a){return a.event===me.record;},['resource']);resourceCombo.store=resourceStore.makeChained(function(r){return me.record&&r!==me.record.resource;});}else{// Only repopulate the chained stores if the master stores have changed
// or if this is being loaded with a different record.
if(recordChange||assignmentStore.storage.generation!==me.assignmentStoreGeneration){grid.store.fillFromMaster();}if(recordChange||resourceStore.storage.generation!==me.resourceStoreGeneration){resourceCombo.store.fillFromMaster();}}}},{key:"insertNewAssignment",value:function(){var _insertNewAssignment=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee77(){var me,project,assignmentStore,grid,_assignmentStore$inse,_assignmentStore$inse2,newAssignment;return regeneratorRuntime.wrap(function _callee77$(_context217){while(1){switch(_context217.prev=_context217.next){case 0:me=this,project=me.getProject(),assignmentStore=project.getAssignmentStore(),grid=me.assignmentGrid;_assignmentStore$inse=assignmentStore.insert(0,{event:me.record,resource:null,units:100}),_assignmentStore$inse2=_slicedToArray(_assignmentStore$inse,1),newAssignment=_assignmentStore$inse2[0];// Reset the assignment store mutation monitor when we add a assignment
me.assignmentStoreGeneration=assignmentStore.storage.generation;grid.features.cellEdit.startEditing({field:'resource',id:newAssignment.id});return _context217.abrupt("return",newAssignment);case 5:case"end":return _context217.stop();}}},_callee77,this);}));function insertNewAssignment(){return _insertNewAssignment.apply(this,arguments);}return insertNewAssignment;}()},{key:"onAddClick",value:function onAddClick(){this.insertNewAssignment();}},{key:"onRemoveClick",value:function onRemoveClick(){this.assignmentGrid.store.remove(this.assignmentGrid.selectedRecords);this.assignmentGrid.selectedRecords=null;this.removeButton.disable();this.requestPropagation();}},{key:"onGridSelectionChange",value:function onGridSelectionChange(_ref442){var selection=_ref442.selection;if(selection&&selection.length){this.removeButton.enable();}else{this.removeButton.disable();}}},{key:"onGridStartCellEdit",value:function onGridStartCellEdit(_ref443){var editorContext=_ref443.editorContext;if(editorContext.column.field==='resource'){this._editingAssignment=editorContext.record;}}},{key:"onGridFinishCellEdit",value:function onGridFinishCellEdit(){if(this._editingAssignment){if(this._editingAssignment['resource']){this.requestPropagation();}else{this._editingAssignment.remove();}this._editingAssignment=null;}else{this.requestPropagation();}}},{key:"onGridCancelCellEdit",value:function onGridCancelCellEdit(){if(this._editingAssignment){if(!this._editingAssignment['resource']){this._editingAssignment.remove();}this._editingAssignment=null;}}},{key:"assignmentGrid",get:function get(){return this.widgetMap&&this.widgetMap['resourcestab-grid'];}},{key:"resourceCombo",get:function get(){var grid=this.assignmentGrid,from=grid&&grid.columns.get('resource');return from&&from.editor;}}],[{key:"type",get:function get(){return'resourcestab';}},{key:"defaultConfig",get:function get(){var _this150=this;return{localeClass:this,title:'L{Resources}',layoutStyle:{flexFlow:'column nowrap'},items:[{type:'container',flex:'0 0 auto',items:[{type:'button',cls:'b-add-button b-green',icon:'b-icon b-icon-add',ref:'resourcestab-add'},{type:'button',cls:'b-remove-button b-red',icon:'b-icon b-icon-trash',disabled:true,ref:'resourcestab-remove'}]},{type:'grid',flex:'1 1 auto',ref:'resourcestab-grid',columns:[{localeClass:this,text:'L{Resource}',field:'resource',flex:7,renderer:function renderer(_ref444){var value=_ref444.value;return value&&value.name||'';},editor:{type:'modelcombo',displayField:'name',valueField:'id',editable:false}},{localeClass:this,text:'L{Units}',field:'units',flex:3,renderer:function renderer(data){return _this150.L('unitsTpl',data);},editor:{type:'numberfield',min:0,max:100,step:10}}],disableGridRowModelWarning:true}]};}}]);return ResourcesTab;}(EventChangePropagator(TaskEditorTab(EventLoader(Container))));exports.ResourcesTab=ResourcesTab;ResourcesTab._$name='ResourcesTab';BryntumWidgetAdapterRegister.register(ResourcesTab.type,ResourcesTab);/**
 * @module Gantt/widget/CalendarField
 */ /**
 * Event calendar selector combo.
 */var CalendarField=/*#__PURE__*/function(_ModelCombo){_inherits2(CalendarField,_ModelCombo);function CalendarField(){_classCallCheck2(this,CalendarField);return _possibleConstructorReturn2(this,_getPrototypeOf2(CalendarField).apply(this,arguments));}_createClass2(CalendarField,[{key:"value",get:function get(){return _get2(_getPrototypeOf2(CalendarField.prototype),"value",this);},set:function set(v){if(v&&v.isDefault&&v.isDefault()){v=null;}_set(_getPrototypeOf2(CalendarField.prototype),"value",v,this,true);}}],[{key:"type",get:function get(){return'calendarfield';}},{key:"defaultConfig",get:function get(){var _this151=this;return{valueField:'id',displayField:'name',editable:false,listItemTpl:function listItemTpl(c){return c&&c.name?c.name:_this151.L('Default calendar');},displayValueRenderer:function displayValueRenderer(c){return c?c.name:_this151.L('Default calendar');}};}}]);return CalendarField;}(ModelCombo);CalendarField._$name='CalendarField';BryntumWidgetAdapterRegister.register(CalendarField.type,CalendarField);/**
 * @module Gantt/widget/taskeditor/AdvancedTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the advanced fields of task, such as calendar and scheduling mode.
 * @internal
 */var AdvancedTab=/*#__PURE__*/function(_FormTab2){_inherits2(AdvancedTab,_FormTab2);function AdvancedTab(){_classCallCheck2(this,AdvancedTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(AdvancedTab).apply(this,arguments));}_createClass2(AdvancedTab,[{key:"loadEvent",value:function loadEvent(eventRecord){var me=this,firstLoad=!me.record;var calendarField=this.calendarField;if(firstLoad){calendarField.store=eventRecord.getProject().getCalendarManagerStore();}_get2(_getPrototypeOf2(AdvancedTab.prototype),"loadEvent",this).call(this,eventRecord);}},{key:"calendarField",get:function get(){return this.widgetMap.calendarField;}},{key:"constraintTypeField",get:function get(){return this.widgetMap.constraintTypeField;}},{key:"constraintDateField",get:function get(){return this.widgetMap.constraintDateField;}}],[{key:"type",get:function get(){return'advancedtab';}},{key:"defaultConfig",get:function get(){return{localeClass:this,title:'L{Advanced}',ref:'advancedtab',defaults:{localeClass:this,labelWidth:this.L('labelWidth')},items:[{type:'calendarfield',ref:'calendarField',name:'calendar',label:'L{Calendar}',flex:'1 0 50%',cls:'b-inline'},{type:'flagfield',ref:'manuallyScheduledField',name:'manuallyScheduled',label:'L{Manually scheduled}',flex:'1 0 50%'},{type:'schedulingmodecombo',ref:'schedulingModeField',name:'schedulingMode',label:'L{Scheduling mode}',flex:'1 0 50%',cls:'b-inline'},{type:'flagfield',ref:'effortDrivenField',name:'effortDriven',label:'L{Effort driven}',flex:'1 0 50%'},{html:'',dataset:{text:this.L('Constraint')},cls:'b-divider',flex:'1 0 100%'},{type:'constrainttypepicker',ref:'constraintTypeField',name:'constraintType',label:'L{Constraint type}',clearable:true,flex:'1 0 50%',cls:'b-inline'},{type:'date',ref:'constraintDateField',name:'constraintDate',label:'L{Constraint date}',flex:'1 0 50%',cls:'b-inline'}]};}}]);return AdvancedTab;}(FormTab);exports.AdvancedTab=AdvancedTab;AdvancedTab._$name='AdvancedTab';BryntumWidgetAdapterRegister.register(AdvancedTab.type,AdvancedTab);/**
 * @module Gantt/widget/taskeditor/NotesTab
 */ /**
 * A tab inside the {@link Gantt/widget/TaskEditor task editor} showing the notes for a task.
 * @internal
 */var NotesTab=/*#__PURE__*/function(_FormTab3){_inherits2(NotesTab,_FormTab3);function NotesTab(){_classCallCheck2(this,NotesTab);return _possibleConstructorReturn2(this,_getPrototypeOf2(NotesTab).apply(this,arguments));}_createClass2(NotesTab,null,[{key:"type",get:function get(){return'notestab';}},{key:"defaultConfig",get:function get(){return{localeClass:this,title:'L{Notes}',ref:'notestab',layoutConfig:{alignItems:'flex-start',alignContent:'stretch'},items:[{type:'textareafield',cls:'b-taskeditor-notes-field',name:'note'}]};}}]);return NotesTab;}(FormTab);exports.NotesTab=NotesTab;NotesTab._$name='NotesTab';BryntumWidgetAdapterRegister.register(NotesTab.type,NotesTab);/**
 * @module Gantt/widget/TaskEditor
 */ /**
 * Provides a UI to edit tasks in a popup dialog. It is implemented as a Tab Panel with
 * several preconfigured built-in tabs. Although the default configuration may be adequate
 * in many cases, the Task Editor is easily configurable.
 *
 * To hide built-in tabs or to add custom tabs, use the {@link #config-tabsConfig} config.
 *
 * To append Widgets to any of the built-in tabs, use the {@link #config-extraItems} config.
 *
 * Built-in tab names are:
 *  * generaltab
 *  * predecessorstab
 *  * successorstab
 *  * resourcestab
 *  * advancedtab
 *  * notestab
 *
 *
 * <h2>Task editor customization example</h2>
 * {@inlineexample gantt/feature/TaskEditCustom.js}
 *
 * @externalexample gantt/widget/TaskEditor.js
 * @extends Common/widget/Popup
 */var TaskEditor=/*#__PURE__*/function(_ReadyStatePropagator2){_inherits2(TaskEditor,_ReadyStatePropagator2);function TaskEditor(){_classCallCheck2(this,TaskEditor);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskEditor).apply(this,arguments));}_createClass2(TaskEditor,[{key:"processWidgetConfig",// This method is called for every child widget in the task editor
value:function processWidgetConfig(widgetConfig){var _this152=this;// TODO: find a better way to pass through duration display precession
switch(widgetConfig.ref){case'fullDurationField':widgetConfig.decimalPrecision=this.durationDecimalPrecision;break;case'predecessorstab-grid':case'successorstab-grid':widgetConfig.durationDisplayPrecision=this.durationDisplayPrecision;break;case'tabs':widgetConfig.items.forEach(function(cfg){cfg.extraItems=(_this152.extraItems||{})[cfg.type];});break;}// ----
if(widgetConfig.ref==='deleteButton'&&!this.showDeleteButton)return false;return widgetConfig;}// Called before instances of items are created. Implements support of tabsConfig.
},{key:"startConfigure",value:function startConfigure(config){var tabsConfig=config.tabsConfig||{},tabs=config.items[0].items;Object.keys(tabsConfig).forEach(function(tabType){var index;var config=tabsConfig[tabType],tab=tabs.find(function(t,i){index=i;return(tabType||'').toLowerCase()===t.type;});if(tab){// remove unwanted tab
if(config===false){tabs.splice(index,1);}// apply custom config to the default tab
else if(_typeof(config)==='object'){Object.assign(tab,config);}}// add the custom tab
else{tabs.push(config);}});_get2(_getPrototypeOf2(TaskEditor.prototype),"startConfigure",this).call(this,config);}// eo function startConfigure
},{key:"afterConfigure",value:function afterConfigure(){var me=this,widgetMap=me.widgetMap,bbarWidgets=me.bbar&&me.bbar.widgetMap||{},cancelButton=bbarWidgets.cancelButton,deleteButton=bbarWidgets.deleteButton,saveButton=bbarWidgets.saveButton;saveButton&&saveButton.on('click',me.onSaveClick,me);cancelButton&&cancelButton.on('click',me.onCancelClick,me);deleteButton&&deleteButton.on('click',me.onDeleteClick,me);Object.values(widgetMap).forEach(function(w){if(w.isEventChangePropagator){w.on('requestPropagation',me.onPropagationRequested,me);}if(w.isReadyStatePropagator){w.on('readystatechange',me.onReadyStateChange,me);}});LocaleManagerSingelton.on({locale:me.onLocaleChange,thisObj:me});}},{key:"onSaveClick",value:function onSaveClick(){if(this.canSave){this.trigger('save');}else{Toast.show({html:this.L('Can\'t save, please correct errors first.')});}}},{key:"onCancelClick",value:function onCancelClick(){this.trigger('cancel');}},{key:"onDeleteClick",value:function onDeleteClick(){this.trigger('delete');}},{key:"onPropagationRequested",value:function onPropagationRequested(){this.trigger('requestPropagation');}},{key:"onReadyStateChange",value:function onReadyStateChange(_ref445){var source=_ref445.source,canSave=_ref445.canSave;this.requestReadyStateChange();if(!source.couldSaveTitle){source.couldSaveTitle=source.title;}if(source.parent===this.widgetMap.tabs){if(canSave){source.titleElement.classList.remove('b-invalid');source.title=source.couldSaveTitle;source.couldSaveTitle=null;}else{source.titleElement.classList.add('b-invalid');source.title="<span class='b-icon b-icon-warning'></span>".concat(source.couldSaveTitle);}}}},{key:"cancelAndHide",value:function cancelAndHide(){// this handler will trigger 'cancel' event, which is caught by taskedit feature, which will cancel changes
// and that cancel also hides editor
this.onCancelClick();}/**
     * Loads a task model into the editor
     *
     * @param {Gantt.model.TaskModel} task
     */},{key:"loadEvent",value:function loadEvent(task){this.eachWidget(function(w){if(typeof w.loadEvent==='function'){w.loadEvent(task);}return true;});}},{key:"beforeSave",value:function beforeSave(){this.callWidgetHook('beforeSave');}},{key:"afterSave",value:function afterSave(){this.callWidgetHook('afterSave');}},{key:"beforeCancel",value:function beforeCancel(){this.callWidgetHook('beforeCancel');}},{key:"afterCancel",value:function afterCancel(){this.callWidgetHook('afterCancel');}},{key:"beforeDelete",value:function beforeDelete(){this.callWidgetHook('beforeDelete');}},{key:"afterDelete",value:function afterDelete(){this.callWidgetHook('afterDelete');}},{key:"callWidgetHook",value:function callWidgetHook(name){var args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];this.eachWidget(function(w){if(typeof w[name]==='function'){w[name].apply(w,_toConsumableArray(args));}});}},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){if(event.key==='Enter'&&this.owner.features.taskEdit.saveAndCloseOnEnter&&event.target.tagName.toLowerCase()==='input'){// Need to prevent this key events from being fired on whatever receives focus after the editor is hidden
event.preventDefault();this.onSaveClick();}_get2(_getPrototypeOf2(TaskEditor.prototype),"onInternalKeyDown",this).call(this,event);}//region Localizaiton
},{key:"onLocaleChange",value:function onLocaleChange(){this.width=this.L('editorWidth');}//endregion
},{key:"extraWidgets",get:function get(){console.warn('`extraWidgets` was deprecated in 1.0.1, please change your code to use `extraItems`');return this.extraItems;},set:function set(widgets){console.warn('`extraWidgets` was deprecated in 1.0.1, please change your code to use `extraItems`');this.extraItems=widgets;}},{key:"canSave",get:function get(){var widgetMap=this.widgetMap;var canSave=true;// If widget report it can't both save and cancel then there's no reason to walk through others
Object.values(widgetMap).forEach(function(w){if(w.isReadyStatePropagator){canSave=canSave&&w.canSave;}});return canSave;}},{key:"canCancel",get:function get(){var widgetMap=this.widgetMap;var canCancel=true;// If widget report it can't both save and cancel then there's no reason to walk through others
Object.values(widgetMap).forEach(function(w){if(w.isReadyStatePropagator){canCancel=canCancel&&w.canCancel;}});return canCancel;}}],[{key:"defaultConfig",get:function get(){return{localeClass:this,title:'L{Information}',width:this.L('editorWidth'),cls:'b-gantt-taskeditor',closable:true,draggable:{handleSelector:':not(button,.b-field-inner)'// blacklist butons and field inners
},axisLock:'flexible',autoClose:true,record:null,onChange:null,onCancel:null,onSave:null,autoShow:false,// Required to save editor widget height when switching between tabs, some of which may want to stretch it
height:'30em',closeAction:'cancelAndHide',items:[{type:'tabpanel',ref:'tabs',flex:'1 0 100%',layoutConfig:{alignItems:'stretch',alignContent:'stretch'},items:[{type:'generaltab'},{type:'successorstab'},{type:'predecessorstab'},{type:'resourcestab'},{type:'advancedtab'},{type:'notestab'}]}],bbar:[{localeClass:this,text:'L{Save}',type:'button',color:'b-green',ref:'saveButton'},{localeClass:this,text:'L{Delete}',type:'button',color:'b-gray',ref:'deleteButton'},{localeClass:this,text:'L{Cancel}',type:'button',color:'b-gray',ref:'cancelButton'}],/**
             * Duration field/columns decimal precision
             */durationDecimalPrecision:1,/**
             * Config object specifying widgets for tabs in task editor. Every tab accepts array of widgets/widget configs.
             * Tab names are:
             *  * generaltab
             *  * predecessorstab
             *  * successorstab
             *  * resourcestab
             *  * advancedtab
             *  * notestab
             *
             *  Example:
             * ```
             * new Gantt({
             *   features : {
             *     taskEdit : {
             *       editorConfig : {
             *         extraItems : {
             *           generaltab : [
             *             { type : 'button', text : 'My Button' },
             *             ...
             *           ]
             *         }
             *       }
             *     }
             *   }
             * });
             * ```
             * Form fields are linked to the underlying record fields by their `name` attribute.
             * @config {Object}
             */extraItems:null,/**
             * A configuration object used to configure the built-in tabs or to add custom tab(s).
             * The individual configuration objects of the tabs contained in {@link #config-tabsConfig}
             * are keyed by tab names and are merged with the default built-in configurations.
             *
             *
             * Built-in tab names are:
             *  * generaltab
             *  * predecessorstab
             *  * successorstab
             *  * resourcestab
             *  * advancedtab
             *  * notestab
             *
             * The built-in tabs can be individually switched on or off
             * or new custom tab(s) can be added.
             *
             * Example:
             * ```
             * new Gantt({
             *   features : {
             *     taskEdit : {
             *       tabsConfig : {
             *         // change title of General tab
             *         generaltab : {
             *           title : 'Common'
             *         },
             *
             *         // remove Notes tab
             *         notestab : false,
             *
             *         // add custom Files tab
             *         filestab : { type : 'filestab' },
             *         ...
             *       }
             *     }
             *   }
             * });
             * ```
             *
             * @config {Object}
             */tabsConfig:null,/**
             * This config has been deprecated in favour of {@link #config-extraItems}.
             * @deprecated 1.0.1
             * @config {String|Object[]}
             * @category Editor widgets
             */extraWidgets:null};}}]);return TaskEditor;}(ReadyStatePropagator(Popup));exports.TaskEditor=TaskEditor;TaskEditor._$name='TaskEditor';/**
 * @module Gantt/feature/TaskEdit
 */ /**
 * The Gantt task editor feature enables a popup window activated when double clicking a task bar, or through the {@link Gantt.feature.TaskContextMenu}
 *
 * {@inlineexample gantt/feature/TaskEdit.js}
 *
 * <h2>Customizing tab widgets</h2>
 * You can append any widgets to the built-in tabs using the {@link Gantt.widget.TaskEditor#config-extraItems} config.
 *
 * {@inlineexample gantt/feature/TaskEditExtraItems.js}
 *
 * <h2>Customizing tabs</h2>
 * The built-in tabs can be turned hidden and custom tabs can be added to the Task Editor using the
 * {@link #config-tabsConfig} config.
 *
 * {@inlineexample gantt/feature/TaskEditCustom.js}
 *
 * To turn off the Task Editor just simple disable the feature.
 *
 * ```javascript
 * new Gantt ({
 *     features : {
 *         taskEdit : false
 *     }
 *     ...
 * })
 * ```
 *
 * @extends Common/mixin/InstancePlugin
 * @mixes Gantt/feature/mixin/TaskEditStm
 * @mixes Common/mixin/Delayable
 */var TaskEdit=/*#__PURE__*/function(_TaskEditStm){_inherits2(TaskEdit,_TaskEditStm);function TaskEdit(){_classCallCheck2(this,TaskEdit);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskEdit).apply(this,arguments));}_createClass2(TaskEdit,[{key:"construct",value:function construct(gantt,config){var me=this;gantt.taskEdit=me;me.gantt=gantt;_get2(_getPrototypeOf2(TaskEdit.prototype),"construct",this).call(this,gantt,config);me._clientListenersDetacher=gantt.on({taskdblclick:me.onActivateEditor,thisObj:me});}},{key:"getProject",value:function getProject(){return this.gantt.project;}},{key:"doDestroy",value:function doDestroy(){var me=this;me._clientListenersDetacher();me.detachFromProject();me.editor&&me.editor.destroy();_get2(_getPrototypeOf2(TaskEdit.prototype),"doDestroy",this).call(this);}},{key:"onActivateEditor",value:function onActivateEditor(_ref446){var taskRecord=_ref446.taskRecord;this.editTask(taskRecord);}/**
     * Shows a {@link Gantt.widget.TaskEditor TaskEditor} to edit the passed task. This function is exposed on
     * the Gantt instance and can be called as `gantt.editTask()`.
     * @param {Gantt.model.TaskModel} taskRecord Task to edit
     */},{key:"editTask",value:function editTask(taskRecord){var me=this,gantt=me.gantt;if(!gantt.readOnly&&!me._editing){var editor=me.getEditor(),taskElement=DomHelper.down(gantt.getElementFromTaskRecord(taskRecord),gantt.eventInnerSelector);/**
             * Fires on the owning Gantt instance before a task is displayed in the editor.
             * This may be listened to in order to take over the task editing flow. Returning `false`
             * stops the default editing UI from being shown.
             * @event beforeTaskEdit
             * @param {Gantt.view.Gantt} source The Gantt instance
             * @param {Gantt.feature.TaskEdit} taskEdit The taskEdit feature
             * @param {Gantt.model.TaskModel} taskRecord The task about to be shown in the editor.
             * @param {HTMLElement} taskElement The element which represents the task
             * @preventable
             */if(gantt.trigger('beforeTaskEdit',{taskEdit:me,taskRecord:taskRecord,taskElement:taskElement})===false){return;}me._editing=true;// The Promise being async allows a mouseover to trigger the event tip
// unless we add the editing class immediately.
gantt.element.classList.add('b-taskeditor-editing');editor.centered=!taskElement;/**
             * Fires on the owning Scheduler when the editor for an event is available but before it is shown. Allows
             * manipulating fields etc.
             * @event beforeTaskEditShow
             * @param {Gantt.view.Gantt} source The Gantt instance
             * @param {Gantt.feature.TaskEdit} taskEdit The taskEdit feature
             * @param {Gantt.model.TaskModel} taskRecord The task about to be shown in the editor.
             * @param {HTMLElement} eventElement The element which represents the task
             * @param {Gantt.widget.TaskEditor} editor The editor
             */gantt.trigger('beforeTaskEditShow',{taskEdit:me,taskRecord:taskRecord,taskElement:taskElement,editor:editor});me.load(taskRecord);if(taskElement){editor.showBy({target:taskElement,anchor:true,offset:-5});}else{editor.show();}me.captureStm();me.startStmTransaction();me.attachToProject();}}/**
     * Gets an editor instance. Creates on first call, reuses on consecutive
     * @internal
     * @returns {Common.widget.Popup} Editor popup
     */},{key:"getEditor",value:function getEditor(){var me=this;if(!me.editor){me.editor=new TaskEditor(ObjectHelper.merge({showDeleteButton:me.showDeleteButton,owner:me.gantt,project:me.getProject(),durationDisplayPrecision:me.gantt.durationDisplayPrecision,tabsConfig:me.tabsConfig,listeners:{cancel:me.onCancel,delete:me.onDelete,save:me.onSave,requestPropagation:me.onRequestPropagation,thisObj:me}},me.editorConfig));}return me.editor;}},{key:"load",value:function load(taskRecord){var me=this,editor=me.getEditor();me._loading=true;me.record=taskRecord;editor.loadEvent(taskRecord);me._loading=false;}},{key:"save",value:function(){var _save=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee78(){var me,project,editor;return regeneratorRuntime.wrap(function _callee78$(_context218){while(1){switch(_context218.prev=_context218.next){case 0:me=this;if(!(me._editing&&!me._saving)){_context218.next=19;break;}me._saving=true;/**
             * Fires on the owning Gantt instance before a task is saved
             * @event beforeTaskSave
             * @param {Gantt.view.Gantt} source The Gantt instance
             * @param {Gantt.model.TaskModel} taskRecord The task about to be saved
             * @param {Gantt.widget.TaskEditor} editor The editor widget
             * @preventable
             */if(!(me.gantt.trigger('beforeTaskSave',{taskRecord:me.record,editor:me.getEditor()})===false)){_context218.next=5;break;}return _context218.abrupt("return");case 5:project=me.getProject();if(!project.isPropagating()){_context218.next=9;break;}_context218.next=9;return project.waitForPropagateCompleted();case 9:editor=me.getEditor();editor.beforeSave();me.commitStmTransaction();me.freeStm();editor.hide();me.detachFromProject();editor.afterSave();me.gantt.element.classList.remove('b-taskeditor-editing');me._saving=false;me._editing=false;case 19:case"end":return _context218.stop();}}},_callee78,this);}));function save(){return _save.apply(this,arguments);}return save;}()},{key:"cancel",value:function(){var _cancel=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee79(){var me,project,editor;return regeneratorRuntime.wrap(function _callee79$(_context219){while(1){switch(_context219.prev=_context219.next){case 0:me=this;if(!(me._editing&&!me._canceling)){_context219.next=22;break;}me._canceling=true;project=me.getProject();if(!project.isPropagating()){_context219.next=7;break;}_context219.next=7;return project.waitForPropagateCompleted();case 7:editor=me.getEditor();editor.beforeCancel();_context219.next=11;return editor.hide();case 11:me.rejectStmTransaction();me.disableStm();_context219.next=15;return project.propagate();case 15:me.freeStm();me.detachFromProject();editor.afterCancel();me.gantt.element.classList.remove('b-taskeditor-editing');me._canceling=false;me._editing=false;/**
             * Fires on the owning Gantt instance if task editing is canceled
             * @event afterEditCanceled
             * @param {Gantt.model.TaskModel} taskRecord The task which is canceled
             */me.gantt.trigger('afterEditCanceled',{taskRecord:me.record});case 22:case"end":return _context219.stop();}}},_callee79,this);}));function cancel(){return _cancel.apply(this,arguments);}return cancel;}()},{key:"delete",value:function(){var _delete2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee80(){var me,editor,project;return regeneratorRuntime.wrap(function _callee80$(_context220){while(1){switch(_context220.prev=_context220.next){case 0:me=this,editor=me.getEditor();/**
         * Fires on the owning Gantt before a task is deleted, return `false` to prevent it.
         * @event beforeTaskDelete
         * @param {Gantt.view.Gantt} source The Gantt instance.
         * @param {Gantt.model.TaskModel} taskRecord The record about to be deleted
         * @param {Gantt.widget.TaskEditor} editor The editor widget
         * @preventable
         */if(!(me.gantt.trigger('beforeTaskDelete',{taskRecord:me.record,editor:editor})===false)){_context220.next=3;break;}return _context220.abrupt("return");case 3:project=me.getProject();if(!project.isPropagating()){_context220.next=7;break;}_context220.next=7;return project.waitForPropagateCompleted();case 7:me.detachFromProject();editor.beforeDelete();me.record.remove();me.freeStm();_context220.next=13;return project.propagate();case 13:editor.hide();editor.afterDelete();me.gantt.element.classList.remove('b-taskeditor-editing');me._editing=false;case 17:case"end":return _context220.stop();}}},_callee80,this);}));function _delete(){return _delete2.apply(this,arguments);}return _delete;}()},{key:"onSave",value:function onSave(){var _this153=this;// There's might be propagation requested, so we giving the chance to start propagating
// before we're doing save commit procedure.
this.requestAnimationFrame(function(){return _this153.save();});}},{key:"onCancel",value:function onCancel(){var _this154=this;// There's might be propagation requested, so we giving the chance to start propagating
// before we're doing cancel rejection procedure.
this.requestAnimationFrame(function(){return _this154.cancel();});}},{key:"onDelete",value:function onDelete(){var _this155=this;// There's might be propagation requested, so we giving the chance to start propagating
// before we're doing cancel rejection procedure.
this.requestAnimationFrame(function(){return _this155.delete();});}},{key:"onRequestPropagation",value:function onRequestPropagation(){var project=this.getProject();// The propagation start is made asynchronous because it should have the lowest priority,
// the propagation might be started by the engine as the result of record property setter call
// (like setLag() for example). And then requested manually as the result of one of the tabs
// grid cell editing feature editing complete. So we delay, and if the propagation will be run
// at the next frame then we just skip.
this.requestAnimationFrame(function(){if(!project.isPropagating()){project.propagate();}});}},{key:"attachToProject",value:function attachToProject(){var me=this,project=me.getProject();me._projectEventDetacher=project.on({propagationStart:me.onPropagationStart,propagationComplete:me.onPropagationComplete,thisObj:me,detachable:true});}},{key:"detachFromProject",value:function detachFromProject(){if(this._projectEventDetacher){this._projectEventDetacher();this._projectEventDetacher=null;}}},{key:"onPropagationStart",value:function onPropagationStart(){var editor=this.getEditor();editor.mask('Calculating…');}},{key:"onPropagationComplete",value:function onPropagationComplete(_ref447){var dryRun=_ref447.dryRun;var me=this,editor=me.getEditor();!dryRun&&!me._canceling&&me.load(me.record);editor.unmask();}//region Context menu
},{key:"getTaskMenuItems",value:function getTaskMenuItems(_ref448,items){var _this156=this;var taskRecord=_ref448.taskRecord;if(!this.gantt.readOnly){items.editTask={text:this.L('Edit'),icon:'b-icon b-icon-edit',weight:-200,// Make it go first
onItem:function onItem(){return _this156.editTask(taskRecord);}};}return items;}//endregion
//region Event navigation
},{key:"onEventEnterKey",value:function onEventEnterKey(_ref449){var taskRecord=_ref449.taskRecord,target=_ref449.target;this.editTask(taskRecord);}//endregion
},{key:"isEditing",get:function get(){return!!this._editing;}}],[{key:"pluginConfig",get:function get(){return{chain:['getTaskMenuItems','onEventEnterKey'],assign:['editTask']};}},{key:"defaultConfig",get:function get(){return{/**
             * A configuration object used to configure the internal {@link Gantt.widget.TaskEditor TaskEditor} which
             * can be used to add additional tabs or remove any of the default ones.
             * @config {Object}
             */editorConfig:null,/**
             * True to show a delete button in the editor.
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showDeleteButton:true,/**
             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
             * @config {Boolean}
             * @default
             * @category Editor
             */saveAndCloseOnEnter:true,/**
             * A configuration object used to configure tabs of the task editor which can be used to
             * customize the built-in tabs without changing the whole {@link #config-editorConfig editorConfig}.
             * It is especially useful when only a few tabs should be changed.
             * The individual configuration objects of the tabs contained in {@link #config-tabsConfig tabsConfig}
             * are keyed by tab names and are merged with the default built-in configurations.
             *
             * Built-in tab names are:
             *  * generaltab
             *  * predecessorstab
             *  * successorstab
             *  * resourcestab
             *  * advancedtab
             *  * notestab
             *
             * The built-in tabs can be individually switched on or off, customized,
             * or new custom tab(s) can be added. See {@link Gantt.widget.TaskEditor#config-tabsConfig TaskEditor}
             * for details and also <b>Customizing tabs</b> example above.
             *
             * {@link #config-tabsConfig tabsConfig}
             * object is passed to {@link Gantt.widget.TaskEditor#config-tabsConfig TaskEditor} where it is applied to the built-in and custom tabs.
             *
             * @config {Object}
             */tabsConfig:null};}}]);return TaskEdit;}(TaskEditStm(Delayable(InstancePlugin)));exports.TaskEdit=TaskEdit;TaskEdit._$name='TaskEdit';GridFeatureManager.registerFeature(TaskEdit,true,'Gantt');/**
 * @module Gantt/feature/TaskResize
 */ /**
 * Feature that allows resizing a task by dragging its end date. Resizing a task by dragging its start date is not allowed.
 *
 * This feature is **enabled** by default
 *
 * @extends Scheduler/feature/base/ResizeBase
 */var TaskResize=/*#__PURE__*/function(_ResizeBase2){_inherits2(TaskResize,_ResizeBase2);function TaskResize(){_classCallCheck2(this,TaskResize);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskResize).apply(this,arguments));}_createClass2(TaskResize,[{key:"getTimespanRecord",//region Events
/**
     * Fired on the owning Gantt before resizing starts. Return false to prevent operation
     * @event beforeTaskResize
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Event} event
     */ /**
     * Fires on the owning Gantt when task resizing starts
     * @event taskResizeStart
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Event} event
     */ /**
     * Fires on the owning Gantt on each resize move event
     * @event taskPartialResize
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Date} start
     * @param {Date} end
     * @param {HTMLElement} element
     */ /**
     * Fired on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`
     * in the listener, to show a confirmation popup etc
     * ```
     *  gantt.on('beforetaskresizefinalize', ({context}) => {
     *      context.async = true;
     *      setTimeout(() => {
     *          // async code don't forget to call finalize
     *          context.finalize();
     *      }, 1000);
     *  })
     * ```
     * @event beforeTaskResizeFinalize
     * @param {Object} data
     * @param {Gantt.view.Gantt} data.source Gantt instance
     * @param {Object} data.context
     * @param {Boolean} data.context.async Set true to handle resize asynchronously (e.g. to wait for user
     * confirmation)
     * @param {Function} data.context.finalize Call this method to finalize resize. This method accepts one
     * argument: pass true to update records, or false, to ignore changes
     */ /**
     * Fires on the owning Gantt after the resizing gesture has finished.
     * @event taskResizeEnd
     * @param {Boolean} wasChanged
     * @param {Gantt.model.TaskModel} taskRecord
     */ //endregion
//region Gantt specifics
// Used by ResizeBase to get a taskRecord from the drag context
value:function getTimespanRecord(context){return context.taskRecord;}},{key:"getRowRecord",value:function getRowRecord(context){return context.taskRecord;}// Injects Gantt specific data into the drag context
},{key:"setupProductResizeContext",value:function setupProductResizeContext(context,event){var gantt=this.client,taskRecord=gantt.resolveTaskRecord(context.element);Object.assign(context,{taskRecord:taskRecord,dateConstraints:gantt.getDateConstraints(taskRecord)});}// Store used by ResizeBase to detect updates on dropped record
},{key:"internalUpdateRecord",value:function internalUpdateRecord(context,timespanRecord){var newDuration=timespanRecord.run('calculateProjectedDuration',context.startDate,context.endDate);if(newDuration===timespanRecord.duration){return false;}else{timespanRecord.setDuration(newDuration);return true;}}//endregion
},{key:"createResizeHelper",value:function createResizeHelper(){var me=this,client=me.client;return new ResizeHelper({name:me.constructor.name,// for debugging
isElementResizable:function isElementResizable(el,event){return me.isElementResizable(el,event);},targetSelector:client.eventSelector,resizingCls:'b-sch-event-resizing',allowResize:me.isElementResizable.bind(me),outerElement:client.timeAxisSubGridElement,// constrain resize to view
scrollManager:client.scrollManager,// we do not allow resizing by the start date
leftHandle:false,dragThreshold:0,listeners:{beforeresizestart:me.onBeforeResizeStart,resizestart:me.onResizeStart,resizing:me.onResizing,resize:me.onFinishResize,cancel:me.onCancelResize,thisObj:me},highlightHandle:function highlightHandle(){var target=DomHelper.up(this.currentElement,this.targetSelector),taskEl=DomHelper.up(this.currentElement,client.eventInnerSelector);// over a handle, add cls to change cursor
if(taskEl){taskEl.classList.add('b-resize-handle');target.classList.add('b-over-resize-handle');}},unHighlightHandle:function unHighlightHandle(){var target=DomHelper.up(this.currentElement,this.targetSelector);target&&target.classList.remove('b-over-resize-handle');var currentTarget=DomHelper.up(this.currentElement,client.eventInnerSelector);currentTarget&&currentTarget.classList.remove('b-resize-handle');this.currentElement=null;}});}},{key:"store",get:function get(){return this.client.taskStore;}}]);return TaskResize;}(ResizeBase);TaskResize._$name='TaskResize';GridFeatureManager.registerFeature(TaskResize,true,'Gantt');/**
 * @module Gantt/feature/TaskTooltip
 */ /**
 * This feature displays a task tooltip on mouse hover. The template of the tooltip is customizable
 * with the {@link #config-template} function.
 *
 *```javascript
 * new Gantt({
 *   features : {
 *     taskTooltip : {
 *         // Tooltip configs can be used here
 *         align : 'l-r' // Align left to right
 *     }
 *   }
 * });
 * ```
 *
 * This feature is **enabled** by default.
 *
 * @extends Scheduler/feature/base/TooltipBase
 */var TaskTooltip=/*#__PURE__*/function(_TooltipBase3){_inherits2(TaskTooltip,_TooltipBase3);function TaskTooltip(){_classCallCheck2(this,TaskTooltip);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskTooltip).apply(this,arguments));}_createClass2(TaskTooltip,null,[{key:"defaultConfig",get:function get(){return{/**
             * Template (a function accepting task data and returning a string) used to display info in the tooltip.
             * The template will be called with an object as with fields as detailed below
             * @param {Object} data
             * @param {Gantt.model.TaskModel} data.taskRecord
             * @param {string} data.startClockHtml
             * @param {string} data.endClockHtml
             * @config {function} template
             */template:function template(data){var me=this,taskRecord=data.taskRecord;var decimalPrecision=me.decimalPrecision;if(decimalPrecision==null){decimalPrecision=me.client.durationDisplayPrecision;}var multiplier=Math.pow(10,decimalPrecision),displayDuration=Math.round(taskRecord.duration*multiplier)/multiplier;return"\n                    ".concat(taskRecord.name?"<div class=\"b-gantt-task-title\">".concat(taskRecord.name,"</div>"):'',"\n                    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n                    <tr><td>").concat(me.L('Start'),":</td><td>").concat(data.startClockHtml,"</td></tr>\n                    ").concat(taskRecord.milestone?'':"\n                        <tr><td>".concat(me.L('End'),":</td><td>").concat(data.endClockHtml,"</td></tr>\n                        <tr><td>").concat(me.L('Duration'),":</td><td class=\"b-right\">").concat(displayDuration+' '+DateHelper.getLocalizedNameOfUnit(taskRecord.durationUnit,taskRecord.duration!==1),"</td></tr>\n                        <tr><td>").concat(me.L('Complete'),":</td><td class=\"b-right\">").concat(taskRecord.renderedPercentDone,"%</td></tr>\n                    "),"\n                    </table>\n                ");},/**
             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.
             * Specify a integer value to override that setting, or `false` to use raw value
             * @config {Number|Boolean}
             */decimalPrecision:null,cls:'b-gantt-task-tooltip'};}}]);return TaskTooltip;}(TooltipBase);exports.TaskTooltip=TaskTooltip;TaskTooltip._$name='TaskTooltip';GridFeatureManager.registerFeature(TaskTooltip,true,'Gantt');/**
 * @module Gantt/view/Gantt
 */var emptyObject$4=Object.freeze({});var newTaskCount=0;/**
 * <h2>Summary</h2>
 * The <b>Gantt</b> widget is the main component that visualizes the project data contained in a
 *  {@link Gantt.model.ProjectModel ProjectModel} instance. The Gantt view is implemented as a treegrid consisting
 *  of a left section showing the task hierarchy (or WBS) and a right section showing a graphical representation of the tasks on the time axis.
 *  Task relationships (or "dependencies") are rendered as arrows between the tasks and in the background you can (optionally) render non-working time too.
 *
 * The view is very interactive by default:
 *  * hovering over elements shows informative tooltips
 *  * right-clicking various elements shows context menus
 *  * double-clicking the task name shows an inline editor
 *  * double-clicking a task bar opens a detailed task editor popup
 *  * task bars can be dragged and resized
 *  * task progress can be changed by drag drop
 *  * task dependencies can be created by drag drop
 *
 * The Gantt view is very easy to use and is fully functional with minimal configuration yet
 * it is highly configurable through many configuration options and features.
 *
 * The minimum configuration consists of a {@link #config-project} and {@link Grid.view.Grid#config-columns}.
 * (If you only want to show the "Name" column, you can even omit `columns` as it's the default column set.)
 *
 * {@inlineexample gantt/Gantt.js}
 *
 * <h2>Configuring data for Gantt</h2>
 * The central place for all data visualized in the Gantt chart is the {@link Gantt.model.ProjectModel ProjectModel} instance, passed as the {@link #config-project}
 * configuration option when configuring the Gantt.
 *
 * For details related to the Gantt data structure / updating data / loading and saving data to the server,
 * adding custom fields and other information, please refer to the [Project data guide](#guides/project_data.md).
 *
 * <h2>Configuring columns</h2>
 * The only mandatory column is the <code>name</code> column which is of type {@link Gantt.column.NameColumn NameColumn}.
 * It is a tree column that shows the project WBS structure, and allows inline editing of the
 * {@link Gantt.model.TaskModel#field-name} field.
 *
 * The Gantt chart ships with lots of predefined columns (such as {@link Gantt.column.PercentDoneColumn PercentDoneColumn) but you can of course add your own columns too, showing any additional data in your data model.
 *
 * {@inlineexample gantt/GanttColumns.js}
 *
 * <h2>Advanced configurations</h2>
 * Almost any aspect of Bryntum Gantt can be configured. The included examples cover most of the supported configuration options.
 * To see some of the features in action, please click on the links below:
 *
 *  * [Labels](../examples/labels/)
 *  * [Tooltips](../examples/tooltips)
 *  * [Time Ranges](../examples/timeranges/)
 *  * [Resource Picker](../examples/resourceassignment/)
 *  * [Context Menu](../examples/taskcontextmenu/)
 *  * [Task Editor](../examples/taskeditor/)
 *  * [Undo/Redo](../examples/undoredo/)
 *  * [Advanced](../examples/advanced)
 *
 *
 * @mixes Gantt/view/mixin/GanttDom
 * @mixes Gantt/view/mixin/GanttRegions
 * @mixes Gantt/view/mixin/GanttScroll
 * @mixes Gantt/view/mixin/GanttState
 * @mixes Gantt/view/mixin/GanttStores
 * @mixes Scheduler/view/mixin/EventNavigation
 * @mixes Gantt/view/mixin/TaskNavigation
 *
 * @extends Scheduler/view/TimelineBase
 */var Gantt=/*#__PURE__*/function(_base$mixes6){_inherits2(Gantt,_base$mixes6);function Gantt(){_classCallCheck2(this,Gantt);return _possibleConstructorReturn2(this,_getPrototypeOf2(Gantt).apply(this,arguments));}_createClass2(Gantt,[{key:"construct",//endregion
//region Init
value:function construct(config){var me=this;// TODO: Config system to be enhanced to merge object properties from the hierarchy's
// defaultConfig set so that each class level could just declare the features it requires.
if(!config.features)config.features={};// gantt is always a tree
if(!('tree'in config.features)){config.features.tree=true;}var project=config.project;var hasInlineStores=Boolean(config.calendars||config.taskStore||config.dependencyStore||config.resourceStore||config.assignmentStore);var hasInlineData=Boolean(config.calendars||config.tasks||config.dependencies||config.resources||config.assignments);if(project&&(hasInlineStores||hasInlineData))throw new Error('Providing both project and inline data is not supported');// gather all data in the ProjectModel instance
if(!project){project=config.project=new ProjectModel({calendarsData:config.calendars,eventsData:config.tasks,dependenciesData:config.dependencies,resourcesData:config.resources,assignmentsData:config.assignments,resourceStore:config.resourceStore,eventStore:config.taskStore,assignmentStore:config.assignmentStore,dependencyStore:config.dependencyStore,timeRangeStore:config.timeRangeStore});delete config.resourceStore;delete config.taskStore;delete config.assignmentStore;delete config.dependencyStore;delete config.timeRangeStore;delete config.calendars;delete config.resources;delete config.tasks;delete config.assignments;delete config.dependencies;}// EOF data gathering
// Add listeners with negative prority to call propagation after rows are rendered
project.getEventStore().on({add:me.onTaskStoreAddOrRemove,remove:me.onTaskStoreAddOrRemove,prio:-1,thisObj:me});project.on({eventstorechanged:me.onTaskStoreChange,refresh:me.onProjectRefresh,load:me.onProjectLoad,thisObj:me});// If project is already loaded, possibly need to adjust timeline
// if (project.loaded) {
//     this.onProjectLoad();
// }
_get2(_getPrototypeOf2(Gantt.prototype),"construct",this).call(this,config);if(me.features.cellEdit){me.features.cellEdit.addNewAtEnd={name:me.L('New Task'),startDate:project.startDate,duration:1,durationUnit:me.timeAxis.unit};}me.on('taskclick',me.onTaskBarClick,me);// Project could be loaded prior to Gantt instantiation
if(project.isCrudManagerLoading){me.onStoreLoadStart();}}},{key:"onTaskStoreAddOrRemove",//endregion
//region Events
value:function onTaskStoreAddOrRemove(_ref450){var _this157=this;var isExpand=_ref450.isExpand,isCollapse=_ref450.isCollapse;// Do not recalculate project if we expand or collapse
// Also if we undoing/redoing, because project will be in already calculated state
if(!isExpand&&!isCollapse&&!this.project.stm.isRestoring){// This code basically means "if no one started propagation on previous animation frame after record
// was added, start one to schedule new records". Required by refactored async addTask method, which forces
// propagation
this.requestAnimationFrame(function(){if(!_this157.project.isPropagating()){_this157.project.propagate();}});}}},{key:"onProjectRefresh",value:function onProjectRefresh(){this.refreshRows();// storing feature into variable allows to save quite a few time on big projects
var dependencyFeature=this.features.dependencies;// Add all dependencies to the cache, required dependencies will be drawn in next animation frame and will be
// properly updated on view scroll
this.dependencies.forEach(function(dep){return dependencyFeature.addToGridCache(dep);});}// On project load, show project start date unless implementer chose a specific start date of the timeline
},{key:"onProjectLoad",value:function onProjectLoad(){var me=this;if(!('startDate'in me.initialConfig)&&me.project.startDate){me.startDate=me.project.startDate;}}// Features can hook into this to add to generated task data
},{key:"onTaskDataGenerated",value:function onTaskDataGenerated(){}},{key:"onTaskBarClick",value:function onTaskBarClick(_ref451){var taskRecord=_ref451.taskRecord;if(!taskRecord.isLeaf){this.toggleCollapse(taskRecord);}}// Grid row selection change
// TODO #8301 - EventSelection based on Collection may break it
},{key:"triggerChangeEvent",value:function triggerChangeEvent(selectionChangeEvent,silent){_get2(_getPrototypeOf2(Gantt.prototype),"triggerChangeEvent",this).call(this,selectionChangeEvent,silent);var me=this;function setTaskSelection(record,selected){var taskElement=me.getElementFromTaskRecord(record);if(taskElement){taskElement.classList[selected?'add':'remove']('b-task-selected');}}if(selectionChangeEvent.mode==='row'){selectionChangeEvent.selected.map(function(record){return setTaskSelection(record,true);});selectionChangeEvent.deselected.map(function(record){return setTaskSelection(record,false);});}}//endregion
//region TimelineBase implementations
// Gantt only has one orientation, but TimelineBase expects this to work to call correct rendering code
},{key:"getTimeSpanMouseEventParams",value:function getTimeSpanMouseEventParams(taskElement,event){var taskRecord=this.resolveTaskRecord(taskElement);return!taskRecord?null:{taskRecord:taskRecord,taskElement:taskElement,event:event};}},{key:"getScheduleMouseEventParams",value:function getScheduleMouseEventParams(cellData){return{taskRecord:this.store.getById(cellData.id)};}// Used by shared features to resolve an event or task
},{key:"resolveTimeSpanRecord",value:function resolveTimeSpanRecord(element){return this.resolveTaskRecord(element);}},{key:"repaintEventsForResource",value:function repaintEventsForResource(taskRecord){var me=this;me.taskRendering.cache.clearRow(taskRecord.id);var row=me.getRowFor(taskRecord);if(row){me.rowManager.renderFromRow(row);}}//endregion
// region ContextMenu
},{key:"addTask",value:function(){var _addTask=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee81(taskRecord){var options,me,milestone,above,asChild,asPredecessor,asSuccessor,project,parent,newRecord,_args221=arguments;return regeneratorRuntime.wrap(function _callee81$(_context221){while(1){switch(_context221.prev=_context221.next){case 0:options=_args221.length>1&&_args221[1]!==undefined?_args221[1]:emptyObject$4;me=this,milestone=options.milestone,above=options.above,asChild=options.asChild,asPredecessor=options.asPredecessor,asSuccessor=options.asSuccessor,project=me.store.getProject(),parent=taskRecord.parent,newRecord=taskRecord.copy();if(parent.isRoot){newRecord.startDate=project.startDate;}if(milestone){newRecord.name="".concat(me.L('New milestone')," ").concat(++newTaskCount);}else{newRecord.name="".concat(me.L('New task')," ").concat(++newTaskCount);}if(asChild){taskRecord.insertChild(newRecord,taskRecord.firstChild);}else{if(above){taskRecord.parent.insertChild(newRecord,taskRecord);}else{parent.insertChild(newRecord,taskRecord.nextSibling);}}if(!milestone){_context221.next=10;break;}_context221.next=8;return newRecord.convertToMilestone();case 8:_context221.next=12;break;case 10:_context221.next=12;return project.propagate();case 12:// run propagation to handle the new task record
// and then add a dependency if needed
if(asSuccessor){me.dependencyStore.add({fromEvent:taskRecord,toEvent:newRecord,type:DependencyType.EndToStart,fromSide:'right',toSide:'left'});}else if(asPredecessor){me.dependencyStore.add({fromEvent:newRecord,toEvent:taskRecord,type:DependencyType.EndToStart,fromSide:'right',toSide:'left'});}if(!(asSuccessor||asPredecessor)){_context221.next=16;break;}_context221.next=16;return project.propagate();case 16:return _context221.abrupt("return",newRecord);case 17:case"end":return _context221.stop();}}},_callee81,this);}));function addTask(_x111){return _addTask.apply(this,arguments);}return addTask;}()},{key:"addTaskAbove",value:function addTaskAbove(taskRecord){return this.addTask(taskRecord,{above:true});}},{key:"addTaskBelow",value:function addTaskBelow(taskRecord){return this.addTask(taskRecord);}},{key:"addMilestonBelow",value:function addMilestonBelow(taskRecord){return this.addTask(taskRecord,{milestone:true});}},{key:"addSubtask",value:function addSubtask(taskRecord){var result=this.addTask(taskRecord,{asChild:true});this.toggleCollapse(taskRecord,false);return result;}},{key:"addSuccessor",value:function addSuccessor(taskRecord){return this.addTask(taskRecord,{asSuccessor:true});}},{key:"addPredecessor",value:function addPredecessor(taskRecord){return this.addTask(taskRecord,{above:true,asPredecessor:true});}// endregion
},{key:"columns",get:function get(){return _get2(_getPrototypeOf2(Gantt.prototype),"columns",this);},set:function set(columns){// Always include the name column
if(columns&&!columns.some(function(column){var constructor=column instanceof Column?column.constructor:ColumnStore.getColumnClass(column.type);return constructor===NameColumn||constructor.prototype instanceof NameColumn;})){columns.unshift({type:'name'});}_set(_getPrototypeOf2(Gantt.prototype),"columns",columns,this,true);}// Overrides TimelineBase to supply taskStore as its store (which is only used in passed events)
},{key:"timeAxisViewModel",set:function set(timeAxisViewModel){_set(_getPrototypeOf2(Gantt.prototype),"timeAxisViewModel",timeAxisViewModel,this,true);if(this.taskStore){this.timeAxisViewModel.store=this.taskStore;}},get:function get(){return _get2(_getPrototypeOf2(Gantt.prototype),"timeAxisViewModel",this);}},{key:"currentOrientation",get:function get(){var me=this;if(!me._currentOrientation){me.taskRendering=me._currentOrientation=new TaskRendering(me);}return me._currentOrientation;}}],[{key:"defaultConfig",//region Task interaction events
/**
     * Triggered after a mousedown on a task bar.
     * @event taskMouseDown
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered after a mouseup on a task bar.
     * @event taskMouseUp
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered after a click on a task bar.
     * @event taskClick
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered after a doubleclick on a task.
     * @event taskDblClick
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered after a rightclick (or long press on a touch device) on a task.
     * @event taskContextMenu
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered after a mouseover on a task.
     * @event taskMouseOver
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ /**
     * Triggered for mouseout from a task.
     * @event taskMouseOut
     * @param {Gantt.view.Gantt} source The Gantt instance
     * @param {Gantt.model.TaskModel} taskRecord The Task record
     * @param {MouseEvent} event The native browser event
     */ //endregion
//region Config
get:function get(){return{/**
             * Project config or instance
             *
             * @config {Gantt.model.ProjectModel} project
             */ /**
             * The project instance, containing the data, that this chart is going to be visualizing.
             *
             * @property {Gantt.model.ProjectModel}
             */project:null,// data for the stores, in the topological order
calendars:null,resources:null,tasks:null,dependencies:null,assignments:null,eventCls:'b-gantt-task',eventBarTextField:null,eventLayout:'none',eventSelectionDisable:true,eventColor:null,eventStyle:null,rowHeight:45,scheduledEventName:'task',eventScrollMode:'move',overScheduledEventClass:'b-gantt-task-hover',mode:'horizontal',timeCellCls:'b-sch-timeaxis-cell',timeCellSelector:'.b-sch-timeaxis-cell',// TODO: This will be brought in by the TaskNavigation mixin when it is implemented
focusCls:'b-active',/**
             * Decimal precision used for displaying durations, used by tooltips and DurationColumn.
             * Specify `false` to use raw value
             * @config {Number|Boolean}
             * @default
             */durationDisplayPrecision:1,/**
             * An empty function by default, but provided so that you can override it. This function is called each time
             * a task is rendered into the gantt to render the contents of the task
             * @param {Object} detail An object containing the information needed to render a Task.
             * @param {Gantt.model.TaskModel} detail.taskRecord The task record.
             * @param {Object} detail.tplData An object containing details about the task rendering.
             * @param {Common.helper.util.DomClassList} detail.tplData.cls An object whose property names represent the CSS class names
             * to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class
             * name based on the property name. Using this technique, you do not have to know whether the class is already
             * there, or deal with concatenation.
             * @param {Common.helper.util.DomClassList} detail.tplData.iconCls An object whose property names represent the CSS class
             * names to be added to an task icon element.
             * @returns {String} A simple string creating the actual HTML
             * @config {Function}
             */taskRenderer:null};}}]);return Gantt;}(base(TimelineBase).mixes(GanttDom,GanttRegions,GanttScroll,GanttState,GanttStores,GanttTimelineDateMapper,EventNavigation,TaskNavigation));exports.Gantt=Gantt;Gantt._$name='Gantt';BryntumWidgetAdapterRegister.register('gantt',Gantt);VersionHelper.setVersion('gantt','1.1.5');/**
 * @module Gantt/feature/Dependencies
 */var fromBoxSide$1=['left','left','right','right'],toBoxSide$1=['left','right','left','right'];// noinspection JSClosureCompilerSyntax
/**
 * Feature that draws dependencies between tasks. Uses a dependency {@link Gantt.model.ProjectModel#property-dependencyStore store}
 * to determine which dependencies to draw.
 *
 * This feature is **enabled** by default
 *
 * <div class="external-example" data-file="guides/gettingstarted/basic.js"></div>
 * @extends Scheduler/feature/Dependencies
 * @typings Scheduler/feature/Dependencies -> Scheduler/feature/SchedulerDependencies
 */var Dependencies$1=/*#__PURE__*/function(_Dependencies){_inherits2(Dependencies$1,_Dependencies);function Dependencies$1(){_classCallCheck2(this,Dependencies$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(Dependencies$1).apply(this,arguments));}_createClass2(Dependencies$1,[{key:"construct",//endregion
//region Init
value:function construct(gantt){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;// Scheduler might be using gantts feature, when on same page
if(gantt instanceof Gantt){me.gantt=gantt;}if(config.hasOwnProperty('pathFinderConfig')){if(!config.pathFinderConfig.hasOwnProperty('otherHorizontalMargin')){config.pathFinderConfig.otherHorizontalMargin=0;}if(!config.pathFinderConfig.hasOwnProperty('otherVerticalMargin')){config.pathFinderConfig.otherVerticalMargin=0;}}else{config.pathFinderConfig={otherHorizontalMargin:0,otherVerticalMargin:0};}_get2(_getPrototypeOf2(Dependencies$1.prototype),"construct",this).call(this,gantt,config);}//endregion
//region Determining dependencies to draw
// With multi-assign each dependency might be drawn several times
},{key:"getDependencyAssignments",value:function getDependencyAssignments(dependency){if(!this.gantt){return _get2(_getPrototypeOf2(Dependencies$1.prototype),"getDependencyAssignments",this).call(this,dependency);}return[null];}// Neither task can be hidden for a dependency to be considered visible
},{key:"isDependencyVisible",value:function isDependencyVisible(dependency){var assignmentData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var client=this.client;var from=dependency.sourceTask,to=dependency.targetTask;// ignore dependency with bad data, the `Object(from) !== from` handles the case
// when the from is an id of missing task
// this might change in the future (from will be always either a Task model or undefined)
// so only the `if (!from || !to) return;` will be needed
if(!from||!to||Object(from)!==from||Object(to)!==to)return;// assignmentData only used in Scheduler with multi assignment, let it handle the call
if(!(from instanceof TaskModel)||assignmentData){return _get2(_getPrototypeOf2(Dependencies$1.prototype),"isDependencyVisible",this).call(this,dependency,assignmentData);}// placeHolder set if either end of the dependency does not exist in store
return!from.placeHolder&&!from.instanceMeta(client.store).hidden&&!to.placeHolder&&!to.instanceMeta(client.store).hidden;}// Get the bounding box for either the source or the target event
},{key:"getBox",value:function getBox(dependency,source){var assignmentData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var taskRecord=this.getTimeSpanRecordFromDependency(dependency,source);if(!this.gantt){// Scheduler using gantts feature (happens when using single bundle)
if(taskRecord.isEvent||assignmentData){return _get2(_getPrototypeOf2(Dependencies$1.prototype),"getBox",this).call(this,dependency,source,assignmentData);}// Scheduler with taskStore, might not have any resource assigned
return taskRecord.assignments.length?this.client.getResourceEventBox(taskRecord,taskRecord.assignments[0].resource,true):null;}// TODO: change getTaskBox to use Rectangle
return this.gantt.getTaskBox(taskRecord,true,true);}// Get source or target events resource
},{key:"getRowRecordFromDependency",value:function getRowRecordFromDependency(dependency,source){if(!this.gantt){// Scheduler with taskStore, we want the resource
var taskRecord=this.getTimeSpanRecordFromDependency(dependency,source);// Scheduler using gantts feature (happens when using single bundle)
if(taskRecord.isEvent){return _get2(_getPrototypeOf2(Dependencies$1.prototype),"getRowRecordFromDependency",this).call(this,dependency,source);}// Might not have one assigned
return taskRecord.assignments.length?taskRecord.assignments[0].resource:null;}return this.getTimeSpanRecordFromDependency(dependency,source);}//endregion
//region Draw & render
},{key:"drawLine",value:function drawLine(canvas,dependency,points){var assignmentData=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_get2(_getPrototypeOf2(Dependencies$1.prototype),"drawLine",this).call(this,canvas,dependency,points,assignmentData);var client=this.client,metaId=this.getMetaId(assignmentData),line=dependency.instanceMeta(metaId).lineElement,to=dependency.toEvent;// If target event is outside of the view add special CSS class to hide marker (arrow)
if(!to.milestone&&(to.endDate<=client.startDate||client.endDate<=to.startDate)||to.milestone&&(to.endDate<client.startDate||client.endDate<to.startDate)){line.classList.add('b-sch-dependency-ends-outside');}}},{key:"prepareLineDef",value:function prepareLineDef(dependency,dependencyDrawData){var assignmentData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var me=this,source=me.getTimeSpanRecordFromDependency(dependency,true),target=me.getTimeSpanRecordFromDependency(dependency,false),type=dependency.type,arrowMargin=this.pathFinder.startArrowMargin;var startSide=dependency.fromSide,endSide=dependency.toSide;// Fallback to view trait if dependency start side is not given
if(!startSide){switch(true){case type===DependencyType.StartToEnd:startSide=me.getConnectorStartSide(source);break;case type===DependencyType.StartToStart:startSide=me.getConnectorStartSide(source);break;case type===DependencyType.EndToStart:startSide=me.getConnectorEndSide(source);break;case type===DependencyType.EndToEnd:startSide=me.getConnectorEndSide(source);break;default:throw new Error('Invalid dependency type: '+type);}}// Fallback to view trait if dependency end side is not given
if(!endSide){switch(true){case type===DependencyType.StartToEnd:endSide=me.getConnectorEndSide(target);break;case type===DependencyType.StartToStart:endSide=me.getConnectorStartSide(target);break;case type===DependencyType.EndToStart:endSide=me.getConnectorStartSide(target);break;case type===DependencyType.EndToEnd:endSide=me.getConnectorEndSide(target);break;default:throw new Error('Invalid dependency type: '+type);}}var startRectangle=dependencyDrawData.startRectangle,endRectangle=dependencyDrawData.endRectangle;if(type===DependencyType.EndToStart&&// Target box is below source box
startRectangle.bottom<endRectangle.y&&// If source box end before target box start - draw line to the top edge
startRectangle.right-endRectangle.x<=0){// arrow to left part of top
endSide='top';// The default entry point for top is the center, but for Gantt Tasks,
// we join to startArrowMargin inwards from top/left.
// Milestones always have the top entry point left in the center.
if(!dependency.targetTask.milestone){endRectangle.right=endRectangle.x+arrowMargin*2;}}// append boxes that extend to row boundaries to make sure line is contained there
// Always concider arrow margin for `otherBoxes`, otherwise, when gap between source and target is less than
// arrowMargin * 2 (start arrow + end arrow margin), we will have line breaking not on the row boundary
var sourceRowBox=me.client.getRecordCoords(source,true),targetRowBox=me.client.getRecordCoords(target,true),// Add vertical box for each task. They are supposed to push line to row boundary
otherBoxes=[{start:startRectangle.x,end:startRectangle.right,top:sourceRowBox.y,bottom:sourceRowBox.y+sourceRowBox.height},{start:endRectangle.x,end:endRectangle.right,top:targetRowBox.y,bottom:targetRowBox.y+targetRowBox.height}];// Reversing start/end endpoints generate more Gantt-friendly arrows
return{endBox:{start:startRectangle.x,end:startRectangle.right,top:startRectangle.y,bottom:startRectangle.bottom},startBox:{start:endRectangle.x,end:endRectangle.right,top:endRectangle.y,bottom:endRectangle.bottom},endSide:startSide,startSide:endSide,boxesReversed:true,otherBoxes:otherBoxes};}// onEventChanged({ action, record }) {
//     switch (action) {
//         case 'update':
//             // event updated, redraw its dependencies
//             return this.drawForTask(record);
//     }
// }
/**
     * Draws all dependencies for the specified task.
     */},{key:"drawForTask",value:function drawForTask(taskRecord){this.drawForTimeSpan(taskRecord);}//endregion
//region Tooltip
/**
     * Generates html for the tooltip shown when hovering a dependency
     * @param {Object} tooltipConfig
     * @returns {string} Html to display in the tooltip
     * @private
     */},{key:"getHoverTipHtml",value:function getHoverTipHtml(_ref452){var forElement=_ref452.forElement;var me=this,dependencyModel=me.getDependencyForElement(forElement);if(!dependencyModel){return null;}var fromTask=dependencyModel.sourceTask,toTask=dependencyModel.targetTask;return TemplateHelper.tpl(_templateObject30(),me.L('from'),fromTask.name,fromTask.id,fromBoxSide$1[dependencyModel.type],me.L('to'),toTask.name,toTask.id,toBoxSide$1[dependencyModel.type]);}//endregion
//region Dependency creation
/**
     * Create a new dependency from source terminal to target terminal
     * @internal
     */},{key:"createDependency",value:function createDependency(){var me=this,data=me.creationData,source=data.source,target=data.target,fromSide=data.sourceTerminal.dataset.side,toSide=data.targetTerminal.dataset.side,type=(fromSide==='left'?0:2)+(toSide==='right'?1:0);me.store.add({fromEvent:source,toEvent:target,type:type,fromSide:fromSide,toSide:toSide});me.store.getProject().propagate();}// endregion
// Add critical path marker which has different color
},{key:"createMarkers",value:function createMarkers(){_get2(_getPrototypeOf2(Dependencies$1.prototype),"createMarkers",this).call(this);// Since Edge and IE11 cannot reverse marker we use one in a
// required orientation, which exists only in those two browsers
var endMarker=(this.startMarker||this.endMarker).cloneNode(true);endMarker.setAttribute('id','arrowEndCritical');this.client.svgCanvas.appendChild(endMarker);}}],[{key:"defaultConfig",//region Config
get:function get(){return{terminalSides:['left','right'],storeClass:DependencyStore$1,highlightDependenciesOnEventHover:true};}}]);return Dependencies$1;}(Dependencies);// Needed for module bundle, which turns class name into Dependencies$1 and registers it wrong
exports.Dependencies=Dependencies$1;Dependencies$1._$name='Dependencies';Dependencies$1._$name='Dependencies';GridFeatureManager.registerFeature(Dependencies$1,true,'Gantt');/**
 * @module Common/widget/DisplayField
 */ /**
 * DisplayField widget used to show a read only value
 *
 * @extends Common/widget/Field
 *
 * @example
 * let displayField = new DisplayField({
 *   label: 'name',
 *   value : 'John Doe'
 * });
 *
 * @classType DisplayField
 * @externalexample widget/DisplayField.js
 */var DisplayField=/*#__PURE__*/function(_TextField3){_inherits2(DisplayField,_TextField3);function DisplayField(){_classCallCheck2(this,DisplayField);return _possibleConstructorReturn2(this,_getPrototypeOf2(DisplayField).apply(this,arguments));}_createClass2(DisplayField,[{key:"focusElement",get:function get(){// we're not focusable.
}},{key:"readOnly",set:function set(value){// empty, to not allow changing readOnly status
},get:function get(){return true;}}],[{key:"defaultConfig",get:function get(){return{readOnly:true,editable:false,cls:'b-display-field'};}}]);return DisplayField;}(TextField);DisplayField._$name='DisplayField';BryntumWidgetAdapterRegister.register('display',DisplayField);/**
 * @module Scheduler/view/DependencyEditor
 */ /**
 * A dependency editor popup.
 *
 * @extends Common/widget/Popup
 * @private
 */var DependencyEditor=/*#__PURE__*/function(_Popup5){_inherits2(DependencyEditor,_Popup5);function DependencyEditor(){_classCallCheck2(this,DependencyEditor);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyEditor).apply(this,arguments));}_createClass2(DependencyEditor,[{key:"processWidgetConfig",value:function processWidgetConfig(widget){var dependencyEditFeature=this.dependencyEditFeature;var fieldConfig={};if(widget.ref==='lagField'&&!dependencyEditFeature.showLagField){return false;}if(widget.ref==='deleteButton'&&!dependencyEditFeature.showDeleteButton){return false;}Object.assign(widget,fieldConfig);return _get2(_getPrototypeOf2(DependencyEditor.prototype),"processWidgetConfig",this).call(this,widget);}},{key:"afterShow",value:function afterShow(){var _get31;var deleteButton=this.widgetMap.deleteButton;// Only show delete button if the dependency record belongs to a store
if(deleteButton){deleteButton.hidden=!this.record.isPartOfStore();}for(var _len76=arguments.length,args=new Array(_len76),_key75=0;_key75<_len76;_key75++){args[_key75]=arguments[_key75];}(_get31=_get2(_getPrototypeOf2(DependencyEditor.prototype),"afterShow",this)).call.apply(_get31,[this].concat(args));}},{key:"onInternalKeyDown",value:function onInternalKeyDown(event){this.trigger('keyDown',{event:event});_get2(_getPrototypeOf2(DependencyEditor.prototype),"onInternalKeyDown",this).call(this,event);}}],[{key:"defaultConfig",get:function get(){return{items:[],draggable:{handleSelector:':not(button,.b-field-inner)'// blacklist buttons and field inners
},axisLock:'flexible'};}}]);return DependencyEditor;}(Popup);DependencyEditor._$name='DependencyEditor';/**
 * @module Scheduler/feature/DependencyEdit
 */ /**
 * Feature that displays a popup containing fields for editing a dependency. Requires the {@link Scheduler.feature.Dependencies Dependencies} feature to be enabled.
 *
 * This feature is **disabled** by default. It does **not** support vertical mode.
 *
 * @extends Common/mixin/InstancePlugin
 * @externalexample scheduler/Dependencies.js
 */var DependencyEdit=/*#__PURE__*/function(_InstancePlugin28){_inherits2(DependencyEdit,_InstancePlugin28);function DependencyEdit(){_classCallCheck2(this,DependencyEdit);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyEdit).apply(this,arguments));}_createClass2(DependencyEdit,[{key:"construct",//endregion
//region Init & destroy
value:function construct(client,config){var _client$on3;var me=this;client.dependencyEdit=me;me.dependencyStore=client.dependencyStore;_get2(_getPrototypeOf2(DependencyEdit.prototype),"construct",this).call(this,client,config);if(!client.features.dependencies){throw new Error('Dependencies feature required when using DependencyEdit');}me.clientListenersDetacher=client.on((_client$on3={},_defineProperty(_client$on3,me.triggerEvent,me.onActivateEditor),_defineProperty(_client$on3,"thisObj",me),_client$on3));}},{key:"doDestroy",value:function doDestroy(){this.clientListenersDetacher();this.editor&&this.editor.destroy();_get2(_getPrototypeOf2(DependencyEdit.prototype),"doDestroy",this).call(this);}//endregion
//region Editing
},{key:"onBeforeSave",/**
     * Template method, intended to be overridden. Called before the dependency record has been updated.
     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record
     *
     **/value:function onBeforeSave(dependencyRecord){}/**
     * Template method, intended to be overridden. Called after the dependency record has been updated.
     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record
     *
     **/},{key:"onAfterSave",value:function onAfterSave(dependencyRecord){}/**
     * Updates record being edited with values from the editor
     * @private
     */},{key:"updateRecord",value:function updateRecord(dependency){var values=this.values;dependency.beginBatch();dependency.set(values);if(this.lagField){var lag=this.lagField.value;dependency.setLag(lag.magnitude,lag.unit);}if(this.typeField&&'type'in values){dependency.set({fromSide:null,toSide:null});}dependency.endBatch();}//endregion
//region Events
},{key:"onPopupKeyDown",value:function onPopupKeyDown(_ref453){var event=_ref453.event;if(event.key==='Enter'&&this.saveAndCloseOnEnter&&event.target.tagName.toLowerCase()==='input'){// Need to prevent this key events from being fired on whatever receives focus after the editor is hidden
event.preventDefault();this.onSaveClick();}}},{key:"onSaveClick",value:function onSaveClick(){if(this.save()){this.editor.hide();}}},{key:"onDeleteClick",value:function onDeleteClick(){this.deleteDependency();this.editor.hide();}},{key:"onCancelClick",value:function onCancelClick(){this.editor.hide();}//region Editing
// Called from editDependency() to actually show the editor
},{key:"internalShowEditor",value:function internalShowEditor(dependencyRecord){var me=this,scheduler=me.client;var showPoint=me.lastPointerDownCoordinate;/**
         * Fires on the owning Scheduler before an dependency is displayed in the editor.
         * This may be listened for to allow an application to take over dependency editing duties. Returning `false`
         * stops the default editing UI from being shown.
         * @event beforeDependencyEdit
         * @param {Scheduler.view.Scheduler} source The scheduler
         * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature
         * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.
         * @preventable
         */if(scheduler.trigger('beforeDependencyEdit',{dependencyEdit:me,dependencyRecord:dependencyRecord})===false){return;}var editor=me.getEditor(dependencyRecord);me.loadRecord(dependencyRecord);/**
         * Fires on the owning Scheduler when the editor for a dependency is available but before it is shown. Allows
         * manipulating fields etc.
         * @event beforeDependencyEditShow
         * @param {Scheduler.view.Scheduler} source The scheduler
         * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature
         * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.
         * @param {Scheduler.view.DependencyEditor} editor The editor
         */scheduler.trigger('beforeDependencyEditShow',{dependencyEdit:me,dependencyRecord:dependencyRecord,editor:editor});if(!showPoint){var center=Rectangle.from(me.client.element).center;showPoint=[center.x-editor.width/2,center.y-editor.height/2];}editor.showByPoint(showPoint);}/**
     * Opens an {@link Scheduler.view.DependencyEditor DependencyEditor} to edit the passed dependency.
     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency to edit
     */},{key:"editDependency",value:function editDependency(dependencyRecord){if(this.client.readOnly)return;this.internalShowEditor(dependencyRecord);}//endregion
//region Save
/**
     * Gets an editor instance. Creates on first call, reuses on consecutive
     * @internal
     * @returns {Scheduler.view.DependencyEditor} Editor popup
     */},{key:"getEditor",value:function getEditor(){var me=this;var editor=me.editor;if(editor){return editor;}editor=me.editor=new DependencyEditor(ObjectHelper.assign({dependencyEditFeature:me,autoShow:false,anchor:true,scrollAction:'realign',clippedBy:[me.client.timeAxisSubGridElement,me.client.bodyContainer],constrainTo:window,autoClose:me.autoClose,cls:me.cls,listeners:{keydown:me.onPopupKeyDown,thisObj:me}},me.editorConfig));if(editor.items.length===0){console.warn('Editor configured without any `items`');}// assign widget refs
editor.eachWidget(function(widget){var ref=widget.ref||widget.id;// don't overwrite if already defined
if(ref&&!me[ref]){me[ref]=widget;}});me.saveButton&&me.saveButton.on('click',me.onSaveClick,me);me.deleteButton&&me.deleteButton.on('click',me.onDeleteClick,me);me.cancelButton&&me.cancelButton.on('click',me.onCancelClick,me);return me.editor;}//endregion
//region Delete
/**
     * Sets fields values from record being edited
     * @private
     */},{key:"loadRecord",value:function loadRecord(dependency){var me=this;me.fromNameField.value=dependency.sourceEvent.name;me.toNameField.value=dependency.targetEvent.name;if(me.lagField){me.lagField.unit=dependency.lagUnit;}me.editor.record=me.dependencyRecord=dependency;}//endregion
//region Stores
/**
     * Saves the changes (applies them to record if valid, if invalid editor stays open)
     * @private
     * @fires beforeDependencySave
     * @fires beforeDependencyAdd
     * @fires afterDependencySave
     * @returns {*}
     */},{key:"save",value:function save(){var me=this,client=me.client,dependencyRecord=me.dependencyRecord;if(!dependencyRecord||!me.isValid)return;var dependencyStore=me.dependencyStore,values=me.values;/**
         * Fires on the owning Scheduler before a dependency is saved
         * @event beforeDependencySave
         * @param {Scheduler.view.Scheduler} source The scheduler instance
         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved
         * @param {Object} values The new values
         * @preventable
         */if(client.trigger('beforeDependencySave',{dependencyRecord:dependencyRecord,values:values})!==false){me.onBeforeSave(dependencyRecord);me.updateRecord(dependencyRecord);// Check if this is a new record
if(dependencyStore&&!dependencyRecord.stores.length){/**
                 * Fires on the owning Scheduler before a dependency is added
                 * @event beforeDependencyAdd
                 * @param {Scheduler.view.Scheduler} source The scheduler
                 * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependency edit feature
                 * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be added
                 * @preventable
                 */if(client.trigger('beforeDependencyAdd',{dependencyRecord:dependencyRecord,dependencyEdit:me})!==false){dependencyStore.add(dependencyRecord);}else{return;}}client.project&&client.project.propagate();/**
             * Fires on the owning Scheduler after a dependency is successfully saved
             * @event afterDependencySave
             * @param {Scheduler.view.Scheduler} source The scheduler instance
             * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved
             */client.trigger('afterDependencySave',{dependencyRecord:dependencyRecord});me.onAfterSave(dependencyRecord);}return dependencyRecord;}/**
     * Delete dependency being edited
     * @private
     * @fires beforeDependencyDelete
     */},{key:"deleteDependency",value:function deleteDependency(){var me=this;/**
         * Fires on the owning Scheduler before a dependency is deleted
         * @event beforeDependencyDelete
         * @param {Scheduler.view.Scheduler} source The scheduler instance
         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record about to be deleted
         * @preventable
         */if(me.client.trigger('beforeDependencyDelete',{dependencyRecord:me.dependencyRecord})!==false){if(me.editor.containsFocus){me.editor.revertFocus();}me.client.dependencyStore.remove(me.dependencyRecord);me.client.project&&me.client.project.propagate();return true;}return false;}//endregion
//region Events
},{key:"onActivateEditor",value:function onActivateEditor(_ref454){var dependency=_ref454.dependency,event=_ref454.event;if(!this.disabled){this.lastPointerDownCoordinate=[event.clientX,event.clientY];this.editDependency(dependency);}}//endregion
/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"editorConfig",get:function get(){return this._editorConfig;},set:function set(editorConfig){var me=this,defaultEditorConfig=me.getDefaultConfiguration().editorConfig;// Apply editorConfig to the default editorConfig, allowing users to manipulate for example only bbar
editorConfig=ObjectHelper.assign({},defaultEditorConfig,editorConfig);editorConfig.items=editorConfig.items||[];me._editorConfig=editorConfig;}//endregion
//region Save
},{key:"isValid",get:function get(){return Object.values(this.editor.widgetMap).every(function(field){if(!field.name||field.hidden){return true;}return field.isValid!==false;});}},{key:"values",get:function get(){var values={};this.editor.eachWidget(function(widget){if(!widget.name||widget.hidden)return;values[widget.name]=widget.value;},true);return values;}},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;}}],[{key:"defaultConfig",//region Config
get:function get(){var _this158=this;return{/**
             * True to hide this editor if a click is detected outside it (defaults to true)
             * @config {Boolean}
             * @default
             * @category Editor
             */autoClose:true,/**
             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.
             * @config {Boolean}
             * @default
             * @category Editor
             */saveAndCloseOnEnter:true,/**
             * True to show a delete button in the form.
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showDeleteButton:true,/**
             * The event that shall trigger showing the editor. Defaults to `dependencydblclick`, set to empty string or `null` to disable editing of dependencies.
             * @config {String}
             * @default
             * @category Editor
             */triggerEvent:'dependencydblclick',/**
             * True to show the lag field for the dependency
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showLagField:false,dependencyRecord:null,/**
             * Default editor configuration, which widgets it shows etc.
             * @config {Object}
             * @category Editor
             */editorConfig:{title:'L{Edit dependency}',localeClass:this,closable:true,items:[/**
                     * Reference to the from name
                     * @member {Common.widget.DisplayField} fromNameField
                     * @readonly
                     */{type:'display',localeClass:this,label:'L{From}',editable:false,ref:'fromNameField'},/**
                     * Reference to the to name field
                     * @member {Common.widget.DisplayField} toNameField
                     * @readonly
                     */{type:'display',localeClass:this,label:'L{To}',ref:'toNameField'},/**
                     * Reference to the type field
                     * @member {Common.widget.Combo} typeField
                     * @readonly
                     */{type:'combo',localeClass:this,label:'L{Type}',name:'type',ref:'typeField',editable:false,valueField:'id',displayField:'name',items:Object.keys(DependencyModel.Type).map(function(type){return{id:DependencyModel.Type[type],name:_this158.L(type)};})},/**
                     * Reference to the lag field
                     * @member {Common.widget.DurationField} lagField
                     * @readonly
                     */{type:'duration',localeClass:this,label:'L{Lag}',name:'lag',ref:'lagField'}],bbar:[{type:'widget',cls:'b-label-filler'},/**
                     * Reference to the save button, if used
                     * @member {Common.widget.Button} saveButton
                     * @readonly
                     */{color:'b-green',localeClass:this,text:'L{Save}',ref:'saveButton'},/**
                     * Reference to the delete button, if used
                     * @member {Common.widget.Button} deleteButton
                     * @readonly
                     */{color:'b-gray',localeClass:this,text:'L{Delete}',ref:'deleteButton'},/**
                     * Reference to the cancel button, if used
                     * @member {Common.widget.Button} cancelButton
                     * @readonly
                     */{color:'b-gray',localeClass:this,text:'L{Cancel}',ref:'cancelButton'}]}};}}]);return DependencyEdit;}(InstancePlugin);DependencyEdit._$name='DependencyEdit';GridFeatureManager.registerFeature(DependencyEdit,false);/**
 * @module Gantt/feature/DependencyEdit
 */ /**
 * Feature that displays a popup containing fields for editing dependency data.
 *
 * This feature is **disabled** by default
 *
 * @extends Scheduler/feature/DependencyEdit
 * @externalexample gantt/feature/DependencyEdit.js
 * @typings Scheduler/feature/DependencyEdit -> Scheduler/feature/SchedulerDependencyEdit
 */var DependencyEdit$1=/*#__PURE__*/function(_DependencyEdit){_inherits2(DependencyEdit$1,_DependencyEdit);function DependencyEdit$1(){_classCallCheck2(this,DependencyEdit$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(DependencyEdit$1).apply(this,arguments));}_createClass2(DependencyEdit$1,null,[{key:"defaultConfig",//region Config
get:function get(){return{/**
             * True to show the lag field for the dependency
             * @config {Boolean}
             * @default
             * @category Editor widgets
             */showLagField:true};}//endregion
}]);return DependencyEdit$1;}(DependencyEdit);exports.DependencyEdit=DependencyEdit$1;DependencyEdit$1._$name='DependencyEdit';GridFeatureManager.registerFeature(DependencyEdit$1,false);/**
 * @module Gantt/feature/ProgressLine
 */ /**
 *
 * This feature draws project progress line with SVG lines. Requires {@link Gantt.feature.PercentBar} to be enabled (which
 * by default, it is)
 *
 * This feature is **disabled** by default.
 *
 * ```javascript
 * let gantt = new Gantt({
 *     features : {
 *         progressLine : {
 *            statusDate : new Date(2017, 2, 8)
 *         }
 *     }
 * });
 * ```
 *
 * Status date can be changed:
 *
 * ```javascript
 *  gantt.features.progressLine.statusDate = new Date();
 * ```
 *
 * If status date is not in the current gantt time span, progress line will use view start or end coordinates. This
 * behavior can be customized with {@link #config-drawLineOnlyWhenStatusDateVisible} config. Or you can override {@link #function-shouldDrawProgressLine}
 * method and provide more complex condition.
 *
 * Progress line is a set of SVG <line> elements drawn between all the tasks.
 *
 * {@inlineexample gantt/feature/ProgressLine.js}
 *
 * @demo progressline
 * @extends Common/mixin/InstancePlugin
 * @mixes Common/mixin/Delayable
 */var ProgressLine=/*#__PURE__*/function(_Delayable20){_inherits2(ProgressLine,_Delayable20);function ProgressLine(){_classCallCheck2(this,ProgressLine);return _possibleConstructorReturn2(this,_getPrototypeOf2(ProgressLine).apply(this,arguments));}_createClass2(ProgressLine,[{key:"construct",value:function construct(client){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var me=this;// Many things may schedule a draw. Ensure it only happens once, on the next frame.
// And Ensure it really is on the *next* frame after invocation by passing
// the cancelOutstanding flag.
me.doScheduleDraw=me.createOnFrame('draw',[],me,true);_get2(_getPrototypeOf2(ProgressLine.prototype),"construct",this).call(this,client,config);this.lineSegments=[];client.store.on({refresh:me.onRowStoreRefresh,thisObj:me});client.rowManager.on({translaterow:me.onTranslateRow,refresh:me.scheduleDraw,rerender:me.scheduleDraw,changetotalheight:me.scheduleDraw,thisObj:me});// dependencies are drawn on scroll, both horizontal and vertical
client.on({horizontalscroll:me.scheduleDraw,togglenode:me.scheduleDraw,taskdrag:me.onTaskDrag,timelineviewportresize:me.scheduleDraw,thisObj:me});}},{key:"render",value:function render(){var me=this,client=me.client;// Maps to taskStore for Gantt
client.taskStore.on({change:me.scheduleDraw,thisObj:me});}// cannot use `get svgCanvas` because it will trigger svgCanvas getter on instance too early
},{key:"getSVGCanvas",value:function getSVGCanvas(){var me=this,client=me.client;if(!me._svgCanvas){var svg=me._svgCanvas=document.createElementNS('http://www.w3.org/2000/svg','svg');svg.classList.add(me.containerCls);client.foregroundCanvas.appendChild(svg);}return me._svgCanvas;}// region Event handlers
/**
     * Redraws line when a row has changed
     * @private
     */},{key:"onRowStoreRefresh",value:function onRowStoreRefresh(_ref455){var action=_ref455.action;switch(action){case'sort':case'filter':this.scheduleDraw();}}},{key:"onTranslateRow",value:function onTranslateRow(_ref456){var row=_ref456.row;// a changetotalheight event is fired after translations, if a rowHeight change is detected here it will redraw
// the line
if(row.lastTop>=0&&row.top!==row.lastTop){this.scheduleDraw();}}// Refreshing only lines for dragged task to avoid slowing down drag operation
},{key:"onTaskDrag",value:function onTaskDrag(_ref457){var _this159=this;var taskRecords=_ref457.taskRecords,dragData=_ref457.dragData;taskRecords.forEach(function(record){_this159.updateLineForTask(record,_defineProperty({},record.id,DateHelper.add(record.startDate,dragData.timeDiff)));});}// endregion
/**
     * Returns true if progress line should be drawn
     * @returns {Boolean}
     */},{key:"shouldDrawProgressLine",value:function shouldDrawProgressLine(){return!this.disabled&&(!this.drawLineOnlyWhenStatusDateVisible||this.client.timeAxis.dateInAxis(this.statusDate));}/**
     * Returns status date horizontal position relative to the foreground canvas
     * @returns {Number}
     * @private
     */},{key:"getStatusDateX",value:function getStatusDateX(){var client=this.client,statusDate=this.statusDate,isStatusDateInAxis=client.timeAxis.dateInAxis(statusDate);if(!isStatusDateInAxis){statusDate=statusDate<client.timeAxis.startDate?client.timeAxis.startDate:client.timeAxis.endDate;}return client.getCoordinateFromDate(statusDate);}/**
     * Returns object with status date local coordinate and view x,y coordinates. Used to convert page coordinates to
     * view local.
     * @returns {{statusDateX: Number, viewXY: number[]}}
     * @private
     */},{key:"getRenderData",value:function getRenderData(){var statusDateX=this.getStatusDateX(),// We refer to the DOM to get status date horizontal coordinate (for segmented tasks which are not supported yet)
// we need to adjust progress bar element box to view/scroll.
viewBox=this.client.subGrids.normal.element.getBoundingClientRect(),viewXY=[this.client.scrollLeft-viewBox.left,-viewBox.top];return{statusDateX:statusDateX,viewXY:viewXY};}// region Drawing
},{key:"scheduleDraw",value:function scheduleDraw(){this.doScheduleDraw();}/**
     * Renders the progress line.
     */},{key:"draw",value:function draw(){var me=this,client=me.client;me.lineSegments.forEach(function(el){return el.remove();});me.lineSegments=[];if(!me.shouldDrawProgressLine()){return;}var data=me.getRenderData(),lines=[];client.rowManager.forEach(function(row){lines.push.apply(lines,_toConsumableArray(me.getLineSegmentRenderData(row,data)));});// Batch rendering to avoid constant layout reflows
// With batch drawing line takes ~8ms comparing to ~30ms prior
lines.forEach(function(line){return me.drawLineSegment(line);});client.trigger('progressLineDrawn');}/**
     * Updates progress line segment for one task
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are
     * new task start date
     * @private
     */},{key:"updateLineForTask",value:function updateLineForTask(taskRecord,renderData){var me=this;if(me.disabled){return;}var row=me.client.getRowFor(taskRecord);if(row){var toRemove=[];me.lineSegments.forEach(function(el){if(el.dataset.taskId==taskRecord.id){toRemove.push(el);el.remove();}});ArrayHelper.remove.apply(ArrayHelper,[me.lineSegments].concat(toRemove));me.getLineSegmentRenderData(row,me.getRenderData(),renderData).forEach(function(line){return me.drawLineSegment(line);});}}/**
     * Draws line for a given row
     * @param {Grid.row.Row} row Row instance
     * @param {Object} data Output from {@link #function-getRenderData} method
     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are
     * new task start date
     * @internal
     */},{key:"getLineSegmentRenderData",value:function getLineSegmentRenderData(row,data){var renderData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var me=this,statusDateX=data.statusDateX,viewXY=data.viewXY,taskRecord=me.client.getRecordFromElement(row.elements.normal),taskId=taskRecord.id;var lineDefinitions=[],point;if(me.isStatusLineTask(taskRecord,renderData[taskRecord.id])){point=me.calculateCoordinateForTask(taskRecord,viewXY);// If multiple rows are affected by event update, it could happen, that point
// could not be resolved
point&&lineDefinitions.push({dataset:{taskId:taskId},x1:statusDateX,y1:row.top,x2:point.x,y2:point.y},{dataset:{taskId:taskId},x1:point.x,y1:point.y,x2:statusDateX,y2:row.bottom});}// otherwise we render vertical status line
if(!point){lineDefinitions.push({dataset:{taskId:taskId},x1:statusDateX,y1:row.top,x2:statusDateX,y2:row.bottom});}return lineDefinitions;}/**
     * Draws line on svg canvas
     * @param {Object} data Line render data. Output from {@link #function-getLineSegmentRenderData}
     * @return {Element}
     * @internal
     */},{key:"drawLineSegment",value:function drawLineSegment(data){var me=this;me.lineSegments.push(DomHelper.createElement(Object.assign({tag:'line',ns:'http://www.w3.org/2000/svg',// cannot use className when namespace is provided
class:me.lineCls,parent:me.getSVGCanvas()},data)));}/**
     * Returns true if task should be connected to the progress line.
     * @param {Gantt.model.TaskModel} taskRecord
     * @param {Date} [startDate] Provide to check if task record should be connected to the progress line if it'd
     * start then
     * @returns {Boolean}
     * @internal
     */},{key:"isStatusLineTask",value:function isStatusLineTask(taskRecord,startDate){var statusDate=this.statusDate;startDate=startDate||taskRecord.startDate;return taskRecord&&this.client.timeAxis.isTimeSpanInAxis(taskRecord)&&!taskRecord.milestone&&(// - is in progress
taskRecord.isInProgress||// .. or is not started and its start date is before statusDate
!taskRecord.isStarted&&startDate<statusDate||// .. or is finished and its start date is after statusDate
taskRecord.isCompleted&&startDate>statusDate);}/**
     * This method will calculate point inside task element to be connected with line.
     * @param {Gantt.model.TaskModel} record
     * @param {Number[]} translateBy View xy coordinates to calculate relative point position
     * @returns {Object} Object containing coordinates for point in progress line, or undefined if no progress bar el is found
     * @private
     */},{key:"calculateCoordinateForTask",value:function calculateCoordinateForTask(record,translateBy){var client=this.client,node=client.getElementFromTaskRecord(record),totalSize=client.timeAxisViewModel.totalSize,progressBarEl=node.querySelector('.b-gantt-task-percent');if(progressBarEl){var box=progressBarEl.getBoundingClientRect();return{x:Math.min(box.right+translateBy[0],totalSize),y:box.top+box.height/2+translateBy[1]};}}// endregion
/**
     * Disable this feature
     * @property {Boolean}
     */},{key:"statusDate",get:function get(){return this._statusDate;}/**
     * Progress line status date. If not provided, current date is used.
     * @property {Date}
     */,set:function set(date){if(date instanceof Date){this._statusDate=date;this.scheduleDraw();}}},{key:"disabled",get:function get(){return this._disabled;},set:function set(disabled){this._disabled=disabled;if(this.client.rendered){this.draw();}}}],[{key:"defaultConfig",/**
     * Fired when progress line is rendered
     * @event progressLineDrawn
     */get:function get(){return{/**
             * Progress line status date. If not provided, current date is used.
             * @config {Date}
             */statusDate:new Date(),/**
             * Set to true to hide progress line, when status date is not in the current time axis.
             * @config {Boolean}
             */drawLineOnlyWhenStatusDateVisible:false,lineCls:'b-gantt-progress-line',containerCls:'b-progress-line-canvas'};}},{key:"pluginConfig",get:function get(){return{chain:['render']};}}]);return ProgressLine;}(Delayable(InstancePlugin));exports.ProgressLine=ProgressLine;ProgressLine._$name='ProgressLine';GridFeatureManager.registerFeature(ProgressLine);/**
 * @module Gantt/feature/ProjectLines
 */ /**
 * This feature draws 2 vertical line in the schedule area, indicating project start/end dates.
 *
 * This feature is **enabled** by default
 *
 * <div class="external-example" data-file="guides/gettingstarted/basic.js"></div>
 * @extends Scheduler/feature/TimeRanges
 */var ProjectLines=/*#__PURE__*/function(_AbstractTimeRanges3){_inherits2(ProjectLines,_AbstractTimeRanges3);function ProjectLines(){_classCallCheck2(this,ProjectLines);return _possibleConstructorReturn2(this,_getPrototypeOf2(ProjectLines).apply(this,arguments));}_createClass2(ProjectLines,[{key:"startConfigure",//endregion
//region Init
// We must override the TimeRanges superclass implementation which ingests the client's project's
// timeRangeStore. We implement our own store
value:function startConfigure(){}/**
     * Called when gantt is rendered.
     * @private
     */},{key:"render",value:function render(){var me=this;var _me$store$add=me.store.add([{name:me.L('Project Start')},{name:me.L('Project End')}]);var _me$store$add2=_slicedToArray(_me$store$add,2);me.startDateLine=_me$store$add2[0];me.endDateLine=_me$store$add2[1];me.updateDateFromProject();_get2(_getPrototypeOf2(ProjectLines.prototype),"render",this).apply(this,arguments);// TODO: this will break in case project's task store instance will be changable
//       (i.e. project.setTaskStore() method will be added)
me.client.project.taskStore.on({update:me.onProjectTaskStoreRecordUpdate,refresh:me.onProjectTaskStoreRefresh,thisObj:me});}},{key:"updateLocalization",value:function updateLocalization(){var me=this;if(me.client.rendered){// Updating the store to use proper locale for labels
me.startDateLine.name=me.L('Project Start');me.endDateLine.name=me.L('Project End');}}},{key:"updateDateFromProject",value:function updateDateFromProject(){var project=this.client.project;this.startDateLine.startDate=project.startDate;this.endDateLine.startDate=project.endDate;}//endregion
},{key:"onProjectTaskStoreRecordUpdate",value:function onProjectTaskStoreRecordUpdate(_ref458){var record=_ref458.record;if(record===this.client.project){this.updateDateFromProject();}}},{key:"onProjectTaskStoreRefresh",value:function onProjectTaskStoreRefresh(data){this.updateDateFromProject();}}],[{key:"defaultConfig",//region Config
get:function get(){return{showHeaderElements:true,cls:'b-gantt-project-line'};}}]);return ProjectLines;}(AbstractTimeRanges);exports.ProjectLines=ProjectLines;ProjectLines._$name='ProjectLines';GridFeatureManager.registerFeature(ProjectLines,true,'Gantt');// import { default as SchedulerCalendarDayModel } from '../../Scheduler/model/CalendarDayModel.js';
//
// /**
//  * @module Gantt/model/CalendarDayModel
//  */
//
// /**
//  * A model representing a single day in the calendar. Depending from the `type` field, day may be a concrete day per se
//  * (2012/01/01), a certain weekday (all Thursdays), or an override for all certain weekdays in the timeframe
//  * (all Fridays between 2012/01/01 - 2012/01/15, inclusive).
//  *
//  * A collection CalendarDay instances is supposed to be provided for the Calendar
//  *
//  * @extends Scheduler/model/CalendarDayModel
//  * @typings Scheduler/model/CalendarDayModel -> Scheduler/model/SchedulerCalendarDayModel
//  */
// export default class CalendarDayModel extends SchedulerCalendarDayModel {
//     get defaults() {
//         return {
//             cls : 'gnt-holiday'
//         };
//     }
// }
var CalendarDayModel$1={};/**
 * @ module Gantt/model/SubProjectModel
 * @ignore
 */ /**
*
* This class represents a single Project in your Gantt chart.
*
* By default, a Project has the following fields as seen below.
*
* # Project Fields
*
* - `Description` - the description of the project, this field maps to the task `Note` field
* - `AllowDependencies` - this field indicates if the project tasks allowed to have dependencies with tasks external to the project
*
* @extends Gantt/model/TaskModel
*/exports.CalendarDayModel=CalendarDayModel$1;var SubProjectModel=/*#__PURE__*/function(_TaskModel){_inherits2(SubProjectModel,_TaskModel);function SubProjectModel(){_classCallCheck2(this,SubProjectModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(SubProjectModel).apply(this,arguments));}_createClass2(SubProjectModel,[{key:"isEditable",value:function isEditable(fieldName){// some fields doesn't make sense to edit for a project
switch(fieldName){case'name':case'startDate':case'readOnly':case'duration':case'durationUnit':case'description':case'allowDependencies':return _get2(_getPrototypeOf2(SubProjectModel.prototype),"isEditable",this).call(this,fieldName);// end date of the project is editable if it's manually scheduled (otherwise end date is auto-calculated)
case'endDate':return this.isManuallyScheduled&&_get2(_getPrototypeOf2(SubProjectModel.prototype),"isEditable",this).call(this,fieldName);default:return false;}}/*
     * Sets if the given project is read only. All underlying tasks will be considered as read only as well.
     * @property {string} readOnly
     */ /**
     * Do not allow to indent/outdent project nodes
     * @hide
     */},{key:"indent",value:function indent(){}/**
     * @hide
     */},{key:"outdent",value:function outdent(){}},{key:"isSubProject",//endregion
/**
     * Indicates that this is a project.
     * Can be used in heterogeneous stores to distinguish project records from task ones.
     * @property {boolean}
     */get:function get(){return true;}}],[{key:"defaultConfig",//region Config
get:function get(){return{recognizedSchedulingModes:['Normal'],convertEmptyParentToLeaf:false};}//endregion
//region Fields
},{key:"fields",get:function get(){return[/**
             * The description of the project
             * @member {string} description
             * @field
             */{name:'description',dataSource:'note',type:'string'},/**
             * Allow dependencies
             * @member {boolean} allowDependencies
             * @field
             */{name:'allowDependencies',type:'boolean',defaultValue:false,persist:false}];}}]);return SubProjectModel;}(TaskModel);exports.SubProjectModel=SubProjectModel;SubProjectModel._$name='SubProjectModel';// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// The segmented tasks should be re-implemented, as a special parent tasks,
// with children
/**
 * @ module Gantt/model/TaskSegmentModel
 * @ignore
 */ /**
 * This class represents a segment of a split task in your Gantt chart.
 * @extends Gantt/model/TaskModel
 */var TaskSegmentModel=/*#__PURE__*/function(_TaskModel2){_inherits2(TaskSegmentModel,_TaskModel2);function TaskSegmentModel(){_classCallCheck2(this,TaskSegmentModel);return _possibleConstructorReturn2(this,_getPrototypeOf2(TaskSegmentModel).apply(this,arguments));}return TaskSegmentModel;}(TaskModel);exports.TaskSegmentModel=TaskSegmentModel;//region Unported
/* eslint-disable */ // let unported = {
//     construct : function(cfg) {
//         cfg = cfg || {};
//         cfg.leaf = true;
//         if (!cfg.task) throw "'task' has to be specified";
//         this.task = cfg.task;
//         super.construct(arguments);
//         Ext.override(this, this.overridables);
//         if (this.getTask().normalized && this.getTaskStore(true) && !this.normalized) {
//             this.normalize();
//         }
//     },
//     updateOffsetsByDates : function() {
//         // we need task store to use its project calendar
//         if (!this.getTaskStore(true)) return;
//         // prevents nested updating of offsets
//         // and updating of offsets during start/end recalculation (based on offsets)
//         if (this.updatingOffsets || this.updatingDates) return;
//         // set flag saying that we are in the middle of updating offsets by dates
//         this.updatingOffsets = true;
//         const offset = this.calculateDuration(this.getTask().getStartDate(), this.getStartDate(), 'MILLI');
//         this.setStartEndOffset(offset, offset + this.getDuration('MILLI'));
//         this.updatingOffsets = false;
//     },
//     updateDatesByOffsets : function(options) {
//         options = options || {};
//         // prevents nested updating of dates
//         // and updating of dates during offsets updating
//         if (this.updatingDates || this.updatingOffsets) return;
//         const isForward       = options.isForward !== false;
//         let useAbsoluteOffset = options.useAbsoluteOffset !== false;
//         const startDate       = options.startDate,
//             endDate         = options.endDate;
//         let taskStore         = this.getTaskStore(true);
//         if (!taskStore) return;
//         // set flag saying that we are in the middle of updating dates by offsets
//         this.updatingDates = true;
//         let date, neighbour;
//         if (isForward) {
//             neighbour = this.getPrevSegment();
//             if (neighbour && !useAbsoluteOffset) {
//                 date = this.skipWorkingTime(neighbour.getEndDate(), this.getStartOffset() - neighbour.getEndOffset());
//             }
//             else {
//                 date = this.skipWorkingTime(startDate || this.getTask().getStartDate(), this.getStartOffset());
//             }
//         }
//         else {
//             neighbour = this.getNextSegment();
//             if (neighbour && !useAbsoluteOffset) {
//                 date = this.skipWorkingTime(neighbour.getStartDate(), neighbour.getStartOffset() - this.getEndOffset() + this.getDuration('MILLI'), false);
//             }
//             else {
//                 date = this.skipWorkingTime(endDate || this.getTask().getEndDate(), this.getDuration('MILLI'), false);
//             }
//         }
//         this.setStartDateWithoutPropagation(date, true, taskStore.skipWeekendsDuringDragDrop);
//         this.updatingDates = false;
//     },
//     setStartDate : function(date, keepDuration) {
//         // if we move the segment their neighbours constraints the movement range
//         if (keepDuration) {
//             this.enableRespectNeighbours();
//         }
//         this.callParent(arguments);
//         if (keepDuration) {
//             this.disableRespectNeighbours();
//         }
//     },
//     setStartDateWithoutPropagation : function() {
//         this.beginEdit();
//         this.callParent(arguments);
//         this.updateOffsetsByDates();
//         // if we have next segment(s) and we have to respect and not overlap them
//         if (!this.inShifting && this.respectNeighbours && this.getNextSegment()) {
//             // this.shiftNeighboursWithoutPropagation();
//             const neighbour = this.getNextSegment();
//             const shift     = this.getEndOffset() - neighbour.getStartOffset();
//             if (neighbour && shift > 0) {
//                 neighbour.suspendTaskNotifying();
//                 neighbour.enableRespectNeighbours();
//                 neighbour.shiftWithoutPropagation(shift);
//                 neighbour.resumeTaskNotifying();
//                 neighbour.disableRespectNeighbours();
//             }
//         }
//         this.endEdit();
//         return true;
//     },
//     /**
//      * Shifts the segment by provided number of milliseconds.
//      * If the segment has {@link #respectNeighbours} set to `true` this call will shift further segments as well.
//      * @param {Number} amountMS Number of milliseconds the segment shoud be mover by.
//      * @private
//      */
//     shiftWithoutPropagation : function(amountMS) {
//         const me = this;
//         if (!amountMS) return;
//         me.beginEdit();
//         me.inShifting = true;
//         me.setStartEndOffset(me.getStartOffset() + amountMS, me.getEndOffset() + amountMS);
//         me.updateDatesByOffsets();
//         let neighbour;
//         if (me.respectNeighbours && (neighbour = amountMS > 0 ? me.getNextSegment() : me.getPrevSegment())) {
//             neighbour.suspendTaskNotifying();
//             neighbour.enableRespectNeighbours();
//             neighbour.shiftWithoutPropagation(amountMS);
//             neighbour.resumeTaskNotifying();
//             neighbour.disableRespectNeighbours();
//         }
//         me.inShifting = false;
//         me.endEdit();
//         return true;
//     },
//     setEndDateWithoutPropagation : function() {
//         this.beginEdit();
//         this.callParent(arguments);
//         this.updateOffsetsByDates();
//         this.endEdit();
//         return true;
//     },
//     setStartEndDateWithoutPropagation : function() {
//         this.beginEdit();
//         this.callParent(arguments);
//         this.updateOffsetsByDates();
//         this.endEdit();
//         return true;
//     },
//     setDurationWithoutPropagation : function() {
//         this.beginEdit();
//         this.callParent(arguments);
//         this.updateOffsetsByDates();
//         this.endEdit();
//         return true;
//     }
//     // /**
//     //  * Gets the task to which the segment belongs.
//     //  * @return {Gantt.model.Task} The task.
//     //  */
//     // getTask : function () {
//     //     return this.task;
//     // }
//     /**
//          * @hide
//          * @field Name
//          */
//     /**
//          * @hide
//          * @field Note
//          */
//     /**
//          * @hide
//          * @field ActualEffort
//          */
//     /**
//          * @hide
//          * @field ActualCost
//          */
//     /**
//          * @hide
//          * @field BaselineEffort
//          */
//     /**
//          * @hide
//          * @field BaselineCost
//          */
//     /**
//          * @hide
//          * @field BaselineEndDate
//          */
//     /**
//          * @hide
//          * @field BaselinePercentDone
//          */
//     /**
//          * @hide
//          * @field BaselineStartDate
//          */
//     /**
//          * @hide
//          * @field CalendarId
//          */
//     /**
//          * @hide
//          * @field ConstraintDate
//          */
//     /**
//          * @hide
//          * @field ConstraintType
//          */
//     /**
//          * @hide
//          * @field Cost
//          */
//     /**
//          * @hide
//          * @field CostVariance
//          */
//     /**
//          * @hide
//          * @field DeadlineDate
//          */
//     /**
//          * @hide
//          * @field Effort
//          */
//     /**
//          * @hide
//          * @field EffortUnit
//          */
//     /**
//          * @hide
//          * @field EffortVariance
//          */
//     /**
//          * @hide
//          * @field ManuallyScheduled
//          */
//     /**
//          * @hide
//          * @field PercentDone
//          */
//     /**
//          * @hide
//          * @field ReadOnly
//          */
//     /**
//          * @hide
//          * @field Rollup
//          */
//     /**
//          * @hide
//          * @field SchedulingMode
//          */
//     /**
//          * @hide
//          * @field ShowInTimeline
//          */
//     /**
//          * @hide
//          * @method setName
//          */
//     /**
//          * @hide
//          * @method getCost
//          */
//     /**
//          * @hide
//          * @method getDeadlineDate
//          */
//     /**
//          * @hide
//          * @method getName
//          */
//     /**
//          * @hide
//          * @cfg autoCalculateEffortForParentTask
//          */
//     /**
//          * @hide
//          * @cfg autoCalculatePercentDoneForParentTask
//          */
//     /**
//          * @hide
//          * @cfg baselineEndDateField
//          */
//     /**
//          * @hide
//          * @cfg baselinePercentDoneField
//          */
//     /**
//          * @hide
//          * @cfg baselineStartDateField
//          */
//     /**
//          * @hide
//          * @cfg calendar
//          */
//     /**
//          * @hide
//          * @cfg calendarIdField
//          */
//     /**
//          * @hide
//          * @cfg constraintDateField
//          */
//     /**
//          * @hide
//          * @cfg constraintTypeField
//          */
//     /**
//          * @hide
//          * @cfg convertEmptyParentToLeaf
//          */
//     /**
//          * @hide
//          * @cfg draggableField
//          */
//     /**
//          * @hide
//          * @cfg effortField
//          */
//     /**
//          * @hide
//          * @cfg effortUnitField
//          */
//     /**
//          * @hide
//          * @cfg manuallyScheduledField
//          */
//     /**
//          * @hide
//          * @cfg percentDoneField
//          */
//     /**
//          * @hide
//          * @cfg phantomParentIdField
//          */
//     /**
//          * @hide
//          * @cfg resizableField
//          */
//     /**
//          * @hide
//          * @cfg rollupField
//          */
//     /**
//          * @hide
//          * @cfg schedulingModeField
//          */
//     /**
//          * @hide
//          * @cfg taskStore
//          */
//     /**
//          * @hide
//          * @cfg dependencyStore
//          */
//     /**
//          * @hide
//          * @property assignments
//          */
//     /**
//          * @hide
//          * @property predecessors
//          */
//     /**
//          * @hide
//          * @property successors
//          */
//     /**
//          * @hide
//          * @method addMilestone
//          */
//     /**
//          * @hide
//          * @method addPredecessor
//          */
//     /**
//          * @hide
//          * @method addSubtask
//          */
//     /**
//          * @hide
//          * @method addSuccessor
//          */
//     /**
//          * @hide
//          * @method addTaskAbove
//          */
//     /**
//          * @hide
//          * @method addTaskBelow
//          */
//     /**
//          * @hide
//          * @method assign
//          */
//     /**
//          * @hide
//          * @method cascadeChanges
//          */
//     /**
//          * @hide
//          * @method cascadeChildren
//          */
//     /**
//          * @hide
//          * @method convertToMilestone
//          */
//     /**
//          * @hide
//          * @method convertToRegular
//          */
//     /**
//          * @hide
//          * @method forEachDate
//          */
//     /**
//          * @hide
//          * @method getAllDependencies
//          */
//     /**
//          * @hide
//          * @method getAssignmentFor
//          */
//     /**
//          * @hide
//          * @method getAssignmentStore
//          */
//     /**
//          * @hide
//          * @method getAssignments
//          */
//     /**
//          * @hide
//          * @method getBaselineEndDate
//          */
//     /**
//          * @hide
//          * @method getBaselinePercentDone
//          */
//     /**
//          * @hide
//          * @method getBaselineStartDate
//          */
//     /**
//          * @hide
//          * @method setBaselineEndDate
//          */
//     /**
//          * @hide
//          * @method setBaselinePercentDone
//          */
//     /**
//          * @hide
//          * @method setBaselineStartDate
//          */
//     /**
//          * @hide
//          * @method getCalendar
//          */
//     /**
//          * @hide
//          * @method getCalendarDuration
//          */
//     /**
//          * @hide
//          * @method getConstraintClass
//          */
//     /**
//          * @hide
//          * @method getDates
//          */
//     /**
//          * @hide
//          * @method getDependencyStore
//          */
//     /**
//          * @hide
//          * @method getDisplayEndDate
//          */
//     /**
//          * @hide
//          * @method getDisplayStartDate
//          */
//     /**
//          * @hide
//          * @method getEarlyEndDate
//          */
//     /**
//          * @hide
//          * @method getEarlyStartDate
//          */
//     /**
//          * @hide
//          * @method getEffort
//          */
//     /**
//          * @hide
//          * @method getEffortUnit
//          */
//     /**
//          * @hide
//          * @method getpredecessors
//          */
//     /**
//          * @hide
//          * @method setpredecessors
//          */
//     /**
//          * @hide
//          * @method getLateEndDate
//          */
//     /**
//          * @hide
//          * @method getLateStartDate
//          */
//     /**
//          * @hide
//          * @method getsuccessors
//          */
//     /**
//          * @hide
//          * @method setsuccessors
//          */
//     /**
//          * @hide
//          * @method getOwnCalendar
//          */
//     /**
//          * @hide
//          * @method getPercentDone
//          */
//     /**
//          * @hide
//          * @method getPredecessors
//          */
//     /**
//          * @hide
//          * @method getResourceStore
//          */
//     /**
//          * @hide
//          * @method getResources
//          */
//     /**
//          * @hide
//          * @method getSchedulingMode
//          */
//     /**
//          * @hide
//          * @method getSegment
//          */
//     /**
//          * @hide
//          * @method getSequenceNumber
//          */
//     /**
//          * @hide
//          * @method getSlack
//          */
//     /**
//          * @hide
//          * @method getSuccessors
//          */
//     /**
//          * @hide
//          * @method getTaskStore
//          */
//     /**
//          * @hide
//          * @method getTotalCount
//          */
//     /**
//          * @hide
//          * @method getWBSCode
//          */
//     /**
//          * @hide
//          * @method hasAssignments
//          */
//     /**
//          * @hide
//          * @method hasConstraint
//          */
//     /**
//          * @hide
//          * @method haspredecessors
//          */
//     /**
//          * @hide
//          * @method hassuccessors
//          */
//     /**
//          * @hide
//          * @method hasResources
//          */
//     /**
//          * @hide
//          * @method indent
//          */
//     /**
//          * @hide
//          * @method insertSubtask
//          */
//     /**
//          * @hide
//          * @method isAssignedTo
//          */
//     /**
//          * @hide
//          * @method isBaselineMilestone
//          */
//     /**
//          * @hide
//          * @method isConstraintSatisfied
//          */
//     /**
//          * @hide
//          * @method isManuallyScheduled
//          */
//     /**
//          * @hide
//          * @method isMilestone
//          */
//     /**
//          * @hide
//          * @method isPersistable
//          */
//     /**
//          * @hide
//          * @method isProjected
//          */
//     /**
//          * @hide
//          * @method isSegmented
//          */
//     /**
//          * @hide
//          * @method linkTo
//          */
//     /**
//          * @hide
//          * @method merge
//          */
//     /**
//          * @hide
//          * @method outdent
//          */
//     /**
//          * @hide
//          * @method setBaselinePercentDone
//          */
//     /**
//          * @hide
//          * @method setCalendar
//          */
//     /**
//          * @hide
//          * @method setConstraint
//          */
//     /**
//          * @hide
//          * @method setConstraintDate
//          */
//     /**
//          * @hide
//          * @method setConstraintType
//          */
//     /**
//          * @hide
//          * @method setEffort
//          */
//     /**
//          * @hide
//          * @method setEffortUnit
//          */
//     /**
//          * @hide
//          * @method setPercentDone
//          */
//     /**
//          * @hide
//          * @method setSchedulingMode
//          */
//     /**
//          * @hide
//          * @method setSegments
//          */
//     /**
//          * @hide
//          * @method setTaskStore
//          */
//     /**
//          * @hide
//          * @method shift
//          */
//     /**
//          * @hide
//          * @method split
//          */
//     /**
//          * @hide
//          * @method unAssign
//          */
//     /**
//          * @hide
//          * @method unlinkFrom
//          */
//     /**
//          * @hide
//          * @method isResizable
//          */
//     /**
//          * @hide
//          * @method isScheduled
//          */
//     /**
//          * @hide
//          * @method isStarted
//          */
//     /**
//          * @hide
//          * @method propagateChanges
//          */
//     /**
//          * @hide
//          * @method reassign
//          */
//     /**
//          * @hide
//          * @method removeSubtask
//          */
//     /**
//          * @hide
//          * @method setActualEffort
//          */
//     /**
//          * @hide
//          * @method setBaselineCost
//          */
//     /**
//          * @hide
//          * @method setBaselineEffort
//          */
//     /**
//          * @hide
//          * @method setCost
//          */
//     /**
//          * @hide
//          * @method setDeadlineDate
//          */
//     /**
//          * @hide
//          * @method setDraggable
//          */
//     /**
//          * @hide
//          * @method setEffortWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method setManuallyScheduled
//          */
//     /**
//          * @hide
//          * @method setManuallyScheduledWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method setPercentDoneWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method setResizable
//          */
//     /**
//          * @hide
//          * @method setRollup
//          */
//     /**
//          * @hide
//          * @method getRollup
//          */
//     /**
//          * @hide
//          * @method setSchedulingModeWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method setSegmentsWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method unassign
//          */
//     /**
//          * @hide
//          * @method adjustToCalendar
//          */
//     /**
//          * @hide
//          * @method convertToMilestoneWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method convertToRegularWithoutPropagation
//          */
//     /**
//          * @hide
//          * @method getActualCost
//          */
//     /**
//          * @hide
//          * @method getActualEffort
//          */
//     /**
//          * @hide
//          * @method getBaselineEffort
//          */
//     /**
//          * @hide
//          * @method getConstraintDate
//          */
//     /**
//          * @hide
//          * @method getConstraintType
//          */
//     /**
//          * @hide
//          * @method getEndSlack
//          */
//     /**
//          * @hide
//          * @method getFreeSlack
//          */
//     /**
//          * @hide
//          * @method getPreviousSiblingsTotalCount
//          */
//     /**
//          * @hide
//          * @method getProject
//          */
//     /**
//          * @hide
//          * @method getProjectCalendar
//          */
//     /**
//          * @hide
//          * @method getSegmentByDate
//          */
//     /**
//          * @hide
//          * @method getSegments
//          */
//     /**
//          * @hide
//          * @method getStartSlack
//          */
//     /**
//          * @hide
//          * @method getTotalSlack
//          */
//     /**
//          * @hide
//          * @method hasDependencies
//          */
//     /**
//          * @hide
//          * @method initProjectable
//          */
//     /**
//          * @hide
//          * @method isCompleted
//          */
//     /**
//          * @hide
//          * @method isCritical
//          */
//     /**
//          * @hide
//          * @method isDraggable
//          */
//     /**
//          * @hide
//          * @method isEditable
//          */
//     /**
//          * @hide
//          * @method isInProgress
//          */
//     /**
//          * @hide
//          * @method isReadOnly
//          */
//     /**
//          * @hide
//          * @cfg actualCostField
//          */
//     /**
//          * @hide
//          * @cfg actualEffortField
//          */
//     /**
//          * @hide
//          * @cfg autoCalculateCost
//          */
//     /**
//          * @hide
//          * @cfg autoCalculateCostForParentTask
//          */
//     /**
//          * @hide
//          * @cfg baselineCostField
//          */
//     /**
//          * @hide
//          * @cfg baselineEffortField
//          */
//     /**
//          * @hide
//          * @cfg clsField
//          */
//     /**
//          * @hide
//          * @cfg costField
//          */
//     /**
//          * @hide
//          * @cfg costVarianceField
//          */
//     /**
//          * @hide
//          * @cfg deadlineDateField
//          */
//     /**
//          * @hide
//          * @cfg effortVarianceField
//          */
//     /**
//          * @hide
//          * @cfg nameField
//          */
//     /**
//          * @hide
//          * @cfg noteField
//          */
//     /**
//          * @hide
//          * @cfg segmentsField
//          */
//     /**
//          * @hide
//          * @cfg showInTimelineField
//          */
// };
//endregion
TaskSegmentModel._$name='TaskSegmentModel';var Week=/*#__PURE__*/function(_Model9){_inherits2(Week,_Model9);function Week(){_classCallCheck2(this,Week);return _possibleConstructorReturn2(this,_getPrototypeOf2(Week).apply(this,arguments));}return Week;}(Model);exports.WeekModel=Week;Week._$name='Week';/**
 * @module Common/helper/StringHelper
 */var camelLettersRe$1=/([a-z])([A-Z])/g,escapeRegExpRe$1=/[.*+?^${}()|[\]\\]/g,idRe$1=/(^[^a-z]+|[^\w]+)/gi,replaceCamelLetters$1=function replaceCamelLetters$1(all,g1,g2){return g1+'-'+g2.toLowerCase();},replaceNonIdChar$1=function replaceNonIdChar$1(c){if(c){return"_x".concat(c.charCodeAt(0).toString(16));}return'__blank__';},hyphenateCache$1={};/**
 * Helper for string manipulation.
 */var StringHelper$1=/*#__PURE__*/function(){function StringHelper$1(){_classCallCheck2(this,StringHelper$1);}_createClass2(StringHelper$1,null,[{key:"capitalizeFirstLetter",/**
     * Capitalizes the first letter of a string, myString -> MyString.
     * Doesn't alter the original string, use return value
     * @param string String to capitalize
     * @returns {String} Capitalized string
     */value:function capitalizeFirstLetter(string){if(!string)return null;return string[0].toUpperCase()+string.substr(1);}/**
     * Makes the first letter of a string lowercase, MyString -> myString.
     * Doesn't alter the original string, use return value
     * @param string String to alter
     * @returns {String} Altered string
     */},{key:"lowercaseFirstLetter",value:function lowercaseFirstLetter(string){if(!string)return null;return string[0].toLowerCase()+string.substr(1);}/**
     * Converts the passed camelCased string to a hyphen-separated string. eg "minWidth" -> "min-width"
     * @param string The string to convert.
     * @return {String} The string with adjoining lower and upper case letters
     * separated by hyphens and converted to lower case.
     */},{key:"hyphenate",value:function hyphenate(string){// Cached since it is used heavily with DomHelper.sync()
var cached=hyphenateCache$1[string];if(cached){return cached;}return hyphenateCache$1[string]=string.replace(camelLettersRe$1,replaceCamelLetters$1);}/**
     * Parses JSON within a try-catch.
     * @param {String} string String to parse
     * @returns {Object} Resulting object or null if parse failed
     */},{key:"safeJsonParse",value:function safeJsonParse(string){var parsed=null;try{parsed=JSON.parse(string);}catch(e){console.error(e);}return parsed;}/**
     * Stringifies an object within a try-catch.
     * @param {Object} object The object to stringify
     * @returns {Object} Resulting object or null if stringify failed
     */},{key:"safeJsonStringify",value:function safeJsonStringify(obj){var result=null;try{result=JSON.stringify(obj);}catch(e){console.error(e);}return result;}/**
     * Creates an alphanuneric identifier from any passed string. Encodes spaces and non-alpha characters.
     * @param inString The string from which to strip non-identifier characters.
     * @return {String}
     */},{key:"createId",value:function createId(inString){return String(inString).replace(idRe$1,replaceNonIdChar$1);}// https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
},{key:"escapeRegExp",value:function escapeRegExp(string){// $& means the whole matched string
return string.replace(escapeRegExpRe$1,'\\$&');}}]);return StringHelper$1;}();StringHelper$1._$name='StringHelper';/**
 * @module Common/Base
 */var defaultConfigSymbol$1=Symbol('defaultConfig'),propertyInitializersSymbol$1=Symbol('propertyInitializers'),classHierarchySymbol$1=Symbol('classHierarchy'),configurationSymbol$1=Symbol('configuration'),originalConfigSymbol$1=Symbol('originalConfig'),instancePropertiesSymbol$1=Symbol('instanceProperties');/**
 * Base class for all configurable classes.
 *
 * Subclasses do not have to implement a constructor with its restriction of having to call super()
 * before there is a `this` reference. Subclasses instead implement a `construct` method which is
 * called by the `Base` constructor. This may call its `super` implementation at any time.
 *
 * The `Base` constructor applies all configs to properties of the new instance. The instance
 * will have been configured after the `super.construct(config)` is called.
 *
 * See the Class System documentation in the guides for more information.
 *
 * @abstract
 */var Base$2=/*#__PURE__*/function(){// defaultConfig & properties made private to not spam all other classes
/**
     * A getter for the default configuration of this class, which can be overridden by configurations passed at construction time.
     * @member {Object} defaultConfig
     * @static
     * @category Configuration
     * @private
     */ /**
     * A getter for the default values of internal properties for this class
     * @member {Object} properties
     * @static
     * @category Configuration
     * @private
     */ /**
     * Base constructor, passes arguments to {@link #function-construct}.
     * @param args
     * @function constructor
     * @category Lifecycle
     */function Base$2(){_classCallCheck2(this,Base$2);// Allow subclasses to have a pseudo constructor with "this" already set;
this.construct.apply(this,arguments);this.afterConstruct();}/**
     * Base implementation applies configuration.
     *
     * Subclasses need only implement this if they have to initialize instance specific
     * properties required by the class. Often a `construct` method is
     * unnecessary. All initialization of incoming configuration properties can be
     * done in a `set propName` implementation.
     * @param {Object} [config] Usually called with a config object, but accepts any params
     * @category Lifecycle
     */_createClass2(Base$2,[{key:"construct",value:function construct(){// Passing null to base construct means bypass the config system and stack creation (to gain performance)
if((arguments.length<=0?undefined:arguments[0])!==null){this.configure.apply(this,arguments);}this.afterConfigure();}/**
     * Destroys the object.
     * Do not override this in subclasses. To provide class-specific destruction, implement a
     * doDestroy method. It is a lifecycle hook that will be called during destruction.
     * @category Lifecycle
     */},{key:"destroy",value:function destroy(){var me=this;me.isDestroying=true;me.doDestroy();Object.setPrototypeOf(this,null);// Clear all remaining instance properties.
for(var key in me){delete me[key];}delete me[originalConfigSymbol$1];// Only one property remains to signal why the object is inert.
me.isDestroyed=true;}/**
     * This method is required to help `unused` getters to survive production build process. Some tools, like angular,
     * will remove `unused` code in production build, making our side-effected getters behind, breaking code heavily.
     * @private
     * @param getter Getter to evaluate
     */},{key:"_thisIsAUsedExpression",value:function _thisIsAUsedExpression(getter){}},{key:"startConfigure",/**
     * Base implementation so that all subclasses and mixins may safely call super.startConfigure.
     *
     * This is called by the Base class before setting configuration properties, but after
     * the active initial getters have been set, so all configurations are available.
     *
     * This method allows all classes in the hierarchy to force some configs to be evaluated before others.
     * @internal
     * @category Lifecycle
     * @params {Object} config The configuration object use to set the initial state.
     */value:function startConfigure(config){}/**
     * Base implementation so that all subclasses and mixins may safely call super.finishConfigure.
     *
     * This is called by the Base class before exiting the {@link #function-configure} method.
     *
     * At this point, all configs have been applied, but the `isConfiguring` property is still set.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * into the config phase.
     * @internal
     * @category Lifecycle
     * @params {Object} config The configuration object use to set the initial state.
     */},{key:"finishConfigure",value:function finishConfigure(config){}/**
     * Base implementation so that all subclasses and mixins may safely call `super.afterConfigure`. This is called by the Base class after the {@link #function-configure} method has been
     * called. At this point, all configs have been applied.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * either before or after the super.afterConstruct();
     * @internal
     * @category Lifecycle
     */},{key:"afterConfigure",value:function afterConfigure(){}/**
     * Base implementation so that all subclasses and mixins may safely call super.afterConstruct.
     *
     * This is called by the Base class after the {@link #function-construct} method has been
     * called.
     *
     * At this point, all configs have been applied.
     *
     * This method allows all classes in the hierarchy to inject functionality
     * either before or after the super.afterConstruct();
     * @internal
     * @function afterConstructor
     * @category Lifecycle
     */},{key:"afterConstruct",value:function afterConstruct(){}/**
     * Provides a way of calling callbacks which may have been specified as the _name_ of a function
     * and optionally adds scope resolution.
     *
     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`
     * then the function is resolved in this object. This is useful when configuring listeners
     * at the class level.
     *
     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried
     * using the `owner` property until an object with the named function is present, then the
     * named function is called upon that object.
     * @param {String/Function} handler The function to call, or the name of the function to call.
     * @param {Object} thisObj The `this` object of the function.
     * @param {Object[]} args The argument list to pass.
     */},{key:"callback",value:function callback(fn,thisObject,args){// Maintainer: do not make args ...args. This method may acquire more arguments
if(thisObject==='this'){thisObject=this;}var _this$resolveCallback2=this.resolveCallback(fn,thisObject),handler=_this$resolveCallback2.handler,thisObj=_this$resolveCallback2.thisObj;return args?handler.apply(thisObj,args):handler.call(thisObj);}},{key:"resolveCallback",value:function resolveCallback(handler){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this;// It's a string, we find it in its own thisObj
if(handler.substr){if(handler.startsWith('up.')){handler=handler.substr(3);// Empty loop until we find the function owner
for(thisObj=this.owner;thisObj&&!thisObj[handler];thisObj=thisObj.owner){;}}else if(handler.startsWith('this.')){thisObj=this;}handler=thisObj[handler];}return{handler:handler,thisObj:thisObj};}/**
     * Base implementation so that all subclasses and mixins may safely call super.
     * doDestroy is how all subclasses must clean themselves up. It is called by the
     * Base class *before* final destruction of the object.
     * @internal
     * @category Lifecycle
     */},{key:"doDestroy",value:function doDestroy(){}/**
     * Destroys the named properties if they have been initialized, and if they have a `destroy` method.
     * Deletes the property from this object. For example:
     *
     *      this.destroyProperties('store', 'resourceStore', 'eventStore', 'dependencyStore', 'assignmentStore');
     *
     * @param {String} properties The names of the properties to destroy.
     * @internal
     * @category Lifecycle
     */},{key:"destroyProperties",value:function destroyProperties(){var me=this;var key,propertyValue;for(var _len77=arguments.length,properties=new Array(_len77),_key76=0;_key76<_len77;_key76++){properties[_key76]=arguments[_key76];}for(var _i39=0,_properties2=properties;_i39<_properties2.length;_i39++){key=_properties2[_i39];// If the value has *not* been pulled in from the configuration object yet
// we must not try to access it, as that will cause the property to be initialized.
if(key in me&&(!me[configurationSymbol$1]||!me[configurationSymbol$1][key])){propertyValue=me[key];if(propertyValue&&propertyValue.destroy){propertyValue.destroy();}delete me[key];}}}/**
     * Called by the Base constructor to apply configs to this instance. The must not be called.
     * @param {Object} config The configuration object from which instance properties are initialized.
     * @private
     * @category Lifecycle
     */},{key:"configure",value:function configure(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;me.initialConfig=config;// Important flag for setters to know whether they are being called during
// configuration when this object is not fully alive, or whether it's being reconfgured.
me.isConfiguring=true;// Assign any instance properties declared by the class.
Object.assign(me,me.getProperties());// Apply configuration to default (Which is safe, because it's a chained object) from class definition.
// Cache me.config for use by get config.
me.setConfig(me[originalConfigSymbol$1]=Base$2.assign(me.getDefaultConfiguration(),config),true);me.isConfiguring=false;}/**
     * Sets configuration options this object with all the properties passed in the parameter object.
     * Timing is taken care of. If the setter of one config is called first, and references
     * the value of another config which has not yet been set, that config will be set just
     * in time, and the *new* value will be used.
     * @param {Object} config An object containing configurations to change.
     * @category Configuration
     */},{key:"setConfig",value:function setConfig(config,isConstructing){var me=this,wasConfiguring=me[configurationSymbol$1],configDone=wasConfiguring?me.configDone:me.configDone={},instanceProperties=me[instancePropertiesSymbol$1]={};var key,instanceProperty;// Cache me.configuration for use by injected property initializers.
me[configurationSymbol$1]=wasConfiguring?Object.setPrototypeOf(Object.assign({},config),wasConfiguring):config;// For each incoming non-null configuration, create a temporary getter which will
// pull the value in from the initialConfig so that it doesn't matter in
// which order properties are set. You can access any property at any time.
for(key in config){// Don't default null configs inunless it's a direct property of the
// the passed configuration. When used at construct time, defaultConfigs
// will be prototype-chained onto the config.
if(config[key]!=null||config.hasOwnProperty(key)){// If there is an existing property with a getter/setter, *not* a value
// defined on the object for this config we must call it in our injected getter/setter.
// Maintainer, this is testing the truthiness of the assignment, *not* a botched equality test.
if(!instanceProperties[key]&&(instanceProperty=Reflect.getOwnPropertyDescriptor(me,key))&&!('value'in instanceProperty)){instanceProperties[key]=instanceProperty;}// Set up a temporary instance property which will
// Pull in the value from the initialConfig if the getter
// is called first.
Reflect.defineProperty(me,key,Base$2.createPropInitializer(key));if(!isConstructing){configDone[key]=false;}}else{configDone[key]=true;}}if(isConstructing){me.startConfigure(config);}// Set all our properties from the config object.
// If one of the properties needs to access a property that has not
// yet been set, the above temporary property will pull it through.
// Can't use Object.assign because that only uses own properties.
// config value blocks are prototype chained subclass->superclass
for(key in config){// Only push the value through if the property initializer is still present.
// If it gets triggered to pull the configuration value in, it deleted itself.
if(!configDone[key]){me[key]=config[key];}}if(wasConfiguring){me[configurationSymbol$1]=wasConfiguring;}else{delete me[configurationSymbol$1];}if(isConstructing){me.finishConfigure(config);}}/**
     * Returns a *copy* of the full configuration which was used to configure this object.
     * @returns {Object} All configuration properties which were used to configure this object.
     * @category Misc
     */},{key:"getDefaultConfiguration",/**
     * Gets the full {@link #property-defaultConfig-static} block for this object's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */value:function getDefaultConfiguration(){return this.constructor.getDefaultConfiguration();}/**
     * Gets the full {@link #property-defaultConfig-static} block for the entire inheritance chain for this class
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */},{key:"getProperties",/**
     * Gets the full {@link #property-properties-static} block for this class's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */value:function getProperties(){var hierarchy=this.classHierarchy(),len=hierarchy.length;var result={},i,cls;// TODO: if properties block does not change this could be cached? would speed up loading of big data sets into grid
// Gather the class result in *top-down* order so that a subclass's properties
// overrides properties from superclasses.
//for (cls of this.classHierarchy()) { // replaced for of since it transpiles badly and this is called a lot when creating many instances
for(i=0;i<len;i++){cls=hierarchy[i];// Skip classes which don't have it. We're going to ask its superclass anyway.
if(cls.hasOwnProperty('properties')){Object.assign(result,cls.properties);}}return result;}},{key:"classHierarchy",/**
     * Used by the Widget and GridFeatureManager class internally. Returns the class hierarchy of this object
     * starting from the `topClass` class (which defaults to `Base`).
     *
     * For example `classHierarchy(Widget)` on a Combo would yield `[Widget, Field, TextField, PickerField, Combo]`
     * @param {Function} [topClass] The topmost class constructor to start from.
     * @returns {Function[]} The class hierarchy of this instance.
     * @private
     * @category Configuration
     */value:function classHierarchy(topClass){var cls=this.constructor,fullClassHierarchy=cls.hasOwnProperty(classHierarchySymbol$1)?cls[classHierarchySymbol$1]:null,result;// Collect the full class hierarchy only once.
if(!fullClassHierarchy){// Using Object.getPrototypeOf instead of Refect.getPrototypeOf because:
// 1. The are almost the same, according to the MDN difference is handling getPrototypeOf('string')
// 2. It allows to pass security check is salesforce environment
for(fullClassHierarchy=cls[classHierarchySymbol$1]=[];cls!==Base$2;cls=Object.getPrototypeOf(cls)){fullClassHierarchy.unshift(cls);}// Don't let anybody mutate this. It's cached.
Object.freeze(fullClassHierarchy);}// Cut down to the requested topClass
if(topClass){for(var _i40=0;!result&&_i40<fullClassHierarchy.length;_i40++){if(fullClassHierarchy[_i40]===topClass){result=fullClassHierarchy.slice(_i40);}}}else{result=fullClassHierarchy;}return result;}/**
     * Same as {@link #function-classHierarchy} but returns array of class names obtained via $name property
     *
     * @param {Function} [topClass] The topmost class constructor to start from.
     * @returns {String[]} The class name hierarchy of this instance.
     * @private
     * @category Configuration
     */},{key:"classNameHierarchy",value:function classNameHierarchy(topClass){return this.classHierarchy(topClass).map(function(f){return f.$name;});}/**
     * Checks if an obj is of type using object's $name property and doing string comparision of the property with the type parameter.
     *
     * @param {String} type
     * @return {Boolean}
     */},{key:"$name",get:function get(){return this.constructor.$name;}},{key:"config",get:function get(){var result={},myConfig=this[originalConfigSymbol$1],key;// The configuration was created as a prototype chain of the class hierarchy's
// defaultConfig values hanging off a copy of the initialConfig object, so
// we must loop and copy since Object.assign only copies own properties.
for(key in myConfig){result[key]=myConfig[key];}return result;}}],[{key:"getDefaultConfiguration",value:function getDefaultConfiguration(){var configDescriptor=this.getConfigDescriptor();return configDescriptor.needsFork?this.fork(configDescriptor.defaultConfig):Object.setPrototypeOf({},configDescriptor.defaultConfig);}/**
     * Gets the full {@link #property-defaultConfig-static} block for this class's entire inheritance chain
     * all the way up to but not including {@link Common.Base}
     * @return {Object} All default config values for this class.
     * @private
     * @category Configuration
     */},{key:"getConfigDescriptor",value:function getConfigDescriptor(shallow){var me=this;var configDescriptor=!shallow&&me.hasOwnProperty(defaultConfigSymbol$1)?me[defaultConfigSymbol$1]:null,defaults,key,cls,value,superConfigDescriptor;if(!configDescriptor){configDescriptor={defaultConfig:defaults=me.hasOwnProperty('defaultConfig')?me.defaultConfig:{},// Use 1 instead of true because below we're using |= to or up all the flags from the class hierarchy
needsFork:0};// Only cache top level descriptors.
if(!shallow){me[defaultConfigSymbol$1]=configDescriptor;}for(key in defaults){value=defaults[key];// If any default properties are *mutable* Objects or Array we need to clone them.
// so that instances do not share configured values.
if(value&&(value.constructor===Object||Array.isArray(value))&&!Object.isFrozen(value)){// Use 1 instead of true because below we're using |= to or up all the flags from the class hierarchy
configDescriptor.needsFork=1;break;}}// Because of mixins being mixed into different parts of the class hiererchy,
// we can't chain to an existing deep descriptor. We have to climb from
// here and assemble the deep descriptor from shallow ones.
// If any along the way need forking (have an Object or Array), so do we.
// We chain them together because that is hundreds of times faster
// than Object.assign: https://jsperf.com/setprototypeof-vs-object-assign/
if(!shallow){for(cls=me.superclass;cls&&cls!==Base$2;cls=cls.superclass){superConfigDescriptor=cls.getConfigDescriptor(true);if(Object.keys(superConfigDescriptor.defaultConfig).length){configDescriptor.needsFork|=superConfigDescriptor.needsFork;Object.setPrototypeOf(defaults,defaults=superConfigDescriptor.defaultConfig);}}}}return configDescriptor;}},{key:"fork",value:function fork(obj){var ret,key,value;if(obj&&obj.constructor===Object&&!Object.isFrozen(obj)){ret=Object.setPrototypeOf({},obj);for(key in obj){value=obj[key];if(value){if(value.constructor===Object){ret[key]=this.fork(value);}else if(value instanceof Array){ret[key]=value.slice();}}}}else{ret=obj;}return ret;}},{key:"assign",value:function assign(dest){var i=0,ln=arguments.length<=1?0:arguments.length-1,source,key;for(;i<ln;i++){source=i+1<1||arguments.length<=i+1?undefined:arguments[i+1];for(key in source){dest[key]=source[key];}}return dest;}},{key:"createPropInitializer",value:function createPropInitializer(key){// Because initializers for a property name are the same, cache them on the Base
// class so that only one copy is created for each property name globally.
var result=(this[propertyInitializersSymbol$1]||(this[propertyInitializersSymbol$1]={}))[key];if(!result){var initializingFlagName='initializing'+StringHelper$1.capitalizeFirstLetter(key);result=this[propertyInitializersSymbol$1][key]={configurable:true,get:function get(){var me=this,instanceProperty=me[instancePropertiesSymbol$1][key];// If we took over from an instance property, replace it
if(instanceProperty){Reflect.defineProperty(me,key,instanceProperty);}// Otherwise just delete the instance property who's getter we are in.
else{delete me[key];}// Set the value from the configuration.
me[initializingFlagName]=true;me[key]=me[configurationSymbol$1][key];me[initializingFlagName]=false;// The property has been *pulled* from the configuration.
// Prevent the setting loop in configure from setting it again.
me.configDone[key]=true;// Finally, allow the prototype getter to return the value.
return me[key];},set:function set(value){var me=this,instanceProperty=me[instancePropertiesSymbol$1][key];// If we took over from an instance property, replace it
if(instanceProperty){Reflect.defineProperty(me,key,instanceProperty);}// Otherwise just delete the instance property who's getter we are in.
else{delete me[key];}// The config has been set (some internal code may have called the setter)
// so prevent it from being called again and overwritten with data from initialConfig.
me.configDone[key]=true;// Set the property normally (Any prototype setter will be invoked)
me[key]=value;}};}return result;}},{key:"isOfTypeName",value:function isOfTypeName(type){return this.classNameHierarchy().includes(type);}},{key:"$name",get:function get(){return this.hasOwnProperty('_$name')&&this._$name||this.name;}},{key:"superclass",get:function get(){return Object.getPrototypeOf(this);}}]);return Base$2;}();Base$2._$name='Base';/**
 * @module Common/helper/AjaxHelper
 */ /**
 * Simplifies Ajax requests. Uses fetch & promises.
 *
 * @example
 * AjaxHelper.get('someurl').then(response => {
 *  // process request response here
 * });
 */var AjaxHelper$1=/*#__PURE__*/function(){function AjaxHelper$1(){_classCallCheck2(this,AjaxHelper$1);}_createClass2(AjaxHelper$1,null,[{key:"get",/**
     * Make a request (using GET) to the specified url.
     * @param {String} url Url
     * @param {Object} [options] The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */value:function get(url,options){return this.fetch(url,options);}/**
     * POST data to the specified URL.
     * @param {String} url The URL
     * @param {String|Object|FormData} payload The data to post. If an object is supplied, it will be stringified
     * @param {Object} options The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */},{key:"post",value:function post(url,payload){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!(payload instanceof FormData)&&!(typeof payload==='string')){payload=JSON.stringify(payload);}return this.fetch(url,Object.assign({method:'POST',body:payload},options));}/**
     * Fetch the specified resource using the `fetch` API.
     * @param {String} url object to fetch
     * @param {Object} options The options for the `fetch` API. Please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch for details
     * @param {Object} [options.method] The request method, e.g., GET, POST
     * @param {Object} [options.queryParams] A key-value pair Object containing the params to add to the query string
     * @param {Object} [options.headers] Any headers you want to add to your request, contained within a `Headers object or an object literal with ByteString values
     * @param {Object} [options.body] Any body that you want to add to your request: this can be a Blob, BufferSource, FormData, URLSearchParams, or USVString object. Note that a request using the GET or HEAD method cannot have a body.
     * @param {Object} [options.mode] The mode you want to use for the request, e.g., cors, no-cors, or same-origin.
     * @param {Object} [options.credentials] The request credentials you want to use for the request: omit, same-origin, or include. To automatically send cookies for the current domain, this option must be provided
     * @param {Object} [options.parseJson] Specify `true` to parses the response and attach the resulting object to the `Response` object as `parsedJson`
     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method
     */},{key:"fetch",value:function(_fetch2){function fetch(_x112){return _fetch2.apply(this,arguments);}fetch.toString=function(){return _fetch2.toString();};return fetch;}(function(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var controller=new AbortController();options.signal=controller.signal;if(!('credentitals'in options)){options.credentials='include';}if(options.queryParams){var params=Object.entries(options.queryParams);if(params.length){url+='?'+params.map(function(_ref459){var _ref460=_slicedToArray(_ref459,2),param=_ref460[0],value=_ref460[1];return"".concat(param,"=").concat(encodeURIComponent(value));}).join('&');}}// Promise that will be resolved either when network request is finished or when json is parsed
var promise=new Promise(function(resolve,reject){fetch(url,options).then(function(response){if(options.parseJson){response.json().then(function(json){response.parsedJson=json;resolve(response);}).catch(function(error){response.parsedJson=null;response.error=error;reject(response);});}else{resolve(response);}}).catch(function(error){reject(error);});});promise.abort=function(){controller.abort();};return promise;})}]);return AjaxHelper$1;}();AjaxHelper$1._$name='AjaxHelper';/**
 * @module Common/helper/ArrayHelper
 */ /**
 * Helper with useful functions for handling Arrays
 * @internal
 */var ArrayHelper$1=/*#__PURE__*/function(){function ArrayHelper$1(){_classCallCheck2(this,ArrayHelper$1);}_createClass2(ArrayHelper$1,[{key:"magnitudeCompare",value:function magnitudeCompare(lhs,rhs){return lhs<rhs?-1:lhs>rhs?1:0;}},{key:"lexicalCompare",value:function lexicalCompare(lhs,rhs){lhs=String(lhs);rhs=String(rhs);return lhs<rhs?-1:lhs>rhs?1:0;}/**
     * Similar to Array.prototype.fill(), but constructs a new array with the specified item count and fills it with
     * clones of the supplied item.
     * @param {Number} count Number of entries to create
     * @param {Object|Array} itemOrArray Item or array of items to clone (uses object spread to create shallow clone)
     * @param {Function} [fn] An optional function that is called for each item added, to allow processing
     * @returns {Array} A new populated array
     */}],[{key:"clean",value:function clean(array){return array.reduce(function(res,item){if(item!==null&&item!==undefined&&!(Array.isArray(item)&&item.length===0)&&item!=='')res.push(item);return res;},[]);}/**
     * Remove one or more items from an array
     * @param {Array} array Array to remove from
     * @param {Object} items One or more items to remove
     * @returns {boolean} Returns true if any item was removed
     */},{key:"remove",value:function remove(array){var index,item,removed=false;for(var _i41=0;_i41<(arguments.length<=1?0:arguments.length-1);_i41++){item=_i41+1<1||arguments.length<=_i41+1?undefined:arguments[_i41+1];if((index=array.indexOf(item))!==-1){array.splice(index,1);removed=true;}}return removed;}/*
     * Calculates the insertion index of a passed object into the passed Array according
     * to the passed comparator function. Note that the passed Array *MUST* already be ordered.
     * @param {Object} item The item to calculate the insertion index for.
     * @param {Array} The array into which the item is to be inserted.
     * @param {Function} comparatorFn The comparison function. Must return -1 or 0 or 1.
     * @param {Object} comparatorFn.lhs The left object to compare.
     * @param {Object} comparatorFn.rhs The right object to compare.
     * @param {Number} index The possible correct index to try first before a binary
     * search is instigated.
     */},{key:"findInsertionIndex",value:function findInsertionIndex(item,array){var comparatorFn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.lexicalCompare;var index=arguments.length>3?arguments[3]:undefined;var len=array.length;var beforeCheck,afterCheck;if(index<len){beforeCheck=index>0?comparatorFn(array[index-1],item):0;afterCheck=index<len-1?comparatorFn(item,array[index]):0;if(beforeCheck<1&&afterCheck<1){return index;}}return this.binarySearch(array,item,comparatorFn);}/**
     * This method returns the index that a given item would be inserted into the
     * given (sorted) `array`. Note that the given `item` may or may not be in the
     * array. This method will return the index of where the item *should* be.
     *
     * For example:
     *
     *      var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];
     *      var index = ArrayHelper.binarySearch(array, 'E');
     *
     *      console.log('index: ' + index);
     *      // logs "index: 2"
     *
     *      array.splice(index, 0, 'E');
     *
     *      console.log('array : ' + array.join(''));
     *      // logs "array: ADEGKORX"
     *
     * @param {Object[]} array The array to search.
     * @param {Object} item The item that you want to insert into the `array`.
     * @param {Number} [begin=0] The first index in the `array` to consider.
     * @param {Number} [end=array.length] The index that marks the end of the range
     * to consider. The item at this index is *not* considered.
     * @param {Function} [compareFn] The comparison function that matches the sort
     * order of the `array`. The default `compareFn` compares items using less-than
     * and greater-than operators.
     * @return {Number} The index for the given item in the given array based on
     * the passed `compareFn`.
     */},{key:"binarySearch",value:function binarySearch(array,item){var begin=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var end=arguments.length>3&&arguments[3]!==undefined?arguments[3]:array.length;var compareFn=arguments.length>4&&arguments[4]!==undefined?arguments[4]:this.lexicalCompare;var length=array.length;var middle,comparison;if(begin instanceof Function){compareFn=begin;begin=0;}else if(end instanceof Function){compareFn=end;end=length;}--end;while(begin<=end){middle=begin+end>>1;comparison=compareFn(item,array[middle]);if(comparison>=0){begin=middle+1;}else if(comparison<0){end=middle-1;}}return begin;}},{key:"fill",value:function fill(count){var itemOrArray=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var fn=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var result=[],items=Array.isArray(itemOrArray)?itemOrArray:[itemOrArray];for(var _i42=0;_i42<count;_i42++){var _iteratorNormalCompletion95=true;var _didIteratorError95=false;var _iteratorError95=undefined;try{for(var _iterator95=items[Symbol.iterator](),_step95;!(_iteratorNormalCompletion95=(_step95=_iterator95.next()).done);_iteratorNormalCompletion95=true){var item=_step95.value;// Using object spread here forces us to use more babel plugins and will make
// react_typescript demo very difficult to setup
var processedItem=Object.assign({},item);if(fn){fn(processedItem,_i42);}result.push(processedItem);}}catch(err){_didIteratorError95=true;_iteratorError95=err;}finally{try{if(!_iteratorNormalCompletion95&&_iterator95.return!=null){_iterator95.return();}}finally{if(_didIteratorError95){throw _iteratorError95;}}}}return result;}/**
     * Populates an array with the return value from `fn`.
     * @param {Number} count Number of entries to create
     * @param {Function} fn A function that is called `count` times, return value is added to array
     * @param {Number} fn.index Current index in the array
     * @returns {Array} A new populated array
     */},{key:"populate",value:function populate(count,fn){var items=[];for(var _i43=0;_i43<count;_i43++){items.push(fn(_i43));}return items;}/**
     * Pushes `item` on to the `array` if not already included
     * @param {Array}  array Array to push to
     * @param {Object} item Item to push if not already included
     */},{key:"include",value:function include(array,item){if(!array.includes(item)){array.push(item);}}// Wanted to create an indexer on Stores, based on this. But turns out Proxy cannot be transpiled/polyfill for IE11
// Keeping it for future reference
},{key:"allowNegative",value:function allowNegative(array){// From https://github.com/sindresorhus/negative-array
return new Proxy(array,{get:function get(target,name,receiver){if(typeof name!=='string'){return Reflect.get(target,name,receiver);}var index=Number(name);if(Number.isNaN(index)){return Reflect.get(target,name,receiver);}return target[index<0?target.length+index:index];},set:function set(target,name,value,receiver){if(typeof name!=='string'){return Reflect.set(target,name,value,receiver);}var index=Number(name);if(Number.isNaN(index)){return Reflect.set(target,name,value,receiver);}target[index<0?target.length+index:index]=value;return true;}});}}]);return ArrayHelper$1;}();ArrayHelper$1._$name='ArrayHelper';//TODO: Implement mon
/**
 * @module Common/mixin/Events
 */ // Used to distinguish event names from listener options in addListener object config.
var specialProperties$1={thisObj:1,detachable:1,once:1,detacher:1,prio:1,args:1,_oldDestructor:1},priorityComparator$1=function priorityComparator$1(a,b){return b.prio-a.prio;};/**
 * Mix this into another class to enable event handling.
 *
 * ## Basic usage
 * Listeners can be added either through config:
 *
 * ```javascript
 * let button = new Button({
 *   listeners: {
 *     click: () => {},
 *     press: () => {},
 *     ...
 *   }
 * });
 * ```
 *
 * *NOTE*: Do not reuse listeners config object, use new every time:
 * ```javascript
 * // wrong
 * let config = { click : () => {} }
 * new Button({
 *     listeners : config
 * })
 * new Button({
 *     listeners : config
 * })
 * // right
 * new Button({
 *     listeners : { click : () => {} }
 * })
 * new Button({
 *     listeners : { click : () => {} }
 * })
 * ```
 *
 * Or by calling on()/addListener():
 *
 * ```javascript
 * let button = new Button();
 *
 * button.addListener('press', () => {});
 * // on is an alias for addListener
 * button.on('click', () => {});
 * ```
 *
 * This style also accepts multiple listeners in same way as when using config:
 *
 * ```javascript
 * button.on({
 *   click: () => {},
 *   press: () => {},
 *   ...
 * });
 * ```
 *
 * ## Options
 * ### Once
 * Listeners can be configured to automatically deregister after first trigger by specifing config option `once`:
 *
 * ```javascript
 * button.on({
 *   click: () => {},
 *   once: true
 * });
 * ```
 *
 * ### Priority
 * Specifying priority affects the order in which listeners are called when triggering an event. Higher prios will be
 * called before lower. Default value is 0.
 *
 * ```javascript
 * button.on({
 *   click: this.onClick,
 *   prio: 1
 * });
 * ```
 *
 * ### This reference
 * If desired, you can specify thisObj when configuring listeners. There is no need if you are using arrow functions as
 * listeners, but might be handy in other cases. Of course, you can also use bind to set `this` reference.
 *
 * ```javascript
 * button.on({
 *   click: this.onClick,
 *   thisObj: this
 * });
 *
 * // or
 *
 * button.on({
 *   click: this.onClick.bind(this)
 * });
 * ```
 *
 * ### Detacher
 * A convenient way of unregistering events is to use a detacher, a function returned when adding listeners that you
 * call later to deregister them. As of version 1.0, detachable defaults to true.
 *
 * ```javascript
 * let detacher = button.on({
 *   click: () => {},
 *   press: () => {},
 *   detachable: true
 * });
 *
 * // when you want to detach, for example in destroy()
 * detacher();
 * ```
 *
 * ### Auto detaching
 * When listeners are bound to a class instance using `thisObj`, the `thisObj`'s `doDestroy` method
 * is overridden to remove the listeners before calling the overridden doDestroy.
 *
 * ```javascript
 * class MyClass extends Base {
 *   construct() {
 *     let button = new Button({
 *       listeners: {
 *         click: () => {},
 *         thisObj: this
 *       }
 *     });
 *   }
 *
 *   doDestroy() {
 *     // clean up stuff
 *   }
 * }
 *
 * let myObj = new MyClass();
 * // clean up, also removes listeners
 * myObj.destroy();
 * ```
 *
 * ### On-functions
 * When mixing Events into another class it can be configured to call on-functions when events are triggered.
 * On-functions are functions named 'onEventname', for example 'onClick', 'onPress' declared on the class triggering
 * the event.
 *
 * ```javascript
 * // mix Events in with on-functions activated
 * let button = new Button({
 *   callOnFunctions: true,
 *
 *   onClick: () => {}
 * });
 *
 * // or add a getter in class declaration
 * ```
 *
 * ### Catching all events
 * By specifying a listener for `catchAll` a function can be notified when any event is triggered:
 *
 * ```javascript
 * const button = new Button({
 *    listeners : {
 *        catchAll(event) {
 *            // All events on the button will pass through here
 *        }
 *    }
 * });
 * ```
 *
 * @mixin
 */var Events$1=function Events$1(Target){return(/*#__PURE__*/function(_ref461){_inherits2(Events,_ref461);function Events(){_classCallCheck2(this,Events);return _possibleConstructorReturn2(this,_getPrototypeOf2(Events).apply(this,arguments));}_createClass2(Events,[{key:"destroy",//region Events
/**
     * Fires before an object is destroyed.
     * @event beforeDestroy
     * @param {Object} source The Object that is being destroyed.
     */ /**
     * Fires when an object is destroyed.
     * @event destroy
     * @param {Object} source The Object that is being destroyed.
     */ //endregion
//region Config
/**
     * Listeners can be specified in target class config.
     * ```
     * let store = new Store({
     *   listeners: {
     *     load: () => {},
     *     ...
     *   }
     * });
     * ```
     * @config {Object} listeners
     */value:function destroy(){this.trigger('beforeDestroy');_get2(_getPrototypeOf2(Events.prototype),"destroy",this).call(this);}//endregion
//region Init
// TODO: Check, because not sure about using @function constructor here
/**
     * Adds configured listeners
     * @private
     * @function constructor
     */},{key:"construct",value:function construct(){var _get32;for(var _len78=arguments.length,args=new Array(_len78),_key77=0;_key77<_len78;_key77++){args[_key77]=arguments[_key77];}(_get32=_get2(_getPrototypeOf2(Events.prototype),"construct",this)).call.apply(_get32,[this].concat(args));this.processConfiguredListeners();}},{key:"processConfiguredListeners",value:function processConfiguredListeners(){var listeners=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.listeners;var me=this;// make sure main object contains `listeners` property
me.listeners=listeners;// TODO: listeners should be added first, so that any setters which fire or rely on listeners work.
// This may also expose bugs where listeners are fired too early.
if(me.listeners&&!me.defaultListenersInitialized){var ret=me.addListener(me.listeners,me);if(me.listeners.detachable!==false)me.listeners.detacher=ret;me.defaultListenersInitialized=true;}}/**
     * Auto detaches listeners registered from start, if set as detachable
     * @internal
     */},{key:"doDestroy",value:function doDestroy(){var me=this;me.trigger('destroy');if(me.listeners&&me.listeners.detacher){me.listeners.detacher();}me.removeAllListeners();_get2(_getPrototypeOf2(Events.prototype),"doDestroy",this).call(this);}//endregion
//region Listeners
/**
     * Adds an event listener. This method accepts parameters in the following format:
     *
     * ```javascript
     *  {
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      }
     *      prio        : 100           // Higher prio listeners are called before lower
     *  }
     * ```
     *
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     *
     * @param {Object} config An object containing listener definitions.
     * @param {Object} [config.thisObj] The `this` reference for all listeners.
     * (May be overridden if a handler is specified in object form)
     * @param {Boolean} [config.once] Specify as `true` to remove the listener as soon as it is invoked.
     * @param {Object[]} [config.args] An array of arguments to be passed to the handler before the event object.
     * @param {Object} [thisObj] `this` reference for all listeners.
     * @param {Number} [prio] The priority for all listeners; higher priority listeners are caled before lower.
     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners
     */},{key:"addListener",value:function addListener(config,thisObj,arg2){var me=this,events=me.eventListeners||(me.eventListeners={});if(typeof config==='string'){var _me$addListener2;// arguments[2] is thisObj if (eventname, handler, thisObj) form called.
// Note that the other side of the if compares to undefined, so this will work.
return me.addListener((_me$addListener2={},_defineProperty(_me$addListener2,config,thisObj),_defineProperty(_me$addListener2,"detachable",thisObj.detachable!==false),_defineProperty(_me$addListener2,"thisObj",arg2),_me$addListener2));}else{// If the thisObj came from the parameter, ensure the config object has it
// because this is how autoDetaching works.
thisObj=config.thisObj!==undefined?config.thisObj:config.thisObj=thisObj;for(var key in config){if(!specialProperties$1[key]){var listenerSpec=config[key],listener={fn:_typeof(listenerSpec)==='object'?listenerSpec.fn:listenerSpec,thisObj:listenerSpec.thisObj!==undefined?listenerSpec.thisObj:thisObj,args:listenerSpec.args||config.args,prio:listenerSpec.prio!==undefined?listenerSpec.prio:config.prio!==undefined?config.prio:0,once:listenerSpec.once!==undefined?listenerSpec.once:config.once!==undefined?config.once:false,catchAll:key==='catchAll'},eventName=key.toLowerCase(),_listeners4=events[eventName]||(events[eventName]=[]);// Insert listener directly in prio order
_listeners4.splice(ArrayHelper$1.findInsertionIndex(listener,_listeners4,priorityComparator$1,_listeners4.length),0,listener);}}if(config.relayAll){me.relayAll(config.relayAll);}// Hook into the thisObj's destruction sequence to remove these listeners.
if(thisObj){me.attachAutoDetacher(config);}if(config.detachable!==false){return function(){return me.removeListener(config);};}}}/**
     * Shorthand for addListener
     * @param config
     * @param [thisObj]
     */},{key:"on",value:function on(){return this.addListener.apply(this,arguments);}/**
     * Shorthand for removeListener
     * @param config
     * @param thisObj
     */},{key:"un",value:function un(){this.removeListener.apply(this,arguments);}/**
     * Removes an event listener. Same API signature as {@link #function-addListener}
     * @param {Object} config Listeners
     * @param {Object} thisObj `this` reference for all listeners
     */},{key:"removeListener",value:function removeListener(config){var thisObj=arguments.length>1&&arguments[1]!==undefined?arguments[1]:config.thisObj;var me=this;if(typeof config==='string'){me.removeListener(_defineProperty({},config,thisObj),(arguments.length<=2?0:arguments.length-2)>0?arguments.length<=2?undefined:arguments[2]:true);return;}Object.entries(config).forEach(function(_ref462){var _ref463=_slicedToArray(_ref462,2),key=_ref463[0],configListener=_ref463[1];if(specialProperties$1[key]){return;}var eventName=key.toLowerCase(),listeners=me.eventListeners&&me.eventListeners[eventName];if(listeners){var index=listeners.findIndex(function(listener){return(listener.fn===configListener||listener.fn===configListener.fn)&&(listener.thisObj===thisObj||listener.thisObj===configListener.thisObj||!thisObj);});if(index>=0){listeners.splice(index,1);if(!listeners.length){delete me.eventListeners[eventName];}}}});if(config.thisObj&&!config.thisObj.isDestroyed){me.detachAutoDetacher(config);}}/**
     * Check if any listener is registered for the specified eventName
     * @param {String} eventName
     * @returns {Boolean} `true` if listener is registered, otherwise `false`
     */},{key:"hasListener",value:function hasListener(eventName){return Boolean(this.eventListeners&&this.eventListeners[eventName]);}/**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -> storeAdd
     * ```
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     *
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     * @param {Common.mixin.Events} through Object to relay the events through, needs to mix Events mixin in
     * @param {String} prefix Prefix to add to event name
     * @param {Boolean} [transformCase] Specify false to prevent making first letter of event name uppercase
     */},{key:"relayAll",value:function relayAll(through,prefix){var transformCase=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var me=this;if(!me.relayAllTargets)me.relayAllTargets=[];me.relayAllTargets.push({through:through,prefix:prefix,transformCase:transformCase});}/**
     * Removes all listeners registered to this object
     */},{key:"removeAllListeners",value:function removeAllListeners(){var me=this,listeners=me.eventListeners||(me.eventListeners={});var _loop7=function _loop7(event){listeners[event].forEach(function(cfg){return me.removeListener(event,cfg);});};for(var event in listeners){_loop7(event);}}},{key:"relayEvents",value:function relayEvents(source,eventNames,prefix){var me=this,listenerConfig={detachable:true};function retrigger(eventName){for(var _len79=arguments.length,params=new Array(_len79>1?_len79-1:0),_key78=1;_key78<_len79;_key78++){params[_key78-1]=arguments[_key78];}return me.trigger.apply(me,[(prefix||'')+eventName].concat(params));}eventNames.forEach(function(eventName){listenerConfig[eventName]=function(){for(var _len80=arguments.length,params=new Array(_len80),_key79=0;_key79<_len80;_key79++){params[_key79]=arguments[_key79];}return retrigger.apply(void 0,[eventName].concat(params));};});return source.on(listenerConfig);}/**
     * Internal function used to hook destroy() calls when using thisObj
     * @private
     */},{key:"attachAutoDetacher",value:function attachAutoDetacher(config){var _this160=this;var target=config.thisObj,// If it's a Bryntyum Base subclass, hook doDestroy, otherwise, destroy
destructorName='doDestroy'in target?'doDestroy':'destroy';if(destructorName in target){config._oldDestructor=target[destructorName];target[destructorName]=function(){// Remove listeners first, so that they do not fire during destruction.
// The observable being listened to by the thisObj may already have
// been destroyed in a clean up sequence
if(!_this160.isDestroyed){_this160.removeListener(config);}config._oldDestructor.call(target);};}else{target[destructorName]=function(){_this160.removeListener(config);};}}/**
     * Internal function used restore hooked destroy() calls when using thisObj
     * @private
     */},{key:"detachAutoDetacher",value:function detachAutoDetacher(config){var target=config.thisObj,destructorName='doDestroy'in target?'doDestroy':'destroy';if(config._oldDestructor){target[destructorName]=config._oldDestructor;}}//endregion
//region Promise based workflow
// experimental, used in tests to support async/await workflow
},{key:"await",value:function _await(eventName){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{checkLog:true,resetLog:true};var me=this;return new Promise(function(resolve){var _me$on2;// check if previously triggered?
if(options.checkLog&&me._triggered&&me._triggered[eventName]){// resolve immediately, no params though...
resolve();// reset log to be able to await again
if(options.resetLog){me.clearLog(eventName);}}me.on((_me$on2={},_defineProperty(_me$on2,eventName,function(){// resolve when event is caught
resolve.apply(void 0,arguments);// reset log to be able to await again
if(options.resetLog){me.clearLog(eventName);}}),_defineProperty(_me$on2,"prio",-10000),_defineProperty(_me$on2,"once",true),_me$on2));});}},{key:"clearLog",value:function clearLog(eventName){if(this._triggered){if(eventName){delete this._triggered[eventName];}else{this._triggered={};}}}//endregion
//region Trigger
/**
     * Wraps a function with event triggering. First triggers before[eventName] with the supplied eventObject. If it is
     * not prevented (by returning false) the supplied fn is called with the eventObject as first argument and any
     * optional arguments after that. It then triggers [eventName] with the eventObject (that might have been altered in
     * fn). Finally it returns the return value from the fn.
     * @param {String} eventName Event name, used to trigger 'beforeEventName' and 'eventName'
     * @param {Object} eventObject Passed when triggering events
     * @param {Function} fn Function to call if before is not prevented
     * @param {Array} args Arguments to pass to fn
     * @param {Boolean} quiet Specify true to not trigger events
     * @returns {*} Result returned from calling fn, or false if prevented
     * @internal
     */},{key:"callPreventable",value:function callPreventable(eventName,eventObject,fn){var args=arguments.length>3&&arguments[3]!==undefined?arguments[3]:[];var quiet=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var me=this;if(!quiet&&me.trigger('before'+StringHelper$1.capitalizeFirstLetter(eventName),eventObject)===false){return false;}var result=fn.apply(void 0,[eventObject].concat(_toConsumableArray(args)));if(!quiet){me.trigger(eventName,eventObject);}return result;}/**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     * @param {String} eventName Event name for which to trigger listeners
     * @param {Object} param Single parameter passed on to listeners, source property will be added to it (this)
     * @param {Boolean} [param.bubbles] Pass as `true` to indicate that the event will bubble up the widget
     * ownership hierarchy. For example up a Menu->parent Menu tree, or a Field->Container tree.
     * @returns {Boolean} Returns false if any listener returned false, otherwise true
     */ // TODO: should returning false from a listener really prevent other listeners from executing?
},{key:"trigger",value:function trigger(eventName,param){var me=this,name=eventName.toLowerCase(),eventsSuspended=me.eventsSuspended,relayAllTargets=me.relayAllTargets,callOnFunctions=me.callOnFunctions;var listeners=me.eventListeners&&me.eventListeners[name],doSlice=true;// log trigger, used by experimental promise support to resolve immediately when needed
if(!me._triggered){me._triggered={};}me._triggered[eventName]=true;if(eventsSuspended){if(eventsSuspended.shouldQueue)eventsSuspended.queue.push(arguments);return true;}// Include catchall listener for all events.
// Do not push the catchAll listeners onto the events own listener array.
if(me.eventListeners&&me.eventListeners.catchall){var _listeners5;(_listeners5=listeners=listeners?listeners.slice():[]).push.apply(_listeners5,_toConsumableArray(me.eventListeners.catchall));// The catchAll listeners must honour their prio settings.
listeners.sort(priorityComparator$1);doSlice=false;}if(!listeners&&!relayAllTargets&&!callOnFunctions)return true;// default to include source : this in param
if(param){if(!('source'in param)){if(Object.isExtensible(param)){param.source=me;}else{param=Object.setPrototypeOf({source:me},param);}}}else{param={source:me};}// Lowercased event name should be the "type" property in keeping with DOM events.
if(param.type!==name){// Create instance property because "type" is read only
if(param.constructor!==Object){Reflect.defineProperty(param,'type',{get:function get(){return name;}});}else{param.type=name;}}if(callOnFunctions){var fnName='on'+StringHelper$1.capitalizeFirstLetter(eventName);if(fnName in me){me.callback(me[fnName],me,[param]);// See if the called function was injected into the instance
// masking an implementation in the prototype.
// we must call the class's implementation after the injected one.
// Note: The handler may have resulted in destruction.
if(!me.isDestroyed&&me.hasOwnProperty(fnName)){var myProto=Object.getPrototypeOf(me);if(fnName in myProto){myProto[fnName].call(me,param);// A handler may have resulted in destruction.
if(me.isDestroyed){return;}}}}}if(listeners){var _i44=0,listener,handler;// Make a flat copy of the listeners to protect against a situation where an event listener
// adds another listener while triggering the event, which we do not want.
// The array may already be a copy if there are catchAll listeners. See above.
if(doSlice){listeners=listeners.slice();}// If any listener resulted in our destruction, abort.
for(_i44;_i44<listeners.length&&!me.isDestroyed;_i44++){listener=listeners[_i44];var thisObj=listener.thisObj;// Listeners that have thisObj are auto removed when thisObj is destroyed. If thisObj is destroyed from
// a listener we might still end up here, since listeners are sliced and not affected by the removal
if(!thisObj||!thisObj.isDestroyed){if(listener.once){me.removeListener(name,listener);}if(typeof listener.fn==='string'){if(thisObj){handler=thisObj[listener.fn];}// keep looking for the callback in the hierarchy
if(!handler){var result=me.resolveCallback(listener.fn);handler=result.handler;thisObj=result.thisObj;}}else{handler=listener.fn;}// If listener was declared with args, send our param after them
if(listener.args){var _handler3;if((_handler3=handler).call.apply(_handler3,[thisObj||me].concat(_toConsumableArray(listener.args),[param]))===false){return false;}}else{if(handler.call(thisObj||me,param)===false){return false;}}}}}// relay all?
if(relayAllTargets){relayAllTargets.forEach(function(config){var name=eventName;if(config.transformCase)name=StringHelper$1.capitalizeFirstLetter(name);if(config.prefix)name=config.prefix+name;if(config.through.trigger(name,param)===false)return false;});}// Use DOM standard event property name to indicate that the event
// bubbles up the owner axis.
// False from any handler cancels the bubble.
if(param.bubbles){var owner=me.owner;if(owner){return owner.trigger(eventName,param);}}return true;}/**
     * Prevents events from being triggered until {@link #function-resumeEvents()} is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     * @param {Boolean} queue Specify true to queue events triggered while suspended
     */},{key:"suspendEvents",value:function suspendEvents(){var queue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var eventsSuspended=this.eventsSuspended||(this.eventsSuspended={shouldQueue:queue,queue:[],count:0});eventsSuspended.count++;}/**
     * Resume event triggering after a call to {@link #function-suspendEvents()}. If any triggered events were queued they will be triggered.
     * @returns `true` if events have been resumed (multiple calls to suspend require an equal number of resume calls to resume).
     */},{key:"resumeEvents",value:function resumeEvents(){var suspended=this.eventsSuspended;if(suspended){if(--suspended.count===0){this.eventsSuspended=null;if(suspended.shouldQueue){var _iteratorNormalCompletion96=true;var _didIteratorError96=false;var _iteratorError96=undefined;try{for(var _iterator96=suspended.queue[Symbol.iterator](),_step96;!(_iteratorNormalCompletion96=(_step96=_iterator96.next()).done);_iteratorNormalCompletion96=true){var queued=_step96.value;this.trigger.apply(this,_toConsumableArray(queued));}}catch(err){_didIteratorError96=true;_iteratorError96=err;}finally{try{if(!_iteratorNormalCompletion96&&_iterator96.return!=null){_iterator96.return();}}finally{if(_didIteratorError96){throw _iteratorError96;}}}}}}return!Boolean(this.eventsSuspended);}//endregion
}]);return Events;}(Target||Base$2));};/**
 * Singleton that handles switching locale. Locales can be included on page with `<script type="module">` tags or
 * loaded using ajax. When using script tags the first locale loaded is used per default, if another should be used as
 * default specify it on the script tag for the grid (see example below).
 *
 * ```
 * // Using Ecma 6 modules
 * &lt;script type="module" src="./Common/localization/SvSE.js"&gt;
 *
 * // Specify default when using scripts
 * &lt;script src="build/locales/grid-locale-SvSE.js"&gt;
 * &lt;script data-default-locale="En" src="build/grid-all.js"&gt;
 *
 * import LocaleManager from 'Common/localization/LocaleManager.js';
 * LocaleManager.applyLocale('SvSE');
 * ```
 *
 * @demo localization
 */var LocaleManager$1=/*#__PURE__*/function(_Events$){_inherits2(LocaleManager$1,_Events$);function LocaleManager$1(){_classCallCheck2(this,LocaleManager$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(LocaleManager$1).apply(this,arguments));}_createClass2(LocaleManager$1,[{key:"construct",value:function construct(){var _get33;var me=this;for(var _len81=arguments.length,args=new Array(_len81),_key80=0;_key80<_len81;_key80++){args[_key80]=arguments[_key80];}(_get33=_get2(_getPrototypeOf2(LocaleManager$1.prototype),"construct",this)).call.apply(_get33,[this].concat(args));// currentScript not working in IE11
// if (document.currentScript && document.currentScript.dataset.defaultLocale) {
//     me.defaultLocaleName = document.currentScript.dataset.defaultLocale;
// }
var scriptTag=document.querySelector('script[data-default-locale]');if(scriptTag){me.defaultLocaleName=scriptTag.dataset.defaultLocale;}if(window.bryntum&&window.bryntum.locales){Object.keys(window.bryntum.locales).forEach(function(localeName){// keeping this check in case some client tries to use an old locale
if(!localeName.startsWith('moment')){var _locale4=window.bryntum.locales[localeName];if(_locale4.extends){me.extendLocale(_locale4.extends,_locale4);}else{me.registerLocale(_locale4.localeName,{desc:_locale4.localeDesc,locale:_locale4});}}});if(!me.locale){// English locale is built in, no need to apply it here since it will be applied anyway
if(me.defaultLocaleName!=='En'){// No locale applied, use default or first found
me.applyLocale(me.defaultLocaleName||Object.keys(me.locales)[0]);}}}}},{key:"registerLocale",/**
     * Register a locale to make it available for applying
     * @param name
     * @param config
     */value:function registerLocale(name,config){var me=this,isDefault=me.defaultLocaleName===name,isCurrent=me.locale&&me.locale.localeName===name,isFirst=Object.keys(me.locales).length===0;me.locales[name]=config;// if no default locale specified, use the first one. otherwise apply the default when it is registered
// also reapply if current locale is registered again (first grid, then scheduler etc).
if(isDefault||!me.defaultLocaleName&&(isFirst||isCurrent)){me.internalApplyLocale(config);}}/**
     * Extend an already loaded locale to add additional translations
     * @param name
     * @param config
     */},{key:"extendLocale",value:function extendLocale(name,config){var locale=this.locales[name];if(!locale)return false;Object.keys(config).forEach(function(cls){if(!locale.locale[cls]){locale.locale[cls]=config[cls];}else{Object.assign(locale.locale[cls],config[cls]);}});delete locale.locale.extends;return true;}},{key:"internalApplyLocale",value:function internalApplyLocale(localeConfig){var me=this;me._locale=localeConfig.locale;me.trigger('locale',localeConfig);}/**
     * Apply a locale. Locale must be defined in LocaleManager#locales. If it is not loaded it will be loaded using ajax
     * and then applied.
     * @param {String} name Name of locale to apply (for example En or SvsE)
     * @returns {boolean|Promise}
     */},{key:"applyLocale",value:function applyLocale(name){var forceApply=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var ignoreError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var me=this,localeConfig=me.locales[name];if(localeConfig&&localeConfig.locale&&me._locale===localeConfig.locale&&!forceApply){// no need to apply same locale again
return true;}// ignoreError is used in examples where one example might have defined a locale not available in another
if(!localeConfig){if(ignoreError)return true;throw new Error("Locale ".concat(name," not registered"));}function internalApply(){me.internalApplyLocale(localeConfig);}if(!localeConfig.locale){return new Promise(function(resolve,reject){me.loadLocale(localeConfig.path).then(function(response){//const text      = response.substring(response.indexOf('{'), response.lastIndexOf('};') + 1),
//      getLocale = new Function('return ' + text);
response.text().then(function(text){// eslint-disable-next-line no-new-func
var parseLocale=new Function(text);parseLocale();localeConfig.locale=window.bryntum.locales[name];internalApply();resolve(localeConfig);});}).catch(function(response){return reject(response);});});}internalApply();return true;}/**
     * Loads a locale using ajax
     * @private
     * @param {String} path Path to locale file
     * @returns {Promise}
     */},{key:"loadLocale",value:function loadLocale(path){return AjaxHelper$1.get(path);}},{key:"locales",set:function set(localeConfigs){this._locales=localeConfigs;},get:function get(){return this._locales;}/**
     * Get/set currently used locale. Set a name of a locale to have it applied, or give a locale configuration to
     * have it registered and then applied
     * @property {String|Object}
     */},{key:"locale",set:function set(locale){if(typeof locale==='string'){this.applyLocale(locale);}else{if(!locale.locale){locale={locale:locale,localeName:locale.localeName||'custom'};}this.registerLocale(locale.localeName,locale);this.applyLocale(locale.localeName);}},get:function get(){return this._locale;}}],[{key:"defaultConfig",get:function get(){return{locales:{}};}}]);return LocaleManager$1;}(Events$1(Base$2));var LocaleManagerSingelton$1=new LocaleManager$1();/**
 * @module Common/localization/Localizable
 */ /**
 * Mixin that simplifies localization of strings in a class.
 *
 * ```
 * // Get localized string
 * grid.L('sort')
 * ```
 *
 * @mixin
 */var Localizable$1=function Localizable$1(Target){return(/*#__PURE__*/function(_ref464){_inherits2(Localizable,_ref464);function Localizable(){_classCallCheck2(this,Localizable);return _possibleConstructorReturn2(this,_getPrototypeOf2(Localizable).apply(this,arguments));}_createClass2(Localizable,[{key:"construct",value:function construct(){var _get34;var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var me=this;// Base class applies configs.
for(var _len82=arguments.length,args=new Array(_len82>1?_len82-1:0),_key81=1;_key81<_len82;_key81++){args[_key81-1]=arguments[_key81];}(_get34=_get2(_getPrototypeOf2(Localizable.prototype),"construct",this)).call.apply(_get34,[this,config].concat(args));LocaleManagerSingelton$1.on('locale',me.updateLocalization,me);me.updateLocalization();}},{key:"updateLocalization",value:function updateLocalization(){var me=this;me.localizableProperties&&me.localizableProperties.forEach(function(name){// No need to translate properties which are not defined
if(me[name]===undefined)return;me.originalLocales=me.originalLocales||{};// Need to save original values since they will be overridden by localizable equivalents
me.originalLocales[name]=me.originalLocales[name]||me[name];// Doing localization from the original values
if(me.originalLocales[name]){me[name]=Localizable.L.call(me,me.originalLocales[name]);}});}/**
     * Get localized string, returns value of `text` if no localized string found
     * @param {String} text String key
     * @param {Object} [templateData] Data to supply to template if localized string is one
     * @returns {String}
     */},{key:"L",/**
     * Convenience function that can be called directly on the class that mixes Localizable in
     * @param {String} text String key
     * @param {Object} [templateData] Data to supply to template if localized string is one
     * @returns {String}
     * @category Misc
     * @example
     * button.text = grid.L('group');
     */value:function L(text,templateData){return Localizable.L(text,templateData,this.constructor);}/**
     * Get the global LocaleManager
     * @returns {Common.localization.LocaleManager}
     * @category Misc
     */},{key:"localeClass",get:function get(){// Trying to extract localeClass from a parent widget. null by default
return this._localeClass||this.parent&&this.parent.localeClass||null;},set:function set(key){this._localeClass=key;}},{key:"localeManager",get:function get(){return LocaleManagerSingelton$1;}}],[{key:"parseText",// In case it's wrapped in 'L{text}'
value:function parseText(text){var match=this.inTextLocaleRegExp.exec(text);return match?match[1]:text;}},{key:"L",value:function L(text,templateData){var current=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this.localeClass||this;if(LocaleManagerSingelton$1.locale){// traverse prototypes to find localization
while(current){var name=current.$name||current.name,localeClass=LocaleManagerSingelton$1.locale[name],localeText=localeClass&&localeClass[Localizable.parseText(text)];if(localeText){return typeof localeText==='function'&&templateData!=null?localeText(templateData):localeText;}current=Object.getPrototypeOf(current);}}return text;}},{key:"defaultConfig",get:function get(){return{localeClass:null,localizableProperties:[]};}},{key:"inTextLocaleRegExp",get:function get(){return /L\{([^}]+)\}/g;}}]);return Localizable;}(Target||Base$2));};/**
 * @module Common/helper/BrowserHelper
 */ /**
 * Static helper class that does browser/feature detection.
 * @internal
 */var BrowserHelper$1=/*#__PURE__*/function(){function BrowserHelper$1(){_classCallCheck2(this,BrowserHelper$1);}_createClass2(BrowserHelper$1,null,[{key:"cacheFlags",value:function cacheFlags(){var platform=arguments.length>0&&arguments[0]!==undefined?arguments[0]:navigator.platform;var userAgent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:navigator.userAgent;var me=this;// os
me._isLinux=Boolean(platform.match(/Linux/));me._isMac=Boolean(platform.match(/Mac/));me._isWindows=Boolean(platform.match(/Win32/));// browser
me._isIE11=Boolean(userAgent.match(/rv:11/));me._edgeVersion=me.getVersion(userAgent,/Edge\/(\d+)\./);me._isEdge=me._edgeVersion>0;// Edge user agent contain webkit too
me._isWebkit=Boolean(userAgent.match(/WebKit/))&&!me._isEdge;me._firefoxVersion=me.getVersion(userAgent,/Firefox\/(\d+)\./);me._isFirefox=me._firefoxVersion>0;me._chromeVersion=!me._isEdge?me.getVersion(userAgent,/Chrom(?:e|ium)\/(\d+)\./):0;me._isChrome=me._chromeVersion>0;me._isSafari=Boolean(userAgent.match(/Safari/))&&!me._isChrome&&!me._isEdge;me._isMobileSafari=Boolean(userAgent.match(/Mobile.*Safari/));try{document.querySelector(':scope');// Scoped queries are not supported for custom element polyfill in firefox
// https://app.assembla.com/spaces/bryntum/tickets/6781
me.supportsQueryScope=!me._isFirefox;}catch(e){me.supportsQueryScope=false;}me._supportsPassive=false;try{// If the browser asks the options object to yield its passive
// property, we know it supports the object form options object
// and passive listeners.
document.addEventListener('__notvalid__',null,{get passive(){me._supportsPassive=true;}});}catch(e){}//document.addEventListener("DOMContentLoaded", me.onDocumentReady);
}// NOTE: Not allowed with CSP, moved to Grid#render()
// /**
//  * Feature and browser detection which requires the document to be loaded.
//  * @private
//  */
// static onDocumentReady() {
//     // Firefox includes a part of the Y scroller jutting up which is not needed.
//     // Also need to "mitre" the horizontal scrollbar to leave the gap at the end.
//     if (BrowserHelper.isFirefox) {
//         CSSHelper.insertRule(`.b-virtual-scroller {height: ${DomHelper.scrollBarWidth}px;}`);
//         CSSHelper.insertRule(`.b-virtual-scrollers {padding-right: ${DomHelper.scrollBarWidth}px;}`);
//     }
// }
/**
     * Returns matched version for userAgent
     * @param String versionRe version match regular expression
     * @returns {Number} matched version
     * @readonly
     * @private
     */},{key:"getVersion",value:function getVersion(userAgent,versionRe){var match=userAgent.match(versionRe);return match?parseInt(match[1]):0;}/**
     * Tries to determine if the user is using a touch device
     * @returns {Boolean}
     * @readonly
     */},{key:"setLocalStorageItem",value:function setLocalStorageItem(key,value){this.storageAvailable&&localStorage.setItem(key,value);}},{key:"getLocalStorageItem",value:function getLocalStorageItem(key){return this.storageAvailable&&localStorage.getItem(key);}},{key:"removeLocalStorageItem",value:function removeLocalStorageItem(key){this.storageAvailable&&localStorage.removeItem(key);}},{key:"isTouchDevice",get:function get(){if('_isTouchDevice'in this)return this._isTouchDevice;return'ontouchstart'in window||// edge tends to always have this with a value 2
!this.isEdge&&navigator.maxTouchPoints>0||// but if env is actually touchable, then window has this class present
this.isEdge&&window.TouchEvent||navigator.msMaxTouchPoints>0;}// Since touch screen detection is unreliable we should allow client to configure it, or detect first touch
,set:function set(value){this._isTouchDevice=value;}/**
     * Checks if platform is mac
     * @returns {Boolean}
     * @readonly
     */},{key:"isMac",get:function get(){return this._isMac;}/**
     * Checks if platform is windows
     * @returns {Boolean}
     * @readonly
     */},{key:"isWindows",get:function get(){return this._isWindows;}/**
     * Checks if platform is linux
     * @returns {Boolean}
     * @readonly
     */},{key:"isLinux",get:function get(){return this._isLinux;}/**
     * Checks if browser is IE11
     * @returns {Boolean}
     * @readonly
     */},{key:"isIE11",get:function get(){return this._isIE11;}/**
     * Checks if browser is Edge
     * @returns {Boolean}
     * @readonly
     */},{key:"isEdge",get:function get(){return this._isEdge;}/**
     * Find the major Edge version
     * @returns {Number} Edge version or 0 for other browsers
     * @readonly
     */},{key:"edgeVersion",get:function get(){return this._edgeVersion;}/**
     * Checks if browser is Webkit
     * @returns {Boolean}
     * @readonly
     */},{key:"isWebkit",get:function get(){return this._isWebkit;}/**
     * Checks if browser is Chrome
     * @returns {Boolean}
     * @readonly
     */},{key:"isChrome",get:function get(){return this._isChrome;}/**
     * Find the major Chrome version
     * @returns {Number} Chrome version or 0 for other browsers
     * @readonly
     */},{key:"chromeVersion",get:function get(){return this._chromeVersion;}/**
     * Checks if browser is Firefox
     * @returns {Boolean}
     * @readonly
     */},{key:"isFirefox",get:function get(){return this._isFirefox;}/**
     * Find the major Firefox version.
     * @returns {Number} Firefox version or 0 for other browsers
     * @readonly
     */},{key:"firefoxVersion",get:function get(){return this._firefoxVersion;}/**
     * Checks if browser is Safari
     * @returns {Boolean}
     * @readonly
     */},{key:"isSafari",get:function get(){return this._isSafari;}/**
     * Checks if browser is mobile Safari
     * @returns {Boolean}
     * @readonly
     */},{key:"isMobileSafari",get:function get(){return this._isMobileSafari;}/**
     * Returns `true` if the browser supports passive event listeners.
     */},{key:"supportsPassive",get:function get(){return this._supportsPassive;}// https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
},{key:"storageAvailable",get:function get(){var storage,x;try{storage=localStorage;x='__storage_test__';storage.setItem(x,x);storage.removeItem(x);return true;}catch(e){return e instanceof DOMException&&(// everything except Firefox
e.code===22||// Firefox
e.code===1014||// test name field too, because code might not be present
// everything except Firefox
e.name==='QuotaExceededError'||// Firefox
e.name==='NS_ERROR_DOM_QUOTA_REACHED')&&// acknowledge QuotaExceededError only if there's something already stored
storage.length!==0;}}}]);return BrowserHelper$1;}();BrowserHelper$1.cacheFlags();BrowserHelper$1._$name='BrowserHelper';/*
Not ported:
-----------
Week of Year w 1 2 ... 52 53
wo 1st 2nd ... 52nd 53rd
ww 01 02 ... 52 53
Week Year gg 70 71 ... 29 30
gggg 1970 1971 ... 2029 2030
Week Year (ISO) GG 70 71 ... 29 30
GGGG 1970 1971 ... 2029 2030
Time Zone z or zz EST CST ... MST PST
Note: as of 1.6.0, the z/zz format tokens have been deprecated from plain moment objects. Read more about it here. However, they do work if you are using a specific time zone with the moment-timezone addon.
Z -07:00 -06:00 ... +06:00 +07:00
ZZ -0700 -0600 ... +0600 +0700
Unix Timestamp X 1360013296
Unix Millisecond Timestamp x 1360013296123
*/var enOrdinalSuffix$1=function enOrdinalSuffix$1(number){return number+({'1':'st','2':'nd','3':'rd'}[number[number.length-1]]||'th');};// Left-to-right unicode mark
// https://www.codetable.net/decimal/8206
var LTRSymbolRegexp$1=new RegExp("\u200E");// These vars are set when changing locale
var locale$4='en-US',ordinalSuffix$1=enOrdinalSuffix$1,// Used to cache used formats, to not have to parse format string each time
formatCache$1={},intlFormatterCache$1={},parserCache$1={};function useIntlFormat$1(name,options,date){var formatter=intlFormatterCache$1[name]||(intlFormatterCache$1[name]=new Intl.DateTimeFormat(locale$4,options));var result=formatter.format(date);// IE11 inserts direction control characters to the start of the string
// This breaks substring(0, 2). Skipping first character in the row for I
// https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results
if(BrowserHelper$1.isIE11){result=result.replace(LTRSymbolRegexp$1,'');}return result;}var MS_PER_DAY$1=864e5,MS_PER_WEEK$1=MS_PER_DAY$1*7,defaultFormat$1='YYYY-MM-DDTHH:mm:ss.SSSZ',formats$1={// 1, 2, ... 11, 12
'M':function M(date){return date.getMonth()+1;},//date.toLocaleDateString(locale, { month : 'numeric' }),
// 1st, 2nd, 3rd, 4th, ... 11th, 12th
'Mo':function Mo(date){return ordinalSuffix$1(formats$1['M'](date).toString());},// 01, 02, ...
'MM':function MM(date){return(date.getMonth()+1).toString().padStart(2,'0');},//date.toLocaleDateString(locale, { month : '2-digit' }),
// Jan, Feb, ...
'MMM':function MMM(date){return useIntlFormat$1('MMM',{month:'short'},date);},// January, February, ...
'MMMM':function MMMM(date){return useIntlFormat$1('MMMM',{month:'long'},date);},// 1, 2, ...
'Q':function Q(date){return Math.ceil((date.getMonth()+1)/4);},// 1st, 2nd, ...
'Qo':function Qo(date){return ordinalSuffix$1(formats$1['Q'](date).toString());},// 1, 2, ...
'D':function D(date){return date.getDate();},//date.toLocaleDateString(locale, { day : 'numeric' }),
// 1st, 2nd, ...
'Do':function Do(date){return ordinalSuffix$1(formats$1['D'](date).toString());},// 01, 02, ...
'DD':function DD(date){return date.getDate().toString().padStart(2,'0');},//date.toLocaleDateString(locale, { day : '2-digit' }),
// 1, 2, ..., 365, 365
'DDD':function DDD(date){return Math.ceil((new Date(date.getFullYear(),date.getMonth(),date.getDate(),12,0,0)-new Date(date.getFullYear(),0,0,12,0,0))/MS_PER_DAY$1);},// 1st, 2nd, ...
'DDDo':function DDDo(date){return ordinalSuffix$1(formats$1['DDD'](date).toString());},// 001, 002, ...
'DDDD':function DDDD(date){return formats$1['DDD'](date).toString().padStart(3,'0');},// 0, 1, ..., 6
'd':function d(date){return date.getDay();},// 0th, 1st, ...
'do':function _do(date){return ordinalSuffix$1(date.getDay().toString());},// Su, Mo, ...
'dd':function dd(date){return formats$1['ddd'](date).substring(0,2);},// Sun, Mon, ...
'ddd':function ddd(date){return useIntlFormat$1('ddd',{weekday:'short'},date);},// Sunday, Monday, ...
'dddd':function dddd(date){return useIntlFormat$1('dddd',{weekday:'long'},date);},'e':function e(date){return date.getDay();},'E':function E(date){return date.getDay()+1;},// ISO week, 1, 2, ...
'W':function W(date){// Adapted from https://www.epochconverter.com/weeknumbers
var target=new Date(date.valueOf());target.setDate(target.getDate()-(date.getDay()+6)%7+3);var firstThursday=target.valueOf();target.setMonth(0,1);if(target.getDay()!==4){target.setMonth(0,1+(4-target.getDay()+7)%7);}return 1+Math.ceil((firstThursday-target)/MS_PER_WEEK$1);},'Wo':function Wo(date){return ordinalSuffix$1(formats$1['W'](date).toString());},'WW':function WW(date){return formats$1['W'](date).toString().padStart(2,'0');},// 1979, 2018
'Y':function Y(date){return date.getFullYear();},//date.toLocaleDateString(locale, { year : 'numeric' }),
// 79, 18
'YY':function YY(date){return date.getFullYear()%100;},//date.toLocaleDateString(locale, { year : '2-digit' }),
// 1979, 2018
'YYYY':function YYYY(date){return date.getFullYear();},//date.toLocaleDateString(locale, { year : 'numeric' }),
// AM, PM
'A':function A(date){return date.getHours()<12?'AM':'PM';},'a':function a(date){return date.getHours()<12?'am':'pm';},// 0, 1, ... 23
'H':function H(date){return date.getHours();},// 00, 01, ...
'HH':function HH(date){return date.getHours().toString().padStart(2,'0');},// 1, 2, ... 12
'h':function h(date){return date.getHours()%12||12;},// 01, 02, ...
'hh':function hh(date){return formats$1['h'](date).toString().padStart(2,'0');},// 1, 2, ... 24
'k':function k(date){return date.getHours()+1;},// 01, 02, ...
'kk':function kk(date){return formats$1['k'](date).toString().padStart(2,'0');},// Locale specific (0 -> 24 or 1 AM -> 12 PM)
'K':function K(date){return useIntlFormat$1('K',{hour:'numeric'},date);},// Locale specific (00 -> 24 or 1 AM -> 12 PM)
'KK':function KK(date){return useIntlFormat$1('KK',{hour:'2-digit'},date);},// 0, 1, ... 59
'm':function m(date){return date.getMinutes();},//date.toLocaleTimeString(locale, { minute : 'numeric' }),
// 00, 01, ...
'mm':function mm(date){return formats$1['m'](date).toString().padStart(2,'0');},// 0, 1, ... 59
's':function s(date){return date.getSeconds();},//date.toLocaleTimeString(locale, { second : 'numeric' }),
// 00, 01, ...
'ss':function ss(date){return formats$1['s'](date).toString().padStart(2,'0');},// 0, 1, ... 9
'S':function S(date){return date.getMilliseconds().toString().substr(0,1);},// 00, 01, ... 99
'SS':function SS(date){return date.getMilliseconds().toString().substr(0,2).padEnd(2,'0');},// 000, 001, ... 999
'SSS':function SSS(date){return date.getMilliseconds().toString().substr(0,3).padEnd(3,'0');},'z':function z(date){return useIntlFormat$1('z',{timeZoneName:'short'},date);},'zz':function zz(date){return useIntlFormat$1('zz',{timeZoneName:'long'},date);},'LT':function LT(date){return useIntlFormat$1('LT',{hour:'2-digit',minute:'2-digit'},date);},'LTS':function LTS(date){return useIntlFormat$1('LTS',{hour:'2-digit',minute:'2-digit',second:'2-digit'},date);},'L':function L(date){return useIntlFormat$1('L',{year:'numeric',month:'2-digit',day:'2-digit'},date);},'l':function l(date){return useIntlFormat$1('l',{year:'numeric',month:'numeric',day:'numeric'},date);},'LL':function LL(date){return useIntlFormat$1('LL',{year:'numeric',month:'long',day:'numeric'},date);},'ll':function ll(date){return useIntlFormat$1('ll',{year:'numeric',month:'short',day:'numeric'},date);},'LLL':function LLL(date){return useIntlFormat$1('LLL',{year:'numeric',month:'long',day:'numeric',hour:'numeric',minute:'2-digit'},date);},'lll':function lll(date){return useIntlFormat$1('lll',{year:'numeric',month:'short',day:'numeric',hour:'numeric',minute:'2-digit'},date);},'LLLL':function LLLL(date){return useIntlFormat$1('LLLL',{year:'numeric',month:'long',day:'numeric',hour:'numeric',minute:'2-digit',weekday:'long'},date);},'llll':function llll(date){return useIntlFormat$1('llll',{year:'numeric',month:'short',day:'numeric',hour:'numeric',minute:'2-digit',weekday:'short'},date);}},// Want longest keys first, to not stop match at L of LTS etc.
formatKeys$1=Object.keys(formats$1).sort(function(a,b){return b.length-a.length;}),formatRegexp$1="^(?:".concat(formatKeys$1.join('|'),")"),// return empty object, meaning value cannot be processed to a valuable date part
emptyFn$1=function emptyFn$1(){return{};},parsers$1={'YYYY':function YYYY(str){return{year:parseInt(str)};},'Y':function Y(str){return{year:parseInt(str)};},'YY':function YY(str){var year=parseInt(str);return{year:year+(year>1968?1900:2000)};},'MM':function MM(str){return{month:parseInt(str)-1};},'Mo':function Mo(str){return{month:parseInt(str)-1};},'DD':function DD(str){return{date:parseInt(str)};},'M':function M(str){return{month:parseInt(str)-1};},'D':function D(str){return{date:parseInt(str)};},'Do':function Do(str){return{date:parseInt(str)};},'DDD':emptyFn$1,'MMM':emptyFn$1,'MMMM':emptyFn$1,'DDDo':emptyFn$1,'DDDD':emptyFn$1,'d':emptyFn$1,'do':emptyFn$1,'dd':emptyFn$1,'ddd':emptyFn$1,'dddd':emptyFn$1,'Q':emptyFn$1,'Qo':emptyFn$1,'W':emptyFn$1,'Wo':emptyFn$1,'WW':emptyFn$1,'e':emptyFn$1,'E':emptyFn$1,'HH':function HH(str){return{hours:parseInt(str)};},'mm':function mm(str){return{minutes:parseInt(str)};},'H':function H(str){return{hours:parseInt(str)};},'m':function m(str){return{minutes:parseInt(str)};},'ss':function ss(str){return{seconds:parseInt(str)};},'s':function s(str){return{seconds:parseInt(str)};},'S':function S(str){return{milliseconds:parseInt(str)};},'SS':function SS(str){return{milliseconds:parseInt(str)};},'SSS':function SSS(str){return{milliseconds:parseInt(str)};},'A':function A(str){return{amPm:str.toLowerCase()};},'a':function a(str){return{amPm:str.toLowerCase()};},'L':'MM/DD/YYYY','LT':'HH:mm A',// Can either be Z (=UTC, 0) or +-HH:MM
'Z':function Z(str){if(!str){return{};}var timeZone=0;// If string being parsed is more "detailed" than the format specified we can have more chars left,
// thus check the last (for example HH:mmZ with input HH:mm:ssZ -> ssZ)
if(!str.endsWith('Z')){var matches=timeZoneRegEx$1.exec(str);// If timezone regexp matches, sting has time zone offset like '+02:00'
if(matches){var sign=matches[1]==='+'?1:-1,hours=parseInt(matches[2])||0,minutes=parseInt(matches[3])||0;timeZone=sign*(hours*60+minutes);}// otherwise we just return current time zone, because there's a Z key in the input
else{timeZone=-1*new Date().getTimezoneOffset();}}return{timeZone:timeZone};}},parserKeys$1=Object.keys(parsers$1).sort(function(a,b){return b.length-a.length;}),parserRegexp$1=new RegExp("(".concat(parserKeys$1.join('|'),")")),// Following regexp includes all formats that should be handled by Date class
localeStrRegExp$1=new RegExp('(l|LL|ll|LLL|lll|LLLL|llll)'),//    ISODateRegExp             = new RegExp('YYYY-MM-DD[T ]HH:mm:ss(.s+)?Z'),
// Some validConversions are negative to show that it's not an exact conversion, just an estimate.
validConversions$1={// The units below assume:
// 30 days in a month, 91 days for a quarter and 365 for a year
// 52 weeks per year, 4 per month, 13 per quarter
'year':{year:1,quarter:4,month:12,week:52,day:365,hour:24*365,minute:1440*365,second:86400*365,millisecond:86400000*365},'quarter':{year:1/4,quarter:1,month:3,week:4,day:91,hour:24*91,minute:1440*91,second:86400*91,millisecond:86400000*91},'month':{year:1/12,quarter:1/3,month:1,week:4,day:-30,hour:-24*30,minute:-1440*30,second:-86400*30,millisecond:-86400000*30},'week':{year:-1/52,quarter:-1/13,month:-1/4,day:7,hour:168,minute:10080,second:604800,millisecond:604800000},'day':{year:-1/365,quarter:-1/91,month:-1/30,week:1/7,hour:24,minute:1440,second:86400,millisecond:86400000},'hour':{year:-1/(365*24),quarter:-1/(91*24),month:-1/(30*24),week:1/168,day:1/24,minute:60,second:3600,millisecond:3600000},'minute':{year:-1/(365*1440),quarter:-1/(91*1440),month:-1/(30*1440),week:1/10080,day:1/1440,hour:1/60,second:60,millisecond:60000},'second':{year:-1/(365*86400),quarter:-1/(91*86400),month:-1/(30*86400),week:1/604800,day:1/86400,hour:1/3600,minute:1/60,millisecond:1000},'millisecond':{year:-1/(365*86400000),quarter:-1/(91*86400000),month:-1/(30*86400000),week:1/604800000,day:1/86400000,hour:1/3600000,minute:1/60000,second:1/1000}},normalizedUnits$1={'ms':'millisecond','milliseconds':'millisecond','s':'second','seconds':'second','m':'minute','minutes':'minute','h':'hour','hours':'hour','d':'day','days':'day','w':'week','weeks':'week','M':'month','months':'month','q':'quarter','quarters':'quarter','y':'year','years':'year'},withDecimalsDurationRegex$1=/^\s*([-+]?\d+(?:[.,]\d*)?|[-+]?(?:[.,]\d+))\s*([^\s]+)?/i,noDecimalsDurationRegex$1=/^\s*([-+]?\d+)(?![.,])\s*([^\s]+)?/i,canonicalUnitNames$1=['millisecond','second','minute','hour','day','week','month','quarter','year'],deltaUnits$1=['year','month','week','day','hour','minute','second','millisecond'],// Used when creating a date from an object, to fill in any blanks
dateProperties$1=['milliseconds','seconds','minutes','hours','date','month','year'],// TODO: Should we provide special number parsing?
parseNumber$1=function parseNumber$1(n){var result=parseFloat(n);return isNaN(result)?null:result;},timeZoneRegEx$1=/([+-])(\d\d):*(\d\d)*$/,unitMagnitudes$1={millisecond:0,second:1,minute:2,hour:3,day:4,week:5,month:6,quarter:7,year:8};/**
 * @module Common/helper/DateHelper
 */ /**
 * Helps with date manipulation, comparison, parsing, formatting etc.
 *
 * ## Parsing strings
 * Use DateHelper.parse() to parse strings into dates. It accepts a date string and a format specifier.
 * The format specifier is string built up using the following tokens:
 *
 * | Unit        | Token | Description                |
 * |-------------|-------|----------------------------|
 * | Year        | YYYY  | 2018                       |
 * |             | YY    | < 68 -> 2000, > 68 -> 1900 |
 * | Month       | MM    | 01 - 12                    |
 * | Date        | DD    | 01 - 31                    |
 * | Hour        | HH    | 00 - 23 or 1 - 12          |
 * | Minute      | mm    | 00 - 59                    |
 * | Second      | ss    | 00 - 59                    |
 * | Millisecond | S     | 0 - 9                      |
 * |             | SS    | 00 - 99                    |
 * |             | SSS   | 000 - 999                  |
 * | AM/PM       | A     | AM or PM                   |
 * |             | a     | am or pm                   |
 * | TimeZone    | Z     | Z for UTC or +-HH:mm       |
 * | Predefined  | L     | Long date, MM/DD/YYYY      |
 * |             | LT    | Long time, HH:mm A         |
 *
 * For example:
 * ```
 * DateHelper.parse('2018-11-06', 'YYYY-MM-DD');
 * DateHelper.parse('13:14', 'HH:mm');
 * DateHelper.parse('6/11/18', 'DD/MM/YY');
 * ```
 *
 * ## Formatting dates
 * Use DateHelper.format() to create a string from a date using a format specifier. The format specifier is similar to
 * that used when parsing strings. It can use the following tokens (input used for output below is
 * `new Date(2018,8,9,18,7,8,145)`):
 *
 * | Unit                  | Token | Description & output                  |
 * |-----------------------|-------|---------------------------------------|
 * | Year                  | YYYY  | 2018                                  |
 * |                       | YY    | 18                                    |
 * |                       | Y     | 2018                                  |
 * | Quarter               | Q     | 3                                     |
 * |                       | Qo    | 3rd                                   |
 * | Month                 | MMMM  | September                             |
 * |                       | MMM   | Sep                                   |
 * |                       | MM    | 09                                    |
 * |                       | Mo    | 9th                                   |
 * |                       | M     | 9                                     |
 * | Week (iso)            | WW    | 36 (2 digit)                          |
 * |                       | Wo    | 36th                                  |
 * |                       | W     | 36                                    |
 * | Date                  | DDDD  | Day of year, 3 digits                 |
 * |                       | DDDo  | Day of year, ordinal                  |
 * |                       | DDD   | Day of year                           |
 * |                       | DD    | 09                                    |
 * |                       | Do    | 9th                                   |
 * |                       | D     | 9                                     |
 * | Weekday               | dddd  | Sunday                                |
 * |                       | ddd   | Sun                                   |
 * |                       | dd    | Su                                    |
 * |                       | do    | 0th                                   |
 * |                       | d     | 0                                     |
 * | Hour                  | HH    | 18 (00 - 23)                          |
 * |                       | H     | 18 (0 - 23)                           |
 * |                       | hh    | 06 (00 - 12)                          |
 * |                       | h     | 6 (0 - 12)                            |
 * |                       | KK    | 19 (01 - 24)                          |
 * |                       | K     | 19 (1 - 24)                           |
 * |                       | kk    | 06 or 18, locale determines           |
 * |                       | k     | 6 or 18, locale determines            |
 * | Minute                | mm    | 07                                    |
 * |                       | m     | 7                                     |
 * | Second                | ss    | 08                                    |
 * |                       | s     | 8                                     |
 * | Millisecond           | S     | 1                                     |
 * |                       | SS    | 14                                    |
 * |                       | SSS   | 145                                   |
 * | AM/PM                 | A     | AM or PM                              |
 * |                       | a     | am or pm                              |
 * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |
 * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |
 * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |
 * |                       | l     | Y: n, M : n, D : n                    |
 * |                       | LL    | Y: n, M : long (l), D : n             |
 * |                       | ll    | Y: n, M : short (s), D : n            |
 * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |
 * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |
 * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |
 * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |
 *
 * For example:
 *
 * ```
 * DateHelper.format(new Date(2018,10,6), 'YYYY-MM-DD'); // 2018-11-06
 * DateHelper.format(new Date(2018,10,6), 'M/D/YY'); // 11/6/18
 * ```
 *
 * Arbitrary text can be embedded in the format string by wrapping it with {}:
 *
 * ```
 * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!
 * ```
 *
 * ## Unit names
 * Many DateHelper functions (for example add, as, set) accepts a unit among their params. The following units are
 * available:
 *
 * | Unit        | Aliases                       |
 * |-------------|-------------------------------|
 * | millisecond | millisecond, milliseconds, ms |
 * | second      | second, seconds, s            |
 * | minute      | minute, minutes, m            |
 * | hour        | hour, hours, h                |
 * | day         | day, days, d                  |
 * | week        | week, weeks, w                |
 * | month       | month, months, M              |
 * | quarter     | quarter, quarters, q          |
 * | year        | year, years, y                |
 *
 * For example:
 * ```
 * DateHelper.add(date, 2, 'days');
 * DateHelper.as('hour', 7200, 'seconds');
 * ```
 */var DateHelper$1=/*#__PURE__*/function(_Localizable$){_inherits2(DateHelper$1,_Localizable$);function DateHelper$1(){_classCallCheck2(this,DateHelper$1);return _possibleConstructorReturn2(this,_getPrototypeOf2(DateHelper$1).apply(this,arguments));}_createClass2(DateHelper$1,[{key:"formatContainsHourInfo",value:function formatContainsHourInfo(format){return format.match(/[Hhk]/);}/**
     * Returns true for 24 hour format.
     * @param {String} format Date format
     * @returns {Boolean}
     * @category Parse & format
     */}],[{key:"buildParser",//region Parse & format
value:function buildParser(format){var _this161=this;// Split input format by regexp, which includes predefined patterns. Normally format would have some
// splitters, like 'YYYY-MM-DD' or 'D/M YYYY' so output will contain matched patterns as well as splitters
// which would serve as anchors. E.g. provided format is 'D/M!YYYY' and input is `11/6!2019` algorithm would work like:
// 1. split format by regexp                // ['', 'D', '/', 'M', '!', 'YYYY', '']
// 2. find splitters                        // ['/', '!']
// 3. split input by seps, step by step     // ['11', ['6', ['2019']]]
//
// Inputs like 'YYYYY' (YYYY + Y) are kinda invalid, need to figure smth when
// we encounter them.
var parts=format.split(parserRegexp$1),parser=[];// if length of the parts array is 1 - there are no regexps in the input string. thus - no parsers
// do same if there are patterns matching locale strings (l, ll, LLLL etc.)
// returning empty array to use new Date() as parser
if(parts.length===1||localeStrRegExp$1.test(format)){return[];}else{parts.reduce(function(prev,curr,index,array){// ignore first and last empty string
if(index!==0||curr!==''){// if current element matches parser regexp store it as a parser
if(parserRegexp$1.test(curr)){var localeParsers=_this161.L('parsers')!=='parsers'&&_this161.L('parsers')||{},fn=localeParsers[curr]||parsers$1[curr];// Z should be last element in the string that matches regexp. Last array element is always either
// an empty string (if format ends with Z) or splitter (everything that doesn't match regexp after Z)
// If there is a pattern after Z, then Z index will be lower than length - 2
if(curr==='Z'&&index<array.length-2){throw new Error("Invalid format ".concat(format," TimeZone (Z) must be last token"));}// If fn is a string, we found an alias (L, LLL, l etc.).
// Need to build parsers from mapped format and merge with existing
if(typeof fn==='string'){// we are going to merge nested parsers with current, some cleanup required:
// 1. last element is no longer last
// 2. need to pass last parser to the next step
var nestedParsers=DateHelper$1.buildParser(fn),lastItem=nestedParsers.pop();delete lastItem.last;// elevate nested parsers
parser.push.apply(parser,_toConsumableArray(nestedParsers));prev=lastItem;}else{prev.pattern=curr;prev.fn=parsers$1[curr];}}// if it doesn't match - we've found a splitter
else{prev.splitter=curr;parser.push(prev);prev={};}}else if(prev.hasOwnProperty('pattern')){parser.push(prev);}return prev;},{});}parser[parser.length-1].last=true;return parser;}/**
     * Returns a date created from the supplied string using the specified format. Will try to create even if format
     * is left out, by first using the default format (YYYY-MM-DDTHH:mm:ssZ) and then using `new Date(dateString)`.
     * Supported tokens:
     *
     * | Unit        | Token | Description                |
     * |-------------|-------|----------------------------|
     * | Year        | YYYY  | 2018                       |
     * |             | YY    | < 68 -> 2000, > 68 -> 1900 |
     * | Month       | MM    | 01 - 12                    |
     * | Date        | DD    | 01 - 31                    |
     * | Hour        | HH    | 00 - 23 or 1 - 12          |
     * | Minute      | mm    | 00 - 59                    |
     * | Second      | ss    | 00 - 59                    |
     * | Millisecond | S     | 0 - 9                      |
     * |             | SS    | 00 - 99                    |
     * |             | SSS   | 000 - 999                  |
     * | AM/PM       | A     | AM or PM                   |
     * |             | a     | am or pm                   |
     * | TimeZone    | Z     | Z for UTC or +-HH:mm       |
     * | Predefined  | L     | Long date, MM/DD/YYYY      |
     * |             | LT    | Long time, HH:mm A         |
     *
     * Predefined formats and functions used to parse tokens can be localized, see for example the swedish locale SvSE.js
     *
     * @param {String} dateString Date string
     * @param {String} format Date format
     * @returns {Date}
     * @category Parse & format
     */},{key:"parse",value:function parse(dateString){var format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultFormat$1;if(!dateString){return null;}if(dateString instanceof Date){return dateString;}// // For ISO 8601 native is faster, but not very forgiving
// if (format === defaultFormat) {
//     const dt = new Date(dateString);
//     if (!isNaN(dt)) {
//         return dt;
//     }
// }
var config={year:0,month:0,date:0,hours:0,minutes:0,seconds:0,milliseconds:0},parser=parserCache$1[format],result;if(!parser){parser=parserCache$1[format]=DateHelper$1.buildParser(format);}// Each parser knows its pattern and splitter. It looks for splitter in the
// input string, takes first substring and tries to process it. Remaining string
// is passed to the next parser.
parser.reduce(function(dateString,parser){if(parser.last){Object.assign(config,parser.fn(dateString));}else{var splitAt;// ISO 8601 says that T symbol can be replaced with a space
if(parser.splitter==='T'&&dateString.indexOf('T')===-1){splitAt=dateString.indexOf(' ');}else{splitAt=dateString.indexOf(parser.splitter);}var part,rest;// If splitter is not found in the current string we may be dealing with
// 1. partial input - in that case we just feed all string to current parser and move on
// 2. time zone (ssZ - splitter is empty string), see comment below
if(splitAt===-1||parser.splitter===''){// NOTE: parantheses are required here as + and - signs hold valuable information
// with parantheses we get array like ['00','+','01:00'], omitting them we won't get
// regexp match in result, loosing information
var chunks=dateString.split(/([Z\-+])/);// If splitter is not found in the string, we may be dealing with string that contains info about TZ.
// For instance, if format contains Z as last arg which is not separated (normally it is not indeed),
// like `YYYY-MM-DD HH:mm:ssZ`, then second to last parser will have string that it cannot just parse, like
// '2010-01-01 10:00:00'        -> '00'
// '2010-01-01 10:00:00Z'       -> '00Z'
// '2010-01-01 10:00:00-01'     -> '00-01'
// '2010-01-01 10:00:00+01:30'  -> '00+01:30'
// this cannot be processed by date parsers, so we need to process that additionally. So we
// split string by symbols that can be found around timezone info: Z,-,+
if(chunks.length===1){part=dateString;rest='';}else{part=chunks[0];rest="".concat(chunks[1]).concat(chunks[2]);}}else{part=dateString.substring(0,splitAt)||dateString;rest=dateString.substring(splitAt+parser.splitter.length);}parser.fn&&Object.assign(config,parser.fn(part));return rest;}},dateString);var date=this.create(config);if(date){result=date;}else{// Last resort, try if native passing can do it
result=new Date(dateString);}return result;}/**
     * Creates a date from a date definition object. The object can have the following properties:
     * - year
     * - month
     * - date (day in month)
     * - hours
     * - minutes
     * - seconds
     * - milliseconds
     * - amPm : 'am' or 'pm', implies 12 hour clock
     * - timeZone : offset from UTC in minutes
     * @param {Object} definition
     * @returns {Date}
     * @category Parse & format
     */},{key:"create",value:function create(definition){// Shallow clone to not alter input
var def=Object.assign({},definition);// Not much validation yet, only considered invalid if all properties are 0
var invalid=true,useUTC=false;// Fill in blanks and replace any NaN with 0
dateProperties$1.forEach(function(property){if(!(property in def)||isNaN(def[property])){def[property]=0;}if(def[property]>0)invalid=false;});if(def.amPm==='pm'){def.hours=def.hours%12+12;}if('timeZone'in def){useUTC=true;def.minutes-=def.timeZone;}if(invalid){return null;}var args=[def.year,def.month,def.date,def.hours,def.minutes,def.seconds,def.milliseconds];return useUTC?new Date(Date.UTC.apply(Date,args)):_construct(Date,args);}/**
     * Converts a date to string with the specified format. Formats heavily inspired by https://momentjs.com.
     * Available formats (input used for output below is `new Date(2018,8,9,18,7,8,145)`):
     *
     * | Unit                  | Token | Description & output                  |
     * |-----------------------|-------|---------------------------------------|
     * | Year                  | YYYY  | 2018                                  |
     * |                       | YY    | 18                                    |
     * |                       | Y     | 2018                                  |
     * | Quarter               | Q     | 3                                     |
     * |                       | Qo    | 3rd                                   |
     * | Month                 | MMMM  | September                             |
     * |                       | MMM   | Sep                                   |
     * |                       | MM    | 09                                    |
     * |                       | Mo    | 9th                                   |
     * |                       | M     | 9                                     |
     * | Week (iso)            | WW    | 36 (2 digit)                          |
     * |                       | Wo    | 36th                                  |
     * |                       | W     | 36                                    |
     * | Date                  | DDDD  | Day of year, 3 digits                 |
     * |                       | DDDo  | Day of year, ordinal                  |
     * |                       | DDD   | Day of year                           |
     * |                       | DD    | 09                                    |
     * |                       | Do    | 9th                                   |
     * |                       | D     | 9                                     |
     * | Weekday               | dddd  | Sunday                                |
     * |                       | ddd   | Sun                                   |
     * |                       | dd    | Su                                    |
     * |                       | do    | 0th                                   |
     * |                       | d     | 0                                     |
     * | Hour                  | HH    | 18 (00 - 23)                          |
     * |                       | H     | 18 (0 - 23)                           |
     * |                       | hh    | 06 (00 - 12)                          |
     * |                       | h     | 6 (0 - 12)                            |
     * |                       | KK    | 19 (01 - 24)                          |
     * |                       | K     | 19 (1 - 24)                           |
     * |                       | kk    | 06 or 18, locale determines           |
     * |                       | k     | 6 or 18, locale determines            |
     * | Minute                | mm    | 07                                    |
     * |                       | m     | 7                                     |
     * | Second                | ss    | 08                                    |
     * |                       | s     | 8                                     |
     * | Millisecond           | S     | 1                                     |
     * |                       | SS    | 14                                    |
     * |                       | SSS   | 145                                   |
     * | AM/PM                 | A     | AM or PM                              |
     * |                       | a     | am or pm                              |
     * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |
     * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |
     * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |
     * |                       | l     | Y: n, M : n, D : n                    |
     * |                       | LL    | Y: n, M : long (l), D : n             |
     * |                       | ll    | Y: n, M : short (s), D : n            |
     * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |
     * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |
     * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |
     * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |
     *
     * Some examples:
     *
     * ```
     * DateHelper.format(new Date(2019, 7, 16), 'dddd') -> Friday
     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'HH:mm') --> 14:27
     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'L HH') --> 2019-07-16 14
     * ```
     *
     * Arbitrary text can be embedded in the format string by wrapping it with {}:
     *
     * ```
     * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!
     * ```
     *
     * @param {Date} date Date
     * @param {String} format Desired format
     * @returns {String} Formatted string
     * @category Parse & format
     */},{key:"format",value:function format(date){var _format2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultFormat$1;if(!date){return null;}var formatter=formatCache$1[_format2],output='';if(!formatter){formatter=formatCache$1[_format2]=[];// Build formatter array with the steps needed to format the date
for(var _i45=0;_i45<_format2.length;_i45++){// Matches a predefined format?
var formatMatch=_format2.substr(_i45).match(formatRegexp$1),predefined=formatMatch&&formatMatch[0];if(predefined){var localeFormats=this.L('formats')!=='formats'&&this.L('formats')||{},fn=localeFormats[predefined]||formats$1[predefined];formatter.push(fn);_i45+=predefined.length-1;}// Start of text block? Append it
else if(_format2[_i45]==='{'){// Find closing brace
var index=_format2.indexOf('}',_i45+1);// No closing brace, grab rest of string
if(index===-1){formatter.push(_format2.substr(_i45+1));_i45=_format2.length;}// Closing brace found
else{formatter.push(_format2.substring(_i45+1,index));// Carry on after closing brace
_i45=index;}}// Otherwise append to output (for example - / : etc)
else{formatter.push(_format2[_i45]);}}}formatter.forEach(function(step){if(typeof step==='string'){output+=step;}else{output+=step(date);}});// MS inserts a Left-to-right control char between localized date parts, remove it to have the expected string
// output. Otherwise comparision with typed strings will fail
if(BrowserHelper$1.isEdge||BrowserHelper$1.isIE11){output=output.replace(/\u200E/g,'');}return output;}/**
     * Converts the specified amount of desired unit into milliseconds. Can be called by only specifying a unit as the
     * first argument, it then uses amount = 1. For example: asMilliseconds('hour') == asMilliseconds(1, 'hour')
     * @param {Number/String} amount Amount, what of is decided by specifying unit (also takes a unit which implies an amount of 1)
     * @param {String} unit Time unit (s, hour, months etc.)
     * @returns {Number}
     * @category Parse & format
     */},{key:"asMilliseconds",value:function asMilliseconds(amount){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(typeof amount==='string'){unit=amount;amount=1;}return this.as('millisecond',amount,unit);}/**
     * Converts a millisecond time delta to a human readable form. For example `1000 * 60 * 60 * 50`
     * milliseconds would be rendered as "2 days, 2 hours"
     * @param {Number} delta The millisecond delta value.
     * @param {Boolean} [abbrev] Pass `true` to use abbreviated unit names, eg "2d, 2h" for the above example.
     */},{key:"formatDelta",value:function formatDelta(delta){var abbrev=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var result=[],getUnit=abbrev?this.getShortNameOfUnit:this.getLocalizedNameOfUnit,sep=abbrev?'':' ';// Loop downwards through the magnitude of units from year -> ms
for(var _i46=0,_deltaUnits$=deltaUnits$1;_i46<_deltaUnits$.length;_i46++){var unitName=_deltaUnits$[_i46];var _d3=Math.floor(this.as(unitName,delta));// If there's a non-zero integer quantity of this unit, add it to result
// and subtract from the delta, then go round to next unit down.
if(_d3){result.push("".concat(_d3).concat(sep).concat(getUnit.call(this,unitName,_d3>1)));delta-=this.as('ms',_d3,unitName);}if(!delta){break;}}return result.join(', ');}/**
     * Converts the specified amount of one unit (fromUnit) into an amount of another unit (toUnit)
     * @param toUnit
     * @param amount
     * @param fromUnit
     * @returns {Number}
     * @category Parse & format
     */},{key:"as",value:function as(toUnit,amount){var fromUnit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';if(toUnit===fromUnit)return amount;toUnit=this.normalizeUnit(toUnit);fromUnit=this.normalizeUnit(fromUnit);// validConversions[][] can be negative to signal that conversion is not exact, ignore sign here
if(unitMagnitudes$1[fromUnit]>unitMagnitudes$1[toUnit]){return amount*Math.abs(validConversions$1[fromUnit][toUnit]);}else{return amount/Math.abs(validConversions$1[toUnit][fromUnit]);}}},{key:"is24HourFormat",value:function is24HourFormat(format){return this.format(new Date(1970,0,0,13,0,0),format).includes('13');}//endregion
//region Manipulate
/**
     * Add days, hours etc. to a date. Always clones the date, original will be left unaffected.
     * @param {Date} date Original date
     * @param {Number} amount Amount of days, hours etc
     * @param {String} unit Unit for amount
     * @returns {Date} New calculated date
     * @category Manipulate
     */},{key:"add",value:function add(date,amount){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';var me=this;var d;if(typeof date==='string'){d=me.parse(date);}else{d=new Date(date.getTime());}if(!unit||amount===0)return d;unit=DateHelper$1.normalizeUnit(unit);switch(unit){case'millisecond':d=new Date(d.getTime()+amount);break;case'second':d=new Date(d.getTime()+amount*1000);break;case'minute':d=new Date(d.getTime()+amount*60000);break;case'hour':d=new Date(d.getTime()+amount*3600000);break;case'day':// Integer value added, do calendar calculation to correctly handle DST etc.
if(amount%1===0){d.setDate(d.getDate()+amount);}// No browsers support fractional values for dates any longer, do time based calculation
else{d=new Date(d.getTime()+amount*86400000);}if(d.getHours()===23&&d.getHours()===0){d=me.add(d,1,'hour');}break;case'week':d.setDate(d.getDate()+amount*7);break;case'month':var day=d.getDate();if(day>28){day=Math.min(day,me.getLastDateOfMonth(me.add(me.getFirstDateOfMonth(d),amount,'month')).getDate());}d.setDate(day);d.setMonth(d.getMonth()+amount);break;case'quarter':d=me.add(d,amount*3,'month');break;case'year':d.setFullYear(d.getFullYear()+amount);break;}return d;}/**
     * Calculates the difference between two dates, in the specified unit.
     * @param {Date} start First date
     * @param {Date} end Second date
     * @param {String} unit Unit to calculate difference in
     * @param {Boolean} fractional Specify false to round result
     * @returns {Number} Difference in the specified unit
     * @category Manipulate
     */},{key:"diff",value:function diff(start,end){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'ms';var fractional=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;unit=DateHelper$1.normalizeUnit(unit);if(!start||!end)return 0;var amount;switch(unit){case'year':amount=this.diff(start,end,'month')/12;break;case'quarter':amount=this.diff(start,end,'month')/3;break;case'month':amount=(end.getFullYear()-start.getFullYear())*12+(end.getMonth()-start.getMonth());break;case'week':amount=this.diff(start,end,'day')/7;break;case'day':var dstDiff=start.getTimezoneOffset()-end.getTimezoneOffset();amount=(end-start+dstDiff*60*1000)/86400000;break;case'hour':amount=(end-start)/3600000;break;case'minute':amount=(end-start)/60000;break;case'second':amount=(end-start)/1000;break;case'millisecond':amount=end-start;break;}return fractional?amount:Math.round(amount);}/**
     * Sets the date to the start of the specified unit, by default returning a clone of the date instead of changing it
     * inplace.
     * @param {Date} date Original date
     * @param {String} unit Start of this unit, 'day', 'month' etc.
     * @param {Boolean} clone Manipulate a copy of the date
     * @returns {Date} Manipulated date
     * @category Manipulate
     */},{key:"startOf",value:function startOf(date){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'day';var clone=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;if(!date){return null;}unit=this.normalizeUnit(unit);if(clone)date=this.clone(date);var toSet={},index=canonicalUnitNames$1.indexOf(unit);for(var _i47=0;_i47<index;_i47++){var currentUnit=canonicalUnitNames$1[_i47];// Week and quarter are not part of the date
if(currentUnit!=='quarter'&&currentUnit!=='week'){toSet[currentUnit]=currentUnit==='day'?1:0;// day is 1 based
}}// Special handling of quarter and week
if(unit==='quarter'){toSet.month=(this.get(date,'quarter')-1)*3;}else if(unit==='week'){var delta=date.getDay()-this.weekStartDay;toSet.day=date.getDate()-delta;}return this.set(date,toSet);}/**
     * Creates a clone of the specified date
     * @param {Date} date Original date
     * @returns {Date} Cloned date
     * @category Manipulate
     */},{key:"clone",value:function clone(date){return new Date(date.getTime());}/**
     * Removes time from a date (same as calling #startOf(date, 'day'))
     * @param {Date} date Date to remove time from
     * @param {Boolean} clone Manipulate a copy of the date
     * @returns {Date} Manipulated date
     * @category Manipulate
     */},{key:"clearTime",value:function clearTime(date){var clone=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return DateHelper$1.startOf(date,'day',clone);}/**
     * Sets a part of a date (in place)
     * @param {Date} date Date to manipulate
     * @param {String|Object} unit Part of date to set, for example 'minute'. Or an object like { second: 1, minute: 1 }
     * @param {Number} amount Value to set
     * @returns {Date} Modified date
     * @category Manipulate
     */},{key:"set",value:function set(date,unit,amount){var _this162=this;if(!unit){return date;}if(typeof unit==='string'){switch(this.normalizeUnit(unit)){case'millisecond':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getMilliseconds()>0){date.setMilliseconds(amount);}break;case'second':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getSeconds()>0){date.setSeconds(amount);}break;case'minute':// Setting value to 0 when it is 0 at DST crossing messes it up
if(amount!==0||date.getMinutes()>0){date.setMinutes(amount);}break;case'hour':date.setHours(amount);break;case'day':case'date':date.setDate(amount);break;case'week':throw new Error('week not implemented');case'month':date.setMonth(amount);break;case'quarter':// Setting quarter = first day of first month of that quarter
date.setDate(1);date.setMonth((amount-1)*3);break;case'year':date.setFullYear(amount);break;}}else{Object.entries(unit)// Make sure smallest unit goes first, to not change month before changing day
.sort(function(a,b){return canonicalUnitNames$1.indexOf(a[0])-canonicalUnitNames$1.indexOf(b[0]);}).forEach(function(_ref465){var _ref466=_slicedToArray(_ref465,2),unit=_ref466[0],amount=_ref466[1];_this162.set(date,unit,amount);});}return date;}/**
     * Constrains the date within a min and a max date
     * @param {Date} date The date to constrain
     * @param {Date} min Min date
     * @param {Date} max Max date
     * @return {Date} The constrained date
     * @category Manipulate
     */},{key:"constrain",value:function constrain(date,min,max){return this.min(this.max(date,min),max);}/**
     * Returns time only (same as calling new Date(1970, 0, 1, hours, minutes, seconds))
     * @param {Number} hours Hours value
     * @param {Number} minutes Minutes value
     * @param {Number} seconds Seconds value
     * @returns {Date} Date value for input hours, minutes, seconds parameters
     * @category Manipulate
     */},{key:"getTime",value:function getTime(hours){var minutes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var seconds=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;return new Date(1970,0,1,hours,minutes,seconds);}//endregion
//region Comparison
},{key:"isDST",value:function isDST(date){// from https://stackoverflow.com/questions/11887934/how-to-check-if-the-dst-daylight-saving-time-is-in-effect-and-if-it-is-whats
var jan=new Date(date.getFullYear(),0,1),jul=new Date(date.getFullYear(),6,1);return date.getTimezoneOffset()<Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset());}/**
     * Determines if a date precedes another.
     * @param first First date
     * @param second Second date
     * @returns {Boolean} true if first precedes second, otherwise false
     * @category Comparison
     */},{key:"isBefore",value:function isBefore(first,second){return first<second;}/**
     * Determines if a date succeeds another.
     * @param first First date
     * @param second Second date
     * @returns {Boolean} true if first succeeds second, otherwise false
     * @category Comparison
     */},{key:"isAfter",value:function isAfter(first,second){return first>second;}/**
     * Checks if two dates are equal.
     * @param first First date
     * @param second Second date
     * @param unit If not given, the comparison will be done up to a millisecond
     * @returns {Boolean} true if the dates are equal
     * @category Comparison
     */},{key:"isEqual",value:function isEqual(first,second){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(unit===null)return first-second===0;return this.startOf(first,unit)-this.startOf(second,unit)===0;}/**
     * Compares two dates using the specified precision
     * @param {Date} first
     * @param {Date} second
     * @param {String} unit
     * @returns {Number} 0 = equal, -1 first before second, 1 first after second
     * @category Comparison
     */},{key:"compare",value:function compare(first,second){var unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var DH=this;// Unit specified, cut the rest out
if(unit){first=DH.startOf(first,unit);second=DH.startOf(second,unit);}// Comparision on ms level
if(DH.isBefore(first,second))return-1;if(DH.isAfter(first,second))return 1;return 0;}/**
     * Checks if date is the start of specified unit
     * @param {Date} date
     * @param {String} unit
     * @returns {Boolean}
     * @category Comparison
     */},{key:"isStartOf",value:function isStartOf(date,unit){return this.isEqual(date,this.startOf(date,unit));}/**
     * Checks if this date is >= start and < end.
     * @param {Date} date The source date
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Boolean} true if this date falls on or between the given start and end dates.
     * @category Comparison
     */},{key:"betweenLesser",value:function betweenLesser(date,start,end){//return start <= date && date < end;
return start.getTime()<=date.getTime()&&date.getTime()<end.getTime();}/**
     * Checks if this date is >= start and <= end.
     * @param {Date} date The source date
     * @param {Date} start Start date
     * @param {Date} end End date
     * @return {Boolean} true if this date falls on or between the given start and end dates.
     * @category Comparison
     */},{key:"betweenLesserEqual",value:function betweenLesserEqual(date,start,end){return start.getTime()<=date.getTime()&&date.getTime()<=end.getTime();}/**
     * Returns true if dates intersect
     * @param {Date} date1Start
     * @param {Date} date1End
     * @param {Date} date2Start
     * @param {Date} date2End
     * @return {Boolean} Returns true if dates intersect
     * @category Comparison
     */},{key:"intersectSpans",value:function intersectSpans(date1Start,date1End,date2Start,date2End){return this.betweenLesser(date1Start,date2Start,date2End)||this.betweenLesser(date2Start,date1Start,date1End);}/**
     * Returns 1 if first param is a greater unit than second param, -1 if the opposite is true or 0 if they're equal
     * @param {String} unit1 The 1st unit
     * @param {String} unit2 The 2nd unit
     * @category Comparison
     */},{key:"compareUnits",value:function compareUnits(unit1,unit2){var index1=canonicalUnitNames$1.indexOf(unit1),index2=canonicalUnitNames$1.indexOf(unit2);return Math.sign(index1-index2);}/**
     * Returns true if the first time span completely 'covers' the second time span.
     * @example
     * DateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 4)) ==> true
     * DateHelper.timeSpanContains(new Date(2010, 1, 2), new Date(2010, 1, 5), new Date(2010, 1, 3), new Date(2010, 1, 6)) ==> false
     * @param {Date} spanStart The start date for initial time span
     * @param {Date} spanEnd The end date for initial time span
     * @param {Date} otherSpanStart The start date for the 2nd time span
     * @param {Date} otherSpanEnd The end date for the 2nd time span
     * @return {Boolean}
     * @category Comparison
     */},{key:"timeSpanContains",value:function timeSpanContains(spanStart,spanEnd,otherSpanStart,otherSpanEnd){return otherSpanStart-spanStart>=0&&spanEnd-otherSpanEnd>=0;}//endregion
//region Query
/**
     * Get the first day of week, 0-6 (Sunday-Saturday). This is determined by the used locale.
     * @readonly
     */},{key:"get",/**
     * Get the specified part of a date
     * @param {Date} date
     * @param {String} unit Part of date, hour, minute etc.
     * @category Query
     */value:function get(date,unit){switch(this.normalizeUnit(unit)){case'millisecond':return date.getMilliseconds();case'second':return date.getSeconds();case'minute':return date.getMinutes();case'hour':return date.getHours();case'date':case'day':// Scheduler has a lot of calculations expecting this to work
return date.getDate();case'week':return formats$1.W(date);case'month':return date.getMonth();case'quarter':return Math.floor(date.getMonth()/3)+1;case'year':return date.getFullYear();}return null;}/**
     * Get number of days in the current month for the supplied date
     * @param {Date} date Date which month should be checked
     * @returns {Number} Days in month
     * @category Query
     */},{key:"daysInMonth",value:function daysInMonth(date){var d=this.clone(date);d.setDate(1);d.setMonth(date.getMonth()+1);d.setDate(0);return d.getDate();}/**
     * Get the first date of the month for the supplied date
     * @param {Date} date
     * @returns {Date}
     * @category Query
     */},{key:"getFirstDateOfMonth",value:function getFirstDateOfMonth(date){return new Date(date.getFullYear(),date.getMonth(),1);}/**
     * Get the last date of the month for the supplied date
     * @param {Date} date
     * @returns {Date}
     * @category Query
     */},{key:"getLastDateOfMonth",value:function getLastDateOfMonth(date){return new Date(date.getFullYear(),date.getMonth()+1,0);}/**
     * Get the earliest of two dates
     * @param {Date} first
     * @param {Date} second
     * @returns {Date} Earliest date
     * @category Query
     */},{key:"min",value:function min(first,second){return first.getTime()<second.getTime()?first:second;}/**
     * Get the latest of two dates
     * @param {Date} first
     * @param {Date} second
     * @returns {Date} Latest date
     * @category Query
     */},{key:"max",value:function max(first,second){return first.getTime()>second.getTime()?first:second;}/**
     * Get an incremented date. Incrementation based on specified unit and optional amount
     * @param {Date} date
     * @param {String} unit
     * @param {Number} [increment]
     * @param {Number} [weekStartDay] Will default to what is set in locale
     * @returns {Date}
     * @category Query
     */},{key:"getNext",value:function getNext(date,unit){var increment=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;var weekStartDay=arguments.length>3&&arguments[3]!==undefined?arguments[3]:this.weekStartDay;var me=this;if(unit==='week'){var dt=me.clone(date),day=dt.getDay();dt=me.startOf(dt,'day');dt=me.add(dt,weekStartDay-day+7*(increment-(weekStartDay<=day?0:1)),'day');// For south american timezones, midnight does not exist on DST transitions, adjust...
if(dt.getDay()!==weekStartDay)me.add(dt,1,'hour');return dt;}return me.startOf(me.add(date,increment,unit),unit);}/**
     * Get the start of the next day
     * @param {Date} date
     * @param {Boolean} clone
     * @param {Boolean} noNeedToClearTime
     * @returns {Date}
     * @category Query
     */},{key:"getStartOfNextDay",value:function getStartOfNextDay(date,clone,noNeedToClearTime){var nextDay=DateHelper$1.add(noNeedToClearTime?date:DateHelper$1.clearTime(date,clone),1,'day');// DST case
if(nextDay.getDate()==date.getDate()){var offsetNextDay=DateHelper$1.add(DateHelper$1.clearTime(date,clone),'day',2).getTimezoneOffset(),offsetDate=date.getTimezoneOffset();nextDay=DateHelper$1.add(nextDay,offsetDate-offsetNextDay,'minute');}return nextDay;}/**
     * Get the end of previous day
     * @param {Date} date
     * @param {Boolean} noNeedToClearTime
     * @returns {Date}
     * @category Query
     */},{key:"getEndOfPreviousDay",value:function getEndOfPreviousDay(date,noNeedToClearTime){var dateOnly=noNeedToClearTime?date:DateHelper$1.clearTime(date,true);// dates are different
if(dateOnly-date){return dateOnly;}else{return this.add(dateOnly,-1,'day');}}//endregion
//region Unit helpers
/**
     * Turns (10, 'day') into '10 days' etc.
     * @param {Number} count Amount of unit
     * @param {String} unit Unit, will be normalizes (days, d -> day etc.)
     * @returns {String}
     * @category Unit helpers
     */},{key:"formatCount",value:function formatCount(count,unit){unit=DateHelper$1.normalizeUnit(unit);if(count!==1)unit+='s';return count+' '+unit;}/**
     * Get the ratio between two units ( year, month -> 1/12 )
     * @param {String} baseUnit
     * @param {String} unit
     * @param {Boolean} acceptEstimate If true, process negative values of validConversions. Defaults to false.
     * @returns {Number} Ratio
     * @category Unit helpers
     */},{key:"getUnitToBaseUnitRatio",value:function getUnitToBaseUnitRatio(baseUnit,unit){var acceptEstimate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;baseUnit=DateHelper$1.normalizeUnit(baseUnit);unit=DateHelper$1.normalizeUnit(unit);if(baseUnit===unit)return 1;// Some validConversions have negative sign to signal that it is not an exact conversion.
// Ignore those here unless acceptEstimate is provided.
if(validConversions$1[baseUnit]&&validConversions$1[baseUnit][unit]&&(acceptEstimate||validConversions$1[baseUnit][unit]>0)){return 1/DateHelper$1.as(unit,1,baseUnit);}if(validConversions$1[unit]&&validConversions$1[unit][baseUnit]&&(acceptEstimate||validConversions$1[unit][baseUnit]>0)){return DateHelper$1.as(baseUnit,1,unit);}return-1;}/**
     * Get unit suitable to use in calculations (?)
     * @param unit
     * @returns {*}
     * @category Unit helpers
     */},{key:"getMeasuringUnit",value:function getMeasuringUnit(unit){if(unit==='week')return'day';return unit;}/**
     * Returns a localized abbreviated form of the name of the duration unit.
     * For example in the `EN` locale, for `"qrt"` it will return `"q"`.
     * @param {String} unit Duration unit
     * @return {String}
     * @category Unit helpers
     */},{key:"getShortNameOfUnit",value:function getShortNameOfUnit(unit){var me=this;// Convert abbreviations to the canonical name.
// See locale file and the applyLocale method below.
unit=me.parseTimeUnit(unit);// unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc
return me.unitLookup[unit].abbrev;}/**
     * Returns a localized full name of the duration unit.
     * For for example in the `EN` locale, for `"d"` it will return either
     * `"day"` or `"days"`, depending from the `plural` argument
     * @static
     * @param {String} unit Time unit
     * @param {Boolean} plural Whether to return a plural name or singular
     * @return {String}
     * @category Unit helpers
     */},{key:"getLocalizedNameOfUnit",value:function getLocalizedNameOfUnit(unit,plural){var me=this;// Normalize to not have to have translations for each variation used in code
unit=me.normalizeUnit(unit);// Convert abbreviations to the canonical name.
// See locale file and the applyLocale method below.
unit=me.parseTimeUnit(unit);// unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc
return me.unitLookup[unit][plural?'plural':'single'];}/**
     * Normalizes a unit for easier usage in conditionals. For example year, years, y -> year
     * @param {String} unit
     * @returns {String}
     * @category Unit helpers
     */},{key:"normalizeUnit",value:function normalizeUnit(unit){if(!unit){return null;}if(unit.toLowerCase()==='date'){return unit.toLowerCase();}return canonicalUnitNames$1.includes(unit.toLowerCase())// Already valid
?unit.toLowerCase()// Trying specified case first, since we have both "M" for month and "m" for minute
:normalizedUnits$1[unit]||normalizedUnits$1[unit.toLowerCase()];}},{key:"getUnitByName",value:function getUnitByName(name){// Allow either a canonical name to be passed, or, if that fails, parse it as a localized name or abbreviation.
return DateHelper$1.normalizeUnit(name)||DateHelper$1.normalizeUnit(this.parseTimeUnit(name));}/**
     * Returns a duration of the timeframe in the given unit.
     * @param {Date} start The start date of the timeframe
     * @param {Date} end The end date of the timeframe
     * @param {String} unit Duration unit
     * @return {Number} The duration in the units
     * @category Unit helpers
     * @ignore
     */},{key:"getDurationInUnit",value:function getDurationInUnit(start,end,unit,doNotRound){return this.diff(start,end,unit,doNotRound);}/**
     * Checks if two date units align
     * @private
     * @param {String} majorUnit
     * @param {String} minorUnit
     * @returns {Boolean}
     * @category Unit helpers
     */},{key:"doesUnitsAlign",value:function doesUnitsAlign(majorUnit,minorUnit){// TODO: probably needs some fleshing out to be generally useful, otherwise move to TimeAxisViewModel?
// Maybe also use getUnitToBaseUnitRatio() for assertion?
if(majorUnit!==minorUnit&&minorUnit==='week')return false;return true;}},{key:"getSmallerUnit",value:function getSmallerUnit(unit){return canonicalUnitNames$1[unitMagnitudes$1[this.normalizeUnit(unit)]-1]||null;}},{key:"getLargerUnit",value:function getLargerUnit(unit){return canonicalUnitNames$1[unitMagnitudes$1[this.normalizeUnit(unit)]+1]||null;}//endregion
//region Date picker format
/**
     * Parses a typed duration value according to locale rules.
     *
     * The value is taken to be a string consisting of the numeric magnitude and the units.
     * The units may be a recognised unit abbreviation of this locale or the full local unit name.
     *
     * For example: "2d", "2 d", "2 day", "2 days" will be turned into `{ magnitude : 2, unit : "day" }`
     *
     * **NOTE:** Doesn't work with complex values like "2 days, 2 hours"
     *
     * @param {String} value The value to parse.
     * @param {Boolean} [allowDecimals=true] Decimals are allowed in the magnitude.
     * @param {String} [defaultUnit] Default unit to use if only magnitude passed.
     * @returns {Object} If successfully parsed, the result contains two properties,
     * `magnitude` being a number, and `unit` being the canonical unit name, *NOT*
     * a localized name. If parsing was unsuccessful, `null` is returned.
     * @category Parse & format
     */},{key:"parseDuration",value:function parseDuration(value){var allowDecimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var defaultUnit=arguments.length>2?arguments[2]:undefined;var me=this,durationRegEx=allowDecimals?withDecimalsDurationRegex$1:noDecimalsDurationRegex$1,match=durationRegEx.exec(value);if(value==null||!match){return null;}var magnitude=parseNumber$1(match[1]),unit=me.parseTimeUnit(match[2])||defaultUnit;if(!unit){return null;}return{magnitude:magnitude,unit:unit};}/**
     * Parses a typed unit name, for example `"ms"` or `"hr"` or `"yr"` into the
     * canonical form of the unit name which may be passed to {@link #function-add-static}
     * or {@link #function-diff-static}
     * @param {*} unitName
     * @category Parse & format
     */},{key:"parseTimeUnit",value:function parseTimeUnit(unitName){// NOTE: In case you get a crash here when running tests, it is caused by missing locale. Build locales
// using `scripts/build.js locales` to resolve.
var unitMatch=unitName==null?null:this.durationRegEx.exec(unitName.toLowerCase());if(!unitMatch){return null;}// See which group in the unitAbbrRegEx matched match[2]
for(var unitOrdinal=0;unitOrdinal<canonicalUnitNames$1.length;unitOrdinal++){if(unitMatch[unitOrdinal+1]){return canonicalUnitNames$1[unitOrdinal];}}}//endregion
},{key:"applyLocale",value:function applyLocale(){var me=this,unitAbbreviations=me.L('unitAbbreviations'),unitNames=me.unitNames=me.L('unitNames');// This happens when applying an incomplete locale, as done in Localizable.t.js.
// Invalid usecase, but return to prevent a crash in that test.
if(unitNames==='unitNames'){return;}locale$4=me.L('locale')||'en-US';if(locale$4==='en-US'){// TODO: Include in En locale instead?
ordinalSuffix$1=enOrdinalSuffix$1;}else if(me.L('ordinalSuffix')!=='ordinalSuffix'){ordinalSuffix$1=me.L('ordinalSuffix');}formatCache$1={};parserCache$1={};intlFormatterCache$1={};var unitAbbrRegEx='';me.unitLookup={};for(var _i48=0;_i48<unitAbbreviations.length;_i48++){var a=unitAbbreviations[_i48],n=unitNames[_i48];n.canonicalUnitName=canonicalUnitNames$1[_i48];// Create a unitLookup object keyed by unit full names
// both lower and upper case to be able to look up plurals or abbreviations
// also always include english names, since those are used in sources
me.unitLookup[n.single]=me.unitLookup[n.single.toUpperCase()]=me.unitLookup[n.canonicalUnitName]=me.unitLookup[n.canonicalUnitName.toUpperCase()]=n;unitAbbrRegEx+="".concat(_i48?'|':'',"(");for(var j=0;j<a.length;j++){unitAbbrRegEx+="".concat(a[j],"|");}unitAbbrRegEx+="".concat(n.single,"|").concat(n.plural,"|").concat(n.canonicalUnitName,")");}me.durationRegEx=new RegExp("^(?:".concat(unitAbbrRegEx,")$"));}},{key:"weekStartDay",get:function get(){// Try locale first
var weekStartDay=this.L('weekStartDay');if(weekStartDay!=='weekStartDay'){return weekStartDay;}// Default to 0, should not need to happen in real world scenarios when a locale is always loaded
return 0;}},{key:"locale",set:function set(name){locale$4=name;},get:function get(){return locale$4;}}]);return DateHelper$1;}(Localizable$1());/*  */DateHelper$1._$name='DateHelper';// Update when changing locale
LocaleManagerSingelton$1.on({locale:'applyLocale',thisObj:DateHelper$1});// Apply default locale
if(LocaleManagerSingelton$1.locale)DateHelper$1.applyLocale();DateHelper$1._$name='DateHelper';/**
 * @module Common/helper/util/RandomGenerator
 */ /**
 * Generates pseudo random numbers from predefined sequence of 100 numbers
 */var RandomGenerator$1=/*#__PURE__*/function(){function RandomGenerator$1(){_classCallCheck2(this,RandomGenerator$1);this.random100=[46,2,36,46,54,59,18,20,71,55,88,98,13,61,61,40,2,15,3,32,51,45,64,25,81,85,54,13,57,49,64,22,81,94,0,62,17,7,11,2,33,99,85,26,83,83,96,26,20,89,91,38,26,13,11,79,32,30,5,51,70,7,5,56,58,77,37,89,40,80,78,59,26,36,8,51,60,23,86,5,11,96,64,94,87,64,4,78,17,85,35,0,90,86,23,55,53,9,35,59,29,2,64,42,8,49,43,73,6,53,38,9,39,31,32,40,49,13,78,68,20,99,24,78,35,91,73,46,67,76,89,69,30,69,25,3,4,55,1,65,66,76,83,19,67,1,95,24,54,45,56,40,67,92,72,4,69,8,47,50,27,2,38,9,14,83,12,14,62,95,22,47,35,18,38,14,86,64,68,61,52,69,39,93,20,73,32,52,74,6,56,68,99,29,24,92,40,67,6,72,31,41,91,53,80,55,33,97,97,99,18,20,5,27,82,84,61,78,27,67,7,42,75,95,91,25,63,21,70,36,46,0,1,45,84,6,86,15,10,62,96,94,10,23,93,83,94,47,5,29,29,52,51,37,77,96,43,72,43,14,54,14,72,52,4,39,15,26,68,28,25,76,60,50,22,40,72,74,68,58,8,48,40,62,52,24,9,26,47,44,49,96,7,77,90,45,76,47,5,86,1,36,18,42,19,90,34,23,70,32,69,79,0,99,57,80,72,21,19,72,85,68,4,40,86,62,0,63,4,11,69,31,78,31,21,78,29,84,13,53,57,10,26,50,24,30,90,42,51,96,93,21,99,23,81,0,89,43,86,63,93,19,54,71,92,36,4,95,37,99,60,29,23,50,68,95,57,95,77,53,99,78,75,12,92,47,23,14,0,41,98,11,34,64,26,90,50,23,38,31,74,76,16,76,66,23,22,72,48,50,20,36,37,58,5,43,49,64,81,30,8,21,98,75,60,17,50,42,27,38,90,74,45,68,67,27,31,15,58,76,41,99,23,98,53,98,56,19,79,2,4,38,96,24,65,51,43,42,41,60,46,7,90,65,3,27,63,99,51,44,86,1,54,40,15,74,3,81,51,63,87,79,84,72,22,38,96,95,33,41,21,99,21,69,7,49,40,52,41,6,91,19,76,40,54,17,33,11,11,0,1,32,94,33,13,18,45,7,85,61,42,54,45,72,78,96,17,9,80,87,41,96,66,0,8,59,18,21,2,28,64,75,97,32,80,86,97,97,55,2,73,75,11,89,67,58,70,76,12,46,64,17,22,97,25,35,93,57,82,46,57,61,31,74,27,4,32,85,53,86,53,53,42,5,28,50,65,63,70,61,73,37,13,80,7,34,22,3,26,6,62,78,12,56,87,41,58,64,31,27,45,35,18,66,62,43,89,69,94,93,33,74,2,43,85,37,82,41,74,9,15,44,33,42,65,19,1,49,78,12,29,9,78,7,55,12,45,40,33,16,86,14,52,16,73,76,0,98,75,91,78,46,99,95,90,69,78,45,62,55,37,88,49,77,27,83,38,73,39,1,75,40,65,83,54,95,7,73,4,30,26,36,89,21,5,95,11,14,87,45,36,21,77,55,5,66,51,98,48,62,74,58,23,82,30,28,19,53,89,76,98,8,34,70,28,54,16,52,35,93,54,54,72,49,18,93,72,90,71,73,15,60,38,80,76,53,70,39,69,25,5,31,61,46,6,54,34,31,52,33,36,79,76,44,29,28,38,1,66,2,90,91,1,76,78,31,55,37,71,2,3,38,85,0,95,42,2,39,57,87,61,77,98,2,24,80,48,27,47,71,15,7,49,60,86,3,2,29,38,54,36,59,83,27,47,9,36,42,8,73,85,9,16,73,60,39,12,43,25,23,29,28,47,40,77,20,89,22,30,41,59,96,19,56,20,76,73,39,46,72,40,47,37,52,29,79,37,39,50,41,87,66,17,75,31,45,26,88,70,11,90,40,74,9,32,65,72,61,6,93,54,15,84,22,99,47,10,96,4,84,19,85,73,45,25,16,8,94,99,39,28,26,68,87,48,1,65,86,46,86,7,60,82,45,75,38,56,41,35,30,86,91,97,85,45,5,14,69,85,96,37,18,26,16,38,16,1,44,94,85,58,60,20,5,47,52,41,50,71,43,42,67,64,38,65,83,99,78,96,33,20,98,24,6,2,25,16,16,44,63,24,68,56,49,91,15,59,99,27,43,34,28,36,45,1,10,19,54,26,75,17,88,96,63,24,71,93,72,97,66,87,18,86];this.randomCache={};this.rndIndex=0;}/**
     * Returns next pseudo random integer number from sequence between 0 and max parameter value (99 is maximum value)
     * @param max max value
     * @returns {number}
     */_createClass2(RandomGenerator$1,[{key:"nextRandom",value:function nextRandom(max){var randomCache=this.randomCache,randomNumbers;if(randomCache[max]){randomNumbers=randomCache[max];}else{randomNumbers=this.random100.filter(function(num){return num<max;});randomCache[max]=randomNumbers;}return randomNumbers[this.rndIndex++%randomNumbers.length];}/**
     * Resets sequence to initial number
     */},{key:"reset",value:function reset(){this.rndIndex=0;}/**
     * Returns pseudo random array element
     * @param array input array
     * @returns {*}
     */},{key:"fromArray",value:function fromArray(array){return array[this.nextRandom(array.length)];}}]);return RandomGenerator$1;}();RandomGenerator$1._$name='RandomGenerator';/**
 * @module Gantt/util/ProjectGenerator
 */var today=new Date(),startDate=new Date(today.getFullYear(),0,1),rnd=new RandomGenerator$1();function getNum(id,token){return parseInt(''+id+token);}/**
 * Generates sample project for Examples and Tests
 */var ProjectGenerator=/*#__PURE__*/function(){function ProjectGenerator(){_classCallCheck2(this,ProjectGenerator);}_createClass2(ProjectGenerator,null,[{key:"generateAsync",// static generateSync(requestedTaskCount, maxProjectSize) {
//     const config = {
//         startDate,
//         eventsData       : [],
//         dependenciesData : []
//     };
//
//     const blockCount = Math.ceil(requestedTaskCount / 10),
//         projectSize = Math.ceil(maxProjectSize / 10),
//         generator = this.generateBlocks(blockCount, projectSize, startDate);
//
//     let duration = 0,
//         taskCount = 0,
//         dependencyCount = 0;
//
//     for (let i = 0; i < blockCount; i++) {
//         const block = generator.next().value;
//
//         config.eventsData.push(...block.eventsData);
//         config.dependenciesData.push(...block.dependenciesData);
//
//         if (block.projectDuration) {
//             duration = Math.max(block.projectDuration, duration);
//         }
//
//         taskCount += block.taskCount;
//         dependencyCount += block.dependencyCount;
//     }
//
//     console.log(`Generated ${taskCount} tasks and ${dependencyCount} dependencies`);
//
//     config.endDate = DateHelper.add(config.startDate, Math.max(duration, 30), 'days');
//
//     return config;
// }
value:function generateAsync(requestedTaskCount,maxProjectSize,progressCallback){var config={startDate:startDate,eventsData:[],dependenciesData:[]};var blockCount=Math.ceil(requestedTaskCount/10),projectSize=Math.ceil(maxProjectSize/10),generator=this.generateBlocks(blockCount,projectSize,startDate);var duration=0,taskCount=0,dependencyCount=0;return new Promise(function(resolve){function generate(){// 10 blocks at the time
for(var _i49=0;_i49<10;_i49++){var res=generator.next();if(!res.done){var _config$eventsData,_config$dependenciesD;var block=res.value;(_config$eventsData=config.eventsData).push.apply(_config$eventsData,_toConsumableArray(block.eventsData));(_config$dependenciesD=config.dependenciesData).push.apply(_config$dependenciesD,_toConsumableArray(block.dependenciesData));if(block.projectDuration){duration=Math.max(block.projectDuration,duration);}taskCount+=block.taskCount;dependencyCount+=block.dependencyCount;}else{progressCallback(taskCount,dependencyCount,true);config.endDate=DateHelper$1.add(config.startDate,Math.max(duration,30),'days');return resolve(config);}}progressCallback(taskCount,dependencyCount,false);window.requestAnimationFrame(generate);}generate();});}},{key:"generateBlocks",value:/*#__PURE__*/regeneratorRuntime.mark(function generateBlocks(count,projectSize,startDate){var currentId,dependencyId,projectDuration,blockDuration,rndDuration,_i50,blockStartId,block;return regeneratorRuntime.wrap(function generateBlocks$(_context222){while(1){switch(_context222.prev=_context222.next){case 0:rndDuration=function _ref467(){var addToTotal=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var value=rnd.nextRandom(5)+2;if(addToTotal){blockDuration+=value;}return value;};currentId=1,dependencyId=1,projectDuration=0,blockDuration=0;_i50=0;case 3:if(!(_i50<count)){_context222.next=15;break;}blockStartId=currentId,block={eventsData:[{id:currentId++,name:'Parent '+blockStartId,startDate:startDate,expanded:true,children:[{id:currentId++,name:'Sub-parent '+getNum(blockStartId,1),startDate:startDate,expanded:true,children:[{id:currentId++,name:'Task '+getNum(blockStartId,11),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)},{id:currentId++,name:'Task '+getNum(blockStartId,12),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)},{id:currentId++,name:'Task '+getNum(blockStartId,13),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)},{id:currentId++,name:'Task '+getNum(blockStartId,14),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)}]},{id:currentId++,name:'Sub-parent '+getNum(blockStartId,2),startDate:startDate,//duration    : rndDuration(false),
//percentDone : rnd.nextRandom(90) + 10,
expanded:true,children:[{id:currentId++,name:'Task '+getNum(blockStartId,21),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)},{id:currentId++,name:'Task '+getNum(blockStartId,22),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)},{id:currentId++,name:'Task '+getNum(blockStartId,23),startDate:startDate,duration:rndDuration(),percentDone:rnd.nextRandom(100)}]}]}],dependenciesData:[{id:dependencyId++,fromEvent:blockStartId+2,toEvent:blockStartId+3},{id:dependencyId++,fromEvent:blockStartId+3,toEvent:blockStartId+4},{id:dependencyId++,fromEvent:blockStartId+4,toEvent:blockStartId+5},{id:dependencyId++,fromEvent:blockStartId+5,toEvent:blockStartId+7},{id:dependencyId++,fromEvent:blockStartId+7,toEvent:blockStartId+8},{id:dependencyId++,fromEvent:blockStartId+8,toEvent:blockStartId+9}],taskCount:10,dependencyCount:5};projectDuration+=blockDuration;blockDuration=0;block.projectDuration=projectDuration;if(_i50%projectSize!==0){block.dependenciesData.push({id:dependencyId++,fromEvent:blockStartId-2,toEvent:blockStartId+2});block.dependencyCount++;}else{projectDuration=0;}currentId++;_context222.next=12;return block;case 12:_i50++;_context222.next=3;break;case 15:case"end":return _context222.stop();}}},generateBlocks);})}]);return ProjectGenerator;}();exports.ProjectGenerator=ProjectGenerator;ProjectGenerator._$name='ProjectGenerator';var AssignmentEditGrid=/*#__PURE__*/function(_Container7){_inherits2(AssignmentEditGrid,_Container7);function AssignmentEditGrid(){_classCallCheck2(this,AssignmentEditGrid);return _possibleConstructorReturn2(this,_getPrototypeOf2(AssignmentEditGrid).apply(this,arguments));}_createClass2(AssignmentEditGrid,[{key:"afterConfigure",//endregion
//region Init
value:function afterConfigure(){_get2(_getPrototypeOf2(AssignmentEditGrid.prototype),"afterConfigure",this).call(this);var me=this,addButton=me.addButton=WidgetHelper.getById('assignmenteditgrid-add'),removeButton=me.removeButton=WidgetHelper.getById('assignmenteditgrid-remove'),grid=me.grid=WidgetHelper.getById('assignmenteditgrid-grid').grid;addButton&&addButton.on('click',me.onAddClick,me);removeButton&&removeButton.on('click',me.onRemoveClick,me);grid.on({rowselect:function rowselect(){return removeButton.enable();}});}//endregion
}],[{key:"defaultConfig",//region Config
get:function get(){return{id:'assignmenteditgrid',cls:'b-assignmenteditgrid',items:[{type:'button',cls:'b-add-button green',icon:'plus',id:'assignmenteditgrid-add'},{type:'button',cls:'b-remove-button red',icon:'trash',disabled:true,id:'assignmenteditgrid-remove'},{type:'grid',id:'assignmenteditgrid-grid',storeConfig:{modelClass:ResourceModel$1},columns:[{field:'name',text:'L{Name}',flex:1,editor:{type:'combo',textField:'name',valueField:'id'}},{field:'units',text:'L{Units}',width:80}]}]};}}]);return AssignmentEditGrid;}(Container);// /**
// @class Gantt.widget.AssignmentEditGrid
// @extends Ext.grid.Panel
//
// A widget used to display and edit the task assignments.
// You can find this widget at the `Resources` tab of {@link Gantt.widget.taskeditor.TaskEditor}.
// There you can configure it through the {@link Gantt.widget.TaskEditor.TaskEdit#assignmentGridConfig assignmentGridConfig} object
// available both on the {@link Gantt.widget.taskeditor.TaskEditor} and on the {@link Gantt.feature.TaskEdit} (if you use TaskEdit by feature).
//
// {@img gantt/images/assignment-edit-grid2.png}
//
// {@img gantt/images/assignment-edit-grid1.png}
//
// You can also use this grid in your components, standalone:
//
//     // the task store of the project
//     var taskStore           = myGanttPanel.taskStore
//
//     var assignmentGrid      = new Gantt.widget.AssignmentEditGrid({
//         assignmentStore         : taskStore.assignmentStore,
//         resourceStore           : taskStore.resourceStore,
//
//         // identifier of task which assignments have to be displayed
//         taskId                  : 100,
//         // turn off in-place resource adding
//         addResources            : false,
//
//         renderTo                : Ext.getBody(),
//
//         width                   : 800,
//         height                  : 600
//     })
//
// */
// Ext.define('Gantt.widget.AssignmentEditGrid', {
//     extend      : 'Ext.grid.Panel',
//
//     alias       : 'widget.assignmenteditgrid',
//
//     requires    : [
//         'Ext.util.Filter',
//         'Ext.data.JsonStore',
//         'Ext.window.MessageBox',
//         'Ext.form.field.ComboBox',
//         'Ext.grid.plugin.CellEditing',
//         'Gantt.util.Data',
//         'Gantt.data.AssignmentStore',
//         'Gantt.data.ResourceStore',
//         'Gantt.column.ResourceName',
//         'Gantt.column.AssignmentUnits'
//     ],
//
//     mixins                  : ['Gantt.mixin.Localizable'],
//
//     /**
//      * @cfg {Gantt.data.AssignmentStore} assignmentStore A store with assignments.
//      */
//     assignmentStore         : null,
//
//     /**
//      * @cfg {Gantt.data.ResourceStore} resourceStore A store with resources.
//      */
//     resourceStore           : null,
//
//     /**
//      * @cfg {Boolean} readOnly Whether this grid is read only.
//      */
//     readOnly                : false,
//
//     cls                     : 'gnt-assignmentgrid',
//
//     /**
//      * @cfg {Number} defaultAssignedUnits Default amount of units. This value applies for new assignments.
//      */
//     defaultAssignedUnits    : 100,
//
//     /**
//      * @cfg {Object} l10n
//      * A object, purposed for the class localization. Contains the following keys/values:
//
//             - confirmAddResourceTitle : 'Confirm',
//             - confirmAddResourceText  : 'No resource &quot;{0}&quot; in storage yet. Would you like to add it?',
//             - noValueText             : 'Please select resource to assign',
//             - noResourceText          : 'No resource &quot;{0}&quot; in storage'
//      */
//     /**
//      * @cfg {Mixed} confirmAddResourceText A title for the confirmation window when a new resource is about to be added.
//      * If you set this to `false`, no confirmation window will be displayed.
//      * In this mode, for every "unknown" resource name entered into the combobox field, a new resource will be created.
//      * @removed 2.5 Please use {@link #confirmAddResource} and {@link #l10n} instead.
//      */
//
//     /**
//      * @cfg {Boolean} confirmAddResource False to not display a confirmation window before adding a new resource.
//      */
//     confirmAddResource      : true,
//
//     /**
//      * @cfg {Boolean} addResources `true` to enable in-place resource adding.
//      */
//     addResources            : true,
//
//     /**
//      * @property {String/Number} taskId Identifier of the task to which the assignments belong.
//      */
//     /**
//      * @cfg {String/Number} taskId The task id indicating which assignments to load.
//      * **Note**, that if the task doesn't have an identifier yet (a 'phantom' record), you can use its phantomId instead.
//      */
//     taskId                  : null,
//
//     refreshTimeout          : 100,
//
//     // copy of resource store
//     resourceDupStore        : null,
//
//     // copy of resource store used for resources combobox
//     // (this store is affected by filters so we don't use `resourceDupStore` to always have "clean" copy there)
//     resourceComboStore      : null,
//
//     assignmentUnitsEditor   : null,
//
//     initComponent : function() {
//         var me = this;
//         var assignmentStore = this.assignmentStore;
//         var taskStore = this.taskStore || assignmentStore.getTaskStore();
//
//         // Use an Gantt.data.AssignmentStore instance since
//         // we need it to play this role in case we link grid with TaskForm.taskBuffer
//         this.store      = this.store || new assignmentStore.self({
//                 model       : assignmentStore.model,
//                 taskStore   : taskStore
//             });
//
//         var resourceStore = taskStore.getResourceStore();
//
//         this.resourceDupStore = this.resourceDupStore || new resourceStore.self({
//                 model       : resourceStore.model,
//                 taskStore   : taskStore
//             });
//
//         // resource combo store
//         this.resourceComboStore = new Ext.data.JsonStore({
//             autoDestroy : true,
//             model       : this.resourceDupStore.model
//         });
//
//         if (this.addResources !== undefined) {
//             this.addResources = this.addResources;
//         }
//
//         this.columns        = this.buildColumns();
//
//         if (!this.readOnly) {
//             this.plugins = this.buildPlugins();
//         }
//
//         me.loadResources();
//
//         var refreshResources        = Ext.Function.createBuffered(me.refreshResources, me.refreshTimeout, me, []);
//
//         me.mon(me.resourceStore, {
//             add         : refreshResources,
//             remove      : refreshResources,
//             load        : refreshResources,
//             clear       : refreshResources
//         });
//
//         me.tbar = me.tbar || [
//                 {
//                     xtype       : 'button',
//                     iconCls     : 'x-fa fa-plus',
//                     text        : me.L('addAssignmentText'),
//                     itemId      : 'add-assignment-btn',
//                     handler     : function () {
//                         me.insertAssignment();
//                     }
//                 },
//                 {
//                     xtype       : 'button',
//                     iconCls     : 'x-fa fa-trash',
//                     text        : me.L('dropAssignmentText'),
//                     itemId      : 'drop-assignment-btn',
//                     disabled    : true,
//                     handler     : function () {
//                         // close all the opened editors
//                         me.setActionableMode(false);
//
//                         var recs = me.getSelectionModel().getSelection();
//
//                         if (recs && recs.length) {
//                             var index = me.store.indexOf(recs[ 0 ]);
//
//                             me.store.remove(recs);
//
//                             if (me.store.getCount() > 0) {
//                                 me.getSelectionModel().select((index === me.store.getCount()) ? index - 1 : index);
//                             }
//                         }
//                     }
//                 }
//             ];
//
//         me.loadTaskAssignments();
//
//         var refreshAssignments      = Ext.Function.createBuffered(me.refreshAssignments, me.refreshTimeout, me, []);
//
//         me.mon(me.assignmentStore, {
//             add         : refreshAssignments,
//             remove      : refreshAssignments,
//             load        : refreshAssignments,
//             clear       : refreshAssignments
//         });
//
//         me.callParent(arguments);
//
//         me.on({
//             selectionchange : function(sm, sel) {
//                 if (!me.dropBtn) {
//                     me.dropBtn = me.down('#drop-assignment-btn');
//                 }
//                 me.dropBtn && me.dropBtn.setDisabled(!sel.length);
//             }
//         });
//     },
//
//     suspendRefreshResources : function () {
//         this.refreshResourcesSuspended++;
//     },
//
//
//     resumeRefreshResources : function () {
//         this.refreshResourcesSuspended--;
//     },
//
//
//     refreshResources : function () {
//         if (!this.refreshResourcesSuspended && !this.isDestroyed) {
//             this.loadResources();
//         }
//     },
//
//     suspendRefreshAssignments : function () {
//         this.refreshAssignmentsSuspended++;
//     },
//
//
//     resumeRefreshAssignments : function () {
//         this.refreshAssignmentsSuspended--;
//     },
//
//
//     refreshAssignments : function () {
//         if (!this.refreshAssignmentsSuspended && !this.isDestroyed) {
//             this.loadTaskAssignments();
//         }
//     },
//
//     loadResources : function (justResources) {
//         if (!this.resourceStore) return false;
//
//         // make a copy of resourceStore
//         var data = Gantt.util.Data.cloneModelSet(this.resourceStore);
//
//         // clone data to not affect real store
//         this.resourceDupStore.loadData(data);
//         this.resourceComboStore.loadData(data);
//
//         // we reload assignments as well since they depend on resources list
//         if (!justResources) {
//             this.loadTaskAssignments();
//         }
//
//         return true;
//     },
//
//     afterRender : function() {
//         var task;
//
//         this.callParent(arguments);
//
//         // if taskId was provided at construction
//         if (this.taskId) {
//             var taskStore   = this.taskStore || this.assignmentStore.getTaskStore();
//             // trying to get task
//             task            = taskStore && taskStore.getModelById(this.taskId);
//         }
//
//         if (task) {
//             this.setEditableFields(task);
//         }
//     },
//
//     getUnitsEditor : function () {
//         if (!this.readOnly) {
//             // in readOnly mode we dont have cellEditing plugin instance and thus we don't have getEditor method at all
//             if (!this.assignmentUnitsEditor) this.assignmentUnitsEditor = this.down('assignmentunitscolumn').getEditor();
//         }
//
//         return this.assignmentUnitsEditor;
//     },
//
//
//     setEditableFields : function (task) {
//         var unitsEditor     = this.getUnitsEditor();
//
//         if (unitsEditor) {
//             switch (task.getSchedulingMode()) {
//                 case 'DynamicAssignment' :
//                     unitsEditor.setReadOnly(true);
//                     break;
//                 default :
//                     unitsEditor.setReadOnly(false);
//             }
//         }
//     },
//
//     /**
//      * Disable the cellediting plugin
//      * @param readOnly
//      */
//
//     setReadOnly : function (readOnly) {
//         if (this.cellEditing) {
//             if (readOnly) {
//                 this.cellEditing.disable();
//             }
//             else {
//                 this.cellEditing.enable();
//             }
//         }
//     },
//
//
//     /**
//      * Loads task assignments from {@link #assignmentStore}.
//      *
//      * @param {Mixed} [taskId] The task id indicating which assignments to load.
//      * If this parameter is not specified then it will use current {@link #property-taskId} value (identifier provided to this function before (if any)
//      * or initially specified by {@link #cfg-taskId} config).
//      * **Note**, that if the task doesn't have an identifier yet (a 'phantom' record), you can use the task phantomId instead.
//      *
//      * @return {Boolean} False if {@link #assignmentStore} doesn't yet exist or if no task identifier has been provided.
//      * Otherwise returns `true`.
//      */
//     loadTaskAssignments : function (taskId) {
//         taskId          = taskId || this.taskId;
//
//         if (!taskId) return false;
//
//         var taskStore   = this.taskStore || this.assignmentStore.getTaskStore(),
//             task        = taskStore && taskStore.getModelById(taskId),
//             taskAssignments;
//
//         if (task) {
//             taskAssignments = task.getAssignments();
//
//         } else {
//             if (!this.assignmentStore) return false;
//
//             // grab assignments for this task only
//             taskAssignments = this.assignmentStore.queryBy(function(a) {
//                 return a.getTaskId() == taskId;
//             });
//         }
//
//         this.taskId     = taskId;
//
//         var store       = this.store,
//             resStore    = this.resourceDupStore,
//             // clone assignments to not affect real records
//             data        = Gantt.util.Data.cloneModelSet(taskAssignments, function (copiedAssignment, srcAssignment) {
//                 // get original resource Id
//                 var resId       = srcAssignment.getResourceId();
//                 // get cloned version of that resource
//                 var clonedRes   = resStore.queryBy(function (resource) {
//                     var r   = resource.originalRecord;
//                     return (r.getId() || r.internalId) == resId;
//                 });
//                 if (clonedRes.getCount()) {
//                     clonedRes   = clonedRes.first();
//                     // and bind cloned resource to copy of assignment instead of real resource
//                     copiedAssignment.setResourceId(clonedRes.getId() || clonedRes.internalId);
//                 }
//             });
//
//         // load data to the store
//         store.loadData(data);
//
//         if (task && this.rendered) {
//             this.setEditableFields(task);
//         }
//
//         return true;
//     },
//
//
//     /**
//      * Adds a new assignment record and starts the editor.
//      *
//      * @param {Gantt.model.Assignment/Object} [newAssignment] The new assignment to be added.
//      * If this parameter is not provided, a new record will be created using the TaskId of the current task,
//      * empty ResourceId field and Units field set to {@link #defaultAssignedUnits} amount.
//      * @param {Boolean} [doNotActivateEditor=False] `true` to just insert record without activating editor after insertion.
//      *
//      * @return {Gantt.model.Assignment} The records that were added.
//      */
//     insertAssignment : function (newAssignment, doNotActivateEditor) {
//
//         if (!newAssignment || !newAssignment.isModel) {
//             newAssignment   = new this.store.model(newAssignment);
//
//             if (!newAssignment) {
//                 newAssignment.setUnits(this.defaultAssignedUnits);
//             }
//         }
//
//         // Fix for Ext.Editor bug when it tries to retrieve a value from the cell
//         // when the corresponding field initial value is 'undefined'
//         // ..problem is the cell might also contain invalid text tooltip
//         if (newAssignment.getResourceId() === undefined) {
//             newAssignment.setResourceId(null);
//         }
//
//         newAssignment.setTaskId(this.taskId);
//
//         this.store.insert(0, newAssignment);
//
//         var me              = this,
//             oldValidator    = newAssignment.isValid;
//
//         newAssignment.isValid    = function () {
//             return oldValidator.apply(this, arguments) && me.isValidAssignment(this);
//         };
//
//         // there might be no cellEditing if the grid is in readOnly mode
//         if (!doNotActivateEditor && this.cellEditing) {
//             this.cellEditing.startEditByPosition({ row : 0, column : 0 });
//         }
//
//         return newAssignment;
//     },
//
//     /**
//      * Checks if the data in the grid store is valid.
//      * @return {Boolean}
//      */
//     isValid : function () {
//         var result  = true;
//         this.store.each(function (record) {
//             if (!record.isValid()) {
//                 result  = false;
//                 return false;
//             }
//         });
//         return result;
//     },
//
//     /**
//      * Returns an array of task assignment error messages.
//      * @return {String[]} Array of error messages.
//      */
//     getAssignmentErrors : function (assignment) {
//         var me          = this,
//             errors      = [],
//             resourceId  = assignment.getResourceId();
//
//         if (!resourceId) {
//             errors.push(me.L('noValueText'));
//
//         } else if (!me.resourceDupStore.getModelById(resourceId)) {
//             errors.push(Ext.String.format(me.L('noResourceText'), resourceId));
//
//         } else {
//             me.store.each(function (record) {
//                 if (record.getResourceId() == resourceId && record !== assignment) {
//                     errors.push(me.L('Resource is already assigned'));
//                     return false;
//                 }
//             });
//         }
//
//         return errors;
//     },
//
//     isValidAssignment : function (assignment) {
//         return !this.getAssignmentErrors(assignment).length;
//     },
//
//
//     // @private
//     buildPlugins : function() {
//         var cellEditing = this.cellEditing = new Ext.grid.plugin.CellEditing({
//             clicksToEdit : 1
//         });
//
//         var oldStartEdit = cellEditing.startEdit;
//
//         cellEditing.startEdit = function() {
//             this.completeEdit();
//
//             return oldStartEdit.apply(this, arguments);
//         };
//
//         cellEditing.on({
//             beforeedit  : this.onEditingStart,
//
//             thisObj     : this
//         });
//
//         return [cellEditing];
//     },
//
//     hide : function () {
//         this.cancelEdit();
//         this.callParent(arguments);
//     },
//
//     cancelEdit : function () {
//         this.cellEditing.cancelEdit();
//     },
//
//     onEditingStart  : function (ed, e) {
//         var model   = this.store.model.prototype;
//
//         if (e.field == model.resourceIdField) {
//             this.assignment = e.record;
//             // keep resourceId of record being edited
//             this.resourceId = e.record.getResourceId();
//
//             this.resourceComboStore.loadData(this.resourceDupStore.getRange());
//
//             // and re-apply filter to refresh dataset
//             this.resourceComboStore.filter(this.resourcesFilter);
//         }
//     },
//
//     resourceRender : function (value, meta, assignment) {
//         var errors  = this.getAssignmentErrors(assignment);
//
//         if (errors && errors.length) {
//             meta.tdCls  = 'gnt-cell-invalid';
//             meta.tdAttr = 'data-errorqtip="'+errors.join('<br>')+'"';
//         } else {
//             meta.tdCls  = '';
//             meta.tdAttr = 'data-errorqtip=""';
//         }
//
//         var record  = this.resourceDupStore.getModelById(value);
//         return Ext.String.htmlEncode((record && record.getName()) || value);
//     },
//
//     // filters resources store to exclude resources that already assigned to the task.
//     filterResources : function (resource) {
//         var resourceId      = resource.getId(),
//             resourceField   = this.store.model.prototype.resourceIdField,
//             show            = true;
//
//         // record that is being edited should always be presented in combobox dataset
//         if (resourceId !== this.resourceId) {
//             // filter out already assigned resources
//             this.store.each(function (assignment) {
//                 if (resourceId == assignment.get(resourceField)) {
//                     show    = false;
//                     return false;
//                 }
//             });
//         }
//
//         return show;
//     },
//
//     onResourceComboAssert : function (combo) {
//         var rawValue    = combo.getRawValue();
//
//         if (rawValue) {
//
//             var idx = this.resourceDupStore.findExact(combo.displayField, rawValue);
//
//             var record  = idx !== -1 ? this.resourceDupStore.getAt(idx) : false;
//
//             // if no matching record in store
//             if (!record) {
//                 var assignment  = this.assignment;
//                 var me          = this;
//
//                 // callback to proceed with resource creation
//                 var addResource = function (deferred) {
//                     var model       = me.resourceStore.model,
//                         newResource = {};
//
//                     // let`s add a new record with such name
//                     newResource[model.prototype.nameField]    = rawValue;
//
//                     newResource = new model(newResource);
//                     // set resource Id equal to internalId
//                     // we need filled Id to combobox proper working
//                     newResource.setId(newResource.internalId);
//
//                     // push to store
//                     var added   = me.resourceDupStore.add(newResource);
//                     if (added && added.length) {
//                         if (!deferred) {
//                             combo.getStore().add(newResource);
//                             // and set combobox value
//                             combo.setValue(added[0].getId());
//                         } else {
//                             assignment.setResourceId(added[0].getId());
//                         }
//                     }
//                 };
//
//                 // if confirmation required
//                 if (this.confirmAddResource) {
//                     var text    = Ext.String.format(this.L('confirmAddResourceText'), Ext.String.htmlEncode(rawValue));
//
//                     var messageBox = Ext.Msg.confirm(this.L('confirmAddResourceTitle'), text, function (buttonId) {
//                         if (buttonId == 'yes') {
//                             addResource(true);
//                         }
//                     });
//
//                     // TODO: get rid of this HACK after sencha fixes https://www.sencha.com/forum/showthread.php?308705-Wrong-MessageBox-z-index&p=1127575
//                     setTimeout(function () {
//                         messageBox.toFront();
//                     }, 1);
//
//                 } else {
//                     addResource();
//                 }
//             } else {
//                 combo.select(record, true);
//             }
//         }
//     },
//
//     buildColumns : function() {
//         var me  = this;
//
//         // task name column editor
//         this.resourceCombo  = new Ext.form.field.ComboBox({
//             queryMode           : 'local',
//             store               : this.resourceComboStore,
//             allowBlank          : false,
//             editing             : this.addResources,
//             validateOnChange    : false,
//             autoSelect          : false,
//             forceSelection      : !this.addResources,
//             valueField          : this.resourceComboStore.model.prototype.idProperty,
//             displayField        : this.resourceComboStore.model.prototype.nameField,
//             queryCaching        : false,
//             listConfig          : {
//                 // HTML encode combobox items
//                 getInnerTpl : function () {
//                     return '{' + this.displayField + ':htmlEncode}';
//                 }
//             }
//         });
//
//         this.resourcesFilter    = new Ext.util.Filter({
//             filterFn    : this.filterResources,
//             thisObj     : this
//         });
//
//         if (this.addResources) {
//             // add new resource record to combo store before assertValue call
//             Ext.Function.interceptBefore(this.resourceCombo, 'assertValue', function () {
//                 me.onResourceComboAssert(this);
//             });
//         }
//
//         return [
//             {
//                 xtype           : 'resourcenamecolumn',
//                 editor          : this.resourceCombo,
//                 dataIndex       : this.assignmentStore.model.prototype.resourceIdField,
//                 renderer        : this.resourceRender,
//                 thisObj         : this
//             },
//             {
//                 xtype           : 'assignmentunitscolumn',
//                 assignmentStore : this.assignmentStore,
//                 dataIndex       : this.assignmentStore.model.prototype.unitsField
//             }
//         ];
//     },
//
//
//     saveResources : function () {
//         Gantt.util.Data.applyCloneChanges(this.resourceDupStore, this.resourceStore);
//     },
//
//
//     /**
//      * Persists task assignments to {@link #assignmentStore}.
//      * @return {Boolean} `false` if saving error occures. Otherwise returns `true`.
//      */
//     saveTaskAssignments : function () {
//         // suspend the grid reacting on resource and assignment store changes
//         // during applying changes to these stores
//         this.suspendRefreshAssignments();
//         this.suspendRefreshResources();
//
//         // first we have to save resources in case of *new* resource assignment
//         this.saveResources();
//
//         var model       = this.store.model,
//             comboStore  = this.resourceDupStore,
//             result      = true;
//
//         Gantt.util.Data.applyCloneChanges(this.store, this.assignmentStore, function (data) {
//             // get assigned resource
//             var resource    = comboStore.getById(this.getResourceId());
//             // and its original record
//             if (!resource || !resource.originalRecord) {
//                 // normally it should`t occur this way since we had to save resources at first
//                 result  = false;
//                 return;
//             }
//             var r   = resource.originalRecord;
//             // now let's use real resource ID for saving
//             data[model.prototype.resourceIdField] = r.getId() || r.internalId;
//         });
//
//         this.resumeRefreshAssignments();
//         this.resumeRefreshResources();
//
//         return result;
//     },
//
//
//     isDataChanged : function() {
//         var me = this;
//
//         return me.store &&
//                me.store.getUpdatedRecords().length > 0  ||
//                me.store.getNewRecords().length > 0      ||
//                me.store.getRemovedRecords().length > 0;
//     },
//
//
//     isDataValid : function() {
//         var result  = true;
//         this.store.each(function (record) {
//             if (!record.isValid()) {
//                 result  = false;
//                 return false;
//             }
//         });
//         return result;
//     }
//
// });
exports.AssignmentEditGrid=AssignmentEditGrid;AssignmentEditGrid._$name='AssignmentEditGrid';/**
 * @module Gantt/widget/Timeline
 */ /**
 * A visual component showing an overview timeline of tasks having the {@link Gantt.model.TaskModel#field-showInTimeline showInTimeline} field set to true. The timeline component subclasses the {@link Scheduler.view.Scheduler Scheduler} and to use it,
 * simply provide it with a {@link Gantt.model.ProjectModel}:
 *
 * ```javascript
 * const timeline = new Timeline({
 *     appendTo  : 'container',
 *     project   : project
 * });
 * ```
 *
 *
 * {@inlineexample gantt/widget/Timeline.js}
 *
 * @extends Scheduler/view/Scheduler
 * @classType timeline
 */var Timeline=/*#__PURE__*/function(_Scheduler){_inherits2(Timeline,_Scheduler);function Timeline(){_classCallCheck2(this,Timeline);return _possibleConstructorReturn2(this,_getPrototypeOf2(Timeline).apply(this,arguments));}_createClass2(Timeline,[{key:"construct",value:function construct(config){var me=this;me.startDateLabel=document.createElement('label');me.startDateLabel.className='b-timeline-startdate';me.endDateLabel=document.createElement('label');me.endDateLabel.className='b-timeline-enddate';_get2(_getPrototypeOf2(Timeline.prototype),"construct",this).call(this,config);if(!me.project){throw new Error('You need to configure the Timeline with a Project');}if(!(me.project instanceof ProjectModel)){me.project=new ProjectModel(me.project);}me.taskStore=me.project.taskStore;// We don't want to show timeRanges relating to Project
me.features.timeRanges.store=new Store();me.fillFromTaskStore();me.fillFromTaskStore=me.buffer(me.fillFromTaskStore,100);me.taskStore.on({refresh:me.fillFromTaskStore,change:me.onTaskStoreChange,thisObj:me});me.on({resize:me.onSizeChanged,thisObj:me});me.bodyContainer.appendChild(me.startDateLabel);me.bodyContainer.appendChild(me.endDateLabel);LocaleManagerSingelton.on({locale:'onLocaleChange',thisObj:me});}},{key:"onSizeChanged",value:function onSizeChanged(_ref468){var width=_ref468.width,oldWidth=_ref468.oldWidth;this.suspendRefresh();this.updateRowHeight();this.resumeRefresh();if(width!==oldWidth){this.fitTimeline();}}},{key:"updateRowHeight",value:function updateRowHeight(){this.rowHeight=this.bodyContainer.offsetHeight;}},{key:"fitTimeline",value:function fitTimeline(){if(this.eventStore.count>0){this.zoomToFit({leftMargin:50,rightMargin:50});}this.updateStartEndLabels();}},{key:"updateStartEndLabels",value:function updateStartEndLabels(){var me=this;me.startDateLabel.innerHTML=me.getFormattedDate(me.startDate);me.endDateLabel.innerHTML=me.getFormattedDate(me.endDate);}},{key:"onTaskStoreChange",value:function(){var _onTaskStoreChange=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee82(event){var me,eventStore,needsFit,task,clone,filteredData;return regeneratorRuntime.wrap(function _callee82$(_context223){while(1){switch(_context223.prev=_context223.next){case 0:me=this,eventStore=me.eventStore;_context223.t0=event.action;_context223.next=_context223.t0==='add'?4:_context223.t0==='remove'?6:_context223.t0==='removeall'?8:_context223.t0==='update'?10:13;break;case 4:event.records.forEach(function(task){if(task.showInTimeline){eventStore.add(me.cloneTask(task));needsFit=true;}});return _context223.abrupt("break",13);case 6:event.records.forEach(function(task){if(task.showInTimeline){eventStore.remove(task.id);needsFit=true;}});return _context223.abrupt("break",13);case 8:me.fillFromTaskStore();return _context223.abrupt("break",13);case 10:task=event.record;if(event.changes.showInTimeline){// Add or remove from our eventStore
if(task.showInTimeline){eventStore.add(me.cloneTask(task));}else{eventStore.remove(eventStore.getById(task.id));}needsFit=true;}else if(task.showInTimeline){// Just sync with existing clone
clone=eventStore.getById(task.id);if(clone){filteredData=Object.assign({},task.data);// Not allowed to set 'expanded' flat
delete filteredData.expanded;clone.set(filteredData);needsFit=true;}}return _context223.abrupt("break",13);case 13:if(needsFit){me.fitTimeline();}case 14:case"end":return _context223.stop();}}},_callee82,this);}));function onTaskStoreChange(_x113){return _onTaskStoreChange.apply(this,arguments);}return onTaskStoreChange;}()},{key:"cloneTask",value:function cloneTask(task){return{id:task.id,resourceId:1,startDate:task.startDate,endDate:task.endDate,duration:task.duration,durationUnit:task.durationUnit,name:task.name};}},{key:"render",value:function render(){_get2(_getPrototypeOf2(Timeline.prototype),"render",this).call(this);this.updateRowHeight();}},{key:"fillFromTaskStore",value:function fillFromTaskStore(){var me=this,timelineTasks=[];me.taskStore.traverse(function(task){if(task.showInTimeline&&task.isScheduled){timelineTasks.push(me.cloneTask(task));}});me.suspendRefresh();me.events=timelineTasks;me.resumeRefresh();me.fitTimeline();}},{key:"onLocaleChange",value:function onLocaleChange(){this.updateStartEndLabels();}}],[{key:"type",get:function get(){return'timeline';}},{key:"defaultConfig",get:function get(){return{/**
             * Project config object or a Project instance
             *
             * @config {Gantt.model.ProjectModel|Object} project
             */height:'13em',eventLayout:'pack',barMargin:1,readOnly:true,forceFit:true,zoomOnMouseWheel:false,zoomOnTimeAxisDoubleClick:false,eventColor:null,eventStyle:null,rowHeight:48,features:{columnLines:false,eventContextMenu:false,contextMenu:false,scheduleContextMenu:false,timeRanges:{showCurrentTimeLine:true}},// A fake resource
resources:[{id:1}],columns:[]};}}]);return Timeline;}(Scheduler);exports.Timeline=Timeline;Timeline._$name='Timeline';BryntumWidgetAdapterRegister.register(Timeline.type,Timeline);//TODO: If we want to improve on this, add settings as attributes, replace data-field with field etc.
/**
 * @module Gantt/customElements/GanttTag
 */ /**
 * Import this file to be able to use the tag **&lt;bryntum-gantt&gt;** to create a gantt. This is more of a
 * proof of concept than a ready to use class. Dataset from **&lt;bryntum-gantt&gt;** tag is
 * applied to gantt config, which means, that you can pass any documented config there, not only
 * demonstrated here. Dataset attributes are translated as follows:
 *
 *  * data-view-preset -> viewPreset
 *  * data-start-date -> startDate
 *
 *  etc.
 *
 * There is also a special attribute `data-theme` to set theme on the gantt component. If omitted, `stockholm` theme is
 * set by default.
 *
 * ## Example
 * ```
 * &lt;bryntum-gantt data-view-preset="weekAndDay" data-start-date="2018-04-02" data-end-date="2018-04-09"&gt;
 *      &lt;column data-type="name"&gt;Name&lt;/column&gt;
 *      &lt;project data-load-url="/projectdata"&gt;Name&lt;/project&gt;
 *      &lt;feature data-name="nonWorkingTime"&gt;&lt;/feature&gt;
 *      &lt;feature data-name="timeRanges" data-show-current-timeline="true"&gt;&lt;/feature&gt;
 * &lt;/bryntum-gantt&gt;
 * ```
 */var GanttTag=/*#__PURE__*/function(_ref469){_inherits2(GanttTag,_ref469);function GanttTag(){var _this163;_classCallCheck2(this,GanttTag);_this163=_possibleConstructorReturn2(this,_getPrototypeOf2(GanttTag).call(this));var me=_assertThisInitialized2(_this163),columns=[],features={};var project;// create columns and data
var _iteratorNormalCompletion97=true;var _didIteratorError97=false;var _iteratorError97=undefined;try{for(var _iterator97=me.children[Symbol.iterator](),_step97;!(_iteratorNormalCompletion97=(_step97=_iterator97.next()).done);_iteratorNormalCompletion97=true){var tag=_step97.value;if(tag.tagName==='COLUMN'){var width=parseInt(tag.dataset.width),flex=parseInt(tag.dataset.flex),column={field:tag.dataset.field,text:tag.innerHTML,type:tag.dataset.type};if(width)column.width=width;else if(flex)column.flex=flex;else column.flex=1;columns.push(column);}else if(tag.tagName==='PROJECT'){project=new ProjectModel({transport:{load:{url:tag.dataset.loadUrl}}});}else if(tag.tagName==='FEATURE'){var name=tag.dataset.name,_config=Object.assign({},tag.dataset);delete _config.name;if(Object.keys(_config).length){features[name]=_config;}else{features[name]=tag.textContent!=='false';}}}}catch(err){_didIteratorError97=true;_iteratorError97=err;}finally{try{if(!_iteratorNormalCompletion97&&_iterator97.return!=null){_iterator97.return();}}finally{if(_didIteratorError97){throw _iteratorError97;}}}var config=Object.assign({},me.dataset),theme=config.theme||'stockholm',// go over to the dark side
shadowRoot=_this163.attachShadow({mode:'open'}),// include css and target div in shadow dom
link=document.createElement('link');delete config.theme;link.rel='stylesheet';link.href="../../build/gantt.".concat(theme,".css");link.onload=function(){var div=document.createElement('div');div.id='container';div.style.width='100%';div.style.height='100%';shadowRoot.appendChild(div);// Listen to focus events on shadow root to handle focus inside the shadow dom
setupFocusListeners(shadowRoot);Object.assign(config,{appendTo:div,columns:columns,features:features,project:project});// render as usual
var gantt=new Gantt(config);if(project instanceof ProjectModel){project.load();}// for testing, set first gantt as global variable
if(!window.gantt)window.gantt=gantt;};shadowRoot.appendChild(link);return _this163;}return GanttTag;}(window.customElements?HTMLElement:Object);// Try-catch to make trial work
exports.GanttTag=GanttTag;try{window.customElements&&window.customElements.define('bryntum-gantt',GanttTag);}catch(error){}GanttTag._$name='GanttTag';/* eslint-disable */ // leave in, comment removed in bryntum-loader. also needs to go at top since polyfill is used by other code
//import "nodelist-foreach-polyfill";
if(!window.bryntum)window.bryntum={};
